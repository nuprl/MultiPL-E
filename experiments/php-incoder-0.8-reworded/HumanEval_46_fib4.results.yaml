language: php
name: HumanEval_46_fib4
results:
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n <= 3) {\n    return\
    \ $n;\n  }\n  return fib4($n - 4) + fib4($n - 3) + fib4($n - 2) + fib4($n - 1);\n\
    }\n</code>\nMy approach would be to write a helper function which does what fib4\
    \ does. And then call the helper function recursively. The return value of the\
    \ recursive call will be the answer you want.\n<|/ a dscore=1 |>\n<| c |>\nYes,\
    \ I know the Fibbonacci sequence. But I wanted to see how recursion was used.\
    \ That was my question.\n<|/ c |>\n<| a |>\nHere's my approach:\n<code>\n<?php\n\
    \nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpd6fq3jmm.php
    on line 21

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        return\
    \ 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    if ($n <= 5) {\n\
    \        return 2;\n    }\n    if ($n <= 10) {\n        return 1;\n    }\n\n \
    \   $sum = 0;\n    for ($i = 5; $i <= $n; $i++) {\n        $sum = $sum + fib4($i-1);\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr90w_chx.php:41\n\
    Stack trace:\n#0 /tmp/tmpr90w_chx.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpr90w_chx.php\
    \ on line 41\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$a = 0;\n\t$b = 0;\n\t$c =\
    \ 1;\n\t$d = 1;\n\n\tfor($i=0;$i<$n;$i++) {\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t\
    $c = $d;\n\t\t$d = $a + $b + $c + $d;\n\t}\n\n\treturn $d;\n}\n\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpco67gyue.php:37\n\
    Stack trace:\n#0 /tmp/tmpco67gyue.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpco67gyue.php\
    \ on line 37\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n   if ($n < 2) return $n;\n\
    \   return fib4(\n      $n - 1) + fib4(\n      $n - 2) + fib4(\n      $n - 3)\
    \ + fib4(\n      $n - 4) + fib4(\n      $n - 5);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgls0z19n.php:29\n\
    Stack trace:\n#0 /tmp/tmpgls0z19n.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpgls0z19n.php\
    \ on line 29\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 1) return 0;\n\
    \    if ($n === 2) return 2;\n    if ($n === 3) return 0;\n    if ($n === 4) return\
    \ 1;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6wk8l4dn.php:27\n\
    Stack trace:\n#0 /tmp/tmp6wk8l4dn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6wk8l4dn.php\
    \ on line 27\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) return 0;\n\
    \    if ($n === 1) return 1;\n    if ($n === 2) return 2;\n    if ($n === 3) return\
    \ 3;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nVery nice solution sir. I was stuck with\
    \ this problem for many hours. Thank you.\n<|/ c |>\n<| c |>\nThis is amazing!\
    \ But how would I do this in javascript?\n<|/ c |>\n<| c |>\n`fib4`'s time complexity\
    \ is O(2^n) because of the `if` statements. This is **not** a good solution in\
    \ general.\n<|/ c |>\n<| c |>\nThanks for pointing that out.  I was able to reduce\
    \ it to `O(n)` by dropping the `if` statements and replacing `fib4` with `function\
    \ fib4($n) { return $n <= 1 ? 1 : fib4($n - 1) + fib4($n - 2) + fib4($n - 3) +\
    \ fib4($n - 4); }`.  I'll leave this answer here, because it helps explain why\
    \ this particular problem doesn't have a solution that runs in `O(n)` time.\n\
    <|/ c |>\n<| c |>\nThis is a wonderful answer. Thanks so much for the solution\
    \ and the time efficiency.\n<|/ c |>\n<| a tags=fibonacci,recursion,php |>\nHere\
    \ is a solution in JavaScript which returns 0 at the end to avoid counting 0 as\
    \ an element in the sequence. \n<code>\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpjsiqpryj.php
    on line 22

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n == 0) return 0;\n \
    \ if ($n == 1) return 0;\n  if ($n == 2) return 2;\n  return fib4(4) + fib4(5)\
    \ + fib4(6);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpd7lq36zk.php on line 19

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $sum = 0;\n  for ($i = 0;\
    \ $i < $n; $i++) {\n    $sum += fib4($n - $i);\n  }\n  return $sum;\n}\nfib4(20);\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp58xoiohy.php on line 18

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $f = [];\n    $f[0] = 0;\n\
    \    $f[1] = 0;\n    $f[2] = 0;\n    $f[3] = 0;\n    for($i = 0; $i <= $n; $i++)\
    \ {\n        $f[3] = $f[3] + $f[2] + $f[1] + $f[0];\n        $f[0] = $f[1];\n\
    \        $f[1] = $f[2];\n        $f[2] = $f[3];\n    }\n    return $f[$n];\n}\n\
    \nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 5 in /tmp/tmpxp4625ku.php on line 27\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpxp4625ku.php:35\nStack\
    \ trace:\n#0 /tmp/tmpxp4625ku.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxp4625ku.php\
    \ on line 35\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return fib2($n) + fib3($n)\
    \ + fib1($n);\n}\n</code>\nAnd that's what it looks like in code:\n<code>\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp4yxrndjp.php
    on line 18

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$counter = 0;\n\tfor ($x =\
    \ 0; $x < $n; $x++) {\n\t\t$counter++;\n\t}\n\treturn $counter;\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd42fs5v4.php:28\n\
    Stack trace:\n#0 /tmp/tmpd42fs5v4.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpd42fs5v4.php\
    \ on line 28\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n <= 2) {\n    return\
    \ 0;\n  } else if ($n === 3) {\n    return 4;\n  } else {\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqg5vo5jp.php:29\n\
    Stack trace:\n#0 /tmp/tmpqg5vo5jp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpqg5vo5jp.php\
    \ on line 29\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return $n % 2 == 0\n   \
    \     ? 0\n        : $n % 3 == 0\n            ? 0\n            : fib4($n - 1)\
    \ + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Unparenthesized `a ? b : c ? d : e` is not supported. Use either
    `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp_wpqvjcm.php on line
    16

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = array(0);\n    if($n\
    \ <= 2) {\n        $fib4[0] = 0;\n        $fib4[1] = 0;\n    }\n    else if($n>2\
    \ && $n<=4) {\n        $fib4[0] = 0;\n        $fib4[1] = 1;\n    }\n    else if($n>4\
    \ && $n<=8) {\n        $fib4[0] = 0;\n        $fib4[1] = 1;\n        $fib4[2]\
    \ = 1;\n    }\n    else if($n>8 && $n<=16) {\n        $fib4[0] = 0;\n        $fib4[1]\
    \ = 1;\n        $fib4[2] = 1;\n        $fib4[3] = 2;\n    }\n    else if($n>16\
    \ && $n<=32) {\n        $fib4[0] = 0;\n        $fib4[1] = 1;\n        $fib4[2]\
    \ = 1;\n        $fib4[3] = 2;\n        $fib4[4] = 1;\n    }\n    else if($n>32\
    \ && $n<=64) {\n        $fib4[0] = 0;\n        $fib4[1] = 1;\n        $fib4[2]\
    \ = 1;\n        $fib4[3] = 2;\n        $fib4[4] = 1;\n        $fib4[5] = 3;\n\
    \    }\n    else if($n>64 && $n<=128) {\n        $fib4[0] = 0;\n        $fib4[1]\
    \ = 1;\n        $fib4[2] = 1;\n        $fib4[3] = 2;\n        $fib4[4] = 1;\n\
    \        $fib4[5] = 3;\n        $fib4[6] = 1;\n    }\n    return $fib4[$n];\n\
    }\n</code>\n<|/ a dscore=1 tags=php,fibonacci,php-5.6,fibonacci-heap |>\n<| a\
    \ dscore=0 |>\nHere's a more efficient implementation for calculating the Nth\
    \ Fibonacci number:\n<code>\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpc_hp774h.php
    on line 62

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n<=1) {\n        return\
    \ 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr9ukujea.php:26\n\
    Stack trace:\n#0 /tmp/tmpr9ukujea.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpr9ukujea.php\
    \ on line 26\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n <= 0) {\n\t\treturn\
    \ 0;\n\t} else {\n\t\treturn fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n\t}\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprbikddq3.php:27\n\
    Stack trace:\n#0 /tmp/tmprbikddq3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprbikddq3.php\
    \ on line 27\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $rem = $n;\n  $sum = 0;\n\
    \  do {\n    if ($rem == 0) {\n      $sum = $sum + $rem;\n      $rem = 0;\n  \
    \  } else {\n      $sum = $sum + $rem;\n      $rem = $rem - 1;\n    }\n  } while\
    \ ($rem);\n  return $sum;\n}\n<|/ file source=github |>\n<| a |>\nThe Fib4 number\
    \ sequence is a sequence similar to the Fibbonacci sequnece that's defined as\
    \ follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) ->\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \nFor this particular problem I ended up using the following code (thanks to Kai\
    \ Benk for providing the solution):\n<code>\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmphvkl5aos.php
    on line 29

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n === 0 || $n === 1)\
    \ {\n\t\treturn $n;\n\t} else {\n\t\treturn fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n\t}\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpwuw4oz_4.php on line 19

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n <= 2) {\n\t\treturn\
    \ 0;\n\t}\n\tif ($n === 4) {\n\t\treturn 4;\n\t}\n\tif ($n === 7) {\n\t\treturn\
    \ 8;\n\t}\n\tif ($n <= 6) {\n\t\treturn fib4(6) + fib4(7);\n\t}\n\treturn fib4(5)\
    \ + fib4(6);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpu8elph11.php on line 26

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $sum = 0;\n  for($i = 2; $i\
    \ <= $n; $i++) {\n    $sum = $sum + $i;\n  }\n  return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5tcuq2np.php:27\n\
    Stack trace:\n#0 /tmp/tmp5tcuq2np.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5tcuq2np.php\
    \ on line 27\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n == 0) {\n\t\treturn\
    \ 0;\n\t}\n\tif ($n == 1) {\n\t\treturn 1;\n\t}\n\tif ($n == 2) {\n\t\treturn\
    \ 2;\n\t}\n\tif ($n == 3) {\n\t\treturn 0;\n\t}\n\treturn fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n \
    \   return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgr522si0.php:36\n\
    Stack trace:\n#0 /tmp/tmpgr522si0.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpgr522si0.php\
    \ on line 36\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0 || $n === 1)\
    \ {\n        return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp0risjy7d.php on line 19

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib4 = $n;\n\tif ($n < 4)\n\
    \t\t$fib4 = 0;\n\telse if ($n > 4)\n\t\t$fib4 = fib4($n - 1) + fib4($n - 2) +\
    \ fib4($n - 3) + fib4($n - 4);\n\treturn $fib4;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ry1h9_8.php:30\n\
    Stack trace:\n#0 /tmp/tmp1ry1h9_8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1ry1h9_8.php\
    \ on line 30\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = new Fib4(4);\n  \
    \  return $fib->getFib4($n);\n}\n\nclass Fib4 {\n    private $n, $fib;\n\n   \
    \ public function __construct($n) {\n        $this->n = $n;\n        $this->fib\
    \ = 0;\n    }\n\n    public function getFib4($n) {\n        if ($n == 0) {\n \
    \           return 0;\n        } elseif ($n == 1) {\n            return 0;\n \
    \       } elseif ($n == 2) {\n            return 2;\n        } elseif ($n == 3)\
    \ {\n            return 0;\n        } elseif ($n == 4) {\n            return 1;\n\
    \        } elseif ($n == 5) {\n            return 4;\n        } elseif ($n ==\
    \ 6) {\n            return 8;\n        } elseif ($n == 7) {\n            return\
    \ 14;\n        } elseif ($n == 8) {\n            return 15;\n        } elseif\
    \ ($n == 9) {\n            return 16;\n        } elseif ($n == 10) {\n       \
    \     return 17;\n        } elseif ($n == 11) {\n            return 21;\n    \
    \    } elseif ($n == 12) {\n            return 28;\n        } elseif ($n == 13)\
    \ {\n            return 47;\n        } elseif ($n == 14) {\n            return\
    \ 62;\n        } elseif ($n == 15) {\n            return 127;\n        } elseif\
    \ ($n == 16) {\n            return 331;\n        } elseif ($n == 17) {\n     \
    \       return 611;\n        } elseif ($n == 18) {\n            return 1263;\n\
    \        } elseif ($n == 19) {\n            return 2585;\n        } elseif ($n\
    \ == 20) {\n            return 5143;\n        } elseif ($n == 21) {\n        \
    \    return 10307;\n        } elseif ($n == 22) {\n            return 20649;\n\
    \        } elseif ($n == 23) {\n            return 43981;\n        } elseif ($n\
    \ == 24) {\n            return 87559;\n        } elseif ($n == 25) {\n       \
    \     return 172997;\n        } elseif ($n == 26) {\n            return 359635;\n\
    \        } elseif ($n == 27) {\n            return 714132;\n        } elseif ($n\
    \ == 28) {\n            return 124629;\n        } elseif ($n == 29) {\n      \
    \      return 241562;\n        } elseif ($n == 30) {\n            return 490103;\n\
    \        } elseif ($n == 31) {\n            return 987207;\n        } elseif ($n\
    \ == 32) {\n            return 199364;\n        } elseif ($n == 33) {\n      \
    \      return 384021;\n        } elseif ($n == 34) {\n            return 762535;\n\
    \        } elseif ($n == 35) {\n            return 1537289;\n        } elseif\
    \ ($n == 36) {\n            return 3086487\nfunction candidate(...$args) {\n \
    \   return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ";" in /tmp/tmp9ga8971n.php
    on line 103

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n === 0) {\n\t\treturn\
    \ 0;\n\t}\n\tif ($n === 1) {\n\t\treturn 1;\n\t}\n\treturn fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n \
    \   return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpistadgyc.php on line 22

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 0) {\n    return\
    \ 0;\n  }\n  if ($n <= 1) {\n    return $n;\n  }\n  if ($n <= 3) {\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3);\n  }\n  return fib4($n - 4) + fib4($n\
    \ - 3) + fib4($n - 2);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptog7ugrm.php:34\n\
    Stack trace:\n#0 /tmp/tmptog7ugrm.php(39): test()\n#1 {main}\n  thrown in /tmp/tmptog7ugrm.php\
    \ on line 34\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\treturn $n == 0 ? 0 : $n ==\
    \ 1 ? 0 : $n == 2 ? 2 : $n == 3 ? 0 : $n < 3 ? fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4) : fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n -\
    \ 4) + fib4($n - 5) + fib4($n - 6);\n}\necho fib4(6);\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Unparenthesized `a ? b : c ? d : e` is not supported. Use either
    `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp6vhku9cf.php on line
    16

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n<=1) {\n\t\treturn 0;\n\
    \t} else if ($n===2) {\n\t\treturn 2;\n\t} else if ($n===3) {\n\t\treturn 0;\n\
    \t} else if ($n===4) {\n\t\treturn 1;\n\t} else {\n\t\treturn fib4($n-1) + fib4($n-2)\
    \ + fib4($n-3) + fib4($n-4);\n\t}\n}\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqh9cnqob.php:33\n\
    Stack trace:\n#0 /tmp/tmpqh9cnqob.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpqh9cnqob.php\
    \ on line 33\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n==0) {\n    return 0;\n\
    \  }\n  if ($n==1) {\n    return 1;\n  }\n  return fib4($n-1) + fib4($n-2)+ fib4($n-3)+\
    \ fib4($n-4);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nYou should not add the\
    \ same answer as to other questions.\n<|/ c |>\n<| c |>\nThis is not an answer\
    \ to the question, it's more of a discussion. Add comments when you think you\
    \ have a better solution.\n<|/ c |>\n<| c |>\n- I didn't realize the original\
    \ question was quite a duplicate. The discussion is useful.\n<|/ c |>\n<| a tags=algorithm,php\
    \ |>\nRecursion is indeed a lot faster and elegant:\n<code>\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp4rvd982r.php
    on line 24

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $f = array(0,1,1,2,3);\n\
    \    return $f[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 5 in /tmp/tmp0vp3cj6s.php on line 17\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp0vp3cj6s.php:25\nStack\
    \ trace:\n#0 /tmp/tmp0vp3cj6s.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp0vp3cj6s.php\
    \ on line 25\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) throw new Exception(\"\
    fib4: n must be a positive integer\");\n    if ($n < 3) return $n;\n    return\
    \ fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: fib4: n must be a positive integer in\
    \ /tmp/tmp38s2hxft.php:16\nStack trace:\n#0 /tmp/tmp38s2hxft.php(18): fib4(-1)\n\
    #1 /tmp/tmp38s2hxft.php(18): fib4(3)\n#2 /tmp/tmp38s2hxft.php(18): fib4(4)\n#3\
    \ /tmp/tmp38s2hxft.php(21): fib4(5)\n#4 /tmp/tmp38s2hxft.php(25): candidate(5)\n\
    #5 /tmp/tmp38s2hxft.php(31): test()\n#6 {main}\n  thrown in /tmp/tmp38s2hxft.php\
    \ on line 16\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3);\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkkeu2433.php:27\n\
    Stack trace:\n#0 /tmp/tmpkkeu2433.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkkeu2433.php\
    \ on line 27\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $numbers = [];\n  if ($n ==\
    \ 0) {\n    $numbers[] = 0;\n  } else {\n    $numbers[] = fib4($n - 1);\n    $numbers[]\
    \ = fib4($n - 2);\n    $numbers[] = fib4($n - 3);\n    $numbers[] = fib4($n -\
    \ 4);\n  }\n  return $numbers[$n];\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpexc4ke2_.php on line 20

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fib4 = 0;\n  for ($i = 0;\
    \ $i < $n; $i++) {\n    $fib4 += $fib4 * ($i + 1);\n  }\n  return $fib4;\n}\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8l4a4bdd.php:28\n\
    Stack trace:\n#0 /tmp/tmp8l4a4bdd.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp8l4a4bdd.php\
    \ on line 28\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = array(1, 0, 1, 1,\
    \ 0);\n    return $fib[$n];\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 5 in /tmp/tmpgela9lt7.php on line 17\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpgela9lt7.php:24\nStack\
    \ trace:\n#0 /tmp/tmpgela9lt7.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpgela9lt7.php\
    \ on line 24\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ echo 0;\n    }\n    if ($n == 1) {\n        echo 0;\n    }\n    if ($n == 2)\
    \ {\n        echo 2;\n    }\n    if ($n == 3) {\n        echo 0;\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n<2) return 0;\n  \
    \  if ($n<3) return 1;\n    if ($n<4) return 1;\n    if ($n<6) return 2;\n   \
    \ return fib4($n-5) + fib4($n-4) + fib4($n-3) + fib4($n-3);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fs6wxbl.php:28\n\
    Stack trace:\n#0 /tmp/tmp1fs6wxbl.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1fs6wxbl.php\
    \ on line 28\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  // Your code here...\n  $fib\
    \ = [];\n  if ($n === 0 || $n === 1 || $n === 2) {\n    $fib[] = $n;\n    return\
    \ $fib;\n  }\n\n  for ($i = 4; $i < count($fib); $i++) {\n    $fib[] = $fib[$i\
    \ - 1] + $fib[$i - 2] + $fib[$i - 3] + $fib[$i - 4];\n  }\n\n  return $fib[$n];\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 5 in /tmp/tmpiga_t6_5.php on line 27\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpiga_t6_5.php:35\nStack\
    \ trace:\n#0 /tmp/tmpiga_t6_5.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpiga_t6_5.php\
    \ on line 35\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) return 0;\n\
    \    if ($n === 1) return 0;\n    if ($n === 2) return 2;\n    if ($n === 3) return\
    \ 0;\n    if ($n === 4) return 0;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n$a = [1,2,3,4]\n$a = fib4(3)\nvar_dump($a);\n$a = fib4(4)\n\
    var_dump($a);\n$a = fib4(5)\nvar_dump($a);\n$a = fib4(6)\nvar_dump($a);\n$a =\
    \ fib4(7)\nvar_dump($a);\n$a = fib4(10)\nvar_dump($a);\n$a = fib4(11)\nvar_dump($a);\n\
    $a = fib4(12)\nvar_dump($a);\n$a = fib4(13)\nvar_dump($a);\n$a = fib4(15)\nvar_dump($a);\n\
    $a = fib4(16)\nvar_dump($a);\n$a = fib4(17)\nvar_dump($a);\n$a = fib4(18)\nvar_dump($a);\n\
    $a = fib4(19)\nvar_dump($a);\n$a = fib4(20)\nvar_dump($a);\n$a = fib4(21)\nvar_dump($a);\n\
    $a = fib4(22)\nvar_dump($a);\n$a = fib4(23)\nvar_dump($a);\n$a = fib4(24)\nvar_dump($a);\n\
    $a = fib4(25)\nvar_dump($a);\n$a = fib4(26)\nvar_dump($a);\n$a = fib4(27)\nvar_dump($a);\n\
    $a = fib4(28)\nvar_dump($a);\n$a = fib4(29)\nvar_dump($a);\n$a = fib4(30)\nvar_dump($a);\n\
    $a = fib4(31)\nvar_dump($a);\n$a = fib4(32)\nvar_dump($a);\n$a = fib4(33)\nvar_dump($a);\n\
    $a = fib4(34)\nvar_dump($a);\n$a = fib4(35)\nvar_dump($a);\n$a = fib4(36)\nvar_dump($a);\n\
    $a = fib4(37)\nvar_dump($a);\n$a = fib4(38)\nvar_dump($a);\n$a = fib4(39)\nvar_dump($a);\n\
    $a = fib4(40)\nvar_dump($a);\n$a = fib4(41)\nvar_dump($a);\n$a = fib4(42)\nvar_dump($a);\n\
    $a = fib4(43)\nvar_dump($a);\n$a = fib4(44)\nvar_dump($a);\n$\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected variable "$a" in /tmp/tmpoc9d99pn.php on
    line 24

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n===0)\n\t\treturn 0;\n\
    \tif ($n===1)\n\t\treturn 1;\n\tif ($n===2)\n\t\treturn 2;\n\tif ($n===3)\n\t\t\
    return 0;\n\treturn fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5hsyl20o.php:31\n\
    Stack trace:\n#0 /tmp/tmp5hsyl20o.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5hsyl20o.php\
    \ on line 31\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 4) {\n    return\
    \ 0;\n  }\n  return fib4($n - 4) + fib4($n - 3) + fib4($n - 2) + fib4($n - 1);\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplzpu574g.php:26\n\
    Stack trace:\n#0 /tmp/tmplzpu574g.php(32): test()\n#1 {main}\n  thrown in /tmp/tmplzpu574g.php\
    \ on line 26\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 4) {\n       \
    \ return 4;\n    }\n    if ($n == 8) {\n        return 8;\n    }\n    if ($n ==\
    \ 14) {\n        return 14;\n    }\n    $ret1 = fib4($n - 1);\n    $ret2 = fib4($n\
    \ - 2);\n    $ret3 = fib4($n - 3);\n    $ret4 = fib4($n - 4);\n    return $ret1\
    \ + $ret2 + $ret3 + $ret4;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp3u98nay7.php on line 25

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) return 0;\n\
    \    if ($n === 1) return 0;\n    if ($n === 2) return 2;\n    if ($n === 3) return\
    \ 0;\n    if ($n === 4) return 4;\n\n    $f4 = fib4($n - 2);\n    $f3 = fib4($n\
    \ - 3);\n    $f2 = fib4($n - 4);\n    return $f4 + $f3 + $f2 + $f4;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI really want to see some code! How would you do it?\
    \ Recursion is not allowed.\n<|/ c |>\n<| c |>\nHi Patrick - I gave you the answer\
    \ in the comments of your post.  If you really want to have code in your question\
    \ I would ask a new question - I don't want to get any downvotes or close votes\
    \ for this.\n<|/ c |>\n<| a |>\n<code>\n<?php\n/**\n * Fib number sequence in\
    \ PHP\n *\n * Fib number sequence is a sequence similar to the Fibbonacci sequence\
    \ that's defined as follows:\n * fib(0) -> 0\n * fib(1) -> 0\n * fib(2) -> 2\n\
    \ * fib(3) -> 0\n * fib(n) -> fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4).\n\
    \ * Please write a function to efficiently compute the n-th element of the fib\
    \ number sequence.  Do not use recursion.\n *\n * int $n The number of the element\
    \ to compute\n * int $a The first element of the sequence\n * int $b The second\
    \ element of the sequence\n * int $c The third element of the sequence\n * int\
    \ $d The fourth element of the sequence\n * int\n */\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpn794_7wb.php
    on line 27

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n < 0) return null;\n\
    \tif ($n == 0) return 0;\n\tif ($n == 1) return 1;\n\treturn fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n}\n</code>\nAs for your \"Why does this\
    \ work\", it's a long answer that's hard to write.  My advice would be to just\
    \ do some practice with small cases.  For example fib3(5) should give you 6, because\
    \ it's really hard to write functional programs without recursion.  So you might\
    \ as well try fib4(5) and see what happens.  You'll then have some code lying\
    \ around, and a better understanding of how computers work.\n<|/ a |>\n<| c |>\n\
    `fib3(5)` gives `6`, not `7`\n<|/ c |>\n<| c |>\nOops, my mistake.  I fixed it.\n\
    <|/ c |>\n<| c |>\nSo what about memoization? Isn't it like implementing a hashtable?\n\
    <|/ c |>\n<| c |>\nNope, not like that.  Memoization involves storing the results\
    \ you've already computed.  It's a form of caching.  Memoization isn't about caching\
    \ results from an expensive function; it's about caching data that has been previously\
    \ computed.  You can think of memoization as a form of caching.\n<|/ c |>\n<|\
    \ c |>\nmemoization doesn't require any extra memory. It requires storing some\
    \ kind of data structure to store previously calculated values. When you call\
    \ a function to calculate fib again, it checks for previously calculated value\
    \ of fib that you have stored. If there is a value, it return it from cache. If\
    \ not, it will compute fib again and store it in cache. So when you call fib,\
    \ it checks for value stored in cache before calling function fib.\n<|/ c |>\n\
    <| a tags=algorithm,big-o,time-complexity,php |>\nI wanted to know if PHP's implementation\
    \ of Fibonacci sequence can be made faster?\n\nYou can easily do better than O(n)\
    \ by using the \"memoization\" principle, which is a fancy name for a \"dictionary\"\
    \ data structure, which is like a hashtable. When you call a recursive function\
    \ multiple times, the recursive call first looks at the dictionary to see if you've\
    \ already calculated the value for that parameter before.\nIn this case, the dictionary\
    \ would be: \n<code>\n$memo = array();\n$memo[0] = 0;\n$memo[1] = 1;\n</code>\n\
    The above is just a simple example. You'd probably want to do something more clever,\
    \ but you can see the point of this technique in the following examples:\n<code>\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpmcs2eybr.php
    on line 21

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n === 0) {\n\t\treturn\
    \ 0;\n\t} else if ($n === 1) {\n\t\treturn 1;\n\t} else if ($n === 2) {\n\t\t\
    return 2;\n\t} else if ($n === 3) {\n\t\treturn 0;\n\t} else if ($n >= 4 && $n\
    \ <= 9) {\n\t\treturn fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    \t} else if ($n >= 10 && $n <= 17) {\n\t\treturn fib4($n - 1) + fib4($n - 2) +\
    \ fib4($n - 3) + fib4($n - 4) + fib4($n - 5);\n\t} else if ($n >= 18 && $n <=\
    \ 49) {\n\t\treturn fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4)\
    \ + fib4($n - 5) + fib4($n - 6);\n\t} else if ($n >= 50 && $n <= 125) {\n\t\t\
    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4) + fib4($n - 5)\
    \ + fib4($n - 6) + fib4($n - 7);\n\t} else if ($n >= 126 && $n <= 250) {\n\t\t\
    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4) + fib4($n - 5)\
    \ + fib4($n - 6) + fib4($n - 7) + fib4($n - 8);\n\t} else if ($n >= 251 && $n\
    \ <= 425) {\n\t\treturn fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n -\
    \ 4) + fib4($n - 5) + fib4($n - 6) + fib4($n - 7) + fib4($n - 8) + fib4($n - 9);\n\
    \t} else if ($n >= 426 && $n <= 861) {\n\t\treturn fib4($n - 1) + fib4($n - 2)\
    \ + fib4($n - 3) + fib4($n - 4) + fib4($n - 5) + fib4($n - 6) + fib4($n - 7) +\
    \ fib4($n - 8) + fib4($n - 9) + fib4($n - 10);\n\t} else if ($n >= 862 && $n <=\
    \ 1749) {\n\t\treturn fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4)\
    \ + fib4($n - 5) + fib4($n - 6) + fib4($n - 7) + fib4($n - 8) + fib4($n - 9) +\
    \ fib4($n - 10) + fib4($n - 11);\n\t} else if ($n >= 1750 && $n <= 2861) {\n\t\
    \treturn fib4($n - 1) + fib4($n - 2) + \nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpkik47f9r.php on line 42

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfofy5l4v.php:30\n\
    Stack trace:\n#0 /tmp/tmpfofy5l4v.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfofy5l4v.php\
    \ on line 30\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        echo\
    \ 'fib4 can not return negative numbers!';\n    }\n    if ($n === 0) return 0;\n\
    \    if ($n === 1) return 1;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: 'fib4 can not return negative numbers!fib4 can not return negative numbers!fib4
    can not return negative numbers!fib4 can not return negative numbers!fib4 can
    not return negative numbers!fib4 can not return negative numbers!fib4 can not
    return negative numbers!fib4 can not return negative numbers!fib4 can not return
    negative numbers!fib4 can not return negative numbers!fib4 can not return negative
    numbers!fib4 can not return negative numbers!fib4 can not return negative numbers!fib4
    can not return negative numbers!fib4 can not return negative numbers!fib4 can
    not return negative numbers!fib4 can not return negative numbers!fib4 can not
    return negative numbers!fib4 can not return negative numbers!fib4 can not return
    negative numbers!fib4 can not return negative numbers!fib4 can not return negative
    numbers!fib4 can not return negative numbers!fib4 can not return negative numbers!fib4
    can not return negative numbers!fib4 can not return negative numbers!fib4 can
    not return negative numbers!fib4 can not return negative numbers!fib4 can not
    return negative numbers!fib4 can not return negative numbers!fib4 can not return
    negative numbers!fib4 can not return negative numbers!fib4 can not return negative
    numbers!fib4 can not return negative numbers!fib4 can not return negative numbers!fib4
    can not return negative numbers!fib4 can not return negative numbers!fib4 can
    not return negative numbers!fib4 can not return negative numbers!fib4 can not
    return negative numbers!fib4 can not return negative numbers!fib4 can not return
    negative numbers!fib4 can not return negative numbers!fib4 can not return negative
    numbers!fib4 can not return negative numbers!fib4 can not return negative numbers!fib4
    can not return negative numbers!fib4 can not return negative numbers!fib4 can
    not return negative numbers!fib4 can not return negative numbers!fib4 can not
    return negative numbers!fib4 can not return negative numbers!fib4 can not return
    negative numbers!fib4 can not return negative numbers!fib4 can not return negative
    numbers!fib4 can not '
  timestamp: 1659979389
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $result = $n;\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        $result = $result + $i;\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx0ip_h70.php:27\n\
    Stack trace:\n#0 /tmp/tmpx0ip_h70.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpx0ip_h70.php\
    \ on line 27\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 0) return null;\n\
    \  if ($n == 0) return 0;\n  if ($n == 1) return 1;\n  if ($n == 2) return 2;\n\
    \  if ($n == 3) return 0;\n\n  $prev = $fib4($n - 4);\n\n  return $prev + $prev\
    \ + $prev + $prev;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $fib4 in /tmp/tmprr09in97.php on line 22\n\
    \nFatal error: Uncaught Error: Value of type null is not callable in /tmp/tmprr09in97.php:22\n\
    Stack trace:\n#0 /tmp/tmprr09in97.php(28): fib4(5)\n#1 /tmp/tmprr09in97.php(32):\
    \ candidate(5)\n#2 /tmp/tmprr09in97.php(38): test()\n#3 {main}\n  thrown in /tmp/tmprr09in97.php\
    \ on line 22\n"
  timestamp: 1659979387
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n==0)return 0;\n  if\
    \ ($n==1)return 0;\n  if ($n==2)return 2;\n  if ($n==3)return 0;\n  return fib4($n-1)\
    \ + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fib = array(0, 0, 0, 0, 0,\
    \ 0);\n  $fib[2] = 2;\n  for ($i = 0; $i < $n; $i++) {\n    for ($j = $i - 1;\
    \ $j > 0; $j--) {\n      $fib[3] = $fib[2] + $fib[3];\n      $fib[4] = $fib[3]\
    \ + $fib[4];\n    }\n    $fib[0] = $fib[1] + $fib[4];\n    $fib[1] = $fib[0] +\
    \ $fib[3];\n    $fib[2] = $fib[0] - $fib[1];\n  }\n  return $fib[0];\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt1qpt0sg.php:34\n\
    Stack trace:\n#0 /tmp/tmpt1qpt0sg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpt1qpt0sg.php\
    \ on line 34\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0)\n        return\
    \ 0;\n    if ($n == 1)\n        return 0;\n    if ($n == 2)\n        return 2;\n\
    \    if ($n == 3)\n        return 0;\n    return fib4($n - 1) + fib4($n - 2) +\
    \ fib4($n - 3) + fib4($n - 4);\n}\n</code>\n<|/ q dscore=0 tags=php,algorithm\
    \ |>\n<| a |>\nYour code doesn't work because you call fib4() with a number that\
    \ doesn't have an associated fib4 value so $fib is always set to null and you\
    \ get a warning from PHP. \nYou should use an array instead:\n<code>\n$fib = [];\n\
    $fib[0] = 0;\n$fib[1] = 0;\n$fib[2] = 2;\n$fib[3] = 0;\n$fib[4] = 0;\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp9q8c8kva.php
    on line 26

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) return $n;\n\
    \    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpunf4hiqp.php:25\n\
    Stack trace:\n#0 /tmp/tmpunf4hiqp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpunf4hiqp.php\
    \ on line 25\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 4) + fib4($n - 3) + fib4($n - 2) + fib4($n\
    \ - 1);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpka2_2kck.php:26\n\
    Stack trace:\n#0 /tmp/tmpka2_2kck.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpka2_2kck.php\
    \ on line 26\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 4) {\n      \
    \  return 0;\n    }\n    if ($n === 5) {\n        return 0;\n    }\n    if ($n\
    \ === 6) {\n        return 2;\n    }\n    if ($n === 7) {\n        return 0;\n\
    \    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp_ryy6dy.php:36\n\
    Stack trace:\n#0 /tmp/tmpp_ryy6dy.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpp_ryy6dy.php\
    \ on line 36\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n <= 0)\n    return 0;\n\
    \  if ($n <= 3)\n    return 0;\n  return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3z3sxnf.php:27\n\
    Stack trace:\n#0 /tmp/tmpa3z3sxnf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpa3z3sxnf.php\
    \ on line 27\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n \
    \   return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpv6l9nrl1.php on line 16

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $result = $fib4_cache[$n];\n\
    \    if ($result) return $result;\n    if ($n == 0) {\n        return 0;\n   \
    \ }\n    $fib4_cache[$n] = fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n    return $fib4_cache[$n];\n}\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Warning: Undefined variable $fib4_cache in /tmp/tmp6wwq_ieh.php on line 16


    Warning: Trying to access array offset on value of type null in /tmp/tmp6wwq_ieh.php
    on line 16


    Warning: Undefined variable $fib4_cache in /tmp/tmp6wwq_ieh.php on line 16


    Warning: Trying to access array offset on value of type null in /tmp/tmp6wwq_ieh.php
    on line 16


    Warning: Undefined variable $fib4_cache in /tmp/tmp6wwq_ieh.php on line 16


    Warning: Trying to access array offset on value of type null in /tmp/tmp6wwq_ieh.php
    on line 16


    Warning: Undefined variable $fib4_cache in /tmp/tmp6wwq_ieh.php on line 16


    Warning: Trying to access array offset on value of type null in /tmp/tmp6wwq_ieh.php
    on line 16


    Warning: Undefined variable $fib4_cache in /tmp/tmp6wwq_ieh.php on line 16


    Warning: Trying to access array offset on value of type null in /tmp/tmp6wwq_ieh.php
    on line 16


    Warning: Undefined variable $fib4_cache in /tmp/tmp6wwq_ieh.php on line 16


    Warning: Trying to access array offset on value of type null in /tmp/tmp6wwq_ieh.php
    on line 16


    Warning: Undefined variable $fib4_cache in /tmp/tmp6wwq_ieh.php on line 16


    Warning: Trying to access array offset on value of type null in /tmp/tmp6wwq_ieh.php
    on line 16


    Warning: Undefined variable $fib4_cache in /tmp/tmp6wwq_ieh.php on line 16


    Warning: Trying to access array offset on value of type null in /tmp/tmp6wwq_ieh.php
    on line 16


    Warning: Undefined variable $fib4_cache in /tmp/tmp6wwq_ieh.php on line 16


    Warning: Trying to access array offset on value of type null in /tmp/tmp6wwq_ieh.php
    on line 16


    Warning: Undefined variable $fib4_cache in /tmp/tmp6wwq_ieh.php on line 16


    Warning: Trying to access array offset on value of type null in /tmp/tmp6wwq_ieh.php
    on line 16


    Warning: Undefined variable $fib4_cache in /tmp/tmp6wwq_ieh.php on line 16


    Warning: Trying to access array offset on value of type null in /tmp/tmp6wwq_ieh.php
    on line 16


    Warning: Undefined variable $fib4_cache in /tmp/tmp6wwq_ieh.php on line 16


    Warning: Trying to access array offset on value of type null in /tmp'
  timestamp: 1659979390
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // Write your code here\n\
    \    if($n==0) return 0;\n    if($n==1) return 0;\n    if($n==2) return 2;\n \
    \   if($n==3) return 0;\n    if($n==4) return 2;\n    if($n==5) return 4;\n  \
    \  return fib4($n-1)+fib4($n-2)+fib4($n-3)+fib4($n-4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) return 0;\n\
    \    if ($n < 8) return $n;\n    return fib4($n-4) + fib4($n-3) + fib4($n-2)+fib4($n-1);\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyorj59vd.php:26\n\
    Stack trace:\n#0 /tmp/tmpyorj59vd.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpyorj59vd.php\
    \ on line 26\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  return $n <= 3 ? 0 : $n <\
    \ 5 ? $n : fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4); \n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Unparenthesized `a ? b : c ? d : e` is not supported. Use either
    `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpiuum9_1w.php on line
    16

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) return 0;\n\
    \    if ($n == 1) return 1;\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) +\
    \ fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpc1fim305.php on line 18

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 1) {\n        return\
    \ 0;\n    }\n\n    if ($n <= 3) {\n        return ($n - 1) * 6;\n    }\n\n   \
    \ if ($n <= 6) {\n        return ($n - 1) * 6 + fib4(n - 3) + fib4(n - 2);\n \
    \   }\n\n    return ($n - 1) * 6 + fib4(n - 6) + fib4(n - 4) + fib4(n - 2);\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Undefined constant \"n\" in /tmp/tmp6du4b47g.php:25\n\
    Stack trace:\n#0 /tmp/tmp6du4b47g.php(31): fib4(5)\n#1 /tmp/tmp6du4b47g.php(35):\
    \ candidate(5)\n#2 /tmp/tmp6du4b47g.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp6du4b47g.php\
    \ on line 25\n"
  timestamp: 1659979387
- exit_code: -1
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $a = $b = $c = $d = 0;\n \
    \ while ($n) {\n    $a += $b;\n    $c += $d;\n    $b += $c;\n    $d += $a;\n \
    \   $n -= 4;\n  }\n  return $d;\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979392
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n === 0) return 0;\n\
    \  if ($n === 1) return 0;\n  return fib4($n - 1) + fib4($n - 2) + fib4($n - 3)\
    \ + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpqyssqcqo.php on line 18

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = array();\n    $fib4[0]\
    \ = 0;\n    $fib4[1] = 0;\n    $fib4[2] = 2;\n    $fib4[3] = 0;\n    $fib4[$n]\
    \ = 0;\n    $fib4[$n-1] += $fib4[$n-2];\n    $fib4[$n-2]+= $fib4[$n-3] + $fib4[$n-4];\
    \ // $fib4[$n-3]+$fib4[$n-4] not included for ease of exposition.\n    return\
    \ $fib4[$n];\n}\n</code>\n<|/ a dscore=0 tags=php,recursion,fibonacci |>\n<| a\
    \ dscore=0 tags=php,recursion,fibonacci |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpe5l2c9yr.php
    on line 26

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56va1425.php:27\n\
    Stack trace:\n#0 /tmp/tmp56va1425.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp56va1425.php\
    \ on line 27\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n <= 1) {\n    return\
    \ 0;\n  }\n  return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\n$fib4 = fib4(10);\n$fib4\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp0y32falk.php
    on line 23

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ if ($n === 0) return 0;\n        if ($n === 1) return 1;\n        return 0;\n\
    \    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\n</code>\nSo this can be computed in O(N) time and constant space.\n<|/ a dscore=0\
    \ tags=php,algorithm |>\n<| a tags=php,algorithm dscore=0 |>\nA faster version\
    \ of the recursive function above would be:\n<code>\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpzv__c1as.php
    on line 23

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\treturn $n == 0?0:$n == 1?1:fib4($n-1)\
    \ + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\necho \"fib4 number sequence computed\
    \ recursively...\\n\";\n$start = microtime(true);\nfor ($i = 0; $i < 100; $i++)\
    \ {\n\t$fib4 = fib4($i);\n}\n$elapsed = microtime(true) - $start;\necho \"fib4\
    \ number sequence computed recursively... $elapsed seconds\\n\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Unparenthesized `a ? b : c ? d : e` is not supported. Use either
    `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp8u7pv4hp.php on line
    16

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$a = 1;\n\t$b = 1;\n\t$c =\
    \ 1;\n\t$d = 1;\n\n\tif ($n === 0) {\n\t\t$fib4 = 0;\n\t} else if ($n === 1) {\n\
    \t\t$fib4 = 0;\n\t} else if ($n === 2) {\n\t\t$fib4 = 0;\n\t} else if ($n ===\
    \ 3) {\n\t\t$fib4 = 0;\n\t} else if ($n >= 4) {\n\t\t$fib4 = 0;\n\t\t$a = 0;\n\
    \t\t$b = 0;\n\t\t$c = 0;\n\t\t$d = 0;\n\t} else {\n\t\t$a = fib4($n - 1);\n\t\t\
    $b = fib4($n - 2);\n\t\t$c = fib4($n - 3);\n\t\t$d = fib4($n - 4);\n\t\t$fib4\
    \ = $a + $b + $c + $d;\n\t}\n\n\treturn $fib4;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuhnnc8c2.php:51\n\
    Stack trace:\n#0 /tmp/tmpuhnnc8c2.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpuhnnc8c2.php\
    \ on line 51\n"
  timestamp: 1659979387
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n===0) return 0;\n\
    \    if ($n===1) return 0;\n    if ($n===2) return 2;\n    if ($n===3) return\
    \ 0;\n    if ($n===4) return 2;\n    return fib4($n-1) + fib4($n-2) + fib4($n-3)\
    \ + fib4($n-4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = [\n        0 =>\
    \ 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n    ];\n    $fib4[$n]\
    \ = fib4[$n-1] + fib4[$n-1] + fib4[$n-2] + fib4[$n-3] + fib4[$n-4];\n    return\
    \ $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Undefined constant \"fib4\" in /tmp/tmpc5ta01md.php:22\n\
    Stack trace:\n#0 /tmp/tmpc5ta01md.php(27): fib4(5)\n#1 /tmp/tmpc5ta01md.php(31):\
    \ candidate(5)\n#2 /tmp/tmpc5ta01md.php(37): test()\n#3 {main}\n  thrown in /tmp/tmpc5ta01md.php\
    \ on line 22\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4numbers = array(0,\
    \ 1, 3, 5);\n    $sum = 0;\n    for($i = 0; $i < $n; $i++) {\n        $sum +=\
    \ $fib4numbers[$i];\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 4 in /tmp/tmpl7ydx1p5.php on line 19\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpl7ydx1p5.php:29\nStack\
    \ trace:\n#0 /tmp/tmpl7ydx1p5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpl7ydx1p5.php\
    \ on line 29\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) {\n       \
    \ return $n;\n    }\n    $a = fib4($n - 1);\n    $b = fib4($n - 2);\n    $c =\
    \ fib4($n - 3);\n    $d = fib4($n - 4);\n    return $a + $b + $c + $d;\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi1nv8pyg.php:30\n\
    Stack trace:\n#0 /tmp/tmpi1nv8pyg.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpi1nv8pyg.php\
    \ on line 30\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) return 0;\n\
    \    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8qb5k6g2.php:24\n\
    Stack trace:\n#0 /tmp/tmp8qb5k6g2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp8qb5k6g2.php\
    \ on line 24\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 0) return null;\n\
    \  if ($n === 0) return 0;\n  if ($n === 1) return 1;\n  return fib4($n - 1) +\
    \ fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n$fib_4_cache = null;\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_8p89yzv.php:27\n\
    Stack trace:\n#0 /tmp/tmp_8p89yzv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_8p89yzv.php\
    \ on line 27\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n < 0) return NULL;\n\
    \tif ($n <= 3) return $n;\n\tif ($n <= 5) return 0;\n\tif ($n <= 7) return 2;\n\
    \t$res = fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\treturn\
    \ $res;\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4g3kl5m.php:28\n\
    Stack trace:\n#0 /tmp/tmps4g3kl5m.php(34): test()\n#1 {main}\n  thrown in /tmp/tmps4g3kl5m.php\
    \ on line 28\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n < 2) {\n\t\treturn\
    \ 0;\n\t} elseif ($n < 4) {\n\t\treturn fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n\t} else {\n\t\treturn fib4($n - 3) + fib4($n - 4) + fib4($n\
    \ - 5) + fib4($n - 6);\n\t}\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_64nssxf.php:29\n\
    Stack trace:\n#0 /tmp/tmp_64nssxf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_64nssxf.php\
    \ on line 29\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  // code goes here\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbh3wq2zt.php:24\n\
    Stack trace:\n#0 /tmp/tmpbh3wq2zt.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbh3wq2zt.php\
    \ on line 24\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return $n === 0 ? 0 : $n\
    \ === 1 ? 1 : fib4($n-1) + fib4($n-2);\n}\n\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Unparenthesized `a ? b : c ? d : e` is not supported. Use either
    `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpcwvyc8_t.php on line
    16

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = array(0,0,0,0,0);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $fib[0]++;\n        $fib[1]++;\n \
    \       $fib[2]++;\n        $fib[3]++;\n        $fib[4]++;\n        $fib[5]++;\n\
    \    }\n    return $fib[6];\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 5 in /tmp/tmp2h377f2t.php on line 23\n\n\
    Warning: Undefined array key 6 in /tmp/tmp2h377f2t.php on line 25\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp2h377f2t.php:32\nStack trace:\n\
    #0 /tmp/tmp2h377f2t.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2h377f2t.php\
    \ on line 32\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if (!isset($fib4)) {\n \
    \       $fib4=array(0,1,1,2,3,5);\n    }\n    return $fib4[$n];\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpadvudbpc.php:26\n\
    Stack trace:\n#0 /tmp/tmpadvudbpc.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpadvudbpc.php\
    \ on line 26\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $a = 1;\n  $b = 1;\n  $c =\
    \ 1;\n  $d = 1;\n  for($i = 0; $i <= $n; $i++) {\n    $a *= $i;\n    $b *= $i;\n\
    \    $c *= $i;\n    $d *= $i;\n  }\n  return $a + $b + $c + $d;\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn7e0t9ry.php:34\n\
    Stack trace:\n#0 /tmp/tmpn7e0t9ry.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpn7e0t9ry.php\
    \ on line 34\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return $n == 4 ? 0 : fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp_nwkjbas.php on line 16

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 1) {\n        return\
    \ 0;\n    }\n    if ($n < 4) {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5k439stw.php:30\n\
    Stack trace:\n#0 /tmp/tmp5k439stw.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5k439stw.php\
    \ on line 30\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n === 0) {\n    return\
    \ 0;\n  } else if ($n === 1) {\n    return 1;\n  } else if ($n === 2) {\n    return\
    \ 2;\n  } else if ($n === 3) {\n    return 4;\n  } else if ($n === 4) {\n    return\
    \ 8;\n  } else if ($n === 5) {\n    return 16;\n  } else if ($n === 6) {\n   \
    \ return 32;\n  } else if ($n === 7) {\n    return 64;\n  } else {\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt1g_tan2.php:41\n\
    Stack trace:\n#0 /tmp/tmpt1g_tan2.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpt1g_tan2.php\
    \ on line 41\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n === 0) {\n    return\
    \ 0;\n  } elseif ($n === 1) {\n    return 1;\n  } elseif ($n >= 2) {\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2b0l_5h4.php:29\n\
    Stack trace:\n#0 /tmp/tmp2b0l_5h4.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2b0l_5h4.php\
    \ on line 29\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n <= 2)\n\t\treturn 0;\n\
    \tif ($n <= 4)\n\t\treturn 0;\n\tif ($n <= 6)\n\t\treturn 2;\n\tif ($n <= 8)\n\
    \t\treturn 4;\n\tif ($n <= 10)\n\t\treturn 6;\n\tif ($n <= 12)\n\t\treturn 8;\n\
    \tif ($n <= 14)\n\t\treturn 10;\n\tif ($n <= 16)\n\t\treturn 12;\n\tif ($n <=\
    \ 18)\n\t\treturn 14;\n\tif ($n <= 20)\n\t\treturn 16;\n\treturn 18;\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt9_8l1w1.php:44\n\
    Stack trace:\n#0 /tmp/tmpt9_8l1w1.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpt9_8l1w1.php\
    \ on line 44\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n==0) {\n        return\
    \ 0;\n    } else if ($n==1) {\n        return 1;\n    } else if ($n==2) {\n  \
    \      return 2;\n    } else if ($n==3) {\n        return 0;\n    } else {\n \
    \       return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n    }\n}\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwtpix9vd.php:33\n\
    Stack trace:\n#0 /tmp/tmpwtpix9vd.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpwtpix9vd.php\
    \ on line 33\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if($n < 0) return 0;\n \
    \   if($n <= 4) return $n;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n -\
    \ 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb_7a2bj7.php:26\n\
    Stack trace:\n#0 /tmp/tmpb_7a2bj7.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpb_7a2bj7.php\
    \ on line 26\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\treturn (3 * $n) - 1;\n}\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphm5b5kkl.php:23\n\
    Stack trace:\n#0 /tmp/tmphm5b5kkl.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphm5b5kkl.php\
    \ on line 23\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ 0;\n    }\n    $fib4 = fib4($n - 1);\n    return $fib4 + $fib4 + $fib4 + $fib4;\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI didn't even know what fib4 was, until\
    \ I read your answer.\n<|/ c |>\n<| c |>\nThe answer is wrong. The fib4 function\
    \ should be recursive. Otherwise it won't work for large numbers. Check my answer\
    \ for a solution that uses recursion.\n<|/ c |>\n<| c |>\nIn that case you should\
    \ post the solution as an answer, not an edit to the question.\n<|/ c |>\n<| c\
    \ |>\nA comment at the top of the function could have helped. Also `return ($n-1)/3`\
    \ is a nice way to write your fib4 function.\n<|/ c |>\n<| c |>\nYour fib4 function\
    \ does not work for large numbers - as your example shows.\n<|/ c |>\n<| a tags=php,fibonacci\
    \ dscore=5 |>\n<code>\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpypoacdh9.php
    on line 22

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  // return fibo($n)\n  return\
    \ $n * ($n * $n + 4 * $n + 3) + 2;\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0r2s6hly.php:25\n\
    Stack trace:\n#0 /tmp/tmp0r2s6hly.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp0r2s6hly.php\
    \ on line 25\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if($n < 2) {\n        return\
    \ 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\
    \nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwoqkwgvl.php:27\n\
    Stack trace:\n#0 /tmp/tmpwoqkwgvl.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwoqkwgvl.php\
    \ on line 27\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n === 0) {\n\t\treturn\
    \ 0;\n\t}\n\tif ($n === 4) {\n\t\treturn 4;\n\t}\n\treturn fib4(fib4(fib4($n-1)\
    \ + fib4($n-2) + fib4($n-3) + fib4($n-4)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp5bhs8v6_.php on line 22

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if($n <= 0) {\n        return\
    \ 0;\n    }\n\n    return fib4($n-1) + fib4($n-2)+fib4($n-3)+fib4($n-4);\n}\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizbtugc1.php:28\n\
    Stack trace:\n#0 /tmp/tmpizbtugc1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpizbtugc1.php\
    \ on line 28\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $n++;\n  $fib4 = array(0,0,0,0,0);\n\
    \  $fib4[0] = 0;\n  $fib4[1] = 0;\n  $fib4[2] = 2;\n  $fib4[3] = fib4($n-1) +\
    \ fib4($n-2);\n  return fib4($n-3) + fib4($n-4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp7i96e54k.php on line 21

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 2)\n    return 0;\n\
    \  elseif ($n < 3)\n    return $n;\n  elseif ($n < 4)\n    return fib4($n-1) +\
    \ fib4($n-2) + fib4($n-3) + fib4($n-4);\n  else\n    return fib4($n-2) + fib4($n-3)\
    \ + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdurlksvy.php:32\n\
    Stack trace:\n#0 /tmp/tmpdurlksvy.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpdurlksvy.php\
    \ on line 32\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $arr = [0, 0, 0, 0, 0];\n\
    \    $arr[0] = 0;\n    $arr[1] = 0;\n    $arr[2] = 2;\n    $arr[3] = 0;\n    $arr[4]\
    \ = 0;\n\n    for ($i = 0; $i < $n; $i++) {\n        $arr[4] = $arr[3] + $arr[4];\n\
    \        $arr[3] = $arr[4];\n        $arr[2] = $arr[1] + $arr[2];\n        $arr[1]\
    \ = $arr[2];\n        $arr[0] = $arr[0] + $arr[0];\n    }\n\n    return $arr[0];\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa5apy0cz.php:39\n\
    Stack trace:\n#0 /tmp/tmpa5apy0cz.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpa5apy0cz.php\
    \ on line 39\n"
  timestamp: 1659979387
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n == 0){\n    return\
    \ 0;\n  }\n  if ($n == 1){\n    return 0;\n  }\n  if ($n == 2){\n    return 2;\n\
    \  }\n  if ($n == 3){\n    return 0;\n  }\n  return fib4($n-1) + fib4($n-2) +\
    \ fib4($n-3) + fib4($n-4) ;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n === 0) {\n    return\
    \ 0;\n  } else if ($n === 1) {\n    return 1;\n  } else if ($n === 2) {\n    return\
    \ 2;\n  } else if ($n === 3) {\n    return 0;\n  } else {\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbn4qg1s.php:34\n\
    Stack trace:\n#0 /tmp/tmphbn4qg1s.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphbn4qg1s.php\
    \ on line 34\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n<=0) return 0;\n \
    \   return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4); \n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2l2sbbfj.php:24\n\
    Stack trace:\n#0 /tmp/tmp2l2sbbfj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2l2sbbfj.php\
    \ on line 24\n"
  timestamp: 1659979387
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 1) {\n        return\
    \ 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2)\
    \ {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n\
    \    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n <= 1) {\n    return\
    \ 0;\n  }\n  else if ($n === 2) {\n    return 2;\n  }\n  else if ($n === 3) {\n\
    \    return 0;\n  }\n  else if ($n === 0) {\n    return 1;\n  }\n  return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n$n = array(1,2,3);\n\
    $fib4 = fib4($n);\necho $fib4;\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - int\
    \ in /tmp/tmp6a20i1x1.php:28\nStack trace:\n#0 /tmp/tmp6a20i1x1.php(31): fib4(Array)\n\
    #1 {main}\n  thrown in /tmp/tmp6a20i1x1.php on line 28\n"
  timestamp: 1659979387
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n ==\
    \ 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n\
    \    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = array(0,0,0,0,1);\n\
    \    $fib4[$n] = $fib4[$n-1] + $fib4[$n-2] + $fib4[$n-3] + $fib4[$n-4];\n    return\
    \ $fib4[$n];\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwor545qp.php:25\n\
    Stack trace:\n#0 /tmp/tmpwor545qp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwor545qp.php\
    \ on line 25\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return fib3($n - 1) + fib3($n\
    \ - 2) + fib3($n - 3) + fib3($n - 4);\n}\n\nfunction candidate(...$args) {\n \
    \   return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fib3() in /tmp/tmppo4hz_tx.php:16\n\
    Stack trace:\n#0 /tmp/tmppo4hz_tx.php(20): fib4(5)\n#1 /tmp/tmppo4hz_tx.php(24):\
    \ candidate(5)\n#2 /tmp/tmppo4hz_tx.php(30): test()\n#3 {main}\n  thrown in /tmp/tmppo4hz_tx.php\
    \ on line 16\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0 || $n == 1)\n\
    \        return $n;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\n$testCases[] = array(\n    'fib4(0)',\n    0,\n);\n$testCases[]\
    \ = array(\n    'fib4(5)',\n    4,\n);\n$testCases[] = array(\n    'fib4(6)',\n\
    \    8,\n);\n$testCases[] = array(\n    'fib4(7)',\n    14,\n);\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpl4su_gpf.php on line 18

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 3) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl4gvll1w.php:27\n\
    Stack trace:\n#0 /tmp/tmpl4gvll1w.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpl4gvll1w.php\
    \ on line 27\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $result = 0;\n    if ($n\
    \ == 0 || $n == 1) {\n        return $result;\n    }\n\n    $result = fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    return $result;\n}\n\
    $fib4 = fib4(11);\necho \"fib4(11) equals $fib4\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp3ax3l0bo.php on line 21

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 1) {\n        return\
    \ 0;\n    }\n    if ($n < 4) {\n        return $n;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt3qbwv1m.php:29\n\
    Stack trace:\n#0 /tmp/tmpt3qbwv1m.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpt3qbwv1m.php\
    \ on line 29\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) return 0;\n\
    \    if ($n == 1) return 0;\n    return fib4(3) * 4 + fib4($n - 2);\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp8ox3tsn1.php on line 18

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = [0, 3, 6, 8, 10];\n\
    \    $fibSum = $fib[0] + $fib[1] + $fib[2] + $fib[3];\n    return $fibSum;\n}\n\
    </code>\n<|/ q |>\n<| c |>\nWhat's the point of this? It seems to me like this\
    \ is an [XY Problem](http://xyproblem.info/)\n<|/ c |>\n<| c |>\nI wrote a recursive\
    \ function to solve the fibonacci sequence which was the idea of the assignment.\
    \ I didn't want to have to use recursion and so I wrote a non recursive version\
    \ which was the idea of the assignment. I thought that maybe it would be good\
    \ to share the idea of the two assignments.\n<|/ c |>\n<| c |>\nOh, I missed that.\
    \ Still, it's pretty bizarre to have an assignment that \"writes code for you\"\
    .\n<|/ c |>\n<| c |>\nI'm voting to close this question as off-topic because it's\
    \ homework\n<|/ c |>\n<| a tags=php,function,recursion |>\nThe easiest way to\
    \ solve it is just to call fib() again inside the function - that will give you\
    \ a recursive call to the same function.\n<code>\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpn39hihj5.php
    on line 20

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0)\n        return\
    \ 0;\n    if ($n == 1)\n        return 0;\n    if ($n == 2)\n        return 2;\n\
    \    if ($n == 3)\n        return 0;\n    $f = fib4($n - 1);\n    $g = fib4($n\
    \ - 2);\n    $h = fib4($n - 3);\n    return $f + $g + $h + $n;\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1mw4jzea.php:34\n\
    Stack trace:\n#0 /tmp/tmp1mw4jzea.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp1mw4jzea.php\
    \ on line 34\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n\
    \ === 2) {\n        return 2;\n    } else {\n        return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp5bqi8be_.php on line 23

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif(!isset($n) || $n <= 0)\
    \ return 0;\n\tif(isset($n)) {\n\t\t$retVal = fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n\t} else {\n\t\t$retVal = 0;\n\t}\n\treturn $retVal;\n\
    }\n\n$fib4 = fib4($n);\necho $fib4;\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $n in /tmp/tmp1_9plvlr.php on line 25\n0\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp1_9plvlr.php:32\nStack\
    \ trace:\n#0 /tmp/tmp1_9plvlr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1_9plvlr.php\
    \ on line 32\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fib4 = array(0,1,1,1,1);\n\
    \  $fib4 = $fib4[$n];\n  return $fib4;\n}\nfunction candidate(...$args) {\n  \
    \  return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 5 in /tmp/tmpao5htcvk.php on line 17\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpao5htcvk.php:25\nStack\
    \ trace:\n#0 /tmp/tmpao5htcvk.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpao5htcvk.php\
    \ on line 25\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0)\n        return\
    \ null;\n    if ($n == 0)\n        return 0;\n    if ($n == 1)\n        return\
    \ 0;\n    if ($n == 2)\n        return 2;\n    if ($n == 3)\n        return 0;\n\
    \    if ($n == 4)\n        return 0;\n    return fib4($n - 1) + fib4($n - 2) +\
    \ fib4($n - 3) + fib4($n - 4);\n}\n\nclass Fib4Test extends \\PHPUnit_Framework_TestCase\n\
    {\n    public function testFib4()\n    {\n        $this->assertEquals(0, fib4(0));\n\
    \        $this->assertEquals(1, fib4(1));\n        $this->assertEquals(2, fib4(2));\n\
    \        $this->assertEquals(3, fib4(3));\n        $this->assertEquals(5, fib4(5));\n\
    \        $this->assertEquals(8, fib4(6));\n        $this->assertEquals(14, fib4(7));\n\
    \        $this->assertEquals(null, fib4(8));\n    }\n}\n</code>\n<|/ a tags=python,php,recursion,fibonacci,fibonacci-heap\
    \ |>\n<| c |>\nGreat example! But you can do even better with loops like this:\
    \ `def fib4(n): return 0 if (n < 0) or (n < 2) else (1 + fib4(n - 1) + fib4(n\
    \ - 2))` which also has a very small constant factor, although I think Python\
    \ has some optimizations where it can treat it as a while loop (but I might be\
    \ wrong on this). However, this doesn't really answer the question of how to write\
    \ this as a recursive function.\n<|/ c |>\n<| c |>\nIt's not obvious to me that\
    \ Python can optimize this (though it's possible I could be wrong).\n<|/ c |>\n\
    <| c |>\nThat is exactly the point of this example. It's just a constant factor\
    \ that Python can make use of by using a while loop.\n<|/ c |>\n<| c |>\nThe constant\
    \ factor is because Python does not have the tail recursion optimization. Even\
    \ without that, a while loop will be much faster.\n<|/ c |>\n<| c |>\nI did a\
    \ bit of research. Python does have tail recursion, and it does optimize it to\
    \ a while loop. However, the constant factor is still there because Python does\
    \ not do tail recursion optimization (and there may be multiple optimizations).\
    \ It *does* have a loop optimization (at least for Python 2, I don't have Python\
    \ 3 at hand and don't know if it is different).\n<|/ c |>\n<| a dscore=5 tags=python,php,recursion,fibonacci,fibonacci-heap\
    \ |>\nThis is a different approach than yours.\n<code>\ndef \nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp90k_2rn5.php
    on line 45

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n === 0) {\n\t\treturn\
    \ 0;\n\t} else if ($n <= 4) {\n\t\treturn 0;\n\t} else if ($n <= 7) {\n\t\treturn\
    \ 2;\n\t} else if ($n <= 10) {\n\t\treturn 1;\n\t} else {\n\t\treturn fib4($n\
    \ - 4) + fib4($n - 3) + fib4($n - 2) + fib4($n - 1);\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqifgqywd.php:33\n\
    Stack trace:\n#0 /tmp/tmpqifgqywd.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpqifgqywd.php\
    \ on line 33\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 3) {\n        return\
    \ 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n -\
    \ 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpexe_vhce.php:27\n\
    Stack trace:\n#0 /tmp/tmpexe_vhce.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpexe_vhce.php\
    \ on line 27\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // TODO: Your code here\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dunikha.php:24\n\
    Stack trace:\n#0 /tmp/tmp6dunikha.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp6dunikha.php\
    \ on line 24\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if (!isset($fib4)) {\n \
    \       $fib4 = array(\n            0 => 0,\n            1 => 0,\n           \
    \ 2 => 0,\n            3 => 0,\n        );\n    }\n\n    $fib4[$n] = fib4($n-1)\
    \ + fib4($n-2) + fib4($n-3) + fib4($n-4);\n    return $fib4[$n];\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp7p4v25l5.php on line 25

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n === 0) {\n\t\treturn\
    \ 0;\n\t} else if ($n === 1) {\n\t\treturn 0;\n\t} else if ($n === 2) {\n\t\t\
    return 2;\n\t} else if ($n === 3) {\n\t\treturn 0;\n\t} else if ($n === 4) {\n\
    \t\treturn 4;\n\t} else {\n\t\treturn fib4($n - 1) + fib4($n - 2) + fib4($n -\
    \ 3) + fib4($n - 4);\n\t}\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdkpvjl61.php:36\n\
    Stack trace:\n#0 /tmp/tmpdkpvjl61.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpdkpvjl61.php\
    \ on line 36\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return ($n <= 0) ? 0 : (($n\
    \ % 4 === 0) ? 0 : $n+fib4($n-4) + fib4($n-3) + fib4($n-2) + fib4($n-1));\n}\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2pbe4v7.php:23\n\
    Stack trace:\n#0 /tmp/tmpg2pbe4v7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpg2pbe4v7.php\
    \ on line 23\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    } elseif ($n === 1) {\n        return 1;\n    } elseif ($n ===\
    \ 2) {\n        return 2;\n    } elseif ($n === 3) {\n        return 0;\n    }\
    \ else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpknpvft6c.php:34\n\
    Stack trace:\n#0 /tmp/tmpknpvft6c.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpknpvft6c.php\
    \ on line 34\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 4) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n</code>\nAnd if you have no recursion but only iteration, then it's\
    \ actually pretty easy, as I did it here\n<code>\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp6_owmwls.php
    on line 21

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\treturn fib4($n-2) + fib4($n-3)\
    \ + fib4($n-4) + fib4($n-1);\n}\necho \"fib4(10) =\", fib4(10);\necho \"\\n\"\
    ;\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: 'fib4(10) =

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp6rvbomaq.php on line 16

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fibs = [];\n    $fibs[3]\
    \ = 0;\n    $fibs[2] = 1;\n    $fibs[1] = 1;\n    $fibs[0] = 0;\n    for($i =\
    \ 1; $i < $n; $i++) {\n        $fibs[$i] = $fibs[$i - 1] + $fibs[$i - 2];\n  \
    \  }\n    return $fibs[$n];\n}\n</code>\n<|/ a tags=php,algorithm,python,javascript\
    \ |>\n<| c |>\nI guess my question was more about how the hell do you get those\
    \ numbers using recursion.\n<|/ c |>\n<| c |>\nAwesome! Thanks a lot!\n<|/ c |>\n\
    <| c |>\nYes thank you, the problem is, I really just don't understand recursion.\
    \ I want to understand it so I can apply it in my own problems. I really appreciate\
    \ your answer!\n<|/ c |>\n<| a dscore=2 |>\nIn case anyone needs it, here's an\
    \ alternative recursive solution:\n<code>\nfunction candidate(...$args) {\n  \
    \  return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmps19nqi12.php
    on line 26

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib=array(0,0,2,0,0);\n\
    \    for($i=4;$i>=$n;$i--) {\n        $fib=$fib+$fib[($i-2) % 5];\n    }\n   \
    \ return $fib;\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz388hcbl.php:27\n\
    Stack trace:\n#0 /tmp/tmpz388hcbl.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpz388hcbl.php\
    \ on line 27\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 5) {\n        return\
    \ $n;\n    }\n    return fib4($n - 4) + fib4($n - 3) + fib4($n - 2) + fib4($n\
    \ - 1);\n}\n</code>\nThe Fibbonacci series is defined by the following formula:\n\
    \nwhere A is the sum of the first n\u22121 terms, B is the sum of the second n\u2212\
    1 terms, and so forth. The Fibbonacci series converges toward a sequence  where\
    \ each term tends towards the power of n and is roughly constant for large n.\
    \ \nHere are some examples of what happens when we compute the Fibbonacci number\
    \ sequence up to a certain value:\n\nHere's an example of computing the first\
    \ n Fibbonacci numbers:\n<code>\n<?php\n\nfunction candidate(...$args) {\n   \
    \ return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp1cgezice.php
    on line 21

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0)\n        return\
    \ 0;\n    if ($n === 1)\n        return 1;\n    return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n   \
    \ return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmphlq3_1wg.php on line 20

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return $n <= 0 ? 0 : ($n\
    \ <= 3 ? 0 : ($n <= 5 ? 2 : ($n <= 7 ? 4 : ($n <= 11 ? 6 : (($n - 9) % ($n - 7))\
    \ + 1)));\n}\n</code>\nI then wrote a function to convert a number sequence to\
    \ its English counterpart (like your fibbonacci example).  The function doesn't\
    \ care how the numbers are represented in binary, decimal, octal or hexadecimal.\n\
    <code>\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token ";" in /tmp/tmpycy7_t3g.php on line
    16

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $result = 0;\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        $result = $result + $i;\n    }\n    return $result;\n\
    }\n</code>\n<|/ a dscore=2 tags=php |>\n<| c |>\nThis is just a basic demonstration.\
    \ Feel free to adapt it to your needs.\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpcx4m95xr.php
    on line 22

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  // Your code here\n  if ($n\
    \ <= 2) {\n    return 0;\n  }\n\n  $first = $first = $n;\n  $second = 0;\n  for\
    \ ($i = 3; $i < $n; $i++) {\n    $second+=$first;\n    $first = $second;\n  }\n\
    \  return $first;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkcenl8zr.php:35\n\
    Stack trace:\n#0 /tmp/tmpkcenl8zr.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpkcenl8zr.php\
    \ on line 35\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = 4;\n    if ($n <=\
    \ 3) $fib;\n    $fib += fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n -\
    \ 4);\n    return $fib;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpk9rddoqt.php on line 18

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n === 0) {\n    return\
    \ 0;\n  }\n\n  if ($n === 1) {\n    return 1;\n  }\n\n  return fib4($n - 1) +\
    \ fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpj8vehhav.php on line 24

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) return 0;\n\
    \    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nIt appears that you did not copy my code verbatim.\
    \  Please see the corrections to my code above.\n<|/ c |>\n<| c |>\nI see now.\
    \  Thanks for your help.\n<|/ c |>\n<| a dscore=1 |>\nYou just have to add 1 to\
    \ fib4 like so:\n<code>\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpombe84ou.php
    on line 19

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = $fib4 = $fib3 = $fib2\
    \ = $fib1 = 1;\n    if ($n < 4) {\n        $fib4 = $fib3 + $fib2;\n        $fib3\
    \ = $fib1;\n        $fib2 = $fib;\n        $fib1 = $fib4;\n    } else {\n    \
    \    $fib3 = $fib1;\n        $fib2 = $fib;\n        $fib1 = $fib4;\n        $fib4\
    \ = $fib3 + $fib2;\n    }\n    return $fib4;\n}\n\n/**\n * As the most basic example\
    \ of PHP's string handling, the following function will return the length of the\
    \ string\n * passed in as the argument. \n * \n * >>> strlen('abc')\n * 3\n *\
    \ \n * Please write a function that returns the length of the string passed in\
    \ as an argument.  Do not use \n * recursion.\n * >>> strlen('abc')\n * 3\n *\
    \ >>> strlen(strlen('abc'))\n * 3\n * >>> strlen('')\n * 0\n * \n */\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx47t2o5o.php:53\n\
    Stack trace:\n#0 /tmp/tmpx47t2o5o.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpx47t2o5o.php\
    \ on line 53\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4)\n        return\
    \ $n;\n    $first = $second = 0;\n    $third = $fourth = 0;\n    for ($i = 0;\
    \ $i < 4; $i++)\n        if ($i == $n) {\n            $five = $fourth += $third\
    \ + $second;\n            $third = $second;\n            $second = $first;\n \
    \           $first = $five;\n        } else {\n            $five = $fourth +=\
    \ $third + $second + $first;\n            $third = $second;\n            $second\
    \ = $first;\n            $first = $five;\n        }\n    return $five;\n}\n</code>\n\
    <|/ a |>\n<| a |>\nIn Haskell (using the list monad to implement recursion):\n\
    <code>\nfibs n = [ 0, 1..] >>= \\n -> map (\\i -> ((n-1) * fib i +) fib (n-1)\
    \ ) [0..n]\n    where fib 0 _ = 0\n          fib 1 _ = 1\n          fib _ 0 =\
    \ 0\n          fib _ 1 = 1\n          fib n _ = fib (n-1) (fib (n-2) (fib (n-3)\
    \ (fib (n-4) 0)))\n</code>\n<|/ a tags=recursion dscore=4 |>\n<| c |>\nI don't\
    \ see how this is O(n). You have 4 recursive calls, each of which takes log n.\
    \ That is O(n log n).\n<|/ c |>\n<| c |>\nI guess it's O(n) because of tail recursion,\
    \ right?\n<|/ c |>\n<| c |>\nYeah, tail recursion is O(n). You just need to remember\
    \ to avoid the 4 recursive calls, of course.\n<|/ c |>\n<| c |>\nIt is O(n), but\
    \ in the general case it isn't. It only gets bad quickly with large values of\
    \ n. See the \"memoization\" answers.\n<|/ c |>\n<| c |>\nI believe this is O(n)\
    \ because Haskell doesn't have tail recursion optimization. Thus you can avoid\
    \ recomputing the same function more than once.\n<|/ c |>\n<| a dscore=4 tags=recursion\
    \ |>\nI used the memoization technique in this exercise:\n<code>\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpm_fhg3sg.php
    on line 34

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib = 0;\n\t$fib_array =\
    \ array(0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,\n\t\t\t1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,\n\
    \t\t\t317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352\n\t\
    \t\t);\n\tif ($n < count($fib_array)) {\n\t\t$fib += $fib_array[$n];\n\t}\n\t\
    return $fib;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7wqvp6bh.php:32\n\
    Stack trace:\n#0 /tmp/tmp7wqvp6bh.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7wqvp6bh.php\
    \ on line 32\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n$result = fib4(5);\n\
    print $result;\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Undefined constant \"n\" in /tmp/tmpc15i6ljb.php:22\n\
    Stack trace:\n#0 /tmp/tmpc15i6ljb.php(24): fib4(5)\n#1 {main}\n  thrown in /tmp/tmpc15i6ljb.php\
    \ on line 22\n"
  timestamp: 1659979387
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0)\n        return\
    \ 0;\n    if ($n == 1)\n        return 0;\n    if ($n == 2)\n        return 2;\n\
    \    if ($n == 3)\n        return 0;\n    return fib4($n - 1) + fib4($n - 2) +\
    \ fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0)\n        return\
    \ 0;\n    if ($n == 1)\n        return 1;\n    if ($n == 2)\n        return 2;\n\
    \    if ($n == 3)\n        return 0;\n    if ($n == 4)\n        return 1;\n  \
    \  if ($n == 5)\n        return 4;\n    if ($n == 6)\n        return 8;\n    if\
    \ ($n == 7)\n        return 14;\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3kehq982.php:40\n\
    Stack trace:\n#0 /tmp/tmp3kehq982.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3kehq982.php\
    \ on line 40\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // base case\n    if($n\
    \ === 0) {\n        return 0;\n    }\n    // if n < 0 return undefined\n    if($n\
    \ < 0) {\n        return null;\n    }\n    // if n == 0 return 1\n    if($n ===\
    \ 1) {\n        return 1;\n    }\n    // if n == 1 return 2\n    if($n === 2)\
    \ {\n        return 2;\n    }\n    // if n > 1 return fib4(n-1) + fib4(n-2)\n\
    \    return fib4($n - 1) + fib4($n - 2);\n}\n\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfnwxc59e.php:41\n\
    Stack trace:\n#0 /tmp/tmpfnwxc59e.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpfnwxc59e.php\
    \ on line 41\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 0)\n    return 0;\n\
    \  if ($n == 0 || $n == 1)\n    return $n;\n  return fib4($n-1) + fib4($n-2) +\
    \ fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt6tmweb3.php:28\n\
    Stack trace:\n#0 /tmp/tmpt6tmweb3.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpt6tmweb3.php\
    \ on line 28\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n <= 2) {\n    return\
    \ 0;\n  }\n\n  $a = fib4($n - 1);\n  $b = fib4($n - 2);\n  $c = fib4($n - 3);\n\
    \  $d = fib4($n - 4);\n\n  return $a + $b + $c + $d;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr9vkihur.php:33\n\
    Stack trace:\n#0 /tmp/tmpr9vkihur.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpr9vkihur.php\
    \ on line 33\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n   if ($n <= 3) {\n      return\
    \ $n;\n   }\n   return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n -\
    \ 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw9cjgm4f.php:26\n\
    Stack trace:\n#0 /tmp/tmpw9cjgm4f.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpw9cjgm4f.php\
    \ on line 26\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        throw\
    \ new Exception('Invalid fib4 number');\n    }\n    if ($n === 0 || $n === 1)\
    \ {\n        return $n;\n    }\n    if ($n === 2) {\n        return $n;\n    }\n\
    \    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Invalid fib4 number in /tmp/tmp0kxi_v16.php:17\n\
    Stack trace:\n#0 /tmp/tmp0kxi_v16.php(25): fib4(-1)\n#1 /tmp/tmp0kxi_v16.php(25):\
    \ fib4(3)\n#2 /tmp/tmp0kxi_v16.php(25): fib4(4)\n#3 /tmp/tmp0kxi_v16.php(28):\
    \ fib4(5)\n#4 /tmp/tmp0kxi_v16.php(32): candidate(5)\n#5 /tmp/tmp0kxi_v16.php(38):\
    \ test()\n#6 {main}\n  thrown in /tmp/tmp0kxi_v16.php on line 17\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n <= 0) {\n    return\
    \ 0;\n  }\n  return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6fb1x2vo.php:26\n\
    Stack trace:\n#0 /tmp/tmp6fb1x2vo.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp6fb1x2vo.php\
    \ on line 26\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $first = $second = $third\
    \ = $fourth = 0;\n    for($i=0;$i<$n;$i++) {\n        $first = $first + $second;\n\
    \        $second = $third + $fourth;\n        $third = $fourth;\n        $fourth\
    \ = $first;\n        $first = $second;\n    }\n    return $fourth;\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_sfzgh2p.php:32\n\
    Stack trace:\n#0 /tmp/tmp_sfzgh2p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_sfzgh2p.php\
    \ on line 32\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n == 0)\n    return 0;\n\
    \  if ($n == 1)\n    return 1;\n  if ($n == 2)\n    return 2;\n  return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpw_pi9i0g.php on line 22

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $n = (int)$n;\n  if ($n <=\
    \ 0) return 0;\n  if ($n == 1) return 0;\n  if ($n == 2) return 2;\n  if ($n ==\
    \ 3) return 0;\n  if ($n == 4) return 0;\n  return fib4($n - 1) + fib4($n - 2)\
    \ + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfjkuvsl6.php:30\n\
    Stack trace:\n#0 /tmp/tmpfjkuvsl6.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfjkuvsl6.php\
    \ on line 30\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return fib4($n-1) + fib4($n-2)\
    \ + fib4($n-3) + fib4($n-4); \n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpkhanhkh5.php on line 16

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) return 0;\n\
    \    if ($n <= 1) return 1;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_qi45sa.php:26\n\
    Stack trace:\n#0 /tmp/tmp3_qi45sa.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp3_qi45sa.php\
    \ on line 26\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return $n % 4 == 0 ? $n\
    \ : fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpcq40ollu.php on line 16

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return fib4($n-1) + fib4($n-2)+fib4($n-3)+fib4($n-4);\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpu_oqztrk.php on line 16

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = array();\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $fib[] = 0;\n    }\n    $fib[0] = 0;\n  \
    \  $fib[1] = 1;\n    $fib[2] = 2;\n    for ($i = 3; $i <= $n; $i++) {\n      \
    \  $fib[$i]  = $fib[$i-1] + $fib[$i-2];\n    }\n    return $fib[$n];\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw6cnqm00.php:33\n\
    Stack trace:\n#0 /tmp/tmpw6cnqm00.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpw6cnqm00.php\
    \ on line 33\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = array(1, 0, 1, 1, 1);\n\
    \    $b = array(0, 1, 1, 2, 1);\n    $c = array(3, 0, 1, 1, 0);\n    $d = array(5,\
    \ 0, 1, 1, 3);\n    $r = 1;\n    for($i = 5; $i <= $n; $i++) {\n        $r = $r\
    \ + $a[$i] + $b[$i] + $c[$i] + $d[$i];\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 5 in /tmp/tmptnboh98n.php on line 22\n\n\
    Warning: Undefined array key 5 in /tmp/tmptnboh98n.php on line 22\n\nWarning:\
    \ Undefined array key 5 in /tmp/tmptnboh98n.php on line 22\n\nWarning: Undefined\
    \ array key 5 in /tmp/tmptnboh98n.php on line 22\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmptnboh98n.php:32\nStack trace:\n#0 /tmp/tmptnboh98n.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptnboh98n.php on line 32\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 2)\n        return\
    \ 0;\n    if ($n < 5)\n        return 0;\n    if ($n < 10)\n        return $n;\n\
    \    return fib4($n-4) + fib4($n-3) + fib4($n-2) + fib4($n-1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5lwi5po.php:30\n\
    Stack trace:\n#0 /tmp/tmpy5lwi5po.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpy5lwi5po.php\
    \ on line 30\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n<=0) return 0;\n \
    \   if ($n==1) return 1;\n    return fib4($n-1)+fib4($n-2)+fib4($n-3)+fib4($n-1);\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1rzspqus.php:26\n\
    Stack trace:\n#0 /tmp/tmp1rzspqus.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp1rzspqus.php\
    \ on line 26\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $numbers = array(\n    \
    \    0,\n        1,\n        2,\n        3,\n        4,\n    );\n\n    $fib4 =\
    \ 0;\n\n    foreach ($numbers as $number) {\n        $fib4 += $number;\n    }\n\
    \n    return $fib4;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwuzc3zz5.php:38\n\
    Stack trace:\n#0 /tmp/tmpwuzc3zz5.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpwuzc3zz5.php\
    \ on line 38\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if($n == 0) {\n        return\
    \ 0;\n    } else if($n == 1) {\n        return 1;\n    } else if($n == 2) {\n\
    \        return 2;\n    } else if($n == 3) {\n        return 0;\n    } else {\n\
    \        return fib4(4-$n) + fib4($n-4)\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "}", expecting ";" in /tmp/tmpclyjl0eq.php
    on line 26

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ 0;\n    } else {\n        $fib4 = fib4($n - 1);\n        return $fib4 + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptt_85grt.php:28\n\
    Stack trace:\n#0 /tmp/tmptt_85grt.php(34): test()\n#1 {main}\n  thrown in /tmp/tmptt_85grt.php\
    \ on line 28\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0)\n        return\
    \ 0;\n    if ($n == 1)\n        return 0;\n    if ($n == 2)\n        return 2;\n\
    \    if ($n == 3)\n        return 0;\n    if ($n == 4)\n        return 0;\n  \
    \  return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\n/**\n\
    \ * Compute the nth fibbonacci number using the binary search method.\n * @param\
    \ $n The number to be computed.\n * @return The nth fibbonacci number.\n */\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxqyfd2xh.php:39\n\
    Stack trace:\n#0 /tmp/tmpxqyfd2xh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxqyfd2xh.php\
    \ on line 39\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 0) {\n    throw new\
    \ Exception('fib4 called with negative parameter!');\n  }\n  $fib4 = [0, 1];\n\
    \  $fib4[0] = 0;\n  for ($i = 1; $i <= 4; $i++) {\n    $fib4[$i + 1] = $fib4[$i]\
    \ + $fib4[$i - 1];\n  }\n  return $fib4[$n];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpta5fph22.php:32\n\
    Stack trace:\n#0 /tmp/tmpta5fph22.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpta5fph22.php\
    \ on line 32\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) {\n       \
    \ return $n;\n    } elseif ($n == 2) {\n        return 1;\n    } elseif ($n ==\
    \ 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpken7sxkf.php:33\n\
    Stack trace:\n#0 /tmp/tmpken7sxkf.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpken7sxkf.php\
    \ on line 33\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n===0) {\n        return\
    \ 0;\n    }\n    if ($n===1 || $n===3) {\n        return 1;\n    }\n    return\
    \ fib4(fib4($n-1) + fib4($n-2));\n}\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy6e4npnv.php:29\n\
    Stack trace:\n#0 /tmp/tmpy6e4npnv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpy6e4npnv.php\
    \ on line 29\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib4 = array();\n\tif ($n\
    \ == 0) {\n\t\t$fib4[0] = 0;\n\t\t$fib4[1] = 1;\n\t} else if ($n == 1) {\n\t\t\
    $fib4[0] = 0;\n\t\t$fib4[1] = 1;\n\t} else if ($n == 2) {\n\t\t$fib4[0] = 2;\n\
    \t\t$fib4[1] = 1;\n\t} else if ($n == 3) {\n\t\t$fib4[0] = 0;\n\t\t$fib4[1] =\
    \ 1;\n\t} else if ($n == 4) {\n\t\t$fib4[0] = 0;\n\t\t$fib4[1] = 1;\n\t} else\
    \ {\n\t\t$fib4[0] = 0;\n\t\t$fib4[1] = 1;\n\t\tfor ($i = 2; $i <= $n; $i++) {\n\
    \t\t\t$fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2];\n\t\t}\n\t}\n\treturn $fib4[$n];\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqhik_sft.php:47\n\
    Stack trace:\n#0 /tmp/tmpqhik_sft.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqhik_sft.php\
    \ on line 47\n"
  timestamp: 1659979387
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0 || $n == 1)\
    \ return 0;\n    if ($n == 2) return 2;\n    if ($n == 3) return 0;\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) return 0;\n\
    \    if ($n === 1) return 1;\n    if ($n === 2) return 2;\n    if ($n === 3) return\
    \ 0;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\n</code>\n<|/ a dscore=0 tags=php,recursion |>\n<| a dscore=0 |>\nThe Fibbonacci\
    \ series can be expressed recursively as follows:\n<code>\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpdvcb2_8d.php
    on line 22

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 4) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr8znw954.php:27\n\
    Stack trace:\n#0 /tmp/tmpr8znw954.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpr8znw954.php\
    \ on line 27\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$res = 0;\n\tfor ($i = 0;\
    \ $i <= $n; $i++)\n\t\t$res +=$i;\n\treturn $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp57oj74oh.php:27\n\
    Stack trace:\n#0 /tmp/tmp57oj74oh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp57oj74oh.php\
    \ on line 27\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) { return 0;\
    \ }\n    if ($n == 1) { return 1; }\n    if ($n == 2) { return 2; }\n    if ($n\
    \ == 3) { return 0; }\n    if ($n == 4) { return 0; }\n    return fib4($n - 1)\
    \ + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqina0qp6.php:29\n\
    Stack trace:\n#0 /tmp/tmpqina0qp6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpqina0qp6.php\
    \ on line 29\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n === 0) {\n    return\
    \ 0;\n  } else if ($n === 1) {\n    return 1;\n  } else {\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpykizlrma.php on line 21

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 2) {\n        return\
    \ $n;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfayrrse7.php:27\n\
    Stack trace:\n#0 /tmp/tmpfayrrse7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpfayrrse7.php\
    \ on line 27\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 1) {\n        return\
    \ 0;\n    }\n    if ($n <= 3) {\n        return $n;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2cstylbq.php:29\n\
    Stack trace:\n#0 /tmp/tmp2cstylbq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2cstylbq.php\
    \ on line 29\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) return $n;\n\
    \    return fib4($n - 2) + fib4($n - 3);\n}\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbefwlge9.php:24\n\
    Stack trace:\n#0 /tmp/tmpbefwlge9.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbefwlge9.php\
    \ on line 24\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fib4 = array(1,0,0,0,0,0,0);\n\
    \  for ($i = 0; $i < $n; $i++) {\n    $fib4[$i] = $fib4[$i] + $fib4[$i-1] + $fib4[$i-2];\n\
    \  }\n  return $fib4[$n];\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key -1 in /tmp/tmp74o2v1y8.php on line 18\n\n\
    Warning: Undefined array key -2 in /tmp/tmp74o2v1y8.php on line 18\n\nWarning:\
    \ Undefined array key -1 in /tmp/tmp74o2v1y8.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp74o2v1y8.php:27\nStack trace:\n#0 /tmp/tmp74o2v1y8.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp74o2v1y8.php on line 27\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 2) {\n    return\
    \ 0;\n  }\n  if ($n === 4) {\n    return $n;\n  }\n  if ($n === 5) {\n    return\
    \ 4;\n  }\n  return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu2276k08.php:33\n\
    Stack trace:\n#0 /tmp/tmpu2276k08.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpu2276k08.php\
    \ on line 33\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n === 0 || $n === 1)\
    \ {\n\t\treturn $n;\n\t} else if ($n === 2) {\n\t\treturn 2;\n\t} else {\n\t\t\
    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\t}\n}\n\n\
    /**\n * Return the nth fib1 number\n * @param  integer $n number 1 to 10\n * @return\
    \ integer\n */\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpgmr035al.php on line 21

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprjyumhp1.php:27\n\
    Stack trace:\n#0 /tmp/tmprjyumhp1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprjyumhp1.php\
    \ on line 27\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5p1gp2u.php:28\n\
    Stack trace:\n#0 /tmp/tmpb5p1gp2u.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpb5p1gp2u.php\
    \ on line 28\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) return null;\n\
    \    if ($n < 4) return $n;\n    return fib4($n-2) + fib4($n-3) + fib4($n-4) +\
    \ fib4($n-1);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpod2qigw1.php:26\n\
    Stack trace:\n#0 /tmp/tmpod2qigw1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpod2qigw1.php\
    \ on line 26\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\treturn ($n == 0) ? 0 : fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp4tbo_5af.php on line 16

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n <= 4)\n    return 0;\n\
    \  if ($n >= 6)\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n  return fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxk52qhl.php:28\n\
    Stack trace:\n#0 /tmp/tmpqxk52qhl.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpqxk52qhl.php\
    \ on line 28\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $sum = 0;\n    for($i =\
    \ 0; $i<$n; $i++) {\n        $sum += fib($i);\n    }\n    return $sum;\n}\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fib() in /tmp/tmpy_b69u29.php:18\n\
    Stack trace:\n#0 /tmp/tmpy_b69u29.php(24): fib4(5)\n#1 /tmp/tmpy_b69u29.php(28):\
    \ candidate(5)\n#2 /tmp/tmpy_b69u29.php(34): test()\n#3 {main}\n  thrown in /tmp/tmpy_b69u29.php\
    \ on line 18\n"
  timestamp: 1659979387
- exit_code: -1
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $res = 0;\n    $counter\
    \ = 0;\n    do {\n        $counter++;\n        if ($counter < $n) {\n        \
    \    $res += $counter;\n        } else {\n            $res -= $counter;\n    \
    \    }\n    } while ($counter < $n);\n    return $res;\n}\n\n$testNo = 4; // Number\
    \ of tests to run\n\nfor ($testNo = 1; $testNo <= $testNo; $testNo++) {\n    $fibNo\
    \ = $testNo;\n    $testNo++;\n    $result = fib4($fibNo);\n    $expected = fib4($testNo\
    \ - 1);\n    $passed = $result === $expected;\n    $passed = $passed ? 'PASSED'\
    \ : 'FAILED';\n    $testNo++;\n    $result .= ' ' . $fibNo . ' => ' . $expected;\n\
    \    $passed = $passed ? 'PASSED' : 'FAILED';\n    $testNo++;\n\n    // Print\
    \ the output (or not)\n    if ($passed == 'PASSED') {\n        echo $result .\
    \ PHP_EOL;\n    } else {\n        echo 'FAILED' . PHP_EOL;\n    }\n\n    // Print\
    \ a blank line before every pass\n    echo PHP_EOL;\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: b'-1 1 => -1\n\n5 5 => 5\n\n27 9 => 27\n\n65 13 => 65\n\n119 17 => 119\n\n189
    21 => 189\n\n275 25 => 275\n\n377 29 => 377\n\n495 33 => 495\n\n629 37 => 629\n\n779
    41 => 779\n\n945 45 => 945\n\n1127 49 => 1127\n\n1325 53 => 1325\n\n1539 57 =>
    1539\n\n1769 61 => 1769\n\n2015 65 => 2015\n\n2277 69 => 2277\n\n2555 73 => 2555\n\n2849
    77 => 2849\n\n3159 81 => 3159\n\n3485 85 => 3485\n\n3827 89 => 3827\n\n4185 93
    => 4185\n\n4559 97 => 4559\n\n4949 101 => 4949\n\n5355 105 => 5355\n\n5777 109
    => 5777\n\n6215 113 => 6215\n\n6669 117 => 6669\n\n7139 121 => 7139\n\n7625 125
    => 7625\n\n8127 129 => 8127\n\n8645 133 => 8645\n\n9179 137 => 9179\n\n9729 141
    => 9729\n\n10295 145 => 10295\n\n10877 149 => 10877\n\n11475 153 => 11475\n\n12089
    157 => 12089\n\n12719 161 => 12719\n\n13365 165 => 13365\n\n14027 169 => 14027\n\n14705
    173 => 14705\n\n15399 177 => 15399\n\n16109 181 => 16109\n\n16835 185 => 16835\n\n17577
    189 => 17577\n\n18335 193 => 18335\n\n19109 197 => 19109\n\n19899 201 => 19899\n\n20705
    205 => 20705\n\n21527 209 => 21527\n\n22365 213 => 22365\n\n23219 217 => 23219\n\n24089
    221 => 24089\n\n24975 225 => 24975\n\n25877 229 => 25877\n\n26795 233 => 26795\n\n27729
    237 => 27729\n\n28679 241 => 28679\n\n29645 245 => 29645\n\n30627 249 => 30627\n\n31625
    253 => 31625\n\n32639 257 => 32639\n\n33669 261 => 33669\n\n34715 265 => 34715\n\n35777
    269 => 35777\n\n36855 273 => 36855\n\n37949 277 => 37949\n\n39059 281 => 39059\n\n40185
    285 => 40185\n\n41327 289 => 41327\n\n42485 293 => 42485\n\n43659 297 => 43659\n\n44849
    301 => 44849\n\n46055 305 => 46055\n\n47277 309 => 47277\n\n48515 313 => 48515\n\n49769
    317 => 49769\n\n51039 321 => 51039\n\n52325 325 => 52325\n\n53627 329 => 53627\n\n54945
    333 => 54945\n\n56279 337 => 56279\n\n57629 341 => 57629\n\n58995 345 => 58995\n\n60377
    349 => 60377\n\n61775 353 => 61775\n\n63189 357 => 63189\n\n64619 361 => 64619\n\n66065
    365 => 66065\n\n67527 369 => 67527\n\n69005 373 => 69005\n\n70499 377 => 70499\n\n72009
    381 => 72009\n\n73535 385 => 73535\n\n75077 389 => 75077\n\n76635 393 => 76635\n\n78
  timestamp: 1659979392
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) {\n       \
    \ return $n;\n    }\n    return fib4(fib4($n - 1) + fib4($n - 2) + fib4($n - 3)\
    \ + fib4($n - 4));\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75u87y_5.php:26\n\
    Stack trace:\n#0 /tmp/tmp75u87y_5.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp75u87y_5.php\
    \ on line 26\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0 || $n >= MAX)\
    \ {\n        return null;\n    }\n\n    return fib4($n - 4) + fib4($n - 3) + fib4($n\
    \ - 2) + fib4($n - 1);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Undefined constant \"MAX\" in /tmp/tmpmvdr2ew4.php:16\n\
    Stack trace:\n#0 /tmp/tmpmvdr2ew4.php(24): fib4(5)\n#1 /tmp/tmpmvdr2ew4.php(28):\
    \ candidate(5)\n#2 /tmp/tmpmvdr2ew4.php(34): test()\n#3 {main}\n  thrown in /tmp/tmpmvdr2ew4.php\
    \ on line 16\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // Your code here...\n \
    \   \n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpg4iixsuh.php on line 18

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 3) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl4gvll1w.php:27\n\
    Stack trace:\n#0 /tmp/tmpl4gvll1w.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpl4gvll1w.php\
    \ on line 27\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = [\n        0,\n\
    \        0,\n        0,\n        0,\n        0\n    ];\n    $fib4[3] = $fib4[2];\n\
    \    $fib4[2] = $fib4[1];\n    $fib4[1] = $fib4[0];\n    $fib4[0] = $fib4[0] +\
    \ $fib4[1] + $fib4[2] + $fib4[3];\n\n    return $fib4[$n];\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\nThe other solutions are excellent. Just to show\
    \ another one. \n<code>\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp6rdpnidb.php
    on line 30

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$a = 0; $b = 1;\n\t$c = 0;\n\
    \tfor ($i = 0; $i <= $n; $i++) {\n\t\t$c = $a + $b;\n\t\t$a = $b;\n\t\t$b = $c;\n\
    \t}\n\treturn $c;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplarjqxk2.php:31\n\
    Stack trace:\n#0 /tmp/tmplarjqxk2.php(37): test()\n#1 {main}\n  thrown in /tmp/tmplarjqxk2.php\
    \ on line 31\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return $n <= 4? $n : $fib4($n\
    \ - 1) + $fib4($n - 2) + $fib4($n - 3) + $fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $fib4 in /tmp/tmp89y7my9f.php on line 16\n\
    \nFatal error: Uncaught Error: Value of type null is not callable in /tmp/tmp89y7my9f.php:16\n\
    Stack trace:\n#0 /tmp/tmp89y7my9f.php(20): fib4(5)\n#1 /tmp/tmp89y7my9f.php(24):\
    \ candidate(5)\n#2 /tmp/tmp89y7my9f.php(30): test()\n#3 {main}\n  thrown in /tmp/tmp89y7my9f.php\
    \ on line 16\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n<0) {\n        return\
    \ false;\n    }\n    $a = $b = $c = $d = $e = $f = 1;\n    for ($i=0; $i<$n; $i++)\
    \ {\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n\
    \        $e = $f+$a+$b+$c+$d+$e;\n        $f = $e;\n    }\n    return $f;\n}\n\
    \nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1lkcuapw.php:36\n\
    Stack trace:\n#0 /tmp/tmp1lkcuapw.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp1lkcuapw.php\
    \ on line 36\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    } else {\n        return fib4(fib4($n-1) + fib4($n-2) + fib4($n-3)\
    \ + fib4($n-4));\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpgn4noemb.php on line 19

    '
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$sum = 0;\n\tfor ($i=3; $i\
    \ <= $n; $i++) {\n\t\t$sum += $i*$i;\n\t}\n\treturn $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfds9ygmx.php:27\n\
    Stack trace:\n#0 /tmp/tmpfds9ygmx.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpfds9ygmx.php\
    \ on line 27\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz576uq7t.php:29\n\
    Stack trace:\n#0 /tmp/tmpz576uq7t.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpz576uq7t.php\
    \ on line 29\n"
  timestamp: 1659979387
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkkvq4cd8.php:29\n\
    Stack trace:\n#0 /tmp/tmpkkvq4cd8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpkkvq4cd8.php\
    \ on line 29\n"
  timestamp: 1659979387
