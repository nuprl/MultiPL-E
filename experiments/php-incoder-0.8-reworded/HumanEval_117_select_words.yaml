name: HumanEval_117_select_words
language: php
prompt: "<?php\n// Given a string s and a natural number n, you have been tasked to\
  \ implement \n// a function that returns an array of all words from string s that\
  \ contain exactly \n// n consonants, in order these words appear in the string s.\n\
  // If the string s is empty then the function should return an empty array.\n//\
  \ Note: you may assume the input string contains only letters and spaces.\n// Examples:\n\
  // >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>>\
  \ select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n//\
  \ >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"\
  Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n\
  // array(\"Uncle\")\nfunction select_words($s, $n) {\n"
tests: "function candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
  little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
  \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4)\
  \ !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"\
  )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  \n  if ($s === '' || $n === 0)\n    return array();\n\n  $vowels\
    \ = array('a','e','i','o','u');\n  $cons = array('b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z');\n\
    \n  $vowel_count = 0;\n  $cons_count = count($cons) - 1;\n\n  $words = array();\n\
    \  $last_letter = '';\n  \n  foreach (str_split($s) as $letter) {\n    if (in_array($letter,\
    \ $vowels) && $vowel_count < $n)\n      $vowel_count++;\n    elseif (in_array($letter,\
    \ $cons) && $cons_count >= $n)\n      $cons_count -= 1;\n\n    if ($vowel_count\
    \ === $n && $cons_count === 0)\n      array_push($words, $last_letter);\n    elseif\
    \ ($vowel_count === $n)\n      array_push($words, $last_letter . ' ' . $cons[$cons_count]);\n\
    \    elseif ($cons_count === 0)\n      array_push($words, $last_letter . ' ' .\
    \ $vowels[$vowel_count]);\n    else {\n      if ($cons_count > 0)\n        array_push($words,\
    \ $last_letter . ' ' . $cons[$cons_count]);\n      else\n        array_push($words,\
    \ $last_letter . ' ' . $vowels[$vowel_count]);\n    }\n\n    $last_letter = $letter;\n\
    \  }\n\n  return $words;\n}\n", "    if (empty($s))\n        return array();\n\
    \n    $words = array();\n    $length = strlen($s);\n\n    if ($length <= $n) {\n\
    \        $words = explode(' ', $s);\n    } else {\n        for ($i = 0; $i < $length;\
    \ $i++) {\n            $words[] = substr($s, $i, $n);\n        }\n    }\n\n  \
    \  return $words;\n}\n</code>\n<|/ a dscore=0 tags=string,php,arrays |>\n<| c\
    \ |>\nWhile this may answer the question, it is better to add some explanation\
    \ and, maybe, some code :)\n<|/ c |>\n<| c |>\nThank you so much for the answer.\
    \ But it still doesn't work. Maybe because I haven't yet gotten to learn Regex.\
    \ I was just wondering if there was a simpler solution which didn't involve Regex?\n\
    <|/ c |>\n<| c |>\nYes, the above method will work if you include regular expressions\
    \ in your learning process. The only thing that you may need to do is figure out\
    \ how to apply regular expressions to the solutions I provided earlier. Also,\
    \ please mark my answer as the correct one if it works.\n<|/ c |>\n<| c |>\nSorry\
    \ about that. I thought it would be easy to adapt your solution into mine. I'm\
    \ still fairly new to PHP but I'm guessing that with regex I would need to use\
    \ preg_match()?\n<|/ c |>\n<| c |>\nYes, preg_match() would probably be the easiest\
    \ way to implement the solution you had before. I'm not able to help you too much\
    \ with the regular expressions right now but I'll be sure to try to help you figure\
    \ it out when I have a bit more time. Good luck!\n<|/ c |>\n<| a dscore=0 tags=string,php,arrays\
    \ |>\nI would do it this way:\n<code>\n$string = 'Mary had a little lamb';\n$string\
    \ = preg_replace('/[^A-Za-z]+/', '', $string);\n$array = explode(' ', $string);\n\
    $array = array_filter($array);\n$array = array_count_values($array);\n$array =\
    \ array_slice($array,0,$n-1);\n$array = array_keys($array);\n</code>\n<|/ a |>\n\
    <| a dscore=0 tags=string,php,arrays |>\n<code>", "    $list = array();\n    $consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n    $vowels = \"aeiou\";\n    foreach (str_split($s)\
    \ as $letter) {\n        if (!strlen($letter)) continue;\n        $letter = strtolower($letter);\n\
    \        if (strpos($consonants, $letter) !== false) {\n            for ($i =\
    \ $n; $i >= 0; $i--) {\n                $list[] = substr($s, 0, $i);\n       \
    \     }\n            break;\n        }\n        if (strpos($vowels, $letter) !==\
    \ false) {\n            for ($i = $n; $i >= 0; $i--) {\n                $list[]\
    \ = substr($s, 0, $i);\n            }\n            break;\n        }\n    }\n\
    \    return $list;\n}", "   $result = [];\n   $s = explode(\" \", $s);\n   foreach\
    \ ($s as $word) {\n      if (count($word) == $n) {\n         $result[] = $word;\n\
    \      }\n   }\n   return $result;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThis\
    \ answer is wrong: It fails for cases like `select_words(\"Hello world\", 4)`.\
    \ See https://3v4l.org/jm8rT\n<|/ c |>\n<| a dscore=0 |>\nA simple approach to\
    \ solving this problem would be to iterate the length of the array and count the\
    \ number of vowels or consonants in each string. \nOnce we know how many consonants\
    \ there are, we just need to loop through the entire string and check if there\
    \ are n number of consonants. \n<code>", "  $words = array();\n  foreach (preg_split(\"\
    //u\", $s) as $word) {\n    $word = trim($word);\n    $count = substr_count($word,\
    \ 'a');\n    if ($count == $n) {\n      $words[] = $word;\n    }\n  }\n  return\
    \ $words;\n}\n", "    $result = [];\n    for ($i = 0, $j = strlen($s); $j < $i;\
    \ $j++) {\n        $result[] = substr($s, $j, (strlen($s) - $j));\n    }\n   \
    \ return $result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "    // TODO:\
    \ Write your code here\n\n}\n\n</cell>\n<text>\nTask 3. Counting syllables\n\n\
    </text>\n<cell>", "    $arr = explode(\" \", $s);\n    $arr2 = array();\n    foreach($arr\
    \ as $k => $v) {\n        if(strlen($v) == $n) $arr2[] = $v;\n    }\n    return\
    \ $arr2;\n}\n</code>\n<|/ a dscore=0 tags=function,arrays,php |>\n<| a tags=function,arrays,php\
    \ |>\n<code>\n$string = \"Mary had a little lamb\";\n$n = 4; \n", "    $words\
    \ = array();\n    $pos = 0;\n    $len = strlen($s);\n\n    // while $pos < $len\
    \ we found enough letters to select $n letters\n    while ($pos < $len && count($words)\
    \ < $n) {\n        // get the next letter\n        $c1 = $s[$pos++];\n       \
    \ // if there is no letter to select then we found the end\n        if ($pos ==\
    \ $len) break;\n\n        // get the next letter\n        $c2 = $s[$pos++];\n\
    \        // if there is no letter to select then we found the end\n        if\
    \ ($pos == $len) break;\n\n        // find the letter that equals the one we want\
    \ to select\n        $c3 = $s[$pos];\n        // if there is no such letter then\
    \ we found the end\n        if ($c3 == $c1 || $c3 == $c2) continue;\n\n      \
    \  // if we get here, there is such letter\n        $words[] = $c3;\n    }\n\n\
    \    return $words;\n}\n", "    $words = [];\n    if ($s == \"\") {\n        return\
    \ $words;\n    }\n    foreach (str_split($s) as $letter) {\n        if (preg_match(\"\
    /^[a-z]+$/\", $letter)) {\n            array_push($words, $letter);\n        }\n\
    \    }\n    return $words;\n}\n", "  $arr = array();\n\n  if (!empty($s)) {\n\
    \    foreach(str_split($s) as $v) {\n      if (strpos($v, ' ') === false && strpos($v,\
    \ 'a') === false && strpos($v, 'e') === false && strpos($v, 'i') === false &&\
    \ strpos($v, 'o') === false && strpos($v, 'u') === false && strpos($v, 'y') ===\
    \ false) {\n        continue;\n      }\n      $arr = array(\"$v\");\n      break;\n\
    \    }\n  }\n  return $arr;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nHere is my\
    \ solution\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n$n = 3;\n$result\
    \ = explode(' ', $string);\n\n$result = array_filter($result, function($v) use\
    \ ($n) {\n  return count($v) >= $n;\n});\n\nvar_dump($result);\n</code>\n<|/ a\
    \ tags=php,string |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"Mary had a\
    \ little lamb\";\n$n = 3;\n$result = explode(' ', $string);\n\n$result = array_filter($result,\
    \ function($v) use ($n) {\n  return count($v) >= $n;\n});\n\nvar_dump($result);\n\
    </code>\n<|/ a tags=php,string |>\n<| a tags=php,string dscore=0 |>\n<code>",
  "}\n</cell>\n<text>\nProblem 5 - Escape strings\nGiven a string, return a escaped\
    \ string where all characters are replaced with their \ncorresponding HTML entities.\n\
    \n\n</text>\n<cell>", "    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\",\
    \ \"y\");\n    $words = array();\n    $words = explode(\" \",$s);\n    \n    foreach($words\
    \ as $key => $word) {\n        \n    }\n}", "    // code here\n}", "    $ret =\
    \ [];\n    $words = explode(' ', $s);\n    $count = (int) $n;\n\n    foreach ($words\
    \ as $word) {\n        if (count(str_split($word)) == $count) {\n            $ret[]\
    \ = $word;\n        }\n    }\n\n    return $ret;\n}\n</code>\n<|/ a tags=php dscore=0\
    \ |>\n<| c |>\nNice answer. It can be made better by removing duplicate words\
    \ and checking if string contains n number of words\n<|/ c |>\n<| c |>\n, you\
    \ are welcome to provide any improvements. I tried to explain the algorithm, but\
    \ I wanted to let you know that the code I gave you is pretty much self-explanatory\
    \ :) Feel free to ask me to elaborate on anything that is unclear :)\n<|/ c |>\n\
    <| c |>\nYeah. I would also recommend removing duplicate words and checking if\
    \ string contains n number of words. And also it is better to have count as variable\n\
    <|/ c |>\n<| c |>\n, thanks! I updated the code. Also, do you think it is better\
    \ now? I also added an explanation of what the algorithm should do.\n<|/ c |>\n\
    <| c |>\nThanks a lot man! You made my day! Can you please tell me what is the\
    \ point of using $array[$count] = $word; What if i will use $array[$count] = str_split($word);\
    \ it will work fine? I am just a newbie :)\n<|/ c |>\n<| a dscore=0 tags=php |>\n\
    I tried to make my solution more efficient by removing duplicate words and also\
    \ using count. Here is what I have done:\n<code>", "    $s = explode(\" \", $s);\n\
    \    $selected = array();\n    $i = 0;\n    foreach($s as $word) {\n        if(strlen($word)\
    \ == $n) {\n            $selected[$i] = $word;\n            $i++;\n        }\n\
    \    }\n    return $selected;\n}\n", "    $words = array();\n    $words = explode('\
    \ ', $s);\n    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_natural');\n    sort($words);\n    $count = 0;\n    $consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    foreach ($words as $word){\n        if ($count == $n){\n            $words[$n-1]\
    \ = substr($word, $0, 1);\n            array_push($words, $word);\n          \
    \  break;\n        }\n        foreach (str_split($word) as $letter) {\n      \
    \      if (in_array($letter, $consonants)){\n                $count++;\n     \
    \       }\n        }\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php,algorithm,arrays,string\
    \ |>\n<| a dscore=0 |>\nAnother solution is to use regular expressions:\n<code>",
  "  if (empty($s))\n    return array();\n\n  $words = array();\n\n  for ($i = 0;\
    \ $i < strlen($s); $i++)\n    $words[] = substr($s, $i, 1);\n\n  $i = count($words)\
    \ - 1;\n  while ($i >= 0 && count($words) >= $n)\n  {\n    $words[$i] == \" \"\
    \ ? $i-- : $i--;\n    array_pop($words);\n  }\n\n  return $words;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 tags=arrays,php |>\nHere are two ways that I could come\
    \ up with:\nUsing a regular expression would probably be the best way to do this,\
    \ but if you aren't familiar with them then this would be a pretty simple solution.\n\
    Here it goes.\n<code>", "    $words = array();\n    $s = strtoupper($s);\n   \
    \ $s = preg_replace(\"/\\s/\", \"\", $s);\n    foreach (explode(\" \", $s) as\
    \ $word) {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n\n/**\n * Return the maximum number\
    \ that does not exceed the given integer\n * @param $a the first number\n * @param\
    \ $b the second number\n * @return int the resulting number\n */", "  return array_filter($s,\
    \ function($x) {\n    return count($x) == $n;\n  });\n}\n</code>\n<|/ a tags=php,string\
    \ |>\n<| a tags=php,string |>\nYou can use this function in PHP. It will help\
    \ you.\n<code>", "    if (strlen($s) == 0) {\n        return array();\n    }\n\
    \    // write your code here\n    \n    $arr = str_split($s);\n    $arr = array_filter(\n\
    \        $arr, \n        function ($v) use ($n) {\n            $arr = str_split($v);\n\
    \            $count = count($arr);\n            return ($count == $n);\n     \
    \   }\n    );\n    \n    return $arr;\n}\n</code>\n<|/ a tags=algorithm,php,string\
    \ |>\n<| c |>\nThank you! This was the answer I was looking for. I was trying\
    \ to do it with regex... and it was getting complicated and didn't work as expected.\n\
    <|/ c |>\n<| a tags=algorithm,php,string dscore=2 |>\n<code>\n<?php", "    $result\
    \ = array();\n    $count = 0;\n    foreach (explode(' ', $s) as $word) {\n   \
    \     if (preg_match('/^.{' . $n . '}$/', $word)) {\n            $result[$word]\
    \ = $word;\n            $count++;\n        }\n    }\n    return $count ? $result\
    \ : array();\n}\n</code>\n<|/ a tags=arrays,php,preg-match |>\n<| a |>\nHere's\
    \ a functional solution:\n<code>", "\t$words = array();\n\tforeach (str_word_count($s)\
    \ as $k => $v) {\n\t\tif (strlen($s[$k]) == $n) {\n\t\t\t$words[] = $s[$k];\n\t\
    \t}\n\t}\n\treturn $words;\n}\n", '}', "\t$a = preg_split('/(\\s)/', $s);\n\t\
    $d = array();\n\tfor($i = 0; $i < count($a); $i++) {\n\t\t$n = substr_count($a[$i],\
    \ 'a');\n\t\tif($n >= $n) {\n\t\t\t$d[] = $a[$i];\n\t\t}\n\t}\n\treturn $d;\n}",
  "    $letters = array();\n    for ($i = 0; $i < strlen($s); $i++) {\n        if\
    \ ($s[$i] === ' ') {\n            $letters[] = 'space ';\n        } else {\n \
    \           $letters[] = $s[$i];\n        }\n    }\n    $count = 0;\n    $result\
    \ = array();\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($letters[$i]\
    \ === ' ') {\n            if ($count === $n) {\n                array_push($result,\
    \ $letters[$i]);\n            } else {\n                if ($count > $n) {\n \
    \                   break;\n                }\n            }\n        } else {\n\
    \            $count++;\n        }\n    }\n    return $result;\n}", "    if (empty($s))\
    \ {\n        return array();\n    }\n    $vowels = \"aeiou\";\n    $array = array();\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        $word = substr($s, 0, $i);\n\
    \        $count = str_word_count($word);\n        if ($count == $n) {\n      \
    \      $array[] = $word;\n        }\n        for ($j = 0; $j < $n; $j++) {\n \
    \           if (in_array($word[$j], $vowels)) {\n                $array[] = $word;\n\
    \                break;\n            }\n        }\n    }\n    return $array;\n\
    }", "    array_push($arr, array());\n}", "    if ($s == \"\") {\n        return\
    \ array();\n    }\n    $arr = str_split($s);\n    $str = \"\";\n    $counter =\
    \ 0;\n    $new_arr = [];\n    for ($i = 0; $i < count($arr); $i++) {\n       \
    \ if ($counter == $n) {\n            $new_arr[] = $str;\n            $str = \"\
    \";\n            $counter = 0;\n        }\n        $str = $str . $arr[$i];\n \
    \       if ($arr[$i] == \" \") {\n            $counter++;\n        }\n    }\n\
    \    return $new_arr;\n}\n", "    $vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U'];\n    $words = array();\n    for($i = 0; $i < strlen($s); $i++)\
    \ {\n        $ch = strtolower($s[$i]);\n        if(in_array($ch, $vowels)) {\n\
    \            array_push($words, $s[$i]);\n        }\n    }\n    return $words;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThe algorithm should also work if there is a space\
    \ in the string, or if the string only contains spaces. But I think this answer\
    \ makes the most sense because there is no special handling of spaces in the original\
    \ solution. `in_array` also has some overhead that `array_filter` doesn't, but\
    \ it's not too much overhead.\n<|/ c |>\n<| c |>\nI just added a comment to the\
    \ original question (first paragraph) that states that `select_words` should also\
    \ work if `s` only contains spaces and `n` is greater than or equal to 1.\n<|/\
    \ c |>\n<| c |>\nGood idea, though it's only necessary to check spaces when `n`\
    \ is 1, and that could easily be done with `if (count($words) == 1 || $words[0]\
    \ == ' ')`.\n<|/ c |>\n<| a dscore=0 |>\nYou can create an array of strings that\
    \ contain 4 consonants and then remove all words that have a length of 4 using\
    \ array_filter()\n<code>\n<?php", "    if (empty($s)) {\n        return array();\n\
    \    }\n    $words = array();\n    $i = 0;\n    foreach (str_word_count($s, 1)\
    \ as $word) {\n        if (substr_count($word, $s[0]) == $n) {\n            $words[]\
    \ = $word;\n        }\n        $i++;\n        if ($i >= $n) {\n            break;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a tags=string,php,arrays\
    \ dscore=0 |>\n<| a dscore=0 |>\nI hope this help you out. \n<code>\n<?php\n$str\
    \ = \"Mary had a little lamb\";\n$n = 4;\n\n$result = [];\nforeach (str_word_count($str,\
    \ 1) as $word)\n{\n    if (substr_count($word, $s[0]) == $n)\n    {\n        $result[]\
    \ = $word;\n    }\n}\nprint_r($result);\n</code>\n<|/ a tags=string,php,arrays\
    \ |>\n<| c |>\nPlease add an explanation to your code for the OP and for the community\
    \ members in future :)\n<|/ c |>\n<| c |>\nThis one doesn't even give the desired\
    \ output. The OP wants to only get an array of the words in string that contain\
    \ *exactly* 4 consonants.\n<|/ c |>\n<| a dscore=0 tags=string,php,arrays |>\n\
    <code>\n<?php\n", "\t$array = [];\n\tfor ($i = 0; $i < count($s); $i++) {\n\t\t\
    $new_s = $s[$i];\n\t\tfor ($j = 0; $j < strlen($new_s); $j++) {\n\t\t\tif (ctype_alpha($new_s[$j]))\
    \ {\n\t\t\t\tif ($new_s[$j] == 'a' || $new_s[$j] == 'e' || $new_s[$j] == 'i' ||\
    \ $new_s[$j] == 'o' || $new_s[$j] == 'u') {\n\t\t\t\t\t$array[] = $new_s;\n\t\t\
    \t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t$array[] = $new_s;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\tif (count($array) < $n) {\n\t\treturn [];\n\t}\n\treturn $array;\n\
    }\n", "  // Write your function here\n  $result = [];\n  $words = explode(\" \"\
    , $s);\n  for ($i = 0; $i < count($words); $i++) {\n    if ($words[$i] == '')\
    \ {\n      continue;\n    }\n    $result = array_merge($result, count_consonants($words[$i]));\n\
    \  }\n  return $result;\n}\n", "    $words = array();\n    if ($s !== \"\") {\n\
    \        $chars = preg_split('//', $s);\n        foreach ($chars as $char) {\n\
    \            if (isConsonant($char, $n)) {\n                $words[] = $char;\n\
    \            }\n        }\n    }\n    return $words;\n}\n", "}\n\n", "  $words\
    \ = explode(' ', trim($s));\n  $result = [];\n  foreach ($words as $word) {\n\
    \    if (strlen($word) == $n) {\n      $result[] = $word;\n    }\n  }\n  return\
    \ $result;\n}\n", "    $words = array();\n    $words = preg_split('/\\s+/', $s);\n\
    \    $result = array();\n    foreach ($words as $word) {\n        if (count(preg_split('/[^aeiou]+/',\
    \ $word)) <= $n) {\n            array_push($result, $word);\n        }\n    }\n\
    \    return $result;\n}", "    \n}\n\n", "    // Your code here\n    $res = array();\n\
    \    foreach (explode(' ', $s) as $val) {\n        $res = array_merge($res, preg_split('/\\\
    s+/', $val));\n    }\n    sort($res, SORT_STRING);\n    $count = count($res);\n\
    \    $first = 0;\n    $last = count($res) - 1;\n    $i = 1;\n    while($i < $n)\
    \ {\n        $j = 1;\n        while ($j < $count && $res[$i] == $res[$j]) {\n\
    \            $j++;\n        }\n        if ($j == $count) {\n            array_push($res,\
    \ $res[$first]);\n            $first++;\n        }\n        if ($last - $first\
    \ == $count) {\n            break;\n        }\n        if ($j > $count) {\n  \
    \          $i++;\n        }\n    }\n    return $res;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nSorry but I don't understand your code. I am not too familiar with\
    \ PHP but I think I understand the code you wrote. Can you explain it a little\
    \ more? Thank you\n<|/ c |>\n<| c |>\nI edited the question and added some explanation,\
    \ hope this helps\n<|/ c |>\n<| c |>\nThanks again. I was able to get the code\
    \ working but unfortunately it only works with 2 consonants. My problem with this\
    \ is that I don't know how else to do the code. For example, if I input \"Mary\
    \ had a little lamb\", it will return \"lamb\" but not \"little\". Can you help\
    \ me modify your code so it returns \"little\" as well? Thanks\n<|/ c |>\n<| c\
    \ |>\nI edited my answer to fix the issue you described.\n<|/ c |>\n<| c |>\n\
    Thank you for your help but I ran into a problem when I tested the code with different\
    \ numbers of consonants. When I input \"Mary had a little lamb\" it returns \"\
    lamb\" but when I input \"Mary had a little lamb\" it returns \"Mary\" instead\
    \ of \"little\". I edited the question so you can see what I mean. Thanks\n<|/\
    \ c |>\n<| a dscore=1 tags=string,php,arrays |>\n<code>\n<?php\n$string = \"Mary\
    \ had a little lamb\";\n\n$array = preg_split('/[^aeiou]+/', $string);\nprint_r($array);\n\
    </code>\n<|/ a |>\n<| a |>\n<code>\n$string = \"Mary had a little lamb\";\npreg_match_all('/[aeiou",
  "    $return = array();\n    $first = true;\n    $last_char = '';\n    $s = preg_replace(\"\
    /[^a-zA-Z ]/\", \"\", $s);\n    $char_count = str_len($s);\n    foreach (str_split($s)\
    \ as $char) {\n        if ($char == \" \" || $char == \"-\" || $char == \"\")\
    \ {\n            if ($char == \" \") {\n                $char_count--;\n     \
    \           if ($char_count < $n) {\n                    if ($first) {\n     \
    \                   $return[] = $char;\n                        $first_char =\
    \ $char;\n                    } else {\n                        $return[] = \"\
    $char\";\n                    }\n                }\n            } else {\n   \
    \             $char_count--;\n                if ($char_count < $n) {\n      \
    \              $return[] = \"$char\";\n                }\n            }\n    \
    \    } else {\n            $char_count--;\n            if ($char_count < $n) {\n\
    \                if ($first) {\n                    $return[] = \"$char\";\n \
    \                   $first_char = $char;\n                } else {\n         \
    \           $return[] = \"$char\";\n                }\n            }\n       \
    \ }\n        if ($first && $first_char == \" \") {\n            $first_char =\
    \ '';\n        }\n        $first = false;\n    }\n    return $return;\n}\n", " \
    \   // Write your code here\n}\n\n</cell>\n<cell>", "\t$words = array();\n\t$s\
    \ = str_replace(' ', '', $s);\n\t$n = str_pad('', $n, '0');\n\tfor ($i = 0; $i\
    \ < strlen($s); $i++) {\n\t\t$char = $s[$i];\n\t\tif ($char == \" \") {\n\t\t\t\
    $words[] = '';\n\t\t\tcontinue;\n\t\t}\n\t\t$n = intval($n) - 1;\n\t\t$n = ($n\
    \ % strlen($char)) ? 0 : $n;\n\t\t$char_count = $n - $n % strlen($char);\n\t\t\
    for ($j = 0; $j < strlen($char); $j++) {\n\t\t\t$char2 = substr($char, $j, 1);\n\
    \t\t\tif ($char2 == $s[$i + $j]) $j++;\n\t\t\t$char_count2 = $char_count;\n\t\t\
    \tif ($char2 != \" \") {\n\t\t\t\t$char_count2--;\n\t\t\t}\n\t\t\tif ($char_count\
    \ >= $char_count2) {\n\t\t\t\t$words[] = $char2;\n\t\t\t\t$char_count = 0;\n\t\
    \t\t\t$char_count2 = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn $words;\n}\n", "    $words\
    \ = array();\n    $i = strlen($s) - 1;\n    $lastChar = substr($s, $i, 1);\n \
    \   while(!empty($s)) {\n        if($i > 0 && $lastChar === substr($s, $i - 1,\
    \ 1)) {\n            $words[] = substr($s, 0, $i);\n            $s = substr($s,\
    \ $i + 1);\n            $i--;\n        } else if($lastChar !== substr($s, $i -\
    \ 1, 1) && $i > 0 && $lastChar === substr($s, $i - 2, 1)) {\n            $words[]\
    \ = substr($s, 0, $i);\n            $s = substr($s, $i + 1);\n            $i--;\n\
    \        } else {\n            $s = substr($s, 0, $i - 1);\n            $i--;\n\
    \        }\n        $lastChar = substr($s, $i, 1);\n    }\n    return $words;\n\
    }\n</code>\n<|/ a tags=string,arrays,php |>\n<| c |>\nThe code works fine except\
    \ that if $n >= 4 then it returns 4 elements instead of just 3 as per OP's spec.\
    \  I think this needs to be corrected with if-else statement to return just 3\
    \ words.  I tried to implement the if-else statement but didn't work.\n<|/ c |>\n\
    <| a dscore=2 |>\nAs many have already noted, your task is actually a little more\
    \ complicated than it seems at first glance. Here's a solution that also handles\
    \ the empty string properly:\n<code>\n$string = \"Hello\";\n$n = 3;\n$words =\
    \ array();\n$i = strlen($string) - 1;\n$lastChar = substr($string, $i, 1);\nwhile\
    \ (!empty($string)) {\n    if ($i > 0 && $lastChar === substr($string, $i - 1,\
    \ 1)) {\n        $words[] = substr($string, 0, $i);\n        $string = substr($string,\
    \ $i + 1);\n        $i--;\n    } elseif ($lastChar !== substr($string, $i - 1,\
    \ 1) && $i > 0 && $lastChar === substr($string, $i - 2, 1)) {\n        $words[]\
    \ = substr($string, 0, $i);\n        $string = substr($string, $i + 1);\n    \
    \    $i--;\n    } else {\n        $string = substr($string, 0, $i - 1);\n    \
    \    $i--;\n    }\n    $lastChar = substr($string, $i, 1);\n}\n$words = array_slice($words,\
    \ 0, $n);\nprint_r($words);\n</code>\nThe above code also uses array_slice to\
    \ limit the output to $n items. Here's a demo.\n<|/ a tags=string,arrays,php |>\n\
    <| a dscore=2 |>", "  // Write your code here\n  return array();\n}\n\n/*", " \
    \   $words = array();\n    $strlen = $strlen = strlen($s);\n\n    for ($i = 0;\
    \ $i < $strlen; $i++) {\n        $char = strtoupper($s[$i]);\n        $count =\
    \ 0; \n        for ($j=0; $j < $n; $j++) {\n            $count += strpos($char,\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        }\n        if ($count == $n) {\n \
    \           $words[] = $char;\n        }\n    }\n    return $words;\n}", "   \
    \ $s = preg_replace('/[\\s+]/', ' ', $s);\n    $array = explode(' ', $s);\n  \
    \  foreach ($array as $key => $val) {\n        if (strlen($val) == $n && !preg_match('/[^aeiouyAEIOUY]/i',\
    \ $val)) {\n            array_splice($array, $key, 1);\n        }\n    }\n   \
    \ return $array;\n}\n</code>\n<|/ a tags=php,string |>\n<| c |>\nThank you so\
    \ much!\n<|/ c |>\n<| c |>\nGlad I could help!\n<|/ c |>\n<| a tags=php,string\
    \ |>\nYou can use preg_match_all() function to match word in the string by regex\
    \ pattern.\n<code>\n<?php\n\n$string = \"The quick brown fox jumps over the lazy\
    \ dog\";\n\n$pattern = '/\\b[aeiouy]+\\b/i';\n\npreg_match_all($pattern, $string,\
    \ $matches);\n\nprint_r($matches);\n</code>\noutput:\n<code>\nArray\n(\n    [0]\
    \ => Array\n        (\n            [0] => Array\n                (\n         \
    \           [0] => The\n                    [1] => brown\n                   \
    \ [2] => fox\n                    [3] => lazy\n                    [4] => dog\n\
    \                )\n\n        )\n\n)\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,string\
    \ dscore=1 |>\n<code>", "    // Write your code here\n}\n", "    return [];\n}",
  "    $letters = preg_split('//', $s);\n    $count = 0;\n    $result = [];\n\n  \
    \  foreach ($letters as $letter) {\n        $count = 0;\n        $result[] = $letter;\n\
    \n        if (preg_match(\"/(.)\\1/\", $letter, $matches)) {\n            $count++;\n\
    \            if ($count > $n) $result = [];\n        }\n    }\n\n    return $result;\n\
    }\n</code>\n<|/ a tags=string,php |>\n<| a |>\nI would use a regular expression\
    \ to do it.  The PHP preg_split function will split the string into an array,\
    \ based on a pattern:\n<code>\n<?php\n$words = \"Mary had a little lamb\";\n$letters\
    \ = preg_split('/([a-zA-Z]+)/', $words);\n</code>\nThe first argument to preg_split\
    \ is the pattern, and the second argument is the string to split.\nThe pattern\
    \ here matches the set of letters that appear in each of the strings in the array.\
    \  We have set up the pattern to be a group of one or more letters, so it will\
    \ match one group of letters.  The first group of letters ([a-zA-Z]+) is the pattern,\
    \ and will be matched against each string in the array.\nWe then need to loop\
    \ through this array, matching each string to the pattern, and adding it to the\
    \ output array if it is of the desired length:\n<code>\n$result = [];\nforeach\
    \ ($letters as $letter) {\n    if (preg_match('/([a-zA-Z]+)/', $letter, $matches))\
    \ {\n        if (count($matches) == 4) {\n            $result[] = $letter;\n \
    \       }\n    }\n}\n</code>\nThis loop will go through each string in the array,\
    \ match it against the pattern, and add it to the output array if it is of the\
    \ desired length.\nThe above code outputs:\n<code>\nArray\n(\n    [0] => Mary\n\
    \    [1] => had\n    [2] => a\n    [3] => little\n)\n</code>\n<|/ a tags=string,php\
    \ dscore=0 |>\n<| c |>\nThanks for the reply, but I don't understand how this\
    \ code can work as it is. \nIn particular, I don't understand how the $letters\
    \ array is split into single words. \nAlso, I don't see how $letters is split\
    \ into 4 words since your example has only one word.\n<|/ c |>\n<| c |>\nThe code\
    \ splits the string into words by splitting the string into sequences of letters\
    \ that appear consecutively.  It only splits the string into words when it gets\
    \ to the fourth letter, since that is the pattern that marks the start of the\
    \ next set of letters.\n<|/ c |>\n<| c |>\nThe code splits the string into words\
    \ by splitting the string into sequences of letters that appear consecutively.\
    \  It only split", "\t// your code here\n}\n", "    $vowels = \"aeiou\";\n   \
    \ $words = [];\n    $s = strtoupper($s);\n    if ($s == \"\") {\n        return\
    \ $words;\n    }\n\n    for ($i = 0; $i < strlen($s); $i++) {\n        $c = substr($s,\
    \ $i, 1);\n        if (in_array($c, $vowels)) {\n            $words[] = $c;\n\
    \        }\n    }\n\n    $words = array_slice($words, 0, $n);\n    sort($words);\n\
    \    return $words;\n}\n", "    if (empty($s))\n        return array();\n    \n\
    \    $letters = str_split($s);\n    \n    $words = [];\n    for ($i = 0; $i <\
    \ count($letters); ++$i) {\n        if (count(array_filter($letters, fn ($letter)\
    \ => ($letter == $letters[$i]))) == $n)\n            $words[] = $letters[$i];\n\
    \    }\n    return $words;\n}", "    $words = array();\n\n    $vowels = \"aeiou\"\
    ;\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n\n    // Loop through each consonant\
    \ and test if the string contains it.\n    for ($i = 0; $i < strlen($consonants);\
    \ $i++) {\n        $teststring = str_replace($consonants, \"\", $s);\n\n     \
    \   if (strlen($teststring) === $n) {\n            $words[] = $teststring;\n \
    \       }\n    }\n\n    // Loop through each vowel and test if the string contains\
    \ it.\n    for ($j = 0; $j < strlen($vowels); $j++) {\n        $teststring = str_replace($vowels,\
    \ \"\", $s);\n\n        if (strlen($teststring) === $n) {\n            $words[]\
    \ = $teststring;\n        }\n    }\n\n    // Return an empty array if the word\
    \ is longer than the length of\n    // the consonant/vowel combinations.\n   \
    \ return $words;\n}", "    \n}", "\tif (empty($s)) {\n\t\treturn array();\n\t\
    }\n\treturn str_word_count($s);\n}\n", "    return [];\n}", "    // Your code\
    \ here\n}", "\t// Your code here\n\t\n\t$words = array();\n\t\n\tif ($s == \"\"\
    \ || $n == 0) {\n\t\treturn array();\n\t}\n\t\n\t$words = explode(\" \", $s);\n\
    \t\n\t$length = count($words);\n\t\n\tfor ($i=0; $i<$length; $i++) {\n\t\t\n\t\
    \t$pos = strpos($words[$i], \" \");\n\t\t\n\t\tif ($pos != false && $pos <= strlen($words[$i])\
    \ - $n) {\n\t\t\t\n\t\t\t$w = substr($words[$i], 0, $pos);\n\t\t\t$w = substr($w,\
    \ 0, strrpos($w, \" \"));\n\t\t\t\n\t\t\t$words[$i] = $w;\n\t\t}\n\t}\n\t\n\t\
    return $words;\n}\n", "    $words = array();\n\n    $s_arr = str_split($s);\n\n\
    \    foreach ($s_arr as $key => $value) {\n        if ($value == ' ') {\n    \
    \        $words[] = $value;\n        }\n    }\n\n    return $words;\n}\n</code>\n\
    I took inspiration from the above solution to solve the problem and made this\
    \ solution:\n<code>", "    $s = str_replace(\" \", \"\", $s);\n    $words = explode(\"\
    \ \", $s);\n    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_natural');\n    $words = array_filter($words, 'is_consonant');\n    sort($words);\n\
    \    return array_slice($words, 0, $n);\n}\n", "    $words = array();\n    \n\
    \    if ($s == \"\") {\n        return $words;\n    }\n    \n    // Split s into\
    \ a list of words\n    $words = explode(\" \", $s);\n    \n    // Count the consonants\
    \ in each word\n    $word_consonants = array_count_values(array_map(\"mb_strlen\"\
    , $words));\n    \n    // Filter out words that contain fewer than n consonants\n\
    \    $filtered_words = array_filter($words, \"filter_words_consonant_count\");\n\
    \    \n    // Create an array to hold the number of consonants of each word\n\
    \    $word_consonant_count = array();\n    \n    // Loop through each word\n \
    \   foreach ($filtered_words as $word) {\n        $consonants = count(explode(\"\
    \ \", $word));\n        $word_consonant_count[] = $consonants;\n    }\n    \n\
    \    // Sort the words by the number of consonants they contain\n    sort($word_consonant_count);\n\
    \    \n    // Re-index $word_consonant_count to start with the largest number\
    \ of consonants for each word\n    array_multisort($word_consonant_count, $filtered_words);\n\
    \    \n    // Return the filtered words\n    return $filtered_words;\n}\n", "\t\
    $words = array();\n\tfor($i = 0; $i < strlen($s); $i++) {\n\t\tif(strpos($s, '\
    \ ', $i) == $i) {\n\t\t\tif(strlen(substr($s, $i, 1)) >= $n) {\n\t\t\t\t$words[]\
    \ = substr($s, $i, $n - 1);\n\t\t\t\t$i = $i + 1;\n\t\t\t\tif($i >= strlen($s))\
    \ break;\n\t\t\t} else {\n\t\t\t\t$words[] = substr($s, $i, 1);\n\t\t\t\t$i =\
    \ $i + 1;\n\t\t\t\tif($i >= strlen($s)) break;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ $words;\n}\n</code>\n<|/ a tags=php,algorithm,string |>\n<| c |>\nThis doesn't\
    \ seem to work at all. `select_words('Mary had a little lamb', 3)` returns `array(\"\
    little\", \"lamb\")`, but there should only be one \"little\".\n<|/ c |>\n<| c\
    \ |>\nAh. Didn't consider it that way. Well, that should be easy. I'll edit in\
    \ a solution\n<|/ c |>\n<| a |>\nWhat about just removing all non-letters from\
    \ the original string and adding them in order that they appear in the string?\n\
    <code>", "    $count = 0;\n    $words = array();\n    foreach(str_split($s) as\
    \ $char) {\n        if($char == ' ') {\n            if($count < $n) {\n      \
    \          $words[] = $char;\n                $count += 1;\n            }\n  \
    \      }\n        else if(strpos($char, 'aeiou') !== false) {\n            $words[]\
    \ = $char;\n            $count += 1;\n        }\n    }\n    return $words;\n}\n\
    </code>\n<|/ a |>\n<| a |>\n<code>", "    $words = array();\n    if (!empty($s))\
    \ {\n        for ($i = 0; $i < strlen($s); $i++) {\n            if ($s[$i] ==\
    \ \" \")\n                $words[] = \"\";\n            else\n               \
    \ $words[] = $s[$i];\n        }\n    }\n    $counts = array_count_values($words);\n\
    \    arsort($counts);\n    $keys = array_keys($counts, \"\");\n    $keys = array_slice($keys,\
    \ 0, $n);\n    return array_filter($keys);\n}\n", "    return $s;\n}", "    $words\
    \ = explode(' ', $s);\n    $counts = array_count_values($words);\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        $num = 0;\n        foreach (str_split($word)\
    \ as $c) {\n            if ($counts[$c] == $n) {\n                $num++;\n  \
    \          }\n        }\n        if ($num == $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thank you so much for your explanation. I appreciate it so much it really helps\
    \ to understand how exactly the functions work. Unfortunately, the output of this\
    \ code is incorrect. It should be an array that has \"little\" because \"little\"\
    \ is the only word that contains 4 consonants. Instead, it displays an array with\
    \ all of the words that contain 4 consonants. I do not understand why this is\
    \ occurring.\n<|/ c |>\n<| c |>\nI've added a fixed version of the code - it uses\
    \ `explode` as before, but now splits each word on spaces. `array_count_values`\
    \ returns an array where each element is the count of each value in the array.\
    \ We then use that to determine what words we include. I've also added a test\
    \ case that should work as you require.\n<|/ c |>\n<| c |>\nI added a fixed version\
    \ of the code - it uses `explode` as before, but now splits each word on spaces.\
    \ `array_count_values` returns an array where each element is the count of each\
    \ value in the array. We then use that to determine what words we include.\n<|/\
    \ c |>\n<| a tags=php |>\nHere is a PHP function that uses explode and array_count_values\
    \ to do what you want:\n<code>\n<?php\n", "    return array();\n}\n</code>\n<|/\
    \ q dscore=0 tags=string,php,regex,arrays |>\n<| c |>\nHave you tried anything\
    \ yet?\n<|/ c |>\n<| c |>\nYes. But nothing is coming up after lots of googling\
    \ and I couldn't find anything on stackoverflow that could help me.\n<|/ c |>\n\
    <| c |>\nSo you know how to iterate over arrays, and you know how to use regex.\
    \ Now you're looking for `preg_match`. Show us what you tried and we can help\
    \ you debug it.\n<|/ c |>\n<| c |>\nI added my try to the original question\n\
    <|/ c |>\n<| c |>\nWhy `Mary` appears twice in the result array?\n<|/ c |>\n<|\
    \ a |>\nYou can use preg_match_all() with a regex like\n<code>\n\"/^(?=.{0,$n}$)[a-zA-Z\\\
    s]*(?=\\p{Ll})\\p{Ll}$/i\"\n</code>\nSee the regex demo\nDetails:\n\n^ - start\
    \ of string\n(?=.{0,$n}$) - a positive lookahead that requires n chars (0 or more)\
    \ to be present at the start of string\n[a-zA-Z\\s]* - zero or more ASCII letters\
    \ or whitespace\n(?=\\p{Ll}) - a positive lookahead that requires (as a whole\
    \ word) any letter and a lowercase letter\n\\p{Ll} - a lowercase letter\n$ - end\
    \ of string.\n\nPHP code:\n<code>\n$re = \"/^(?=.{0,$n}$)[a-zA-Z\\\\s]*(?=\\\\\
    p{Ll})\\\\p{Ll}$/i\"; \n$str = \"Mary had a little lamb\"; \npreg_match_all($re,\
    \ $str, $matches);\nprint_r($matches[0]);\n</code>\nOutput:\n<code>\nArray\n(\n\
    \    [0] => Array\n        (\n            [0] => Mary\n        )\n\n    [1] =>\
    \ Array\n        (\n            [0] => little\n        )\n\n    [2] => Array\n\
    \        (\n            [0] => lamb\n        )\n\n)\n</code>\n<|/ a dscore=0 tags=string,php,regex,arrays\
    \ |>\n<| c |>\nThis is awesome! But for some reason it's still printing Mary twice\
    \ in the array. Also can you explain how this works?\n<|/ c |>\n<| c |>\nThis\
    \ `^(?=.{0,$n}$)[a-zA-Z\\s]*(?=\\p{Ll})\\p{", "\t$words = array();\n\tforeach(str_split($s)\
    \ as $char) {\n\t\t$vowels = \"aeiouAEIOU\";\n\t\tif(preg_match(\"!\" . $vowels\
    \ . \"!\", $char) && preg_match(\"!\" . $vowels . \"!\", $n)) {\n\t\t\t$words[]\
    \ = $char;\n\t\t}\n\t}\n\treturn $words;\n}\n", "    return $s;\n}\n", "  $s =\
    \ strtolower($s);\n  $words = array();\n  if ($n > 0) {\n    if (strlen($s) ==\
    \ 0) {\n      return $words;\n    }\n    $vowels = \"aeiouy\";\n    $consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n    $consonant_pattern = '[' . implode('|', $consonants)\
    \ . ']';\n    $consonant_pattern = '/' . $consonant_pattern . '/';\n    $vowel_pattern\
    \ = '/[aeiouy' . implode('', array_map(function($vowel) {\n      return $vowel\
    \ . $vowel;\n    }, $vowels)) . ']/';\n    $vowel_pattern = '/' . $vowel_pattern\
    \ . '/';\n    $words = array();\n    $last = 0;\n    $len = strlen($s);\n    for\
    \ ($i = 0; $i < $len; $i++) {\n      if (preg_match($consonant_pattern, $s[$i]))\
    \ {\n        $words[] = substr($s, $last, $i - $last);\n        $last = $i + 1;\n\
    \      }\n    }\n    if ($last != $len) {\n      $words[] = substr($s, $last);\n\
    \    }\n    return $words;\n  }\n  return $words;\n}", "  $words = array();\n\
    \  if ($s == \"\") {\n    return $words;\n  }\n  $length = strlen($s);\n  for\
    \ ($i = 0; $i < $length; $i++) {\n    $a = ord($s[$i]);\n    \n    if ($a >= 65\
    \ && $a <= 90) {\n      if ($n <= 1) {\n        $words[] = $s[$i];\n      }\n\
    \      $b = ord($s[$i+1]);\n      if ($b > 90) {\n        $i += 1;\n      }\n\
    \    }\n  }\n  return $words;\n}\n", "    $words = array();\n    // Only consonants\
    \ in s.\n    $consonants = 'bcdfghjklmnpqrstvwxyz';\n\n    // Get all possible\
    \ pairs of consonants.\n    $pairs = combinations($consonants, 2);\n\n    // Loop\
    \ through all pairs of consonants and add all words satisfying the criteria.\n\
    \    foreach ($pairs as $c) {\n        $found = false;\n        $word = '';\n\
    \        // Loop for all letters in s.\n        for ($i = 0; $i < strlen($s);\
    \ $i++) {\n            // If the current letter in s is a consonant,\n       \
    \     // then add this letter to word until it reaches n.\n            if (substr($s,\
    \ $i, 1) == $c) {\n                // If word is full, add it.\n             \
    \   if (strlen($word) == $n) {\n                    $words[] = $word;\n      \
    \          }\n                // Reset the word.\n                $word = '';\n\
    \                // Add current letter to word.\n                $word .= substr($s,\
    \ $i, 1);\n                // Stop after n letters are found (word is full).\n\
    \                $found = true;\n                break;\n            }\n     \
    \   }\n        // If we have not found the word fully, then word was not full.\n\
    \        if (!$found) {\n            $words[] = $word;\n        }\n    }\n   \
    \ return $words;\n}\n", "    \n    $vowels = \"aeiou\";\n    $consonants = array_diff($vowels,\
    \ $s);\n    $consonants_count = array_count_values($consonants);\n\n    $result\
    \ = [];\n    foreach($consonants_count as $consonant => $times) {\n        if\
    \ ($times == $n) {\n            $result[] = $consonant;\n        }\n    }\n\n\
    \    if (empty($s)) {\n        return [];\n    }\n\n    return $result;\n}\n",
  "    return $s;\n}\n", "    $arr = array();\n    $arr = explode(\" \", $s);\n  \
    \  for($i = 0; $i < count($arr); $i++){\n        $letter = substr($arr[$i], 0,\
    \ 1);\n        if(strlen($letter) == $n){\n            $arr[$i] = substr($arr[$i],\
    \ 1);\n        }\n    }\n    return $arr;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nI am still struggling with this problem, and I appreciate you showing me\
    \ how to do it in PHP. I am not sure how I would do it with regex. I would have\
    \ thought that regex would be the easiest way to do this? I have just started\
    \ learning regex so I am still struggling.\n<|/ c |>\n<| c |>\n- I updated the\
    \ answer. Hopefully it gets you closer to what you want.\n<|/ c |>\n<| c |>\n\
    That is so close! It is almost there, except now the results print out on two\
    \ lines, so if for example I put in \"Mary had a little lamb\" I get two lines\
    \ of \"Mary\" and \"lamb\", instead of just one. Thanks so much for your help\
    \ so far\n<|/ c |>\n<| c |>\n- Yes, I see. I changed it so that the function only\
    \ returns one word. You can see it working here: http://sandbox.onlinephpfunctions.com/code/7ab1ac527c1f5de44f37e776ccc15ab2be30c091\n\
    <|/ c |>\n<| c |>\nYes thank you so much, I appreciate you taking the time to\
    \ help me out with this. I am still really confused and frustrated that my solution\
    \ was so far from what I have come to expect with regex and php alone. Thank you\
    \ so much again\n<|/ c |>\n<| a tags=regex,php,string |>\nYou can use preg_split()\
    \ to split on any word boundary that has a word character before and after it.\
    \ \npreg_split('/\\b\\W+\\W+/', \"Mary had a little lamb\") gives [\"Mary\", \"\
    had\", \"a\", \"little\", \"lamb\"]\n<|/ a dscore=0 |>\n<| a tags=regex,php,string\
    \ |>\nI wrote a short code to do this.\n<code>\n$s = \"Mary had a little lamb\"\
    ;\necho array_shift(preg_split('/\\b\\W+\\W+/', $s));\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you, that helped a lot\n<|/ ", "    if ($s == \"\") {\n \
    \       return array();\n    }\n    $letters = str_split($s);\n    $result = array();\n\
    \    foreach ($letters as $letter) {\n        if (in_array($letter, array('a',\
    \ 'e', 'i', 'o', 'u', \" \"))) {\n            continue;\n        }\n        $temp2\
    \ = select_letters($letter, $n);\n        if (count($temp2) != 0) {\n        \
    \    $result = array_merge($result, $temp2);\n        }\n    }\n    return $result;\n\
    }\n", "    return array();\n}\n</code>\n<|/ a tags=arrays,php dscore=0 |>\n<|\
    \ c |>\nThank you for your answers, I realized my question was really incorrect,\
    \ i apologize for that, and your help is much appreciated.\n<|/ c |>\n<| c |>\n\
    No worries, I just noticed that and corrected my answer.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\nI apologize for asking the question wrong, I apologize to all the posters\
    \ that replied this was wrong. This was my final answer:\n<code>\n<?php", "\t\
    $words = explode(' ', $s);\n\tif (count($words) == 0) {\n\t\treturn array();\n\
    \t} elseif (count($words) == 1) {\n\t\treturn $words;\n\t}\n\t$n = abs($n);\n\t\
    $counts = [];\n\tforeach ($words as $word) {\n\t\t$counts[$word] = substr_count($word,\
    \ \"con\");\n\t}\n\tasort($counts);\n\t$count = 0;\n\t$words = array();\n\tforeach\
    \ ($counts as $word => $count) {\n\t\tif ($count == $n) {\n\t\t\t$words[] = $word;\n\
    \t\t}\n\t}\n\treturn $words;\n}", "    // Only change code below this line\n\n\
    \    $arr = explode(' ', $s);\n    $ret = array();\n    foreach ($arr as $value)\
    \ {\n        $pos = strpos($value, \"a\");\n        if ($pos === false) {\n  \
    \          $ret[] = $value;\n        }\n    }\n    return $ret;\n}\n", "    $words\
    \ = array();\n    $count = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n   \
    \     $char = substr($s, $i, 1);\n        if ($char == ' ' || $char == '\\t'){\n\
    \            $count++;\n        } else {\n            $count = $count - 1;\n \
    \       }\n        if ($count == $n) {\n            $words[] = substr($s, 0, $i);\n\
    \            break;\n        }\n    }\n    return $words;\n}", "    $words = array();\n\
    \    if (strlen($s)) {\n        $words = explode(' ', $s);\n        for ($i =\
    \ 0; $i < count($words); $i++) {\n            $letters = explode(' ', $words[$i]);\n\
    \            if (count($letters) == $n) {\n                array_push($words,\
    \ $words[$i]);\n            }\n        }\n    }\n    return $words;\n}\n</code>\n\
    <|/ a dscore=1 tags=arrays,php |>\n<| c |>\nThank you for your reply, I'm looking\
    \ at it and trying to understand it. I added the explanations at the bottom of\
    \ my post. Thanks again for your help and I'll let you know how it goes.\n<|/\
    \ c |>\n<| a dscore=1 |>\nYour code has a few problems. First, the else statement\
    \ in the second for loop is causing your error. As it is right now, the first\
    \ if statement is always true, because $letters starts out empty and thus count($letters)\
    \ will be 0, so it will never enter the else statement.\nSecond, you have $str1\
    \ and $str2 as $str and $str2, which results in your $str1 being an empty string.\
    \ \nThird, you don't have any function named select_words. You actually have two\
    \ functions: find_words and select_words. You will need to rename one of them\
    \ to be consistent with your question.\nHere is an example of fixing your code:\n\
    <code>", "\t// your code goes here\n}", "    if ($n >= strlen($s)) {\n       \
    \ return array();\n    }\n    \n    $count = 0;\n    $words = array();\n    \n\
    \    while ($n > 0) {\n        if ($s[$count] === \"o\") {\n            $n--;\n\
    \            $words = array_merge($words, select_words($s, $n));\n        } else\
    \ {\n            if ($s[$count] === \"u\") {\n                $n--;\n        \
    \        $words = array_merge($words, select_words($s, $n));\n            } else\
    \ {\n                $words[] = $s[$count];\n            }\n        }\n      \
    \  $count++;\n    }\n    \n    return $words;\n}\n", "    return explode(' ',\
    \ array_filter($s));\n}\n</code>\n<|/ a tags=php,string,arrays dscore=0 |>\n<|\
    \ a |>\n<code>\n<?php\n", "    \n    // Write your implementation here.\n    return\
    \ $words;\n}\n", "  // Your code goes here.\n}\n</cell>\n<cell>", "    // Your\
    \ code here\n    $words = array();\n    if ($s == \"\") return $words;\n    $arr\
    \ = explode(\" \", $s);\n    foreach ($arr as $key => $val) {\n        $len =\
    \ count($val);\n        for ($i = 0; $i < $len; $i++) {\n            $val = $val[$i];\n\
    \            if ($val == 'h') $words[] = $val[1];\n            elseif ($val ==\
    \ 'e') $words[] = $val[2];\n            elseif ($val == 'l') $words[] = $val[3];\n\
    \            elseif ($val == 'o') $words[] = $val[4];\n            elseif ($val\
    \ == 'u') $words[] = $val[5];\n            elseif ($val == 'a') $words[] = $val[6];\n\
    \            elseif ($val == 'r') $words[] = $val[7];\n            elseif ($val\
    \ == 'c') $words[] = $val[8];\n            elseif ($val == 's') $words[] = $val[9];\n\
    \            elseif ($val == 'm') $words[] = $val[10];\n            elseif ($val\
    \ == 'e') $words[] = $val[11];\n            elseif ($val == 't') $words[] = $val[12];\n\
    \            elseif ($val == 'w') $words[] = $val[13];\n            elseif ($val\
    \ == 'o') $words[] = $val[14];\n            elseif ($val == 'n') $words[] = $val[15];\n\
    \            elseif ($val == 'y') $words[] = $val[16];\n            elseif ($val\
    \ == 'a') $words[] = $val[17];\n            elseif ($val == 'e') $words[] = $val[18];\n\
    \            elseif ($val == 'u') $words[] = $val[19];\n            elseif ($val\
    \ == 'a') $words[] = $val[20];\n            elseif ($val == 'l') $words[] = $val[21];\n\
    \            elseif ($val == 'l') $words[] = $val[22];\n            elseif ($val\
    \ == 'l') $words[] = $val[23];\n            elseif ($val == 'l') $words[] = $val[24];\n\
    \        }\n    }\n    $ans = array();\n    foreach ($words as $key => $val) {\n\
    \        $ans[] = $val;\n        if (count($", "    if (!$s || $n <= 0) return\
    \ array();\n    $consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n\
    \    $vowels = 'aeiouAEIOU';\n    $split = preg_split('//', $s);\n    sort($split);\n\
    \    $split = array_slice($split, 0, $n);\n    $new = \"\";\n    foreach($split\
    \ as $value) {\n        $new .= $value;\n    }\n    $new = \"\";\n    foreach\
    \ ($split as $value) {\n        if (in_array($value, $consonants) || in_array($value,\
    \ $vowels)) {\n            $new .= $value;\n        }\n    }\n    return preg_split('//',\
    \ $new);\n}", "    if (empty($s)) {\n        return [];\n    }\n\n    $vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n\n    $words = array();\n\
    \n    $words = explode(\" \", $s);\n    $words = array_filter($words, 'strlen');\n\
    \    $words = array_filter($words, 'is_string');\n\n    foreach ($words as &$word)\
    \ {\n        $word = trim($word);\n    }\n\n    $words = array_unique($words);\n\
    \n    foreach ($words as $word) {\n        $wordLength = strlen($word);\n    \
    \    foreach ($vowels as $vowel) {\n            $foundCount = 0;\n           \
    \ for ($i = 0; $i < $wordLength; $i++) {\n                if ($word[$i] == $vowel)\
    \ {\n                    $foundCount++;\n                }\n            }\n  \
    \          if ($foundCount == $n) {\n                $words[] = $word;\n     \
    \       }\n        }\n    }\n\n    return $words;\n}\n</code>\n<|/ a dscore=0\
    \ tags=string,php |>\n<| a |>\n<code>", "    if (!is_string($s)) {\n        return\
    \ array();\n    }\n    $arr = explode(\" \", $s);\n    return $arr;\n}\n", " \
    \  $arr = explode(\" \", $s);\n   return $arr;\n}", "    if ( ! empty($s) ) {\n\
    \        $words = explode(' ', $s);\n        return array_filter($words, function($word)\
    \ use ($n) {\n            return count_chars($word, $n) === $n;\n        });\n\
    \    }\n    return [];\n}\n</code>\n<|/ a tags=php,regex |>\n<| a tags=php,regex\
    \ |>\nAnother option might be to just remove the consonants from the string and\
    \ count the length of the string before removing the consonants.\n<code>\n$string\
    \ = \"Mary had a little lamb\";\n$count = preg_replace(\"/[^a-zA-Z]/\", \"\",\
    \ $string);\nif ($count > 0) {\n    echo str_replace($string, '', $string);\n\
    }\n</code>\nThis would output\n<code>\n\"Mary had lamb\"\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI like it. The only thing I would add is if you're using a different\
    \ consonant list for different cases, just replace the first argument with a reference\
    \ to a variable.\n<|/ c |>\n<| c |>\nOk, I like it also.  I can see this being\
    \ useful if you have a different consonant list per language.  I only used consonants\
    \ because I thought it looked better than the other answers, but the other answers\
    \ are much better.\n<|/ c |>\n<| a tags=php,regex dscore=1 |>\nHere's a really\
    \ simple way to do it:\n<code>\n$string = \"Mary had a little lamb\";\n$words\
    \ = explode(' ', $string);\n$result = $words[array_sum(array_map('count_chars',\
    \ $words))];\n</code>\nDemo\n(For those who prefer a one liner without explode,\
    \ here's the full code)\n<|/ a |>\n<| c |>\nWow, this is pretty cool.  I've never\
    \ seen this done like this.  Thanks.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n\
    $string = \"Mary had a little lamb\";\n$count = preg_replace(\"/[^a-zA-Z]/\",\
    \ \"\", $string);\nif ($count > 0) {\n    echo str_replace($string, '', $string);\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| a tags=php,regex |>\nUse preg_match_all\
    \ to return an array of all the words in the string that contain n consonants:\n\
    <code>\n$string = \"Mary had a little lamb\";\n$count = preg_match_all('/[bcdfghjklmnpqrstvwxyz]/',\
    \ $string, $matches);\nif ($", "  return explode(' ', preg_replace(\"/ {2,}/\"\
    , \"\", $s));\n}", "}\n", "\treturn [];\n}\n", "    // ...\n}\n", "\tif (empty($s))\
    \ {\n\t\treturn array();\n\t}\n\t$vowels = array(\"a\", \"e\", \"i\", \"o\", \"\
    u\");\n\t$words = array();\n\t$words = explode(' ', $s);\n\tforeach ($words as\
    \ $word) {\n\t\tif (strpos($word, $vowels) != false) {\n\t\t\t$words[] = $word;\n\
    \t\t}\n\t}\n\tsort($words);\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$words[] = $words[$i];\n\
    \t}\n\treturn $words;\n}", "  $words = array();\n  if (empty($s)) {\n    return\
    \ $words;\n  }\n  // Use a hash to count number of consonants in each word\n \
    \ $consonantCounts = array();\n  // Using a counter of characters in the string\
    \ helps us avoid counting\n  // a word twice if it is contained in other words\n\
    \  $counter = 0;\n  // Use an array to hold all the consonants we encounter\n\
    \  // Note: This array must be in alphabetical order.\n  $consonants = array('b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z');\n  \n  // Use a foreach loop to go through all the characters\
    \ in the string\n  // If the character is a consonant, increment the counter for\
    \ that consonant\n  foreach (str_split($s) as $char) {\n    $consonantCounts[$char]++;\n\
    \  }\n  \n  // Using a foreach loop go through all the consonants in the array\n\
    \  // If there are more than or equal to our required number of consonants,\n\
    \  // push them into the words array.\n  // Note: Here we use the fact that consonantCounts\
    \ is an array.\n  // Using array_filter will remove all consonants that occur\
    \ less than n times.\n  // Note: Here we assume that consonantCounts is an array\
    \ with alphabetical\n  // order keys (ie. consonantCounts['c'] must be the same\
    \ as consonantCounts['c'].\n  foreach ($consonants as $consonant) {\n    if ($consonantCounts[$consonant]\
    \ >= $n) {\n      $words[] = $consonant;\n    }\n  }\n  return $words;\n}", " \
    \ $array=array();\n  for($i=0;$i<strlen($s);$i++){\n    $array[]=$s[$i];\n  }\n\
    \  return $array;\n}\n</code>\n<|/ a tags=php dscore=0 |>\n<| a |>\n<code>\n<?php",
  "   \n    // your code goes here\n    $array = explode(\" \", $s);\n\n    $result\
    \ = array();\n    foreach ($array as $word) {\n        $count = 0;\n        $str\
    \ = \"\";\n        for ($i = 0; $i < strlen($word); $i++) {\n            \n  \
    \          \n            $str .= $word[$i];\n            $count++;\n         \
    \   \n            if ($count == $n) {\n                $result[] = $str;\n   \
    \             $str = \"\";\n                $count = 0;\n            }\n     \
    \   }\n\n    }\n    \n    if(count($result) > 0) {\n        return $result;\n\
    \    }else{\n        return array();\n    }\n    \n}\n", "    $words = array();\n\
    \n    if(empty($s)) {\n        return $words;\n    }\n    \n    // We are looping\
    \ through the letters and finding the first n consonants\n    // and storing them\
    \ in $words. If we reach the end of the string then we \n    // know we have found\
    \ the n consonants and can stop.\n    for($i = 0; $i < strlen($s); $i++){\n  \
    \      for($j = 0; $j < $n; $j++){\n            $words[] = substr($s, $i, 1);\n\
    \            $i += 1;\n        }\n    }\n    \n    return $words;\n}\n\nvar_dump(select_words(\"\
    Mary had a little lamb\", 4));\nvar_dump(select_words(\"Mary had a little lamb\"\
    , 3));\nvar_dump(select_words(\"simple white space\", 2));\nvar_dump(select_words(\"\
    Hello world\", 4));\nvar_dump(select_words(\"Uncle sam\", 3));\n</code>\nhttps://3v4l.org/n8Z8j\n\
    <|/ a |>\n<| c |>\nThank you for taking time and writing this solution, very much\
    \ appreciated.\n<|/ c |>\n<| a dscore=0 |>\nThe function can be simplified to:\n\
    <code>", "    // Your code here\n}\n", "    if (empty($s)) {\n        return array();\n\
    \    }\n\n    $words = array();\n    foreach (str_split($s) as $c) {\n       \
    \ $counts[] = count(str_split($c));\n    }\n    $n = max($n);\n    $counter =\
    \ 0;\n    foreach ($counts as $c) {\n        $counter++;\n        if ($counter\
    \ == $n) {\n            $words[] = $c;\n        }\n    }\n    return $words;\n\
    }\n</code>\n<|/ a tags=php,algorithm,string |>\n<| c |>\nI appreciate it though\
    \ that I still need to figure this out :)\n<|/ c |>\n<| c |>\nThe OP is requesting\
    \ a word count as far as I can see\n<|/ c |>\n<| c |>\n: Thanks, this helped me\
    \ a lot. :)\n<|/ c |>\n<| a tags=php,algorithm,string |>\nI believe this question\
    \ is a duplicate. Anyway, the correct answer was given by Rasclatt. Here is a\
    \ short explanation of how he came up with it:\nIn English, if you have a string\
    \ that contains the word \"cat\", then it can be split into \"cat\" and \"a\"\
    \ (which is then also split into \"c\" and \"a\") so the word count is 1. \"cat\"\
    \ has one word of length 1 and one word of length 2, so it's 1 word. An algorithm\
    \ that splits it in half, looking for the correct substrings helps.\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>", "    $words = array();\n    $words = preg_split('/\\s+/',\
    \ $s);\n    $words = preg_split('/[^aeiouy]+/', ' ');\n\n    if (empty($words))\
    \ {\n        return array();\n    }\n\n    return array_filter($words, 'count_char');\n\
    }\n", "    $words = array();\n    foreach(explode(\" \", $s) as $word)\n     \
    \   foreach(preg_split(\"//\", $word) as $c)\n            if (preg_match(\"//s\"\
    , $c))\n                $words[] = $word;\n    return $words;\n}\n", "\tif( $s\
    \ == \"\" ) {\n\t\treturn array();\n\t}\n\t$vowels = array(\"a\", \"e\", \"i\"\
    , \"o\", \"u\");\n\t$arr = explode(\" \", $s);\n\t$results = array();\n\tforeach(\
    \ $arr as $word ) {\n\t\t$matches = preg_grep(\"/^{$vowels}+$/\",  $word);\n\t\
    \tif( count($matches) == $n ) {\n\t\t\t$results[] = $word;\n\t\t}\n\t}\n\treturn\
    \ $results;\n}\n", "    $words = array();\n    \n    if (!is_string($s)) \n  \
    \      return $words;\n    \n    $s = preg_replace('/[^a-zA-Z ]+/', ' ', $s);\n\
    \    \n    $pattern = \"/[a-z ]{$n}[a-z ]+/\";\n    preg_match_all($pattern, $s,\
    \ $matches);\n    $words = $matches[0];\n    \n    return $words;\n}\n", "   \
    \ $vowels = \"aeiou\";\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    if (strlen($s)==0)\
    \ {\n      return array();\n    }\n    $counts = array();\n    $words = array();\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n      $letter = $s[$i];\n      if\
    \ (in_array($letter, $vowels)) {\n        $counts[$letter]++;\n      }\n     \
    \ elseif (in_array($letter, $consonants)) {\n        $counts[$letter]--;\n   \
    \   }\n    }\n    arsort($counts);\n    foreach ($counts as $letter => $count)\
    \ {\n      if ($count == $n) {\n        $words[] = $letter;\n      }\n    }\n\
    \    return $words;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not a general\
    \ solution, since it only works in some cases. Consider this case: `select_words(\"\
    Hello Boring World\", 4)`.\n<|/ c |>\n<| c |>\nI'm sorry, but that's not right.\
    \ For \"Hello Boring World\", the function would return \"Hello\", \"Boring\"\
    \ and \"World\", but not \"Boring\".\n<|/ c |>\n<| c |>\nI didn't say it was a\
    \ general solution. I said it was only a solution for those specific cases. I\
    \ agree that some improvements are necessary, but I'm unaware of them. Furthermore,\
    \ it would be a very big improvement if you also explained what your code does.\n\
    <|/ c |>\n<| c |>\nI think it would be better to return `$words` rather than `return\
    \ $counts`. That would make it possible to call `array_count_values()` on the\
    \ result to find the number of consonants in the input string.\n<|/ c |>\n<| a\
    \ tags=php,algorithm dscore=2 |>\n<code>\n$input = \"Mary had a little lamb\"\
    ;\n$input = \"Hello world\";\n$input = \"Uncle sam\";\n$input = \"Mary had a little\
    \ lamb\";\n$input = \"Mary had a little lamb\";\n$input = \"Mary had a little\
    \ lamb\";\n$input = \"Mary had a little lamb\";\n$input = \"Mary had a little\
    \ lamb\";\n$input = \"Mary had a little lamb\";\n$input = \"Mary had a little\
    \ lamb\";\n$input = \"Mary had a little lamb\";\n$input = \"Mary had a little\
    \ lamb\";\n$input = \"Mary had a ", "    // Your code here\n}\n", "    // Return\
    \ the array containing all words from $s that contain exactly n \n    // consonants,\
    \ in order these words appear in $s.\n    // If the string $s is empty then the\
    \ function should return an empty array.\n    // Note: you may assume the input\
    \ string contains only letters and spaces.\n    $words = array();\n\n    // Your\
    \ code here.\n    foreach (str_word_count($s) as $word) {\n        if (strlen($word)\
    \ == $n) {\n            $words[] = $word;\n        }\n    }\n\n    return $words;\n\
    }\n</code>\nThe only change that you need to make is to use the PHP function str_word_count\
    \ instead of str_split. str_split returns an array of words, and str_word_count\
    \ will return an array of words and word counts. So you don't need to loop over\
    \ each word in the input string to get each word count.\n<|/ a dscore=2 |>\n<|\
    \ c |>\nAwesome! Thank you for this\n<|/ c |>\n<| a tags=php,string,regex,preg-split,split\
    \ |>\nYou can try this regex (?=(\\w+))\\1 \nWorking demo\n<code>\npreg_match_all(\"\
    /(?=(\\w+))\\1/\", $str, $matches);\n</code>\nExplanation:\n\n(?=(\\w+)) Look\
    \ ahead to find all words and capture them in capture group 1\n\\1 lookahead for\
    \ capture group 1\n<|/ a dscore=1 |>\n<| a tags=php,string,regex,preg-split,split\
    \ |>\nTry this :\n<code>", "    return array();\n}\n", "}\n", "    return array();\n\
    }", "    return array_filter(explode(' ', preg_replace('/([^a-zA-Z0-9\\s]+)/',\
    \ ' ', $s)), function($w) use ($n) {\n        return preg_grep('/[^aeiouy]+/',\
    \ explode('aeiouy', $w)) === array_fill(0, $n, 'y');\n    });\n}\n</code>\n<|/\
    \ a tags=php,algorithm,preg-match-all,php-7.4 |>\n<| c |>\nI really appreciate\
    \ your effort to help this newbie!\n<|/ c |>\n<| c |>\nAgreed, and I thank you\
    \ for taking the time to write the explanations so nicely!\n<|/ c |>\n<| a tags=php,algorithm,preg-match-all,php-7.4\
    \ |>\nFor those who may find this post through Google, here is my solution:\n\
    <code>", "    $words = [];\n    if ($s != \"\") {\n        $n = preg_replace(\"\
    /[^a-zA-Z\\s]/\", \"\", $n);\n        for ($i = 0; $i < strlen($s); $i++) {\n\
    \            if (preg_match(\"/[^a\\s]/i\", substr($s, $i))) {\n             \
    \   if ($i == 0) {\n                    $words[] = substr($s, 0, $i);\n      \
    \          } else {\n                    $words[] = substr($s, 0, $i);\n     \
    \           }\n            }\n            if (preg_match(\"/[^aeiouy\\s]/i\",\
    \ substr($s, $i))) {\n                if ($i == 0) {\n                    $words[]\
    \ = substr($s, 0, $i);\n                } else {\n                    $words[]\
    \ = substr($s, 0, $i);\n                }\n            }\n            if (preg_match(\"\
    /[^b\\s]/i\", substr($s, $i))) {\n                if ($i == 0) {\n           \
    \         $words[] = substr($s, 0, $i);\n                } else {\n          \
    \          $words[] = substr($s, 0, $i);\n                }\n            }\n \
    \           if (preg_match(\"/[^c\\s]/i\", substr($s, $i))) {\n              \
    \  if ($i == 0) {\n                    $words[] = substr($s, 0, $i);\n       \
    \         } else {\n                    $words[] = substr($s, 0, $i);\n      \
    \          }\n            }\n            if (preg_match(\"/[^d\\s]/i\", substr($s,\
    \ $i))) {\n                if ($i == 0) {\n                    $words[] = substr($s,\
    \ 0, $i);\n                } else {\n                    $words[] = substr($s,\
    \ 0, $i);\n                }\n            }\n            if (preg_match(\"/[^e\\\
    s]/i\", substr($s, $i))) {\n                if ($i == 0) {\n                 \
    \   $words[] = substr($s, 0, $i);\n                } else {\n                \
    \    $words[] = substr($s, 0, $i);\n                }\n            }\n       \
    \     if (preg_match(\"/[^f\\s]/i\", substr($s, $i))) {\n                if ($i\
    \ == 0) {\n                    $words[] = substr($s, 0, $i);\n               \
    \ } else {\n                    $words[] = substr($s, 0, $i);\n              \
    \  }\n            }\n            if (preg_match(\"/[^g\\s]/i\", substr($s, $i)))\
    \ {\n                if ($i == 0) {\n                    $words[] = substr($s,\
    \ 0, $i);\n                } else {\n                    $words[] = substr($s,\
    \ 0, $i);\n                }\n            }\n            if (preg_match(\"/[^h\\\
    s]/i\", substr($s, $i))) {\n                if ($i == 0) {\n                 \
    \   $words[] = substr($s, 0, $i);\n                } else {\n                \
    \    $words[] = substr($s, 0, $", "    $letters = str_split($s);\n    $res = array();\n\
    \    foreach ($letters as $letter) {\n        foreach ($letters as $ltr) {\n \
    \           if ($letter != $ltr) {\n                if (count(str_split($letter))\
    \ == $n) $res[] = $ltr;\n                if (count(str_split($ltr)) == $n) $res[]\
    \ = $letter;\n            }\n        }\n    }\n    return $res;\n}", "    $array\
    \ = array();\n    if (!$s) {\n        return array();\n    }\n    $firstArray\
    \ = explode(\" \", $s);\n    foreach ($firstArray as $word) {\n        $array\
    \ = array_merge($array, get_consonants($word, $n));\n    }\n    return $array;\n\
    }\n", "    return array();\n}", "    $vowels = array(\"a\", \"e\", \"i\", \"o\"\
    , \"u\");\n    $consonants = array_flip(array(\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"E\", \"I\", \"O\", \"U\"));\n  \
    \  return array_filter($s, function ($s) use ($consonants, $vowels, $n) {\n  \
    \      return count(array_filter($s, function ($char) use ($consonants, $vowels,\
    \ $n) {\n            return in_array($char, $consonants) && $char == $consonants[$char]\
    \ && $char == $vowels[$n - 1] || in_array($char, $consonants) && $char == $vowels[$n\
    \ - 1] && $char == $consonants[$char];\n        })) === $n;\n    });\n}\n", " \
    \   $s = trim($s);\n    $s = preg_replace('/\\s+/', '', $s);\n    return array();\n\
    }\n", "    $arr = [];\n    if (empty($s))\n        return $arr;\n    for ($i =\
    \ 0; $i < strlen($s); $i++) {\n        for ($j = 0; $j < $n; $j++) {\n       \
    \     if ($s[$i] === 'k' || $s[$i] === 'p' || $s[$i] === 'q') {\n            \
    \    if ($j === 0)\n                    $arr[] = $s[$i];\n            }\n    \
    \        elseif ($s[$i] === 'c' || $s[$i] === 'd' || $s[$i] === 'n') {\n     \
    \           $arr[] = $s[$i];\n                $i++;\n                break;\n\
    \            }\n        }\n    }\n    return $arr;\n}\n", '}', "  \n    $arr =\
    \ array();\n    \n    $s_arr = explode(\" \", $s);\n    \n    foreach($s_arr as\
    \ $item) {\n        \n        if(strlen($item) == $n) {\n            $arr[] =\
    \ $item;\n        }\n    }\n    \n    return $arr;\n}\n", "  $arr = array();\n\
    \  if($s == \"\") $arr = array();\n  else {\n    $arr = explode(\" \", $s);\n\
    \    foreach($arr as $v) {\n      if(strlen($v) == $n) {\n        foreach(str_split($v)\
    \ as $v) {\n          if(preg_match(\"/^[aeiou]+$/i\", $v)) {\n            array_push($arr,\
    \ $v);\n          }\n        }\n      }\n    }\n  }\n  return $arr;\n}\n", " \
    \   $words = array();\n    if (!empty($s)) {\n        $s = preg_split('/(\\w+)/',\
    \ $s);\n        foreach ($s as $word) {\n            if (strlen($word) == $n)\
    \ {\n                array_push($words, $word);\n            }\n        }\n  \
    \  }\n    return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=string,php,arrays\
    \ |>\n<code>", "    if ($s == \"\") {\n        return [];\n    }\n    $arr = explode(\"\
    \ \", $s);\n    $new_arr = [];\n    foreach ($arr as $a) {\n        $new_arr +=\
    \ explode(\" \", $a);\n    }\n    return array_slice(array_filter($new_arr, \"\
    count_cons\"), 0, $n);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nYour function\
    \ produces an empty array for the last example. Try `select_words(\"Hello world\"\
    , 0)`, for example.\n<|/ c |>\n<| a dscore=0 |>\nSolution without regex.\n<code>",
  "    \n    // Your code goes here\n    $words = array();\n\n    if (!empty($s))\
    \ {\n        $str = preg_split('/\\s+/', $s);\n        foreach ($str as $string)\
    \ {\n            $words = array_merge($words, str_split_n($string, $n, ' '));\n\
    \        }\n    }\n    return $words;\n}\n", "    // TODO\n    return [];\n}\n",
  "\t$words = array();\n\tif (!empty($s)) {\n\t\t$words = preg_split('/[\\s]+/', $s);\n\
    \t}\n\tksort($words);\n\tif (count($words) > $n) {\n\t\t$result = array();\n\t\
    \tforeach ($words as $i => $word) {\n\t\t\tif (preg_match('/\\w{' . ($i + 1) .\
    \ ',}/', $word)) {\n\t\t\t\tarray_push($result, $word);\n\t\t\t}\n\t\t}\n\t} else\
    \ {\n\t\t$result = array();\n\t}\n\treturn $result;\n}\n", "    $result = [];\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        if (isset($words[$s[i]]))\
    \ {\n            $result[] = $words[$s[i]];\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=arrays,php,algorithm,string,function |>\n<| a |>\nI guess\
    \ this question was asked for algorithmic challenges so here's my solution without\
    \ extra loops:\n<code>", "    // Initialize result array\n    $res = array();\n\
    \    \n    // Return result array if empty string\n    if ($s == \"\") {\n   \
    \     return $res;\n    }\n    \n    // Iterate through every word\n    for ($i=0;\
    \ $i<strlen($s); $i++) {\n        \n        // If the current word contains exactly\
    \ n consonants\n        if ($i == $n) {\n        \n            // Add current\
    \ word to result array\n            array_push($res, substr($s, 0, $i));\n   \
    \     }\n        \n        // Otherwise, check if the current word contains less\
    \ \n        // than n consonants. If so, move on to next word\n        else {\n\
    \        \n            // If current word contains less than (or equal to) n consonants\n\
    \            // then break\n            if ($s[$i] != substr($s, $i, 1)) {\n \
    \               break;\n            }\n        }\n    }\n    \n    // Return result\
    \ array\n    return $res;\n}\n", "    // implement here\n}", "\tif (strlen($s)\
    \ == 0) {\n\t\treturn array();\n\t}\n\n\t$words = array();\n\t$length = strlen($s);\n\
    \tfor ($i=0; $i<$length; $i++) {\n\t\t$c = $s[$i];\n\t\tif ($n==$i || $n==$i+1)\
    \ {\n\t\t\t$words[] = $c;\n\t\t\tif ($n==$i+1) {\n\t\t\t\t$n++;\n\t\t\t}\n\t\t\
    \t$i += 1;\n\t\t}\n\t}\n\t\n\treturn $words;\n}\n", "    $word_list = array();\n\
    \    $words = explode(' ', trim(str_replace(\"\\n\", '', $s)));\n    foreach($words\
    \ as $word) {\n        $consonant_count = count(preg_grep(\"/[^bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]/i\"\
    , $word));\n        if ($consonant_count == $n) {\n            $word_list[] =\
    \ $word;\n        }\n    }\n    return $word_list;\n}\n", "    \n}\n</code>\n\
    <|/ q dscore=0 tags=php,arrays |>\n<| c |>\nShow us what you have so far. Also,\
    \ which part are you stuck on?\n<|/ c |>\n<| c |>\nI believe [this](http://www.phpfreaks.com/tutorial/basic-php-arrays)\
    \ tutorial should give you a place to start from.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\nUse explode to convert the string into a array of words, and then count\
    \ the amount of times each word occurs in the array.\n<code>\n$string = \"Hello\
    \ world!\";\n$words = explode(' ', $string); // Converts the string into an array\
    \ of words\n$output = array();\nforeach($words as $word)\n{\n    // If this word\
    \ is already in the output array, skip it\n    if (in_array($word, $output)) continue;\n\
    \n    // Otherwise, add the word and it's count to the output array\n    $output[$word]\
    \ = isset($output[$word]) ? $output[$word] + 1 : 1;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nYou don't have to iterate over the array twice. Also, just use\
    \ `array_key_exists` instead of the complicated `isset` function\n<|/ c |>\n<|\
    \ c |>\nThat's what I was thinking, but I don't understand how the isset works\
    \ here. The if statement checks if the word is in the output array, but how does\
    \ it do that? Also, I don't understand why you increment the count. I would think\
    \ you would just add the word and add 1 to the current count. But it looks like\
    \ you are doing something different?\n<|/ c |>\n<| c |>\n- `isset` is used to\
    \ check if an array index exists. When the first time `in_array` is encountered\
    \ it will return `false`, so `!isset` is used to check if it exists, instead of\
    \ comparing the array index which can return `0`\n<|/ c |>\n<| c |>\n: You're\
    \ right, that makes sense. Thanks.\n<|/ c |>\n<| a |>\n<code>\n$string = \"Hello\
    \ world!\";\n$words = explode(' ', $string); // Converts the string into an array\
    \ of words\n$output = array();\nforeach($words as $word) {\n    // If this word\
    \ is already in the output array, skip it\n    if (in_array($word, $output)) continue;\n\
    \    // Otherwise, add the word and it's count to the output array\n    $output[$word]\
    \ = isset($output[$word]) ? $output[$word] + 1 : 1;\n}\n</code>\n<|/ a dscore=0\
    \ tags=php,arrays |>\n<| a |>\n<code>", "    $words = array();\n    \n    for($i\
    \ = 0; $i < strlen($s); $i++){\n        $a = substr($s,$i,1);\n        \n    \
    \    if(preg_match('~^[aeiouy]*~',$a) == 1){\n            $words[] = $a;\n   \
    \     }\n    }\n    \n    return $words;\n}\n</code>\n<|/ a |>\n<| a |>\nHere\
    \ is another solution that uses no regular expressions.\n<code>", "\t$list = array();\n\
    \tif (empty($s)) {\n\t\treturn $list;\n\t}\n\t$word = substr($s,0,1);\n\twhile\
    \ ($word != '') {\n\t\t$consonant_count = 0;\n\t\tif (preg_match('/[BCDM]/', $word))\
    \ {\n\t\t\t$consonant_count = preg_match_all('/[BCDM]/', $word);\n\t\t}\n\t\t\
    if ($consonant_count != $n) {\n\t\t\t$word = substr($word,1);\n\t\t} else {\n\t\
    \t\t$list[] = $word;\n\t\t\t$word = substr($word,1);\n\t\t}\n\t}\n\treturn $list;\n\
    }\n", "  // Write your code here.\n}\n", "    $s = strtoupper($s);\n    if (empty($s))\
    \ {\n        return array();\n    }\n    $s = preg_split('/\\s+/', $s);\n    $result\
    \ = array();\n    $counts = array();\n    foreach ($s as $word) {\n        $word\
    \ = strtolower($word);\n        if (!is_numeric($word)) {\n            $counts[$word]\
    \ = 0;\n        }\n        $counts[$word]++;\n    }\n    array_multisort($counts,\
    \ SORT_DESC, $s);\n    $result[] = $s[0];\n    foreach ($s as $word) {\n     \
    \   if ($counts[$word] >= $n) {\n            $result[] = $word;\n        }\n \
    \   }\n    return $result;\n}\n</code>\n<|/ a tags=algorithm,php dscore=1 |>\n\
    <| c |>\nYour solution doesn't work. Can you try `select_words(\"Hello world\"\
    , 4)` ?\n<|/ c |>\n<| c |>\nSorry i made a mistake, please check my solution\n\
    <|/ c |>\n<| c |>\nThanks. But it doesn't work on the case I put in my question.\
    \ It's `array(\"world\")` and not `array(\"world\", \"Hello\")`.\n<|/ c |>\n<|\
    \ c |>\nI wrote my answer, I hope you like it.\n<|/ c |>\n<| c |>\nI like it.\
    \ Thanks very much. Your explanation is quite comprehensive. But I don't understand\
    \ why it works. I mean why does the order of `$result` matter?\n<|/ c |>\n<| a\
    \ |>\nI would use regex:\n<code>", "  $word_array = array();\n  for ($i = 0; $i\
    \ < strlen($s); $i++) {\n    if ($s[i] === \"a\" || $s[i] === \"e\" || $s[i] ===\
    \ \"i\" || $s[i] === \"o\" || $s[i] === \"u\") {\n      if ($n === 0) {\n    \
    \    break;\n      }\n      $word_array[] = $s;\n      $n--;\n    }\n  }\n  return\
    \ $word_array;\n}\n", "    return array();\n}\n</cell>\n<cell>\ndef select_words(s,\
    \ n):\n    \"\"\"Given a string s and a natural number n, you have been tasked\
    \ to implement\n    a function that returns an array of all words from string\
    \ s that contain exactly n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty array.\n\
    \    Note: you may assume the input string contains only letters and spaces.\"\
    \"\"\n\n    # BEGIN PSEUDOCODE\n    # Create a list to return\n    select_words\
    \ = []\n    # Loop through each word in the input string\n    for word in s:\n\
    \        \n        # BEGIN PSEUDOCODE\n        # Count how many consonants are\
    \ in the word\n        count = 0\n        # Loop through the consonants in the\
    \ word\n        for char in word:\n            # If the number of consonants is\
    \ equal to the number we need,\n            # append the word to the list that\
    \ we return\n            if char == \"a\" or char == \"e\" or char == \"i\" or\
    \ char == \"o\" or char == \"u\":\n                count += 1\n        # END PSEUDOCODE\n\
    \        \n        # If the number of consonants is equal to the number we need,\n\
    \        # append the word to the list that we return\n        if count == n:\n\
    \            select_words.append(word)\n            \n    return select_words\n\
    \    # END PSEUDOCODE\n    \n</cell>\n<text>\nNote: The above code is just to\
    \ give you an idea of how things might work, not to actually perform an implementation.\
    \ Since this is your first time coding in Python (you probably already know some\
    \ Python), we strongly recommend that you try to write your own code above, first,\
    \ and run it to see what happens.\n\nTo check your work above, run the cell below\
    \ to test your implementation.\n\n\n</text>\n<cell>", "    // Write your code\
    \ here\n}\n</cell>\n<text>\nTest your Code\nRun the cell below to test your code.\n\
    \nThe result should be an empty array.\n\n\n</text>\n<cell>", "    $words = array();\n\
    \    $words = preg_split('/\\s+/, $s);\n    $wordCount = count($words);\n    if\
    \ ($n == 0) {\n        return $words;\n    } else if ($wordCount === 0) {\n  \
    \      return array();\n    } else if ($wordCount == 1) {\n        return $words[0];\n\
    \    }\n\n    $selectedWords = array();\n\n    for ($i = 0; $i < $wordCount; $i++)\
    \ {\n        $word = $words[$i];\n        if (strlen($word) >= $n) {\n       \
    \     $selectedWords[] = $word;\n        }\n    }\n\n    return $selectedWords;\n\
    }\n", "    return array();\n}\n</cell>\n<cell>\n%%writefile test_select_words.php\n\
    \n<?php", "    $words = array();\n    $i = 0;\n    $n = intval($n);\n    while\
    \ ($i < strlen($s)) {\n        $words = array_merge($words, \n            array_slice(explode(\"\
    \ \", $s), $i, $n+1));\n        $i += $n+1;\n    }\n    return $words;\n}\n</code>\n\
    <|/ a tags=php,algorithm,string |>\n<| a dscore=0 |>\nTo get all consonants you\
    \ can use str_split\n<code>\n$s = str_split('aeiouy');\nprint_r($s); \n</code>\n\
    <|/ a tags=php,algorithm,string |>\n<| a |>\nI believe this would work...\n<code>\n\
    <?php\n", "    return array();\n}", "    $array = array();\n    foreach ($s as\
    \ $key => $value) {\n        $array = array_merge($array, array_slice(explode(\"\
    \ \", $value), 0, $n));\n    }\n    return $array;\n}\n", "    if (strlen($s)\
    \ == 0) {\n        return array();\n    }\n    $words = array();\n    for ($i\
    \ = 0; $i < strlen($s); $i++) {\n        $word = '';\n        for ($j = 0; $j\
    \ < $n; $j++) {\n            $word .= $s[$i];\n            $i++;\n        }\n\
    \        $words[] = $word;\n    }\n    return $words;\n}\n", "  // Your code here...\n\
    }\n</cell>\n<cell>\ndef select_words(s, n):\n  result = []\n  if s:\n    # Your\
    \ code here...\n  return result\n</cell>\n<cell>", "    // Only change code below\
    \ this line\n    $arr = array();\n    $str = '';\n    \n    if ($s !=\"\"){\n\
    \        $arr = str_split($s);\n        for($i=0;$i<count($arr);$i++){\n     \
    \       if($arr[$i] == \" \" && $i == 0){\n                $arr[$i] = \"\";\n\
    \            }else{\n                $str = $arr[$i].$str;\n            }\n  \
    \          \n            for($j=0;$j<$n;$j++){\n                for($k=0;$k<strlen($str);$k++){\n\
    \                    if($arr[$i][$k] == \" \" && $j == 0){\n                 \
    \       $arr[$i][$k] = \"\";\n                    }else{\n                   \
    \     $str = $arr[$i][$k].$str;\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return $arr;\n}", "    $words = [];\n    $strlen\
    \ = strlen($s);\n    for($i = 0; $i < $strlen; $i++){\n        for($j = $i+1;\
    \ $j <= $strlen; $j++){\n            if(($s[$i] === $s[$j]) && ($j > $i)){\n \
    \               $words[] = substr($s, $i, 1);\n                break;\n      \
    \      }\n        }\n    }\n    return $words;\n}\n</code>\n<|/ a dscore=1 tags=php\
    \ |>\n<| c |>\nHey, thanks for your answer but it's not working. I've added a\
    \ test to my question. As you can see it still returns \"Hello\" instead of \"\
    Hello world\".\n<|/ c |>\n<| c |>\nYou just had your conditions switched around.\
    \ Switch `$i` and `$j` around to `$j` and `$i`. I updated the code in the answer,\
    \ too.\n<|/ c |>\n<| c |>\nAh now I see it. Thank you so much!\n<|/ c |>\n<| a\
    \ |>\nYour problem was that $j is always less than $strlen and $j > $i is never\
    \ true.\nHere's a simpler version. No need to use strlen at all:\n<code>\n$s =\
    \ 'Hello world';\n$n = 3;\n$words = '';\n\nfor ($i = 0; $i < strlen($s); $i++)\
    \ {\n    if ($i < $n) {\n        $words .= $s[$i];\n    }\n}\n", "    $arr = [];\n\
    \    if(!empty($s)) {\n        for($i = 0; $i < strlen($s); $i++) {\n        \
    \    foreach(str_split($s) as $c) {\n                $arr[] = strtolower($c) .\
    \ strtolower($c) . strtolower($c) . strtolower($c);\n            }\n        }\n\
    \        if(count($arr) >= $n) {\n            return $arr;\n        }\n    }\n\
    \    return $arr;\n}\n", "    // TODO\n}\n</cell>\n<cell>\nselect_words(\"Mary\
    \ had a little lamb\", 4)\n</cell>\n<text>\nExercise: Write a function that counts\
    \ the number of occurrences of substring $s in string $str, using strpos() or\
    \ similar.\n\n\n</text>\n<cell>", "    // write your code in PHP (not JS) HERE\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nNice... but then my teacher will mark\
    \ me down for not being able to do this in JS\n<|/ c |>\n<| c |>\nOh my bad, I\
    \ misunderstood the question :( I guess you should still try and solve this problem\
    \ in PHP though. It will be easier than the JS solution I'm guessing. I'll leave\
    \ it to you to figure this out. I'll help you out if I get stuck.\n<|/ c |>\n\
    <| c |>\nI guess this is the best solution in JS for my teacher, but I'm going\
    \ to try and figure out the PHP solution as well since this will be my best teacher\
    \ in PHP and I wanted to learn how to use PHP to do this. Thank you so much for\
    \ your help. I appreciate it.\n<|/ c |>\n<| a |>\nHere's another way of doing\
    \ it - it involves just using a foreach loop and a conditional statement. It doesn't\
    \ use strlen() and uses a string method called substr().\n<code>", "    $words\
    \ = array();\n    if ($s == '') return $words;\n    $n = strlen($s);\n    $strlen\
    \ = 0;\n    $cons = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"x\", \"\
    z\");\n    foreach ($cons as $c) {\n        $strlen = $strlen + substr_count($s,\
    \ $c);\n    }\n    $strlen = $strlen + $n;\n    for ($i = 0; $i < $strlen; $i++)\
    \ {\n        foreach ($cons as $c) {\n            if (substr($s, $i, 1) == $c)\
    \ {\n                $words[] = substr($s, $i, 1);\n                break;\n \
    \           }\n        }\n    }\n    return $words;\n}", "    $words = array();\n\
    \    foreach (str_word_count($s) as $word) {\n        if (strlen($word) == $n)\
    \ {\n            foreach (str_split($word) as $char) {\n                if (in_array($char,\
    \ $consonants)) {\n                    $words[] = $char;\n                }\n\
    \            }\n        }\n    }\n    return $words;\n}\n", "    // Your code\
    \ here\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThis is an example in PHP, using\
    \ array_filter function:\n<code>\n<?php", "    $words = [];\n    foreach (explode('\
    \ ', $s) as $word) {\n        $word = trim($word);\n        if (str_count($word,\
    \ $n) === $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }\n", "    \n    // Write your code here\n    $list = array();\n    $a = preg_split('//',\
    \ $s);\n    \n    for($i = 0; $i < count($a); $i++) {\n        if(isset($a[$i])){\n\
    \            if(!strlen($a[$i])==$n){\n                $list[$i] = $a[$i];\n \
    \           }\n        }\n    }\n    \n    return $list;\n}", "    // Your code\
    \ here\n    $s = strtolower($s);\n    $vowels = array(\"a\", \"e\", \"i\", \"\
    o\", \"u\", \"y\");\n    $vowel_count = count($vowels);\n\n    $s = preg_replace('/[^a-z]+/',\
    \ '', $s);\n    $vowel_array = array();\n    foreach($vowels as $letter) {\n \
    \       if (strpos($s, $letter) !== false) {\n            $vowel_array[] = $letter;\n\
    \        }\n    }\n\n    $new_array = array();\n    $i = 0;\n    $j = 0;\n   \
    \ foreach ($vowel_array as $v) {\n        $i++;\n        if ($i == $n) {\n   \
    \         $new_array[] = $vowels[$j];\n        }\n        if (strpos($s, $v) !==\
    \ false) {\n            $j++;\n            $i = $vowel_count;\n        }\n   \
    \ }\n\n    return $new_array;\n}\n</code>\n<|/ a |>\n<| a dscore=1 tags=arrays,php,string\
    \ |>\nHere's a short function that takes the string to be searched for, the number\
    \ of consonants that must be found, and an array of possible replacements that\
    \ may replace those consonants.\n<code>\n<?php\n", "    // Write your code here\n\
    }\n</cell>\n<text>\nExercise 6\nWrite a program that prints the words from the\
    \ dictionary that start with 'A'. The dictionary is provided as a Python list\
    \ of words (e.g., ['Alabama', 'Alaska', 'America', 'And', ...]).\n\nNotes:\n\n\
    You don't need to create a separate word list for this exercise. You only need\
    \ to use your existing select_words() function.\nYou may assume the input string\
    \ contains only letters and spaces.\nYou may assume the string s contains only\
    \ lowercase letters.\n\n\n</text>\n<cell>\n%%writefile my_file.py\ndef print_words(s):\n\
    \    # Write your code here\n    pass\n</cell>\n<cell>", "  // Your code here\n\
    }\n", "}\n", "    return array();\n}", "  // Your code here\n}\n</cell>\n<text>\n\
    Write a function get_words that accepts a string and an integer (n) and returns\
    \ the array of strings containing exactly n words in order.  If the string s is\
    \ empty then the function should return an empty array.\n\n</text>\n<cell>\n%%writefile\
    \ functions/get_words.php\n<?php", "    $str = str_split($s);\n    $count = count($str);\n\
    \    $result = array();\n    foreach ($str as $letter) {\n        $cons = substr($letter,\
    \ 0, $n);\n        if ($cons == $cons) {\n            $result[] = $letter;\n \
    \       }\n    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is\
    \ more of a comment than an answer. It does not answer the OP's question directly.\n\
    <|/ c |>\n<| c |>\nPlease add all such explanation to your answer. It would be\
    \ easier to understand.\n<|/ c |>\n<| a dscore=2 |>\nA simple regex based solution\
    \ would be:\n<code>", "}\n\n", "    // Initialize result array\n    $result =\
    \ array();\n    // Initialize start index\n    $start = 0;\n    // Iterate through\
    \ $s\n    foreach (preg_split('/\\s+/', $s) as $word) {\n        // Determine\
    \ if $word contains exactly $n consonants\n        if (count(preg_split('/(?<!^)(?!$)/',\
    \ $word)) == $n) {\n            // Add $word to result\n            $result[]\
    \ = $word;\n        }\n        // Increment start index\n        $start++;\n \
    \       // Exit loop if $start has exceeded length of $s\n        if ($start >=\
    \ strlen($s)) {\n            break;\n        }\n    }\n    return $result;\n}\n\
    </code>\nTest\n<code>\n$tests = array(\n    \"Mary had a little lamb\",\n    \"\
    Mary had a little lamb\",\n    \"simple white space\",\n    \"Hello world\",\n\
    \    \"Uncle sam\"\n);\n\n$results = array();\nforeach ($tests as $test) {\n \
    \   foreach (select_words($test, 3) as $result) {\n        $results[] = $result;\n\
    \    }\n}\nprint_r($results);\n</code>\nOutput\n<code>\nArray\n(\n    [0] => little\n\
    \    [1] => Mary\n    [2] => lamb\n)\n</code>\nDemo on 3v4l.org\n<|/ a dscore=0\
    \ |>\n<| c |>\nIt also returns \"lamb\" which is not the expected result. OP said:\
    \ _the function should return an empty array_.\n<|/ c |>\n<| c |>\n, I added a\
    \ note in my answer.\n<|/ c |>\n<| a dscore=0 tags=regex,php |>\nYou can achieve\
    \ this with a recursive function and preg_match:\n<code>", "    $words = array();\n\
    \    $l = strlen($s);\n    if ($n > 0) {\n        for ($i = 0; $i < $l; $i++)\
    \ {\n            $chars[] = $s[$i];\n        }\n    }\n    $count = array();\n\
    \    foreach ($chars as $char) {\n        $count[$char] = 0;\n    }\n    foreach\
    \ ($count as $char => $count) {\n        if ($count == $n) {\n            $words[]\
    \ = $char;\n        }\n    }\n    return $words;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    I like this solution the most!\n<|/ c |>\n<| c |>\nOkay, I did some testing and\
    \ I think it is the best solution. However, since I'm going to use the word array\
    \ in a foreach loop, I think I will have to store it in a variable at the beginning.\
    \ I don't know if I should edit my post to show the code I used.\n<|/ c |>\n<|\
    \ c |>\nI don't think you should edit the post just to show the code you used.\
    \  I suggest you add it to your original question.  But I believe that the reason\
    \ you thought to store the word array in a variable is because you used `foreach`\
    \ loops to traverse the `str` array and populate the word array.  If you use `foreach`\
    \ loops to traverse the `words` array, then you won't need to store the word array\
    \ in a variable since the `words` array will be available in the `foreach` loop\
    \ after it exits.\n<|/ c |>\n<| a dscore=1 |>\nTry this, hope this helps\n<code>",
  "    // your code here\n}\n", "    $words = array();\n    // Your code goes here\n\
    \    return $words;\n}\n</code>\n<|/ a tags=arrays,string,php |>\n<| c |>\nThanks\
    \ for your answer. Sorry that I forgot to add the code that I tried. I added it\
    \ to the question. I am sorry but I am not very familiar with PHP yet so I do\
    \ not know how to go about doing this.\n<|/ c |>\n<| c |>\nI added the code. Can\
    \ you explain why you are using $i instead of $j?\n<|/ c |>\n<| c |>\nAhh, I see.\
    \ I am also not very familiar with PHP yet, so I wasn't sure if $j would be better\
    \ than $i. Can you explain why $j would be better than $i?\n<|/ c |>\n<| c |>\n\
    I am also getting a syntax error on line 8: if ($j == $n) \n  ^\n<|/ c |>\n<|\
    \ c |>\n: That is because `for` loops need a `;` at the end of the line.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$str = \" this is  a sample string\"\
    ;\n$n = 1;\n$str = str_replace(\" \", \"\", $str);\n$con = strlen($str);\n$constr\
    \ = \"\";\nfor ($j = 1; $j <= $con; $j++) {\n    $constr .= substr($str, $j, 1);\n\
    \    if ($j == $con) {\n        $words[] = $constr;\n        $constr = \"\";\n\
    \    }\n}\nprint_r($words);", "  return \"\";\n}", "    // Your code here\n}\n\
    </cell>\n<text>\n(IMPLEMENTATION) Secret Code\nFor this problem we will be using\
    \ the Secret Code Problem formulation from this week's programming assignment.\n\
    \n\n</text>\n<cell>", "    $words = preg_split('/\\s+/', $s);\n    if (count($words)\
    \ === 0) {\n        return [];\n    }\n    $counts = [];\n    foreach ($words\
    \ as $word) {\n        $counts[$word] = count(preg_grep('/[^' . $word . ']/u',\
    \ $words));\n    }\n    ksort($counts);\n    asort($counts);\n    $result = [];\n\
    \    foreach ($counts as $word => $count) {\n        if ($count === $n) {\n  \
    \          $result[] = $word;\n        }\n    }\n    return $result;\n}\n", " \
    \ return array_filter(\n    explode(\" \", $s), \n    function($i) use ($n) {\n\
    \      return str_split($i)->length == $n;\n    }\n  );\n}\n", "    if (empty($s))\
    \ return array();\n    $results = [];\n    $consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    $vowels = \"aeiouy\";\n    $consonant_count = 0;\n    $vowel_count = 0;\n\
    \    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n        if\
    \ (preg_match('/' . $consonants . '/', $word)) {\n            $consonant_count\
    \ += 1;\n        } else {\n            $vowel_count += 1;\n        }\n       \
    \ if ($consonant_count === $n) {\n            $results[] = $word;\n        }\n\
    \        if ($vowel_count === $n) {\n            $results[] = $word;\n       \
    \ }\n    }\n    return $results;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nAwesome\
    \ answer! Thanks for the effort and explanations.\n<|/ c |>\n<| a tags=php,string\
    \ |>\n<code>", "    $words = [];\n    // Your code goes here.\n    return $words;\n\
    }\n</code>\n<|/ a tags=php,arrays,string dscore=0 |>\n<| c |>\nThis would return\
    \ the whole word, i need to return the whole word that contains n number of consonants.\n\
    <|/ c |>\n<| c |>\nYou haven't specified what should happen if the word doesn't\
    \ contain exactly `n` consonants.\n<|/ c |>\n<| a tags=php,arrays,string |>\n\
    I guess this should work for you (I've tried it on http://writecodeonline.com/php/):\n\
    <code>\n<?php\n    $string = \"Mary had a little lamb\";\n    $result = select_words($string,\
    \ 4);\n    print_r($result);\n\n    function select_words($s, $n) {\n        $words\
    \ = [];\n        $wordCount = 0;\n        $wordArray = explode(\" \", $s);\n \
    \       foreach ($wordArray as $word) {\n            $word = strtolower($word);\n\
    \            $wordCount = substr_count($word, \"bcdfghjklmnpqrstvwxyz\");\n  \
    \          if ($wordCount === $n) {\n                $words[] = $word;\n     \
    \       }\n        }\n        return $words;\n    }", "}\n\n", "  $words = array();\n\
    \  if (!strlen($s)) {\n    return $words;\n  }\n  foreach (str_word_count($s,\
    \ 1) as $word) {\n    if (!$n || strlen($word) == $n) {\n      $words[] = $word;\n\
    \    }\n  }\n  return $words;\n}\n</code>\n<|/ a tags=string,php,algorithm,language-agnostic,language-implementation\
    \ |>\n<| c |>\nThe code does have O(n) time complexity - and O(n) space complexity.\
    \ Of course, if you do something like that in JavaScript, you have bigger problems\
    \ than just getting words...\n<|/ c |>\n<| c |>\nThank you, I've added your solution\
    \ to the answer.\n<|/ c |>\n<| a |>\n<code>\n<?php\n$string = 'HelloWorld';\n\
    preg_match_all('/[A-z]+/', $string, $arr);\n$result = array();\nfor($i = 0; $i\
    \ < count($arr[0]); $i++)\n{\n   for($j = $i+1; $j < count($arr[0]); $j++)\n \
    \  {\n        if($arr[0][$i] == $arr[0][$j])\n        {\n            $count =\
    \ $arr[0][$i];\n        }\n   }\n   if($count == $arr[0][$i])\n   {\n       $result[]\
    \ = $arr[0][$i];\n   }\n}\nprint_r($result);", "    $words = array();\n    if\
    \ (empty($s)) {\n        return $words;\n    }\n    $letters = preg_split(\"//\"\
    , $s);\n    foreach ($letters as $letter) {\n        if (count($letters) == $n)\
    \ {\n            $words[] = $letter;\n            $letters = preg_split(\"//\"\
    , $s);\n        }\n    }\n    return $words;\n}\n", "}\n", "    return $s; //\
    \ return the array of words\n}\n", "    $words = array();\n    // Your code here\n\
    }\n", "    $s = preg_replace('/\\s+/', ' ', strtolower($s));\n    $words = explode('\
    \ ', $s);\n    sort($words);\n    $res = array();\n    foreach($words as $word)\
    \ {\n        $count = substr_count($word, 'a');\n        if($count == $n)\n  \
    \          $res[] = $word;\n    }\n    return $res;\n}\n</code>\n<|/ a tags=php,algorithm,string,arrays\
    \ |>\n<| c |>\ni know i can just use str_split but i was wondering if there was\
    \ a better way. Your solution works great if i only need to return 1 word that\
    \ contains the consonants though. My problem is that i need to return an array\
    \ of all words that contain the consonants. Thanks for your answer, it's good\
    \ to know there are probably many ways to do this :) And thanks for the other\
    \ tips!\n<|/ c |>\n<| c |>\nI edited my answer to include a function that will\
    \ return an array of all words that contain $n consonants.\n<|/ c |>\n<| c |>\n\
    Thanks for your help with my problem. Your solution works great if i only need\
    \ to return 1 word that contains the consonants though. My problem is that i need\
    \ to return an array of all words that contain the consonants. Thanks for your\
    \ answer, it's good to know there are probably many ways to do this :) And thanks\
    \ for the other tips!\n<|/ c |>\n<| c |>\nHi again, I've edited my question to\
    \ make it more clear that i need to return an array of all words that contain\
    \ the consonants. Sorry if i wasn't clear in my original question. Thanks again\
    \ for your help!\n<|/ c |>\n<| c |>\nI think you misunderstood the question :).\
    \ I'll try and explain it again:\n<|/ c |>\n<| a dscore=1 |>\nThis may not be\
    \ the best solution but it works:\n<code>\n$words = array('hello', 'goodbye');\n\
    $needle = 'o';\n$result = '';\n$arraySize = sizeof($words);\n\nforeach($words\
    \ as $key => $value){\n    if(strlen($result) == strlen($value) && substr($words[$key],0,strlen($value))\
    \ == $needle){\n        $result .= $value;\n        $words[$key] = '';\n    }\n\
    }\n</code>\n<|/ a tags=php,algorithm,string,arrays |>\n<| c |>\nHi again, I've\
    \ edited my question to make it more clear that i need to return an array of all\
    \ word", "    $words = array();\n    if (strlen($s) === 0) {\n        return $words;\n\
    \    }\n    // Find the index of first consonant and start from there\n    $start_index\
    \ = strpos($s, 'a') - 1;\n    \n    // Loop through string and find all words\
    \ containing $n+1 consonants\n    while ($start_index >= 0) {\n        $found\
    \ = select_consonants($s, $start_index, $n);\n        if ($found === $n) {\n \
    \           $words[] = substr($s, 0, $start_index);\n        }\n        $start_index\
    \ -= 1;\n    }\n    return $words;\n}\n", "    $vowels = \"aeiou\";\n    $consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n    $words = preg_split(\"/\\s+/\", $s);\n\n \
    \   $ret = [];\n    foreach ($words as $word) {\n        if (strlen($word) ==\
    \ 0) {\n            continue;\n        }\n\n        $cur = 0;\n        foreach\
    \ (str_split($word) as $ch) {\n            $cur += strpos($consonants, $ch);\n\
    \            if ($cur == $n) {\n                $ret[] = $word;\n            \
    \    break;\n            }\n        }\n    }\n    return $ret;\n}\n</code>\nThe\
    \ above is a PHP only solution. Python can probably do the same thing and much\
    \ more efficiently.\n<|/ a dscore=1 |>\n<| c |>\nThis is nice but only works with\
    \ 2 consonants. How would I go about using it with 3 consonants as well?\n<|/\
    \ c |>\n<| a |>\nThis is an ugly solution and I hope it isn't too inefficient\
    \ for small inputs. I am not sure of the efficiency though.\n<code>\ndef select_words(s,\
    \ n):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    words\
    \ = s.split(' ')\n    ret = []\n    count = 0\n    while count < len(words):\n\
    \        word = words[count]\n        if len(word) == 0:\n            continue\n\
    \        cur_count = 0\n        for ch in word:\n            if ch in consonants:\n\
    \                cur_count += 1\n        if cur_count == n:\n            ret.append(word)\n\
    \        count += 1\n    return ret\n\ns = \"\"\"Mary had a little lamb\"\"\"\n\
    n = 4\n\nselect_words(s, n)\n</code>\n<|/ a tags=arrays,python dscore=1 |>\n<|\
    \ a |>\nI wrote this for fun because it is a bit more \"pythonic\" than other\
    \ solutions. I think that this solution should be faster though. \n<code>\ndef\
    \ select_words(s, n):\n  vowels = 'aeiou'\n  consonants = 'bcdfghjklmnpqrstvwxyz'\n\
    \  words = s.split(' ')\n\n  ret = []\n  count = 0\n  while count < len(words):\n\
    \    word = words[count]\n    if len(word) == 0:\n      continue\n    cur_count\
    \ = 0\n    for ch in word:\n      if ch in consonants:\n        cur_count += 1\n\
    \    if cur_count == n:\n      ret.append(word)\n    count += 1\n  return ret\n\
    \ns = \"\"\"Mary had a little lamb\"\"\"\nn = 4\n\nselect_words(s, n)\n</code>\n\
    <|/ a tags=arrays,python dscore=1 |>\n", "    $words = array();\n    foreach (str_word_count($s)\
    \ as $word) {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n", "  return array($s);\n}", "  // Your\
    \ code here\n}\n", "    $letters = str_split($s);\n    if ($n == 0) {\n      \
    \  return [];\n    }\n    if ($n == 1) {\n        return $letters;\n    }\n  \
    \  $arr = [];\n    for ($i = 0; $i < count($letters); $i++) {\n        for ($j\
    \ = 0; $j < count($letters); $j++) {\n            $str = \"\";\n            if\
    \ ($letters[$i] == $letters[$j]) {\n                $str .= $letters[$i];\n  \
    \              $arr[] = $str;\n                if ($i + 1 < count($letters)) {\n\
    \                    if ($letters[$i + 1] == $letters[$j + 1]) {\n           \
    \             $str .= $letters[$j + 1];\n                        $arr[] = $str;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return $arr;\n}\n", "    // Your code here\n}\n", "    // TODO\n}\n", "}\n",
  "    $words = array();\n\n    foreach (str_split($s) as $letter) {\n        if ((strlen($letter)\
    \ > 0 && ctype_lower($letter)) && preg_match('/([aeiou])\\1{' . $n . '}\\1/i',\
    \ $letter)) {\n            array_push($words, $letter);\n        }\n    }\n\n\
    \    return $words;\n}\n", "    return [];\n}\n", "    // Fill in this code\n\
    }\n</cell>\n<text>\nTest your Code\n\n</text>\n<cell>\nfrom nose.tools import\
    \ assert_equal, assert_true, assert_false, assert_raises\n\ndef test_select_words():\n\
    \    assert_equal(select_words(\"Mary had a little lamb\", 4), [\"little\"])\n\
    \    assert_equal(select_words(\"Mary had a little lamb\", 3), [\"Mary\", \"lamb\"\
    ])\n    assert_equal(select_words(\"simple white space\", 2), [])\n    assert_equal(select_words(\"\
    Hello world\", 4), [\"world\"])\n    assert_raises(TypeError, select_words, \"\
    simple\", 3)\n    assert_raises(TypeError, select_words, \"Mary had a little lamb\"\
    , 4)\n</cell>\n<text>\nNotes: You will notice a pattern in the examples above.\
    \ Even though the first example has \"Mary\" twice in the list, it does not appear\
    \ twice. That's because there were two \"Mary\" words. The second example has\
    \ no \"Mary\"s, but does have a \"little\". The third example has no \"little\"\
    s, but does have a \"little\". The fourth example has two \"little\"s.\n\nYou'll\
    \ see why this is a pattern in some future examples.\n\nYour Code\nPlease copy\
    \ your solutions to code cells in the box below. Some cells begin with #. Your\
    \ code should be placed between a pair of # signs. On the cell immediately below\
    \ the set of #'s should be a code cell that calls the select_words() function\
    \ with the parameters that we specified as part of the question (the string \"\
    Mary had a little lamb\" and a natural number 4, for example).\n\nIf you have\
    \ difficulty with any concepts below, please don't hesitate to uncomment the appropriate\
    \ code. If your code is correct, submitting the assignment will save you a lot\
    \ of time and ensures you understand your answers.\n\n\n</text>\n<cell>", "  \
    \  // code goes here\n    $arr = [];\n    if ($s == \"\") {\n        return $arr;\n\
    \    }\n    $arr = explode(' ', $s);\n    foreach ($arr as $val) {\n        if\
    \ (preg_match('/\\s[bcdfghjklmnpqrstvwxyz]/', $val)) {\n            $arr2 = explode('\
    \ ', $val);\n            $flag = 0;\n            foreach ($arr2 as $val2) {\n\
    \                if (preg_match('/\\s[bcdfghjklmnpqrstvwxyz]/', $val2)) {\n  \
    \                  $flag = 1;\n                }\n            }\n            if\
    \ ($flag == 0) {\n                $arr[] = $val;\n            }\n        }\n \
    \   }\n    return $arr;\n}\n", "\t\n}", "    $arr = str_split($s);\n    $output\
    \ = array();\n    foreach ($arr as $k=>$v){\n        if(count(preg_grep('/^[^aeiou]+$/i',\
    \ $v)) == $n){\n            $output[] = $v;\n        }\n    }\n    return $output;\n\
    }\n", "    // YOUR CODE HERE\n    $letters = preg_split('/\\s+/', $s);\n    $count\
    \ = 0;\n    $new_array = array();\n    foreach ($letters as $letter) {\n     \
    \   if ($count == $n) {\n            $new_array[] = $letter;\n            $count++;\n\
    \        } else {\n            if ($count > 0) {\n                $new_array[]\
    \ = $letter;\n            }\n            $count++;\n        }\n    }\n    return\
    \ $new_array;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n\
    I liked the other answers, so I decided to try and implement this using array_filter\
    \ and array_slice.\n<code>\n<?php\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
