name: HumanEval_105_by_length
language: php
prompt: "<?php\n// Given an array of integers, sort the integers that are between\
  \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
  \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
  , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
  \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
  , \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
  // >>> by_length(array())\n// array()\n// If the array has any strange number ignore\
  \ it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction by_length($arr)\
  \ {\n"
tests: "function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
  Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
  \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
  , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  if (is_array($arr)) {\n    ksort($arr);\n    $ret = array();\n  \
    \  foreach ($arr as $key => $value) {\n      if (is_int($value) && $key < 10 &&\
    \ $key >= 1) {\n        $ret[$key] = \"One\";\n      } else if (is_int($value)\
    \ && $key >= 10 && $key <= 99) {\n        $ret[$key - 10] = \"Ten\";\n      }\
    \ else if (is_int($value) && $key > 99) {\n        $ret[$key - 100] = \"Hundred\"\
    ;\n      }\n    }\n    return $ret;\n  }\n  return array();\n}\n</code>\n<|/ a\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>", "  return empty($arr) ? array()\
    \ : array_intersect_key(\n    array_reverse($arr),\n    array_flip(array_count_values($arr))\
    \ + array(1 => null, '' => null)\n  );\n}\n", "  $len = count($arr);\n  if ($len\
    \ == 0)\n    return array();\n  if ($len == 1)\n    return array($arr[0]);\n \
    \ sort($arr);\n  $i = 0;\n  $len = count($arr);\n  $new = array();\n  while ($i\
    \ < $len) {\n    if ($i < $len - 1) {\n      if ($arr[$i] <= $arr[$i + 1]) {\n\
    \        $new[$i] = $arr[$i];\n        $i++;\n      }\n    }\n    $new[$i] = strval($arr[$i]);\n\
    \    $i++;\n  }\n  asort($new);\n  $return = array();\n  foreach ($new as $key\
    \ => $val)\n    $return[] = array($key, $val);\n  return $return;\n}", "  $len\
    \ = count($arr);\n  if ($len === 0) {\n    return array();\n  }\n  $result = [];\n\
    \  $half = floor($len / 2);\n  foreach ($arr as $key => $value) {\n    if ($value\
    \ >= 1 && $value <= 9) {\n      $result[$value] = str_repeat(\"One\", $half);\n\
    \    }\n    if ($value < 1 || $value > 9) {\n      unset($arr[$key]);\n    }\n\
    \  }\n  $result = array_merge($result, array_reverse($arr));\n  return $result;\n\
    }", "  if (!$arr || !count($arr)) return array();\n  sort($arr);\n  $new = array();\n\
    \  for ($i=0; $i<count($arr); $i++) {\n    if ($i && $arr[$i] == $arr[$i-1]) continue;\n\
    \    $new[] = name_by_length($arr[$i]);\n  }\n  if (!count($new)) return array();\n\
    \  sort($new);\n  $new = array_merge($new, array_diff($arr, array($arr[0])));\n\
    \  for ($i=0; $i<count($new); $i++) {\n    $new[$i] = name_by_length($new[$i]);\n\
    \  }\n  return $new;\n}\n", "  return array_reduce($arr, function ($a, $b) {\n\
    \    return $a ? $a : $b ? $b : 'One';\n  });\n}\n</code>\n<|/ a dscore=0 tags=php,arrays,sorting\
    \ |>\n<| c |>\nThank you very much for your response but I don't really get how\
    \ this works, I've tried the code but didn't get the result I wanted...\n<|/ c\
    \ |>\n<| c |>\nThis code only works for integers, but you said in your question\
    \ you wanted an array of strings. I assumed your array would contain integers.\
    \ Can you please clarify exactly what you want and what your array looks like?\
    \ What is your expected output for an integer array? What is your expected output\
    \ for a string array?\n<|/ c |>\n<| c |>\nOk, my bad, I wanted an array of strings,\
    \ not integers. My bad. Sorry for that.\n<|/ c |>\n<| c |>\nSo the desired output\
    \ is now different than your original question. I've edited my answer, please\
    \ take a look.\n<|/ c |>\n<| c |>\nThank you very much for your effort but this\
    \ doesn't really work. If I replace your array with my array I get `array(\"\"\
    )`\n<|/ c |>\n<| a |>\nThis is probably not the best way to do it but here it\
    \ goes:\n<code>\n<?php\n$array = [\n    'Two',\n    'Two',\n    'One',\n    'One',\n\
    \    'Three',\n    'Four',\n    'Five',\n    'Six',\n    'Seven',\n    'Eight',\n\
    \    'Nine',\n];\n$array_length = count($array);\n$new_array = array();\nfor($i\
    \ = 0; $i < $array_length; $i++) {\n    $new_array[] = $array[$i];\n}\nsort($new_array);\n\
    for($i = 0; $i < $array_length; $i++) {\n    $key = array_search($new_array[$i],\
    \ $array);\n    if($key !== false) {\n        $new_array[$key] = $i;\n    }\n\
    }\n$new_array_length = count($new_array);\nfor($i = 0; $i < $new_array_length;\
    \ $i++) {\n    $new[$i] = $array[$new_array[$i]];\n}\nprint_r($new);", "\t$sorted\
    \ = array();\n\tforeach ($arr as $x) {\n\t\tif ($x >= 1 && $x <= 9) {\n\t\t\t\
    $sorted[] = array('name' => 'One', 'digit' => $x);\n\t\t\t$sorted[] = array('name'\
    \ => 'Two', 'digit' => $x);\n\t\t\t$sorted[] = array('name' => 'Three', 'digit'\
    \ => $x);\n\t\t\t$sorted[] = array('name' => 'Four', 'digit' => $x);\n\t\t\t$sorted[]\
    \ = array('name' => 'Five', 'digit' => $x);\n\t\t\t$sorted[] = array('name' =>\
    \ 'Six', 'digit' => $x);\n\t\t\t$sorted[] = array('name' => 'Seven', 'digit' =>\
    \ $x);\n\t\t\t$sorted[] = array('name' => 'Eight', 'digit' => $x);\n\t\t\t$sorted[]\
    \ = array('name' => 'Nine', 'digit' => $x);\n\t\t}\n\t}\n\treturn $sorted == array()\
    \ ? array() : array_reverse($sorted);\n}\n", "  $len = count($arr);\n  if ($len\
    \ == 0) {\n    return array();\n  }\n  $first = array_shift($arr);\n  $last =\
    \ array_pop($arr);\n  $reversed = array();\n  $i = 1;\n  while ($i <= $len) {\n\
    \    $reversed[$i] = $arr[$i];\n    $i++;\n  }\n  foreach ($reversed as $k =>\
    \ $v) {\n    $reversed[$k] = str_replace(\n      array($first, $last),\n     \
    \ array('One', 'One'),\n      array_search($v, range(1, 10))\n    );\n  }\n  return\
    \ $reversed;\n}", "  if (!$arr || count($arr) < 1) return array();\n\n  // If\
    \ the first element of the array is an integer, then ignore it:\n  if (!is_int(reset($arr)))\
    \ return array();\n\n  // If the array has any strange number ignore it:\n  if\
    \ (-1 == reset($arr)) return array();\n\n  // We have an array with integers,\
    \ sort it and then reverse it:\n  $a = array_reverse(sort($arr));\n\n  // Now\
    \ create a map from the digits to its strings:\n  $digits = array_map(function($v)\
    \ { return $v; }, $a);\n\n  // Now we can map the digits back to the strings:\n\
    \  return array_map(function($v) use ($digits) {\n    return isset($digits[$v])\
    \ ? $digits[$v] : \"\";\n  }, $a);\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nYour\
    \ `by_length` function seems to be a mix of `array_reduce` and `array_map`. Can\
    \ you explain your solution? The `array_map` part is really cool, but why do you\
    \ use `array_reverse` before `sort`? Why not just `sort($arr)`?\n<|/ c |>\n<|\
    \ c |>\nThis solution is probably the cleanest of the solutions I've seen so far.\
    \ It was a tough one for me to solve using just `array_map` as I needed a variable\
    \ number of digits. I ended up writing a function that takes a string and returns\
    \ the digits that make up the string. From there it was easy to return the string\
    \ with an array map that mapped the digits back to the string.\n<|/ c |>\n<| c\
    \ |>\nI did something similar to this. Plus, I added the `by_length` function\
    \ to my answer, which should be easier to read than the `by_length` function I\
    \ put here.\n<|/ c |>\n<| a tags=php |>\nI made a solution by using the function\
    \ \"number_format\" :\n<code>", "  if (empty($arr)) {\n    return array();\n \
    \ }\n  $result = array();\n  // Sort the array by the length\n  sort($arr, SORT_NUMERIC);\n\
    \  foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n\
    \      $result[$value] = $name;\n    }\n  }\n  // Reverse the array and replace\
    \ each digit by its corresponding name.\n  $result = array_reverse($result);\n\
    \  foreach ($result as $key => $value) {\n    $result[$key] = str_replace($key,\
    \ '', $value);\n  }\n  return $result;\n}", "  $len = count($arr);\n  if ($len\
    \ === 0) return array();\n  $min = min($arr);\n  $max = max($arr);\n  $mininc\
    \ = $max - $min;\n  $maxinc = $max - $len;\n  if ($maxinc >= $mininc) {\n    $arr\
    \ = array();\n    for ($i = 0; $i < $len; $i++) {\n      if ($arr[($i + $min)]\
    \ >= $i) {\n        $arr[$i] = $arr[($i + $min)];\n      }\n    }\n    for ($i\
    \ = 0; $i < $len; $i++) {\n      $arr[$i] = $names[$arr[$i]];\n    }\n    return\
    \ $arr;\n  }\n  return array();\n}\n", "    if (!$arr) {\n        return array();\n\
    \    }\n    if (count($arr) === 1) {\n        $arr = (array)$arr;\n    }\n   \
    \ if (!is_array($arr)) {\n        return $arr;\n    }\n    foreach ($arr as $i\
    \ => $x) {\n        if (!is_numeric($x)) {\n            continue;\n        }\n\
    \        $digit = (string)$i;\n        if ($digit < '9') {\n            $arr[$i]\
    \ = $name;\n        }\n    }\n    $arr = array_reverse($arr);\n    foreach ($arr\
    \ as &$v) {\n        $v = array_search($v, array('One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'));\n    }\n    return $arr;\n}\n", " \
    \   if (!$arr) {\n        return array();\n    }\n    $arr = array_reverse($arr);\n\
    \    $result = array();\n    $count = count($arr);\n    $max = max($arr);\n  \
    \  foreach (range(1, $max) as $k) {\n        $result[] = 'One';\n        $result[]\
    \ = 'Two';\n        $result[] = 'Three';\n        $result[] = 'Four';\n      \
    \  $result[] = 'Five';\n        $result[] = 'Six';\n        $result[] = 'Seven';\n\
    \        $result[] = 'Eight';\n        $result[] = 'Nine';\n    }\n    $max =\
    \ count($arr);\n    $last = array_pop($arr);\n    foreach ($arr as $v) {\n   \
    \     $result[] = $result[$k];\n        $k++;\n    }\n    $result[$k] = $result[$max];\n\
    \    $result[$max] = $last;\n    return $result;\n}", "  $out = array();\n  if\
    \ (count($arr) === 0) {\n    return $out;\n  }\n  if (count($arr) !== count(array_filter(array_keys($arr),\
    \ function($k) {\n    return is_numeric($k);\n  }))) {\n    return $out;\n  }\n\
    \  $min = min($arr);\n  $max = max($arr);\n  if ($min === $max) {\n    $out[]\
    \ = $min;\n    return $out;\n  }\n  foreach ($arr as $k => $v) {\n    if ($v <\
    \ $min) {\n      break;\n    }\n    if ($v > $max) {\n      break;\n    }\n  \
    \  $out[] = sprintf('%s%s', $k + 1, $arr[$k]);\n  }\n  return $out;\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nThis worked well for me. I needed an alphabetical\
    \ sort with ascending numbers and I used `sort($input, SORT_NUMERIC | SORT_STRING);`\
    \ instead of `array_reverse()`\n<|/ c |>\n<| a dscore=3 |>\n<code>\n<?php\n",
  "  $result = array();\n  foreach ($arr as $num) {\n    if ($num > 0 && $num < 9)\
    \ {\n      $result[] = name_by_num($num);\n    }\n  }\n  return $result;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nThis is untested code, but should\
    \ work.\n<code>", "  if (empty($arr)) return array();\n  $arr = array_reverse($arr);\n\
    \  $names = array('', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine');\n  $result = array();\n  for ($i = 0, $c = count($arr); $i < $c; $i++)\
    \ {\n    if ($arr[$i] < 1 || $arr[$i] > 9) continue;\n    $result[] = $names[$arr[$i]];\n\
    \  }\n  return $result;\n}\n", "    if (empty($arr)) {\n        return array();\n\
    \    }\n    $ones = $tens = $teens = $nines = array();\n    $len = count($arr);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $n = $arr[$i];\n        if ($n ==\
    \ 1) {\n            array_push($ones, $n);\n        } else if ($n < 10) {\n  \
    \          array_push($tens, $n);\n        } else if ($n < 100) {\n          \
    \  array_push($teens, $n);\n        } else {\n            array_push($nines, $n);\n\
    \        }\n    }\n    usort($nines, \"cmp_by_length\");\n    $out = array();\n\
    \    foreach ($ones as $one) {\n        array_push($out, \"One\");\n    }\n  \
    \  foreach ($tens as $ten) {\n        array_push($out, \"Ten\");\n    }\n    foreach\
    \ ($teens as $teen) {\n        array_push($out, \"Eleven\");\n    }\n    foreach\
    \ ($nines as $nine) {\n        array_push($out, \"Nine\");\n    }\n    return\
    \ $out;\n}\n", "  // Get a copy of the original array, so we can manipulate it\
    \ without affecting the\n  // caller's original array\n  $arr2 = $arr;\n\n  //\
    \ If the array is empty, return an empty array\n  if (empty($arr2)) {\n    return\
    \ array();\n  }\n\n  // If we have any numbers or negative numbers, ignore them\n\
    \  $arr = array_filter($arr, function ($value) {\n    return ($value > 0 && $value\
    \ < 10);\n  });\n\n  // Sort them\n  sort($arr);\n\n  // Loop through and reverse\
    \ them\n  $reversed = array();\n  foreach ($arr as $number) {\n    $reversed[]\
    \ = str_replace(range(1, 2, 9), '', $number);\n  }\n\n  // Loop through them and\
    \ make them into words\n  $arr = array_map(function ($number) {\n    // Make sure\
    \ we can actually work out what they are\n    $length = strlen($number);\n   \
    \ if ($length < 2) {\n      return $number;\n    }\n\n    // Get the number name\
    \ from the range\n    return range_to_word($number, $length);\n  }, $arr);\n\n\
    \  // Combine them all back together\n  return array_merge($arr, $reversed);\n\
    }\n", "  $result = array();\n  if (!$arr) {\n    return $result;\n  }\n  $max\
    \ = $arr[0];\n  foreach ($arr as $a) {\n    $result[] = $a === $max ? 'One' :\
    \ $a . ' ' . $max;\n    $max = $a;\n  }\n  $max = strrev($max);\n  foreach ($result\
    \ as $k => $v) {\n    $result[$k] = strrev($v);\n  }\n  foreach (str_split($max,\
    \ 1) as $k) {\n    $result[$k] = 'One ' . $k;\n  }\n  return $result;\n}\n</code>\n\
    Output:\n<code>\nEight Five Four Three Two Two One One\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI agree with your solution, however I do not want to change the\
    \ number in input array, just to change it in output array. So, I think the solution\
    \ with `str_pad()` is better\n<|/ c |>\n<| c |>\nYour solution does not work for\
    \ negative numbers, it only works for positive integers.\n<|/ c |>\n<| c |>\n\
    Hmm, I think it can be done with str_pad()\n<|/ c |>\n<| c |>\nI misread your\
    \ requirement to sort by length first. Answer updated.\n<|/ c |>\n<| c |>\nHmm,\
    \ this does not work if number is `-1`, as I mentioned in my question.\n<|/ c\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php\n$ints = [1, 2, 3, -1, 7, 8, 3, 9, 10];\n\
    $max = '';\n\nforeach ($ints as $int) {\n    $max .= ($max != '' ? ' ' : '') .\
    \ $int;\n    if ($int < 9) {\n        $max = $ints[$int];\n    }\n}\necho $max;\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\nMy suggestion is to use array_count_values\
    \ function, which returns the value for each key in an array. \n<code>\n<?php\n\
    \n$arr = [\n    1 => 4,\n    2 => 4,\n    3 => 2,\n    4 => 2,\n    5 => 5,\n\
    \    6 => 8,\n    7 => 3,\n    8 => 7,\n    9 => 8,\n    10 => 9,\n];\n\n$values\
    \ = [];\n\nforeach($arr as $k => $v){\n    $values[$k] = $v;\n}\n\n$count = array_count_values($values);\n\
    arsort($count);\n\n$final = [];\n\nforeach", "  $out = array();\n  if (is_array($arr))\
    \ {\n    foreach ($arr as $k => $v) {\n      if ($v > 0 && $v < 10) {\n      \
    \  $out[$v] = get_string($k);\n      }\n    }\n  }\n  return empty($out) ? array()\
    \ : $out;\n}", "  return array_map(function ($value) {\n    if ($value >= 1 &&\
    \ $value <= 9) {\n      return chr($value);\n    }\n  }, reverse($arr));\n}\n\
    </code>\n<|/ a |>\n<| c |>\nthank you so much for this. I am very interested in\
    \ learning more about PHP and how to use these arrays. My teacher mentioned he\
    \ is going to learn about them next semester so I wanted to learn some new things.\n\
    <|/ c |>\n<| c |>\nYou're welcome! You can learn about them in a lot of different\
    \ ways. The best way to learn would be to read up on PHP arrays (especially arrays\
    \ with numeric keys). There are a lot of good tutorials on PHP's website. Here's\
    \ one I like: http://www.homeandlearn.co.uk/php/php7p3.html It will teach you\
    \ a lot about arrays and how to use them. It should help you with your programming\
    \ assignments as well.\n<|/ c |>\n<| a |>\nYou can use the PHP function array_multisort\
    \ and specify the SORT_NUMERIC flag.\n<code>\n$numbers = array(8, 1, 3, 1, 4,\
    \ 3, 12, 10, 4, 7, 3, 9, 2, 7, 4, 5);\n\narray_multisort($numbers, SORT_NUMERIC,\
    \ $numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php dscore=0 |>\n<| a tags=php\
    \ |>\nTry something like this\n<code>\n<?php", "    if (empty($arr)) {\n     \
    \   return array();\n    }\n    $length = count($arr);\n    if (!is_numeric($length))\
    \ {\n        return $arr;\n    }\n    if ($length == 1) {\n        return array(array_shift($arr));\n\
    \    }\n    $sorted = array();\n    $key = 0;\n    $first = 1;\n    $tens = 10;\n\
    \    while ($key < $length) {\n        if ($first) {\n            $first = 0;\n\
    \        }\n        if ($arr[$key] >= 1 && $arr[$key] <= 9) {\n            $sorted[$key]\
    \ = $arr[$key];\n        } elseif ($arr[$key] >= 10 && $arr[$key] <= 99) {\n \
    \           $tens = $arr[$key];\n        } else {\n            if ($arr[$key]\
    \ == 0) {\n                $sorted[$key] = $arr[$key];\n            } else {\n\
    \                ++$key;\n            }\n        }\n        $first = 1;\n    }\n\
    \    $length = count($sorted);\n    for ($i = 0; $i < $length; ++$i) {\n     \
    \   if ($sorted[$i] <= 9) {\n            $sorted[$i] = $tens + $sorted[$i];\n\
    \        }\n    }\n    return $sorted;\n}\n</code>\n<|/ a |>\n<| a dscore=1 tags=algorithm,php\
    \ |>\nI liked Dan Hammerstein's answer, but used my own PHP code instead of his\
    \ array_flip.\nHere is my working code:\n<code>", "  $sorted = array();\n  foreach($arr\
    \ as $key => $val) {\n    if ($val == 1 || $val == 2 || $val == 3 || $val == 4\
    \ || $val == 5 || $val == 6 || $val == 7 || $val == 8 || $val == 9) {\n      $sorted[$key]\
    \ = $val;\n    }\n  }\n  if ($sorted) {\n    $sorted = array_reverse($sorted);\n\
    \    foreach($sorted as $key => $val) {\n      if ($val > 0 && $val < 10) {\n\
    \        $sorted[$key] = chr($val+65);\n      }\n    }\n  }\n  return $sorted;\n\
    }\n", "    // Return an empty array if we're given an empty array:\n    if (empty($arr))\
    \ {\n        return array();\n    }\n\n    // Initialize some variables to help\
    \ us avoid re-calculating the length\n    // of the array multiple times:\n  \
    \  $min = 0;\n    $max = 0;\n\n    foreach ($arr as $number) {\n        // If\
    \ the number is less than 10, we'll consider it to be between 1-9:\n        if\
    \ ($number < 10) {\n            $min = $min + 10;\n            $max = $max + 10;\n\
    \        } else {\n            // Otherwise, if it's larger than 10, we'll consider\
    \ it to be between 10 and 99:\n            $min = $min + 100;\n            $max\
    \ = $max + 100;\n        }\n    }\n\n    // Sort and reverse the array so it's\
    \ in descending order of length:\n    arsort($arr);\n    $arr = array_reverse($arr);\n\
    \n    // Replace each digit in the array with the name from our array of names:\n\
    \    $result = array();\n    for ($i = $min; $i <= $max; $i++) {\n        $result[]\
    \ = name_by_number($i);\n    }\n\n    return $result;\n}", "  if (empty($arr))\
    \ {\n    return array();\n  }\n  $length = array_sum($arr);\n  if ($length < 1)\
    \ {\n    return array();\n  }\n  $result = array();\n  $base = 1;\n  while ($length\
    \ > 0) {\n    $remainder = $length % $base;\n    $result[] = array_shift($arr);\n\
    \    $length -= $remainder;\n    $base *= 10;\n  }\n  foreach ($result as $key\
    \ => $value) {\n    $result[$key] = sprintf('%s%s', $array[$key], ($array[$key]\
    \ == $array[$key] ? ' ' : $array[$key]));\n  }\n  return $result;\n}\n</code>\n\
    <|/ a tags=arrays,php,sorting |>\n<| a dscore=0 |>\nJust another way to do it\
    \ in PHP. This will do an in-place sort on the given array:\n<code>", "  uasort($arr,\
    \ function($a, $b) { return ($a < $b) ? 1 : -1; });\n  $ret = [];\n  foreach($arr\
    \ as $val) {\n    if ($val !== 1 && $val !== -1 && $val !== 9 && $val !== 10 &&\
    \ $val !== 11) {\n      $ret[] = chr($val);\n    }\n  }\n  return $ret;\n}\n",
  "  if (!$arr) {\n    return array();\n  }\n  $resultArr = array();\n  foreach ($arr\
    \ as $key => $val) {\n    if ($val < 1 || $val > 9) {\n      continue;\n    }\n\
    \    $digits = $val - 1;\n    $resultArr[$key] = $digits[$val];\n  }\n  return\
    \ array_reverse($resultArr);\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>\n\
    <?php \n\n$array = array(\n  array('name' => 'John', 'age' => 36),\n  array('name'\
    \ => 'Jane', 'age' => 38),\n  array('name' => 'Jack', 'age' => 32),\n  array('name'\
    \ => 'Jill', 'age' => 36)\n);\n", "  if (count($arr) == 0) {\n    return array();\n\
    \  }\n  $len = count($arr);\n  $sorted = $arr;\n  asort($sorted);\n  $reversed\
    \ = array_reverse($sorted);\n  foreach ($reversed as $i => $digit) {\n    $str\
    \ = $i + 1;\n    if (isset($names[$digit])) {\n      $str = $names[$digit];\n\
    \    }\n    $reversed[$i] = $str;\n  }\n  return $reversed;\n}", "  return !empty($arr)\
    \ ? array_map(function ($x) {\n    if ($x < 1 || $x > 9) return $x;\n    return\
    \ $arr[$x - 1];\n  }, range(0, count($arr) - 1)) : (array) $arr;\n}\n</code>\n\
    As you can see, the code is pretty short and it's easy to understand.\n<|/ a tags=php,laravel,arrays\
    \ |>\n<| a tags=php,laravel,arrays |>\nTry this function:\n<code>\npublic function\
    \ convertToEnglish($input) {\n\n        $input = array_count_values($input);\n\
    \        $input = array_keys($input);\n        $input = array_flip($input);\n\
    \        $input = array_merge($input);\n        $input = array_flip($input);\n\
    \        $input = array_keys($input);\n        $input = array_flip($input);\n\
    \        $input = array_values($input);\n\n        foreach ($input as $key =>\
    \ $value) {\n            $english[$key] = $value;\n        }\n\n        return\
    \ $english;\n    }\n\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n<?php", " \
    \ return array_reduce(\n    $arr,\n    function ($output, $item) {\n      if (!is_array($item))\
    \ {\n        return $output;\n      }\n\n      $length = count($item);\n     \
    \ if ($length < 2) {\n        return $output;\n      }\n\n      $output[] = array($item[0],\
    \ $item[1], $length);\n      return $output;\n    },\n    array()\n  );\n}\n</code>\n\
    <|/ a dscore=4 tags=sorting,php,arrays |>\n<| a tags=sorting,php,arrays |>\nI\
    \ have found the easiest way to sort this type of array is to use the array_multisort\
    \ function.\n<code>", "  if (!is_array($arr) || !count($arr)) {\n    return array();\n\
    \  }\n  $min = array_reduce($arr, function($min, $e) {\n    return $min > $e ?\
    \ $e : $min;\n  }, PHP_INT_MAX);\n  $max = array_reduce($arr, function($max, $e)\
    \ {\n    return $max < $e ? $e : $max;\n  }, -PHP_INT_MAX);\n  uasort($arr, 'strnatcmp');\n\
    \  $arr = array_reverse($arr);\n  $ret = array();\n  foreach ($arr as $e) {\n\
    \    if ($min <= $e && $e <= $max) {\n      $ret[] = english_digit_name($e);\n\
    \    }\n  }\n  return $ret;\n}\n", "    if (empty($arr)) {\n        return array();\n\
    \    }\n    $min = 1;\n    $max = count($arr) - 1;\n    if ($min > $max) {\n \
    \       return $arr;\n    }\n    $result = array();\n    while (true) {\n    \
    \    $mid = (int)($min + ($max - $min) / 2);\n        $result[] = str_replace('One',\
    \ '1', $names[$mid]);\n        $min = $mid + 1;\n        if ($min > $max) {\n\
    \            $min = $min;\n        }\n        if ($max === $mid) {\n         \
    \   break;\n        }\n        $max = $mid - 1;\n        if ($min > $max) {\n\
    \            $max = $max;\n        }\n    }\n    return $result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI haven't tried your answer, but thank you for providing such\
    \ a great example! I will read up on the problem and try implementing yours when\
    \ I get home!\n<|/ c |>\n<| c |>\nNice! Now I've learned a lot about `foreach`.\n\
    <|/ c |>\n<| c |>\nSorry for the delay.  I've had a chance to try this out and\
    \ it works great.  Thanks for your help.  I didn't realize that you could define\
    \ variables within functions.\n<|/ c |>\n<| c |>\nYou _can_, but you shouldn't.\
    \ The idea behind OOP is to have objects that you can call methods on without\
    \ having to define global variables that you never use. That's why I used global\
    \ variables in my code. That's a terrible idea and will lead to horrible maintenance\
    \ nightmares. You can avoid this horror by just writing OOP in the first place.\n\
    <|/ c |>\n<| c |>\n: You should really read my answer to the question, it's about\
    \ what you should **not** do. You should **not** use globals like `$names`.\n\
    <|/ c |>\n<| a tags=php,arrays |>\nHere is another solution:\n<code>\n$arr = array(4,\
    \ 0, 2, 5, 6, 8, 0, 9, 0, 3, 7, 8, 5, 7, 4, 1);\n$arr = array_reverse(array_slice($arr,\
    \ count($arr) / 2, 2));\n$arr = array_reduce($arr, function($a, $b) { return $a\
    \ . str_replace('0', '', $b); });\nprint_r($arr);\n</code>\nOutput:\n<code>\n\
    Array\n(\n    [0] => Four\n    [1] => Six\n    [2] => Seven\n    [3] => Eight\n\
    \    [4] => Nine\n)\n</code>\n<|/ a d", "  $result = array();\n  foreach ($arr\
    \ as $item) {\n    if ($item < 1 || $item > 9) {\n      continue;\n    }\n   \
    \ for ($i = 1; $i <= 9; $i++) {\n      if ($item == $i) {\n        $result[] =\
    \ 'One';\n        break;\n      }\n      if ($item == $i - 1) {\n        $result[]\
    \ = 'Two';\n        break;\n      }\n      if ($item == $i - 2) {\n        $result[]\
    \ = 'Three';\n        break;\n      }\n      if ($item == $i - 3) {\n        $result[]\
    \ = 'Four';\n        break;\n      }\n      if ($item == $i - 4) {\n        $result[]\
    \ = 'Five';\n        break;\n      }\n      if ($item == $i - 5) {\n        $result[]\
    \ = 'Six';\n        break;\n      }\n      if ($item == $i - 6) {\n        $result[]\
    \ = 'Seven';\n        break;\n      }\n      if ($item == $i - 7) {\n        $result[]\
    \ = 'Eight';\n        break;\n      }\n      if ($item == $i - 8) {\n        $result[]\
    \ = 'Nine';\n        break;\n      }\n    }\n  }\n  return $result;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\nA different approach that should be faster and more\
    \ efficient:\n<code>\n<?php\n\n$numbers = [1, 2, 3, 4, 5, 6, 2, 7, 7, 8];\n\n\
    $result = array();\n\n$temp = array();\nforeach ($numbers as $value) {\n    $temp[$value]\
    \ = $value;\n}\n\nforeach ($temp as $value) {\n    for ($i = 1; $i <= 9; $i++)\
    \ {\n        if ($value == $i) {\n            $result[] = 'One';\n           \
    \ break;\n        }\n        if ($value == $i - 1) {\n            $result[] =\
    \ 'Two';\n            break;\n        }\n        if ($value == $i - 2) {\n   \
    \         $result[] = 'Three';\n            break;\n        }\n        if ($value\
    \ == $i - 3) {\n            $result[] = 'Four';\n            break;\n        }\n\
    \        if ($value == $i - 4) {\n            $result[] = 'Five';\n          \
    \  break;\n        }\n        if ($value == $i - 5) {\n            $result[] =\
    \ 'Six';\n            break;\n        }\n        if ($value == $i - 6) {\n   \
    \         $result[] = 'Seven';\n            break;\n        }\n        if ($value\
    \ == $i - 7) {\n            $result[] = 'Eight';\n            break;\n       \
    \ }\n        if ($value == $i - 8) {\n            $result[] = 'Nine';\n      \
    \      break;\n        }\n    }\n}\n\nprint_r($result);\n</code>\nOutput:\n<code>\n\
    Array\n(\n    [0] => One\n    ", "    if (empty($arr)) {\n        return array();\n\
    \    }\n    $res = array();\n    foreach ($arr as $num) {\n        if ($num >=\
    \ 1 && $num <= 9) {\n            $res[] = \"One\";\n        }\n        else if\
    \ ($num >= 10 && $num <= 19) {\n            $res[] = \"Two\";\n        }\n   \
    \     else if ($num >= 20 && $num <= 29) {\n            $res[] = \"Three\";\n\
    \        }\n        else if ($num >= 30 && $num <= 39) {\n            $res[] =\
    \ \"Four\";\n        }\n        else if ($num >= 40 && $num <= 49) {\n       \
    \     $res[] = \"Five\";\n        }\n        else if ($num >= 50 && $num <= 59)\
    \ {\n            $res[] = \"Six\";\n        }\n        else if ($num >= 60 &&\
    \ $num <= 69) {\n            $res[] = \"Seven\";\n        }\n        else if ($num\
    \ >= 70 && $num <= 79) {\n            $res[] = \"Eight\";\n        }\n       \
    \ else if ($num >= 80 && $num <= 89) {\n            $res[] = \"Nine\";\n     \
    \   }\n        else {\n            $res[] = \"Unknown\";\n        }\n    }\n \
    \   return $res;\n}", "\t$counts = array();\n\tforeach ($arr as $num) {\n\t\t\
    $counts[$num] = isset($counts[$num]) ? $counts[$num] + 1 : 0;\n\t}\n\tksort($counts);\n\
    \t$out = array();\n\tforeach ($arr as $num) {\n\t\tif ($num < 1 || $num > 9 ||\
    \ !isset($counts[$num])) {\n\t\t\tcontinue;\n\t\t}\n\t\t$out[$num - 1] = $names[$counts[$num]\
    \ - 1];\n\t}\n\treturn $out;\n}\n", "  return empty($arr) ? '' : array_reduce($arr,\
    \ function($carry, $value) {\n    return $carry + ($value >= 1 && $value <= 9\
    \ ? $value : $value - 10);\n  }, 0);\n}\n</code>\n<|/ a tags=php,function |>\n\
    <| c |>\nIt worked but I had to add a comma after array_reduce.\n<|/ c |>\n<|\
    \ a tags=php,function |>\nBased on the original answer from, but in C#:\n<code>\n\
    public static string NumberToWords(int number)\n{\n    string[] words = new string[10];\n\
    \    if (number == 0)\n    {\n        words[0] = \"Zero\";\n    }\n    else if\
    \ (number < 0)\n    {\n        words[4] = \"Minus\";\n        number *= -1;\n\
    \    }\n    else\n    {\n        words[5] = \"One\";\n    }\n    for (int i =\
    \ 0; i < numbers.Length; i++)\n    {\n        if (number % 10 == i)\n        {\n\
    \            words[i + 1] = \"Ten\";\n            number /= 10;\n        }\n \
    \       else if (number % 100 == i)\n        {\n            words[i + 1] = \"\
    100\";\n            number /= 100;\n        }\n        else if (number % 1000\
    \ == i)\n        {\n            words[i + 1] = \"1000\";\n            number /=\
    \ 1000;\n        }\n        else if (number % 10000 == i)\n        {\n       \
    \     words[i + 1] = \"10000\";\n            number /= 10000;\n        }\n   \
    \     else if (number % 100000 == i)\n        {\n            words[i + 1] = \"\
    100000\";\n            number /= 100000;\n        }\n        else if (number %\
    \ 1000000 == i)\n        {\n            words[i + 1] = \"1000000\";\n        \
    \    number /= 1000000;\n        }\n        else if (number % 10000000 == i)\n\
    \        {\n            words[i + 1] = \"10000000\";\n            number /= 10000000;\n\
    \        }\n        else if (number % 100000000 == i)\n        {\n           \
    \ words[i + 1] = \"100000000\";\n            number /= 100000000;\n        }\n\
    \        else if (number % 1000000000 == i)\n        {\n            words[i +\
    \ 1] = \"1000000000\";\n            number /= 1000000000;\n        }\n       \
    \ else if (number % 10000000000 == i)\n        {\n            words[i + 1] = \"\
    10000000000\";\n            number /= 10000000000;\n        }\n        else if\
    \ (number % 100000000000 == i)\n        {\n            words[i + 1] = \"100000000000\"\
    ;\n            number /= 100000000000;\n        }\n        else if (number % 1000000000000\
    \ == i)\n        {\n            words[i + 1] = \"1000000000000\";\n          \
    \  number /= 1000000000000;\n        }\n        else if (number % 10000000000000\
    \ == i)\n        {\n            words[i", "  $result = array();\n  foreach ($arr\
    \ as $n) {\n    $result[] = $n < 1 ? 'One' : $n < 2 ? 'Two' : $n < 3 ? 'Three'\
    \ : $n < 4 ? 'Four' : $n < 5 ? 'Five' : $n < 6 ? 'Six' : $n < 7 ? 'Seven' : $n\
    \ < 8 ? 'Eight' : $n < 9 ? 'Nine' : $n;\n  }\n  return array_reverse($result);\n\
    }\n", "  if (empty($arr))\n    return array();\n  $result = array();\n  $lengths\
    \ = array_count_values($arr);\n  if (array_key_exists('1', $lengths))\n    $result['One']\
    \ = $lengths['1'];\n  if (array_key_exists('0', $lengths))\n    $result['Zero']\
    \ = $lengths['0'];\n  if (array_key_exists('-1', $lengths))\n    $result['MinusOne']\
    \ = $lengths['-1'];\n  foreach ($lengths as $num => $nums) {\n    if ($num >=\
    \ 1 && $num <= 9) {\n      foreach ($nums as $i => $count) {\n        $result[$num][$i]\
    \ = ($count > 1 ? ' (' . get($count, $i) . ') ' : '');\n      }\n    }\n  }\n\
    \  return $result;\n}\n", "  if (empty($arr)) {\n    return array();\n  }\n  $arr\
    \ = array_map(\"intval\", $arr);\n  if (array_sum($arr) <= 0) {\n    return array();\n\
    \  }\n  $arr = array_slice($arr, 0, 9 + 1);\n  array_reverse($arr);\n  return\
    \ array_map(function ($item, $i) {\n    // Get the name from our array instead\
    \ of hard-coding it.\n    $name = array_key_exists($i, $names) ? $names[$i] :\
    \ \"One\";\n    return str_repeat(\"X\", $item + 1) * $name;\n  }, $arr);\n}\n\
    \n$arr = array();\n$arr[] = by_length(array(1, 4, 6, 2, 5, 7, 3));\n$arr[] = by_length(array(6,\
    \ 2, 7, 3, 10, 2, 8));\n$arr[] = by_length(array(6, 3, 10, 7, 12, 2, 8));\n$arr[]\
    \ = by_length(array(9, 2, 7, 3, 10, 1, 8));\n$arr[] = by_length(array(10, 2, 8,\
    \ 7, 12, 1, 9));\n$arr[] = by_length(array(7, 3, 10, 8, 12, 1, 9));\n$arr[] =\
    \ by_length(array(9, 3, 10, 7, 12, 1, 8));\n$arr[] = by_length(array(9, 4, 11,\
    \ 6, 12, 3, 10));\n$arr[] = by_length(array(10, 7, 11, 12, 6, 3, 10));\n$arr[]\
    \ = by_length(array(10, 8, 12, 6, 12, 3, 9));\n$arr[] = by_length(array(8, 11,\
    \ 12, 7, 12, 3, 9));\n$arr[] = by_length(array(10, 7, 11, 12, 6, 4, 11));\n$arr[]\
    \ = by_length(array(10, 8, 12, 6, 12, 4, 9));\n$arr[] = by_length(array(9, 10,\
    \ 11, 12, 7, 4, 11));\n$arr[] = by_length(array(10, 11, 12, 7, 12, 4, 9));\n$arr[]\
    \ = by_length(array(10, 12, 6, 11, 7, 4, 9));\n$arr[] = by_length(array(10, 11,\
    \ 12, 7, 12, 4, 8));\n$arr[] = by_length(array(10, 12, 6, 11, 7, 4, 8));\n$arr[]\
    \ = by_length(array(10, 12, 6, 11, 7, 4, 7));\n$arr[] = by_length(array(10, 12,\
    \ 6, 11, 7, 4, 7));\n$arr[] = by_length(array(9, 10, 11, 12, 7, 5, 11));\n$arr[]\
    \ = by_length(array(10, 12, 7, 11, 7, 5, 11));\n$arr[] = by_length(array(10, 12,\
    \ 7, 11, 7, 5, 10));\n$arr[] = by_length(array(10, 12, 7, 11, 7, 5, 10));\n$arr[]\
    \ = by_", "    if (empty($arr)) return array();\n    $ret = array();\n    $last\
    \ = array_shift($arr);\n    while (!empty($arr)) {\n        $val = array_shift($arr);\n\
    \        $ret[] = $names[$val];\n    }\n    return implode('', $ret);\n}\n", " \
    \   if (!$arr) return array();\n    $result = [];\n    foreach ($arr as $item)\
    \ {\n        if ($item < 1 || $item > 9) continue;\n        $name = strval($item);\n\
    \        if ($item > 1) $name .= \" \" . self::$_names[$item - 1];\n        $result[]\
    \ = $name;\n    }\n    return $result;\n}\n", "  foreach ($arr as $key => $val)\
    \ {\n    if ($key != 0 && $val > 1 && $val < 9) {\n      $result[] = array_key_exists($val,\
    \ $names) ? $names[$val] : \"$val\";\n    }\n  }\n  sort($result);\n  foreach\
    \ ($result as $key => $val) {\n    $result[$key] = str_replace(array(\"0\", \"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"), array(\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ), $val);\n  }\n  return $result;\n}\n", "  $len = count($arr);\n  if ($len ==\
    \ 0) {\n    return array();\n  }\n  foreach ($arr as $key => $value) {\n    if\
    \ (!is_integer($value) || $value < 1 || $value > 9) {\n      unset($arr[$key]);\n\
    \    }\n  }\n  arsort($arr);\n  $result = array();\n  foreach ($arr as $key =>\
    \ $value) {\n    $result[] = strtoupper($value);\n  }\n  return $result;\n}\n",
  "  if (empty($arr)) {\n    return array();\n  }\n  ksort($arr);\n  $new_arr = array();\n\
    \  foreach ($arr as $i => $val) {\n    if (!is_numeric($val)) {\n      $val =\
    \ $arr[$i];\n    }\n    if ($val < 1 || $val > 9) {\n      continue;\n    }\n\
    \    $new_arr[$val] = $names[$val];\n  }\n  return $new_arr;\n}\n$names = array(\n\
    \  '0' => 'Zero',\n  '1' => 'One',\n  '2' => 'Two',\n  '3' => 'Three',\n  '4'\
    \ => 'Four',\n  '5' => 'Five',\n  '6' => 'Six',\n  '7' => 'Seven',\n  '8' => 'Eight',\n\
    \  '9' => 'Nine',\n);\n$names = array_combine($names, $names);", "  $result =\
    \ array();\n  if (count($arr) == 0) return $result;\n  $sorted_arr = array_sort($arr);\n\
    \  $result = array_reduce($sorted_arr, 'array_merge', array());\n  $result = array_map(function($n)\
    \ { return \"Nine\" == $n ? \"Nine\" : $n; }, $result);\n  $result = array_reverse(array_map(function($n)\
    \ { return \"One\" == $n ? \"One\" : $n; }, $result));\n  $result = array_combine($result,\
    \ $result);\n  return $result;\n}\n", "    if (!is_array($arr)) {\n        return\
    \ array();\n    }\n    $len = count($arr);\n    if ($len <= 1) {\n        return\
    \ $arr;\n    }\n\n    $min = reset($arr);\n    $max = end($arr);\n    if ($min\
    \ === $max) {\n        return $arr;\n    }\n\n    sort($arr);\n    $reversed =\
    \ array_reverse($arr);\n    foreach ($reversed as $i => $v) {\n        $reversed[$i]\
    \ = $names[$v];\n    }\n    return $reversed;\n}\n", "  $len = sizeof($arr);\n\
    \  if ($len > 0) {\n    $first = $arr[0];\n    $last = array_pop($arr);\n    $arr\
    \ = $arr;\n    sort($arr);\n    if ($first > 1 && $last <= 9) {\n      $arr[1]\
    \ = array_search($first, $arr);\n      $arr[2] = array_search($last, $arr);\n\
    \    }\n    else {\n      $arr = array_slice($arr, 0, 2);\n    }\n    foreach\
    \ ($arr as $key => $value) {\n      $arr[$key] = $name[$value];\n    }\n  }\n\
    \  return $arr;\n}\n", "  if (empty($arr)) {\n    return array();\n  }\n  $lengths\
    \ = array_count_values($arr);\n  $keys = array_keys($lengths);\n  arsort($lengths);\n\
    \  foreach ($lengths as $length => $count) {\n    foreach ($keys as $key) {\n\
    \      if ($key <= $length) {\n        $arr[$key] = $lengths[$length][$key];\n\
    \      }\n    }\n  }\n  return $arr;\n}\n</code>\nThen you can call it like this:\n\
    <code>\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\necho join(', ', by_length($arr));\n\
    </code>\nOutput:\n<code>\nEight, Five, Four, Three, Two, Two, One, One\n</code>\n\
    Demo.\n<|/ a dscore=1 |>\n<| c |>\nThank you, but this does not work if the array\
    \ is `array(2, 1, 1, 4, 5, 8, 2, 3, 4, 3)`\n<|/ c |>\n<| c |>\n: Good catch. I\
    \ fixed it, and also added a demo that shows how to make it work for multiple\
    \ numbers in a row.\n<|/ c |>\n<| a tags=php |>\nThe question and answers are\
    \ old, and many things have changed.\nThe best answer is  from David Harrison.\n\
    <code>\n<?php\n", "  foreach ($arr as $key => $val) {\n    if ($val >= 1 && $val\
    \ <= 9) {\n      $arr[$key] = array(\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    }\n  }\n  return $arr;\n\
    }", "  $result = array();\n  $ones = array(\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n  foreach($arr as $key\
    \ => $value) {\n    if($value >= 1 && $value <= 9) {\n      $result = array_merge($result,\
    \ array_slice($ones, $value - 1, count($ones) - $value, true));\n    }\n  }\n\
    \  return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>", "  if (count($arr) == 0)\n    return array();\n  foreach ($arr\
    \ as $k => $v) {\n    if ($v >= 1 && $v <= 9)\n      $arr[$k] = $v == 1 ? $arr[$k\
    \ - 1] . ' ' . $arr[$k - 1] : 'One ' . $v;\n  }\n  $arr = array_reverse($arr);\n\
    \  $out = array();\n  foreach ($arr as $k => $v) {\n    if ($v >= 1 && $v <= 9)\n\
    \      $out[] = $v . ' ' . $v == 1 ? $v : $v == 9 ? 'Nine' : $v == 8 ? 'Eight'\
    \ : $v == 6 ? 'Six' : $v == 5 ? 'Five' : $v == 4 ? 'Four' : $v == 3 ? 'Three'\
    \ : $v == 2 ? 'Two' : $v == 1 ? 'One' : '';\n  }\n  return $out;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\nI recently needed something very similar. I've got\
    \ my own implementation but it feels very hacky.\n<code>\n<?php", "  $array =\
    \ array();\n  foreach ($arr as $number) {\n    if ($number > -1 && $number < 9)\
    \ {\n      $array[] = $numbers[$number];\n    }\n  }\n\n  return $array;\n}\n",
  "  if (!$arr) return array();\n\n  $len = count($arr);\n  $min = min($len);\n  if\
    \ ($len <= 10) return $arr;\n  $max = max($len);\n  $one = array('One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine');\n  $two = array('Ten',\
    \ 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen',\n        \
    \       'Seventeen', 'Eighteen', 'Nineteen');\n  $three = array('Twenty', 'Thirty',\
    \ 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety');\n  return array_map(function($v)\
    \ use ($one, $two, $three) {\n    if ($v < $min) return $one[$v];\n    if ($v\
    \ > $max) return $three[$v - $max];\n    return $two[$v - $min];\n  }, $arr);\n\
    }\n\n", "  return !empty($arr) ? array_reverse($arr, true) : array();\n}\n", " \
    \ if (!$arr) return array();\n\n  $lens = array();\n  foreach ($arr as $key =>\
    \ $num) {\n    if (!is_numeric($num)) continue;\n    $lens[] = $num;\n  }\n\n\
    \  // Sort by length in descending order\n  array_multisort($lens, SORT_DESC,\
    \ $arr);\n\n  // Reverse the array\n  return array_reverse($arr);\n}\n", "  $lengths\
    \ = array_count_values($arr);\n  $keys = array_keys($lengths);\n  array_multisort(array_flip($lengths),\
    \ $arr);\n  return array_map(function($num) { return $keys[$num - 1]; }, $arr);\n\
    }\n", "  $length = count($arr);\n  if ($length == 0) return array();\n  $start\
    \ = min(array_keys($arr));\n  $end = max(array_keys($arr));\n  for ($i = $start\
    \ - 1; $i >= $end; $i--) {\n    $arr[$i + 9] = $arr[$i];\n    unset($arr[$i]);\n\
    \  }\n  foreach ($arr as $num) {\n    if ($num >= 1 && $num <= 9) {\n      $arr[$num]\
    \ = \"$num \" . by_length(range(10, $num, -1));\n    }\n  }\n  return $arr;\n\
    }\n", "  if (empty($arr)) {\n    return array();\n  }\n  $sorted = array_unique($arr);\n\
    \  $reverse_sorted = array_reverse($sorted);\n  $out = array();\n  foreach ($reverse_sorted\
    \ as $val) {\n    $out[] = name_by_length($val);\n  }\n  return $out;\n}\n", " \
    \ foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n\
    \      if ($value < 10) {\n        $arr[$key] = '0' . $value;\n      }\n     \
    \ $arr[$key] = $value . 'th';\n    } else {\n      unset($arr[$key]);\n    }\n\
    \  }\n  return $arr;\n}", "  $lengths = array();\n  foreach ($arr as $value) {\n\
    \    $lengths[] = strlen($value);\n  }\n  array_multisort($lengths, SORT_ASC,\
    \ $arr);\n  $result = [];\n  for ($i = 0; $i < count($arr); $i++) {\n    $result[]\
    \ = isset($lengths[$i]) ? $names[$lengths[$i]] : \"Other\";\n  }\n  return $result;\n\
    }\n", "  if (!$arr || count($arr) == 0) {\n    return array();\n  }\n  sort($arr);\n\
    \  foreach ($arr as &$number) {\n    if ($number == 0) {\n      continue;\n  \
    \  }\n    $number = 9 - $number;\n  }\n  return array_reverse($arr);\n}\n", " \
    \ return array_filter(\n    $arr,\n    function ($el) {\n      return $el >= 1\
    \ && $el <= 9;\n    },\n    ARRAY_FILTER_USE_BOTH\n  );\n}", "    $names = array(\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\");\n    if ($arr) {\n        $arr = array_map(function ($item) {\n \
    \           if ($item < 1) {\n                return '';\n            }\n    \
    \        return $names[$item];\n        }, $arr);\n        array_walk($arr, function\
    \ (&$item, $key) {\n            $item = rtrim($item, '0');\n        });\n    }\n\
    \    return $arr;\n}\n</code>\n<|/ a tags=arrays,php,sorting |>\n<| c |>\nYes\
    \ but you wrote this just to find the smallest number in the array. I need to\
    \ find the smallest number in the array between 1 and 9 inclusive\n<|/ c |>\n\
    <| c |>\nI updated my answer to show how to do that. I also modified the algorithm\
    \ to sort the numbers in a descending order - so now the highest number will be\
    \ at the start of the array.\n<|/ c |>\n<| c |>\nI do not want to sort the array.\
    \ I want to find the smallest number in the array\n<|/ c |>\n<| a dscore=2 tags=arrays,php,sorting\
    \ |>\nYou can easily do this with a sort function in PHP using uasort with a custom\
    \ comparator function. You can then just pick up the first item:\n<code>", " \
    \ return array_map(function($value) {\n    // If it is between 1 and 9, use \"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", or \"Eight\"\
    \n    // Otherwise, use \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", or \"Nine\"\n    return $value >= 1 && $value <= 9 ? \"One\" :\n\
    \           $value >= 10 && $value <= 19 ? \"Two\" :\n           $value >= 20\
    \ && $value <= 29 ? \"Three\" :\n           $value >= 30 && $value <= 39 ? \"\
    Four\" :\n           $value >= 40 && $value <= 49 ? \"Five\" :\n           $value\
    \ >= 50 && $value <= 59 ? \"Six\" :\n           $value >= 60 && $value <= 69 ?\
    \ \"Seven\" :\n           $value >= 70 && $value <= 79 ? \"Eight\" :\n       \
    \    \"Nine\";\n  }, $arr);\n}\n", "    if (empty($arr)) {\n        return array();\n\
    \    }\n    $a = array();\n    foreach ($arr as $i => $j) {\n        if ($j <\
    \ 1) {\n            continue;\n        }\n        $x = $arr[$i];\n        if ($x\
    \ < 1 || $x >= 9) {\n            continue;\n        }\n        for ($n = count($a);\
    \ $n > $i; $n--) {\n            if ($a[$n] > $x) {\n                $a[$n + 1]\
    \ = $a[$n];\n                break;\n            }\n        }\n        $a[$i +\
    \ 1] = $x;\n    }\n    return $a;\n}\n</code>\n<|/ a tags=php,string,arrays,sorting\
    \ |>\n<| c |>\nI like the idea of using a loop, but isn't it more efficient to\
    \ just convert it to an array using [`array_values()`](http://php.net/array_values)?\n\
    <|/ c |>\n<| a |>\nIf you don't want to use array_values() you can do the following.\n\
    <code>\n<?php", "  global $int_names;\n  $out = array();\n  if (empty($arr)) {\n\
    \    return $out;\n  }\n  $min = min($arr);\n  $max = max($arr);\n  $nine = ($min\
    \ == $max) ? 1 : 0;\n  foreach ($arr as $item) {\n    if ($item == $min) {\n \
    \     $out[] = $int_names[0];\n    } else if ($item == $max) {\n      $out[] =\
    \ $int_names[$nine];\n    } else {\n      $out[] = $int_names[floor($item / 10)];\n\
    \      $out[] = $int_names[$item % 10];\n    }\n  }\n  return $out;\n}", "  return\
    \ array_map(function ($n) {\n    if (is_int($n)) {\n      return str_pad((string)$n,\
    \ 2, \"0\", STR_PAD_LEFT);\n    } else {\n      return str_pad($n, 3, \"0\", STR_PAD_LEFT);\n\
    \    }\n  }, sort($arr));\n}\n", "  if (!empty($arr)) {\n    krsort($arr);\n \
    \   foreach ($arr as $v) {\n      $arr[$v] = 'One';\n    }\n    ksort($arr);\n\
    \    $arr = array_reverse($arr);\n    foreach ($arr as $v) {\n      $arr[$v] =\
    \ 'One';\n    }\n  }\n  return $arr;\n}\n", "    $len = count($arr);\n    if (!$len)\
    \ {\n        return array();\n    }\n    if ($len < 2) {\n        return $arr;\n\
    \    }\n    $sorted_arr = $arr;\n    sort($sorted_arr);\n    foreach ($arr as\
    \ $i => $item) {\n        $arr[$i] = array_search($item, $sorted_arr);\n    }\n\
    \    array_reverse($arr);\n    $digits = array(\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    foreach ($arr\
    \ as $i => $item) {\n        $arr[$i] = $digits[$item];\n    }\n    return $arr;\n\
    }\n\n/**\n * Given a number, return a string containing the number's digits.\n\
    \ * For example:\n * >>> as_digits(123)\n * \"123\"\n * >>> as_digits(0)\n * \"\
    0\"\n * >>> as_digits(-3)\n * \"-3\"\n * >>> as_digits(10123)\n * \"0123\"\n *\
    \ >>> as_digits(12345)\n * \"12345\"\n */", "  if (!$arr || count($arr) < 2) return\
    \ $arr;\n  // Convert the array to a set of unique numbers between 1 and 9 inclusive\
    \ (the set)\n  // and then sort it, starting with 1. Then, use array_slice to\
    \ get every number that\n  // is in the given array. Finally use array_map to\
    \ reverse the order of the set\n  // and array_map again to convert the numbers\
    \ to their string equivalents.\n  $set = range(1, count($arr) - 1);\n  sort($set);\n\
    \  $arr = array_slice($arr, 0, -1);\n  return array_map(function($x) { return\
    \ array_pop($set); }, array_map(function($x) { return sprintf('%s', $x); }, $arr));\n\
    }\n", "  return array_map(function($n) {\n    return $n > 0 && $n < 9 ? $names[$n]\
    \ : $n;\n  }, $arr);\n}\n", "  // If there's nothing to do, return an empty array:\n\
    \  if (!$arr || !count($arr)) {\n    return array();\n  }\n\n  $len = count($arr);\n\
    \  // If it's only one element, return it as-is:\n  if ($len === 1) {\n    return\
    \ $arr;\n  }\n\n  // If the first element isn't 1, return the first element unmodified:\n\
    \  if ($arr[0] !== 1) {\n    return $arr;\n  }\n\n  $result = array();\n  for\
    \ ($i = 1; $i < $len; $i++) {\n    // If the next element is bigger than the current\
    \ one, push it on the end:\n    if ($arr[$i] > $arr[($i - 1)]) {\n      for ($j\
    \ = 0; $j < $i - 1; $j++) {\n        $result[] = $arr[$j];\n      }\n      array_push($result,\
    \ $arr[$i - 1]);\n    }\n  }\n\n  return $result;\n}\n</code>\n<|/ a tags=arrays,sorting,php\
    \ |>\n<| c |>\nYour example would return `array(2, 1, 1, 4, 5, 8, 2, 3)` rather\
    \ than `array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")`\n<|/ c |>\n<| a tags=arrays,sorting,php |>\n<code>\n<?php\n", "  \
    \  if (empty($arr)) {\n        return array();\n    }\n    if (is_string($arr))\
    \ {\n        return array($arr);\n    }\n    // convert string elements to integers\
    \ and sort them.\n    $a = array_map('intval', array_filter(array_map('intval',\
    \ $arr)));\n    // if the array is empty return an empty array\n    if (empty($a))\
    \ {\n        return array();\n    }\n    // reverse the array\n    $a = array_reverse($a);\n\
    \    // if the array is empty return an empty array\n    if (empty($a)) {\n  \
    \      return array();\n    }\n    // convert array elements to strings and replace\
    \ each number by its corresponding name.\n    return array_map(function($val)\
    \ {\n        return str_pad(array_search($val, $a) + 1, $val, \"0\", STR_PAD_LEFT);\n\
    \    }, array_filter(array_map('intval', $a)));\n}\n\n/**\n * Returns the number\
    \ of elements in the array that match a condition. False for empty arrays.\n *\
    \ @param  array $arr\n * @param  callable $f\n * @return int|bool\n */", "   \
    \ sort($arr);\n    if (sizeof($arr) == 0) {\n        return array();\n    }\n\
    \    $reversed_arr = array_reverse($arr);\n    $result = array();\n    foreach\
    \ ($reversed_arr as $key => $value) {\n        if ($value < 1) {\n           \
    \ break;\n        }\n        $number = ($value * 10) + 1;\n        $result[$number]\
    \ = $name;\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php dscore=2 |>\n\
    <| a tags=php |>\n<code>\n<?php\n\n/**\n * Sort the numbers in ascending order\n\
    \ */", "  $sorted_arr = array();\n  foreach ($arr as $num) {\n    $sorted_arr[]\
    \ = $num;\n  }\n  if (count($sorted_arr) < 1) {\n    return array();\n  }\n  sort($sorted_arr);\n\
    \  $len = strlen($arr[0]);\n  for ($i = 1; $i < $len; $i++) {\n    $sorted_arr[$i]\
    \ = str_pad($sorted_arr[$i], $len, \"0\", STR_PAD_LEFT);\n  }\n  return $sorted_arr;\n\
    }\n", "  if (!count($arr)) return array();\n  $lengths = array_count_values($arr);\n\
    \  krsort($lengths, SORT_NUMERIC);\n  $sorted = array();\n  foreach ($lengths\
    \ as $num => $len) {\n    $sorted[$num] = str_replace(array_keys($lengths), array_values($lengths),\
    \ $num);\n  }\n  return $sorted;\n}\n\n/**\n * Reformat a given number into an\
    \ ordinal string that always reads \"1st\", \"2nd\", \"3rd\", ...\n * for ordinary\
    \ numbers, like \"1\", \"22\", \"33\", etc. For numbers that aren't ordinary,\n\
    \ * like \"0\", \"9\", or \"24\", just return the number itself.\n */", "  foreach\
    \ ($arr as $key => $val) {\n    if (is_int($val) && $val > 0 && $val < 10) {\n\
    \      $arr[$key] = $GLOBALS['_' . strtoupper($val) . '_TEXT'];\n    }\n  }\n\
    \  sort($arr);\n  $new = array();\n  for ($i = 0; $i < count($arr); ++$i) {\n\
    \    $new[] = str_replace($arr[$i], '', $GLOBALS['_' . strtoupper($i + 1) . '_TEXT']);\n\
    \  }\n  return $new;\n}", "  usort($arr, \"array_number\");\n  usort($arr, function($a,\
    \ $b) {\n    return strnatcmp($a, $b);\n  });\n  $names = array(\n    \"\",\n\
    \    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"\n  );\n  return array_map(function($item) {\n    return $names[$item];\n\
    \  }, $arr);\n}\n", "  return array_merge(array_reverse(array_slice($arr, 0, 9)),\
    \ array_slice($arr, 9));\n}\n</code>\n<|/ a |>\n<| c |>\nThis does not give the\
    \ output asked for.\n<|/ c |>\n<| a |>\n<code>\n<?php\n$array = array(2,1,2,4,5,8,2,3);\n\
    $array = array_reverse($array);\nforeach($array as $key => $value){\n  if($value\
    \ == 1){\n    $array[$key] = 'One';\n  }\n  else if($value == 2){\n    $array[$key]\
    \ = 'Two';\n  }\n  else if($value == 3){\n    $array[$key] = 'Three';\n  }\n \
    \ else if($value == 4){\n    $array[$key] = 'Four';\n  }\n  else if($value ==\
    \ 5){\n    $array[$key] = 'Five';\n  }\n  else if($value == 6){\n    $array[$key]\
    \ = 'Six';\n  }\n  else if($value == 7){\n    $array[$key] = 'Seven';\n  }\n \
    \ else if($value == 8){\n    $array[$key] = 'Eight';\n  }\n  else if($value ==\
    \ 9){\n    $array[$key] = 'Nine';\n  }\n  else if($value == 0){\n    $array[$key]\
    \ = 'Zero';\n  }\n}\nprint_r($array);", "  $len = count($arr);\n  if (!$len) {\n\
    \    return array();\n  }\n\n  $new_arr = array();\n  $digits = range(1, 9);\n\
    \  foreach ($digits as $digit) {\n    $digit = abs($digit);\n    if ($len < 9)\
    \ {\n      $new_arr[$digit] = $arr[$digit];\n    }\n  }\n\n  ksort($new_arr);\n\
    \n  foreach ($digits as $digit) {\n    $new_arr[$digit] = \"One\";\n  }\n\n  ksort($new_arr);\n\
    \  foreach ($new_arr as &$n) {\n    $n = str_pad($n, 3, \" \", STR_PAD_LEFT);\n\
    \  }\n  return $new_arr;\n}\n</code>\n<|/ a |>\n<| c |>\nWorks perfectly on PHP\
    \ 7 but not on PHP 5.6. http://sandbox.onlinephpfunctions.com/code/7f0b883cf69cef49cfcae44fde8fe09a59872b9f\n\
    <|/ c |>\n<| c |>\nYes, I missed this part: `If the array is empty, return an\
    \ empty array:\n>>> by_length(array())\narray()\nIf the array has any strange\
    \ number ignore it:\n>>> by_length(array(1, -1, 55))\narray(\"One\")`\n<|/ c |>\n\
    <| c |>\nThis code does not work on PHP 5.5! It returns this error: Fatal error:\
    \ Unsupported operand types in C:\\xampp\\htdocs\\test.php on line 12\n<|/ c |>\n\
    <| c |>\nThe code works perfectly on PHP 5.6. [Demo](http://sandbox.onlinephpfunctions.com/code/7f0b883cf69cef49cfcae44fde8fe09a59872b9f)\n\
    <|/ c |>\n<| c |>\nThis code does not work on PHP 7.3! It returns this error:\
    \ Fatal error: Uncaught TypeError: Argument 1 passed to by_length() must be of\
    \ the type array, null given, called in C:\\xampp\\htdocs\\test.php on line 11\
    \ and defined in C:\\xampp\\htdocs\\test.php:11 Stack trace: #0 C:\\xampp\\htdocs\\\
    test.php(11): by_length(NULL) #1 {main} thrown in C:\\xampp\\htdocs\\test.php\
    \ on line 11\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php", "  $result = array();\n\
    \  if (count($arr) == 0) {\n    return $result;\n  }\n\n  $max_len = max($arr);\n\
    \  $min_len = min($arr);\n\n  foreach ($arr as $i => $num) {\n    if ($max_len\
    \ - $i < $min_len - $i) {\n      $min_len = $i;\n    }\n  }\n  if ($min_len <\
    \ 1) {\n    return $result;\n  }\n\n  $ones = array('One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine');\n  $result = array_merge(\n    array_slice($ones,\
    \ 0, $min_len),\n    array_slice($ones, $min_len)\n  );\n  $temp = array_reverse($arr);\n\
    \  foreach ($temp as $key => $val) {\n    $result[$key] = $ones[$val];\n  }\n\
    \  return $result;\n}\n", "  if (empty($arr)) {\n    return array();\n  }\n  return\
    \ array_unique(array_map('intval', array_chunk($arr, 2)));\n}\n", "  $keys = array_reverse(array_keys($arr));\n\
    \  if (count($keys)) {\n    return array_map(function ($index) use ($arr, $keys)\
    \ {\n      return $arr[$keys[$index]];\n    }, array_flip($keys));\n  }\n  return\
    \ array();\n}\n", "  if (empty($arr)) {\n    return array();\n  }\n  sort($arr);\n\
    \  $min = array_shift($arr);\n  if ($min) {\n    return array(\n      1 => \"\
    One\",\n      2 => \"Two\",\n      3 => \"Three\",\n      4 => \"Four\",\n   \
    \   5 => \"Five\",\n      6 => \"Six\",\n      7 => \"Seven\",\n      8 => \"\
    Eight\",\n      9 => \"Nine\",\n    );\n  }\n  return array();\n}\n\n/**\n * Given\
    \ an array of numbers, group them into subarrays of the numbers in increasing\
    \ order.\n * Each subarray must contain the numbers between 0 and 999 (inclusive).\n\
    \ *\n * For example, given the following input:\n * array(0, 2, 7, 8, 3, 8, 4,\
    \ 9, 10, 4)\n *\n * group_into_array(0) would return:\n * array(\n *   array(0,\
    \ 2, 7),\n *   array(3, 8, 3),\n *   array(8, 4, 9),\n *   array(10, 4),\n * )\n\
    \ *\n * group_into_array(1) would return:\n * array(\n *   array(2),\n *   array(7),\n\
    \ *   array(8),\n *   array(3),\n *   array(8),\n *   array(4),\n *   array(9),\n\
    \ *   array(10),\n * )\n *\n * group_into_array(2) would return:\n * array(\n\
    \ *   array(2, 7),\n *   array(3, 8),\n *   array(4, 9),\n *   array(10),\n *\
    \ )\n *\n * group_into_array(3) would return:\n * array(\n *   array(2),\n * \
    \  array(7, 8),\n *   array(3, 8),\n *   array(4),\n *   array(9, 10),\n * )\n\
    \ *\n * group_into_array(4) would return:\n * array(\n *   array(2),\n *   array(7,\
    \ 8, 3),\n *   array(8, 4),\n *   array(9),\n *   array(10),\n * )\n *\n * group_into_array(5)\
    \ would return:\n * array(\n *   array(2),\n *   array(7, 8, 3, 8),\n *   array(9),\n\
    \ *   array(10),\n * )\n *\n * group_into_array(6) would return:\n * array(\n\
    \ *   array(2),\n *   array(7, 8, 3, 8, 4),\n *   array(9),\n *   array(10),\n\
    \ * )\n *\n * group_into_array(7) would return:\n * array(\n *   array(2, 7),\n\
    \ *   array(3, 8),\n *   array(4, 9),\n *   array(10),\n * )\n *\n * group_into_array(8)\
    \ would return:\n * array(\n *   array(2),\n *   array(7, 8),\n *   array(3, 8),\n\
    \ *   array(", "    $sorted = array();\n    if (empty($arr)) {\n        return\
    \ array();\n    }\n    $length = count($arr);\n    // Make sure we have at least\
    \ two elements in the array:\n    if ($length < 2) {\n        return array();\n\
    \    }\n    $min = min($arr);\n    $max = max($arr);\n    // If they're all the\
    \ same, just return the array:\n    if ($min === $max) {\n        return $arr;\n\
    \    }\n    // Add all the integers up to and including the smallest one:\n  \
    \  for ($i = 1; $i <= $length; $i++) {\n        $sorted[$i] = $arr[($length -\
    \ $i)];\n    }\n    // Now go through all the integers in the sorted array:\n\
    \    for ($i = 0; $i < $length; $i++) {\n        // If the current integer is\
    \ less than the smallest integer, put it in the first position:\n        if ($sorted[$i]\
    \ < $min) {\n            $sorted[0] = $sorted[$i];\n            array_shift($sorted);\n\
    \            continue;\n        }\n        // If the current integer is greater\
    \ than the largest integer, put it in the last position:\n        if ($sorted[$i]\
    \ > $max) {\n            $sorted[$length - 1] = $sorted[$i];\n            array_pop($sorted);\n\
    \            continue;\n        }\n        // Otherwise, swap it with the smallest\
    \ integer in the sorted array:\n        $sorted[$i] = $sorted[0];\n        array_shift($sorted);\n\
    \    }\n    return $sorted;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<|\
    \ c |>\nI ran your function against the OP's example array and it outputs an empty\
    \ array. Perhaps you meant `$arr = [2, 1, 1, 4, 5, 8, 2, 3]`?\n<|/ c |>\n<| c\
    \ |>\nI tested it with `$arr = [2, 1, 1, 4, 5, 8, 2, 3]` and it worked fine. I\
    \ wonder what kind of array your array is in that doesn't work properly.\n<|/\
    \ c |>\n<| c |>\nIt's an array of strings. Sorry if that was unclear. Maybe I\
    \ should add some clarification to the question.\n<|/ c |>\n<| a dscore=0 |>\n\
    For those who need a custom sort order based on specific values, this answer may\
    \ be helpful.\nThe idea is to use a function that receives a numeric value and\
    \ returns a value that can be used as a sorting criteria.\nThis example compares\
    \ two values based on their distance from a target value:\n<code>", "  // If array\
    \ is empty or all elements are 0, return empty array\n  if (!$arr || count($arr)\
    \ == 0) {\n    return array();\n  }\n\n  // Return array of length 1, or array\
    \ of odd number\n  return is_array($arr) && count($arr) == 1 ? $arr : array_filter($arr,\
    \ function($i) {\n    // Return only odd numbers\n    return ($i % 2) === 1;\n\
    \  });\n}\n", "  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = 1;\n  $max = count($arr) - 1;\n  while ($min <= $max) {\n    $mid\
    \ = floor(($min + $max) / 2);\n    if ($mid > 0 && $arr[$mid] == $arr[$mid - 1])\
    \ {\n      $min = $mid + 1;\n    }\n    if ($mid < $len - 1 && $arr[$mid] == $arr[$mid\
    \ + 1]) {\n      $max = $mid - 1;\n    }\n    if ($min == $max) {\n      return\
    \ array();\n    }\n    if ($arr[$mid] < $arr[$min]) {\n      $min = $mid;\n  \
    \  } else {\n      $max = $mid;\n    }\n  }\n  $result = array();\n  for ($i =\
    \ $min; $i <= $max; $i++) {\n    $result[$i] = isset($arr[$i]) ? $arr[$i] : '';\n\
    \  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting dscore=3 |>\n\
    <| c |>\nThis should be the accepted answer. Easily modified to support any number\
    \ of digits in the number.\n<|/ c |>\n<| a dscore=2 |>\nSort it, then use array_reverse()\n\
    <code>\n<?php\n$input = array(2, 1, 1, 4, 5, 8, 2, 3);\nsort($input);\n$input\
    \ = array_reverse($input);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\n\
    +1 I always forget about `array_reverse`!\n<|/ c |>\n<| c |>\nThanks, I actually\
    \ found this before you submitted the answer. +1\n<|/ c |>\n<| a dscore=2 tags=php,arrays,sorting\
    \ |>\n<code>\n$array=array(\"Eight\",\"Five\",\"Four\",\"Three\",\"Two\",\"Two\"\
    ,\"One\",\"One\");\n\n$array=array_reverse($array);\nforeach($array as $key=>$value)\n\
    {\n $new[$key]=$value;\n}\n\n$array=array_unique($new);\nsort($array);\n\necho\
    \ '<pre>';\nprint_r($array);\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>\n<?php\n\
    $array = array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\");\n\narsort($array);\nforeach ($array as $key => $value) {\n  \
    \  $array[$key] = str_pad($value, ", "    if (count($arr) < 1) return array();\n\
    \    $arr = array_reverse($arr);\n    $arr = array_shift($arr);\n    return $arr\
    \ == 1 ? array(\"One\") : array_map(function ($n) use ($arr) {\n        return\
    \ $arr[$n - 1];\n    }, $arr);\n}", "  $result = [];\n  $length_array = array_map('strlen',\
    \ $arr);\n  asort($length_array);\n  foreach ($length_array as $k => $v) {\n \
    \   if ($v != 1 && $v != 9) {\n      unset($length_array[$k]);\n    } else {\n\
    \      $result[] = str_replace(range(1, 9), '', $v);\n    }\n  }\n  if (count($length_array)\
    \ > 0) {\n    $result[] = 'Other';\n  }\n  return $result;\n}\n", "  if (!empty($arr))\
    \ {\n    sort($arr);\n    $reverse = array();\n    $first = 1;\n    $last = count($arr)\
    \ - 1;\n    foreach ($arr as $k => $v) {\n      if ($v != $first) {\n        $reverse[]\
    \ = $first;\n        $first = $v;\n      }\n      if ($k != $last) {\n       \
    \ $reverse[] = $last;\n        $last = $k;\n      }\n    }\n    return array_reverse($reverse);\n\
    \  }\n  return array();\n}\n</code>\nAnd I used it in my code, it works well,\
    \ hope it helps anyone like me :D\n<code>\n<?php\n  $my_array = array();\n  $my_array['3']\
    \ = array('3' => 'Three', '4' => 'Four');\n  $my_array['5'] = array('5' => 'Five',\
    \ '6' => 'Six', '7' => 'Seven', '8' => 'Eight');\n  $my_array['9'] = array('9'\
    \ => 'Nine');\n  $my_array['2'] = array('2' => 'Two', '4' => 'Four', '6' => 'Six',\
    \ '8' => 'Eight', '10' => 'Ten');\n  $my_array['1'] = array('1' => 'One');\n \
    \ $my_array['0'] = array('0' => 'Zero');\n\n  echo \"<pre>\";\n  echo \"<table>\"\
    ;\n\n  foreach ($my_array as $key => $value) {\n    foreach ($value as $key1 =>\
    \ $value1) {\n      if ($value1 != 0) {\n        $arr[] = \"$value1\";\n     \
    \ }\n    }\n  }\n  $arr = by_length($arr);\n  foreach ($arr as $value2) {\n  \
    \  foreach ($my_array as $key3 => $value3) {\n      if ($value2 == $key3) {\n\
    \        $arr2[] = $key3;\n      }\n    }\n  }\n  foreach ($arr2 as $value2) {\n\
    \    foreach ($my_array as $key3 => $value3) {\n      if ($value2 == $key3) {\n\
    \        $value4 = $key3 . '<br/>';\n      }\n    }\n  }\n  foreach ($arr as $value2)\
    \ {\n    foreach ($my_array as $key3 => $value3) {\n      if ($value2 == $key3)\
    \ {\n        $value4 .= $key3 . '<br/>';\n      }\n    }\n  }\n  echo \"$value4\"\
    ;\n  echo \"</table>\";", "  if (empty($arr)) {\n    return array();\n  }\n\n\
    \  // get all possible combinations of 2 arrays, one shorter than the other\n\
    \  $combos = array();\n  $combos = array_merge($combos, array_chunk($arr, 2));\n\
    \  $combos = array_filter($combos);\n\n  // map the numbers\n  $numbers = array();\n\
    \  foreach ($combos as $combo) {\n    $numbers[] = array();\n    foreach ($combo\
    \ as $number) {\n      $numbers[$number][] = $number;\n    }\n  }\n\n  usort($numbers,\
    \ 'cmp');\n\n  $result = array();\n  foreach ($numbers as $i => $number) {\n \
    \   // find the first number that has at least 2 numbers\n    // that means it\
    \ is in the range\n    if (count($number) < 2) {\n      continue;\n    }\n\n \
    \   // get all the combinations that include this number\n    $result[] = $number[$i];\n\
    \n    // get the numbers that don't include this number\n    foreach (range(1,\
    \ 9) as $n) {\n      $diff = array_diff($number, array($n));\n      if (count($diff)\
    \ == 0) {\n        $result[] = $n;\n      }\n    }\n  }\n\n  return $result;\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays,algorithm,language-agnostic |>\n<| a\
    \ dscore=0 |>\n<code>\n$arr = array(1,2,3,4,5,6,7,8,9,10);\n$nums  = array(0,1,2,3,4,5,6,7,8,9,10);\n\
    \n$result = array();\nforeach($nums as $i => $num){\n  if($num > 0 && $num < 10){\n\
    \    if(isset($arr[$num])){\n      $result[] = $arr[$num];\n    }\n  }\n}\n",
  "  // Make sure we have an array:\n  if (!is_array($arr)) {\n    return array();\n\
    \  }\n\n  // Go through each integer:\n  $result = array();\n  foreach ($arr as\
    \ $value) {\n    if ($value >= 1 && $value <= 9) {\n      // Reverse the array:\n\
    \      array_reverse($arr);\n\n      // Add each digit to the result array:\n\
    \      foreach ($arr as $value) {\n        $result[] = pow($value, 10);\n    \
    \  }\n    }\n  }\n\n  // Return the resulting array:\n  return $result;\n}\n",
  "  $a = array();\n  for ($i = 0; $i < count($arr); $i++) {\n    if (is_numeric($arr[$i]))\
    \ {\n      $a[$i] = $arr[$i];\n    }\n  }\n  if (!count($a)) {\n    return array();\n\
    \  }\n  // Sort by length in reverse order\n  arsort($a, SORT_NUMERIC);\n\n  //\
    \ Reverse the array\n  rsort($a);\n\n  // Return the array in reverse order with\
    \ the numbers in order\n  $a = array_reverse($a, true);\n\n  // Convert each digit\
    \ into the corresponding name\n  $one = array(\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n  $b = array();\n\
    \  foreach ($a as $e) {\n    foreach ($one as $key => $value) {\n      if ($e\
    \ == $key) {\n        $b[] = $value;\n      }\n    }\n  }\n  return $b;\n}\n",
  "    if (!is_array($arr)) {\n        return array();\n    }\n\n    // Convert to\
    \ an array of one-character strings\n    $arr = array_map('chr', $arr);\n\n  \
    \  // Sort them in reverse order\n    $arr = array_reverse($arr);\n\n    // And\
    \ then map the sorted array to their corresponding values.\n    return array_map(function($value)\
    \ {\n        static $mapping = array();\n        if (isset($mapping[$value]))\
    \ {\n            return $mapping[$value];\n        }\n        $mapping[$value]\
    \ = chr(48 + $value);\n        return $mapping[$value];\n    }, $arr);\n}\n",
  "  if (empty($arr)) {\n    return array();\n  }\n\n  $result = array();\n  $length\
    \ = count($arr);\n  for ($i = 0; $i < $length; $i++) {\n    if ($arr[$i] <= 9)\
    \ {\n      $result[] = array($arr[$i], $arr[$i], $arr[$i], $arr[$i], $arr[$i],\
    \ $arr[$i], $arr[$i], $arr[$i]);\n    } else {\n      if ($i == 0) {\n       \
    \ $result[] = array($arr[$i]);\n      } else {\n        $result[] = array($arr[$i\
    \ - 1], array_pop($arr), $arr[$i]);\n      }\n    }\n  }\n  return $result;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks for your answer,. I was\
    \ wondering if it's possible for the result to contain all of the elements of\
    \ the array (sorted by length) instead of just the last two. I don't think I'm\
    \ explaining that clearly in my question. I've updated it now.\n<|/ c |>\n<| c\
    \ |>\nYes, I do appreciate your answer, it does what I need it to do. Thank you\
    \ very much! I really do appreciate the time you took to write that up!\n<|/ c\
    \ |>\n<| c |>\nOh, I see. Didn't consider that one (my bad). Glad I could help!\n\
    <|/ c |>\n<| c |>\nI edited the post to also include an explanation on how to\
    \ solve that problem (last two elements reversed).\n<|/ c |>\n<| c |>\nI added\
    \ a comment to the answer explaining why I prefer your solution.\n<|/ c |>\n<|\
    \ a tags=php,arrays |>\nHere's a solution that uses array_chunk() and array_map()\
    \ and array_reverse():\n<code>\n$array = array(1, 20, 30, 40, 50, 60, 70, 80,\
    \ 90);\n\n$chunks = array_chunk($array, 2);\n\n$reversed = array_map(function($chunk){\n\
    \    return array_reverse($chunk);\n}, $chunks);\n\n$array = $reversed + array_map(function($chunk){\n\
    \    return array_reverse($chunk);\n}, $array);\n\nprint_r($array);\n</code>\n\
    Output:\n<code>\nArray\n(\n    [0] => Array\n        (\n            [0] => 1\n\
    \            [1] => 20\n        )\n\n    [1] => Array\n        (\n           \
    \ [0] => 40\n            [1] => 50\n        )\n\n    [2] => Array\n        (\n\
    \            [0] => 80\n            [1] => 90\n        )\n\n    [3] => Array",
  "\t$length = count($arr);\n\tif ($length === 0) {\n\t\treturn array();\n\t}\n\n\t\
    $arr = array_reverse($arr);\n\n\t// Skip the \"One\" and \"Ten\" strings:\n\t\
    for ($i = 1; $i <= 9; $i++) {\n\t\tif (isset($arr[$i])) {\n\t\t\tunset($arr[$i]);\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\n\t// Now sort the rest of them:\n\tsort($arr);\n\n\
    \treturn array_map(function ($num) use ($length) {\n\t\treturn str_pad($num, $length,\
    \ static::$names[\"$num\"]);\n\t}, $arr);\n}\n\n/**\n * Returns a string for the\
    \ value of $number. Handles floats and integers.\n * Returns \"0\" if $number\
    \ is 0 or \"-inf\" if $number is negative.\n */", "    foreach ($arr as $v) {\n\
    \        if ($v > 9) {\n            $v -= 9;\n        }\n    }\n    array_multisort($arr,\
    \ SORT_DESC);\n    $retval = array();\n    foreach ($arr as $v) {\n        $retval[]\
    \ = sprintf(\"%s\", $v == 1 ? gettext(\"One\") : gettext(\"%s\"), $v);\n    }\n\
    \    return $retval;\n}\n", "  $len = count($arr);\n  $digits = range(1, 9);\n\
    \  $res = array();\n  foreach ($digits as $digit) {\n    $num = array_slice($arr,\
    \ 0, $len-1);\n    $num[] = $digit;\n    $num = array_reverse($num);\n    foreach\
    \ ($num as $num) {\n      $res[] = $names[$digit];\n    }\n  }\n  return $res;\n\
    }\n", "  if (!is_array($arr)) return array();\n  return $arr\n    // Convert $arr\
    \ to $pairs so that every two adjacent elements is a pair\n    ? array_chunk($arr,\
    \ 2)\n    // Return $arr if it is an array of two numbers\n    : (count($arr)\
    \ === 2 ? array($arr) : $arr);\n}\n", "  if (!$arr) {\n    return array();\n \
    \ }\n  $min_length = 0;\n  $max_length = count($arr);\n  for ($i = 0; $i < $max_length;\
    \ ++$i) {\n    if ($min_length < $arr[$i]) {\n      $min_length = $arr[$i];\n\
    \    }\n  }\n  for ($i = 0; $i < $min_length; ++$i) {\n    $arr[$i] = static::$ones[$i];\n\
    \  }\n  for ($i = $min_length; $i < $max_length; ++$i) {\n    $arr[$i] = static::$names[$i];\n\
    \  }\n  $rev = array_reverse($arr);\n  foreach ($rev as $i => $digit) {\n    $rev[$i]\
    \ = static::$names2[$digit];\n  }\n  return $rev;\n}\n", "  if (!count($arr))\
    \ { return array(); }\n  $result = [];\n  $length = array_reduce($arr, function($carry,\
    \ $value) {\n    return max($carry, $value);\n  }, 0);\n  foreach ($arr as $key\
    \ => $value) {\n    if ($value >= $length) { $result[] = $key; }\n  }\n  return\
    \ $result;\n}\n</code>\nAnd here's a quick test:\n<code>", "    return array_filter($arr,\
    \ function($n) {\n        return $n >= 1 && $n <= 9;\n    }) +\n           array_map(function($n)\
    \ {\n               return \"One\"[$n];\n           }, array_filter($arr, function($n)\
    \ {\n               return $n >= 1 && $n <= 9;\n           }));\n}\n", "  $arr\
    \ = $arr + array(0);\n  $min = min(count($arr) - 1, 10);\n  $max = max(count($arr)\
    \ - 1, 10);\n  for ($i = $min; $i <= $max; $i++) {\n    $arr[$i] = oneToNine($i);\n\
    \  }\n  for ($i = count($arr) - 1, $j = 0; $i > $min; $i--, $j++) {\n    if ($j\
    \ < count($arr) - 1) {\n      $arr[$i] = $arr[$j];\n    }\n  }\n  foreach ($arr\
    \ as &$item) {\n    $item = oneToNine($item);\n  }\n  return $arr;\n}\n", "  $result\
    \ = array();\n  if (empty($arr))\n    return $result;\n  if ($arr[0] <= 9)\n \
    \   return $arr;\n  for ($i = 0; $i < count($arr); $i++) {\n    // skip all strange\
    \ numbers becouse it is not array key\n    if ($arr[$i] <= 9)\n      continue;\n\
    \    $result[$i] = $names[$arr[$i]];\n  }\n  return $result;\n}", "  if (count($arr)\
    \ == 0) {\n    return array();\n  }\n  $result = [];\n  $prev = null;\n  foreach\
    \ ($arr as $v) {\n    if ($prev !== null && $v > $prev + 1) {\n      $result[]\
    \ = 'One';\n      $prev = null;\n    }\n    if ($prev !== null && $v < $prev -\
    \ 1) {\n      $result[] = 'Zero';\n      $prev = null;\n    }\n    if ($prev !==\
    \ null && $v != $prev) {\n      $result[] = chr($v + 1);\n      $prev = $v;\n\
    \    }\n  }\n  if (count($result) == 1) {\n    $result = $result[0];\n  }\n  return\
    \ $result;\n}\n</code>\n<|/ a dscore=3 |>\n<| a |>\nIf you just need this for\
    \ sorting numbers, you could just use php's usort function and use your own sorting\
    \ rules:\n<code>\nusort($arr, function($a, $b) {\n   $num1 = $a < 10 ? str_pad($a,\
    \ 2, '0', STR_PAD_LEFT) : $a;\n   $num2 = $a < 10 ? str_pad($b, 2, '0', STR_PAD_LEFT)\
    \ : $b;\n   return $num1 - $num2;\n});\n</code>\nFor your example, this gives\
    \ you\n<code>\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\nprint_r($arr);\n</code>\nOutputs:\n\
    <code>\nArray\n(\n    [0] => 2\n    [1] => 1\n    [2] => 1\n    [3] => 4\n   \
    \ [4] => 5\n    [5] => 8\n    [6] => 2\n    [7] => 3\n)\n</code>\n<|/ a dscore=1\
    \ tags=sorting,arrays,php |>\n<| a |>\n<code>", "  $arr = array_unique($arr);\n\
    \  if (count($arr) == 0)\n    return array();\n\n  $min = min($arr);\n  $max =\
    \ max($arr);\n  $len = count($arr);\n\n  $result = array();\n  for ($i = 0; $i\
    \ < $len; ++$i) {\n    if ($min <= $arr[$i] && $arr[$i] <= $max) {\n      $result[]\
    \ = sprintf('%2d', $arr[$i]);\n    }\n  }\n  if ($min == $max)\n    return $result;\n\
    \  sort($result);\n  for ($i = 0; $i < $len; ++$i) {\n    if ($arr[$i] == $min)\n\
    \      $result[$i] = sprintf('%2d', $min);\n  }\n  return $result;\n}", "  if\
    \ (count($arr) == 0)\n    return array();\n  sort($arr);\n  $reversed = array_reverse($arr);\n\
    \  $mapped = array_map(function($x) {\n    return array_key_exists($x, array('One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine')) ? $x : 'One';\n\
    \  }, $reversed);\n  return $mapped;\n}\n", "  if (empty($arr)) {\n    return\
    \ array();\n  }\n  sort($arr);\n  return array_reverse(array_map('strval', $arr));\n\
    }\n", "  // If the array is empty, return an empty array:\n  if (!$arr) return\
    \ array();\n\n  // If the array has any strange number ignore it:\n  if (count($arr)\
    \ !== count(array_filter($arr, 'is_numeric'))) return array();\n\n  $reversed_arr\
    \ = array_reverse(array_filter(array_reverse($arr), 'is_numeric'));\n  foreach\
    \ ($reversed_arr as $i => $val) $reversed_arr[$i] = $names[$i];\n\n  return $reversed_arr;\n\
    }\n$names = array(\n  'One',\n  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n\
    \  'Seven',\n  'Eight',\n  'Nine',\n);", "  if (empty($arr)) {\n    return array();\n\
    \  }\n\n  $array = array();\n\n  for ($i = 0, $length = count($arr); $i < $length;\
    \ $i++) {\n    $num = $arr[$i];\n\n    if ($num === 1 || $num === -1) {\n    \
    \  // Ignore numbers that are not between 1 and 9.\n      continue;\n    }\n\n\
    \    if ($num < 0 || $num > 9) {\n      // Ignore non-natural numbers.\n     \
    \ continue;\n    }\n\n    $array[] = $names[$num];\n  }\n\n  // Sort the array.\n\
    \  array_multisort($array, SORT_ASC, $arr);\n\n  return $array;\n}\n", "  $length\
    \ = count($arr);\n  if (!$length) {\n    return array();\n  }\n\n  $result = array();\n\
    \  $reversed_array = array_reverse($arr);\n  foreach ($reversed_array as $key\
    \ => $num) {\n    if ($num < 1) {\n      unset($reversed_array[$key]);\n     \
    \ continue;\n    }\n    $name = range(1, 9) [$num - 1];\n    $result[] = $name;\n\
    \  }\n  return $result;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis is the most\
    \ elegant answer of the whole community. Thanks\n<|/ c |>\n<| a |>\nYou can use:\n\
    <code>\n<?php", "  return array_map(\n    function ($num) {\n      if (!is_int($num)\
    \ || $num < 1 || $num > 9) {\n        return $num;\n      }\n\n      return str_pad(\n\
    \        strtolower(substr($name, 0, 1)).\n        sprintf(\"%02d\", $num),\n\
    \        2,\n        STR_PAD_RIGHT);\n    },\n    array_chunk($arr, 9));\n}\n\
    </code>\n<|/ a tags=sorting,php |>\n<| a dscore=2 |>\nAn elegant way is to build\
    \ an array mapping numbers to names, then implode it:\n<code>\n$numbers = array(2,\
    \ 3, 1, 5, 10, 8, 5);\n$names = array(\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n$num = array_combine($numbers,\
    \ $names);\necho implode('', $num);", "    if (empty($arr)) {\n        return\
    \ array();\n    }\n    if (is_array($arr[0])) {\n        $res = array();\n   \
    \     foreach ($arr as $a) {\n            $res = array_merge($res, by_length($a));\n\
    \        }\n        return $res;\n    }\n    $len = strlen($arr);\n    $arr =\
    \ array_unique($arr);\n    if ($len > 9) {\n        $result = array();\n     \
    \   foreach ($arr as $a) {\n            if ($a < 10) {\n                $result[]\
    \ = \"One\";\n            }\n            if ($a < 100) {\n                $result[]\
    \ = \"Two\";\n            }\n            if ($a < 1000) {\n                $result[]\
    \ = \"Three\";\n            }\n            if ($a < 10000) {\n               \
    \ $result[] = \"Four\";\n            }\n            if ($a < 100000) {\n     \
    \           $result[] = \"Five\";\n            }\n            if ($a < 1000000)\
    \ {\n                $result[] = \"Six\";\n            }\n            if ($a <\
    \ 10000000) {\n                $result[] = \"Seven\";\n            }\n       \
    \     if ($a < 100000000) {\n                $result[] = \"Eight\";\n        \
    \    }\n            if ($a < 1000000000) {\n                $result[] = \"Nine\"\
    ;\n            }\n            if ($a < 10000000000) {\n                $result[]\
    \ = \"Ten\";\n            }\n            if ($a < 100000000000) {\n          \
    \      $result[] = \"Eleven\";\n            }\n            if ($a < 1000000000000)\
    \ {\n                $result[] = \"Twelve\";\n            }\n            if ($a\
    \ < 10000000000000) {\n                $result[] = \"Thirteen\";\n           \
    \ }\n            if ($a < 100000000000000) {\n                $result[] = \"Fourteen\"\
    ;\n            }\n            if ($a < 1000000000000000) {\n                $result[]\
    \ = \"Fifteen\";\n            }\n            if ($a < 10000000000000000) {\n \
    \               $result[] = \"Sixteen\";\n            }\n            if ($a <\
    \ 100000000000000000) {\n                $result[] = \"Seventeen\";\n        \
    \    }\n            if ($a < 1000000000000000010) {\n                $result[]\
    \ = \"Eighteen\";\n            }\n            if ($a < 10000000000000000100) {\n\
    \                $result[] = \"Nineteen\";\n            }\n        }\n       \
    \ $arr = $result;\n        $len = strlen($arr);\n    }\n    if ($len > 0) {\n\
    \        return $arr;\n    }\n    return array();\n}", "    if (empty($arr)) return\
    \ array();\n    $out = array();\n    for ($i = 0; $i < count($arr); $i++) {\n\
    \        $out[] = array_search($arr[$i], range(1, 9));\n    }\n    array_reverse($out);\n\
    \    foreach ($out as &$item) {\n        $item = array_search($item, range(1,\
    \ 9));\n    }\n    return $out;\n}\n", "    $output = array();\n    if ( !empty($arr)\
    \ ) {\n        if ( in_array($arr[0], array(1,2,3,4,5,6,7,8,9)) ) {\n        \
    \    array_push($output, 'One');\n        }\n        if ( in_array($arr[0], array(0,1,2,3,4,5,6,7,8,9))\
    \ ) {\n            array_push($output, 'Two');\n        }\n        if ( in_array($arr[0],\
    \ array(0,1,2,3,4,5,6,7,8,9)) ) {\n            array_push($output, 'Three');\n\
    \        }\n        if ( in_array($arr[0], array(0,1,2,3,4,5,6,7,8,9)) ) {\n \
    \           array_push($output, 'Four');\n        }\n        if ( in_array($arr[0],\
    \ array(0,1,2,3,4,5,6,7,8,9)) ) {\n            array_push($output, 'Five');\n\
    \        }\n        if ( in_array($arr[0], array(0,1,2,3,4,5,6,7,8,9)) ) {\n \
    \           array_push($output, 'Six');\n        }\n        if ( in_array($arr[0],\
    \ array(0,1,2,3,4,5,6,7,8,9)) ) {\n            array_push($output, 'Seven');\n\
    \        }\n        if ( in_array($arr[0], array(0,1,2,3,4,5,6,7,8,9)) ) {\n \
    \           array_push($output, 'Eight');\n        }\n        if ( in_array($arr[0],\
    \ array(0,1,2,3,4,5,6,7,8,9)) ) {\n            array_push($output, 'Nine');\n\
    \        }\n        if ( in_array($arr[0], array(0,1,2,3,4,5,6,7,8,9)) ) {\n \
    \           array_push($output, 'Ten');\n        }\n        if ( in_array($arr[0],\
    \ array(0,1,2,3,4,5,6,7,8,9)) ) {\n            array_push($output, 'Eleven');\n\
    \        }\n        if ( in_array($arr[0], array(0,1,2,3,4,5,6,7,8,9)) ) {\n \
    \           array_push($output, 'Twelve');\n        }\n        if ( in_array($arr[0],\
    \ array(0,1,2,3,4,5,6,7,8,9)) ) {\n            array_push($output, 'Thirteen');\n\
    \        }\n        if ( in_array($arr[0], array(0,1,2,3,4,5,6,7,8,9)) ) {\n \
    \           array_push($output, 'Fourteen');\n        }\n        if ( in_array($arr[0],\
    \ array(0,1,2,3,4,5,6,7,8,9)) ) {\n            array_push($output, 'Fifteen');\n\
    \        }\n        if ( in_array($arr[0], array(0,1,2,3,4,5,6,7,8,9)) ) {\n \
    \           array_push($output, 'Sixteen');\n        }\n        if ( in_array($arr",
  "  if (!is_array($arr)) {\n    return array();\n  }\n\n  if (count($arr) == 0) {\n\
    \    return array();\n  }\n\n  foreach ($arr as $key => $value) {\n    if ($value\
    \ < 1 || $value > 9) {\n      unset($arr[$key]);\n    }\n  }\n\n  $arr = array_reverse($arr);\n\
    \n  $result = array();\n  foreach ($arr as $value) {\n    $result[] = sprintf(\"\
    %2d\", $value);\n  }\n\n  return array_unique($result);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 tags=php,arrays |>\n<code>\n<?php\n$numbers = array(6, 20,\
    \ 6, 15, 34, 2, 19, 4, 21, 1, 5, 12);\necho implode(',',sortNumbers($numbers));",
  "    $map = array();\n    $min = 1;\n    $max = count($arr) - 1;\n    while ($min\
    \ <= $max) {\n        $mid = (int) (($min + $max) / 2);\n        if ($mid - $arr[$mid]\
    \ > 1) {\n            $min = $mid + 1;\n        } elseif ($mid - $arr[$mid] <\
    \ -1) {\n            $max = $mid - 1;\n        } else {\n            $map[$arr[$mid]][]\
    \ = $mid;\n            $min = $mid + 1;\n        }\n    }\n    return $map;\n}",
  "    if (empty($arr)) {\n        return array();\n    }\n    $min = min($arr);\n\
    \    $max = max($arr);\n    $min_str = (string)$min;\n    $max_str = (string)$max;\n\
    \    $min_int = intval($min);\n    $max_int = intval($max);\n    if ($min_int\
    \ == $max_int) {\n        return array($min_str);\n    }\n    $result = array();\n\
    \    foreach ($arr as $n) {\n        if ($n < $min || $n > $max) {\n         \
    \   continue;\n        }\n        $str = strval($n);\n        $result[] = ($str\
    \ === $min_str) ? $min_str :\n            (strval($n) === $max_str) ? $max_str\
    \ :\n            $str;\n    }\n    return $result;\n}\n", "  if (empty($arr))\
    \ {\n    return array();\n  }\n  $min = min($arr);\n  $max = max($arr);\n  if\
    \ ($min === $max) {\n    return array();\n  }\n  $count = count($arr);\n  $one\
    \ = array();\n  for ($i = 0; $i < $count; $i++) {\n    if ($arr[$i] === $min)\
    \ {\n      $one[] = 'One';\n    } else if ($arr[$i] === $max) {\n      $one[]\
    \ = 'Nine';\n    }\n  }\n  $result = array();\n  for ($i = 0; $i < $count; $i++)\
    \ {\n    $result[] = strtolower($one[$i]);\n  }\n  return $result;\n}\n", "  $len\
    \ = count($arr);\n  if ($len <= 0) return array();\n  $min = min($arr);\n  $max\
    \ = max($arr);\n  if ($min == $max) {\n    return array();\n  }\n  if ($min <\
    \ 1 || $max > 9) {\n    return array();\n  }\n  $result = ($len - 1) * 9;\n  while\
    \ ($min <= $max) {\n    $result -= 1;\n    $tmp = $arr[$result];\n    $arr[$result]\
    \ = $arr[$min - 1];\n    $arr[$min - 1] = $tmp;\n    $min += 1;\n  }\n  foreach\
    \ ($arr as $key => $value) {\n    $tmp = $value;\n    $value = $key + 1;\n   \
    \ $arr[$key] = $tmp;\n    $arr[$value] = $tmp;\n  }\n  return $arr;\n}\n\n/**\n\
    \ * Sort the given array in descending order according to its values.\n * @param\
    \ array $arr\n * @return array sorted array\n */", "    $length = count($arr);\n\
    \    if ($length == 0) return array();\n    $sorted = array_map(function ($item)\
    \ {\n        if ($item < 1 || $item > 9) return $item;\n        return $length\
    \ == 1 ? $item : \"$item\";\n    }, $arr);\n    array_multisort($sorted, $arr,\
    \ SORT_ASC, SORT_NUMERIC);\n    return array_map(function ($item) {\n        return\
    \ $length == 1 ? $item : \"$item\";\n    }, $arr);\n}\n", "  $len = count($arr);\n\
    \  if ($len == 0) return array();\n  $min = min($arr);\n  $max = max($arr);\n\
    \  ksort($arr);\n  $result = array();\n  for ($i = 0; $i < $len; ++$i) {\n   \
    \ if ($arr[$i] == $min) $result[] = \"One\";\n    else if ($arr[$i] == $max) $result[]\
    \ = \"Nine\";\n    else if ($arr[$i] >= 1 && $arr[$i] <= 9) $result[] = str_pad($arr[$i],\
    \ 2, \"0\", STR_PAD_LEFT);\n  }\n  return $result;\n}\n</code>\n<|/ a tags=arrays,sorting,php\
    \ dscore=2 |>\n<| a dscore=1 |>\nIf you're looking to sort an array in PHP, then\
    \ there are a number of different ways to do it.  The most basic way is to use\
    \ the function sort() with the optional parameter of SORT_NUMERIC.  Sort will\
    \ compare each element of the array and order them in ascending order.  Then it\
    \ can just return the array itself in the order you want.\nThe other ways are\
    \ to use either the usort() or array_multisort() functions which will allow you\
    \ to sort the array by any criteria you want.  This is more flexible as you can\
    \ sort on different properties and even use your own comparison function.  These\
    \ two functions are the only ones that will allow you to sort by string values.\
    \  \nIf you need to use your own comparison function, you'll need to write your\
    \ own custom sort function to do the sort.\n<|/ a tags=arrays,sorting,php |>\n\
    <| a |>\nThis is not a direct answer to your question, but you should consider\
    \ using associative arrays instead.  This will make your life a lot easier when\
    \ working with it.\n<|/ a dscore=0 tags=arrays,sorting,php |>\n<| a tags=arrays,sorting,php\
    \ |>\nAs James said, usort is the right way to do it. \n<code>", "    $sorted\
    \ = $arr ? sort($arr) : array();\n    return $arr ? array_reverse(range(1, 10))\
    \ : array();\n}\n", "  if (!is_array($arr))\n    return array();\n\n  return array_map(\n\
    \    function($number) use ($arr) {\n      if (is_int($number) && $number >= 1\
    \ && $number <= 9) {\n        return $arr[$number];\n      }\n      return '';\n\
    \    },\n    array_filter(\n      array_map(\n        function($number) {\n  \
    \        return str_pad($number, 3, '0', STR_PAD_LEFT);\n        },\n        range(abs($arr[0]),\
    \ abs($arr[1]))\n      )\n    )\n  );\n}\n</code>\n<|/ a dscore=2 tags=php,sorting\
    \ |>\n<| a tags=php,sorting dscore=2 |>\nI used the method described by Kyle McG\
    \ in his answer to this question\nhttps://stackoverflow.com/questions/2699086/how-can-i-sort-a-multi-dimensional-array-in-php\n\
    The result was an array containing 2 arrays which contained the keys from the\
    \ original array in order of importance.\n<code>\n$array = [\n  [ \"One\" => 10\
    \ ],\n  [ \"Two\" => 3 ],\n  [ \"Three\" => 5 ],\n  [ \"Four\" => 7 ],\n  [ \"\
    Five\" => 2 ],\n  [ \"Six\" => 1 ]\n];\n\n$array1 = [];\n$array2 = [];\n\nforeach($array\
    \ as $key => $value) {\n  $array2[$key] = $array[$key];\n}\n\n$array1 = array_merge($array2,\
    \ array_flip($array2));\n\nprint_r($array1);\n</code>\n<|/ a |>\n<| a |>\nHere\
    \ is another solution if you are using PHP 5.5+ (which I am!) and want to sort\
    \ an array of objects by one of the object's properties's value:\n<code>\n$users\
    \ = [\n  [ 'user' => new User(1, 'John'), ],\n  [ 'user' => new User(2, 'Jane'),\
    \ ],\n  [ 'user' => new User(3, 'Jack'), ],\n  [ 'user' => new User(4, 'Jill'),\
    \ ],\n  [ 'user' => new User(5, 'Joseph'), ],\n];\n\nusort($users, function($a,\
    \ $b) {\n  return ($a['user']->getAge() > $b['user']->getAge()) ? 1 : -1;\n});\n\
    \nforeach ($users as $user) {\n  var_dump($user);\n}\n</code>\nWhich will output:\n\
    <code>\narray\n  0 => \n    array\n      'user' => \n        object\n        \
    \  'id' => int 1\n          'name' => string 'John' (length=4)\n  1 => \n    array\n\
    \      'user' => \n", "  if (!$arr) {\n    return array();\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  return array_map(\n      function($v) {\n        return\
    \ str_pad($v, strlen($v) == $max - $min ? $max - $v : $max - $min - 1, '0', STR_PAD_LEFT);\n\
    \      },\n      array_slice($arr, 0, $min));\n}\n</code>\n<|/ a |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php\n$a = array(\"a\",\"b\",\"c\",\"e\",\"d\");\n$b = array(\"\
    a\",\"c\",\"e\",\"d\",\"b\");\n$c = array(\"b\",\"a\",\"c\",\"e\",\"d\");\n$d\
    \ = array(\"b\",\"a\",\"e\",\"d\",\"c\");\n$e = array(\"c\",\"a\",\"b\",\"d\"\
    ,\"e\");\n$f = array(\"c\",\"b\",\"a\",\"d\",\"e\");\n$g = array(\"d\",\"a\",\"\
    b\",\"c\",\"e\");\n$h = array(\"d\",\"b\",\"a\",\"c\",\"e\");\n\n$array = array($a,$b,$c,$d,$e,$f,$g,$h);\n\
    \nusort($array, function($a,$b){\n    if ($a > $b) {\n        return 1;\n    }\n\
    \    if ($a < $b) {\n        return -1;\n    }\n    return 0;\n});\nforeach($array\
    \ as $array){\n    foreach($array as $array){\n        echo $array.\"<br>\";\n\
    \    }\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\nThis is a recursive function I\
    \ wrote a while ago. This will sort an array of objects into an array of arrays,\
    \ and recursively sort the array each time it finds an array. I rewrote it this\
    \ time just so I could test the code. It is not the most efficient, but is very\
    \ easy to read. \n<code>\n<?php\n\n$array = array(\n    'first' => array(\n  \
    \      'fourth' => 'third',\n        'first' => 'second',\n        'fifth' =>\
    \ 'fourth',\n    ),\n    'third' => array(\n        'third' => 'second',\n   \
    \     'fourth' => 'first',\n    ),\n);\n", "  $result = array();\n\n  foreach\
    \ ($arr as $number) {\n    // Only accept integers and 1 to 9 inclusive.\n   \
    \ if (!is_int($number) || $number < 1 || $number > 9) {\n      continue;\n   \
    \ }\n\n    // Build the key name.\n    $key = \"{$number}\";\n\n    // Add the\
    \ key.\n    $result[$key] = $number;\n  }\n\n  // Reverse the array.\n  array_multisort(array_keys($result),\
    \ SORT_DESC, $result);\n\n  // Replace the array with the keys.\n  return array_values($result);\n\
    }\n</code>\n<|/ a tags=arrays,sorting,php |>\n<| a |>\nJust add another loop to\
    \ your existing one:\n<code>\nforeach ($array2 as $key => $value) {\n    if ($value\
    \ > 1) {\n        $array3[$key] = $array2[$key];\n    } else {\n        $array3[$key]\
    \ = 'One';\n    }\n}\n</code>\nYou will have to change your condition to $array2\
    \ <= 9 and add an else statement to account for $array2 being > 10.\n<|/ a tags=arrays,sorting,php\
    \ dscore=0 |>\n<| a dscore=0 tags=arrays,sorting,php |>\n<code>", "  global $names;\n\
    \  $newArr = array();\n  foreach ($arr as $key => $val) {\n    if ($val >= 1 &&\
    \ $val <= 9) {\n      $newArr[intval($val)] = $names[$val];\n    }\n  }\n  return\
    \ $newArr;\n}\n", "  $arr2 = array();\n  foreach ($arr as $x) {\n    if ($x <=\
    \ 9) {\n      $arr2[] = $x;\n    } elseif ($x <= 99) {\n      $arr2[] = $x . \"\
    \ hundred\";\n    } elseif ($x <= 999) {\n      $arr2[] = $x . \" thousand\";\n\
    \    } elseif ($x <= 9999) {\n      $arr2[] = $x . \" million\";\n    } elseif\
    \ ($x <= 999999) {\n      $arr2[] = $x . \" billion\";\n    } elseif ($x <= 999999999)\
    \ {\n      $arr2[] = $x . \" trillion\";\n    } elseif ($x <= 1000000000) {\n\
    \      $arr2[] = $x . \" quadrillion\";\n    } elseif ($x <= 1000000000000) {\n\
    \      $arr2[] = $x . \" quintillion\";\n    } elseif ($x <= 1000000000000000)\
    \ {\n      $arr2[] = $x . \" sextillion\";\n    } elseif ($x <= 1000000000000000000)\
    \ {\n      $arr2[] = $x . \" septillion\";\n    } else {\n      array_push($arr2,\
    \ $x);\n    }\n  }\n  if ($arr2 !== array()) {\n    return array_reverse($arr2);\n\
    \  } else {\n    return array();\n  }\n}\n</code>\n<|/ a tags=php,numbers,words,arrays\
    \ |>\n<| c |>\nThat's a nice function! I'm sure I can get my head around it. But\
    \ is there a way to make it also work with negative numbers? So for example: `array(-8,\
    \ 2, -4, -6, -9)` would return `array(\"Six\", \"Five\", \"Four\", \"Three\",\
    \ \"Two\", \"One\")` ?\n<|/ c |>\n<| a dscore=3 |>\nI needed to do the same thing\
    \ recently and came up with this solution that's a little more scalable:\n<code>",
  "  $len = count($arr);\n  if ($len === 0) {\n    return array();\n  }\n  $first\
    \ = reset($arr);\n  $last = end($arr);\n  if ($first == $last) {\n    return array();\n\
    \  }\n  return array_map(function ($x) use ($first, $last, $len) {\n    return\
    \ $len == 1 ? $first : $len == 2 ? $first . $last : $first . $last . $x;\n  },\
    \ $arr);\n}\n</code>\n<|/ a dscore=5 tags=arrays,php,sorting |>\n<| c |>\nI like\
    \ this solution, although it feels a bit too hackish. I am not really a fan of\
    \ using the 'use' keyword for functions in anonymous functions. I'd love to know\
    \ if this has any drawbacks. Anyone know why this works?\n<|/ c |>\n<| c |>\n\
    : Anonymous functions are anonymous. But it does mean that you can give them any\
    \ name you want. This is handy if the function you are creating doesn't need to\
    \ access the variables you give it to (in this case, `$first` and `$last`, which\
    \ were the only two that would need that). Not sure why it feels hackish though,\
    \ as `use` makes perfect sense in these situations.\n<|/ c |>\n<| c |>\nI'm going\
    \ to go ahead and assume that PHP 5.3 doesn't have `use` keywords. I believe 5.2\
    \ does, but I'm not certain about 5.3 or 5.4. I think this could be useful if\
    \ you are using PHP 5.2 for some reason.\n<|/ c |>\n<| c |>\nI just went to test\
    \ this out and it worked great for me with PHP 5.4.\n<|/ c |>\n<| c |>\nNice solution!\
    \ But what to do if I want to sort an array of numbers and strings?\n<|/ c |>\n\
    <| a tags=arrays,php,sorting |>\nJust use usort:\n<code>", "  return count($arr)\
    \ == 0 ? array() : array_reverse(array_replace($arr, array_flip(range(1, 10))),\
    \ true);\n}\n", "  $arr = array_reverse($arr);\n  foreach ($arr as $key => $value)\
    \ {\n    // \"One\" < \"Four\" < \"Six\" < \"Five\" < \"Two\" < \"Three\" < \"\
    Eight\" < \"Nine\"\n    if ($value < 0 || $value >= 9) {\n      unset($arr[$key]);\n\
    \    }\n  }\n  return $arr;\n}\n\n/**\n * Sort an array of strings using the rule:\n\
    \ * Sort using \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\", \"One\" as weights.\n *\n * Example:\n * >>> sort_with_weights([\n\
    \ * ...   \"Eight\",\n * ...   \"Five\",\n * ...   \"Four\",\n * ...   \"Three\"\
    ,\n * ...   \"Two\",\n * ...   \"Two\",\n * ...   \"One\",\n * ... ])\n * array(\"\
    One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\")\n */", "  if (empty($arr)) return array();\n\n  $length = count($arr);\n\
    \n  $sorted = array();\n  usort($arr, function($a, $b) { return $a <=> $b; });\n\
    \  for ($i = 0; $i < $length; $i++) {\n    $sorted[$i] = str_pad($arr[$i], \"\
    length\", \"0\", STR_PAD_LEFT);\n  }\n\n  return array_reverse($sorted);\n}\n",
  "    if (!$arr) return array();\n    \n    $one = array();\n    $two = array();\n\
    \    $three = array();\n    $four = array();\n    $five = array();\n    $six =\
    \ array();\n    $seven = array();\n    $eight = array();\n    $nine = array();\n\
    \    \n    $len = strlen((string)$arr[0]);\n    \n    $i = 1;\n    \n    foreach($arr\
    \ as $val)\n    {\n        $one[$i] = $val;\n        \n        if ($len > $i)\
    \ $len = $i;\n        \n        if ($len < $i) {\n            $len = $i;\n   \
    \         $i = $len - 1;\n        }\n        \n        $i++;\n    }\n    \n  \
    \  $i = 1;\n    foreach($one as $val)\n    {\n        $two[$i] = $val;\n     \
    \   $i++;\n    }\n    \n    $i = 1;\n    foreach($two as $val)\n    {\n      \
    \  $three[$i] = $val;\n        $i++;\n    }\n    \n    $i = 1;\n    foreach($three\
    \ as $val)\n    {\n        $four[$i] = $val;\n        $i++;\n    }\n    \n   \
    \ $i = 1;\n    foreach($four as $val)\n    {\n        $five[$i] = $val;\n    \
    \    $i++;\n    }\n    \n    $i = 1;\n    foreach($five as $val)\n    {\n    \
    \    $six[$i] = $val;\n        $i++;\n    }\n    \n    $i = 1;\n    foreach($six\
    \ as $val)\n    {\n        $seven[$i] = $val;\n        $i++;\n    }\n    \n  \
    \  $i = 1;\n    foreach($seven as $val)\n    {\n        $eight[$i] = $val;\n \
    \       $i++;\n    }\n    \n    $i = 1;\n    foreach($eight as $val)\n    {\n\
    \        $nine[$i] = $val;\n        $i++;\n    }\n    \n    $a = array(\"One\"\
    , $one, $two);\n    $b = array(\"Two\", $three, $four);\n    $c = array(\"Three\"\
    , $five, $six);\n    $d = array(\"Four\", $seven, $eight);\n    $e = array(\"\
    Five\", $nine);\n    \n    return array_merge(array_merge($a, $b), $c, $d, $e);\n\
    }\n", "  if (!$arr) $arr = array();\n  if (!is_array($arr)) $arr = array($arr);\n\
    \  $sorted = array_reverse(array_sort($arr));\n  $output = array();\n  for ($i\
    \ = 0, $c = count($sorted); $i < $c; ++$i) {\n    if ($sorted[$i] >= 1 && $sorted[$i]\
    \ <= 9) {\n      $output[] = $sorted[$i];\n    }\n  }\n  return $output;\n}\n",
  "  if (empty($arr)) {\n    return array();\n  }\n  $min = min($arr);\n  $max = max($arr);\n\
    \  $min_len = strlen($min);\n  $max_len = strlen($max);\n  $min_pow = pow($min_len,\
    \ $max_len);\n  $max_pow = pow($max_len, $min_len);\n  $digits_between = array();\n\
    \  for ($i = 0; $i < $min_pow; $i++) {\n    $digits_between[] = str_pad(base_convert($i,\
    \ 10, $min_pow), $min_len, \"0\", STR_PAD_LEFT);\n  }\n  $digits_between = array_reverse($digits_between);\n\
    \  foreach ($arr as $k => $v) {\n    if ($v >= $min_pow) {\n      $digits_between[$v]\
    \ = $v;\n    }\n  }\n  $result = array();\n  foreach ($digits_between as $k =>\
    \ $v) {\n    if ($k >= $min_len && $k <= $max_len) {\n      $result[] = $digits_name[$v];\n\
    \    }\n  }\n  return $result;\n}\n\n/**\n * Return the size of a string in bytes.\n\
    \ *\n * @param string $str\n *   String to be measured.\n *\n * @return int\n\
    \ *   Number of bytes the string requires.\n */", "    $result = array();\n  \
    \  foreach ($arr as $item) {\n        if ($item > 9) {\n            $result[]\
    \ = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\")[$item - 1];\n        } else if ($item < 1) {\n        \
    \    $result[] = \"\";\n        } else {\n            $result[] = chr($item);\n\
    \        }\n    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$arr = array(5, 1, 8, 0, 7, 0, 6, 9, 2);\n$arr = array_filter($arr,function($v){\n\
    \    return $v>=1 && $v<=9;\n});\n$arr = array_map(function($v){\n    return chr($v+48);\n\
    },$arr);\n$arr = array_reverse($arr);\n\n$newArr = array_map(function($v){\n \
    \   return $v>9?array_reverse(array_slice($v,0,-1))[0].$v[1]:$v;\n},$arr);\n</code>\n\
    This code can be optimized.\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\nHow about\
    \ this :\n<code>\n$arr = array(5, 1, 8, 0, 7, 0, 6, 9, 2);\n$arr = array_filter($arr,function($v){\n\
    \    return $v>=1 && $v<=9;\n});\n$arr = array_map(function($v){\n    return chr($v+48);\n\
    },$arr);\n$arr = array_reverse($arr);\n\n$newArr = array_map(function($v){\n \
    \   return $v>9?array_reverse(array_slice($v,0,-1))[0].$v[1]:$v;\n},$arr);\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "  if (!$arr) {\n    return array();\n\
    \  }\n  if (count($arr) === 0) {\n    return array();\n  }\n  $sorted = array_flip($arr);\n\
    \  $result = array();\n  foreach ($sorted as $k => $v) {\n    if ($v > 9) {\n\
    \      $result[] = $v;\n    } else {\n      $result[] = strtoupper($v);\n    }\n\
    \  }\n  return $result;\n}\n", "  if (!$arr) {\n    return array();\n  }\n  $len\
    \ = count($arr);\n  if (!$len) {\n    return array();\n  }\n  sort($arr);\n  $reversed\
    \ = array_reverse($arr);\n  $reversed = array_map(function($v) {\n    return isset($names[$v])\
    \ ? $names[$v] : $v;\n  }, $reversed);\n  return array_merge(array_slice($arr,\
    \ 0, 1), $reversed);\n}", "  if (empty($arr)) return array();\n  $lower = array_filter($arr,\
    \ 'is_int');\n  $higher = array_filter($arr, 'is_int');\n  if (count($lower) !=\
    \ count($higher)) return array();\n  $higher = array_map('strval', $higher);\n\
    \  $lower = array_map('strval', $lower);\n  sort($higher, SORT_NUMERIC);\n  sort($lower,\
    \ SORT_NUMERIC);\n  $result = array();\n  foreach ($lower as $key => $value) {\n\
    \    $result[] = array('value' => $value, 'name' => $higher[$key]);\n  }\n  return\
    \ $result;\n}\n", "  $output = array();\n\n  if (!$arr) {\n    return array();\n\
    \  }\n\n  $len = count($arr);\n  sort($arr);\n  foreach ($arr as $num) {\n   \
    \ if ($num > 9) {\n      array_push($output, \"Nine\");\n    } else if ($num >\
    \ 8) {\n      array_push($output, \"Eight\");\n    } else if ($num > 7) {\n  \
    \    array_push($output, \"Seven\");\n    } else if ($num > 6) {\n      array_push($output,\
    \ \"Six\");\n    } else if ($num > 5) {\n      array_push($output, \"Five\");\n\
    \    } else if ($num > 4) {\n      array_push($output, \"Four\");\n    } else\
    \ if ($num > 3) {\n      array_push($output, \"Three\");\n    } else if ($num\
    \ > 2) {\n      array_push($output, \"Two\");\n    } else if ($num > 1) {\n  \
    \    array_push($output, \"One\");\n    } else if ($num > 0) {\n      array_push($output,\
    \ \"Zero\");\n    } else {\n      continue;\n    }\n  }\n  return $output;\n}\n",
  "  if (empty($arr)) {\n    return array();\n  }\n\n  $min = 1;\n  $max = 9;\n  $result\
    \ = array();\n  foreach ($arr as $number) {\n    if ($number < $min || $number\
    \ > $max) {\n      continue;\n    }\n\n    $result[] = str_replace(range($min,\
    \ $max), range($max - $min, $min), $number);\n  }\n\n  return $result;\n}\n</code>\n\
    <|/ a tags=php |>\n<| a dscore=2 |>\nAn alternate solution (if possible) would\
    \ be to use array_map() to sort the array by length, then array_merge() with a\
    \ custom sorting function with strrev().\n<code>\n$string = '123456789';\n$stringReversed\
    \ = strrev($string);\n$arr = array_map(function($item){\n    return strrev($item);\n\
    }, $arr);\n$sortedArr = array_merge($arr, $stringReversed);\n</code>\n<|/ a tags=php\
    \ |>\n<| a |>\nI've written a solution using some regex:\n<code>", "  if (!$arr)\
    \ return array();\n  if (count($arr) == 0) return array();\n  if (count($arr)\
    \ == 1) return array((string) $arr[0]);\n  $sorted = $arr;\n  sort($sorted);\n\
    \  return array_reverse($sorted);\n}\n", "    $ret = array();\n\n    foreach ($arr\
    \ as $v) {\n        if (is_int($v)) {\n            $ret[] = get_one($v);\n   \
    \     } elseif (is_float($v) && is_integer($v)) {\n            $ret[] = get_one($v);\n\
    \        } else {\n            $ret[] = get_one($v);\n        }\n    }\n\n   \
    \ return array_reverse($ret);\n}\n", "  sort($arr);\n  return array_reverse($arr);\n\
    }\n", "  $min = min($arr);\n  $max = max($arr);\n  $reversed_arr = [];\n  for\
    \ ($i = $min; $i <= $max; $i++) {\n    $reversed_arr[] = $arr[$i];\n  }\n  $reversed_arr\
    \ = array_reverse($reversed_arr);\n  $result = [];\n  for ($i = 0, $n = count($arr);\
    \ $i < $n; $i++) {\n    $result[] = name_by_num($reversed_arr[$i]);\n  }\n  return\
    \ $result;\n}\n", "  sort($arr);\n  if (empty($arr)) {\n    return array();\n\
    \  }\n\n  ksort($arr);\n  return array_map(\n    function($i) {\n      return\
    \ \"One\"[$i];\n    },\n    array_filter(\n      array_map(\n        function($i)\
    \ {\n          return $i < 10; // 1 and 9 are \"special\" numbers\n        },\n\
    \        array_filter(\n          $arr,\n          function($i) {\n          \
    \  return $i > 0;\n          },\n          true\n        )\n      ),\n      function($i)\
    \ {\n        return $i >= 1 && $i <= 9;\n      }\n    )\n  );\n}\n", "  if (count($arr)\
    \ == 0) {\n    return array();\n  }\n  $min_length = min($arr);\n  $max_length\
    \ = max($arr);\n  for ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] < $min_length\
    \ || $arr[$i] > $max_length) {\n      unset($arr[$i]);\n    }\n  }\n  return array_reverse($arr);\n\
    }\n", "  sort($arr);\n  if (!$arr) {\n    return array();\n  }\n  $len = count($arr);\n\
    \  if (!$len) {\n    return array();\n  }\n  for ($i = 0; $i < $len; ++$i) {\n\
    \    $arr[$i] = $i % 10;\n  }\n  $last = end($arr);\n  $arr = array_reverse($arr);\n\
    \  $first = array_shift($arr);\n  if ($first !== 1) {\n    $arr = array_reverse($arr);\n\
    \  }\n  for ($i = 0; $i < $len; ++$i) {\n    $arr[$i] = $arr[$i] ? $names[$arr[$i]]\
    \ : \"Unnamed \" . $i;\n  }\n  $arr = array_reverse($arr);\n  return $arr;\n}\n",
  "  if (empty($arr)) {\n    return array();\n  }\n\n  $min = $max = 0;\n  foreach\
    \ ($arr as $n) {\n    if ($n < 1) {\n      continue;\n    }\n    if ($n < 10)\
    \ {\n      $names[$n] = \"$n\";\n      continue;\n    }\n    $n = ($n - $min)\
    \ * 10;\n    $min = $n;\n  }\n\n  if ($min < 10) {\n    $names[$min] = \"One\"\
    ;\n    $min = $min + 1;\n  }\n  else if ($min < 100) {\n    $names[$min] = \"\
    Two\";\n    $min = $min + 1;\n  }\n  else if ($min < 1000) {\n    $names[$min]\
    \ = \"Three\";\n    $min = $min + 1;\n  }\n  else if ($min < 10000) {\n    $names[$min]\
    \ = \"Four\";\n    $min = $min + 1;\n  }\n  else if ($min < 100000) {\n    $names[$min]\
    \ = \"Five\";\n    $min = $min + 1;\n  }\n  else if ($min < 1000000) {\n    $names[$min]\
    \ = \"Six\";\n    $min = $min + 1;\n  }\n  else if ($min < 10000000) {\n    $names[$min]\
    \ = \"Seven\";\n    $min = $min + 1;\n  }\n  else if ($min < 100000000) {\n  \
    \  $names[$min] = \"Eight\";\n    $min = $min + 1;\n  }\n  else if ($min < 1000000000)\
    \ {\n    $names[$min] = \"Nine\";\n    $min = $min + 1;\n  }\n\n  foreach ($arr\
    \ as $n) {\n    if ($n < 1) {\n      continue;\n    }\n    if ($n < 10) {\n  \
    \    $names[$n] = \"$n\";\n      continue;\n    }\n    $n = ($n - $min) * 10;\n\
    \    $max = $n;\n  }\n\n  if ($max > 9) {\n    $names[$max] = \"One\";\n    $max\
    \ = $max - 1;\n  }\n  else if ($max > 90) {\n    $names[$max] = \"Two\";\n   \
    \ $max = $max - 1;\n  }\n  else if ($max > 900) {\n    $names[$max] = \"Three\"\
    ;\n    $max = $max - 1;\n  }\n  else if ($max > 9000) {\n    $names[$max] = \"\
    Four\";\n    $max = $max - 1;\n  }\n  else if ($max > 90000) {\n    $names[$max]\
    \ = \"Five\";\n    $max = $max - 1;\n  }\n  else if ($max > 900000) {\n    $names[$max]\
    \ = \"Six\";\n    $max = $max - 1;\n  }\n  else if ($max > ", "  $ret = array();\n\
    \  foreach ($arr as $v) {\n    $lower = $v < 1 ? 0 : 1;\n    $upper = $v > 9 ?\
    \ 9 : $v;\n    if ($lower === 0 && $upper === 9) {\n      $ret[] = 'Nine';\n \
    \   }\n    if ($lower === 0 && $upper < 9) {\n      $lower = 1;\n    }\n    if\
    \ ($lower > $upper) {\n      $lower = $upper;\n      $upper = 1;\n    }\n    $ret[$lower]\
    \ = str_pad($v, $lower - $upper, '0', STR_PAD_LEFT);\n  }\n  return $ret;\n}\n",
  "  if (!is_array($arr)) {\n    return array();\n  }\n  \n  // If there are no integers\
    \ or all integers are negative, return an empty array\n  if (count($arr) === 0\
    \ || count(array_filter($arr, \"is_int\")) !== count($arr)) {\n    return array();\n\
    \  }\n  \n  $arr = array_map(\"intval\", $arr);\n  \n  // Sort the array by length\
    \ descending\n  arsort($arr);\n  \n  // Reverse the array\n  $arr = array_reverse($arr);\n\
    \  \n  // Convert the array to a string and replace each digit by its name\n \
    \ return array_map(\"chr\", array_fill(1, count($arr), 1));\n}\n", "  if (empty($arr))\n\
    \    return array();\n  $min_length = min(array_map('intval', $arr));\n  $max_length\
    \ = max(array_map('intval', $arr));\n  if ($min_length == 0)\n    return array();\n\
    \n  $reversed = array();\n  for ($i = 0; $i < $max_length; ++$i) {\n    $reversed[$i]\
    \ = $i + 1;\n  }\n  $reversed = array_reverse($reversed);\n\n  $result = array();\n\
    \  for ($i = 0; $i < $min_length; ++$i) {\n    array_push($result, $reversed[$i]);\n\
    \  }\n\n  sort($result);\n  foreach ($result as &$val) {\n    $val = chr(64 +\
    \ $val);\n  }\n\n  return $result;\n}\n\n", "  $length = array();\n  foreach($arr\
    \ as $num) {\n    $length[$num] = count($arr);\n  }\n  ksort($length);\n  foreach($length\
    \ as $num => $count) {\n    for($i = 1; $i <= 9; $i++) {\n      $arr[$num] = $i\
    \ . $arr[$num];\n    }\n  }\n  return $arr;\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nNice solution, and a more generic version than my own.\n<|/ c |>\n\
    <| a dscore=1 |>\nYou can just sort by length and then reverse the array\n<code>\n\
    sort(array_keys($numbers));\n$numbers = array_reverse($numbers);\n</code>\n<|/\
    \ a tags=php,sorting |>\n<| a tags=php,sorting dscore=1 |>\nJust add $numbers\
    \ to array_reverse like this :\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9);\n\
    $numbers = array_reverse($numbers);\nprint_r($numbers);\n</code>\n<|/ a |>\n<|\
    \ a |>\nTry this. \n<code>\n<?php\n\n$array = array(1,2,3,4,5,6,7,8,9);\n\n$number\
    \ = array_reverse($array);\n$number = array_keys($number);\n", "    if (!$arr)\
    \ return array();\n\n    $low = 1;\n    $high = count($arr);\n    foreach ($arr\
    \ as $value) {\n        if ($value >= $low && $value < $high) {\n            $arr[$value\
    \ - 1] = $arr[$low];\n            $arr[$low] = $value;\n            $low++;\n\
    \        }\n        if ($value == $high) $high--;\n    }\n    array_splice($arr,\
    \ $low);\n    return array_reverse($arr);\n}\n", "  $sorted = array_map(function\
    \ ($i) {\n    if ($i < 1 || $i > 9) {\n      return $i;\n    }\n\n    return sprintf('%u',\
    \ $i);\n  }, range(1, 9));\n\n  return $arr ? array_reverse($sorted) : array();\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays,algorithm dscore=1 |>\n<| a dscore=1\
    \ tags=php,sorting,arrays,algorithm |>\nI hope this is a simple and straight forward\
    \ solution\n<code>", "  foreach ($arr as $key => $val) {\n    if (is_numeric($val)\
    \ && $val >= 1 && $val <= 9) {\n      $arr[$key] = array('name' => 'Nine', 'length'\
    \ => 9 - $val);\n    }\n  }\n  array_multisort($arr);\n  $result = array();\n\
    \  foreach ($arr as $key => $val) {\n    if (isset($val['name'])) {\n      $result[]\
    \ = $val['name'];\n    }\n  }\n  return $result;\n}\n", "  $length = array_map('count',\
    \ $arr);\n  if (array_sum($length) !== count($arr)) {\n    return array();\n \
    \ }\n  $min = $max = null;\n  $counts = array_count_values($arr);\n  foreach ($counts\
    \ as $number => $count) {\n    if ($min === null || ($count < $min and $min !==\
    \ null)) {\n      $min = $number;\n    }\n    if ($max === null or ($count > $max\
    \ and $max !== null)) {\n      $max = $number;\n    }\n  }\n  $items = array();\n\
    \  for ($i = $min; $i <= $max; $i++) {\n    $items[] = $arr[$i];\n  }\n  return\
    \ array_map(function($i) use ($arr) {\n    foreach ($arr as $item) {\n      if\
    \ ($item === $i) {\n        return $item;\n      }\n    }\n  }, $items);\n}\n",
  "  $length = count($arr);\n  $result = array();\n  for ($i = 0; $i < $length; $i++)\
    \ {\n    $result[] = intval($arr[$i]);\n  }\n  return array_reverse($result);\n\
    }\n", "  $len = count($arr);\n  if ($len == 0) return array();\n  $min = reset($arr);\n\
    \  $max = end($arr);\n  if ($min > $max) return array();\n  $result1 = by_length($arr);\n\
    \  $result2 = array();\n  for ($i = $min; $i <= $max; $i++) {\n    $result2[$i]\
    \ = $result1[$i];\n  }\n  return $result2;\n}\n", "  if (!is_array($arr)) {\n\
    \    return array();\n  }\n  // Sort and reverse the array.\n  $sorted = array_reverse(sort($arr));\n\
    \  // Turn each digit from 0 to 9 into a corresponding name.\n  return array_map(\n\
    \    function($digit) use ($sorted) {\n      return $digit < 0 ? 'Nine' : ($digit\
    \ < 1 ? 'One' : $sorted[$digit - 1]);\n    },\n    $arr);\n}\n\n/**\n * A function\
    \ that adds a prefix to a string. Useful for adding \"http://\" to URLs.\n *\n\
    \ * Example usage:\n * >>> add_http(\"http://google.com\")\n * \"http://google.com/\"\
    \n *\n * @param string $url\n *   The URL to add the prefix to.\n *\n * @return\
    \ string\n *   The URL and prefix concatenated.\n */", "  if (empty($arr)) return\
    \ array();\n  if (is_string($arr)) return array();\n  if (!is_array($arr)) return\
    \ array($arr);\n\n  $arr = array_map(function($a) { return intval($a); }, $arr);\n\
    \n  // Sort from least to greatest\n  array_multisort($arr, SORT_DESC, $arr);\n\
    \n  // Reverse so that largest number first\n  $reversed = array_reverse($arr);\n\
    \n  // And convert it into an array (without changing its values)\n  $return =\
    \ array();\n  foreach ($reversed as $val) {\n    $return[] = strval($val);\n \
    \ }\n\n  return $return;\n}\n", "    if (!$arr) return array();\n    if (count($arr)\
    \ === 1) return array($arr[0]);\n    $low = 1;\n    $high = 9;\n    do {\n   \
    \     $low++;\n        $high--;\n    } while ($low <= $high);\n    ksort($arr);\n\
    \    return array_reverse($arr);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\nThis is my contribution :\n<code>", "  if (empty($arr)) return array();\n\
    \  $arr = array_reverse($arr);\n  $length = count($arr);\n  foreach ($arr as $key\
    \ => $value) {\n    if ($value < 1 || $value > 9) return false;\n    $arr[$key]\
    \ = $value + array_search($value, range(10, $length));\n  }\n  return $arr;\n\
    }\n", "  if (empty($arr)) {\n    return array();\n  }\n  $arr = array_reverse($arr);\n\
    \  $arr = array_reduce($arr, function ($carry, $item) use ($arr) {\n    $carry[$arr[$item]]\
    \ = 'One';\n    return $carry;\n  }, array());\n  $arr = array_reverse($arr);\n\
    \  return $arr;\n}\n", "  if (!empty($arr)) {\n    if (count($arr) > 9) {\n  \
    \    array_pop($arr);\n    }\n    sort($arr);\n    $result = array();\n    foreach\
    \ ($arr as $num) {\n      if ($num >= 1 && $num <= 9) {\n        $result[] = 'One';\n\
    \      } else if ($num >= 10 && $num <= 19) {\n        $result[] = 'Two';\n  \
    \    } else if ($num >= 20 && $num <= 29) {\n        $result[] = 'Three';\n  \
    \    } else if ($num >= 30 && $num <= 39) {\n        $result[] = 'Four';\n   \
    \   } else if ($num >= 40 && $num <= 49) {\n        $result[] = 'Five';\n    \
    \  } else if ($num >= 50 && $num <= 59) {\n        $result[] = 'Six';\n      }\
    \ else if ($num >= 60 && $num <= 69) {\n        $result[] = 'Seven';\n      }\
    \ else if ($num >= 70 && $num <= 79) {\n        $result[] = 'Eight';\n      }\
    \ else if ($num >= 80 && $num <= 89) {\n        $result[] = 'Nine';\n      }\n\
    \    }\n    return $result;\n  }\n  return array();\n}\n</code>\nThis version\
    \ also includes the number conversions and string conversions required for other\
    \ languages, like Spanish, Japanese, Arabic, etc\n<|/ a dscore=5 |>\n<| c |>\n\
    This works, but be careful with negative integers: they will be sorted backwards\
    \ (from 1 to 9) instead of forwards (from 9 to 1).\n<|/ c |>\n<| c |>\nThis also\
    \ works but be careful with numbers that are longer than 9! They will be sorted\
    \ from lowest to highest (from 9 to 1). Thanks to ChristianS's comment\n<|/ c\
    \ |>\n<| c |>\nFor those who are interested, here's a similar version but using\
    \ an array instead of recursion.  It uses fewer lines of code, and should be slightly\
    \ faster:\n```", "  if (!$arr)\n    return array();\n\n  $min = array_shift($arr);\n\
    \  if (!is_numeric($min))\n    return array();\n\n  $max = array_pop($arr);\n\
    \  if (!is_numeric($max))\n    return array();\n\n  $sorted = array();\n  for\
    \ ($i = $min; $i <= $max; $i++)\n    $sorted[] = ($i + 1).' '.$names[$i];\n  return\
    \ array_reverse($sorted);\n}\n", "  if (!empty($arr)) {\n    $min = 1;\n    $max\
    \ = max($arr);\n    foreach ($arr as $key => $value) {\n      if ($value < $min\
    \ || $value > $max) {\n        unset($arr[$key]);\n      }\n    }\n    $arr =\
    \ array_reverse($arr);\n    foreach ($arr as $key => $value) {\n      $arr[$key]\
    \ = isset($name[$value]) ? $name[$value] : \"$value\";\n    }\n  }\n  return $arr;\n\
    }\n\n/**\n * @return string An URL\n */", "    $result = [];\n    $length_limit\
    \ = 10;\n    foreach ($arr as $item) {\n        $length = get_length($item);\n\
    \        if ($length < $length_limit) {\n            $result[] = $item;\n    \
    \    } else {\n            $item = reverse_digits($item);\n            $length\
    \ = get_length($item);\n            if ($length < $length_limit) {\n         \
    \       $result[] = $item;\n            }\n        }\n    }\n    return $result;\n\
    }\n", "  global $digits;\n  $out = array();\n  foreach ($arr as $i) {\n    if\
    \ ($i >= 1 && $i <= 9) {\n      $out[] = $digits[$i - 1];\n    }\n  }\n  return\
    \ $out;\n}\n", "  $result = array();\n  foreach ($arr as $element) {\n    if (is_numeric($element))\
    \ {\n      $element = abs($element);\n      if ($element < 1 || $element > 9)\
    \ {\n        continue;\n      }\n    }\n    $result[] = array((int)$element, static::$names['one']);\n\
    \  }\n  array_multisort($result, SORT_ASC, $arr);\n  foreach ($arr as $key =>\
    \ $value) {\n    if (is_numeric($value)) {\n      $result[$key] = static::$names['one'];\n\
    \    }\n  }\n  return $result;\n}\n\n/**\n * Return the most frequent value in\
    \ the given array.\n *\n * @param array $arr\n *   An array of values to use as\
    \ keys and frequency of occurrences.\n *\n * @return string\n *   The most frequent\
    \ value in the array.\n *\n * @see array_count_values(), group_by_value()\n */",
  "  // Ignore the empty array\n  if (empty($arr)) return array();\n\n  // Ignore\
    \ any strange numbers (0, -1, 1, etc.)\n  foreach ($arr as $key => $value) {\n\
    \    if ($value == (int) $value) {\n      if ($value == 0) $value = 'One';\n \
    \     elseif ($value == 1) $value = 'Two';\n      elseif ($value == 2) $value\
    \ = 'Three';\n      elseif ($value == 3) $value = 'Four';\n      elseif ($value\
    \ == 4) $value = 'Five';\n      elseif ($value == 5) $value = 'Six';\n      elseif\
    \ ($value == 6) $value = 'Seven';\n      elseif ($value == 7) $value = 'Eight';\n\
    \      elseif ($value == 8) $value = 'Nine';\n      elseif ($value == 9) $value\
    \ = 'Ten';\n    }\n  }\n\n  // Reverse the array\n  $arr2 = array_reverse($arr);\n\
    \n  // Create the output array\n  $out = array();\n  for ($i = 0; $i < count($arr2);\
    \ $i++) {\n    $out[] = str_replace(array('One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine', 'Ten'), array('', '', '', '', '', '', '', '',\
    \ ''), $arr2[$i]);\n  }\n\n  // Return the array\n  return $out;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nWhat about if there are no digits? How do you handle\
    \ this case?\n<|/ c |>\n<| a tags=sorting,php,arrays |>\nSince you've tagged this\
    \ question \"PHP\", I'll offer a PHP solution.  I'll assume that your array is\
    \ numerically indexed and that the array contains only integers and strings.\n\
    <code>\n$names = array(\n    1 => 'one',\n    2 => 'two',\n    3 => 'three',\n\
    \    4 => 'four',\n    5 => 'five',\n    6 => 'six',\n    7 => 'seven',\n    8\
    \ => 'eight',\n    9 => 'nine',\n);\n$array = array(\n    2 => 2,\n    3 => 1,\n\
    \    5 => 3,\n    7 => 2,\n    9 => 3,\n);\nforeach ($array as $key => $value)\n\
    {\n    $array[$key] = $names[$value];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,php,arrays\
    \ |>\nPHP 5 >= 5.4.0\nThe solution works with any array of mixed types and any\
    \ array of integers. ", "  $length = sizeof($arr);\n  if ($length <= 0) {\n  \
    \  return array();\n  }\n\n  $sorted_by_length = $arr;\n  sort($sorted_by_length);\n\
    \  $reverse_sorted_by_length = array_reverse($sorted_by_length);\n  foreach ($reverse_sorted_by_length\
    \ as $value) {\n    $digit = floor($value / 10);\n    $sorted_by_length[$digit]\
    \ = $arr[$digit];\n  }\n  return $sorted_by_length;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks, this works nicely and cleanly and understands what's going\
    \ on too! I'm going to use this.\n<|/ c |>\n<| a tags=php,arrays |>\nNot tested,\
    \ but you get the idea\n<code>", "  if (!$arr) return array();\n  $len = count($arr);\n\
    \  if ($len < 2) return $arr;\n  // sort the integers between 1 and 9\n  natsort($arr);\n\
    \  foreach ($arr as $k => $v) {\n    $arr[$k] = $v > 9 ? $v - 9 : $v;\n  }\n \
    \ // reverse the array\n  $arr2 = array();\n  $i = 0;\n  $k = 0;\n  while ($k\
    \ < $len) {\n    $arr2[$i] = $arr[$k];\n    $i++;\n    if ($i === 10) {\n    \
    \  $i = 0;\n      $k++;\n    }\n  }\n  return $arr2;\n}", "    foreach ($arr as\
    \ &$item) {\n        if ($item !== false && $item !== 0 && $item < 10) {\n   \
    \         $item = $names[$item];\n        }\n    }\n    return array_reverse($arr);\n\
    }\n", "    if (!$arr) {\n        return array();\n    }\n    $arr = array_filter($arr);\n\
    \    $reversed = array_reverse(array_keys($arr));\n    foreach ($arr as $val)\
    \ {\n        if (is_numeric($val)) {\n            $arr[$val] = $reversed[$val];\n\
    \        }\n    }\n    return $arr;\n}\n", "    return array_reverse(\n      \
    \  array_map(\n            function ($a) {\n                return str_pad(\n\
    \                    strval($a),\n                    strlen($a),\n          \
    \          \"0\",\n                    STR_PAD_LEFT\n                );\n    \
    \        },\n            array_filter(\n                $arr,\n              \
    \  function ($a) {\n                    return ($a > 1 && $a < 9);\n         \
    \       }\n            )\n        )\n    );\n}\n\n/*\n * Given an array, sort\
    \ it according to the given function.\n * If not present, return the array unmodified.\n\
    \ *\n * $arr (array): An array to sort\n * $cmp (function): A comparison function\
    \ to use when sorting the array.\n * $key (Optional): The key to put on each array\
    \ element to make the sorted array unique.\n * $reverse (Optional): Whether to\
    \ sort the array in reverse, or use the default ascending order.\n * $args (Optional):\
    \ An array of parameters to pass to the comparison function\n *\n * Returns an\
    \ array with the sorted array.\n */", "  if (empty($arr)) return array();\n  $len\
    \ = count($arr);\n  asort($arr);\n  rsort($arr);\n  $map = array();\n  for ($i\
    \ = 0; $i < $len; ++$i) {\n    $map[] = $arr[$i];\n  }\n  return array_map(function($x)\
    \ { return \"{$map[$x]}\"; }, range(0, $len - 1));\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ dscore=3 |>\n<| c |>\n+1 because you included a comparison function and an explanation\
    \ of the sort algorithm.\n<|/ c |>\n<| a dscore=2 |>\nIn PHP 7.4+, you can use\
    \ array_multisort:\n<code>\n$input = array(2, 1, 1, 4, 5, 8, 2, 3);\narray_multisort($input,\
    \ $input);\n$result = array_map('strval', $input);\n\nvar_dump($result);\n</code>\n\
    Output:\n<code>\narray(10) {\n  [0]=>\n  string(5) \"Eight\"\n  [1]=>\n  string(5)\
    \ \"Five\"\n  [2]=>\n  string(5) \"Four\"\n  [3]=>\n  string(5) \"Three\"\n  [4]=>\n\
    \  string(5) \"Two\"\n  [5]=>\n  string(5) \"Two\"\n  [6]=>\n  string(5) \"One\"\
    \n  [7]=>\n  string(5) \"One\"\n  [8]=>\n  string(0) \"\"\n  [9]=>\n  string(0)\
    \ \"\"\n}\n</code>\nFor PHP earlier than 7.4, you can use the following algorithm:\n\
    <code>\n$input = array(2, 1, 1, 4, 5, 8, 2, 3);\n$result = array();\n\nfor($i\
    \ = 0; $i < count($input); $i++) {\n    $index = 0;\n    while($index < count($result)\
    \ && $result[$index] > $input[$i]) {\n        $index++;\n    }\n\n    if($index\
    \ < count($result)) {\n        $result[$index] = $input[$i];\n    } else {\n \
    \       $result[] = $input[$i];\n    }\n}\n\nvar_dump($result);\n</code>\n<|/\
    \ a tags=php,sorting,arrays |>\n<| c |>\nYour first approach with array_multisort\
    \ is very nice, but your second approach is a bit too complicated for me. Maybe\
    \ I need to learn more about PHP...\n<|/ c |>\n<| c |>\nAdded an explanation of\
    \ the algorithm.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\nThis is my implementation\
    \ using array_column\n<code>\n$a = array(2, 1, 1, 4, 5, 8, 2, 3);", "  $len =\
    \ count($arr);\n  if (!$len) {\n    return array();\n  }\n  $result = array();\n\
    \  foreach ($arr as $a) {\n    if ($a >= 1 && $a <= 9) {\n      $result[] = chr($a\
    \ + ord('a')); // 97 to 122 map\n    }\n  }\n  return implode('', array_reverse($result));\n\
    }\n", "  if (empty($arr)) return array();\n  $length = array_map(function($x)\
    \ { return intval($x); }, $arr);\n  array_multisort($length, $arr);\n  $result\
    \ = array();\n  for ($i = 0; $i < count($arr); ++$i) {\n    $result[] = array('name'\
    \ => $arr[$i], 'number' => $i);\n  }\n  return $result;\n}\n", "  if (!is_array($arr))\
    \ {\n    return array();\n  }\n  $result = array();\n  if (count($arr)) {\n  \
    \  $sort = array();\n    foreach ($arr as $i => $num) {\n      if (is_numeric($num))\
    \ {\n        $sort[$num] = $i;\n      }\n    }\n    ksort($sort);\n    foreach\
    \ ($sort as $i => $num) {\n      $result[] = $names[$i];\n    }\n  }\n  return\
    \ $result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks so much for this solution.\
    \ It works perfectly. And for those that want to try this in Javascript, it works\
    \ in IE 9+ and Chrome. [Here's a JSFiddle](http://jsfiddle.net/J5QY5/) I made\
    \ with the solution.\n<|/ c |>\n<| a |>\nThis seems like a fairly simple problem,\
    \ but it's not. You're trying to sort alphanumeric data by its length. That's\
    \ not going to work for numbers like \"2\" or \"8\" because those two values are\
    \ sorted alphabetically.\nTo get this to work, you would have to sort alphanumeric\
    \ data by length, then switch the numeric data with its corresponding alpha-numeric\
    \ data.\n<|/ a dscore=2 tags=sorting,javascript,arrays,php |>\n<| c |>\nI thought\
    \ about this solution, but it would require looping through the array twice -\
    \ first to find numeric data, second to find alpha-numeric data.\n<|/ c |>\n<|\
    \ c |>\nYou're right. I thought about this solution and realized that it's just\
    \ not possible. I'll try to come up with a solution later on.\n<|/ c |>\n<| c\
    \ |>\nI thought about this solution too, but I thought that there might be a better\
    \ solution out there. Since PHP has a `usort` function, I thought that there might\
    \ be some way to make PHP sort it while keeping alpha-numeric sorting intact.\n\
    <|/ c |>\n<| c |>\nI feel like there is probably some way to do this with some\
    \ sort of a custom sort function or something, but I haven't been able to figure\
    \ it out yet. I think that this might be a great feature for the PHP core. It\
    \ would allow one to sort any kind of array (alphanumeric, numeric, character,\
    \ etc) while preserving the alphanumeric sorting. [Here's a JSFiddle](http://jsfiddle.net/J5QY5/)\
    \ I made with the solution.\n<|/ c |>\n<| a |>\nA couple of different methods\
    \ come to mind:\n\nCreate 2 arrays, one with numbers 0-", "  $l = strlen($arr[0]);\n\
    \  return array_filter(\n    $arr,\n    function($item) use ($l) {\n      return\
    \ ($item <= $l || $item >= $l - 1);\n    },\n    SORT_NUMERIC\n  );\n}\n", " \
    \ foreach ($arr as $n) {\n    if ($n < 1 || $n > 9) {\n      continue;\n    }\n\
    \    $nstr = sprintf(\"%02d\", $n);\n    $result = &$out;\n    for ($i = 1; $i\
    \ < strlen($nstr); ++$i) {\n      if (!isset($result[$nstr[$i]])) {\n        $result[$nstr[$i]]\
    \ = array();\n      }\n      $result = &$result[$nstr[$i]];\n    }\n    $result[]\
    \ = &$n;\n  }\n  return $out;\n}\n", "  return $arr ?\n    array_filter($arr,\
    \ function($item){\n      return ($item >= 1 && $item <= 9);\n    }, ARRAY_FILTER_USE_BOTH)\
    \ :\n    array();\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=php,arrays,sorting\
    \ |>\nI like Elias solution, however, I would change array_filter to array_walk\
    \ so you don't have to change your calling code. Also, I'd probably use array_map\
    \ with array_flip to swap indexes and keys.\n<code>", "  $length = count($arr);\n\
    \  if ($length == 0) {\n    return array();\n  }\n\n  uksort($arr, function($a,\
    \ $b) {\n    return $a - $b;\n  });\n\n  $result = array();\n  $digits = array();\n\
    \  $lengths = array();\n  for ($i = 0; $i < $length; $i++) {\n    $result[] =\
    \ str_pad(\n      str_repeat('00', 8 - strlen($lengths[$i])) + $arr[$i],\n   \
    \   8,\n      '0',\n      STR_PAD_LEFT\n    );\n    $digits[] = $lengths[$i];\n\
    \    $lengths[$i] = '';\n  }\n  return $result;\n}\n</code>\n<|/ a tags=arrays,algorithm,php,sorting\
    \ dscore=1 |>\n<| a tags=arrays,algorithm,php,sorting |>\nHere's a recursive solution.\
    \ I'm sure it could be optimized further:\n<code>", "  if (empty($arr)) return\
    \ array();\n  if (count($arr) === 1) return $arr;\n  $length = count($arr);\n\
    \  $index = 0;\n  while ($index < $length) {\n    // Find a number between 1 and\
    \ 9 inclusive.\n    if ($arr[$index] > 9) {\n      if ($index === 0) {\n     \
    \   break;\n      }\n      // If the number before is 9, ignore it:\n      unset($arr[$index]);\n\
    \    } else {\n      $index++;\n    }\n  }\n  sort($arr);\n  foreach ($arr as\
    \ $k => $v) {\n    if ($v > 9) {\n      unset($arr[$k]);\n      $arr[$k] = strval($v\
    \ - 10);\n    }\n  }\n  return $arr;\n}\n</code>\n<|/ a dscore=1 tags=php,algorithm,sorting\
    \ |>\n<| c |>\nI'm sorry but this is not what I'm looking for. What this does\
    \ is sort the array and gives me the array by length. What I need is sort the\
    \ array and give me the array by length and then sort the array by each digit\
    \ in the array from 1 to 9 as it is sorted already.\n<|/ c |>\n<| c |>\nI don't\
    \ see a requirement for it to be sorted by each digit. Can you please give a more\
    \ detailed example of the output you expect?\n<|/ c |>\n<| a dscore=0 |>\nYou\
    \ could use a function like the one below to sort by the length of your array,\
    \ then by each digit of your array.\n<code>\n$array = array(\"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n",
  "  $one = array(\"One\");\n  $two = array(\"Two\");\n  $three = array(\"Three\"\
    );\n  $four = array(\"Four\");\n  $five = array(\"Five\");\n  $six = array(\"\
    Six\");\n  $seven = array(\"Seven\");\n  $eight = array(\"Eight\");\n  $nine =\
    \ array(\"Nine\");\n  $count = count($arr);\n  if ($count > 0) {\n    sort($arr);\n\
    \    reset($arr);\n    $arr = array_reverse($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n      $result[] = in_array($arr[$i], $one) ? $one[0] : in_array($arr[$i],\
    \ $two) ? $two[0] : in_array($arr[$i], $three) ? $three[0] : in_array($arr[$i],\
    \ $four) ? $four[0] : in_array($arr[$i], $five) ? $five[0] : in_array($arr[$i],\
    \ $six) ? $six[0] : in_array($arr[$i], $seven) ? $seven[0] : in_array($arr[$i],\
    \ $eight) ? $eight[0] : $nine[0];\n    }\n  }\n  return $result;\n}\n", "    if\
    \ (!is_array($arr)) {\n        return array();\n    }\n    $len = count($arr);\n\
    \    $out = array();\n    for ($i = 0; $i < $len; $i++) {\n        $num = $arr[$i];\n\
    \        if ($num >= 1 && $num <= 9) {\n            $out[] = $names[$num - 1];\n\
    \        }\n    }\n    return $out;\n}\n", "  if (!$arr) {\n    return array();\n\
    \  }\n\n  // Convert to string and remove all non-digits:\n  $arr = array_map('intval',\
    \ array_filter(array_map('strval', $arr), 'ctype_digit'));\n\n  // Sort the array\
    \ by length descending (so smaller numbers at the end):\n  array_multisort($arr,\
    \ SORT_DESC, $arr);\n\n  $result = [];\n  foreach ($arr as $k => $v) {\n    if\
    \ ($v != 1) {\n      unset($arr[$k]);\n    }\n  }\n  foreach ($arr as $v) {\n\
    \    $result[] = array_search($v, range(1, 9));\n  }\n  return $result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\n+1 for the effort you put into your answer, but this\
    \ doesn't answer the OP's question. It's a great answer to someone else that doesn't\
    \ even know they were looking for a solution to the same problem.\n<|/ c |>\n\
    <| c |>\nThe code I posted answers the question, but I agree it doesn't really\
    \ answer the question \"How do I make an array of numbers 1-9 in reverse order?\"\
    , so I've added a comment saying that it's really just a way to solve the OP's\
    \ original problem of making a function that will return the numbers 1-9 in reverse\
    \ order. I'm not sure what the confusion was, but it was the question in the title\
    \ and question that I was trying to answer. :)\n<|/ c |>\n<| c |>\nNo problem,\
    \ just thought it might be helpful to someone else coming across this question.\
    \ :)\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php", "  if (count($arr) == 0) {\n\
    \    return array();\n  }\n\n  if (count($arr) == 1) {\n    return array($arr[0]);\n\
    \  }\n\n  // Sort the array by length.\n  usort($arr, 'sort_by_length');\n\n \
    \ // Reverse the sort order.\n  $arr = array_reverse($arr);\n\n  // Replace each\
    \ digit with its corresponding name.\n  $digits = array('0' => 'Zero', '1' =>\
    \ 'One', '2' => 'Two', '3' => 'Three', '4' => 'Four',\n                   '5'\
    \ => 'Five', '6' => 'Six', '7' => 'Seven', '8' => 'Eight', '9' => 'Nine');\n\n\
    \  foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n\
    \      $arr[$key] = $digits[$value];\n    }\n  }\n\n  return $arr;\n}\n", "  if\
    \ (count($arr) < 2) {\n    return array();\n  }\n  $len = count($arr);\n  $arr\
    \ = array_reverse($arr);\n  $names_len = count($names);\n  $arr = array_pad($arr,\
    \ $len, $names[0]);\n  for ($i = 1; $i < $names_len; $i++) {\n    foreach ($arr\
    \ as &$value) {\n      $value = $names[$i][$value];\n    }\n  }\n  return $arr;\n\
    }\n", "  if (!$arr) {\n    return array();\n  }\n\n  $length = count($arr);\n\
    \  if (!$length) {\n    return array();\n  }\n\n  $min_length = 1;\n  $max_length\
    \ = 9;\n  $reverse = false;\n  $result = array();\n\n  foreach ($arr as $k =>\
    \ $v) {\n    // Ignore strange numbers\n    if ($v === -1) {\n      unset($arr[$k]);\n\
    \      continue;\n    }\n\n    // Ignore anything too small\n    if ($v < $min_length)\
    \ {\n      unset($arr[$k]);\n      continue;\n    }\n\n    // Ignore anything\
    \ too large\n    if ($v > $max_length) {\n      unset($arr[$k]);\n      continue;\n\
    \    }\n\n    // If the current number is in the range\n    if ($min_length <=\
    \ $v && $v <= $max_length) {\n      // Add the name to the array\n      $result[]\
    \ = english_name($v);\n      // Then remove the number from the array\n      unset($arr[$k]);\n\
    \    }\n  }\n\n  // Sort the numbers, and reverse the array if the numbers were\
    \ reversed\n  if ($reverse) {\n    uasort($arr, 'strnatcasecmp');\n  }\n\n  return\
    \ $result;\n}\n", "  if (!is_array($arr)) {\n    return array();\n  }\n  $length\
    \ = count($arr);\n  if ($length == 0) {\n    return array();\n  }\n\n  array_walk($arr,\
    \ function(&$value, $key) {\n    if ($value == 0) {\n      $value = \"\";\n  \
    \  }\n  });\n\n  $map = array('One' => 'Eight', 'Two' => 'Five', 'Three' => 'Four',\n\
    \               'Four' => 'Three', 'Five' => 'Two', 'Six' => 'Two',\n        \
    \       'Seven' => 'One', 'Eight' => 'One', 'Nine' => 'One');\n\n  return array_map(function($val)\
    \ {\n    return $map[$val];\n  }, array_reverse($arr));\n}\n", "  sort($arr);\n\
    \  $result = array();\n  $length = count($arr);\n  for ($i = 0; $i < $length;\
    \ $i++) {\n    $result[$i] = $arr[$i] >= 1 && $arr[$i] <= 9 ? $arr[$i] . \" \"\
    \ : str_replace(\"_\", \" \", $arr[$i]);\n  }\n  return $result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "    // Ignore arrays with strange\
    \ numbers.\n    if ( count($arr) < 1 )\n        return array();\n\n    // Sort\
    \ the array by length (descending)\n    usort($arr, 'strlen_callback');\n    //\
    \ Reverse the array and remove all digits\n    $arr = array_reverse($arr);\n \
    \   // Reverse the array and replace all digits by its names\n    $arr = array_map(\
    \ 'strrev', $arr );\n\n    return $arr;\n}", "    $len = count($arr);\n    if\
    \ ($len < 1) {\n        return array();\n    }\n\n    $array = array();\n    $last\
    \ = 0;\n    foreach ($arr as $num) {\n        if ($num >= 1 && $num <= 9) {\n\
    \            $num += $last;\n            $array[] = chr($num - 48);\n        }\n\
    \        $last = $num;\n    }\n\n    return $array;\n}\n", "  if (empty($arr))\
    \ {\n    return array();\n  }\n  foreach ($arr as $key => $value) {\n    if ($value\
    \ < 1 || $value > 9) {\n      unset($arr[$key]);\n    }\n  }\n  $arr = array_reverse($arr);\n\
    \  foreach ($arr as $key => $value) {\n    $arr[$key] = one_to_n($value);\n  }\n\
    \  return $arr;\n}\n", "  if (empty($arr)) {\n    return array();\n  }\n  $sorted\
    \ = array_reverse(array_filter($arr, 'is_numeric'));\n  foreach ($sorted as $k\
    \ => $v) {\n    switch ($v) {\n      case 0:\n      case 1:\n      case 2:\n \
    \     case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n  \
    \    case 8:\n      case 9:\n        $sorted[$k] = array('One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine');\n        break;\n      case\
    \ 10:\n      case 11:\n      case 12:\n      case 13:\n      case 14:\n      case\
    \ 15:\n      case 16:\n      case 17:\n      case 18:\n      case 19:\n      case\
    \ 20:\n      case 21:\n      case 22:\n      case 23:\n      case 24:\n      case\
    \ 25:\n      case 26:\n      case 27:\n      case 28:\n      case 29:\n      case\
    \ 30:\n      case 31:\n        $sorted[$k] = array('Ten', 'Eleven', 'Twelve',\
    \ 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen');\n\
    \        break;\n      case 100:\n      case 101:\n      case 102:\n      case\
    \ 103:\n      case 104:\n      case 105:\n      case 106:\n      case 107:\n \
    \     case 108:\n      case 109:\n      case 110:\n      case 111:\n      case\
    \ 112:\n      case 113:\n      case 114:\n      case 115:\n      case 116:\n \
    \     case 117:\n      case 118:\n      case 119:\n      case 120:\n      case\
    \ 121:\n      case 122:\n      case 123:\n      case 124:\n      case 125:\n \
    \     case 126:\n      case 127:\n        $sorted[$k] = array('Hundred', 'Thousand',\
    \ 'Million', 'Billion');\n        break;\n      default:\n        break;\n   \
    \ }\n  }\n  return $sorted;\n}\n", "  foreach ($arr as $key => $num) {\n    if\
    \ ($num < 1 || $num > 9) {\n      unset($arr[$key]);\n    } else if ($num == 1)\
    \ {\n      $arr[$key] = \"One\";\n    } else if ($num == -1) {\n      $arr[$key]\
    \ = \"MinusOne\";\n    } else if ($num == 10) {\n      $arr[$key] = \"Ten\";\n\
    \    } else {\n      $arr[$key] = \"FourtyNine\";\n    }\n  }\n  return $arr;\n\
    }", "  if (!empty($arr)) {\n    // Get rid of strange numbers first:\n    $arr\
    \ = array_filter($arr, 'is_numeric');\n    // Sort the array using usort so we\
    \ are sure that we are sorting the\n    // correct thing:\n    usort($arr, 'by_length');\n\
    \    // Replace the values of the array using the mappings:\n    return array_values(array_map(\n\
    \      'by_length_mapping',\n      $arr\n    ));\n  } else {\n    return array();\n\
    \  }\n}", "    return array_filter(\n        $arr,\n        function ($n) {\n\
    \            return ($n === 1 || $n === -1 || $n >= 0 && $n <= 9);\n        }\n\
    \    )\n        ? array_map(\n            function ($n) {\n                return\
    \ $n == 1\n                    ? \"One\"\n                    : (($n >= 2 && $n\
    \ <= 9) ? \"Two\" : \"Three\");\n            },\n            array_filter(\n \
    \               $arr,\n                function ($n) {\n                    return\
    \ ($n === 1 || $n === -1 || $n >= 0 && $n <= 9);\n                }\n        \
    \    )\n        )\n        : array();\n}\n</code>\n<|/ a tags=arrays,sorting,php\
    \ |>\n<| c |>\nThanks for your answer. Unfortunately this does not solve the problem\
    \ of sorting between 1 and 9. I had already pointed this out in my question.\n\
    <|/ c |>\n<| c |>\nYou are right, I misread the question. Have updated the answer.\n\
    <|/ c |>\n<| a |>\nTry this function:\n<code>"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
