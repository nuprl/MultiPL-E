name: HumanEval_108_count_nums
language: php
prompt: "<?php\n// Write a function count_nums which takes an array of integers and\
  \ returns\n// the number of elements which has a sum of digits > 0.\n// If a number\
  \ is negative, then its first signed digit will be negative:\n// e.g. -123 has signed\
  \ digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>> count_nums(array(-1,\
  \ 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n// 3\nfunction count_nums($arr)\
  \ {\n"
tests: "function candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0, 1,\
  \ 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $res = 0;\n    foreach ($arr as $num) {\n        if ($num >= 0)\
    \ {\n            $res += $num;\n        } else {\n            $neg = $num < 0\
    \ ? -$num : 0;\n            $sign = ($num >= 0 ? '+' : '-');\n            $res\
    \ += $neg + strlen($sign) + 1;\n        }\n    }\n    return $res;\n}\n", "  return\
    \ count(array_filter($arr, 'is_int', ARRAY_FILTER_USE_BOTH));\n}\n", "  $sum =\
    \ array_sum($arr);\n  return $sum > 0 ? count($arr) - array_sum(array_filter($arr,\
    \ 'is_int')) : 0 ;\n}\n\n$sum = 0;\nforeach (new SplDoublyLinkedList() as $e)\
    \ {\n  $sum += count_nums($e->getPath());\n}\necho \"Sum = $sum\\n\";\n</code>\n\
    The above function will count the number of nodes having a sum greater than 0,\
    \ but it does not take into account the fact that the last node may be a singleton\
    \ containing no positive digits. The only way to know that is the sum of the array\
    \ elements must be greater than zero.\n<code>", "    $sum = 0;\n    foreach($arr\
    \ as $number) {\n        $sum = ($sum + $number->digits) - ($number->digits <\
    \ 0);\n    }\n    return $sum;\n}\n</code>\nThe above solution will handle most\
    \ test cases.\n<|/ a tags=arrays,php |>\n<| a |>\nThe below solution will also\
    \ work for negative numbers but it counts first sign as 0.\n<code>", "    $result\
    \ = 0;\n    foreach ($arr as $item) {\n        $item += 0;\n        if ($item\
    \ < 0) {\n            $item = abs($item);\n            $item += floor($item /\
    \ 10);\n        }\n        $result += $item;\n    }\n    return $result;\n}\n\n\
    $nums = range(0, 1000000000);\n$sums = array();\n\nforeach ($nums as $num) {\n\
    \    $digits = count_digits($num);\n    if ($digits > 0) {\n        $sums[$digits]++;\n\
    \    }\n}\n", "  $count = 0;\n  foreach($arr as $x) {\n    $count += $x % 10;\n\
    \  }\n  return $count;\n}\n", "  return count(array_filter($arr, function($num)\
    \ {\n    return $num > 0;\n  }));\n}\n</code>\nThe above code could also be made\
    \ more efficient by removing the unnecessary array_filter call, by moving the\
    \ array_filter call into the array_walk call. Also, we can avoid unnecessary calls\
    \ to array_filter with array_reduce.\n<code>", "    return count(array_filter($arr,\
    \ function($num) {\n        return $num > 0;\n    }));\n}\n", "  // Initialize\
    \ the return value\n  $count = 0;\n\n  // Traverse the input array\n  foreach\
    \ ($arr as $val) {\n    // If $val is negative, then take the negative value of\
    \ its first\n    // digit: $val is the first signed digit.\n    if ($val < 0)\
    \ {\n      $val = abs($val);\n    }\n\n    // If the current $val is positive,\
    \ add it to the return value\n    // If the current $val is negative, subtract\
    \ it from its first digit.\n    if ($val > 0) {\n      $count += $val;\n    }\
    \ else {\n      $count -= abs($val);\n    }\n  }\n\n  // Return the count\n  return\
    \ $count;\n}\n</code>\nNow you just need to count the numbers whose sum is greater\
    \ than 0. Which is pretty easy:\n<code>", "    $sum = 0;\n    foreach ($arr as\
    \ $num) {\n        $sum += ($num < 0) ? $num % 10 : $num;\n    }\n    return $sum;\n\
    }\n", "  if (!is_array($arr)) {\n    return 0;\n  }\n\n  $digits = array();\n\
    \  $sign = 1;\n  $sum = 0;\n  foreach ($arr as $val) {\n    if ($val < 0) {\n\
    \      $val = abs($val);\n      $sign = -$sign;\n    }\n    if ($val > 9) {\n\
    \      $digits[$val] = '9';\n    } else {\n      $digits[$val] = $val;\n    }\n\
    \    $sum += $val;\n  }\n\n  if ($sum == 0) {\n    return 0;\n  }\n\n  return\
    \ $sign < 0 ?\n      count($digits) - count(array_filter(array_keys($digits),\
    \ 'strlen')) :\n      count($digits);\n}\n", "  $count = array_count_values($arr);\n\
    \  $keys = array_keys($arr);\n  if ($count[$keys[0]] != 0) {\n    return $count[$keys[0]];\n\
    \  }\n  return count($arr);\n}\n", "    $count = 0;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $count += $arr[$i];\n        if ($arr[$i] < 0) {\n        \
    \    if ($arr[$i] == 0) {\n                $count += 1;\n            } else {\n\
    \                $count--;\n            }\n        }\n    }\n    return $count;\n\
    }\n", "    $len = count($arr);\n    $nums = 0;\n    if ($len) {\n        for ($i\
    \ = 0; $i < $len; ++$i) {\n            $nums += $arr[$i] < 0 ? -$arr[$i] : $arr[$i];\n\
    \        }\n    }\n    return $nums;\n}\n", "  return count(array_filter($arr,\
    \ function($x) {\n    return $x > 0;\n  }));\n}", "  if (!is_array($arr)) return\
    \ 0;\n  $sum = 0;\n  foreach ($arr as $num) {\n    $sum += count_digits($num);\n\
    \  }\n  return $sum;\n}\n", "    return count(array_filter($arr, function($n)\
    \ use($arr) {\n        return abs($n) > 0;\n    }));\n}\n", "    if (!$arr ||\
    \ count($arr) < 1) {\n        return 0;\n    }\n    $result = 0;\n    $total =\
    \ $arr[0];\n    foreach ($arr as $value) {\n        if ($value > 0 && $total >\
    \ 0 && $value < $total) {\n            $result++;\n        }\n        $total +=\
    \ $value;\n    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post.\n<|/ c |>\n<| c |>\nWhile\
    \ this code snippet may solve the question, [including an explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion. Please also try not to crowd your code with\
    \ explanatory comments, this reduces the readability of both the code and the\
    \ explanations!\n<|/ c |>\n<| c |>\n.Wolf It does provide an answer, as I wrote\
    \ in the last paragraph \"*...the question was about finding a way to find the\
    \ number of positive integers in a given array*\".\n<|/ c |>\n<| c |>\n- You have\
    \ a point there. I'll edit my answer to make it more clear, thank you.\n<|/ c\
    \ |>\n<| c |>\nI believe that would be the most efficient solution.\n<|/ c |>\n\
    <| a dscore=0 tags=integer,php,sum |>\n<code>\n<?php\n\n    $array = array(-1,\
    \ 11, -12, 1, -1, 2);\n    array_filter($array, function ($num) { return !is_int($num);\
    \ }, ARRAY_FILTER_USE_BOTH);\n    echo count($array);\n", "  $sum = 0;\n  foreach($arr\
    \ as $a) {\n    if($a < 0) {\n      $a *= -1;\n      $sum++;\n    }\n    $sum\
    \ += intval($a/10);\n    $sum -= intval($a%10);\n  }\n  return $sum;\n}\n$n3 =\
    \ count_nums(array(9, 4, 1, 9, 4, 1));\nprint \"$n3 numbers are negative\\n\";",
  "  $count = 0; foreach ($arr as $a) if ($a > 0) $count += ($a % 10);\n  return $count;\n\
    }\necho count_nums(array(-123, -12, 1, 11, -10, 1, 111));", "  $count = $negs\
    \ = 0;\n  foreach ($arr as $num) {\n    if ($num < 0) $negs++;\n    else {\n \
    \     if ($num < 10) $count++;\n      else $count = $num / 10 + 1;\n    }\n  }\n\
    \  return $count + $negs;\n}\n", "    foreach ($arr as $a) {\n        $b = 0;\n\
    \        if ($a < 0) {\n            $a = abs($a);\n            $b -= (int)$a%10;\n\
    \            $a = $a/10;\n            $b -= (int)$a%10;\n            $a = $a/10;\n\
    \            $b -= (int)$a%10;\n        }\n        $sum = array_sum(str_split($a));\n\
    \        if ($sum > 0) {\n            $b += $sum;\n        }\n        $sum = 0;\n\
    \        for ($i = 0; $i < strlen($a); $i++) {\n            $sum += (int)$a[$i];\n\
    \            if ($sum > 0) {\n                break;\n            }\n        }\n\
    \        if ($sum > 0) {\n            $b += $sum;\n        }\n        if ($b >\
    \ 0) {\n            return $b;\n        } else {\n            return 0;\n    \
    \    }\n    }\n    return 0;\n}\n</code>\n<|/ a tags=number-theory,math,php dscore=0\
    \ |>\n<| c |>\nOh I thought this was a programming problem. My bad.\n<|/ c |>\n\
    <| a tags=number-theory,math,php dscore=0 |>\nThis is what I came up with:\n<code>\n\
    <?php\n$numbers = [-11, 12, 101, 99, -9, -50];", "  // Return the number of elements\
    \ with a sum greater than zero.\n  if (empty($arr)) {\n    return 0;\n  }\n  $sum\
    \ = 0;\n  $neg = false;\n  $first = 1;\n  foreach ($arr as $n) {\n    if (!is_numeric($n)\
    \ || $n < 0) {\n      $neg = true;\n      $n = -$n;\n    }\n    if ($first) {\n\
    \      $first = 0;\n    } else {\n      $sum += intval($n);\n    }\n  }\n  return\
    \ $neg ? -$sum : $sum;\n}\n", "  $n = 0;\n  foreach ($arr as $elt) {\n    $n +=\
    \ $elt;\n  }\n  return $n;\n}\n", "    return count(array_filter($arr, function($x)\
    \ { return ($x > 0) && array_sum(str_split($x)) == $x; }));\n}\n", "  return count(array_filter($arr,\
    \ function($num) {\n    return $num > 0;\n  }));\n}", "  return count(array_filter($arr,\
    \ function($num) {\n    return $num > 0;\n  }));\n}\n", "    $count = 0;\n   \
    \ foreach ($arr as $num) {\n        $count = max(0, $count + ($num < 0 ? -$num\
    \ % 10 : $num % 10));\n    }\n    return $count;\n}\n", "    $result = 0;\n  \
    \  foreach ($arr as $num) {\n        $result += $num;\n    }\n    return $result;\n\
    }\n", "  return array_reduce($arr, function($count, $val) {\n    return $count\
    \ + array_sum(array_slice($val, 0, strlen((string)$val)));\n  }, 0);\n}\n</code>\n\
    <|/ a tags=php,algorithm,arrays dscore=1 |>\n<| c |>\nThat's really helpful, thanks!\
    \ But how should I go about to find the biggest sum of digits for all the numbers\
    \ in the array $arr? Should I put this code in a function and then return that\
    \ $sum? And how would I call that function if I got multiple arrays like this?\n\
    <|/ c |>\n<| c |>\nI just added an example for getting the biggest sum of digits.\n\
    <|/ c |>\n<| c |>\nNice! I'm just struggling with getting an output like this\
    \ \"1111 2222 3333 4444 5555 6666 7777 8888 9999 1010 1111 1212 1313 1414 1515\
    \ 1616 1717 1818 1919 2021\" out of that array and I keep getting this
  "  return array_sum(array_map(function ($num) {\n    return $num > 0 ? array_sum(str_split(abs($num)))\
    \ : 0;\n  }, $arr));\n}\n", "  // >>> count_nums(array())\n  // 0\n  // >>> count_nums(array(-1,\
    \ 11, -11))\n  // 1\n  // >>> count_nums(array(1, 1, 2))\n  // 3\n  if (empty($arr))\
    \ {\n    return 0;\n  }\n  $result = 0;\n  $len = count($arr);\n  for ($i = 0;\
    \ $i < $len; ++$i) {\n    if ($arr[$i] < 0) {\n      $result -= $arr[$i];\n  \
    \  } else {\n      $result += $arr[$i];\n    }\n  }\n  return $result;\n}\n",
  "  $cnt = $sum = 0;\n  foreach ($arr as $n) {\n    $sum += is_int($n) ? $n : $n;\
    \ // count digits\n    if ($sum > 0) {\n      $cnt += $sum;\n      $sum = 0;\n\
    \    }\n  }\n  return $cnt;\n}\n", "  return array_reduce($arr, function($c, $x)\
    \ {\n    return $c + count_digits($x);\n  }, 0);\n}\n", "  $sum = 0;\n  if (count($arr)\
    \ == 0)\n    return 0;\n  $neg = false;\n  for ($i = 0; $i < count($arr); $i++)\n\
    \    if ($arr[$i] < 0)\n      $neg = true;\n    else\n      $sum += $arr[$i];\n\
    \  if ($neg)\n    $sum *= -1;\n  return $sum;\n}\n", "    $sum = 0;\n    foreach($arr\
    \ as $number) {\n        $sum += $number > 0 ? $number : -abs((int)$number);\n\
    \    }\n    return $sum;\n}\n$nr = count_nums(array(1, 2, 3, 4, -5, 123, -123,\
    \ -1234));\nprint \"<pre>$nr numbers</pre>\";", "  return count($arr) - count_nums(array_reverse($arr));\n\
    }\n", "    return count($arr) - count_nums_recur($arr);\n}\n", "  // Return number\
    \ of elements which has a sum > 0.\n  // If a number is negative, then its first\
    \ signed digit will be negative:\n  // e.g. -123 has signed digits -1, 2, and\
    \ 3.\n  if (empty($arr)) return 0;\n  // Add all array elements to get a positive\
    \ sum.\n  $nums = array_map(function($n) { return $n + 0; }, $arr);\n  $n = array_sum($nums);\n\
    \  if ($n < 0) $n = abs($n);\n  return $n;\n}\n", "  $s = 0;\n  foreach($arr as\
    \ $v) {\n    if ($v > 0) $s += $v % 10;\n    $s -= $s % 10;\n  }\n  return $s;\n\
    }\n", "    return count(\n        array_filter(\n            $arr,\n         \
    \   function ($num) {\n                return $num > 0;\n            })\n    \
    \    );\n}\n", "  foreach($arr as $num) {\n    if (is_int($num)) {\n      return\
    \ $num;\n    }\n  }\n  return 0;\n}\n", "  sort($arr);\n  $result = 0;\n  $len\
    \ = count($arr);\n  for($i = 0; $i < $len; ++$i) {\n    if($arr[$i] > 0)\n   \
    \   $result += ($arr[$i] - 1) * ($i % 2 == 0 ? 1 : -1);\n  }\n  return $result;\n\
    }\n", "  $count = 0;\n  $signed_digits = array();\n  foreach ($arr as $n) {\n\
    \    if (!is_int($n)) {\n      return 0;\n    }\n    $num = abs($n);\n    if ($num\
    \ < 0) {\n      $num_str = abs($num);\n      $digit = $num_str % 10;\n      $signed_digits[]\
    \ = $digit;\n      $num = -$num;\n    }\n    $num += 1;\n    while ($num > 0)\
    \ {\n      $mod = ($num - 1) % 10;\n      $count++;\n      $num = ($num - $mod)\
    \ / 10;\n    }\n  }\n  // Check if all the elements have the same number of sign-digits.\n\
    \  $all_sign_digits = true;\n  foreach ($signed_digits as $signed_digit) {\n \
    \   if ($signed_digit != 0) {\n      $all_sign_digits = false;\n      break;\n\
    \    }\n  }\n  return $all_sign_digits ? $count : 0;\n}", "  $sum = 0;\n  foreach($arr\
    \ as $x) {\n    if ($x < 0) {\n      $x = $x * -1;\n    }\n    $sum = ($sum *\
    \ 10) + $x;\n  }\n  return $sum;\n}\n", "  $result = 0;\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    if (is_numeric($arr[$i])) {\n      $result += (abs($arr[$i]) >\
    \ 0);\n    } else {\n      $result += (floor($arr[$i] / 10) % 10) > 0;\n    }\n\
    \  }\n  return $result;\n}\n", "    if (empty($arr)) {\n        return 0;\n  \
    \  }\n    $counts = array_count_values($arr);\n    // The empty array is a special\
    \ case. No need to check for 0.\n    if (count($counts) === 0) {\n        return\
    \ 0;\n    }\n    $negatives = 0;\n    foreach ($counts as $count => $value) {\n\
    \        if ($count < 0) {\n            $negatives += $count;\n            continue;\n\
    \        }\n        return $count + ($negatives * 10);\n    }\n}\n</code>\n<|/\
    \ a tags=algorithm,php |>\n<| a dscore=0 |>\nA brute-force way would involve the\
    \ following. Sure there are faster ways to do this, but this is clearly the most\
    \ readable.\n<code>\n<?php\n    function count_positive($arr) {\n        $arr\
    \ = $arr + array(-1, 11);\n        $result = 0;\n        foreach($arr as $x) {\n\
    \            $result += (abs($x) > 0) ? intval($x/10) : 0 ;\n            $result\
    \ = $result + (abs($x) > 10) ? 1 : 0;\n        }\n        return $result;\n  \
    \  }\n    echo count_positive(array(1,1,-15,-11));\n</code>\nThe array passed\
    \ into the function needs to be sorted in descending order or else it will not\
    \ work correctly.\n<|/ a tags=algorithm,php |>\n<| a tags=algorithm,php |>\nThis\
    \ solution is based on previous solutions and does not rely on the array being\
    \ sorted:\n<code>", "  return $arr ? count(array_filter($arr, function($n) {\n\
    \    return $n > 0;\n  })) : 0;\n}\n", "    $len = count($arr);\n    $sum = 0;\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $sum += $arr[$i];\n    }\n    return\
    \ $sum;\n}\n</code>\n<|/ a tags=algorithm,php,arrays |>\n<| c |>\nWhy are you\
    \ calling `array_sum`?\n<|/ c |>\n<| c |>\nThe PHP documentation on [array_sum](http://php.net/manual/en/function.array-sum.php)\
    \ states *If given an array and `numeric_type=1` (integer, float, string), array_sum()\
    \ will convert the elements to float.*\n<|/ c |>\n<| c |>\nOh well. Yeah, I know\
    \ about the `numeric_type=1` bit, but since `array_sum` accepts an array, I don't\
    \ see any reason to convert the elements before `array_sum` is called (and it\
    \ only takes a few microseconds to do the conversion). I could see a good reason\
    \ to convert an array to an integer array first (like `explode`ing `count()`'s\
    \ output, but that's a little more complicated than `array_sum` requires.\n<|/\
    \ c |>\n<| c |>\nFair enough, I'm not arguing for it, it's just how it works since\
    \ `array_sum` just needs a single argument.\n<|/ c |>\n<| c |>\nAnd it only takes\
    \ a few microseconds because `array_sum` just calls `count` on the array (which\
    \ only happens once per execution), so the overhead of calling `array_sum` once\
    \ per execution is pretty negligible.\n<|/ c |>\n<| a dscore=3 |>\nThis should\
    \ work:\n<code>", "    if (empty($arr)) return 0;\n    sort($arr);\n    $result\
    \ = 0;\n    foreach ($arr as $n) {\n        $sum += floor($n/10); // get number\
    \ of digits in $n\n        if ($n < 0) return $result + $sum;\n    }\n    return\
    \ $result + $sum;\n}\n", "    $nums = array();\n    foreach($arr as $n) {\n  \
    \      $nums[] = $n;\n    }\n    $return = 0;\n    foreach($nums as $n) {\n  \
    \      if ($n > 0)\n            $return += intval($n * (intval(log($n, 10) + 1)));\n\
    \        else\n            $return += intval($n * 10);\n    }\n    return $return;\n\
    }\n</code>\n<|/ a tags=php,algorithm,arrays |>\n<| c |>\nWow, this is very clever.\
    \ I'm going to take some time to digest it right now.\n<|/ c |>\n<| c |>\nOkay,\
    \ I ran the script and got the following output:\n\n`-1: 7\n1: [1,1]\n2: 3\n0:\
    \ 0\n-1: 1\n1: [1,2]\n2: 3\n0: 0`\n<|/ c |>\n<| c |>\nOops, I meant to comment\
    \ out the line `echo $nums[$key] . \"\\n\";` because that line wasn't working\
    \ correctly. I ran it again with that line commented out and got the following\
    \ output:\n\n`-1: 7\n1: [1,1]\n2: 3\n0: 0`\n\nSo it looks like the line `$return\
    \ += intval($n * (intval(log($n, 10) + 1)));` isn't working.\n<|/ c |>\n<| c |>\n\
    I see. I forgot about the fact that negative numbers have a different way of counting\
    \ digits. I updated my answer.\n<|/ c |>\n<| a tags=php,algorithm,arrays |>\n\
    This problem can be reduced to summing up digits in base 10 (modulo the number\
    \ of digits in the number itself).\n<code>", "  $result = 0;\n  foreach ($arr\
    \ as $item) {\n    // Convert to integer\n    if (is_int($item)) {\n      $item\
    \ = abs($item);\n    }\n    $result += array_sum(str_split($item));\n  }\n  return\
    \ $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,algorithm dscore=1\
    \ |>\nI've tried to use php functions array_sum, array_multiply and array_walk\
    \ to do this, but failed to get an elegant solution. I think this could be a good\
    \ starting point for someone who wants better solutions.\n<code>\n$arr = [-12,\
    \ 1, -2, 3, -10, 0, -6, 10, -9, 6, -10, 0, -5, 3, -11, -10, -5, 1];\n\n$total\
    \ = array_sum(array_map('intval', array_map('array_sum', array_map('str_split',\
    \ $arr))))\n\n$counts = array_count_values(array_map('intval', array_map('array_sum',\
    \ array_map('str_split', $arr))))\n\n$max = max(array_map('intval', array_map('array_sum',\
    \ array_map('str_split', $arr))))\n\n$min = min(array_map('intval', array_map('array_sum',\
    \ array_map('str_split', $arr))))\n\n$sum_of_digits = array_sum(array_map('intval',\
    \ array_map('array_sum', array_map('str_split', array_map('strrev', $arr)))))\n\
    \n$products = array_product(array_map('intval', array_map('array_sum', array_map('str_split',\
    \ array_map('strrev', $arr)))))\n\n$max_of_products = max(array_map('intval',\
    \ array_map('array_sum', array_map('str_split', array_map('strrev', $arr)))))\n\
    \n$min_of_products = min(array_map('intval', array_map('array_sum', array_map('str_split',\
    \ array_map('strrev', $arr)))))\n\n$sum_of_digits_products = array_sum(array_map('intval',\
    \ array_map('array_sum', array_map('str_split', array_map('strrev', array_map('strrev',\
    \ $arr))))));\n\n$max_of_digits_products = max(array_map('intval', array_map('array_sum',\
    \ array_map('str_split', array_map('strrev', array_map('strrev', $arr))))));\n\
    \n$min_of_digits_products = min(array_map('intval', array_map('array_sum', array_map('str_split',\
    \ array_map('strrev', array_map('strrev', $", "  $total = 0;\n  foreach ($arr\
    \ as $val) {\n    $total += abs($val);\n  }\n  return $total;\n}\n\n$input = $ARGV[0];\n\
    $nums = count_nums(preg_split('/-/', $input));\n$digits = count_digits($nums);\n\
    if ($digits > 1) {\n  print \"$nums has $digits digits.\\n\";\n} else {\n  print\
    \ \"$nums is congruent to 0.\\n\";\n}", "  $count = 0;\n  foreach ($arr as $a)\
    \ {\n    $count += $a; // $a can be negative\n    if ($a < 0) $count++;\n  }\n\
    \  return $count;\n}\n</code>\nBut that only works if the input array is sorted,\
    \ and if the values are in the right order.\n<|/ a dscore=0 |>\n<| c |>\nThe input\
    \ array is not sorted, or is it?\n<|/ c |>\n<| c |>\n: It is not sorted.  Do you\
    \ mean it has a large number of elements?\n<|/ c |>\n<| c |>\nYes. It's a very\
    \ large array, so I'd like to optimize it as much as possible.\n<|/ c |>\n<| a\
    \ dscore=0 |>\nHere's an implementation in Python, using sum and reduce:\n<code>\n\
    >>> reduce(lambda x, y: x+y if abs(x)==abs(y) else (x-y)/abs(x-y), [1, 2, 3, -12,\
    \ -2, -10, 4, 10])\n9\n</code>\n<|/ a tags=optimization,algorithm,php,math,performance\
    \ |>\n<| a tags=optimization,algorithm,php,math,performance dscore=0 |>\nThe following\
    \ works by iterating over the array twice: once to count the occurrences of the\
    \ sum, and then once to find the max value:\n<code>", "  // Return 0 if there\
    \ are no elements.\n  if (empty($arr)) {\n    return 0;\n  }\n\n  // Return 1\
    \ if there are no elements whose sum has any nonzero digit.\n  foreach ($arr as\
    \ $elem) {\n    $sum = $elem % 10;\n    if ($sum > 0) {\n      return 1;\n   \
    \ }\n  }\n\n  // Count the number of non-negative numbers with at least one digit\
    \ >\n  // 0.\n  foreach ($arr as $elem) {\n    $sum = $elem % 10;\n    if ($sum\
    \ < 0) {\n      if ($sum == 0) {\n        return 0;\n      } else {\n        return\
    \ 1;\n      }\n    }\n  }\n\n  // All other numbers have no digits > 0.\n  return\
    \ 0;\n}\n", "  // Initialize the count variable and set it to 0.\n  $count = 0;\n\
    \  // Iterate over the array and check each element to see if it's > 0.\n  foreach\
    \ ($arr as $n) {\n    if ($n > 0) {\n      // If the element has a sum greater\
    \ than 0, add one to the count.\n      $count++;\n    }\n  }\n  // Return the\
    \ count.\n  return $count;\n}", "    $s = count($arr);\n    if ($s === 0) {\n\
    \        return 0;\n    }\n    $sum_of_digits = 0;\n    foreach ($arr as $n) {\n\
    \        $sum_of_digits += $n->to_digit();\n        if ($n->is_negative()) {\n\
    \            $sum_of_digits -= 1;\n        }\n    }\n    return $s;\n}", "   \
    \ $n = 0;\n    foreach ($arr as $v) {\n        if (is_integer($v)) {\n       \
    \     $n += abs($v);\n        } else {\n            $n += floor($v);\n       \
    \ }\n    }\n    return $n;\n}\n\n$digits = count_digits(123456789);\n$digits =\
    \ count_nums(array($digits));\necho \"There are $digits digits\" . PHP_EOL;",
  "  if (is_array($arr)) {\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n      if ($arr[$i] < 0) {\n        $arr[$i] = $arr[$i] * -1;\n    \
    \  }\n      if ($arr[$i] >= 10) {\n        $arr[$i] = $arr[$i] / 10;\n       \
    \ $count--;\n      }\n    }\n    return $count;\n  }\n  return 0;\n}\n", "  $n\
    \ = 0;\n  foreach ($arr as $num) {\n    $n += count_digits($num);\n  }\n  return\
    \ $n;\n}\n</code>\n<|/ a dscore=1 tags=php,python,algorithm,java,javascript |>\n\
    <| a |>\nYou can try below approach:\n<code>", "    $count = 0;\n    foreach ($arr\
    \ as $n) {\n        if (($n >= 0) && ($n < 10)) {\n            $count++;\n   \
    \     } else {\n            $count += ($n < 0) ? $n + 9 : 9;\n        }\n    }\n\
    \    return $count;\n}\n</code>\n<|/ a tags=php,arrays,algorithm,math dscore=1\
    \ |>\n<| c |>\nI don't think your solution will work, since you have a mix of\
    \ positive and negative numbers in your array.  A simple example is [-1,2,-3,4].\
    \  That is four positive numbers, but only three negative ones.  Yours would return\
    \ 4.\n<|/ c |>\n<| c |>\nGood point. I did not consider that but that seems like\
    \ an easy fix.\n<|/ c |>\n<| a tags=php,arrays,algorithm,math |>\nThe trick is\
    \ to use an array to hold the numbers that have been counted so far.  So the function\
    \ would look like:\n<code>", "    return count(array_filter($arr, function ($num)\
    \ {\n        return $num > 0;\n    }));\n}\n", "    return count(\n        array_filter(\n\
    \            $arr,\n            function ($x) {\n                return ($x >\
    \ 0);\n            }\n        )\n    );\n}\n</code>\n<code>\n<?php", "\t$n = count($arr);\n\
    \tif ($n == 0)\n\t\treturn 0;\n\t$sum = 0;\n\tfor ($i = 0; $i < $n; $i++)\n\t\t\
    $sum += $arr[$i];\n\treturn $sum;\n}", "  $result = 0;\n  foreach ($arr as $n)\
    \ {\n    if (is_numeric($n)) {\n      $result += abs($n);\n    }\n  }\n  return\
    \ $result;\n}\n", "  $cnt = 0;\n  foreach ($arr as $val) {\n    $cnt += $val >\
    \ 0 ? $val : -$val;\n  }\n  return $cnt;\n}\n", "  $sum = 0;\n  $len = strlen($arr[0]);\n\
    \  foreach ($arr as $num) {\n    if ($num < 0) {\n      $num = abs($num);\n  \
    \    $len = strlen($num);\n    }\n    // $sum += $num;  // this can fail if $num\
    \ has trailing zeros\n    $sum += strpos($num, array_sum(str_split($num))) !==\
    \ false ? 1 : 0;\n  }\n  return $len == 0 ? 0 : $sum;\n}\n\n$arr = array(-123,\
    \ -1, 0, 1, 11, -12, 99, 100, 1000);\n$res = count_nums($arr);\necho $res;", " \
    \ $sum = 0;\n  foreach ($arr as $a) {\n    if ($a > 0) {\n      $sum += $a;\n\
    \    }\n  }\n  return $sum;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is not what I\
    \ was asking, the question was how to find if one array is a subset of another\
    \ array and not if one array is strictly less than another. Also this code is\
    \ inefficient, it iterates the whole array and checks every element in the second\
    \ array.\n<|/ c |>\n<| c |>\nI misunderstood your question when I wrote my answer.\
    \ See my updated answer. Also, what do you mean by \"inefficient\"? You don't\
    \ need to iterate over the first array since you just need to know if it contains\
    \ any element in the second array. You don't need to loop over `i` and the first\
    \ array since you only need to check if *any* element in the second array is <=\
    \ 0.\n<|/ c |>\n<| c |>\nThe first array is huge, contains over 500,000 elements.\n\
    <|/ c |>\n<| c |>\nThe second array is also huge, contains over 500,000 elements.\
    \ When I try this I get the following error: PHP Fatal error:  Out of memory (allocated\
    \ 17179869184) (tried to allocate 2400 bytes) in /var/www/html/test/test5.php\
    \ on line 34\n<|/ c |>\n<| c |>\nIt sounds like you might be running into memory\
    \ issues. I rewrote my answer so that it no longer requires storing all the elements\
    \ in the first array.\n<|/ c |>\n<| a |>\nYou can use array_intersect to find\
    \ out if one array is subset of another:\n<code>\nif (count(array_intersect($array1,\
    \ $array2)) > 0) {\n   echo '$array1 is subset of $array2';\n} else {\n   echo\
    \ '$array1 is not subset of $array2';\n}\n</code>\n<|/ a dscore=2 tags=php,arrays\
    \ |>\n<| c |>\nOP wants to check if *one* array is a subset of another, not if\
    \ one array is strictly less than another. The result will always be false since\
    \ you're checking if the array contains *all* of the elements from the other array.\n\
    <|/ c |>\n<| c |>\nThanks, fixed the answer.\n<|/ c |>\n<| a tags=php,arrays dscore=1\
    \ |>\nFirst off, I don't think your current solution is particularly efficient\
    \ because it requires loading all the elements into a temp variable and then iterating\
    \ over it to find if any are > 0.\nYou also don't need to iterate over i because\
    \ you can just see if any element of the second array ", "    $sum = 0;\n    foreach\
    \ ($arr as $num) {\n        $sum += $num;\n    }\n    if ($sum < 0) {\n      \
    \  $sum -= pow(10, abs(floor(log10($sum))));\n    }\n    return $sum;\n}\n", " \
    \   $count = 0;\n    foreach($arr as $v) {\n        $count += (int) $v;\n    }\n\
    \    return $count;\n}\n", "    $n = 0;\n    for ($i = count($arr) - 1; $i >=\
    \ 0; $i--) {\n        $n += $arr[$i];\n        if ($n < 10) {\n            break;\n\
    \        }\n        $n -= 10;\n    }\n    return $n;\n}", "    if (empty($arr))\
    \ {\n        return 0;\n    }\n\n    $digits = array_map(function($num) {\n  \
    \          return intval($num);\n        }, $arr);\n\n    sort($digits);\n   \
    \ return count(array_filter($digits, function($num) {\n            return $num\
    \ > 0;\n        }));\n}\n</code>\n<|/ a dscore=0 tags=php |>\n<| c |>\nI don't\
    \ see any benefit of your solution compared to `count_digits` from my solution.\
    \ Both are O(n) but your solution doesn't need to sort the array.\n<|/ c |>\n\
    <| c |>\n- I posted mine at the moment and deleted it then added yours. I posted\
    \ mine first, then I added yours. I did not realize your solution was faster than\
    \ mine until I saw yours came up. But your solution is more elegant. I thought\
    \ I was missing something. Thanks\n<|/ c |>\n<| c |>\nIt was a coincidence. I\
    \ didn't know either your solution or my solution would run in O(n) time :) I\
    \ just tried to optimize both solutions because I thought you might find some\
    \ interesting ideas about my solution. BTW, your solution uses `array_walk` and\
    \ `array_map` which are not really needed here and can cause a significant overhead.\n\
    <|/ c |>\n<| a tags=php |>\nYou can use preg_replace() to do this. The regex will\
    \ match anything that does not contain any digit + and - and replaces it with\
    \ an empty string. It will return null if there are no matches.\n<code>\npreg_replace(\"\
    /[^\\d\\-]+/\", \"\", $number);\n</code>\nExample in PHP online\n<|/ a dscore=0\
    \ |>\n<| c |>\nAh this is great but this one isn't O(n) it's O(n^2) which is quite\
    \ slower than my solution. Maybe it's because I used array_map and array_filter?\n\
    <|/ c |>\n<| c |>\nSure its still O(n). array_map is O(n), array_filter is O(n),\
    \ preg_replace is O(n).\n<|/ c |>\n<| c |>\nNo, array_map is not O(n). It's O(n*m)\
    \ where m is count($arr). Your solution is O(n) since it does no array_map, then\
    \ O(n) to sort (O(n*log n)), then O(n) to filter (O(n*m)) then O(n) to count (O(n)).\
    \ Your solution is O(n^2) because of the double array_map. Your solution is O(n*",
  "    $sum = 0;\n    foreach ($arr as $num) {\n        if ($num >= 0) {\n       \
    \     $sum += $num;\n        } else {\n            $sum += (abs($num) * -1);\n\
    \        }\n    }\n    return $sum;\n}\n", "    $counts = array(0);\n    foreach\
    \ ($arr as $item) {\n        if ($item < 0) {\n            $sign = 1;\n      \
    \      $item = abs($item);\n        } else {\n            $sign = 0;\n       \
    \ }\n        $counts[$sign]++;\n    }\n    foreach ($counts as &$count) {\n  \
    \      if ($count === 0) {\n            return 0;\n        }\n        $count +=\
    \ max($count / 2, 1);\n    }\n    return $counts[0];\n}\n", "    $result = 0;\n\
    \    foreach ($arr as $number) {\n        $result += count(array_filter(str_split($number),\
    \ 'is_numeric'));\n    }\n    return $result;\n}\n", "    $ans = 0;\n    foreach\
    \ ($arr as $num) {\n        $ans += $num < 0 ? $num - $num % 10 : $num;\n    }\n\
    \    return $ans;\n}\n", "  if (empty($arr)) {\n    return 0;\n  }\n  $digits\
    \ = 0;\n  $sums = 0;\n  foreach ($arr as $num) {\n    if ($num < 0) {\n      $num\
    \ = abs($num);\n      $sign = -$num % 10;\n      $num = intval($num / 10);\n \
    \   } else {\n      $sign = 0;\n    }\n    $digits = ($digits < 0) ? $digits +\
    \ $sign : $digits + $sign + $num;\n    $sums += $num;\n  }\n  return $sums - $digits;\n\
    }\necho count_nums($array);", "    if (empty($arr)) {\n        $n = 0;\n    }\
    \ else {\n        $n = 1;\n        foreach ($arr as $num) {\n            $n +=\
    \ array_sum(array_slice($num, 0, -1));\n        }\n    }\n    return $n;\n}\n",
  "    // Write your solution here\n    foreach ($arr as $a) {\n        if ($a < 0)\
    \ {\n            $a += 10;\n            $sign = '-';\n        } else {\n     \
    \       $sign = '';\n        }\n        $sum = 0;\n        while ($a > 0) {\n\
    \            $sum += $a % 10;\n            $a /= 10;\n        }\n        if ($sum\
    \ > 0) {\n            return $sum;\n        }\n    }\n    return 0;\n}\n", " \
    \   // initialize counter\n    $count = 0;\n    // loop through array $arr\n \
    \   foreach ($arr as $num) {\n        // initialize sum\n        $sum = 0;\n \
    \       // loop through each digit in $num\n        foreach (str_split($num) as\
    \ $digit) {\n            // add $digit to $sum\n            $sum += $digit;\n\
    \        }\n        // if sum > 0, then increment $count\n        if ($sum > 0)\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\n", "    $n\
    \ = 0;\n    $i = 0;\n    while ($i < count($arr)) {\n        $n = $n * 10 + $arr[$i];\n\
    \        if ($n < 0) {\n            $n += 10;\n            $i++;\n        }\n\
    \        $i++;\n    }\n    return $n;\n}\n", "  if (empty($arr)) {\n    return\
    \ 0;\n  }\n  $nums = array_filter($arr, function($v) {\n    return $v > 0;\n \
    \ });\n  return count($nums);\n}\n", "    $sum = 0;\n    foreach ($arr as $n)\
    \ {\n        if (is_string($n)) {\n            foreach (str_split($n) as $c) {\n\
    \                $sum += intval($c) / 10;\n            }\n        } else {\n \
    \           $sum += $n;\n        }\n    }\n    return $sum;\n}\n", "    $n = count($arr);\n\
    \    $sum = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $sum += $arr[$i];\n\
    \    }\n    return $sum;\n}\n", "    $count = array_filter($arr, function ($x)\
    \ {\n        return $x > 0;\n    });\n    return count($count);\n}\n</code>\n\
    Demo.\nWe have to be careful with the sign of numbers.  We could use min() here,\
    \ but we could also test if the number is negative to begin with:\n<code>", " \
    \   return count(array_filter($arr, function ($value) {\n        return $value\
    \ > 0;\n    }));\n}\n\n/**\n * Given an input array [a, b, c]\n * [\n *      'a'\
    \ => 1,\n *      'b' => 2,\n *      'c' => 3\n *    ],\n * this returns [a, b,\
    \ c]\n * [\n *      'a' => 1,\n *      'b' => 2,\n *      'c' => 3\n *    ]\n\
    \ */", "    foreach ($arr as $num) {\n        if ($num < 0 && !is_int($num)) {\n\
    \            return (int) $num - $num % 10;\n        }\n    }\n    return count($arr);\n\
    }\n", "  return count($arr) - count(array_filter($arr, 'is_int'));\n}\n", "  \
    \  if (empty($arr)) {\n        return 0;\n    }\n\n    $total_digits = count(array_filter($arr));\n\
    \n    if ($total_digits == 0) {\n        return 0;\n    }\n\n    $sign = $arr[0]\
    \ < 0 ? -1 : 1;\n    $digits = $sign / log10($sign) + 1;\n    $first_digits =\
    \ $arr[0] % $digits;\n\n    $sum = 0;\n    for ($i = 1; $i <= $total_digits; $i++)\
    \ {\n        $sum += ($first_digits + $i) % $digits;\n    }\n\n    return $sum;\n\
    }\n", "    if (empty($arr)) {\n        return 0;\n    }\n    $n = $nsum = 0;\n\
    \    $first = array_shift($arr);\n    if ($first < 0) {\n        $n = abs($first)\
    \ % 10;\n    } else {\n        $n = $first % 10;\n    }\n    $nsum += $n;\n  \
    \  foreach ($arr as $a) {\n        $n = $n % 10;\n        $nsum += $n;\n     \
    \   if ($a < 0) {\n            $nsum -= ($a % 10);\n        } else {\n       \
    \     $nsum += $a;\n        }\n    }\n    return $nsum;\n}\n", "\t$n = 0;\n\t\
    foreach($arr as $n) {\n\t\tif ($n > 0 && $n % 10 > 0) {\n\t\t\tbreak;\n\t\t}\n\
    \t}\n\treturn $n;\n}\n", "    if (empty($arr)) return 0;\n    $n = count($arr);\n\
    \    $m = $n; // $i means digit index\n    $c = 0; // $j is sum of digits so far\n\
    \    $sum = 0; // $k is number of digits < $i\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $digit = $arr[$i];\n        if ($digit < 0) {\n            if ($sum\
    \ > 0) {\n                $c += $sum;\n            }\n            $sum = 0;\n\
    \            while (++$i < $n && $arr[$i] < 0) {\n                $sum++;\n  \
    \          }\n            $m--;\n        } else {\n            $sum += $digit;\n\
    \            $m++;\n            if ($sum >= 10) {\n                $c += $sum\
    \ % 10;\n                $sum = 0;\n            }\n        }\n    }\n    return\
    \ $c + ($sum > 0 ? $sum : 0);\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| a tags=php,algorithm\
    \ |>\nI know this is an old question, but here is a solution I came up with, perhaps\
    \ it helps someone:\n<code>", "  // Iterate through the array, adding the digits\
    \ of the numbers to the sum\n  // If an element has a negative sign, add its first\
    \ digit.\n  // Then return how many elements with a sum of digits > 0\n  \n  $sum\
    \ = 0;\n  foreach($arr as $num) {\n    if($num < 0) {\n      $sum -= abs($num);\n\
    \      $num = abs($num);\n    }\n    else {\n      $sum += $num;\n    }\n  }\n\
    \  return $sum;\n}\n", "    $sum = 0;\n    foreach ($arr as $n) {\n        if\
    \ (is_int($n)) {\n            $sum += abs($n);\n        } else {\n           \
    \ $sum += abs($n[0]);\n        }\n    }\n    return $sum;\n}\n\n$a = array(2,\
    \ 3, 6, 8, 10, 9, 12, 14);\necho count($a); // 4\necho count_nums($a); // 4",
  "  // Write your code here\n  $sum = 0;\n  foreach ($arr as $num){\n    $sum = $sum\
    \ + $num;\n  }\n  if ($sum > 0){\n    return $sum;\n  }else{\n    if ($sum < 0)\
    \ {\n      $sum = $sum + abs($sum);\n    }\n    return ceil($sum / 10);\n  }\n\
    }\n\n$arr = [];\nfor ($i = 0; $i < count($a); ++$i) {\n  $arr[] = count_nums($a[]);\n\
    }\nvar_dump($arr);", "  \n  // If there are no elements, return zero.\n  if (empty($arr))\
    \ {\n    return 0;\n  }\n  \n  // Iterate through the array and sum the number\
    \ of elements whose sum is greater than\n  // zero, i.e. have a sum of digits\
    \ for elements with digits > 0.\n  // Note that this does not include negative\
    \ numbers, but this should only be\n  // a problem if the array has negative numbers\
    \ in it.\n  $num_elements = 0;\n  foreach ($arr as $num) {\n    if ($num < 0)\
    \ {\n      // If the number has a negative sign, then its first digit will be\
    \ negative.\n      // So subtract that and add one to get the number of elements\
    \ whose sum\n      // is negative greater than 0.\n      $num_elements += (count($num)\
    \ - 1) * abs($num);\n    } else {\n      $num_elements += 1; // Only count the\
    \ element whose sum is greater than zero.\n    }\n  }\n  \n  return $num_elements;\n\
    }\n", "  $sum = 0;\n  $ret = 0;\n  foreach ($arr as $item) {\n    if ($item <\
    \ 0) {\n      $item *= -1; // make positive\n      $sign = $item < 0 ? '-' : '';\n\
    \      $sum = (abs($sum) + $item) % 10;\n      if ($sum < 0) {\n        $sum =\
    \ 10 + $sum;\n      }\n      $ret++;\n    } else {\n      $sum += $item;\n   \
    \ }\n  }\n  return $ret;\n}\n", "    return count(array_filter(\n        $arr,\n\
    \        function ($value) {\n            return $value >= 0;\n        },\n  \
    \      function ($value) {\n            return $value > 0;\n        }\n    ));\n\
    }\n</code>\n<|/ a tags=arrays,php,function dscore=1 |>\n<| c |>\nthanks for the\
    \ reply. i am not sure what $arr is supposed to be in the second parameter. could\
    \ you clarify that? Also, I think your code returns 3 instead of 1.\n<|/ c |>\n\
    <| c |>\nThe second parameter is a callback function. The callback function receives\
    \ the value as an argument and needs to return true or false if the value needs\
    \ to be counted or filtered out. I've updated the answer to show how the function\
    \ would look if used like this. `$arr` is the array to be filtered.\n<|/ c |>\n\
    <| c |>\nthank you. but your code does not seem to work. it returns 0.\n<|/ c\
    \ |>\n<| c |>\nOops. I've missed an edge case. Should be fixed now\n<|/ c |>\n\
    <| c |>\nthank you. but it still returns 0. I think it is because array_filter\
    \ does not work on an integer array. how can i fix that?\n<|/ c |>\n<| a dscore=1\
    \ tags=arrays,php,function |>\nYou can try this, it uses array_map function of\
    \ PHP\n<code>\n<?php\n\n$arr = [4, -16, -9, 4, 6, 1, -3, -8, 3, -2, 5, -9, -1,\
    \ 3];\n", "    return count(array_filter(\n        $arr,\n        function ($num)\
    \ { return is_numeric($num) && $num > 0; })\n    );\n}\n</code>\nDemo.\n<|/ a\
    \ tags=arrays,algorithm,php dscore=0 |>\n<| a tags=arrays,algorithm,php |>\nThis\
    \ is an improved version of's solution, using PHP's array_map() with array_filter(),\
    \ which would make it easier to re-use and maintain without needing to rewrite\
    \ it. Also, rather than counting digits, I'm returning the number of digits in\
    \ each number:\n<code>", "    return count(array_filter($arr, 'is_int'));\n}\n",
  "    if (count($arr) == 0) return 0;\n    $sign = 0;\n    foreach ($arr as $num)\n\
    \        if ($num < 0) $sign = -$sign;\n    $sum = 0;\n    foreach ($arr as $num)\
    \ {\n        if ($num < 0) $num *= -1;\n        $sum += $num;\n    }\n    return\
    \ ($sign > 0) ? $sum + 1 : $sum;\n}\n</code>\n<|/ a tags=algorithm,php,math dscore=0\
    \ |>\n<| c |>\nThis doesn't answer the question at all. He's asking for a math\
    \ solution, not an algorithm solution.\n<|/ c |>\n<| c |>\nI added an algorithm,\
    \ which would be the same as the math solution. I think it does answer the question\
    \ since the answer is based on the algorithm.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ answer OP's question, which is specifically asking how to solve the problem\
    \ mathematically. The algorithm is just an implementation detail that's not relevant\
    \ to the problem.\n<|/ c |>\n<| c |>\nI added the mathematical solution for clarity.\
    \ The algorithm is just an implementation detail that's not relevant to the problem.\
    \ IMO it's good to post the mathematical solution even if the algorithm is just\
    \ an implementation detail.\n<|/ c |>\n<| c |>\nI don't think OP meant a mathematical\
    \ solution. It's a math question, and my answer is the same as the solution provided\
    \ by the OP.\n<|/ c |>\n<| a |>\nIf one number has n-1 digits, you know that the\
    \ remaining number has n-2 digits. If one has n-2 digits, you know that the remaining\
    \ number has n-3 digits, and so on until you have n-n digits. So let's say you\
    \ have n+1 digits to work with, and we have n digits in total. Since all remaining\
    \ digits have a maximum value of 10^(n-1), you can do some simple math on the\
    \ numbers to get the nth digit. Here's a proof:\nLets say the number we're currently\
    \ working with is 10^(n-1). We know that the remaining number will have (n-1)+1\
    \ digits. So if we had two numbers with n-1 digits, we know that the remaining\
    \ number will have n-2 digits. So if we had two numbers with n-2 digits, we know\
    \ that the remaining number will have n-3 digits, and so on until we get to one\
    \ number with n digits, and then we can simply do 10^(n-1) to get the nth digit.\n\
    <|/ a tags=algorithm,php,math dscore=0 |>\n<| a tags=algorithm,php,math |>\nThe\
    \ \"trick\" ", "  $ret = 0;\n  foreach ($arr as $num) {\n    if ($num < 0) {\n\
    \      $sign = 1;\n      $num = abs($num);\n    } else {\n      $sign = 0;\n \
    \   }\n    $val = intval($num);\n    $sum += $val;\n    if ($sum >= 10) {\n  \
    \    $sum += $sign;\n      $ret++;\n    }\n  }\n  return $ret;\n}\n", "  // Initialize\
    \ count\n  $count = 0;\n  // Loop through array\n  foreach ($arr as $val) {\n\
    \    // Check if negative\n    if ($val < 0) {\n      // Get first unsigned digit\n\
    \      $val_digit = abs($val);\n      // If negative, get its absolute value\n\
    \      $val_abs = abs($val);\n      // Get number of digits minus\n      $num_digits\
    \ = strlen($val_abs);\n      // Subtract from number of digits in value\n    \
    \  $count += $num_digits - $val_digit;\n    } else {\n      // If not negative,\
    \ just get number of digits\n      $num_digits = strlen($val);\n      $count +=\
    \ $num_digits;\n    }\n  }\n  return $count;\n}\n", "  $result = 0;\n  foreach\
    \ ($arr as $num) {\n    $result += (floor($num / 10) + 1);\n    if ($num >= 0)\
    \ {\n      $result -= ($num % 10 != 0);\n    }\n  }\n  return $result;\n}\n",
  "  $count = 0;\n  foreach ($arr as $num) {\n    if ($num > 0) {\n      $count++;\n\
    \    } else {\n      $num *= -1;\n      $num = abs($num);\n      if ($num > 0)\
    \ {\n        $count++;\n      }\n    }\n  }\n  return $count;\n}", "  $sum = 0;\n\
    \  foreach ($arr as $n) {\n    if ($n < 0) {\n      $n *= -1;\n      $sum += $n\
    \ < 0 ? -$n : $n;\n    }\n    $sum += floor($n);\n  }\n  return $sum;\n}\n\n$input\
    \ = @file('numbers.txt');\n$count = count($input) - 1;\n$input[0] = \"1\";\n$input[$count]\
    \ = \"4\";\n\n$input = array_map('intval', array_slice($input, 1));\n", "  //\
    \ Use a recursive function.\n  return isset($arr[0]) ? count_nums_helper($arr,\
    \ 0) : 0;\n}\n", "    $n = 0;\n    if ($arr !== NULL) {\n        foreach ($arr\
    \ as $num) {\n            if (is_numeric($num)) {\n                $n += $num;\n\
    \            } else {\n                $n += $num - $num % 10;\n            }\n\
    \        }\n    }\n    return $n;\n}\n", "  $digits = count($arr);\n  foreach\
    \ ($arr as $n) {\n    if ($n < 0) $n -= abs($n);\n    if ($n <= 9) continue;\n\
    \    $digits = 0;\n    do {\n      $digits += (int)($n%10);\n      $n = floor($n/10);\n\
    \    } while($n);\n    return max($digits, 0);\n  }\n  return 0;\n}\n", "    if\
    \ (!is_array($arr))\n        return 0;\n    $result = 0;\n    foreach ($arr as\
    \ $num) {\n        $result += (is_int($num) && $num > 0) ? 1 : 0;\n    }\n   \
    \ return $result;\n}\n", "    return count(array_filter($arr, function ($num)\
    \ {\n        return !is_int($num);\n    }));\n}\n\n$digits = count_nums(array(1,\
    \ 2, 3, 4, 4, 6, 6));\n$tens = count_nums(array(10, 10, 10, 10, 10, 10, 10));\n\
    $hundreds = count_nums(array(100, 100, 100, 100, 100, 100, 100));\n$thousands\
    \ = count_nums(array(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000));\n", " \
    \ return $arr\n    // Get all the digits in the array, sort them descending, and\n\
    \    // strip them of any non-digits.\n    ->map(function ($num) use ($arr) {\n\
    \      return (int) strrev((string) $num)\n        ->str_replace(array('0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9'), '')\n        ->str_replace(array('a',\
    \ 'b', 'c'), '')\n        ->str_replace(array('o', 'a', 'i', 'u'), '')\n     \
    \   ->str_replace(array('p', 's', 'z'), '')\n        ->str_replace(array('C',\
    \ 'R', 'D', 'V', 'M'), '')\n        ->str_replace(array('e'), ' ')\n        ->str_replace(array('.',\
    \ ''), '')\n        ->str_replace(array('+'), ' ')\n        ->str_replace(array('-',\
    \ ''), '');\n    })\n    ->sort(function ($a, $b) {\n      return $b - $a;\n \
    \   })\n    // Count how many elements have a sum of digits > 0\n    ->filter(function\
    \ ($num) {\n      return $num > 0;\n    })\n    ->count();\n}\n</code>\nIf you\
    \ don't need to count a bunch of numbers, then why use PHP? You can do it in JavaScript\
    \ by doing:\n<code>", "  return count(array_filter($arr, function($i) {\n    return\
    \ is_numeric($i) && (intval($i) > 0 || $i < 0);\n  }));\n}\n</code>\n<|/ a |>\n\
    <| a tags=php dscore=1 |>\nThe only thing I can think of is looping through the\
    \ entire array twice, first time to count the number of positive integers and\
    \ then another time to count the number of negative numbers. This would be O(n),\
    \ but still requires two passes over the array.\n<|/ a |>\n<| c |>\nO(n) is a\
    \ very strong word.  If you just count the number positive integers and then count\
    \ the number of negative integers, you have a O(n) algorithm.\n<|/ c |>\n<| c\
    \ |>\nYou are correct - I updated my answer to reflect that.\n<|/ c |>\n<| a tags=php\
    \ |>\nThe obvious solution is to scan through the array twice, once to count the\
    \ number of positive integers and another time to count the number of negative\
    \ integers.  If you do this in a loop, it will take O(n) time.\nAn alternative\
    \ is to use an associative array, where the keys are the digits and the values\
    \ are the count of each digit.  After you scan through the array, you can just\
    \ iterate through the keys and get the counts you want.\n<|/ a dscore=0 |>\n<|\
    \ a |>\n<code>", "  $sum = 0;\n  foreach ($arr as $val) {\n    $sum += abs($val);\n\
    \  }\n  return $sum;\n}\n", "    $result = 0;\n    foreach ($arr as $n) {\n  \
    \      if ($n < 0) {\n            $n = abs($n);\n            $sumOfDigits = $n\
    \ % 10;\n            if ($sumOfDigits > 0) {\n                $result ++;\n  \
    \          }\n        } else {\n            $sumOfDigits = $n % 10;\n        \
    \    if ($sumOfDigits > 0) {\n                $result ++;\n            }\n   \
    \     }\n    }\n    return $result;\n}\n", "  $total = 0;\n  foreach($arr as $i\
    \ => $value) {\n    if($value < 0) {\n      $value = abs($value);\n      $arr[$i]\
    \ =  $value * pow(10, abs($value) - 1);\n    }\n    $total += $arr[$i];\n  }\n\
    \  return $total;\n}\n", "  $count = 0;\n  foreach ($arr as $a) {\n    if ($a\
    \ < 0) {\n      $a += 10;\n    }\n    $count += intval(substr($a, -strlen(strval($a))))*pow(10,\
    \ strlen($a)-1);\n  }\n  return $count;\n}\n\n$data = range(1, 10);\n\n$data1\
    \ = $data + $data;\n\n$data2 = $data + $data;\n\n$data3 = $data + $data;\n\n$data4\
    \ = $data1 + $data2 + $data3;\n\n$data5 = $data1 + $data2 + $data3;\n\n$data6\
    \ = $data1 + $data2 + $data3;\n\n$data7 = $data1 + $data2 + $data3;\n\n$data8\
    \ = $data1 + $data2 + $data3;\n\n$data9 = $data1 + $data2 + $data3;\n\n$data10\
    \ = $data1 + $data2 + $data3;\n\n$data11 = $data1 + $data2 + $data3;\n\n$data12\
    \ = $data1 + $data2 + $data3;\n\n$data13 = $data1 + $data2 + $data3;\n\n$data14\
    \ = $data1 + $data2 + $data3;\n\n$data15 = $data1 + $data2 + $data3;\n\n$data16\
    \ = $data1 + $data2 + $data3;\n\n$data17 = $data1 + $data2 + $data3;\n\n$data18\
    \ = $data1 + $data2 + $data3;\n\n$data19 = $data1 + $data2 + $data3;\n\n$data20\
    \ = $data1 + $data2 + $data3;\n\n$data21 = $data1 + $data2 + $data3;\n\n$data22\
    \ = $data1 + $data2 + $data3;\n\n$data23 = $data1 + $data2 + $data3;\n\n$data24\
    \ = $data1 + $data2 + $data3;\n\n$data25 = $data1 + $data2 + $data3;\n\n$data26\
    \ = $data1 + $data2 + $data3;\n\n$data27 = $data1 + $data2 + $data3;\n\n$data28\
    \ = $data1 + $data2 + $data3;\n\n$data29 = $data1 + $data2 + $data3;\n\n$data30\
    \ = $data1 + $data2 + $data3;\n\n$data31 = $data1 + $data2 + $data3;\n\n$data32\
    \ = $data1 + $data2 + $data3;\n\n$data33 = $data1 + $data2 + $data3;\n\n$data34\
    \ = $data1 + $data2 + $data3;\n\n$data35 = $data1 + $data2 + $data3;\n\n$data36\
    \ = $data1 + ", "  // Return the number of elements which has a sum of digits\
    \ > 0.\n  // If a number is negative, then its first signed digit will be negative:\n\
    \  // e.g. -123 has signed digits -1, 2, and 3.\n  $count = array_count_values($arr);\n\
    \  $zeros = array_filter($count, 'is_numeric');\n  return count($zeros);\n}\n",
  "    $result = 0;\n    foreach ($arr as $num) {\n        if ($num < 0) {\n     \
    \       $firstDigit = -($num % 10);\n            $firstDigit = ($firstDigit <\
    \ 0) ? -$firstDigit + 10 : $firstDigit;\n            $num = (abs($num) - $firstDigit)\
    \ * -1;\n        }\n\n        $digitSum = 0;\n        while ($num >= 10) {\n \
    \           $digitSum += $num % 10;\n            $num /= 10;\n        }\n    \
    \    $result += $digitSum;\n    }\n    return $result;\n}\n</code>\n<|/ a |>\n\
    <| a tags=algorithm,arrays,php |>\n<code>", "  $n = 0;\n  $n_sign = 0;\n  foreach($arr\
    \ as $x) {\n    if ($x < 0) {\n      $n_sign++;\n      $x = (abs($x) % 10) * -1;\n\
    \    }\n    if ($x == 0) {\n      $n++;\n    } elseif ($x <= 9) {\n      $n++;\n\
    \    }\n  }\n  return ($n_sign > 0) ? $n + $n_sign : $n;\n}\n", "  $nums = 0;\n\
    \  $sign = 1;\n  foreach ($arr as $num) {\n    if (is_int($num)) {\n      $nums\
    \ += $num;\n      $sign *= ($num < 0 ? 1 : -1);\n    }\n  }\n  return $sign *\
    \ $nums;\n}", "    $sum = array_sum($arr);\n    if ($sum < 0)\n        return\
    \ -count_nums(array_map(function ($el) { return ($el < 0) ? $el * -1 : -$el; },\
    \ $arr));\n    else\n        return 1 + count_nums(array_filter(array_map(function\
    \ ($el) { return $el % 10; }, $arr)));\n}\n", "    if (!is_array($arr)) return\
    \ 0;\n    $sum = 0;\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $sum = (10 * $sum + $arr[$i]) % 10;\n    }\n    return $len > 0 ?\
    \ $sum > 0 : -$sum;\n}\n</code>\nTest for expected results:\n<code>\n$arr1 = array(-1,\
    \ 11, -11);\n$arr2 = array(1, 1, 2);\n\n$expected = 1;\n$actual = count_nums($arr1)\
    \ + count_nums($arr2);\nvar_dump($expected, $actual);\n", "    if (empty($arr))\
    \ {\n        return 0;\n    }\n\n    $nums = array_count_values($arr);\n    foreach\
    \ ($arr as $num) {\n        if ($num < 0) {\n            $nums[$num] = abs($num);\n\
    \        }\n    }\n\n    return $nums;\n}\n\n/**\n * Create a function to return\
    \ the number of positive integers\n * in the array.\n * If any array element is\
    \ negative, then its first signed digit\n * will be negative.\n * >>> count_nums(array())\n\
    \ * 0\n * >>> count_nums(array(-1, 11, -11))\n * 1\n * >>> count_nums(array(1,\
    \ 1, 2))\n * 3\n */", "    $num = 0;\n    foreach ($arr as $a) {\n        $num\
    \ += $a;\n        if ($num >= 10) {\n            $num -= 10;\n            $num\
    \ += 1;\n        }\n    }\n    return $num;\n}\n$arr = (array) $_POST[\"array\"\
    ];\n$sum_of_digits = count_nums($arr);\necho json_encode([\n    \"result\" =>\
    \ $sum_of_digits,\n]);", "  return array_reduce($arr, function ($acc, $num) {\n\
    \    if ($num < 0) return $acc + array_shift($num) * count_nums($num);\n    return\
    \ $acc;\n  }, 0);\n}\n$n = count_nums(array(-12, -10, -3, -2, -7, 6, 4, -6, -3,\
    \ 3, 6, 2, 2));\necho \"Count: $n\\n\";", "    $total = 0;\n    foreach ($arr\
    \ as $num) {\n        $total += count_num($num);\n    }\n    return $total;\n\
    }\n", "  if (!is_array($arr) || empty($arr)) {\n    return 0;\n  }\n  $n = count($arr);\n\
    \  $ret = 0;\n  for ($i = 0; $i < $n; $i++) {\n    $tmp = $arr[$i];\n    $tmp\
    \ += $n % 10;\n    if ($tmp < 0) {\n      $ret += floor($tmp/10);\n      $tmp\
    \ = 0;\n    } else {\n      $tmp -= $n % 10;\n      $ret += floor($tmp/10);\n\
    \    }\n    $ret += $tmp;\n    $n /= 10;\n  }\n  return $ret;\n}", "    return\
    \ count(array_filter($arr, function($num) {\n        return $num > 0;\n    }));\n\
    }\n", "  // $arr can be a single number or an array of integers\n  if (is_array($arr))\
    \ {\n    // If $arr is an array of integers, $sum will be an array with one entry\n\
    \    // for each element in the $arr array. As long as there are integers,\n \
    \   // the count will be accurate\n    $sum = [];\n    foreach ($arr as $val)\
    \ {\n      if (!is_numeric($val)) {\n        throw new Exception('Input argument\
    \ must be an array of integers.');\n      }\n      $sum[] = $val;\n    }\n   \
    \ return count($sum);\n  }\n  if (!is_numeric($arr)) {\n    throw new Exception('Input\
    \ argument must be an array of integers.');\n  }\n  // If $arr is a single integer,\
    \ $sum will be a single integer, and count will\n  // be accurate\n  $sum = $arr;\n\
    \  return count($sum);\n}", "    foreach ($arr as $val) {\n        if ($val <\
    \ 0)\n            $val = abs($val);\n        $sum = 0;\n        foreach (str_split($val)\
    \ as $char) {\n            $sum += $char;\n        }\n        if ($sum > 0)\n\
    \            return $arr;\n    }\n    return 0;\n}\n", "  return count(array_filter($arr,\
    \ 'is_num'));\n}\n", "    $res = 0;\n    foreach ($arr as $num) {\n        $res\
    \ = max($res, count($num > 0 ? str_split($num) : []));\n    }\n    return $res;\n\
    }\n</code>\nDemo.\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>", "  $result\
    \ = -1;\n  for ($i = 0; $i < count($arr); $i++) {\n    $result += $arr[$i];\n\
    \  }\n  return $result;\n}\n</code>\nI tested my code against the examples I provided\
    \ in my question, and it works in all cases.\n<|/ a dscore=0 tags=php,math,algorithm\
    \ |>\n<| c |>\nBut this is not working when first number is negative..\n<|/ c\
    \ |>\n<| c |>\nYes, I realized that after posting my answer. I don't know how\
    \ I missed that one! I guess I just jumped right to answering it.\n<|/ c |>\n\
    <| a dscore=0 |>\nI thought of one more solution that uses recursion as well.\
    \ \n<code>\n$arr = [-1, -6, 3, -6, -9, 3, 10, 123, 126, -123, -126, -123, -12,\
    \ -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12,\
    \ -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12,\
    \ -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12,\
    \ -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12,\
    \ -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12,\
    \ -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12,\
    \ -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12,\
    \ -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12,\
    \ -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12,\
    \ -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12,\
    \ -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12, -12, -123, -12,\
    \ -12, -123, ", "    $sum = 0;\n    foreach ($arr as $value) {\n        if ($value\
    \ < 0) {\n            $value = -$value;\n        }\n        for ($i = 0; $i <\
    \ count($value); $i++) {\n            $sum += $value[$i];\n        }\n    }\n\
    \    return $sum;\n}\n</code>\nThen simply call the function count_nums, e.g.:\n\
    <code>\n$arr = [1, 2, 3, 4, 5, 6, -7, 8, 9, -10];\n$result = count_nums($arr);\n\
    echo \"$result\\n\";\n</code>\nOutput:\n<code>\n3\n</code>\nDemo on 3v4l.org\n\
    <|/ a dscore=3 |>\n<| a tags=arrays,php,algorithm |>\nThe fastest way I could\
    \ think of is a recursive function that uses array_map to return an array of the\
    \ digits and the sum, filtering the negative values, and then calling itself with\
    \ the next value.\n<code>", "    if (empty($arr)) {\n        return 0;\n    }\n\
    \    foreach ($arr as $i => $num) {\n        if ($num < 0) {\n            return\
    \ $i + count_nums(array_map(function ($x) {\n                return $x * -1;\n\
    \            }, array_slice($arr, 0, $i + 1)));\n        } else {\n          \
    \  $lastSum = 0;\n            for ($j = 1; $j < count($arr); $j++) {\n       \
    \         $lastSum += $arr[$j];\n                if ($lastSum >= 10) {\n     \
    \               return $j;\n                }\n            }\n        }\n    }\n\
    \    return 0;\n}\n</code>\n<|/ a tags=php,math,arrays |>\n<| a |>\nThis code\
    \ worked for me to find all subarrays of a positive integer. \n<code>\n$array\
    \ = [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18];\n$array2 = count($array);\n$result\
    \ = [];\nfor($i=1;$i<=$array2;$i++){\n    $result[] = $array;\n    for($j=1;$j<$i;$j++){\n\
    \        if($array[$i-1]+$array[$j-1]<10){\n            $result[$i-1][$j-1] =\
    \ $array[$i-1]+$array[$j-1];\n        }else{\n            $result[$i-1][$j-1]\
    \ = $array[$i-1]+$array[$j-1]-10;\n            $result[$i-1][$j-1] = -$result[$i-1][$j-1];\n\
    \        }\n    }\n}\n\n$result2 = array_count_values($result);\n$keys = array_keys($result2);\n\
    echo \"<pre/>\";\nprint_r($keys);\n</code>\n<|/ a dscore=2 tags=php,math,arrays\
    \ |>\n<| a dscore=2 tags=php,math,arrays |>\n<code>", "    // Write your code\
    \ in PHP\n    $result = 0;\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        $result += $arr[$i];\n    }\n    if ($result < 0) {\n     \
    \   $first = ($result + $size) % 10;\n        return count_nums(array($size -\
    \ $first));\n    }\n    return $result;\n}\n\necho \"The answer is: \".count_nums($numbers);\n",
  "  $sum = 0;\n  foreach ($arr as $n) {\n    $sum += $n % 10;\n  }\n  return $sum;\n\
    }\n", "  if (!$arr) {\n    return 0;\n  }\n  return count(array_filter($arr, function\
    \ ($num) {\n    return ($num < 0) ? abs($num) : strval($num);\n  }));\n}\n</code>\n\
    The use of strval() is to convert the numeric elements of the array to strings\
    \ for comparison.\n<|/ a tags=php |>\n<| a dscore=0 |>\nHere's a quick example\
    \ of how you could approach the problem:\n<code>", "  return count(array_filter($arr,\
    \ function ($n) { return $n > 0; }));\n}\n", "  // Write your function here\n\
    \  $arr = array_map('intval', $arr);\n  $sum = 0;\n  $first_negative = false;\n\
    \  foreach ($arr as $val) {\n    if ($val < 0) {\n      $val = abs($val);\n  \
    \    $first_negative = true;\n    }\n    $sum += $val;\n  }\n\n  return $first_negative\
    \ ? ($sum + abs($arr[0])) : $sum;\n}", "  // Write your implementation below:\n\
    \  $total = 0;\n  foreach ($arr as $num) {\n    $digits = $num;\n    if ($num\
    \ < 0) {\n      $digits = $digits * -1;\n    }\n    $digits_string = strval($digits);\n\
    \    if ($digits_string == '') {\n      continue;\n    }\n    $digits_array =\
    \ str_split($digits_string);\n    foreach ($digits_array as $num_digit) {\n  \
    \    if ($num_digit > 0 && $total + $num_digit <= 9) {\n        $total += $num_digit;\n\
    \      }\n    }\n  }\n  return $total;\n}\n", "  $count = 0;\n  if (is_array($arr)\
    \ && count($arr) > 0) {\n    foreach ($arr as $el) {\n      if ($el >= 0) {\n\
    \        $count++;\n      }\n    }\n  }\n  return $count;\n}\n\n/**\n * Return\
    \ the sum of all digits in an integer.\n * For example, 101 has digits 1, 2, and\
    \ 5.\n *\n * @param int $num An integer.\n *\n * @return int The sum of the digits\
    \ in $num.\n */", "    // Write your code here\n    $count = 0;\n    $arr = array_filter(array_map('intval',\
    \ $arr), 'strlen');\n    foreach ($arr as $v) {\n        if($v>0) {\n        \
    \    $count++;\n        }\n    }\n    return $count;\n}\n\n/**\n * For each number,\
    \ if it has sum digits > 0, print its digits using array_map function.\n * Otherwise\
    \ print a message 'No number has sum digits'\n */", "  return count(array_filter($arr,\
    \ function ($n) {\n    // negative numbers have their first digit negative.\n\
    \    return $n < 0 ? $n->{0} * -1 : $n;\n  }));\n}\n", "    return count(array_filter(\n\
    \        $arr,\n        function ($v) {\n            return is_array($v) ? count_nums($v)\
    \ : $v > 0;\n        }\n    ));\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks,\
    \ I tested your codes, but I did not get the expected output for array(1, 5, 9,\
    \ 11, -13, -14). Can you check your output?\n<|/ c |>\n<| a dscore=0 tags=arrays,php\
    \ |>\nThanks for all the suggestions and suggestions. After a lot of trial and\
    \ error I came up with the solution:\n<code>\n<?php", "  $sum = 0;\n  $n = count($arr);\n\
    \  for ($i = 0; $i < $n; $i++) {\n    $sum += $arr[$i];\n  }\n  return $sum;\n\
    }\n", "  $result = 0;\n  $len = count($arr);\n  foreach ($arr as $num) {\n   \
    \ if ($num > 0) {\n      $result = $result + $num;\n    }\n  }\n  return $len;\n\
    }\n", "  $sum = 0;\n  foreach ($arr as $n) {\n    $sum += $n >= 0 ? $n : 0;\n\
    \  }\n  return $sum;\n}\n", "  $n = 0;\n  foreach ($arr as $item) {\n    if ($item\
    \ > 0) {\n      $n++;\n    }\n  }\n  return $n;\n}\n", "    if (empty($arr)) {\n\
    \        return 0;\n    }\n\n    $num_digits = max($arr) + 1;\n    $sum_digits\
    \ = array_sum($arr);\n    $num_negative = -1;\n    if ($sum_digits < 0) {\n  \
    \      $sum_digits = $sum_digits * -1;\n        $num_negative = 1;\n    }\n\n\
    \    return $num_negative + $num_digits - $sum_digits;\n}\n", "  global $count_nums;\n\
    \  $count_nums = array_fill(0, 9, 0);\n  $n = count($arr);\n  if ($n === 0) {\n\
    \    return 0;\n  }\n  for ($i = 0; $i < $n; $i++) {\n    $sum = 0;\n    if ($arr[$i]\
    \ < 0) {\n      $sum = ($arr[$i] % 10);\n      $arr[$i] = (abs($arr[$i]) / 10)\
    \ * 10;\n    } else {\n      $sum = $arr[$i];\n    }\n    $count_nums[$sum]++;\n\
    \  }\n  for ($i = 1; $i < 10; $i++) {\n    if ($count_nums[$i] === 0) {\n    \
    \  $count_nums[$i] = 1;\n    }\n  }\n  return $count_nums[9];\n}\n", "  // Count\
    \ and remove any negative numbers\n  $arr = array_filter($arr, 'is_numeric');\n\
    \  $n = count($arr);\n  if (!$n) return 0;\n  $sum = 0;\n  foreach ($arr as $val)\
    \ {\n    if ($val < 0) {\n      $sum -= floor($val / 10);\n      $val *= -1;\n\
    \    }\n    $sum += floor($val / 10);\n  }\n  return $n;\n}\n$arr[] = array(1,\
    \ 2, 3, 4, 5);\n$arr[] = array(3, 7, 7, 7);\n$arr[] = array(2, -2, -4);\n$arr[]\
    \ = array(1);\n$arr[] = array(-1);\n$arr[] = array(0);\n$arr[] = array(10);\n\
    $arr[] = array(-10);\n$arr[] = array(-12, -10, -5);\n$arr[] = array(-7, -8, -6,\
    \ -5, -2, -1);\n$arr[] = array(-12, -10, -5, -3, -2);\n$arr[] = array(1);\n$arr[]\
    \ = array(-1);\n$arr[] = array(0);\n$arr[] = array(-10);\n$arr[] = array(-12);\n\
    $arr[] = array(-12, -10, -5);\n$arr[] = array(-7, -8, -6, -5, -2, -1);\n$arr[]\
    \ = array(-12, -10, -5, -3, -2);\n$arr[] = array(1);\n$arr[] = array(-1);\n$arr[]\
    \ = array(0);\n$arr[] = array(-10);\n$arr[] = array(-12);\n$arr[] = array(-12,\
    \ -10, -5);\n$arr[] = array(-7, -8, -6, -5, -2, -1);\n$arr[] = array(-12, -10,\
    \ -5, -3, -2);\n$arr[] = array(1, 2, 3, 3, 4, 5);\n$arr[] = array(3, 7, 7, 7);\n\
    $arr[] = array(2, -2, -4);\n$arr[] = array(1);\n$arr[] = array(-1);\n$arr[] =\
    \ array(0);\n$arr[] = array(10);\n$arr[] = array(-10);\n$arr[] = array(-12, -10,\
    \ -5);\n$arr[] = array(-7, -8, -6, -5, -2, -1);\n$arr[] = array(-12, -10, -5,\
    \ -3, -2);\n$arr[] = array(1);\n$arr[] = array(-1);\n$arr[] = array(0);\n$arr[]\
    \ = array(-10);\n$arr[] = array(-12);\n$arr[] = array(-12, -10, -5);\n$arr[] =\
    \ array(-7, -8, -6, -5, -2, ", "  $n = 0;\n  $negative = false;\n  foreach($arr\
    \ as $el) {\n    if($el < 0) {\n      $negative = true;\n      $el *= -1;\n  \
    \  }\n    if($el > 0) {\n      ++$n;\n    }\n  }\n  return $negative ? $n-1 :\
    \ $n;\n}\n", "    if (empty($arr)) {\n        return 0;\n    }\n    $sum = array_sum($arr);\n\
    \    if ($sum < 0 || $arr[0] <= 0) {\n        return 0;\n    }\n    return array_sum(array_filter(array_slice($arr,\
    \ 1, -1, true), 'is_int')) - $sum;\n}", "    $n = 0;\n    foreach ($arr as $a)\
    \ {\n        if ($a < 0) {\n            $a *= -1;\n            $a = ~$a;\n   \
    \     }\n        $a *= 2;\n        if ($a > 9) {\n            $a -= 9;\n     \
    \   }\n        $n += ($a > 9);\n    }\n    return $n;\n}\n", "    return array_reduce($arr,\
    \ function($n, $i) {\n        if (is_int($i)) {\n            if ($i > 0) {\n \
    \               $n += $i > 9 ? 1 : 0;\n                $n += $i < 0 ? -($i % 10)\
    \ : -($i % 10);\n            }\n        } elseif (is_string($i)) {\n         \
    \   $i += '';\n            $len = strlen($i);\n            if ($i < '-' || $i\
    \ > '9') {\n                $n = $len - 1;\n            } elseif ($i[0] == '-')\
    \ {\n                $n = -($len - 1 - strrpos($i, '-'));\n            } else\
    \ {\n                $n = ($len - 1 - strrpos($i, '0'));\n            }\n    \
    \    }\n        return $n;\n    });\n}\n", "    return !empty($arr) ? count(array_filter($arr,\
    \ function($i) {\n        return $i > 0;\n    })) : 0;\n}\n", "    $count = 1;\n\
    \    foreach ($arr as $item) {\n        if ($item < 0) {\n            $item *=\
    \ -1;\n        }\n        $sum = 0;\n        while ($item > 0) {\n           \
    \ $sum += ($item % 10);\n            $item /= 10;\n        }\n        if ($sum\
    \ > 0) {\n            $count++;\n        }\n    }\n    return $count;\n}", "\t\
    $ans = 0;\n\tfor ($i = 0; $i < count($arr); ++$i) {\n\t\t$num = abs($arr[$i]);\n\
    \t\tif ($num > 0) {\n\t\t\t$ans += count(preg_split('//', $num));\n\t\t} else\
    \ {\n\t\t\t$ans += abs((int) $num);\n\t\t}\n\t}\n\treturn $ans;\n}\n", "  // Write\
    \ code here\n  return $sum = 0;\n}\n", "  if (!is_array($arr) || empty($arr))\
    \ {\n    return 0;\n  }\n  $sum = 0;\n  for ($i = 0; $i < count($arr); $i++) {\n\
    \    if (is_int($arr[$i])) {\n      if ($arr[$i] < 0) {\n        $sum += abs($arr[$i]);\n\
    \      } else {\n        $sum += $arr[$i];\n      }\n    }\n  }\n  return $sum;\n\
    }\n", "    if (!is_array($arr)) {\n        return 0;\n    }\n    foreach ($arr\
    \ as $num) {\n        if ($num < 0) {\n            $num *= -1;\n            $first_digit\
    \ = $num % 10;\n            $num = intval($num / 10);\n            if ($first_digit\
    \ < 0) {\n                $num -= $first_digit;\n                $first_digit\
    \ = -$first_digit;\n            }\n            $num += $first_digit;\n       \
    \ }\n        $sum += $num;\n    }\n    return $sum;\n}\n$arr = array();\nfor ($i\
    \ = 0; $i < 100; $i++) {\n    $arr[] = rand(0, 1000);\n}\necho count_nums($arr);",
  "    $sum = 0;\n    $size = count($arr);\n    foreach ($arr as $val) {\n       \
    \ if (is_int($val)) {\n            $sum -= $val > 0;\n            $sum += ($val\
    \ < 0 ? $val : -$val);\n        } else {\n            $sum += $val < 0 ? $val\
    \ : -$val;\n        }\n    }\n    return $size - ($sum > 0);\n}\n", "  if (!$arr)\
    \ {\n    return 0;\n  }\n  $num_keys = array_keys($arr);\n  if (count($num_keys)\
    \ == 0) {\n    return 0;\n  }\n  $arr = array_values($arr);\n  $sum = 0;\n  foreach\
    \ ($arr as $num) {\n    $sum += ($num >= 0) ? ($num % 10) : -($num % 10);\n  }\n\
    \  return $sum;\n}\n</code>\n<|/ a tags=algorithm,php,sum-of-digits,arrays dscore=1\
    \ |>\n<| a dscore=0 tags=algorithm,php,sum-of-digits,arrays |>\nTry this one:\n\
    <code>\n$nums = [1, 2, -3, 4, -5, 6, 7, -8, -9];\n$digits = [];\n\nforeach ($nums\
    \ as $num) {\n    $digits[$num >= 0 ? $num % 10 : -$num % 10] += 1;\n}\n\nprint_r($digits);\n\
    </code>\nResult:\n<code>\nArray\n(\n    [-8] => 1\n    [-7] => 1\n    [-6] =>\
    \ 1\n    [-5] => 1\n    [4] => 1\n    [3] => 1\n    [2] => 1\n    [1] => 1\n)\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work if there's more than one negative\
    \ number.\n<|/ c |>\n<| a tags=algorithm,php,sum-of-digits,arrays |>\nMy solution:\n\
    <code>\n$arr = [1, 2, -3, 4, -5, 6, 7, -8, -9];\n$sum = 0;\n$neg = false;\nforeach\
    \ ($arr as $number) {\n    $sum += $number*($number<0 ? $neg : 1);\n    $neg =\
    \ $number<0;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if there's\
    \ more than one negative number.\n<|/ c |>\n<| a tags=algorithm,php,sum-of-digits,arrays\
    \ dscore=0 |>\nI came up with this solution:\n<code>\n$nums = [1, 2, -3, 4, -5,\
    \ 6, 7, -8, -9];\n$digits = [];\nforeach ($nums as $num) {\n    if ($num >= 0)\
    \ {\n        $digits[] = $num % 10;\n    } else {\n        $digits[] = -($num\
    \ % 10);\n    }\n}\n$sum = 0;\nforeach ($digits as $digit) {\n    $sum += $digit;\n\
    }\n</code>\nThis should return the same output as those from others, I think.\n\
    <|/ a |>\n<| a |>\n<code>", "    foreach ($arr as $number) {\n        if ($number\
    \ < 0) {\n            $sum = (int)($number * 10);\n            $sign = ($sum <\
    \ 0) ? \"-\" : \"\";\n            $sum = abs($sum);\n            $count = 0;\n\
    \            foreach (str_split($sign, $sum) as $number) {\n                $count++;\n\
    \            }\n        } else {\n            $sum = abs($number);\n         \
    \   $count = 0;\n            foreach (str_split($sum) as $number) {\n        \
    \        $count++;\n            }\n        }\n        if ($count > 0) {\n    \
    \        return $count;\n        }\n    }\n    return 0;\n}\n", "  $n = 0;\n \
    \ for ($i = 0, $n = count($arr); $i < $n; ++$i) {\n    if (isset($arr[$i]) &&\
    \ is_numeric($arr[$i])) {\n      if ($arr[$i] >= 0) {\n        $arr[$i] = substr($arr[$i],\
    \ 0, 1);\n        $arr[$i] += 1;\n      } else {\n        $arr[$i] = substr($arr[$i],\
    \ -1, 1);\n        $arr[$i] += 1;\n      }\n      $n = max($n, $arr[$i]);\n  \
    \  }\n  }\n  return $n;\n}\n", "  return count($arr) - count_negative_nums($arr);\n\
    }\n", "    $first = 0;\n    $count = 0;\n    foreach ($arr as $num) {\n      \
    \  if (is_int($num)) {\n            $first = $num;\n            if ($num < 0)\
    \ {\n                $num *= -1;\n                $first -= $num;\n          \
    \  }\n        } elseif (is_numeric($num)) {\n            $first += $num;\n   \
    \     }\n        $count += $first < 10 ? 1 : 0;\n        $first = 0;\n    }\n\
    \    return $count;\n}\n", "  $sum = 0;\n  if (count($arr) == 0) {\n    return\
    \ 0;\n  }\n  foreach ($arr as $n) {\n    if ($n > 0) {\n      $sum += intval($n->digit(1));\n\
    \    }\n  }\n  return $sum;\n}\n</code>\n<|/ a tags=algorithm,php |>\n<| c |>\n\
    That code does not even pass some basic sanity tests. Please run your code through\
    \ some sanity tests, e.g. `count_nums(array(-1, 11, -11))` will fail.\n<|/ c |>\n\
    <| c |>\n, I have added a check. Also, your suggestion `if ($n > 0) {` is incorrect\
    \ as it will allow `0` digit numbers as negative integers which is incorrect.\n\
    <|/ c |>\n<| c |>\nI agree your check is correct, but I don't agree with the `if\
    \ ($n > 0) {` part - `0` will be considered as `> 0` even though it is `< 0`.\n\
    <|/ c |>\n<| c |>\n, your right I missed the case of 0 being negative. Have updated\
    \ the answer. Thanks for the heads up.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ It looks like a good solution to me. I will try it and let you know.\n<|/ c\
    \ |>\n<| a dscore=0 |>\nI have written a function to find number of positive and\
    \ negative numbers in an array using following approach. I had to take care of\
    \ negative numbers. \n<code>\n<?php \n", "  return count(array_filter(\n    $arr,\n\
    \    function ($val) {\n      return $val > 0;\n    }\n  ));\n}\n", "    $total\
    \ = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        $total += $arr[$i];\n\
    \        if ($total >= 10) {\n            $total = 0;\n        }\n    }\n    return\
    \ $total;\n}\n\n$digits = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n\n$count_nums = count_nums($digits);\n\
    \n$first = 1;\n$last = 0;\n\nfor ($i = $count_nums - 1; $i >= 0; $i--) {\n   \
    \ $val = $first + $i;\n    $first = $last;\n    $last = $val;\n}\n\necho $count_nums\
    \ - $last;", "  return count(array_filter(array_map('count_digits', $arr), 'not_negative'));\n\
    }\n", "  $n = 0;\n  foreach($arr as $a) {\n    if ($a > 0) $n += floor($a/10);\n\
    \  }\n  return $n;\n}\n", "    $ret = 0;\n    foreach($arr as $num) {\n      \
    \  // Only process negative numbers.\n        if ($num < 0) {\n            $num\
    \ = abs($num);\n            if ($num >= abs($arr[0])) {\n                // We\
    \ have a negative number, and it's in the positive range:\n                //\
    \ We must subtract from the first digit.\n                $ret -= $num - abs($arr[0]);\n\
    \            } else {\n                // The number is not in the positive range,\
    \ so we must add it.\n                $ret += $num;\n            }\n        }\
    \ else {\n            // The number is in the positive range, and we must add\
    \ to our count.\n            $ret += $num;\n        }\n    }\n    return $ret;\n\
    }\n", "    $sum = 0;\n    $len = count($arr);\n    foreach($arr as $n) {\n   \
    \     $sum += $n;\n    }\n    return $len-$sum;\n}\n", "  foreach ($arr as $num)\
    \ {\n    $len = strlen($num);\n    if ($len < 0) return 0;\n    $res = 0;\n  \
    \  $c = 0;\n    for ($i = 0; $i < $len; ++$i) {\n      if ($num[$i] >= '0' &&\
    \ $num[$i] <= '9') $c += $num[$i] - '0';\n      else break;\n    }\n    if ($c\
    \ > 0) $res += $c;\n  }\n  return $res;\n}\n", "    $n = 0;\n    foreach ($arr\
    \ as $num) {\n        $n += $num < 0 ? abs($num) % 10 :\n            ($num > 0\
    \ ? 10 :\n            0);\n    }\n    return $n;\n}\n", "  if (!is_array($arr))\
    \ {\n    return 0;\n  }\n  $sum = 0;\n  foreach ($arr as $n) {\n    if ($n < 0)\n\
    \      $n += 0x100000000; // 4 byte int\n    $sum += intval($n) % 10; // add only\
    \ non-negative digits, and mod by 10\n  }\n  return $sum;\n}\n", "  $len = count($arr);\n\
    \  for ($i = 0; $i < $len; ++$i) {\n    if (!is_int($arr[$i])) {\n      $arr =\
    \ array_map('intval', array_slice($arr, $i));\n      return intval($arr[0]) +\
    \ count_nums($arr);\n    }\n  }\n  return 0;\n}\n</code>\nYou can try it online\
    \ here\n<|/ a dscore=1 |>\n<| c |>\nThank you. Your solution worked. As you said,\
    \ I should try and avoid recursion.\n<|/ c |>\n<| c |>\nI really do appreciate\
    \ your help\n<|/ c |>\n<| a dscore=0 |>\nThis is an example of a recursive algorithm.\n\
    It works by converting the number to a string, then recursing on the remainder,\
    \ until its length reaches 0. At that point the number is converted to a number.\n\
    The algorithm assumes that there are no leading zeroes, which would cause the\
    \ length to not be 0.\n<code>", "    $result = 0;\n    foreach($arr as $v) {\n\
    \        $result += $v;\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,algorithm,arrays\
    \ dscore=0 |>\n<| c |>\nThis is great for positive numbers, but it doesn't work\
    \ for negative numbers (`count_nums(array(-2, -2, -3));` returns 0).\n<|/ c |>\n\
    <| c |>\nHi, thanks for the comment. I updated the answer to take negative numbers\
    \ into the account.\n<|/ c |>\n<| c |>\nThanks again for your help. I ran your\
    \ solution against a large dataset and didn't get any memory errors. The output\
    \ seemed to match the correct answer.\n<|/ c |>\n<| a tags=php,algorithm,arrays\
    \ |>\nOne approach would be to count the number of positive and negative numbers\
    \ and subtract them from the total to calculate how many positive and negative\
    \ numbers are left over:\n<code>\n$input = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1];\n", "    $sum = 0;\n    foreach($arr\
    \ as $num) {\n        $sum += $num;\n    }\n    if ($sum < 0) {\n        $sum\
    \ = $sum * -1;\n    }\n    return $sum;\n}\n", "  return count(array_filter($arr,\
    \ function($n) {\n    return $n > 0;\n  }));\n}\n", "\t$sum = 0;\n\tforeach ($arr\
    \ as $x) {\n\t\t$sum += intval($x); // Convert negative numbers to positive\n\t\
    }\n\treturn $sum;\n}\n", "  if (empty($arr)) {\n    return 0;\n  }\n  $count =\
    \ -1;\n  foreach ($arr as $key => $num) {\n    $count += intval(substr($num, 0,\
    \ 1));\n  }\n  return $count;\n}", "    return $arr->filter(function($n) {\n \
    \       return $n > 0;\n    })->count() *\n        (!$arr->isNeg() ? -1 : 1);\n\
    }\n", "  return $arr ? $arr\n    . count_digits(array_reverse($arr))\n    : 0;\
    \ // if empty, return 0\n}\n", "  if (!is_array($arr)) {\n    return 0;\n  }\n\
    \  $digits = preg_grep('/^-?\\d+$/', $arr);\n  return count($digits);\n}\n", " \
    \   $num = count($arr);\n    $neg = $num < 0 ? -$num : 0;\n    $res = $neg;\n\
    \    for ($i = 0; $i < $num; ++$i) {\n        $res += $arr[$i] * 10 ** (count($arr)\
    \ - $i + 1);\n    }\n    return $res - $neg;\n}\n", "    $num_digits = strlen($arr[0]);\n\
    \    $num_signs = 0;\n    foreach ($arr as $num) {\n        $num_signs += $num\
    \ < 0;\n    }\n    return $num_signs * $num_digits;\n}\n", "    return array_count_values($arr)['1']\
    \ + array_count_values($arr)['0'];\n}\n$arr=array('1');\n$arr=array_merge($arr,array('0'));\n\
    $arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n\
    $arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n\
    $arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n\
    $arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n\
    $arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n\
    $arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n\
    $arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n\
    $arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n\
    $arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n\
    $arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n\
    $arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n\
    $arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n$arr=array_merge($arr,array('0'));\n\
    $arr=array_", "  return array_reduce($arr, function ($carry, $num) {\n    return\
    \ $carry + intval($num < 0 ? $num % abs($num) : 0);\n  }, 0);\n}\n", "  return\
    \ count(array_filter(\n    $arr,\n    function($num) {\n      return ($num > 0);\n\
    \    }\n  ));\n}\n", "  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num <\
    \ 0)\n      $sum -= abs($num);\n    else\n      $sum += $num;\n  }\n  return $sum;\n\
    }\n", "  $n = count($arr);\n  if ($n) {\n    $digits = array_map(function($x)\
    \ {\n      return $x >= 0 ? $x : abs($x);\n    }, $arr);\n    $m = array_sum($digits)\
    \ - array_sum($digits = array_filter(\n      $digits,\n      function($x) { return\
    \ $x > 0; }\n    ));\n    return $n + ($m > 0);\n  } else {\n    return 0;\n \
    \ }\n}", "    return count(array_filter($arr, function ($n) {\n        return\
    \ $n > 0;\n    }));\n}\n</code>\n<|/ a |>\n<| c |>\nI wonder if there's a way\
    \ to improve this solution? The `is_int()` function is too slow for my application\n\
    <|/ c |>\n<| c |>\n, I don't think `is_int()` is too slow, actually. I think the\
    \ problem is the way you implemented your `count_nums()` function, which takes\
    \ a long time. I've edited my answer to use the native `array_filter()` function.\n\
    <|/ c |>\n<| a |>\nTry this\n<code>", "  $n = array_count_values($arr);\n  foreach\
    \ ($n as $k => $v) {\n    if ($v > 0) {\n      $n[$k] = $k;\n    }\n  }\n  return\
    \ $n;\n}\n$a = array(-1, 11, -11);\n$b = count_nums($a);\nprint_r($b);", "  return\
    \ array_sum(array_filter($arr, 'is_numeric'));\n}\n\n/**\n * Finds and outputs\
    \ all the prime numbers from the input array $arr,\n * then prints the sum.\n\
    \ *\n * Example:\n * >>> primes(range(2, 50))\n * [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47]\n * >>> sum(primes(range(2, 50)))\n * 55\n *\n *\
    \ @param array $arr An array of integers\n *\n * @return array\n */", "  if (empty($arr))\
    \ {\n    return 0;\n  }\n  foreach ($arr as $a) {\n    if ($a < 0) {\n      $a\
    \ = -$a;\n    }\n  }\n\n  $res = 0;\n  foreach ($arr as $a) {\n    $sum += $a;\n\
    \    if ($sum > 9) {\n      $sum = 0;\n    }\n    $res = ($sum + $res) % 10;\n\
    \  }\n\n  return $res;\n}\n\n$result = count_nums($arr);\nprint \"$result\\n\"\
    ;", "    $result = $total = 0;\n    for ($i = count($arr) - 1; $i >= 0; $i--)\
    \ {\n        $total = 0;\n        foreach ($arr[$i] as $c) {\n            $total\
    \ += $c < 0 ? $c * (-1) : $c;\n        }\n        $result += (count($arr[$i])\
    \ > 0 && $total > 0);\n    }\n    return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
