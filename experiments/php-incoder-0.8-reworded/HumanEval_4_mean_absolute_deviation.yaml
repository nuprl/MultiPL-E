name: HumanEval_4_mean_absolute_deviation
language: php
prompt: "<?php\n// For a given array of input numbers, calculate Mean Absolute Deviation\n\
  // around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute\
  \ difference between each\n// element and a centerpoint (mean in this case):\n//\
  \ MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0, 2.0, 3.0,\
  \ 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n"
tests: "function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
  \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
  \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["    sort($numbers);\n    foreach ($numbers as $number) {\n        $mean\
    \ = ($numbers[count($numbers) - 1] + $number) / 2;\n        $absolute_deviation\
    \ = ($number - $mean) / $mean;\n        $mad += $absolute_deviation;\n    }\n\
    \    return $mad / count($numbers);\n}\n", "  $avg = array_sum($numbers) / count($numbers);\n\
    \  $sum = 0;\n  foreach ($numbers as $n) {\n    $sum += pow((($n - $avg) * ($n\
    \ - $avg)), 0.5);\n  }\n  return $sum / count($numbers);\n}\n", "  if (!is_array($numbers))\
    \ {\n    throw new InvalidArgumentException(\n        pht('Expected a list of\
    \ numbers, got something else.'));\n  }\n\n  $count = count($numbers);\n  $mean_abs\
    \ = array_sum($numbers) / $count;\n\n  $squared_diff = array_map(\n      'abs',\n\
    \      array_diff($numbers, [$mean_abs]));\n\n  return sqrt(array_sum($squared_diff)\
    \ / $count);\n}\n\n/**\n * Calculate the mean of a list of numbers.\n *\n * @param\
    \ list<double> List of numbers to find the mean of.\n *\n * @return double The\
    \ mean of the list of numbers.\n */", "  $mean  = array_sum($numbers) / count($numbers);\n\
    \  $delta = [];\n  foreach ($numbers as $n) {\n    $delta[] = abs($n - $mean);\n\
    \  }\n  return array_sum($delta) / count($delta);\n}", "    $mean = array_sum($numbers)\
    \ / count($numbers);\n    return array_map(\n        function($x) { return abs($x\
    \ - $mean); },\n        $numbers);\n}\n", "  $mean = array_sum($numbers) / count($numbers);\n\
    \  $sum_of_squares = 0.0;\n  for ($i = 0; $i < count($numbers); $i++) {\n    $sum_of_squares\
    \ += pow($numbers[$i] - $mean, $2);\n  }\n  return sqrt($sum_of_squares / count($numbers));\n\
    }", "    $sum = 0;\n    $n = count($numbers);\n    if ($n < 2) {\n        return\
    \ 0;\n    }\n\n    foreach ($numbers as $number) {\n        $sum += $number;\n\
    \    }\n\n    return $sum / $n;\n}\n", "    if (!is_array($numbers)) {\n     \
    \   return FALSE;\n    }\n\n    $mean = array_sum($numbers) / count($numbers);\n\
    \    $squared_diff = array_map(\n        'abs',\n        $numbers\n    );\n  \
    \  return (float)sqrt(array_sum($squared_diff) / count($numbers));\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nI think you mean \"MAD = average | x - x_mean |\"\n\
    <|/ c |>\n<| c |>\nAwesome! I just got it to work (not 100% but it's pretty close).\
    \ Thanks for providing the code - I'm pretty sure I understand it now. I'd just\
    \ like to clarify one thing - does this method not account for the fact that one\
    \ number is not always going to be close to zero? i.e. say $numbers = array(1.1,\
    \ 2.2, 3.3, 4.4, 5.5); would that return a \"MAD\" of 1.2?\n<|/ c |>\n<| c |>\n\
    `MAD = average | x - x_mean |` - this should take into account the fact that one\
    \ number is not always going to be close to zero. So, when you have an array of\
    \ numbers `$numbers = array(1.1, 2.2, 3.3, 4.4, 5.5)`, it will return `MAD = 1.2\
    \ - x_mean`. Also, please remember to up-vote any answer that helped you, and\
    \ to mark an answer as accepted.\n<|/ c |>\n<| a dscore=2 tags=average,math,php,statistics\
    \ |>\nI know this thread is old, but I had a similar need and found a solution\
    \ using PHP's built in functions. The first function below calculates the mean\
    \ and the second function below calculates the difference between each value in\
    \ the array:\n<code>", "    // The average of our data set\n    $sum = 0;\n\n\
    \    // For each value in our dataset...\n    foreach ($numbers as $value) {\n\
    \        // Add the absolute value of the difference between the value and\n \
    \       // the mean\n        $sum += abs($value - $sum / count($numbers));\n \
    \   }\n\n    // Return the average absolute deviation\n    return $sum / count($numbers);\n\
    }\n", "  $mean = array_sum($numbers) / count($numbers);\n  $squares = array_map(function\
    \ ($number) {\n    return pow($number, 2);\n  }, $numbers);\n  return sqrt(array_sum($squares)\
    \ / count($numbers));\n}\n", "    if (!isset($numbers[count($numbers) - 1])) {\n\
    \        return NULL;\n    }\n    $mean = $numbers[0];\n    $mad = 0;\n    foreach\
    \ ($numbers as $number) {\n        $mad_abs = abs($number - $mean);\n        $mad_total\
    \ = $mad_abs + $mad;\n        $mad = $mad_total;\n    }\n    return $mad;\n}\n",
  "    $mean = array_sum($numbers) / (count($numbers) - 1);\n    $sum = 0;\n    foreach\
    \ ($numbers as $num) {\n        $sum += ($num - $mean) * ($num - $mean);\n   \
    \ }\n    return $sum / count($numbers);\n}\n", "  $mean     = array_sum($numbers)\
    \ / count($numbers);\n  $variance = array_sum(array_map(function($value) use ($mean)\
    \ {\n      return pow($value - $mean, 2);\n  }, $numbers));\n  return sqrt($variance);\n\
    }\n", "  $mean = array_sum($numbers) / count($numbers);\n  $variance = 0;\n  foreach\
    \ ($numbers as $value) {\n    $variance += ($value - $mean) * ($value - $mean);\n\
    \  }\n  return sqrt($variance);\n}\n\n/**\n * Calculates the average of a set\
    \ of numbers using one or more\n * provided functions.\n *\n * @param array $numbers\
    \ A list of numbers to be averaged.\n *\n * @return float The average value.\n\
    \ */", "  $mean = array_sum($numbers) / count($numbers);\n  $meansqrd = array_sum(square($numbers))\
    \ / count($numbers);\n  $mad = 0;\n  foreach ($numbers as $x) {\n    $mad = $mad\
    \ + abs($x - $mean);\n  }\n  return $mad.'/'.$meansqrd;\n}\n", "  return (float)\
    \ array_reduce($numbers, function($sum, $number) {\n    return $sum + ($number\
    \ - array_sum($numbers)) * ($number - array_sum($numbers)) / (count($numbers)\
    \ - 1);\n  });\n}\n", "    if (empty($numbers)) {\n        return 0;\n    }\n\
    \    $mean = array_sum($numbers) / count($numbers);\n    $mad = 0;\n    foreach\
    \ ($numbers as $number) {\n        $mad += abs($number - $mean);\n    }\n    return\
    \ $mad / count($numbers);\n}\n", "  if (!is_array($numbers) || !count($numbers))\
    \ return null;\n  sort($numbers);\n  $mad = 0;\n  for ($i = 0; $i < count($numbers);\
    \ $i++) {\n    $mad += abs($numbers[$i] - $numbers[$i]);\n  }\n  return $mad /\
    \ count($numbers);\n}\n", "  $mean = array_sum($numbers) / count($numbers);\n\
    \  $squared_differences = array_map(\n    function ($number) { return ($number\
    \ - $mean) ** 2; },\n    $numbers\n  );\n  return array_sum($squared_differences)\
    \ / count($numbers);\n}\n</code>\n<|/ a tags=php,math |>\n<| a |>\nAs far as I\
    \ know, there's no built-in function for that. But there's a function that calculates\
    \ MAD in one line of code: \n<code>\n<?php\n$arr = [1, 2, 3, 4];\nvar_dump (array_sum(array_map(\"\
    sqrt\", $arr) - $arr) / count($arr));\n</code>\n<|/ a dscore=2 tags=php,math |>\n\
    <| c |>\nThat doesn't take into account the sample mean of the array.\n<|/ c |>\n\
    <| a tags=php,math dscore=2 |>\nI needed something similar and ended up writing\
    \ my own function based on this answer: https://stackoverflow.com/a/27402659/11752238\n\
    This function returns a float in the range [-1,1] where 1 represents mean absolute\
    \ deviation and 0 represents mean absolute deviation. If all values are less than\
    \ 1 then a 0 will be returned.\n<code>", "    // Initialize deviation value\n\
    \    $sum = 0;\n\n    // Find the mean and number of elements\n    $mean = array_sum($numbers);\n\
    \    $count = count($numbers);\n\n    // Accumulate deviation for each element\n\
    \    foreach ($numbers as $n) {\n        $sum = $sum + abs($n - $mean);\n    }\n\
    \n    // Return average MAD\n    return $sum / $count;\n}\n", "  return array_sum(abs($numbers))\
    \ / count($numbers);\n}\n", "    // If the array has one element, return that\
    \ element exactly.\n    if (count($numbers) == 1) {\n        return $numbers[0];\n\
    \    }\n\n    // Find the mean.\n    $mean = array_sum($numbers) / count($numbers);\n\
    \n    // Find the deviations.\n    $deviations = array_diff($numbers, [$mean]);\n\
    \n    // Find the absolute deviations.\n    $devs = array_map(function ($deviation)\
    \ {\n        return abs($deviation);\n    }, $deviations);\n\n    // Return the\
    \ mean of the absolute deviations.\n    return array_sum($devs) / count($devs);\n\
    }", "  $mean  = array_sum($numbers) / count($numbers);\n  $devs  = array_map(function($x)\
    \ { return abs($x - $mean); }, $numbers);\n  return array_sum($devs) / count($devs);\n\
    }", "  return array_sum($numbers) /\n         array_sum(array_diff($numbers, array_mean(array($numbers))));\n\
    }\n", "    $mean = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\n", "  $mean     = $numbers->sum() / count($numbers);\n\
    \  $deviations = $numbers->map(function ($x) { return abs($x - $mean); });\n \
    \ return $deviations->sum() / count($deviations);\n}\n", "    return sqrt(array_sum(array_map(function\
    \ ($value) {\n        return pow($value - array_mean($value), 2);\n    }, $numbers))\
    \ / count($numbers));\n}", "  if (!is_array($numbers)) {\n    return false;\n\
    \  }\n  $mad = 0;\n  foreach ($numbers as $n) {\n    $mad = ($mad + abs($n));\n\
    \  }\n  return $mad/count($numbers);\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0);\n\
    $mean = mean_absolute_deviation($numbers);", "    $mean = array_sum($numbers)\
    \ / count($numbers);\n    $squareDiffs = array_map(function ($number) {\n    \
    \    return pow($number - $mean, 2);\n    }, $numbers);\n    return array_sum($squareDiffs)\
    \ / count($numbers);\n}\n</code>\nThe function above is taken from here\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThanks for the help. I did solve it using an older version\
    \ of PHP that didn't have the array_map function, so I couldn't use your solution.\n\
    <|/ c |>\n<| a dscore=0 |>\nI've written a function that will calculate Mean Absolute\
    \ Deviation with a standard deviation parameter. \n<code>\n<?php", "  $mean =\
    \ array_sum($numbers) / count($numbers);\n  $deviations = array();\n  $size =\
    \ count($numbers);\n\n  for ($i = 0; $i < $size; ++$i) {\n    $deviations[$i]\
    \ = abs($numbers[$i] - $mean);\n  }\n\n  return array_sum($deviations) / (count($deviations)\
    \ * 1.0);\n}", "  // return the mean of the numbers - the mean of the samples\n\
    \  // is their sum / number of samples\n  return array_sum($numbers)/count($numbers);\n\
    }\n", "    $avg = array_sum($numbers) / count($numbers);\n    $squares = 0;\n\
    \    foreach ($numbers as $n) {\n        $squares += pow($n - $avg, 2);\n    }\n\
    \    return $squares / count($numbers);\n}\n", "    $mean = array_sum($numbers)\
    \ / count($numbers);\n    $squared_diff = 0;\n    foreach ($numbers as $value)\
    \ {\n        $squared_diff += pow($value - $mean,2);\n    }\n    return sqrt($squared_diff\
    \ / count($numbers));\n}", "  $mean = array_sum($numbers) / count($numbers);\n\
    \  $squares = array_map(function ($x) {\n    return pow($x - $mean, $2);\n  },\
    \ $numbers);\n\n  return array_sum($squares) / count($numbers);\n}", "    return\
    \ array_sum($numbers) / count($numbers);\n}\n", "  if (!count($numbers)) {\n \
    \   return 0.0;\n  }\n\n  $mean = array_sum($numbers) / count($numbers);\n  $sum\
    \ = 0.0;\n  foreach ($numbers as $number) {\n    $sum += abs($number - $mean);\n\
    \  }\n  return $sum / count($numbers);\n}\n", "  return array_sum(abs($numbers))\
    \ / count($numbers);\n}", "  $mean = array_sum($numbers) / count($numbers);\n\
    \  return abs($mean - array_sum(array_diff($numbers, $mean)) / count($numbers));\n\
    }\n", "  $mean = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach\
    \ ($numbers as $number) {\n    $sum += abs($number - $mean);\n  }\n  return $sum;\n\
    }\n", "    $mean = array_sum($numbers) / count($numbers);\n    $squareDiffs =\
    \ array_map(function($x) {return pow($x - $mean,2);}, $numbers);\n    return sqrt(array_sum($squareDiffs)\
    \ / count($numbers));\n}\n", "    $mean = array_sum($numbers) / count($numbers);\n\
    \    return abs($mean - array_sum(array_diff($numbers, $mean)) / count($numbers));\n\
    }", "    $mean = array_sum($numbers) / count($numbers);\n    return $mean ? array_sum(abs($numbers\
    \ - $mean)) : 0;\n}\n</code>\n<|/ a tags=arrays,mean,php |>\n<| c |>\nHi, thanks\
    \ for taking the time to provide an answer, but this doesn't really address the\
    \ problem. The goal here is to calculate the mean of *a subgroup* of the input\
    \ elements (the elements are grouped by their values). Having the number of distinct\
    \ values isn't really sufficient here. For example, if we have {1, 2, 3, 4} and\
    \ {3, 5, 6, 7}, there isn't just one mean (that would be 5), but 2 different ones\
    \ (5.5 and 6.5), and the same with three values (3.5, 4.5, 5.5), so this isn't\
    \ really a useful mean.\n<|/ c |>\n<| c |>\nThis answer was posted before he added\
    \ the information on his dataset. His answer was posted before I added my answer.\
    \ I'm guessing he did not bother to read the comments before posting the answer.\n\
    <|/ c |>\n<| c |>\nI added a comment to his answer at the bottom.\n<|/ c |>\n\
    <| c |>\nI added a comment to his answer at the bottom\n<|/ c |>\n<| c |>\nThank\
    \ you for taking the time to answer this! I'm a little confused about your code,\
    \ however: what is the `$elements` variable? Should this be `$data`? And if so,\
    \ how does the `foreach` loop know what to iterate over, since I don't see you\
    \ defining `$elements` anywhere?\n<|/ c |>\n<| a |>\n<code>\n$array = array(5,4,8,6,5,3,5,4,5,9,5,4,4,8,6,8,4,5,4,8,5,4,6,8,9,8,7,8,9,7,8,9,4,5,6,6,8,5,7,7,5,7,7,4,5,8,6,7,8,8,5,5,5,8,8,8,5,5,8,7,8,6,8,4,6,5,7,6,8,6,5,4,5,8,5,5,6,6,8,5,4,8,6,5,4,8,6,7,8,6,8,8,4,7,8,7,7,6,8,5,6,8,5,5,8,7,7,5,4,6,7,8,8,4,8,5,5,4,8,6,5,4,8,8,5,5,4,6,6,8,5,6,8,5,5,5,6,6,6,6,8,6,6,8,6,8,8,8,8,8,8,8,7,8,8,8,8,8,8,6,6,5,7,6,5,6,5,5,7,5,6,8,5,4,6,4,7,5,5,6,6,4,7,7,",
  "  sort($numbers);\n  $mean = array_sum($numbers) / count($numbers);\n  $diff =\
    \ 0;\n  foreach ($numbers as $n) {\n    $diff += abs($n - $mean);\n  }\n  return\
    \ $diff/count($numbers);\n}\n", "  $mean = array_sum($numbers) / count($numbers);\n\
    \  return array_sum(abs($numbers - $mean)) / count($numbers);\n}\n", "  $mean\
    \      = 0;\n  $sum_of_squares = 0;\n\n  foreach ($numbers as $number) {\n   \
    \ $sum_of_squares += pow($number, 2);\n    $mean += $number;\n  }\n\n  return\
    \ sqrt($sum_of_squares / count($numbers)) - $mean;\n}\n", "    $mean = array_sum($numbers)\
    \ / count($numbers);\n    $meanAbsDev = 0.0;\n    foreach ($numbers as $number)\
    \ {\n        $meanAbsDev += ($number - $mean) * ($number - $mean);\n    }\n  \
    \  return sqrt($meanAbsDev / count($numbers));\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThanks , my question was a follow up question to another question, where\
    \ I thought the code below was the fastest way  to calculate this, but when I\
    \ run the code with my data it takes way longer than the other solution. Is there\
    \ a faster way to do this than the code below?\n<|/ c |>\n<| c |>\nWhat data did\
    \ you try? What do you mean by \"the fastest way\"?\n<|/ c |>\n<| c |>\n, The\
    \ code I posted above does a lot of unnecessary calculation, meaning there are\
    \ lots of unnecessary calculations for each element. What I mean by \"the fastest\
    \ way\" is it takes less time to calculate this than a more efficient method.\
    \ My first code was doing more calculation and less calculation, so I thought\
    \ the faster way would be more efficient.\n<|/ c |>\n<| c |>\nIt should only do\
    \ one calculation. Can you post your code?\n<|/ c |>\n<| c |>\n, I have added\
    \ my code to the question\n<|/ c |>\n<| a tags=php,performance,arrays |>\nHere\
    \ is a solution that uses array_map and a closure, which is the fastest way to\
    \ perform calculations like this. \n<code>", "  $avg = mean(array_map('floatval',\
    \ $numbers));\n  $sum_of_squares = 0.0;\n  foreach ($numbers as $n) {\n    $sum_of_squares\
    \ += pow($n - $avg, 2);\n  }\n  return sqrt($sum_of_squares / count($numbers));\n\
    }\n", "  $n = count($numbers);\n  $mean = $numbers[0];\n  foreach ($numbers as\
    \ $value) {\n    $mean += ($value - $mean) / $n;\n  }\n  return abs($mean);\n}",
  "  $sum = 0;\n  $n = count($numbers);\n  for ($i = 0; $i < $n; $i++) {\n    $diff\
    \ = $numbers[$i] - $numbers[0];\n    $sum += $diff * $diff;\n  }\n  return $sum\
    \ / $n;\n}\n\n/**\n * Get a random value within the specified range.\n *\n * @param\
    \ int $min\n * @param int $max\n * @return int\n */", "    $means = array_map(function\
    \ ($x) { return $x; }, $numbers);\n    return array_sum($numbers) / count($numbers)\n\
    \        - array_sum(array_map(function ($x) { return abs($x - $means); }, $numbers));\n\
    }\n", "    if (!is_array($numbers)) {\n        throw new InvalidArgumentException('The\
    \ argument must be an array');\n    }\n    $n = count($numbers);\n    if ($n <\
    \ 2) {\n        throw new InvalidArgumentException('The first argument must have\
    \ at least two elements.');\n    }\n\n    $mean  = array_sum($numbers) / $n;\n\
    \    $square_diffs = array_map(function ($x) { return $x - $mean; }, $numbers);\n\
    \n    return sqrt(array_sum($square_diffs) / $n);\n}\n", "    $mean = array_sum($numbers)\
    \ / count($numbers);\n    return abs($mean - array_sum(array_diff($numbers, $mean))\
    \ / count($numbers));\n}\n\n/**\n * Return the current page from the paginator.\n\
    \ *\n * Useful for passing a variable to a template to indicate which page to\n\
    \ * display to users.\n *\n * @param PaginatorHelper $paginator\n * @return int\
    \ $page\n */", "  return array_sum($numbers) / count($numbers);\n}\n", "  sort($numbers);\n\
    \  $meanValue = array_sum($numbers) / count($numbers);\n  $delta = [];\n  foreach\
    \ ($numbers as $n) {\n    $delta[] = $n - $meanValue;\n  }\n  return round($delta[0]\
    \ * $delta[0] / ((count($numbers) - 1) / count($numbers)), 6);\n}\n</code>\nAnd\
    \ then, in a separate file, create the charts:\n<code>\n<?php\n\nrequire 'chart_data.php';\n\
    \n$data = [\n  [\"2013-04-19\", \"5.6\"],\n  [\"2013-04-20\", \"4.5\"],\n  [\"\
    2013-04-27\", \"8.8\"],\n  [\"2013-04-28\", \"8.2\"],\n  [\"2013-04-29\", \"10.5\"\
    ],\n  [\"2013-04-30\", \"8.5\"],\n  [\"2013-05-01\", \"5.3\"],\n  [\"2013-05-02\"\
    , \"4.8\"],\n  [\"2013-05-03\", \"5.5\"],\n  [\"2013-05-04\", \"4.7\"],\n  [\"\
    2013-05-05\", \"6.6\"],\n  [\"2013-05-09\", \"8.8\"],\n  [\"2013-05-10\", \"8.8\"\
    ],\n  [\"2013-05-11\", \"9.4\"],\n  [\"2013-05-12\", \"7.6\"],\n  [\"2013-05-13\"\
    , \"6.7\"],\n  [\"2013-05-16\", \"6.4\"],\n  [\"2013-05-17\", \"8.9\"],\n  [\"\
    2013-05-18\", \"7.7\"],\n  [\"2013-05-19\", \"8.9\"],\n  [\"2013-05-20\", \"6.8\"\
    ],\n  [\"2013-05-23\", \"7.1\"],\n  [\"2013-05-24\", \"6.3\"],\n  [\"2013-05-25\"\
    , \"5.6\"],\n  [\"2013-05-26\", \"6.6\"],\n  [\"2013-05-27\", \"7.8\"],\n  [\"\
    2013-05-30\", \"9.2\"],\n  [\"2013-05-31\", \"9.3\"],\n  [\"2013-06-01\", \"9.7\"\
    ],\n  [\"2013-06-02\", \"7.4\"],\n  [\"2013-06-03\", \"8.4\"],\n  [\"2013-06-06\"\
    , \"9.6\"],\n  [\"2013-06-07\", \"8.8\"],\n  [\"2013-06-08\", \"5.9\"],\n  [\"\
    2013-06-09\", \"7.2\"],\n  [\"2013-06-10\", \"7.4\"],\n  [\"2013-06-11\", \"6.1\"\
    ],\n  [\"2013-06-14\", \"7.4\"],\n  [\"2013-06-15\", \"6.8\"],\n  [\"2013-06-16\"\
    , \"6.9\"],\n  [\"2013-06-17\", \"5.9\"],\n  [\"2013-06-18\", \"5.", "  // $numbers\
    \ is an array\n  if (!is_array($numbers)) {\n    return null;\n  }\n  $size =\
    \ count($numbers);\n  if ($size <= 1) {\n    return null;\n  }\n\n  $mean = array_sum($numbers)\
    \ / $size;\n\n  $mad_sum = 0;\n\n  for ($i = 0; $i < $size; ++$i) {\n    $current_val\
    \ = $numbers[$i];\n    $current_val_abs = abs($current_val);\n\n    $mad_sum +=\
    \ $current_val_abs - ($current_val * $current_val);\n  }\n\n  return ($mad_sum\
    \ / $size);\n}\n</code>\n<|/ a tags=php |>\n<| a dscore=3 |>\n<code>", "  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $meanSquared = array_sum(array_map(function\
    \ ($x) { return pow($x, 2); }, $numbers)) / count($numbers);\n  $result = $mean;\n\
    \  foreach ($numbers as $x) {\n    $diff = $x - $mean;\n    $result += $diff *\
    \ $diff;\n  }\n  $result = $result / $meanSquared;\n  return $result;\n}\n", " \
    \   $mean = array_sum($numbers) / count($numbers);\n    return round($mean, 2);\n\
    }\n", "  return array_sum(abs($numbers)) / count($numbers);\n}\n", "  $mean =\
    \ mean(array_values($numbers));\n  $stddev = array_reduce($numbers, function($sum,\
    \ $x) { return $sum + pow($x - $mean, 2); }, 0);\n  return sqrt($stddev / count($numbers));\n\
    }\n</code>\n<|/ a |>\n<| a dscore=3 |>\nThis is actually quite easy with a standard\
    \ math library.\n<code>\n<?php", "  // Make sure $numbers is a numeric array.\n\
    \  if (!is_array($numbers)) {\n    trigger_error('Input should be an array', E_USER_WARNING);\n\
    \    return false;\n  }\n\n  $mean = array_sum($numbers) /count($numbers);\n\n\
    \  $variance = 0;\n  foreach ($numbers as $number) {\n    $variance += pow($number\
    \ - $mean, 2);\n  }\n\n  return sqrt($variance / count($numbers));\n}\n", "  \
    \  sort($numbers);\n    $n = count($numbers);\n    if ($n < 2) {\n        throw\
    \ new \\InvalidArgumentException(\"Count not determine for MAD\");\n    }\n  \
    \  $mean = $numbers[0];\n    if ($n == 1) {\n        return 0;\n    }\n    $sum\
    \ = 0;\n    $sum_of_squares = 0;\n    for ($i = 0; $i < $n; ++$i) {\n        $diff\
    \ = $numbers[$i] - $mean;\n        $sum += $diff;\n        $sum_of_squares +=\
    \ $diff * $diff;\n    }\n    return $sum / $n;\n}\n", "  $mean = array_sum($numbers)\
    \ / count($numbers);\n  $sum_of_squares = 0.0;\n\n  foreach ($numbers as $number)\
    \ {\n    $sum_of_squares += pow($number - $mean, 2);\n  }\n\n  return sqrt($sum_of_squares\
    \ / count($numbers));\n}\n</code>\nThe above code assumes that you only have one\
    \ dimension in your input array.\n<|/ a tags=php,arrays |>\n<| c |>\n`array_sum()`\
    \ is `O(n^2)` for this simple operation. Better use [`array_reduce($numbers, ...)`](http://php.net/manual/en/function.array-reduce.php)\n\
    <|/ c |>\n<| a tags=php,arrays dscore=3 |>\n<code>\n$a = array(1, 3, 6, 5);\n\
    $mean = array_sum($a) / count($a);\n$mad = array();\nforeach ($a as $v) {\n  \
    \  $mad[] = abs($v - $mean);\n}\n$mad = array_sum($mad) / count($mad);\n</code>\n\
    <|/ a |>\n<| a tags=php,arrays |>\n<code>", "  $mean = $numbers[0];\n  foreach\
    \ ($numbers as $n) {\n    $mean += $n;\n  }\n  return $mean / count($numbers);\n\
    }\n", "    $mean = array_sum($numbers) / count($numbers);\n    $variance = 0;\n\
    \    $n = count($numbers);\n    for ($i = 0; $i < $n; $i++) {\n        $variance\
    \ += ($numbers[$i] - $mean) * ($numbers[$i] - $mean);\n    }\n    return sqrt($variance);\n\
    }\n", "  sort($numbers);\n  $mean  = $numbers[0];\n  $sumOfSquares = 0.0;\n  $n\
    \ = count($numbers);\n  for ($i = 1; $i < $n; $i++) {\n    $sumOfSquares += pow($numbers[$i]\
    \ - $mean,2);\n  }\n  return sqrt($sumOfSquares / $n);\n}", "    if (count($numbers)\
    \ < 2) {\n        return 0.0;\n    }\n    $mean = $numbers[0];\n    $total_error\
    \ = 0.0;\n    foreach ($numbers as $n) {\n        $total_error += abs($n - $mean);\n\
    \    }\n    return $total_error / count($numbers);\n}\n\n/**\n * Format a number\
    \ as a currency value\n *\n * ### Arguments\n *\n * - $number (mixed) The input\
    \ number.\n * - $decimals (int) Number of decimal places\n * - $separator (string)\
    \ Decimal separator (\".\" by default).\n *\n * ### Returns\n *\n * - A float.\
    \ Round floats up or down\n *\n * ### Usage\n *\n * `echo format_currency(1245.56);`\n\
    \ */", "  // Calculate the mean.\n  $mean = 0.0;\n  foreach ($numbers as $number)\n\
    \    $mean += $number;\n  $mean = round($mean, $numbers[0]);\n\n  // Calculate\
    \ the MAD.\n  $mad = 0.0;\n  foreach ($numbers as $number)\n    $mad += abs($number\
    \ - $mean);\n  return round($mad / count($numbers), $numbers[0]);\n}\n", "   \
    \ $mean = array_sum($numbers) / count($numbers);\n    $absolutes = array_map(function($number)\
    \ {\n        return abs($number - $mean);\n    }, $numbers);\n    return array_sum($absolutes)\
    \ / count($absolutes);\n}\n", "    $avg = array_sum($numbers) / count($numbers);\n\
    \    $variance = array_reduce($numbers, function ($sum, $n) {\n        return\
    \ $sum + pow($n - $avg, 2);\n    });\n    return sqrt($variance);\n}\n", "  if\
    \ (!$numbers) {\n    return 0.0;\n  }\n  $mean = array_sum($numbers) / count($numbers);\n\
    \  $diff = array_map('abs', $numbers);\n  return array_sum($diff) / count($diff);\n\
    }", "  if (!$numbers) return 0.0;\n\n  $mean = array_sum($numbers) / count($numbers);\n\
    \n  return array_reduce($numbers, function($sum, $number) {\n    return $sum +\
    \ abs($number - $mean);\n  });\n}\n", "  sort($numbers);\n  $n = count($numbers);\n\
    \  $mean = $numbers[0];\n  $mad = 0;\n  for ($i = 1; $i < $n; $i++) {\n    $mad\
    \ = ($numbers[$i] - $mean) * ($numbers[$i] - $mean);\n    $mean += $numbers[$i];\n\
    \  }\n  return sqrt($mad);\n}", "    // Calculate the absolute difference.\n \
    \   $difference = array_map(function($number) {\n        return abs($number);\n\
    \    }, $numbers);\n    return array_sum($difference) / count($numbers);\n}\n",
  "    $mean = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\n", "  // If the numbers are integers, return\
    \ an int\n  if (!is_array($numbers) || count($numbers) <= 1) {\n    return $numbers[0];\n\
    \  }\n\n  // Find the mean:\n  $mean     = array_sum($numbers) / count($numbers);\n\
    \  $x_mean = array_sum(array_diff($numbers, $mean)) / count($numbers);\n\n  //\
    \ Find the squared deviation:\n  $x_squared_sum = 0;\n  foreach ($numbers as $number)\
    \ {\n    $x_squared_sum += pow($number - $mean, 2);\n  }\n  $x_squared = sqrt($x_squared_sum\
    \ / count($numbers));\n\n  // Find the mean of the absolute values of the deviation:\n\
    \  return $x_mean;\n}\n", "  $mean = array_sum($numbers) / count($numbers);\n\
    \  $sum = 0;\n  foreach ($numbers as $n) {\n    $sum += pow((($n - $mean)), 2);\n\
    \  }\n  return $sum / count($numbers);\n}\n", "  return array_reduce($numbers,\
    \ function($sum, $value) {\n    return $sum + abs($value);\n  }) / count($numbers);\n\
    }\n", "  if (count($numbers) < 2) {\n    return 0.0;\n  }\n  $avg = array_sum($numbers)/count($numbers);\n\
    \  return array_sum(abs($numbers - $avg))/count($numbers);\n}\n", "  $mean = array_sum($numbers)\
    \ / count($numbers);\n  $squared_deviation = 0;\n  foreach ($numbers as $value)\
    \ {\n    $squared_deviation += pow($value - $mean, -2);\n  }\n  return sqrt($squared_deviation\
    \ / count($numbers));\n}\n", "  sort($numbers);\n  return round(array_sum($numbers)\
    \ / count($numbers), 2);\n}\n", "  sort($numbers);\n  $n = count($numbers);\n\
    \  $sum = 0;\n  foreach ($numbers as $number) {\n    $sum = $sum + abs($number);\n\
    \  }\n  return $sum / $n;\n}\n", "  $mean = array_sum($numbers) / count($numbers);\n\
    \  return abs(array_sum(array_diff($numbers, $mean)) / count($numbers));\n}\n",
  "  $mean     = null;\n  $means    = array();\n  $devs     = array();\n  $deviations\
    \ = array();\n\n  foreach ($numbers as $number) {\n    if ($mean === null) {\n\
    \      $mean = $number;\n    } else {\n      $devs[] = $number - $mean;\n    \
    \  $mean = $number;\n    }\n  }\n\n  if (count($devs) === 0) {\n    return null;\n\
    \  }\n\n  $means = array_values($means);\n\n  foreach ($devs as $dev) {\n    $means[]\
    \ = round($dev, 0, PHP_ROUND_HALF_UP);\n  }\n\n  foreach ($devs as $dev) {\n \
    \   $deviations[] = $dev;\n  }\n\n  return round(array_sum($deviations) / count($deviations),\
    \ 0, PHP_ROUND_HALF_UP);\n}\n\n/**\n * Calculate the difference between a number\
    \ and the mean of a set of numbers.\n *\n * @param array $values A set of numbers.\n\
    \ *\n * @return float A positive float value.\n */", "  return array_reduce($numbers,\
    \ 'mean_absolute_deviation');\n}", "  $deviations = $numbers - array_sum($numbers)\
    \ / count($numbers);\n  return array_sum($deviations) / count($numbers);\n}\n",
  "  ksort($numbers);\n  $n = count($numbers);\n  $mean = $numbers[0];\n  $sum = 0;\n\
    \  for ($i = 1; $i < $n; ++$i) {\n    $sum -= $numbers[$i];\n  }\n  for ($i =\
    \ 0; $i < $n; ++$i) {\n    $sum += ($numbers[$i] - $mean) * ($numbers[$i] - $mean);\n\
    \  }\n  return $sum / $n;\n}\n", "  $mean = array_sum($numbers) / count($numbers);\n\
    \  $diffs = array_map(function ($number) { return abs($number - $mean); }, $numbers);\n\
    \  return array_sum($diffs) / count($diffs);\n}\n", "  return array_reduce($numbers,\
    \ function($x, $y) {\n    return $x + (abs($y) - abs($x)) / count($numbers);\n\
    \  });\n}", "  return sqrt(array_sum(array_map('abs', $numbers)) /\n      array_sum(array_map('count',\
    \ $numbers)));\n}\n", "  // $mad_sum = 0;\n  $mad_sum = 0.0;\n  foreach ($numbers\
    \ as $number) {\n    $mad_sum += abs($number - $numbers[0]);\n  }\n  return $mad_sum\
    \ / count($numbers);\n}\n", "  // Return mean if only one number\n  if (count($numbers)\
    \ < 2) {\n    return $numbers[0];\n  }\n\n  sort($numbers);\n  return $numbers[count($numbers)-1]\n\
    \    - $numbers[0]\n    ;\n}\n", "  if (!is_array($numbers) || empty($numbers))\
    \ {\n    return NULL;\n  }\n\n  $mean = array_sum($numbers) / count($numbers);\n\
    \  return abs($mean - array_sum(array_map('abs', $numbers)) / count($numbers));\n\
    }\n", "  return (float)array_sum(array_map(function ($x) {\n    return abs($x\
    \ - array_sum($numbers) / count($numbers));\n  }, $numbers)) / count($numbers);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis answer is great because you can just\
    \ add it to your existing code. You could add an optional parameter `bool $average`\
    \ to `mean_absolute_deviation`. It would return average deviation or average absolute\
    \ deviation depending on `$average` parameter.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\nHere's an alternative solution using array_reduce:\n<code>\n$array = [0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar_dump(array_reduce($array, function($carry,\
    \ $element) {\n    return $carry + abs($element - $carry) / count($array);\n},\
    \ 0));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis answer has one flaw. `count($array)`\
    \ will always return 1, while `count($array)-1` will return the number of elements\
    \ in $array excluding the last one. Not really a problem, but something to consider.\n\
    <|/ c |>\n<| c |>\nAh, yes, thanks. I've edited the answer to include your suggestion.\n\
    <|/ c |>\n<| a dscore=0 tags=php,arrays |>\n<code>\n$array = [0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9];\n$arr2 = array_filter($array, function($x) { return $x; });\n$arr2\
    \ = array_map(function($x) { return $x; }, $arr2);\n$arr2 = array_map(function($x)\
    \ { return abs($x - array_sum($arr2)) / count($arr2); }, $arr2);\n$arr2 = array_reduce($arr2,\
    \ function($carry, $x) { return $carry + $x; });\n</code>\n<|/ a |>\n<| a |>\n\
    Here's a version that doesn't use array_reduce, just for comparison's sake.\n\
    <code>\n$array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n$sum = 0;\nforeach ($array as\
    \ $num) {\n    $sum += $num;\n}\n$mean = floor($sum / count($array));\n$deviations\
    \ = [];\nforeach ($array as $num) {\n    $deviations[] = abs($num - $mean);\n\
    }\necho array_sum($deviations) / count($deviations);\n</code>\n<|/ a dscore=0\
    \ tags=php,arrays |>\n<| a |>\n<code>\n<?php\n$arr = [0, 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9];\n$", "  sort($numbers);\n  $mean   = array_sum($numbers)/count($numbers);\n\
    \  $deviations = array();\n  for ($i=0; $i<count($numbers); $i++) {\n    $deviations[$i]\
    \ = $numbers[$i]-$mean;\n  }\n  return array_sum($deviations)/count($deviations);\n\
    }", "  $n = count($numbers);\n  $mean = $numbers[0];\n  for ($i = 1; $i < $n;\
    \ ++$i) {\n    $mean += abs($numbers[$i] - $numbers[$i - 1]);\n  }\n  return $mean\
    \ / $n;\n}", "  $mean = array_sum($numbers) / count($numbers);\n  $differences\
    \ = array();\n  for ($i = 0; $i < count($numbers); $i++) {\n    $differences[]\
    \ = abs($numbers[$i] - $mean);\n  }\n  return array_sum($differences) / count($differences);\n\
    }", "  if (count($numbers) < 2) {\n    return 0;\n  }\n  $mean = array_sum($numbers)\
    \ / count($numbers);\n  $sum = 0;\n  foreach ($numbers as $number) {\n    $sum\
    \ += abs($number - $mean);\n  }\n  return $sum / count($numbers);\n}", "    //\
    \ Calculate the mean.\n    $mean = array_sum($numbers) / count($numbers);\n\n\
    \    // Calculate the differences.\n    $differences = $numbers - $mean;\n\n \
    \   // Average absolute difference.\n    return array_sum($differences) / count($numbers);\n\
    }\n", "  $avg = array_sum($numbers) /count($numbers);\n  return array_reduce($numbers,\
    \ function($sum, $val){\n    return $sum + ($val - $avg);\n  });\n}", "  // Convert\
    \ to float.\n  $numbers = array_map('floatval', $numbers);\n\n  // Subtract the\
    \ mean.\n  $mean = array_sum($numbers) / count($numbers);\n\n  // Calculate the\
    \ difference from the mean.\n  $variance = array_sum($numbers) - (array_sum($numbers)\
    \ / (count($numbers)));\n\n  // Return the mean absolute deviation.\n  return\
    \ sqrt($variance);\n}\n", "  sort($numbers);\n  $mean = array_pop($numbers);\n\
    \  $sum = 0;\n  $n = count($numbers);\n  foreach ($numbers as $n) {\n    $sum\
    \ += pow(($n - $mean), 2);\n  }\n  return $sum / $n;\n}\n", "    $mean = array_sum($numbers)\
    \ / count($numbers);\n    return array_sum(abs($numbers - $mean)) / count($numbers);\n\
    }", "  $n = count($numbers);\n\n  $mean = array_sum($numbers) / $n;\n\n  $deviations\
    \ = array_map(function ($number) use ($mean) {\n    return $number - $mean;\n\
    \  }, $numbers);\n\n  return array_sum($deviations) / $n;\n}\n", "  $n = count($numbers);\n\
    \n  if ($n == 0) {\n    return NULL;\n  }\n\n  $mean = array_sum($numbers) / $n;\n\
    \n  $diff = array_map(function ($v) use ($mean) {\n    return $v - $mean;\n  },\
    \ $numbers);\n\n  return array_sum($diff) / $n;\n}\n</code>\n<|/ a tags=php,statistics\
    \ dscore=4 |>\n<| a dscore=4 |>\nThe formula for mean absolute deviation is as\
    \ below.\n<code>\nMEANABSDEV = SUM(ABS(Value - MEAN))/COUNT\n</code>\nThe formula\
    \ is just taking the sum of absolute value of the difference between each sample\
    \ and mean of the sample and dividing it by the count of the samples. In your\
    \ case, you can calculate the mean of the array by getting the average of the\
    \ values of array and pass it to the function.\n<code>\n$mean = array_sum($array)\
    \ / count($array);\n$mad = mean_absolute_deviation($array, $mean);\n</code>\n\
    In your case, you are passing the array as an argument to the function, so just\
    \ get the mean of the array and pass it to the function.\n<|/ a tags=php,statistics\
    \ |>\n<| c |>\nNot a bad solution! But it would be better to pass only one argument\
    \ and let the function calculate mean internally\n<|/ c |>\n<| c |>\nYeah, that\
    \ would be better\n<|/ c |>\n<| a dscore=4 tags=php,statistics |>\nHere's a function\
    \ in PHP 5.3+, with examples of its usage:\n<code>\n/**\n * Computes the mean\
    \ absolute deviation of a set of numbers.\n *\n * array $numbers\n *\n * float\n\
    \ */", "  global $N;\n  if($N == 1) {\n    return $numbers[0];\n  }\n\n  $avg\
    \ = array_sum($numbers) / $N;\n  return abs(array_sum($numbers) - $avg);\n}\n",
  "  $mean = array_sum($numbers) / count($numbers);\n  return array_reduce($numbers,\
    \ function($sum, $value) use ($mean) {\n    return $sum + abs($value - $mean);\n\
    \  }, 0.0) / count($numbers);\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nNice\
    \ explanation, I liked yours better. Good job :)\n<|/ c |>\n<| c |>\nI added some\
    \ more explanation and cleaned it up some.\n<|/ c |>\n<| c |>\nThis was a great\
    \ explanation.\n<|/ c |>\n<| a dscore=5 tags=php,math |>\nYou can calculate the\
    \ average by doing the following:\n\nAverage the values up and then divide by\
    \ n-1 where n is the number of values.\nIf there are more values than there are\
    \ unique values, take the average of the remaining values.\n\nExample:\n<code>\n\
    $numbers = array(3, 6, 2, 10, 8);\n$sum = array_sum($numbers);\n$average = $sum\
    \ / count($numbers);", "  if (!count($numbers)) {\n    return 0;\n  }\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return abs($mean - array_sum($numbers_squared)\
    \ / count($numbers_squared));\n}\n</code>\n<|/ a tags=php |>\n<| a |>\nI made\
    \ a function that calculates the standard deviation of an array passed as a parameter.\
    \ \n<code>", "    return abs((array_sum($numbers) - array_sum($numbers) /\n  \
    \    count($numbers)) / count($numbers));\n}", "  $diffs = array();\n  foreach\
    \ ($numbers as $number) {\n    $diffs[] = $number - array_sum($numbers) / count($numbers);\n\
    \  }\n  return array_sum($diffs) / count($diffs);\n}\n", "  $mean = array_sum($numbers)\
    \ / count($numbers);\n  return array_map('abs', $numbers) - $mean;\n}", "  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $value) {\n    $squared_diff += pow($value - $mean);\n  }\n  return pow($squared_diff\
    \ / (count($numbers) - 1), 0.5);\n}\n", "  $n = count($numbers);\n  $mean = $numbers[0];\n\
    \  $sum = 0;\n  for ($i = 0; $i < $n; ++$i) {\n    $sum += abs($numbers[$i] -\
    \ $mean);\n  }\n  return $sum / $n;\n}\n", "    $mean = array_sum($numbers) /count($numbers);\n\
    \    return array_reduce($numbers, function($sum, $value) use ($mean) {\n    \
    \    $sum += abs($value - $mean);\n        return $sum;\n    }, 0) / count($numbers);\n\
    }\n", "  $mad = 0;\n  foreach ($numbers as $number) {\n    $mad += abs($number\
    \ - $numbers[array_key_exists(0, $numbers) ? 0 : 1]);\n  }\n  return $mad / count($numbers);\n\
    }\n</code>\n<|/ a dscore=5 tags=arrays,php |>\n<| c |>\nYeah, I remember a time\
    \ when there was a PHP function called `MAD()`. It's a long time since I looked\
    \ at it, but it was in Perl, so I figured it was worth mentioning.\n<|/ c |>\n\
    <| c |>\nThis is not the MAD, it is simply the sum of the squared differences\
    \ between the elements of the array.\n<|/ c |>\n<| c |>\nAhh, I see now. Sorry\
    \ I wasn't clear in my previous comment. :) Thanks for the catch.\n<|/ c |>\n\
    <| c |>\n- what if there are negative values?\n<|/ c |>\n<| a |>\nFor anyone looking\
    \ for an example of how to do this, the following code returns the mean absolute\
    \ deviation from each value in the array\n<code>", "  $mean  = mean ($numbers);\n\
    \  $diff  = $numbers - $mean;\n  return abs ($diff * $diff);\n}\n", "  sort($numbers);\n\
    \  $mean   = array_sum($numbers) / count($numbers);\n  $diff   = array();\n  for\
    \ ($i=0; $i<count($numbers); $i++) {\n    $diff[$i] = $numbers[$i] - $mean;\n\
    \  }\n  return array_sum($diff) / count($diff);\n}", "  if (!is_array($numbers))\
    \ {\n    $numbers = array($numbers);\n  }\n  $n = count($numbers);\n  if (!$n)\
    \ {\n    return 0;\n  }\n  $mean = array_sum($numbers) / $n;\n  $x_sum = 0;\n\
    \  foreach ($numbers as $x) {\n    $x_sum += pow($x - $mean,2);\n  }\n  return\
    \ $x_sum / $n;\n}", "    $means = array_map(function($n){ return $n->mean(); },\
    \ $numbers);\n    return array_reduce($numbers, function($sum, $n) { return $sum\
    \ + ($n->mean() - $sum); }, 0.0) / count($numbers);\n}\n", "  $mean = array_sum($numbers)\
    \ / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers as $number) {\n\
    \    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff);\n\
    }\n", "    $mean = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\n", "    return $numbers;\n}\n", "    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return abs($mean - array_sum($numbers)\
    \ /count($numbers));\n}\n", "  $mean = array_sum($numbers) / count($numbers);\n\
    \  $mad = 0;\n  foreach ($numbers as $n) {\n    $mad += abs($n - $mean);\n  }\n\
    \  return $mad / count($numbers);\n}\n", "    sort($numbers);\n    $n = count($numbers);\n\
    \    $mean = array_sum($numbers) / $n;\n    return abs($mean - array_sum($numbers))\
    \ / $n;\n}\n", "\t$mean = array_sum($numbers) / count($numbers);\n\treturn array_map(\n\
    \t\tfunction($x) { return abs($x - $mean); },\n\t\t$numbers\n\t);\n}", "    if\
    \ (empty($numbers)) {\n        return null;\n    }\n\n    $n = count($numbers);\n\
    \    $mean = array_sum($numbers) / $n;\n    $mad = 0;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $mad = ($mad + abs($numbers[$i] - $mean)) / ($n + 1);\n   \
    \ }\n\n    return $mad;\n}\n", "  $mean = array_sum($numbers) / count($numbers);\n\
    \  return array_map('abs', $numbers) -\n      array_map(function ($x) use ($mean)\
    \ {\n        return $x - $mean;\n      }, $numbers);\n}", "  sort($numbers);\n\
    \  $n = count($numbers);\n\n  $mean = $numbers[0];\n\n  $sum = 0;\n  for ($i =\
    \ 0; $i < $n; $i++) {\n    $sum += pow((($numbers[$i] - $mean), 2));\n  }\n  return\
    \ sqrt($sum / $n);\n}\n", "  $mean = array_sum($numbers) / count($numbers);\n\
    \  $mad = 0;\n  foreach ($numbers as $value) {\n    $mad = $mad + abs($value -\
    \ $mean);\n  }\n  return $mad;\n}\n", "  $mean  = array_sum($numbers) / count($numbers);\n\
    \  $dev   = 0;\n  $count = count($numbers);\n  foreach ($numbers as $number) {\n\
    \    $dev += abs($number - $mean);\n  }\n  return ($count > 1) ? $dev / $count\
    \ : 0;\n}\n", "  $mean = array_sum($numbers) / count($numbers);\n  return abs($mean\
    \ - array_sum(array_map(function ($x) { return $x; }, $numbers)) / count($numbers));\n\
    }", "  $mean    = array_sum($numbers) / count($numbers);\n  $diff    = array_diff($numbers,\
    \ $mean);\n  return array_sum($diff) / count($diff);\n}", "  return sqrt(\n  \
    \        array_reduce($numbers, function($sum, $value) {\n            return $sum\
    \ + pow($value - $sum, 2);\n          }, 0) / count($numbers)\n         );\n}",
  "  sort($numbers);\n  $n = count($numbers);\n  $mean = $numbers[0];\n  $sum = 0;\n\
    \  for ($i = 1; $i < $n; ++$i) {\n    $sum += abs($numbers[$i] - $mean);\n  }\n\
    \  return $sum / $n;\n}", "    $mean = array_sum($numbers) / count($numbers);\n\
    \    $mean_abs = abs($numbers - $mean);\n    return array_sum($mean_abs) / count($mean_abs);\n\
    }\n</code>\n<|/ a dscore=4 tags=php,math,statistics |>\n<| c |>\nIt isn't clear\
    \ from the question whether the dataset is continuous or not, but if there are\
    \ gaps, then you should consider the difference between the highest and lowest\
    \ number, and divide that by the number of gaps.\n<|/ c |>\n<| c |>\nGood point!\
    \ One way or another, there need to be gaps in the dataset.\n<|/ c |>\n<| c |>\n\
    Thank you for sharing your code.  I'm also looking for some code to calculate\
    \ the mean absolute deviation, but this one works best.\n<|/ c |>\n<| c |>\nThanks\
    \ for sharing your code. It seems the function always returns the same value if\
    \ all elements are equal. Any ideas on how to fix this?\n<|/ c |>\n<| c |>\nHow\
    \ is this code different from `array_sum( abs($numbers - $mean) )/ count($numbers);`?\n\
    <|/ c |>\n<| a tags=php,math,statistics |>\nThe answer above is good but for people\
    \ who want to calculate it only once (for large data sets). \n<code>\n$mean =\
    \ $sum / count($numbers);\n$mean = array_sum($numbers) / count($numbers);\n$mad\
    \ = abs($numbers - $mean);\nreturn array_sum($mad) / count($mad);\n</code>\n<|/\
    \ a dscore=4 |>\n<| c |>\n+1 for avoiding two lines of code, which can make debugging\
    \ easier (especially if you're not familiar with the array_sum() function).\n\
    <|/ c |>\n<| a |>\nIf you have only positive values in your array, you can compute\
    \ the mean just by adding all the values, divide it by the length of the array,\
    \ and substract that value from the array\n<code>\n<?php", "  $mean = get_average($numbers);\n\
    \  return abs(array_sum($numbers) - $mean);\n}\n", "  // Calculate mean and standard\
    \ deviation\n  $mean = array_sum($numbers) / count($numbers);\n  $variance = array_sum(array_diff($numbers,\
    \ [$mean])) / count($numbers);\n\n  // Return the calculated MAD\n  return abs($mean\
    \ - round($variance, 4));\n}\n", "  return array_sum($numbers)\n    / count($numbers)\n\
    \    - (array_sum($numbers) /\n       count($numbers))\n    ** 2;\n}", "    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $variance = array_sum(array_diff($numbers,\
    \ $mean)) + array_sum($numbers);\n    return $variance / count($numbers);\n}",
  "  $mean = array_sum($numbers) / count($numbers);\n  return round(abs($mean - array_sum(array_map(function\
    \ ($x) {\n    return fabs($x);\n  }, $numbers))), 4);\n}\n</code>\n<|/ a tags=statistics,php,algorithm,math\
    \ |>\n<| c |>\nthis gives me a different result. what i'm looking for, is the\
    \ mean of all the numbers in the array, and all the numbers in the array, without\
    \ having to loop through each number in the array\n<|/ c |>\n<| a dscore=0 tags=statistics,php,algorithm,math\
    \ |>\nI see that you have some good answers already but i think this is a little\
    \ bit of an edge case.\nSince you mention having to loop through each element\
    \ in the array for standard deviation the best way imo is something like this:\n\
    <code>", "    // calculate the mean of the numbers and subtract it from the numbers\n\
    \    // to give us an absolute deviation from the mean\n    $mean = array_sum($numbers)\
    \ / count($numbers);\n    return array_sum(abs($numbers - $mean)) / count($numbers);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI believe you are on the right track,\
    \ but this doesn't appear to be the right way to do it.  When I run the code in\
    \ the OP's question, I get 1.5 not 1.0, which is what they want.  Please try this\
    \ code and show me the output to prove it to me that I am correct.  Also please\
    \ tell me why my code doesn't work.\n<|/ c |>\n<| c |>\nThis does not take into\
    \ account the fact that `mean` is not really the mean of anything...\n<|/ c |>\n\
    <| c |>\nI see your point, but this method is based on the OP's example, which\
    \ shows that the mean is 3.0 and the standard deviation is 1.0 (http://en.wikipedia.org/wiki/Standard_deviation#Algorithm)\n\
    <|/ c |>\n<| c |>\nI mean the mean of the example numbers is 3, but the mean of\
    \ a real dataset is usually much higher and the mean is a lot more far away from\
    \ that.  But since `stdDev()` does not take into account the mean of anything,\
    \ your result is not the same as the OP's example answer.\n<|/ c |>\n<| a tags=statistics,php\
    \ |>\nYou can use the following function and get the MAD in PHP:\n<code>", " \
    \   $mean = array_sum($numbers) / count($numbers);\n    return abs($mean - array_sum(array_map(function\
    \ ($num) use ($mean) {\n        return $num - $mean;\n    }, $numbers)));\n}\n",
  "\t$ns = count($numbers);\n\t$mean = $numbers[0];\n\t\n\tif ($ns === 1) {\n\t\t\
    return abs($numbers[0] - $mean);\n\t}\n\t\n\tfor ($i = 1; $i < $ns; $i++) {\n\t\
    \t$mean += ($numbers[$i] - $mean) / $ns;\n\t}\n\treturn abs($mean - $numbers[$ns\
    \ - 1]);\n}\n", "  $mean = array_sum($numbers) /count($numbers);\n  $dev = 0;\n\
    \  foreach ($numbers as $n) {\n    $dev += pow(( $n - $mean ),2);\n  }\n  return\
    \ $dev/count($numbers);\n}\n</code>\n<|/ a tags=algorithm,php,math,statistics\
    \ |>\n<| c |>\nCould you please add the description for the formula and how does\
    \ it compares to the other two answers?\n<|/ c |>\n<| c |>\nThis doesn't compute\
    \ \"mean\".  It computes \"average\".\n<|/ c |>\n<| c |>\nthe mean of $numbers\
    \ is 1/(n+1), so for an array with 3 elements it will return 0.5, not 1/3.\n<|/\
    \ c |>\n<| c |>\nYou are right. Thanks for pointing that out. I've edited the\
    \ answer to correct this mistake.\n<|/ c |>\n<| c |>\nNice, but your edit still\
    \ isn't correct.  That formula doesn't compute \"mean\".  It computes \"average\"\
    .\n<|/ c |>\n<| a dscore=4 tags=algorithm,php,math,statistics |>\nThe formula\
    \ is simply: sum(x)/len(x), where sum(x) is sum of all numbers in array, and len(x)\
    \ is number of elements in array.\n<|/ a |>\n<| c |>\nIt does not compute the\
    \ mean.  It computes the average.  A different formula, \"mean absolute deviation\"\
    , computes the mean as you say.\n<|/ c |>\n<| c |>\nI agree with. This formula\
    \ does not compute the mean. It computes the average.\n<|/ c |>\n<| c |>\nNice.\
    \  I love the simplicity and conciseness of this approach.\n<|/ c |>\n<| c |>\n\
    It doesn't compute the mean. It computes the average.\n<|/ c |>\n<| a dscore=4\
    \ |>\nAs far as I can see, all the answers here compute mean rather than absolute\
    \ deviation. To compute absolute deviation around mean, use:\n<code>", "  // Initialize\
    \ variables\n  $number_of_numbers = count($numbers);\n  $sum = 0;\n  $mean = array_sum($numbers)\
    \ / $number_of_numbers;\n\n  // For each number in the dataset\n  for ($i = 0;\
    \ $i < $number_of_numbers; $i++) {\n    // Calculate the difference of the current\
    \ number and the mean\n    $diff =  $numbers[$i] - $mean;\n    // Add the absolute\
    \ value of the difference to the sum\n    $sum += abs($diff);\n  }\n\n  // Return\
    \ the MAD\n  return $sum / $number_of_numbers;\n}\n", "    $mean = array_sum($numbers)\
    \ / count($numbers);\n    $sum = 0;\n    foreach ($numbers as $n) {\n        $sum\
    \ += pow(($n - $mean), 2);\n    }\n    return $sum / count($numbers);\n}\n", " \
    \   if (!is_array($numbers)) {\n        $numbers = array($numbers);\n    }\n \
    \   $mean = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}", "    $mean = array_sum($numbers) / count($numbers);\n\
    \    $deviations = array();\n    foreach ($numbers as $number) {\n        $deviations[]\
    \ = abs($number - $mean);\n    }\n    return array_sum($deviations) / count($numbers);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis code does not calculate MAD but MAD around\
    \ the mean.\n<|/ c |>\n<| c |>\nYeah my bad.\n<|/ c |>\n<| c |>\nCan you please\
    \ check the updated code? I tested it on random datasets and it seems to be working\
    \ fine.\n<|/ c |>\n<| a tags=performance,php,arrays |>\nI used two approaches\
    \ for MAD:\n1. Function with array_sum and array_diff functions:\n<code>", " \
    \ // First calculate the mean of all numbers.\n  $sum = 0;\n  foreach ($numbers\
    \ as $n) {\n    $sum += $n;\n  }\n  $mean = intval($sum / count($numbers));\n\n\
    \  // Now calculate the absolute deviation from mean.\n  $dev_sum = 0;\n  for\
    \ ($n = 0; $n < count($numbers); $n++) {\n    $dev_sum += abs($numbers[$n] - $mean);\n\
    \  }\n  return $dev_sum / count($numbers);\n}\n</code>\nThe same formula is also\
    \ used for other data metrics such as Root Mean Square Error (RMSE) and Mean Squared\
    \ Error (MSE).\n<|/ a tags=mean,math,statistics |>\n<| a dscore=2 |>\nThe formula\
    \ for mean of absolute deviation of numbers is (sum of absolute deviations / n).\n\
    <|/ a tags=mean,math,statistics |>\n<| a |>\nIf you are talking about a computer\
    \ program that calculates your average, here's what I have written:\n<code>",
  "  sort($numbers);\n  $diff = array_diff($numbers, array_fill(0, count($numbers),\
    \ 0));\n  $mean = array_sum($diff) / count($diff);\n  return array_sum($diff)\
    \ / count($diff);\n}\n", "  $mean      = array_sum($numbers)  / count($numbers);\n\
    \  $sum_diff = 0;\n  foreach ($numbers as $number) {\n    $sum_diff += abs($number\
    \ - $mean);\n  }\n  return $sum_diff / count($numbers);\n}\n", "    if (count($numbers)\
    \ < 2) {\n        return 0;\n    }\n    $mean = array_sum($numbers) / count($numbers);\n\
    \    return abs(array_sum($numbers) - $mean);\n}", "  $mean = array_sum($numbers)\
    \ / count($numbers);\n  $deltas = $numbers - $mean;\n  $mad = 0;\n  foreach ($deltas\
    \ as $delta) {\n    $mad += abs($delta);\n  }\n  return $mad / count($numbers);\n\
    }\n", "    $mean = mean($numbers);\n    $mad = sqrt(array_sum(array_map(function\
    \ ($num) use ($mean) {\n        return ($num - $mean) * ($num - $mean);\n    },\
    \ $numbers)) / count($numbers));\n    return $mad;\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| a dscore=2 |>\nHere's an approach using a rolling window of size 3:\n\
    <code>\n$numbers = [1,2,3,4,5,6,7,8,9,10];\n\n$rollingWindowSize = 3;\n$result\
    \ = array_reduce(\n    $numbers,\n    function ($acc, $val) use ($rollingWindowSize,\
    \ $numbers) {\n        $rollingWindow = array_slice($acc, -$rollingWindowSize);\n\
    \        $rollingWindow[] = $val;\n        return array_merge($rollingWindow,\
    \ $acc);\n    },\n    []\n);\n\necho array_sum(array_map(function($value){\n \
    \   return abs($value - array_sum($result)/count($result));\n}, $result));\n</code>\n\
    Output:\n<code>\n1.0\n</code>\nDemo on 3v4l.org\n<|/ a tags=php,arrays,mean |>\n\
    <| a dscore=0 |>\nI wrote this for my own project, it returns the average of the\
    \ last 3 values in a array\n<code>", "  $n = count($numbers);\n  $mean = array_sum($numbers)\
    \ / $n;\n  $sum = 0;\n  for ($i = 0; $i < $n; ++$i) {\n    $sum += $numbers[$i]\
    \ - $mean;\n  }\n  return $sum / $n;\n}\n", "    // return the average absolute\
    \ difference\n    return array_reduce($numbers, function($sum, $val) { return\
    \ $sum + abs($val); }, 0) / count($numbers);\n}\n", "  return sqrt(array_sum(array_map(function\
    \ ($number) { return (abs($number - $numbers[0])); }, $numbers)) / count($numbers));\n\
    }\n", "\t$mean = array_sum($numbers) / count($numbers);\n\treturn array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}", "    $mean  = 0;\n    $length = 0;\n    foreach\
    \ ($numbers as $number)\n        $mean += $number;\n    $length = count($numbers);\n\
    \n    $mean = count($numbers) ? $mean / $length : 0;\n\n    $squared_deltas =\
    \ array();\n    for ($i = 0; $i < $length; $i++) {\n        $delta = $numbers[$i]\
    \ - $mean;\n        $squared_deltas[] = $delta * $delta;\n    }\n\n    return\
    \ array_sum($squared_deltas) / count($numbers);\n}\n</code>\nAnd here is a complete\
    \ solution using your exact data set:\n<code>\n<?php\n$data = [\n    [\n     \
    \   'time' => '2014-01-02 05:43:05',\n        'temp' => 12.1,\n        'pressure'\
    \ => 1014.25,\n        'humidity' => 82.3,\n        'windSpeed' => 3.9,\n    \
    \    'windBearing' => 183,\n        'windGust' => 2.4,\n        'cloudCover' =>\
    \ 0.1,\n        'uvIndex' => 1.9,\n        'visibility' => 6.4,\n        'ozone'\
    \ => 0.2,\n    ],\n    [\n        'time' => '2014-01-02 05:43:05',\n        'temp'\
    \ => 12.2,\n        'pressure' => 1014.27,\n        'humidity' => 82.3,\n    \
    \    'windSpeed' => 3.9,\n        'windBearing' => 183,\n        'windGust' =>\
    \ 2.4,\n        'cloudCover' => 0.1,\n        'uvIndex' => 1.9,\n        'visibility'\
    \ => 6.4,\n        'ozone' => 0.2,\n    ],\n    [\n        'time' => '2014-01-02\
    \ 05:43:05',\n        'temp' => 12.2,\n        'pressure' => 1014.27,\n      \
    \  'humidity' => 82.3,\n        'windSpeed' => 3.9,\n        'windBearing' =>\
    \ 183,\n        'windGust' => 2.4,\n        'cloudCover' => 0.1,\n        'uvIndex'\
    \ => 1.9,\n        'visibility' => 6.4,\n        'ozone' => 0.2,\n    ],\n   \
    \ [\n        'time' => '2014-01-02 05:43:05',\n        'temp' => 12.2,\n     \
    \   'pressure' => 1014.27,\n        'humidity' => 82.3,\n        'windSpeed' =>\
    \ 3.9,\n        'windBearing' => 183,\n        'windGust' => 2.4,\n        'cloudCover'\
    \ => 0.1,\n        'uvIndex' => 1.9,\n        'visibility' => 6.4,\n        'ozone'\
    \ => 0.2,\n    ],\n    [\n        'time' => '2014-01-02 05:43:05',\n        'temp'\
    \ => 12.2,\n        'pressure' => 10", "    $mean   = 0;\n    $num_sum = 0;\n\
    \    $length = count($numbers);\n\n    for ($i = 0; $i < $length; $i++) {\n  \
    \      $num_sum += $numbers[$i];\n    }\n    $mean = $num_sum / $length;\n\n \
    \   $made_numbers = array();\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ $made_numbers[] = abs($numbers[$i] - $mean);\n    }\n    return array_sum($made_numbers)\
    \ / count($made_numbers);\n}\n", "  // calculate the mean\n  $mean = array_sum($numbers)\
    \ / count($numbers);\n  // calculate the deviations\n  $devs = $numbers - $mean;\n\
    \  // calculate the mean absolute deviation\n  return array_sum($devs) / count($devs);\n\
    }\n\n$input1 = array(1.0, 2.0, 3.0, 4.0);\n$input2 = array(1.0, 2.0, 3.0, 4.0);\n\
    $input3 = array(1.0, 2.0, 3.0, 4.0);\n$input4 = array(1.0, 2.0, 3.0, 4.0);\n",
  "  sort($numbers);\n  $n = count($numbers);\n  $mean = array_sum($numbers) / $n;\n\
    \  $squared_diff = 0;\n  foreach ($numbers as $number) {\n    $squared_diff +=\
    \ pow($number - $mean,2);\n  }\n  return sqrt($squared_diff / $n);\n}", "  return\
    \ array_reduce($numbers, function($sum, $value) {\n    $sum += pow((float)($value\
    \ - (float)$sum), 2);\n    return $sum;\n  }, 0) / count($numbers);\n}\n", " \
    \ sort($numbers);\n  $mean  = array_sum($numbers) / count($numbers);\n  $diffs\
    \ = $numbers - $mean;\n  $abs   = array_sum(abs($diffs));\n  return $abs;\n}\n",
  "  $mean = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach\
    \ ($numbers as $number) {\n    $squared_diff += pow($number - $mean, $2);\n  }\n\
    \  return sqrt($squared_diff / count($numbers));\n}\n", "  $mean = array_sum($numbers)\
    \ / count($numbers);\n  $squared_diffs = array_map(function ($number) {\n    return\
    \ $number - $mean;\n  }, $numbers);\n  return array_sum($squared_diffs) / count($numbers);\n\
    }\n", "  // Ensure numbers is a real array.\n  if (is_object($numbers) && isset($numbers->values))\
    \ {\n    $numbers = $numbers->values;\n  }\n  reset($numbers);\n  // Return mean\
    \ if only one input.\n  if (count($numbers) === 1) {\n    return array_pop($numbers);\n\
    \  }\n  // Return sum of differences if multiple inputs.\n  $sum = array_sum($numbers);\n\
    \  return array_sum((array) array_map('abs', $numbers)) / count($numbers);\n}\n",
  "  $mean = array_sum($numbers) / count($numbers);\n  $mad_sum = 0;\n  foreach ($numbers\
    \ as $number) {\n    $mad_sum += abs($number - $mean);\n  }\n  return $mad_sum\
    \ / count($numbers);\n}\n", "  $mean = null;\n  $n = 0;\n  foreach ($numbers as\
    \ $number) {\n    if (is_null($mean))\n      $mean = $number;\n    else\n    \
    \  $mean += $number;\n    $n++;\n  }\n  return $mean / $n;\n}\n", "  $mean = array_sum($numbers)\
    \ / (count($numbers) - 1);\n  return array_map(function($x) { return abs($x -\
    \ $mean); }, $numbers);\n}\n", "  sort($numbers);\n  $mad = 0;\n  for ($i = 1;\
    \ $i < count($numbers); $i++) {\n    $diff =$numbers[$i] - $numbers[($i-1)];\n\
    \    $mad = $mad + $diff * $diff;\n  }\n  return $mad / count($numbers);\n}\n\
    </code>\n<|/ a dscore=2 tags=arrays,php,math |>\n<| c |>\nThe first line of the\
    \ code should be:", "  $mean  = array_sum($numbers) / count($numbers);\n  $diff\
    \ = array_map(function ($x) { return abs($x - $mean); }, $numbers);\n  return\
    \ array_sum($diff) / count($diff);\n}\n", "  return array_sum(abs($numbers)) /\
    \ count($numbers);\n}\n", "    foreach ($numbers as $number) {\n        $mean\
    \ = array_sum($numbers) / count($numbers);\n        $diff = abs($number - $mean);\n\
    \        $mad += $diff;\n    }\n    return $mad / count($numbers);\n}", "  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $diff = array_map(function ($x)\
    \ { return abs($x - $mean); }, $numbers);\n  return array_sum($diff) / count($diff);\n\
    }", "    $mean = array_sum($numbers) / count($numbers);\n    $variance = 0;\n\
    \    $mad = 0;\n    foreach ($numbers as $number) {\n        $variance += pow($number\
    \ - $mean, $2);\n    }\n    $variance = pow(sqrt($variance), .5);\n    $mad =\
    \ $variance;\n    return $mad;\n}\n", "    foreach($numbers as $key => $number)\
    \ {\n        $difference[$key] = $numbers[$key] - $mean[$key];\n    }\n    return\
    \ sqrt(array_sum(array_map(function ($number) { return pow($number, 2); }, $difference))\
    \ / count($difference));\n}\n</code>\n<|/ a tags=php,pearson-correlation,arrays\
    \ |>\n<| c |>\nThis returns `NULL`. It doesn't calculate the MAD. Can you please\
    \ provide working code with `$array1` and `$array2`?\n<|/ c |>\n<| c |>\nWorks\
    \ for me and does calculate the MAD based on the input array and output array.\
    \ Maybe it's an issue with the way you are using it? `$array1 = array(1,2,3,4,5,6,7);\n\
    $array2 = array(1,3,4,5,6,7,8,9,10,11,12);\n\n$output = array();\n$mean1 = $array1[0];\n\
    $mean2 = $array2[0];\nforeach($array1 as $key => $value) {\n    $difference[$key]\
    \ = $array1[$key] - $mean1;\n    $mean1 = $mean2;\n    $mean2 = $value;\n}\n\n\
    $output = array(\n    'correlation_coefficient' => var_dump(pearson($array1, $array2,\
    \ $output)),\n    'median_absolute_deviation' => var_dump(median_absolute_deviation($array1)),\n\
    \    'mean_absolute_deviation' => var_dump(mean_absolute_deviation($array1)),\n\
    );`\n<|/ c |>\n<| a tags=php,pearson-correlation,arrays dscore=1 |>\nYou can get\
    \ the desired results much easier by using array_map() and array_sum():\n<code>\n\
    $array1 = array(1,2,3,4,5,6,7);\n$array2 = array(1,3,4,5,6,7,8,9,10,11,12);\n\n\
    $output = array();\n$mean1 = $array1[0];\n$mean2 = $array2[0];\nforeach($array1\
    \ as $key => $value) {\n    $difference[$key] = $array1[$key] - $mean1;\n    $mean1\
    \ = $mean2;\n    $mean2 = $value;\n}\n\n$output = array(\n    'correlation_coefficient'\
    \ => array_sum($difference)/count($difference),\n    'median_absolute_deviation'\
    \ => array_sum($difference)/sqrt(count($difference)),\n    'mean_absolute_deviation'\
    \ => array_sum($difference)/sqrt(count($difference)),\n);\n\nprint_r($output);\n\
    </code>\nOutput:\n<code>\nArray\n(\n    [correlation_coefficient] => 0.6\n   \
    \ [median_absolute_deviation] => 0.58\n", "    $mean = 0;\n    foreach ($numbers\
    \ as $n) {\n        $mean += abs($n);\n    }\n    return ($mean / count($numbers));\n\
    }\n", "  sort($numbers);\n  $mean     = $numbers[0];\n  $diffs    = array_diff($numbers,\
    \ [$mean]);\n  $first_diff = array_sum($diffs) / count($diffs);\n  return $first_diff;\n\
    }\n", "    $mean = array_sum($numbers) / count($numbers);\n    $total = 0;\n \
    \   foreach ($numbers as $number) {\n        $total += abs($number - $mean);\n\
    \    }\n\n    return $total;\n}\n", "  return array_reduce($numbers, function($sum,\
    \ $number) {\n    return $sum + (abs($number) - $number);\n  }, 0);\n}", "  return\
    \ array_reduce($numbers, function($sum, $number) {\n    return $sum + abs($number);\n\
    \  }, 0) / count($numbers);\n}\n", "  if (!is_array($numbers)) {\n    return false;\n\
    \  }\n\n  // Compute the mean.\n  $mean   = array_sum($numbers) / (count($numbers)\
    \ - 1);\n  $mad    = 0.0;\n\n  // Compute the deviation.\n  foreach ($numbers\
    \ as $val) {\n    $mad = ($mad + abs($val - $mean)) / 2;\n  }\n\n  return $mad;\n\
    }", "    sort($numbers);\n\n    // If the array is empty, return 0.0\n    if (count($numbers)\
    \ == 0) {\n        return 0.0;\n    }\n\n    $mean = array_sum($numbers) / count($numbers);\n\
    \n    $squared_diffs = array_map(\n        function ($number) {\n            return\
    \ $number - $mean;\n        },\n        $numbers\n    );\n\n    return array_sum($squared_diffs)\
    \ / count($numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nIf this is what\
    \ it takes to calculate the median, then the median is the mean of the set of\
    \ numbers that are closest to the mean. So, this is exactly what my answer does.\
    \ Can you please explain why?\n<|/ c |>\n<| c |>\nAs a mathematician, a median\
    \ is often considered the middle value of a set of data points. For example, a\
    \ median is usually considered the middle value of a set of data points for which\
    \ there are two or more data points with equal values. So, if you have a set that\
    \ looks like: `1, 2, 3, 1, 5, 6, 4`, then a median is `4`. The median of a set\
    \ of numbers is defined by the middle value (the median is the average of the\
    \ two middle values), not necessarily the mean of the middle values (the median\
    \ is still the middle value, but a different one).\n<|/ c |>\n<| c |>\nOkay, but\
    \ your algorithm does not calculate the median of the set of numbers. You said\
    \ it does (sort them by value, then find the mid-point). But it doesn't. That's\
    \ what I'm trying to say. This algorithm calculates the mean of the set of numbers.\
    \ That's not what median means.\n<|/ c |>\n<| c |>\nAh, I see what you mean. I\
    \ read it as the median is the middle value of a set of numbers such that there\
    \ are two or more data points with equal values. This algorithm returns the middle\
    \ value of a set of numbers. If the set of numbers looks like `1, 2, 3, 1, 5,\
    \ 6, 4`, the median is `4`. That is what the median is meant to be, except that\
    \ the median is not necessarily the middle value because there are other values\
    \ with equal values (like `1` and `5` in my example).\n<|/ c |>\n<| c |>\nI still\
    \ think it is the median because if you look at the set of numbers, the median\
    \ is `4`. But your algorithm returns `2`, which is what I think you meant. `2`\
    \ is not the middle value of a set of numbers.\n<|/ c |>\n<| a |>\nIn general,\
    \ what you're looking for is the median of a set of numbers. \nFor this, you first\
    \ need to sort your numbers. You can do that in various ways depending on how\
    \ you want to do it, including bubble-sort, insertion-sort, or ", "  $count =\
    \ count($numbers);\n  $mean  = 0;\n  $sum_squares = 0;\n  foreach ($numbers as\
    \ $n) {\n    $mean  = $mean + $n;\n    $sum_squares = $sum_squares + pow($n -\
    \ $mean,2);\n  }\n  return $sum_squares / ( $count-1);\n}\n", "    return mean(abs($numbers\
    \ - array_mean(array($numbers))))\n}", "  $mean = array_sum($numbers) / count($numbers);\n\
    \  $mad = 0;\n  foreach($numbers as $n) {\n    $mad_current = abs($n - $mean);\n\
    \    $mad = $mad + $mad_current;\n  }\n  return $mad/count($numbers);\n}\n</code>\n\
    <|/ a dscore=4 tags=php,arrays |>\n<| c |>\nWhy do you use count($numbers) instead\
    \ of count($numbers)? Isn't it the same?\n<|/ c |>\n<| c |>\nThis does not give\
    \ the correct answer for the case where all values are the same\n<|/ c |>\n<|\
    \ c |>\nthis does give the correct answer for the case where all values are the\
    \ same\n<|/ c |>\n<| c |>\nThe mean of all the values should be zero in the case\
    \ of all values being exactly the same\n<|/ c |>\n<| c |>\nThis should work better\
    \ with array_sum() instead of array_sum($numbers) to avoid the array_count_values()\n\
    <|/ c |>\n<| a tags=php,arrays |>\nThe best way to calculate the MAD is to use\
    \ array_map\n<code>\n<?php\n$array = array(1.0, 2.0, 3.0, 4.0);\nvar_dump(array_map('abs',\
    \ $array));\nvar_dump(mad_average($array));\n</code>\nOutputs:\n<code>\narray(4)\
    \ {\n  [0] =>\n  float(1.0)\n  [1] =>\n  float(2.0)\n  [2] =>\n  float(3.0)\n\
    \  [3] =>\n  float(4.0)\n}\n\nfloat(3.333....)\n</code>\nAnd the function itself:\n\
    <code>", "    $mean = array_sum($numbers) /count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}", "  sort($numbers);\n  $n = count($numbers);\n\
    \  if ($n < 2) {\n    return 0.0;\n  }\n  $avg = 0.0;\n  $sum_of_squares = 0;\n\
    \  for ($i = 0; $i < $n; ++$i) {\n    $diff =  $numbers[$i] - $avg;\n    $sum_of_squares\
    \ += pow($diff, 2);\n    $avg = $sum_of_squares / $n;\n  }\n  return sqrt($sum_of_squares\
    \ / ($n - 1));\n}\n", "    foreach ($numbers as $number) {\n        $mean = array_sum($numbers)\
    \ / count($numbers);\n        foreach ($numbers as $value) {\n            if ($value\
    \ != $mean)\n                echo \"$value - $mean\\n\";\n        }\n    }\n}",
  "  $mean  = array_sum($numbers) / count($numbers);\n  $delta = array_map(function($x)\
    \ { return $x - $mean; }, $numbers);\n  return array_sum($delta) / count($delta);\n\
    }\n\n/**\n * Calculate geometric mean\n *\n * @param array $numbers the numbers\
    \ to calculate mean for\n *\n * @return float\n */", "  // Calculate standard\
    \ deviation by squaring all elements\n  $sumsq = array_sum(array_map(function\
    \ ($number) { return pow($number, 2); }, $numbers));\n  return sqrt($sumsq / count($numbers));\n\
    }\n", "    // create an array of all points\n    $points = array_map(function($point)\
    \ {\n        return $point;\n    }, $numbers);\n    $numbers = $points;\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_reduce($numbers,\
    \ function($result, $number) {\n        return $result + ($number - $mean);\n\
    \    });\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nI was just looking for a way\
    \ to calculate MAD in PHP and came up with this:\n<code>\n/**\n * Calculate the\
    \ mean absolute deviation from a data set\n *\n * $data - array - array of numbers\n\
    \ * $mean - float - mean of given data set\n * string - md of given data set\n\
    \ */", "  $mean = array_sum($numbers) / count($numbers);\n  $diffs = array_map(function\
    \ ($x) { return $x - $mean; }, $numbers);\n  $mad = array_reduce($diffs, function\
    \ ($sum, $diff) { return $sum + abs($diff); }, 0);\n  return $mad;\n}\n", "  $mean\
    \ = __array_sum($numbers)/count($numbers);\n  $deviations = array_map(function\
    \ ($val) use($mean) {\n    return abs($val - $mean);\n  }, $numbers);\n  return\
    \ array_sum($deviations) / count($numbers);\n}", "  $mean = mean(array($numbers));\n\
    \  return abs(array_reduce($numbers, function($sum, $value) use ($mean) {\n  \
    \  return $sum + abs($value - $mean);\n  }, 0) / count($numbers));\n}\n", "  $mean\
    \ = $numbers->mean();\n  return $mean->abs();\n}\n", "  sort($numbers);\n  $mean\
    \ = array_pop($numbers);\n  return abs($mean) - mean_of_numbers($numbers);\n}\n",
  "  if (empty($numbers)) {\n    throw new LogicException(\"Input must not be empty\"\
    );\n  }\n  $num_elements = count($numbers);\n  $mean = 0;\n  foreach ($numbers\
    \ as $number) {\n    $mean += $number;\n  }\n  return $mean / $num_elements;\n\
    }\n", "    // Sort data into ascending order\n    sort($numbers);\n\n    // Calculate\
    \ mean and standard deviation\n    $mean    = array_sum($numbers) / count($numbers);\n\
    \    $sigma   = array_sum(array_diff($numbers, $mean)^2);\n\n    // Return mean\
    \ absolute deviation\n    return (float) sqrt($sigma / count($numbers));\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
