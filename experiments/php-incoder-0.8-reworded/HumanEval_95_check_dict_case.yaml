name: HumanEval_95_check_dict_case
language: php
prompt: "<?php\n// Given an array, return true if all keys are strings in lower \n\
  // case or all keys are strings in upper case, else return false.\n// The function\
  \ should return false is the given array is empty.\n// Examples:\n// >>> check_dict_case(array(\"\
  a\" => \"apple\", \"b\" => \"banana\"))\n// true\n// >>> check_dict_case(array(\"\
  a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n// false\n// >>> check_dict_case(array(\"\
  a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\n// false\n// >>> check_dict_case(array(\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n// false\n// >>>\
  \ check_dict_case(array(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n// true\nfunction\
  \ check_dict_case($dict) {\n"
tests: "function candidate(...$args) {\n    return check_dict_case(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(array(\"p\" => \"pineapple\", \"b\"\
  \ => \"banana\")) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\" => \"pineapple\"\
  , \"5\" => \"banana\", \"a\" => \"apple\")) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(\"Name\" => \"John\", \"Age\" => \"\
  36\", \"City\" => \"Houston\")) !== false) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"fruit\"\
  \ => \"Orange\", \"taste\" => \"Sweet\")) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array()) !== false) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["\tfor ($i=0, $c=count($dict); $i<$c; ++$i) {\n\t\tif (is_int($i) ||\
    \ is_string($i)) {\n\t\t\treturn true;\n\t\t}\n\t\t$key = strtolower($i);\n\t\t\
    if ($i===$key || strtoupper($i)===$key) {\n\t\t\treturn true;\n\t\t}\n\t}\n\t\
    return false;\n}\n", "    if(count($dict) == 0)\n        return false;\n    foreach($dict\
    \ as $key=>$value) {\n        if(!is_string($key))\n            return false;\n\
    \    }\n    return true;\n}\n", "\tif (!array_key_exists(0, $dict) || !is_array($dict))\
    \ return false;\n\tforeach ($dict as $key => $value) {\n\t\tif (!is_string($key))\
    \ return false;\n\t\tif (strcasecmp($key, $key) !== 0) return false;\n\t}\n\t\
    return true;\n}\n", "\tforeach ($dict as $key => $value) {\n\t\tif (is_string($key)\
    \ || is_string($value)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
  "  if (empty($dict)) return false;\n  $keys = array_keys($dict);\n  if (count($keys)\
    \ != count(array_map('strtolower', $keys))) return false;\n  return true;\n}",
  "    foreach ($dict as $key => $value) {\n        // Make sure $value is a string\n\
    \        if (is_string($value)) {\n            // If it is a string, make sure\
    \ it is lower case\n            if (ctype_lower($value)) {\n                return\
    \ true;\n            }\n            // If it is upper case, make sure it is upper\
    \ case\n            if (ctype_upper($value)) {\n                return true;\n\
    \            }\n        }\n        // If the value is any other type, return false\n\
    \        return false;\n    }\n    return true;\n}\n", "    foreach($dict as $key=>$value)\
    \ {\n        if (!is_string($key) && !is_string($value)) return false;\n    }\n\
    \    return true;\n}\n", "    if (empty($dict)) return false;\n    foreach ($dict\
    \ as $key => $value) {\n        if (!is_string($key) || !is_string($value)) return\
    \ false;\n    }\n    return true;\n}\n", "  if (!array_key_exists(\"State\", $dict))\
    \ {\n    return true;\n  }\n  $lowerkeys = array_change_key_case($dict, CASE_LOWER);\n\
    \  $upperkeys = array_change_key_case($dict, CASE_UPPER);\n  if (!array_diff_key($lowerkeys,\
    \ $upperkeys)) {\n    return true;\n  }\n  return false;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\nJust use the strtolower and strtoupper functions:\n<code>\n<?php\n\
    $array=array(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\", \"\
    d\" => \"durian\", \"e\" => \"ermine\", \"f\" => \"fennel\");\n$array1=array(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\", \"d\" => \"durian\"\
    , \"e\" => \"ermine\", \"f\" => \"fennel\", \"g\" => \"grape\");\n$array2=array(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\", \"d\" => \"durian\"\
    , \"e\" => \"ermine\", \"f\" => \"fennel\", \"g\" => \"grape\", \"h\" => \"honey\"\
    );\n\n$array3=array(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\"\
    , \"d\" => \"durian\", \"e\" => \"ermine\", \"f\" => \"fennel\", \"g\" => \"grape\"\
    );\n\n$array=array(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    , \"State\" => \"NC\", \"ZIP\" => \"12345\", \"Country\" => \"USA\", \"Favcolor\"\
    \ => \"red\");\n\n$array=array(\"a\" => \"apple\", \"b\" => \"banana\", \"c\"\
    \ => \"cherry\", \"d\" => \"durian\", \"e\" => \"ermine\", \"f\" => \"fennel\"\
    , \"g\" => \"grape\", \"h\" => \"honey\");\n\necho \"<pre>\";\nprint_r(check_dict_case($array));\n\
    print_r(check_dict_case($array1));\nprint_r(check_dict_case($array2));\nprint_r(check_dict_case($array3));\n\
    print_r(check_dict_case($array));\necho \"</pre>\";", "  // Write your code here\n\
    \  return false;\n}", "  if (empty($dict)) return false;\n  $result = array_map(\"\
    strtolower\", array_keys($dict));\n  $result = array_intersect($result, array_map(\"\
    strtoupper\", array_keys($dict)));\n  return $result === array_keys($dict);\n\
    }\n", "  $keys = array_keys($dict);\n  if (count($keys) == 0) return false;\n\
    \  sort($keys);\n  $firstKey = array_shift($keys);\n  if (!is_string($firstKey))\
    \ return false;\n  for ($i = 0; $i < count($keys); $i++) {\n    $key = strtolower($keys[$i]);\n\
    \    $value = $dict[$key];\n    if (!is_string($value) || strcasecmp($value, $key))\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (is_array($dict)\
    \ && count($dict) > 0) {\n    foreach ($dict as $key => $value) {\n      if (is_string($key))\
    \ {\n        if (strtolower($key) == $key) {\n          return true;\n       \
    \ } else {\n          return false;\n        }\n      } else if (is_string($value))\
    \ {\n        if (strtolower($value) == $value) {\n          return true;\n   \
    \     } else {\n          return false;\n        }\n      }\n    }\n  }\n  return\
    \ false;\n}", "    if (empty($dict)) {\n        return false;\n    }\n    foreach\
    \ ($dict as $key => $value) {\n        if (!(is_string($key) || is_string($value)))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  if(count($dict) < 1) {\n        return false;\n    }\n    \n    foreach ($dict\
    \ as $key => $value) {\n        if(!is_string($value)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "\t$ret = true; // Assume success.\
    \ \n\tforeach ($dict as $k => $v) {\n\t\tif (is_string($k) || is_string($v)) {\n\
    \t\t\t$ret = false; // Not all keys or all values \n\t\t\tbreak;\n\t\t}\n\t}\n\
    \treturn $ret;\n}\n\n/**\n * Get an indexed array of arrays with the first row\
    \ of each inner array\n */", "\tglobal $check_dict_case;\n\treturn $check_dict_case;\n\
    }\n", "    foreach($dict as $key => $value)\n    {\n        if (!is_string($key)\
    \ || !is_string($value))\n        {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\n", "    if (empty($dict))\n        return false;\n\
    \    // Check each key's case is either all upper case or all lower case\n   \
    \ foreach($dict as $key => $value) {\n        if (!is_string($key))\n        \
    \    return false;\n    }\n    return true;\n}\n", "    if (!is_array($dict) ||\
    \ !count($dict))\n        return false;\n    $keys = array_keys($dict);\n    sort($keys);\n\
    \    return array_reduce($keys, function($result, $key) { return ($result && is_string($key)\
    \ && ctype_lower($key) || !ctype_lower($key)); }, true);\n}\n", "\tif (!is_array($dict)\
    \ || count($dict) == 0)\n\t\treturn false;\n\tforeach($dict as $key => $value)\
    \ {\n\t\tif (is_string($key) && is_string($value)) {\n\t\t\t$lower = strtolower($key);\n\
    \t\t\t$upper = strtoupper($key);\n\t\t\tif ($lower != $key && $upper != $key &&\
    \ $lower != $upper)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", " \
    \ foreach ($dict as $key => $value) {\n    if (!is_string($key)) return false;\n\
    \    if (strtolower($key) !== $key) return false;\n  }\n  return true;\n}\n",
  "  if (empty($dict)) {\n    return false;\n  }\n\n  foreach ($dict as $key => $value)\
    \ {\n    if (!is_string($key) || !is_string($value)) {\n      return false;\n\
    \    }\n  }\n\n  return true;\n}\n</code>\n<|/ a |>\n<| a dscore=0 tags=php |>\n\
    This code works perfect for me. \nJust use your array and just replace the variables\
    \ with the correct variable\n<code>\n<?php\n$array = array(\n    'first' => array('first'\
    \ => 'first', 'second' => 'second')\n);\n", "    foreach($dict as $key => $value)\
    \ {\n        if(!is_string($key) || !is_string($value) || $key == $value) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "    if\
    \ (empty($dict)) return false;\n\n    foreach($dict as $key => $value) {\n   \
    \     if (!is_string($key)) return false;\n\n        if (ctype_lower($key)) $key\
    \ = strtolower($key);\n        if (ctype_upper($key)) $key = strtoupper($key);\n\
    \    }\n\n    return true;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThis is a\
    \ great idea but I don't think it will work the way you want. It will return false\
    \ if the array only has one key or if the value of that key happens to be an array.\n\
    <|/ c |>\n<| c |>\nGood catch, I forgot that case.\n<|/ c |>\n<| c |>\n`isset($dict[$key])\
    \ && is_array($dict[$key])` will do the trick even better\n<|/ c |>\n<| a tags=php\
    \ |>\n<code>\n<?php\n$array = array(\"key\" => array(\"value\"));\n$array = array(\"\
    key\" => \"value\");\n\nvar_dump(count(array_intersect_key(array_flip($array),\
    \ array_flip($array))));", "\tforeach($dict as $k => $v) {\n\t\tif(is_string($k)\
    \ && is_string($v)) {\n\t\t\tif(strtolower($k) === strtolower($v)) {\n\t\t\t\t\
    unset($dict[$k]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tunset($dict[$k]);\n\t\t\t}\n\
    \t\t}\n\t}\n\tif(count($dict) == 0) {\n\t\treturn false;\n\t}\n\telse {\n\t\t\
    return true;\n\t}\n}", "    $keyCount = count($dict);\n    \n    if ($keyCount\
    \ == 0) {\n        return false;\n    }\n\n    foreach ($dict as $key=>$value)\
    \ {\n        if (is_string($key)) {\n            $lower = strtolower($key);\n\
    \            if ($lower !== $key) {\n                return false;\n         \
    \   }\n        } else {\n            return false;\n        }\n    }\n    \n \
    \   return true;\n}", "  $all_string = true;\n  foreach($dict as $key => $value)\
    \ {\n    if (!is_string($key) && !is_string($value)) {\n      $all_string = false;\n\
    \      break;\n    }\n  }\n  return $all_string;\n}\n", "    $ret = true;\n  \
    \  foreach ($dict as $key => $value) {\n        if (is_string($key) || is_string($value))\
    \ {\n            $ret = ($ret && $key == $value) ? true : false;\n        }\n\
    \    }\n    return $ret;\n}\n", "    // Make sure dict isn't empty\n    if (empty($dict))\
    \ return false;\n    // Loop through all keys and return false if any are non-string\
    \ types\n    foreach ($dict as $key => $value) {\n        if (is_string($key))\
    \ {\n            return false;\n        } else if (is_string($value)) {\n    \
    \        return true;\n        }\n    }\n    // All keys and values are strings,\
    \ so all strings are in lower case\n    return true;\n}\n", "    if (empty($dict))\
    \ {\n        return false;\n    }\n    $keys = array_keys($dict);\n    for ($i\
    \ = 0; $i < count($keys); $i++) {\n        if (is_string($keys[$i])) {\n     \
    \       $keys[$i] = strtolower($keys[$i]);\n        }\n        if (is_string($keys[$i]))\
    \ {\n            $keys[$i] = strtoupper($keys[$i]);\n        }\n    }\n    return\
    \ $keys == array_keys($dict);\n}\n", "  if (!is_array($dict)) {\n    return false;\n\
    \  }\n  foreach ($dict as $key => $value) {\n    $lcase = strtolower($key);\n\
    \    $ucase = strtoupper($key);\n    if ($lcase !== $ucase) {\n      return false;\n\
    \    }\n    if (is_string($value)) {\n      if ($value !== strtolower($value))\
    \ {\n        return false;\n      }\n      if ($value !== strtoupper($value))\
    \ {\n        return false;\n      }\n    }\n  }\n  return true;\n}", "\tif (count($dict)\
    \ == 0) {\n\t\treturn false;\n\t}\n\tforeach ($dict as $key => $value) {\n\t\t\
    if (!is_string($key)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n",
  "  foreach($dict as $key => $value) {\n    if (!is_string($key) && !is_string($value))\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (count($dict)\
    \ == 0) return false;\n  $lower = array();\n  $upper = array();\n  foreach($dict\
    \ as $key => $value) {\n    if (is_int($key)) continue;\n    $lower[strtolower($key)]\
    \ = $value;\n    $upper[strtoupper($key)] = $value;\n  }\n  return array_keys($lower)\
    \ == array_keys($upper);\n}\n", "    if (count($dict) == 0) {\n        return\
    \ false;\n    }\n\n    foreach ($dict as $key => $val) {\n        if (is_int($key))\
    \ {\n            continue;\n        }\n\n        if (ctype_lower($key)) {\n  \
    \          continue;\n        }\n\n        if (ctype_upper($key)) {\n        \
    \    continue;\n        }\n\n        return false;\n    }\n\n    return true;\n\
    }\n", "    foreach ($dict as $key => $value) {\n        if (is_string($key)) {\n\
    \            if (ctype_lower($key)) {\n                return true;\n        \
    \    }\n        }\n        else if (is_string($value)) {\n            if (ctype_upper($value))\
    \ {\n                return true;\n            }\n        }\n        return false;\n\
    \    }\n    return false;\n}", "    foreach ($dict as $key => $value) {\n    \
    \    if (is_string($key)) {\n            if (is_string($value) && strtolower($key)\
    \ == strtolower($value)) {\n                return true;\n            }\n    \
    \    } else {\n            if (!is_string($key) || !is_string($value)) {\n   \
    \             return false;\n            }\n        }\n    }\n    return false;\n\
    }\n</code>\n<|/ a tags=php dscore=3 |>\n<| c |>\nThis does not work for nested\
    \ arrays: `array(\"a\" => array(\"b\" => \"c\"), \"d\" => \"e\")` will match `array(\"\
    a\" => array(\"b\" => \"c\", \"c\" => \"e\"), \"d\" => \"e\")` because both \"\
    c\" and \"e\" are strings, but the question states that only strings should be\
    \ matched.\n<|/ c |>\n<| c |>\nThe question says \"I want to check for each key\
    \ whether it is string or not, and for each key check whether it is string or\
    \ not and if all these conditions are true then return true.\" The code checks\
    \ only one level of nesting. It would not match `array(\"a\" => array(\"b\" =>\
    \ \"c\", \"c\" => \"e\"), \"d\" => \"e\")` because \"c\" is a string and it's\
    \ parent \"b\" is a string too. I'm not sure I understand the question correctly.\n\
    <|/ c |>\n<| c |>\nMy apologies, I misunderstood the question and thought this\
    \ was a recursive function that could match an array containing a sub-array. Now\
    \ I see this answer matches the question's requirements better.\n<|/ c |>\n<|\
    \ c |>\nI believe you can easily adapt this to match nested arrays, I added a\
    \ comment to my answer. If I find a better solution I will post it.\n<|/ c |>\n\
    <| a tags=php dscore=2 |>\nThis is more of a PHP version question...\n<code>",
  "  if (empty($dict)) {\n    return false;\n  }\n  return count(array_filter(array_keys($dict),\
    \ 'is_string')) == count(array_filter(array_keys($dict), 'is_string', true));\n\
    }\n", "  if (empty($dict)) return false;\n  foreach ($dict as $key => $value)\
    \ {\n    if (is_int($key)) return false;\n    if (ctype_upper($key)) {\n     \
    \ $key = $key;\n    } else {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "    if (empty($dict)) return false;\n    foreach ($dict as $key => $value)\
    \ {\n        if (is_string($key) || is_int($key)) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks so\
    \ much! I just wanted to make sure. =)\n<|/ c |>\n<| c |>\nThis solution would\
    \ not work for associative arrays, though.\n<|/ c |>\n<| c |>\nIt does not work\
    \ if your array values have different types, like in associative arrays. So if\
    \ you have a key called \"id\" with value type int, then you might have a string\
    \ value for it. And that is what my example is doing.\n<|/ c |>\n<| a |>\nA general\
    \ solution\nIf your array contains all key-value pairs from your other array,\
    \ you can use array_intersect_key to check for matches:\n<code>\n$myArray = array(\"\
    firstKey\" => \"firstValue\", \"secondKey\" => \"secondValue\");\n\n$myArray =\
    \ array_intersect_key($myArray, array_flip($otherArray));\n</code>\nThis will\
    \ return an array of keys from $otherArray that are also found in $myArray.\n\
    <|/ a tags=php,arrays,compare dscore=4 |>\n<| c |>\nThis solution would not work\
    \ for associative arrays, though.\n<|/ c |>\n<| c |>\nHow about array_intersect_assoc()\
    \ instead of array_intersect_key()?\n<|/ c |>\n<| c |>\n`array_intersect_key`\
    \ is working fine for me with associative arrays\n<|/ c |>\n<| c |>\n`array_flip($otherArray);`\
    \ will flip both array keys and values, so if the array contains a key called\
    \ \"id\" with value type int, then you might have a string value for it. And that\
    \ is what my example is doing.\n<|/ c |>\n<| c |>\n`array_intersect_key` was a\
    \ great function which has helped me so much... Thank you.\n<|/ c |>\n<| a tags=php,arrays,compare\
    \ |>\nThe function array_intersect will do the job for you. Try this:\n<code>\n\
    $array_1 = array(\"a\" => \"apple\", \"b\" => \"banana\");\n$array_2 = array(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\");\n\n$intersect = array_intersect($array_1,\
    \ $array_2);\nprint_r($intersect);\n</code>\nThis will give you:\n<code>\nArray\n\
    (\n    [a", "  foreach ($dict as $key => $value) {\n    if (!is_string($key))\
    \ {\n      return false;\n    }\n    if (strtolower($key) !== strtolower($key))\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (count($dict)\
    \ > 0) {\n    foreach ($dict as $key => $value) {\n      if (!is_string($key)\
    \ || !is_string($value)) {\n        return false;\n      }\n    }\n  }\n  return\
    \ true;\n}\n", "    // Make sure $dict is not empty\n    if (empty($dict)) {\n\
    \        return false;\n    }\n\n    // Use a temporary array for checking keys\
    \ case until we \n    // reach a shorter one.\n    $keys = array_keys($dict);\n\
    \    $size = count($keys);\n    $allStrings = true;\n\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        // If this key is not a string, we can't check its case.\n\
    \        if (!is_string($dict[$keys[$i]])) {\n            $allStrings = false;\n\
    \            break;\n        }\n\n        $thisKey = strtolower($keys[$i]);\n\
    \        $otherKey = strtoupper($keys[$i]);\n\n        // If both keys have a\
    \ different case, we can't check its case.\n        if ($thisKey != $otherKey)\
    \ {\n            $allStrings = false;\n            break;\n        }\n    }\n\n\
    \    // If $allStrings is a false, we can't check its case\n    return !$allStrings;\n\
    }\n", "\tif (!empty($dict)) return true;\n\n\tif (array_filter($dict) == array_keys($dict))\
    \ {\n\t\t$str = strtolower(array_keys($dict));\n\t\treturn is_string($str);\n\t\
    } else {\n\t\t$str = strtoupper(array_keys($dict));\n\t\treturn is_string($str);\n\
    \t}\n}\n\n", "    foreach ($dict as $key => $value) {\n        if (!is_string($value)\
    \ || !isset($dict[$key])) return true;\n        if (ctype_lower($key) && ctype_lower($value))\
    \ {\n            return true;\n        }\n        if (ctype_upper($key) && ctype_upper($value))\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n</code>\n\
    <|/ a tags=arrays,sorting,php,associative-array |>\n<| c |>\nThis also checks\
    \ for empty array and empty string `\"\"`\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for associative arrays with string keys.\n<|/ c |>\n<| a dscore=4 tags=arrays,sorting,php,associative-array\
    \ |>\nI have modified some code from's answer to make it compatible with php5.5\
    \ , php 5.3 .\n<code>", "  $cased = array_intersect_key($dict, array_flip(array_keys($dict)));\n\
    \  foreach ($cased as $key => $value) {\n    if (!is_string($value)) {\n     \
    \ return false;\n    }\n  }\n  return true;\n}\n", "    foreach ($dict as $key\
    \ => $value) {\n        if (!is_string($key) || !is_string($value)) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}", "    foreach($dict\
    \ as $key=>$value) {\n        if(is_string($key) || is_string($value)) {\n   \
    \         return true;\n        }\n    }\n    return false;\n}\n", "  foreach\
    \ ($dict as $key => $value) {\n    if (is_string($key) == false || is_string($value)\
    \ == false) return false;\n  }\n  return true;\n}\n", "  if (count($dict) == 0)\
    \ return false;\n  $keys = array_keys($dict);\n  $lowerkeys = array_map(create_function('$item',\
    \ 'return strtolower($item);'), $keys);\n  $upperkeys = array_map(create_function('$item',\
    \ 'return strtoupper($item);'), $keys);\n  return array_intersect($lowerkeys,\
    \ $upperkeys) === $keys;\n}\n", "    if (sizeof($dict) == 0) {\n        return\
    \ false;\n    }\n\n    foreach($dict as $key => $val) {\n        if ($key ===\
    \ null || $key === \"\" || is_integer($key)) {\n            return false;\n  \
    \      }\n\n        if (is_string($val)) {\n            $keyLower = strtolower($key);\n\
    \            $keyUpper = strtoupper($key);\n\n            return (($keyLower ==\
    \ $key) || \n                    ($keyUpper == $key) || \n                   \
    \ (is_numeric($val) && $val == $key));\n        }\n\n        if (is_array($val))\
    \ {\n            $result = check_dict_case($val);\n            if ($result ==\
    \ false) {\n                return false;\n            }\n        }\n    }\n\n\
    \    return true;\n}\n", "  foreach ($dict as $key => $value) {\n    // Case insensitive\n\
    \    if (is_string($key)) {\n      return (bool)preg_match(\"/[a-z]+/i\", $key)\
    \ && (bool)preg_match(\"/[A-Z]+/i\", $key);\n    }\n  }\n  return false;\n}\n",
  "\tif (!is_array($dict)) {\n\t\treturn false;\n\t}\n\tforeach ($dict as $key =>\
    \ $value) {\n\t\tif (!is_string($key)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!in_array(strtolower($key),\
    \ array_map('strtolower', $dict)) &&\n\t\t\t\t!in_array(strtoupper($key), array_map('strtoupper',\
    \ $dict))) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "    foreach($dict\
    \ as $key => $val) {\n        if (!is_string($key) || !is_string($val)) {\n  \
    \          return false;\n        }\n    }\n    return true;\n}\n", "  if ( count($dict)\
    \ == 0 ) {\n    return false;\n  }\n\n  foreach ( $dict as $key => $val ) {\n\
    \    if ( is_string($key) ) {\n      if ( is_string($val) && strtolower($key)\
    \ == strtolower($val) ) {\n        unset($dict[$key]);\n      }\n      else {\n\
    \        return false;\n      }\n    }\n  }\n  return true;\n}\n", "  foreach\
    \ ($dict as $key => $value) {\n    if (!is_string($value)) {\n      return false;\n\
    \    }\n    if (strtolower($key) != $key) {\n      return false;\n    }\n  }\n\
    \  return true;\n}", "    if (!is_array($dict) || count($dict) < 1)\n        return\
    \ false;\n    for ($i = 0; $i < count($dict); $i++) {\n        if (!is_string($dict[$i]))\n\
    \            return false;\n        if (!ctype_lower($dict[$i]) && ctype_upper($dict[$i]))\n\
    \            return false;\n    }\n    return true;\n}\n", "  if (empty($dict))\
    \ return false;\n\n  $keys = array_keys($dict);\n  return $keys == array_map('strtolower',\
    \ $keys);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=0 tags=php,arrays |>\n<code>\n\
    $array = array(\n    array('name' => 'john', 'age' => '29', 'address' => '123\
    \ street'),\n    array('name' => 'kate', 'age' => '23', 'address' => '456 street')\n\
    );\n\nforeach($array as $item) {\n    foreach($item as $key => $value) {\n   \
    \     if(!is_int($key)) {\n            if(!is_numeric($key)) {\n             \
    \   echo 'Key not numeric';\n            }\n        }\n    }\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThank you for the example.  However I do not want to hard code\
    \ the key names.  I would like to use my existing function to determine the key\
    \ names and then do the checking against the keys in the array.\n<|/ c |>\n<|\
    \ a tags=php,arrays |>\nYou can create an array with all keys in the array using\
    \ array_keys and then check with in_array:\n<code>\n$keysToCheck = array_keys($array);\n\
    $checked = array();\nforeach ($array as $element) {\n    foreach ($keysToCheck\
    \ as $keyToCheck) {\n        if (in_array($keyToCheck, $element)) {\n        \
    \    $checked[$keyToCheck] = $element;\n        }\n    }\n}\n</code>\nYou can\
    \ then output the checked data like so\n<code>\n$keys = array_keys($checked);\n\
    foreach ($keys as $key) {\n    echo $key.' = '.$checked[$key].\"\\n\";\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays |>\nHere's an example that checks array\
    \ keys for strings (case insensitive) and integers (case insensitive). It also\
    \ checks if all keys are present and are strings.\n<code>\n<?php\n$array = array('a'\
    \ => 'apple', '8' => 'banana', 'a' => 'apple');\n$keysToCheck = array_keys($array);\n",
  "    return array_key_exists($dict,$dict) && is_string($dict[$dict]) && is_string($dict[strtolower($dict)])\
    \ && is_string($dict[strtoupper($dict)]);\n}\n</code>\n<|/ a tags=dictionary,php,loops,associative-array\
    \ |>\n<| a dscore=3 tags=dictionary,php,loops,associative-array |>\nHere is a\
    \ simple function that does this. It will ignore key names with values that are\
    \ not strings. It will also ignore anything other than string keys. This is useful\
    \ if your data comes from a database, such as a SQL query.\n<code>\n<?php", " \
    \   if (empty($dict)) { return false; }\n    $keys = array_keys($dict);\n    if\
    \ ($keys == array_map('strtolower', $keys)) return true;\n    return false;\n\
    }\n", "    foreach ($dict as $key => $value) {\n        if (!is_string($value))\
    \ {\n            return false;\n        }\n    }\n\n    return true;\n}\n", " \
    \ foreach ($dict as $key => $value) {\n    if (is_string($key) || is_string($value))\
    \ {\n      return true;\n    }\n  }\n  return false;\n}\n", "    if (count($dict)\
    \ == 0) return false;\n    $keys = array_keys($dict);\n    foreach ($keys as $key)\
    \ {\n        if (!is_string($key)) {\n            $keys = array_values($dict);\n\
    \            foreach ($keys as $k) {\n                if (!is_string($k)) {\n\
    \                    return false;\n                }\n            }\n       \
    \     return true;\n        }\n    }\n    return false;\n}", "    foreach($dict\
    \ as $key => $value) {\n        if(!is_string($key) || !is_string($value)) {\n\
    \            return false;\n        }\n    }\n\n    return true;\n}\n", "\t//\
    \ Iterate through each key and compare them to their lower case equivalent\n\t\
    foreach ($dict as $key => $val) {\n\t\t$lower = strtolower($key);\n\t\tif (is_string($val))\
    \ {\n\t\t\tif ($lower === $key) {\n\t\t\t\tunset($dict[$key]);\n\t\t\t\tunset($dict[$lower]);\n\
    \t\t\t} else {\n\t\t\t\tunset($dict[$key]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Return\
    \ true if all keys are either lower or upper case\n\treturn count($dict) == 0;\n\
    }\n", "  foreach($dict as $key => $value) { \n    if (!is_string($key) || !is_string($value))\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "    $keys = array_keys($dict);\n\
    \    $lower = array_map('strtolower', $keys);\n    $upper = array_map('strtoupper',\
    \ $keys);\n    foreach ($keys as $key) {\n        if ($lower[$key] != \"NAME\"\
    \ && $upper[$key] != \"AGE\") {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n", "    $keys = array_keys($dict);\n    $countKeys = count($keys);\n\
    \n    if ($countKeys === 0) {\n        return false;\n    }\n\n    for ($i = 0;\
    \ $i < $countKeys; $i++) {\n        if (!is_string($keys[$i]) || !is_string($dict[$keys[$i]]))\
    \ {\n            return false;\n        }\n    }\n\n    return true;\n}\n", " \
    \ foreach ($dict as $key => $value) {\n    if (is_string($key) || is_string($value))\
    \ {\n      return true;\n    }\n  }\n  return false;\n}\n", "    return array_reduce($dict,\
    \ function ($acc, $item) {\n        if (array_key_exists(strtolower($item), $acc))\
    \ {\n            return false;\n        }\n        if (array_key_exists(strtoupper($item),\
    \ $acc)) {\n            return false;\n        }\n        return true;\n    });\n\
    }\n</code>\n<|/ a dscore=3 tags=arrays,php |>\n<| c |>\nNice! I changed it to\
    \ `array_reduce($dict, function ($acc, $item) use ($dict) {...` so I can pass\
    \ the array into it as well\n<|/ c |>\n<| a tags=arrays,php |>\nUse array_reduce\
    \ to iterate the array, and then check each key.\n<code>\n$arr = array(\"a\" =>\
    \ \"apple\", \"b\" => \"banana\");\n$result = array_reduce($arr, function ($acc,\
    \ $item) {\n    if (array_key_exists(strtolower($item), $acc)) {\n        return\
    \ false;\n    }\n    if (array_key_exists(strtoupper($item), $acc)) {\n      \
    \  return false;\n    }\n    return true;\n});\n\nvar_dump($result); // bool(false)\n\
    </code>\n<|/ a dscore=3 |>\n<| c |>\nThis works. However I had to add `array_key_exists(strtolower($item),\
    \ $arr)` in front of `array_key_exists($item, $arr)` to make it work.\n<|/ c |>\n\
    <| a tags=arrays,php |>\nI think it would be better to use a foreach loop rather\
    \ than array_reduce. Because array_reduce works on the whole array and returns\
    \ the value after the last successful iteration. Whereas foreach loop will iterate\
    \ over the array and keep on running the code until it finds an element to return.\n\
    <code>\n<?php", "    foreach ($dict as $key => $value) {\n        if (!is_string($value)\
    \ || !is_string($key)) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 tags=arrays,php,sorting,multidimensional-array\
    \ |>\nPHP 5.5 introduced a new function for arrays that is called array_udiff\n\
    <code>\n<?php\n$a = array(\n    array(\"name\" => \"John\", \"age\" => 36, \"\
    city\" => \"Houston\"),\n    array(\"name\" => \"Paul\", \"age\" => 50, \"city\"\
    \ => \"Kenny\")\n);\n\n$b = array(\n    array(\"name\" => \"John\", \"age\" =>\
    \ 36, \"city\" => \"Houston\"),\n    array(\"name\" => \"John\", \"age\" => 36,\
    \ \"city\" => \"Los Angeles\"),\n    array(\"name\" => \"Paul\", \"age\" => 50,\
    \ \"city\" => \"Kenny\")\n);\n\n$diff = array_udiff($a, $b, 'strcasecmp');\nprint_r($diff);\n\
    </code>\nResult\n<code>\nArray\n(\n    [2] => Array\n        (\n            [0]\
    \ => Array\n                (\n                    [name] => Paul\n          \
    \          [age] => 50\n                    [city] => Kenny\n                )\n\
    \        )\n)\n</code>\nMore information about array_udiff can be found here\n\
    <|/ a |>\n<| c |>\nI think this is the answer that should be accepted.\n<|/ c\
    \ |>\n<| a tags=arrays,php,sorting,multidimensional-array |>\n<code>", "    //\
    \ Return false if the given array is empty.\n    if (empty($dict)) return false;\n\
    \n    // Convert keys to lowercase for comparisons.\n    $lower_keys = array_change_key_case($dict,\
    \ CASE_LOWER);\n\n    // If all keys are lowercase, return true.\n    // If all\
    \ keys are uppercase, return false.\n    return count(array_diff_assoc($lower_keys,\
    \ $lower_keys)) === 0;\n}", "    foreach ($dict as $key => $value) {\n       \
    \ if (is_string($key)) {\n            if ($value == strtolower($key)) {\n    \
    \            return true;\n            }\n        } else {\n            if ($value\
    \ == strtoupper($key)) {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}\n", "    $is_lower_case = check_types(array_keys($dict),\
    \ \"string\", \"string\");\n    $is_upper_case = check_types(array_flip(array_keys($dict)),\
    \ \"string\", \"string\");\n    return ($is_lower_case && $is_upper_case) || (!$is_lower_case\
    \ && !$is_upper_case);\n}\n", "    if (count($dict) === 0) {\n        return false;\n\
    \    }\n    foreach ($dict as $key => $value) {\n        if (is_string($key))\
    \ {\n            if ($key[0] === strtoupper($key)) {\n                return true;\n\
    \            }\n        } else {\n            if ($key !== $value) {\n       \
    \         return false;\n            }\n        }\n    }\n    return true;\n}",
  "    $keys = array_keys($dict);\n    foreach ($keys as $key => $val) {\n       \
    \ if ((!is_int($key) && is_string($val)) || (is_int($key) && is_string($val)))\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n", "  \
    \  if (count($dict) == 0) return false;\n    foreach ($dict as $k => $v) if (!(is_string($k)\
    \ || (is_string($v) && $k == strtolower($v)))) return false;\n    return true;\n\
    }\n", "\tif(!is_array($dict)) return false;\n\tforeach($dict as $key=>$value)\
    \ {\n\t\tif(!is_string($key) && !is_string($value)) return false;\n\t\tif((is_string($key)\
    \ && strtolower($key)===strtolower($value)) || (is_string($value) && strtolower($key)===strtolower($value)))\
    \ return true;\n\t}\n\treturn false;\n}\n\n/**\n * Checks whether the given key\
    \ exists in the given array.\n * Returns false if the key does not exist or the\
    \ given array is empty\n * or if it doesn't contain an array at all.\n */", " \
    \ if (empty($dict)) {\n    return false;\n  }\n  foreach ($dict as $key => $val)\
    \ {\n    if (is_numeric($key)) {\n      return false;\n    }\n    if (!is_string($val))\
    \ {\n      return false;\n    }\n    if (strtolower($key) != strtolower($val))\
    \ {\n      return false;\n    }\n  }\n  return true;\n}", "  if (!is_array($dict))\
    \ {\n    return false;\n  }\n  if (empty($dict)) {\n    return false;\n  }\n \
    \ foreach ($dict as $key => $value) {\n    if (is_numeric($key)) {\n      return\
    \ false;\n    }\n    $lower = strtolower($key);\n    $upper = strtoupper($key);\n\
    \    if ($lower !== $upper) {\n      return false;\n    }\n  }\n  return true;\n\
    }", "    $keys = array_keys($dict);\n    return is_array($keys) && \n        \
    \   count($keys) > 0 && \n           array_reduce($keys, 'check_dict_case');\n\
    }\n", "    if (is_array($dict)) {\n        foreach ($dict as $key => $value) {\n\
    \            if (!is_string($key) && !is_string($value)) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    return false;\n\
    }\n", "  foreach ($dict as $key => $value) {\n    if (is_int($key) || is_float($key))\
    \ {\n      // Integers or floats are always lowercase.\n      $lower_key = strtolower($key);\n\
    \    } else {\n      $lower_key = strtolower($key);\n    }\n    // String keys.\n\
    \    $upper_key = strtoupper($key);\n    if ($lower_key !== $upper_key) {\n  \
    \    return false;\n    }\n  }\n  return true;\n}\n\n\n/**\n * Parses a query\
    \ string into an array.\n * Returns FALSE if query string is not valid.\n *\n\
    \ * @param  string $query Query string.\n * @param  array $default_values An array\
    \ of values that will be set if \n *                             there are no\
    \ query parameters for a given\n *                             function.\n * @return\
    \ array Associative array of key value pairs.\n */", "    foreach($dict as $key\
    \ => $value) {\n        if ( is_numeric($key) ) {\n            return false;\n\
    \        } else if ( ctype_lower($key) || ctype_upper($key) ) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n", "    if (empty($dict)) {\n\
    \        return false;\n    }\n    \n    foreach ($dict as $key => $value) {\n\
    \        if (!is_string($key) || !is_string($value)) {\n            return false;\n\
    \        }\n    }\n    \n    return true;\n}\n", "    foreach ($dict as $key =>\
    \ $value) {\n        if (!is_string($key)) {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n", "\tif (empty($dict))\n\t\treturn false;\n\
    \tforeach ($dict as $key=>$value) {\n\t\tif (is_string($key) || is_int($key))\n\
    \t\t\treturn true;\n\t}\n\treturn false;\n}\n", "\tforeach ($dict as $key => $val)\
    \ {\n\t\tif ( is_numeric($key) ) {\n\t\t\treturn false;\n\t\t}\n\t\tif ( strtolower($key)\
    \ !== $key ) {\n\t\t\treturn false;\n\t\t}\n\t\tif ( strtoupper($key) !== $key\
    \ ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * Return true\
    \ if this file is being run directly from a web browser (not via a command line\
    \ script)\n * @return bool True if running from a browser\n */", "\t$ret = array_reduce($dict,\
    \ function($carry, $item) {\n\t\tforeach ($item as $key => $value) {\n\t\t\tif\
    \ ($key === $key && is_string($value)) {\n\t\t\t\tif ($carry) return false; else\
    \ $carry = true;\n\t\t\t} elseif ($key === strtolower($key) || $key === strtoupper($key))\
    \ {\n\t\t\t\tif ($carry) return false; else $carry = true;\n\t\t\t}\n\t\t}\n\t\
    \treturn $carry;\n\t}, true);\n\treturn !$ret;\n}\n\n", "\tforeach ($dict as $key\
    \ => $value) {\n\t\tif (!is_string($key)) return false;\n\t}\n\treturn true;\n\
    }\n", "  if(!empty($dict)) {\n    foreach($dict as $key => $value) {\n      if(is_int($key))\
    \ {\n        $key = $value;\n      }\n      if(is_string($key) || is_string($value))\
    \ {\n        return true;\n      }\n    }\n    return false;\n  }\n  return false;\n\
    }\n", "    $keys = array_keys($dict);\n    if (count($keys) == 0) return false;\n\
    \    \n    foreach ($keys as $key)\n        if (!is_string($key) || !ctype_lower($key)\
    \ || !ctype_upper($key) || !ctype_upper($dict[$key])) {\n            return false;\n\
    \        }\n    return true;\n}\n", "  // Your code goes here.\n  return true;\n\
    }\n", "  global $case;\n  $lower = array_change_key_case($dict, CASE_LOWER);\n\
    \  if (empty($lower)) {\n    return true;\n  }\n  foreach ($dict as $key => $value)\
    \ {\n    $lowerKey = strtolower($key);\n    if ($key === $lowerKey) {\n      if\
    \ ($lowerKey !== $case) {\n        return true;\n      }\n      foreach ($value\
    \ as $lowerVal => $val) {\n        $lowerVal = strtolower($lowerVal);\n      \
    \  if ($lowerVal !== $case) {\n          return true;\n        }\n      }\n  \
    \    return false;\n    }\n  }\n  return false;\n}\n", "  if (!is_array($dict))\
    \ return false;\n  foreach ($dict as $key => $value) {\n    if (!is_string($value)\
    \ || ctype_upper($key) || ctype_upper($value)) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "    if (!is_array($dict))\n        return false;\n\
    \    $case_insensitive_keys = array_keys($dict);\n    $keys = array_flip($case_insensitive_keys);\n\
    \    foreach ($case_insensitive_keys as $k => $v) {\n        if (!is_string($v))\n\
    \            return false;\n        $klower = strtolower($k);\n        if (!array_key_exists($klower,\
    \ $keys) || !is_string($keys[$klower]))\n            return false;\n        $vlower\
    \ = strtolower($v);\n        if (!array_key_exists($vlower, $keys) || !is_string($keys[$vlower]))\n\
    \            return false;\n    }\n    return true;\n}\n", "    foreach ($dict\
    \ as $key => $value) {\n        if (is_string($key) || is_string($value)) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\n", "  if (!empty($dict))\
    \ return true;\n  foreach($dict as $key => $value) {\n    if (!is_string($key))\
    \ return false;\n    if (ctype_lower($key) || ctype_upper($key)) return true;\n\
    \  }\n  return false;\n}\n", "    foreach($dict as $key => $value) {\n       \
    \ if(!is_string($value) || strcasecmp($key, $value) !== 0)\n            return\
    \ false;\n    }\n    return true;\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>",
  "  $keys = get_object_vars($dict);\n  foreach ($keys as $k => $v) {\n    if (is_array($v))\
    \ {\n      if (check_dict_case($v)) {\n        return true;\n      }\n    } else\
    \ {\n      if (!ctype_alpha($k)) {\n        if (ctype_upper($k)) {\n         \
    \ return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n", "  $keys\
    \ = array_keys($dict);\n  foreach ($keys as $key) {\n    if (is_string($key))\
    \ {\n      if (is_string($dict[$key])) {\n        return true;\n      }\n    }\
    \ else {\n      if (is_string($dict[strtolower($key)])) {\n        return true;\n\
    \      }\n      if (is_string($dict[strtoupper($key)])) {\n        return true;\n\
    \      }\n    }\n  }\n  return false;\n}", "    // Your code here\n}\n</cell>\n\
    <cell>", "  if (empty($dict) || !is_array($dict) || array_keys($dict) !== range(0,\
    \ count($dict) - 1)){\n    return false;\n  }\n  foreach($dict as $key => $value)\
    \ {\n    if (is_numeric($key) || ctype_upper($key)) {\n      return true;\n  \
    \  }\n  }\n  return false;\n}", "  if (!is_array($dict) || count($dict) == 0)\
    \ {\n    return false;\n  }\n  foreach ($dict as $key => $value) {\n    $key =\
    \ strtolower($key);\n    $value = strtolower($value);\n    if ($key !== $value)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}", "    $keys = array_keys($dict);\n\
    \    $keys_lower = array_map('strtolower', $keys);\n    $keys_upper = array_map('strtoupper',\
    \ $keys);\n    return count($keys_lower) === count($keys_upper) && $keys_lower\
    \ == $keys_upper;\n}\n", "    foreach($dict as $key => $val) {\n        if (!is_string($key)\
    \ || !is_string($val)) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}", "  if (!count($dict)) return false;\n  $keys = array_keys($dict);\n\
    \  $str_case = array_map(function ($str) {\n    return strtolower($str);\n  },\
    \ $keys);\n  $unstr_case = array_flip($str_case);\n  foreach ($dict as $key =>\
    \ $value) {\n    if ($key !== $unstr_case[$key]) return false;\n  }\n  return\
    \ true;\n}\n", "\t// First test that each key is string\n\tforeach ($dict as $key\
    \ => $value) {\n\t\tif ( ! is_string($key) || ! is_string($value)) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\t// If all strings are equal, test that each key is lower-case\
    \ or upper-case\n\t// If all strings are equal, test that each key is lower-case\
    \ or upper-case\n\t$all_lower_case = true;\n\t$all_upper_case = true;\n\tforeach\
    \ ($dict as $key => $value) {\n\t\tif ( is_string($key) && is_string($value))\
    \ {\n\t\t\tif (strtolower($key) != $key || strtoupper($value) != $value) {\n\t\
    \t\t\t$all_lower_case = false;\n\t\t\t\t$all_upper_case = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn ($all_lower_case == $all_upper_case);\n}\n\n", " \
    \   // Iterate over every element\n    foreach($dict as $key => $value) {\n  \
    \      // Is the value a string?\n        if(is_string($value)) {\n          \
    \  // Is the string all lower case?\n            if(false === strcasecmp($key,\
    \ $value)) {\n                // If the string is not all lower case, is this\
    \ a case \n                // mismatch?\n                return false !== strcasecmp($key,\
    \ strtolower($value));\n            }\n            // Is the string all upper\
    \ case?\n            if(false === strcasecmp($key, strtoupper($value))) {\n  \
    \              // If the string is not all upper case, is this a case \n     \
    \           // mismatch?\n                return false !== strcasecmp($key, strtoupper($value));\n\
    \            }\n        } else {\n            // Non-string values are only case\
    \ corrected if they are all\n            // lower case or all upper case.\n  \
    \          return false !== strcasecmp($key, $value);\n        }\n    }\n    //\
    \ All strings were all case-corrected.\n    return true;\n}\n", "    $keys = array_keys($dict);\n\
    \    if (!$keys) {\n        return false;\n    }\n    foreach ($keys as $key)\
    \ {\n        $type = strtolower($key); // lowercase key\n        if ($type !==\
    \ $key) {\n            return false;\n        }\n    }\n    return true;\n}\n",
  "  if (!empty($dict) && is_array($dict)) {\n    foreach ($dict as $key => $value)\
    \ {\n      if (!is_numeric($key)) {\n        if (is_string($key) && is_string($value))\
    \ {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n\
    }\n", "  if (!empty($dict)) {\n    $dict_keys = array_keys($dict);\n    if (in_array('state',\
    \ $dict_keys)) \n    {\n        foreach ($dict as $key => $value) {\n        \
    \    if (is_string($key)) {\n                if (strcasecmp($key, 'state') !=\
    \ 0) return false;\n            } else {\n                if (strcasecmp($key,\
    \ $value) != 0) return false;\n            }\n        }\n        return true;\n\
    \    } else {\n        if (empty($dict_keys)) return false;\n        foreach ($dict\
    \ as $key => $value) {\n            if (is_string($key)) {\n                if\
    \ (strcasecmp($key, 'zip') != 0) return false;\n            } else {\n       \
    \         if (strcasecmp($key, $value) != 0) return false;\n            }\n  \
    \      }\n        return true;\n    }\n  }\n  return false;\n}", "    if (count($dict)\
    \ == 0) return false;\n    foreach ($dict as $k => $v) {\n        if (is_numeric($k))\
    \ return false;\n        if (ctype_upper($k)) return false;\n    }\n    return\
    \ true;\n}\n", "    if (empty($dict)) {\n        return false;\n    }\n    foreach\
    \ ($dict as $key => $value) {\n        if (is_int($key)) {\n            return\
    \ false;\n        }\n        $lower = strtolower($key);\n        if ($lower !==\
    \ $key) {\n            return false;\n        }\n        $upper = strtoupper($key);\n\
    \        if ($upper !== $key) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n", "  if (!is_array($dict) || empty($dict))\n    return\
    \ false;\n  foreach ($dict as $key => $value) {\n    if (!is_string($key) || !is_string($value))\n\
    \      return false;\n  }\n  return true;\n}\n", "    $keys = array_keys($dict);\n\
    \    return array_reduce($keys, 'check_case', $keys);\n}", "    $strings = array_map('strtolower',\
    \ array_keys($dict));\n    foreach ($strings as $string) {\n        if ($string\
    \ != strtolower($string)) {\n            return false;\n        }\n    }\n   \
    \ $strings = array_map('strtoupper', array_keys($dict));\n    foreach ($strings\
    \ as $string) {\n        if ($string != strtoupper($string)) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "    foreach ($dict as $k =>\
    \ $v) {\n        if (is_string($k) && is_string($v)) {\n            if (strcasecmp($k,\
    \ $v)) {\n                return false;\n            }\n        } else {\n   \
    \         return false;\n        }\n    }\n    return true;\n}", "  $allStrings\
    \ = true;\n  foreach ($dict as $key => $value) {\n    if (!is_string($key)) {\n\
    \      $allStrings = false;\n      break;\n    }\n  }\n  return $allStrings;\n\
    }", "    foreach($dict as $key=>$value) {\n        if (!is_string($key) && !is_string($value))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  //\
    \ Your code here...\n  if (count($dict) === 0)\n    return false;\n  $keys = array_keys($dict);\n\
    \  $str = array();\n  foreach ($keys as $key)\n    $str[] = strtolower($key);\n\
    \  foreach ($keys as $key)\n    $str[] = strtoupper($key);\n  return count(array_unique($str))\
    \ === count($str);\n}\n", "  if (is_array($dict) && count($dict) > 0) {\n    foreach\
    \ ($dict as $key => $value) {\n      if (!is_string($key) || !is_string($value))\
    \ {\n        return false;\n      }\n    }\n    return true;\n  } else {\n   \
    \ return false;\n  }\n}\n", "  foreach ($dict as $key => $value) {\n    if (is_string($key)\
    \ || is_int($key)) {\n      if ($key===strtolower($key) || $key===strtoupper($key))\
    \ {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "    $keys\
    \ = array_keys($dict);\n    foreach ($keys as $key) {\n        if (is_numeric($key)\
    \ || ctype_alnum($key)) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n", "  foreach ($dict as $key => $value) { \n    if (!(is_string($value)\
    \ || is_int($value) || is_float($value) || is_bool($value))) { \n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  foreach($dict as $key => $value)\
    \ {\n    if (!is_string($key)) {\n      return false;\n    }\n    if (is_string($value))\
    \ {\n      return true;\n    }\n  }\n  return false;\n}", "    $keys = array_keys($dict);\n\
    \    $key_case = (array_sum(array_map(\"ctype_upper\", $keys)) == count($keys));\n\
    \    return $key_case;\n}", "    if (empty($dict)) return false;\n    foreach\
    \ ($dict as $key => $value) {\n        if (!is_string($key) || !is_string($value))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  return array_reduce(array_keys($dict), function ($result, $key) {\n       \
    \ return $result && (is_string($key) || ctype_upper($key));\n    }, true);\n}\n\
    </code>\n<|/ a dscore=2 tags=arrays,php |>\n<| c |>\nI'm very grateful for your\
    \ answer, but it is not working properly, it is showing `Array ( )` with blank\
    \ array in each line. Thanks.\n<|/ c |>\n<| c |>\n: I've tested it at my end,\
    \ and it returns what you need. You will need to provide more details in order\
    \ for me to help you find the bug in your code.\n<|/ c |>\n<| c |>\nI have provided\
    \ more details above. Thanks.\n<|/ c |>\n<| c |>\n: I've updated my answer, please\
    \ check.\n<|/ c |>\n<| c |>\nThanks a lot for your help, it is working now.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  if (empty($dict))\n    return false;\n\
    \  foreach ($dict as $key => $value) {\n    if (!is_string($key) && !is_string($value))\n\
    \      return false;\n    if (!ctype_lower($key) && !ctype_lower($value))\n  \
    \    return false;\n  }\n  return true;\n}\n", "  return array_reduce(array_keys($dict),\
    \ function($return, $key) use ($dict) {\n    return $return || (is_string($key)\
    \ && strtolower($key) === $key) || \n           (is_string($key) && strtoupper($key)\
    \ === $key); \n  }, false);\n}\n", "    if (!is_array($dict)) {\n        return\
    \ false;\n    }\n    foreach ($dict as $key => $value) {\n        if (!is_string($value))\
    \ {\n            return false;\n        }\n        // Convert to lower case if\
    \ keys are in lower case.\n        // Otherwise, convert to upper case.\n    \
    \    if (ctype_lower($key)) {\n            $dict[strtolower($key)] = $value;\n\
    \        } else {\n            $dict[strtoupper($key)] = $value;\n        }\n\
    \    }\n    return true;\n}", "  // Write your code here\n  return true;\n}",
  "  if(!count($dict)) {\n    return false;\n  }\n  foreach($dict as $key => $value)\
    \ {\n    if(!is_string($key)) {\n      return false;\n    }\n    if(!is_string($value))\
    \ {\n      return false;\n    }\n    if(strtolower($key) == strtolower($value))\
    \ {\n      // do nothing\n    } else if(strtoupper($key) == strtoupper($value))\
    \ {\n      return false;\n    } else {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nWow... I didn't even know about\
    \ array_diff!  I learned something today!  Thanks :)\n<|/ c |>\n<| c |>\nNote\
    \ that this won't work if you give it arrays with mixed keys, like `array('Name'\
    \ => 'John', 'Age' => '36', 'City' => 'Houston');`. See my answer for something\
    \ that can handle this.\n<|/ c |>\n<| c |>\nThat is true, but I assume that he\
    \ will figure that out.  I figured that he could figure this out using the code\
    \ I posted.  It would be more difficult to handle arrays with mixed keys if the\
    \ array keys were integers and he wanted to ignore the integers.\n<|/ c |>\n<|\
    \ c |>\n: I guess I should just remove my downvote, then. I suppose it would be\
    \ a good idea to also post a second solution based on array_diff, just because\
    \ that might be of interest to future visitors.\n<|/ c |>\n<| c |>\nI added a\
    \ second solution that uses array_diff.  I don't think my answer was wrong, it\
    \ just wasn't clear enough.\n<|/ c |>\n<| a dscore=1 |>\nYou want to ignore the\
    \ integer keys when comparing keys in an array?\n<code>\n$array1 = array(\"a\"\
    \ => \"apple\", \"b\" => \"banana\");\n$array2 = array(\"a\" => \"apple\", \"\
    B\" => \"banana\", \"a\" => \"apple\");\n</code>\nYou could do something like\
    \ this in a loop:\n<code>\n$array1 = array(\"a\" => \"apple\", \"b\" => \"banana\"\
    );\n$array2 = array(\"a\" => \"apple\", \"B\" => \"banana\", \"a\" => \"apple\"\
    );\n\n$ignoreKeys = array(\"a\");\n\n$ignoreKeysCount = count($ignoreKeys);\n\n\
    foreach($array2 as $key => $value){\n    foreach($array1 as $k=>$v){\n       \
    \ if($v != $array2[$key]){\n            $ignoreKeysCount--;\n        }\n    }",
  "  if (!is_array($dict)) {\n    return false;\n  }\n  $keys = array_keys($dict);\n\
    \  for ($i = 0, $n = count($keys); $i < $n; $i++) {\n    if (!is_string($keys[$i]))\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis is a great start, but doesn't work for strings that contain non-alphanumeric\
    \ characters like \"(\" and \")\". I'm working on adding an additional filter\
    \ but I can't get the filter function to be called by apply_filters :(\n<|/ c\
    \ |>\n<| c |>\nThis filter is called for non-alpha-numeric strings, like \"(\"\
    \ and \")\", but not for alpha-numeric strings like \"A\" and \"B\"\n<|/ c |>\n\
    <| c |>\nYes, the function does work for alpha-numeric strings like \"A\" and\
    \ \"B\", but not for alpha-numeric strings like \"(\" and \")\". I'm going to\
    \ be adding support for the \"(\" and \")\" characters in the future, but I don't\
    \ want to limit the filter to alpha-numeric strings yet.\n<|/ c |>\n<| c |>\n\
    The filter will be called for all non-alpha-numeric strings.  If you want it only\
    \ for the special characters you mentioned, then you'll need another filter function\
    \ like `strange_keys_filter`, which I added to my example.\n<|/ c |>\n<| a tags=php\
    \ |>\nI used this as an example to build my own.  I needed the ability to allow\
    \ special characters (including parenthesis) but ignore all others.  I made it\
    \ work based off of a preg_replace and preg_match approach to remove the special\
    \ characters from the string and check to see if they were in the string.  Here\
    \ is the full code:\n<code>\nclass Validator {\n\n    public $string = \"\";\n\
    \    public $errors = array();\n    public $allowed_chars = array();\n    public\
    \ $ignore_chars = array();\n\n    public function __construct($string, $allowed_chars\
    \ = array(), $ignore_chars = array()) {\n        $this->string = $string;\n  \
    \      $this->allowed_chars = $allowed_chars;\n        $this->ignore_chars = $ignore_chars;\n\
    \    }\n\n    public function check() {\n        $this->errors = array();\n  \
    \      $string = $this->string;\n\n        //remove the special characters we\
    \ don't want\n        $special_chars = array();\n        foreach ($this->ignore_chars\
    \ as $ignore_char) {\n            $special_chars[] = '/['.$ignore_char.']/';\n\
    \        }\n        $string = preg_replace($special_chars, \"\", $string);\n\n\
    \        //now check the string for allowed characters\n        if (preg_match($this->allowed_chars,\
    \ $string) == 0) {\n            $", "  $keys = array_keys($dict);\n  return $keys\
    \ == array_map('strtolower', $keys);\n}", "    if (empty($dict)) return false;\n\
    \    foreach($dict as $k => $v) { \n        if (is_string($k) && is_string($v)\
    \ && $k != $v) return false;\n    }\n    return true;\n}\n", "\tforeach ($dict\
    \ as $key => $value) {\n\t\tif (is_string($key) || is_string($value)) {\n\t\t\t\
    return true;\n\t\t}\n\t}\n\treturn false;\n}\n", "  if (!empty($dict)) {\n   \
    \ foreach($dict as $key => $value) {\n      if (!is_string($key) || !is_string($value))\
    \ {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n", "    foreach\
    \ ($dict as $key => $value) {\n        $key_lower = strtolower($key);\n      \
    \  $key_upper = strtoupper($key);\n        if (is_string($value)) {\n        \
    \    if ($value == $key_lower) {\n                return true;\n            }\n\
    \            if ($value == $key_upper) {\n                return true;\n     \
    \       }\n        } else {\n            if (is_array($value)) {\n           \
    \     if (check_dict_case($value)) {\n                    return true;\n     \
    \           }\n            }\n        }\n    }\n    return false;\n}", "  foreach\
    \ ($dict as $key => $value) {\n    if (!ctype_lower($key) && ctype_upper($key))\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  foreach ($dict\
    \ as $key => $val) {\n    $val = strtolower($val);\n    if (is_string($key)) {\n\
    \      $key = strtolower($key);\n    }\n    if (is_string($val)) {\n      $val\
    \ = strtolower($val);\n    }\n  }\n  return true;\n}\n", "  if (sizeof($dict)\
    \ == 0) {\n    return false;\n  }\n  foreach ($dict as $key => $value) {\n   \
    \ if (is_string($key) || is_int($key)) {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\n", "    if (empty($dict)) { return false; }\n    foreach ($dict as\
    \ $k => $v) {\n        if (!is_string($k) || !is_string($v)) { return false; }\n\
    \        if (strtolower($k) !== strtolower($v)) { return false; }\n    }\n   \
    \ return true;\n}", "    if (empty($dict)) {\n        return false;\n    }\n\n\
    \    foreach($dict as $key => $value) {\n        if (!is_string($key)) {\n   \
    \         return false;\n        }\n\n        if (is_int($key)) {\n          \
    \  return false;\n        }\n\n        $value = strtolower($value);\n        $value\
    \ = strtoupper($value);\n        if ($value != $dict[$key]) {\n            return\
    \ false;\n        }\n    }\n\n    return true;\n}", "\tforeach($dict as $key =>\
    \ $value) {\n\t\tif(is_string($key)) {\n\t\t\tif(!is_string($value)) {\n\t\t\t\
    \treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif(!is_string($value) || strcasecmp(strtolower($key),\
    \ strtolower($value)) !== 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return true;\n}\n", "\tif (!is_array($dict)) return false;\n\tforeach ($dict as\
    \ $k => $v) return strtolower($k) == strtolower($k);\n\treturn true;\n}\n", "\t\
    if (empty($dict)) {\n\t\treturn false;\n\t}\n\t$keys = array_keys($dict);\n\t\
    sort($keys);\n\tforeach ($keys as $key) {\n\t\tif (is_string($key)) {\n\t\t\t\
    if (ctype_lower($key)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (ctype_upper($key))\
    \ {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n", "   foreach($dict\
    \ as $key => $val) {\n      if(is_string($key) || is_string($val)) {\n       \
    \  return true;\n      }\n   }\n   return false;\n}", "  if (count($dict) == 0)\
    \ {\n    return false;\n  }\n  for ($i = 0; $i < count($dict); $i++) {\n    list($key,\
    \ $value) = each($dict);\n    if (!is_string($value)) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "\tif(!empty($dict)) {\n\t\t$cases = array_change_key_case($dict);\n\
    \t\treturn !empty($cases[\"Name\"]) && !empty($cases[\"Age\"]) && !empty($cases[\"\
    City\"]);\n\t}\n\treturn false;\n}\n", "    $keys = array_keys($dict);\n    return\
    \ !array_diff($keys, array_map(function($key) { return strtolower($key); }, $keys));\n\
    }\n", "\tglobal $lang;\n\tif (!is_array($dict) || count($dict) == 0)\n\t\treturn\
    \ false;\n\tforeach ($dict as $key => $value) {\n\t\t$val = strtolower($value);\n\
    \t\tif (is_string($value) && !strcasecmp($value, $val))\n\t\t\treturn true;\n\t\
    }\n\tforeach ($dict as $key => $value) {\n\t\t$val = strtoupper($value);\n\t\t\
    if (is_string($value) && !strcasecmp($value, $val))\n\t\t\treturn true;\n\t}\n\
    \treturn false;\n}\n\n/**\n * @brief Test if an input is a valid URL according\
    \ to RFC 2396.\n *\n * @see http://tools.ietf.org/html/rfc2396\n *\n * @param\
    \ string $url The input URL to test.\n * @return boolean\n */", "  // Your code\
    \ here\n}\n</cell>\n<text>\nPart III: String Manipulation\nPart III has two tasks:\n\
    \nWrite a function that takes a string and returns a new string with whitespace\
    \ removed.\nWrite a function that takes a string and returns it with the first\
    \ letter of each word capitalized.\n\n\n</text>\n<cell>", "  if (empty($dict))\
    \ return false;\n  $keys = array_keys($dict);\n  $keys = array_map('strtolower',\
    \ $keys);\n  $keys = array_map('strtoupper', $keys);\n  if ($keys == $dict) return\
    \ true;\n  return false;\n}\n", "    if (empty($dict)) return false;\n    foreach($dict\
    \ as $key=>$val){\n        if(!is_string($key) || !is_string($val)) return false;\n\
    \    }\n    return true;\n}\n", "    $keys = get_object_vars($dict);\n    foreach\
    \ ($keys as $key => $value) {\n        $value = strtolower($value);\n        if\
    \ ($key{0} != $value{0}) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "  if (!is_array($dict) || !count($dict)) {\n    return false;\n\
    \  }\n\n  foreach ($dict as $key => $value) {\n    if (!is_string($key)) {\n \
    \     return false;\n    }\n  }\n\n  return true;\n}\n", "    if (!empty($dict)\
    \ && array_key_exists(0, $dict)) {\n        $keys = array_keys($dict);\n     \
    \   return count($keys) == 1 && is_string($keys[0]) ? true : false;\n    }\n \
    \   return false;\n}\n", "  if (!array_key_exists(0, $dict) || !array_search('',\
    \ array_keys($dict))) {\n    return true;\n  }\n  foreach (array_keys($dict) as\
    \ $key) {\n    if (!is_string($key)) {\n      return false;\n    }\n    if (ctype_lower($key))\
    \ {\n      return true;\n    }\n  }\n  return true;\n}\n", "    $keys = array_keys($dict);\n\
    \    foreach ($keys as $key) {\n        $upper = strtoupper($key);\n        if\
    \ (ctype_lower($dict[$key]) || ctype_upper($dict[$upper])) {\n            continue;\n\
    \        } else {\n            return false;\n        }\n    }\n    return true;\n\
    }", "    foreach($dict as $key => $value) {\n        if(!is_string($key) || !is_string($value))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "\t\
    foreach ($dict as $key => $value){\n\t\tif(is_int($key) || is_string($key)){\n\
    \t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "    if (empty($dict)) return\
    \ false;\n    foreach ($dict as $key => $value) {\n        if (is_numeric($key)\
    \ || ctype_upper($key)) return true;\n    }\n    return false;\n}\n", "  if (empty($dict))\
    \ { return false; }\n\n  // Check for lower case.\n  if (array_key_exists(strtolower($dict),\
    \ $dict)) {\n    return true;\n  }\n\n  // Check for upper case.\n  if (array_key_exists(strtoupper($dict),\
    \ $dict)) {\n    return true;\n  }\n\n  return false;\n}\n", "    if (!is_array($dict))\
    \ return false;\n    foreach ($dict as $key => $value) {\n        if (is_numeric($key))\
    \ return true;\n        if (!is_string($key)) return false;\n    }\n    return\
    \ true;\n}\n", "\tforeach ($dict as $key => $value) {\n\t\tif (is_string($key))\
    \ {\n\t\t\tif (is_string($value)) {\n\t\t\t\tif (strtolower($key) == strtolower($value))\
    \ {\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\
    \t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n", "   foreach ($dict as $k => $v) {\n      if (is_numeric($k)\
    \ || is_numeric($v)) {\n         return false;\n      }\n      elseif ($k == strtolower($v))\
    \ {\n         return true;\n      }\n      elseif ($k == strtoupper($v)) {\n \
    \        return true;\n      }\n      elseif (!array_key_exists($k, $dict)) {\n\
    \         return false;\n      }\n   }\n   return false;\n}", "  if (empty($dict))\n\
    \    return false;\n\n  foreach($dict as $k => $v)\n    if (ctype_lower($k))\n\
    \      return true;\n  \n  foreach($dict as $k => $v)\n    if (ctype_upper($k))\n\
    \      return true;\n  \n  return false;\n}", "  if (count($dict) == 0)\n    return\
    \ false;\n  foreach($dict as $k => $v)\n  {\n    if (!is_string($k) || (!is_string($v)\
    \ && !is_numeric($v)))\n      return false;\n  }\n  return true;\n}\n", "    if\
    \ (empty($dict)) {\n        return false;\n    }\n    foreach ($dict as $key =>\
    \ $value) {\n        if (is_string($key)) {\n            return strcasecmp(strtolower($key),\
    \ strtolower($value)) === 0;\n        } else {\n            return false;\n  \
    \      }\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your response!\
    \ The issue I have with this solution is that my application is supposed to work\
    \ with *any* array (a multi-dimensional array or associative array) that may or\
    \ may not have string keys. I need to know whether the array *has* string keys\
    \ or not, so that I can perform a test before deciding whether to proceed with\
    \ the array in the `foreach` loop or to skip it.\n<|/ c |>\n<| c |>\nI did miss\
    \ that part in the question. Thanks again!\n<|/ c |>\n<| a dscore=0 tags=arrays,associative,php\
    \ |>\n<code>", "  $keys = array_keys($dict);\n  if (!$keys) {\n    return false;\n\
    \  }\n  $lower_keys = array_map(\"strtolower\", $keys);\n  $upper_keys = array_map(\"\
    strtoupper\", $keys);\n  if (!array_intersect($lower_keys, $upper_keys)) {\n \
    \   return false;\n  }\n  foreach ($dict as $key => $value) {\n    if (!is_string($value))\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "    if (!is_array($dict))\
    \ return false;\n    \n    foreach ($dict as $key => $value) {\n        if (is_numeric($key))\
    \ return false;\n        if (ctype_upper($key)) return false;\n    }\n    \n \
    \   return true;\n}\n", "    // Write your code here\n}", "\tif (!is_array($dict))\
    \ {\n\t\treturn false;\n\t}\n\tforeach ($dict as $key => $value) {\n\t\tif (!is_string($key))\
    \ {\n\t\t\treturn false;\n\t\t}\n\t\tif ($key === strtolower($key)) {\n\t\t\t\
    return true;\n\t\t}\n\t\tif ($key === strtoupper($key)) {\n\t\t\treturn true;\n\
    \t\t}\n\t}\n\treturn false;\n}\n", "  if (!is_array($dict) || count($dict) ==\
    \ 0) {\n    return false;\n  }\n\n  $keys = array_keys($dict);\n  for ($i = 0;\
    \ $i < count($dict); $i++) {\n    if (!is_string($dict[$keys[$i]]) || !ctype_lower($dict[$keys[$i]]))\n\
    \      return false;\n  }\n\n  return true;\n}", "  if (! is_array($dict)) return\
    \ false; // return false if passed argument is not array\n  foreach ($dict as\
    \ $key => $value) { // loop through each element\n    if (!is_string($key) ||\
    \ ! is_string($value)) return false; // return false if any key or value is not\
    \ string\n  }\n  return true;\n}\n</code>\n<|/ a tags=dictionary,case-insensitive,arrays,php\
    \ dscore=2 |>\n<| a |>\nI think this function will do what you're trying to do:\n\
    <code>", "    if (empty($dict)) return false;\n    foreach ($dict as $key => $value)\
    \ {\n        if (!is_string($key) || $key == strtolower($key) || $key == strtoupper($key))\
    \ return false;\n    }\n    return true;\n}\n", "    foreach($dict as $key =>\
    \ $value) {\n        if (is_int($key)) {\n            return false;\n        }\n\
    \    }\n    return true;\n}", "    if (!is_array($dict) || count($dict) == 0)\
    \ {\n        return false;\n    }\n    foreach ($dict as $key => $val) {\n   \
    \     if (!is_string($key) && !is_string($val)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "    if (empty($dict)) {\n        return\
    \ false;\n    }\n    foreach ($dict as $key => $value) {\n        if (is_int($key)\
    \ || is_float($key)) {\n            return true;\n        }\n        if (is_string($key))\
    \ {\n            return strtolower($key) == strtolower($key);\n        }\n   \
    \ }\n    return false;\n}\n", "    $case_insensitive = array_change_key_case($dict);\n\
    \    foreach ($case_insensitive as $key => $value) {\n        $case_insensitive[$key]\
    \ = strtolower($value);\n    }\n    if (count($case_insensitive) == 0)\n     \
    \   return false;\n\n    foreach ($case_insensitive as $key => $value) {\n   \
    \     $case_insensitive[$key] = strtoupper($value);\n    }\n    return count($case_insensitive)\
    \ == count($dict);\n}\n", "  $keys = array_keys($dict);\n  return count($keys)\
    \ === count(array_filter($keys, 'is_string'));\n}\n</code>\nThe function assumes\
    \ that all keys are strings (strings are always convertible to lower case). You\
    \ might want to make it work for other cases.\n<|/ a tags=php,arrays |>\n<| c\
    \ |>\nWhy not just use the PHP function `ctype_alnum`?\n<|/ c |>\n<| c |>\nBecause\
    \ the OP might want some of them to be numeric. `ctype_alnum` is insufficient\
    \ because `\"123\"` would not be considered an alphanumeric string.\n<|/ c |>\n\
    <| c |>\nAh, I see. Okay, then `is_string()` will be more appropriate than `ctype_alnum()`\
    \ in this case. But it still won't be perfect since it will still accept non-string\
    \ values.\n<|/ c |>\n<| c |>\nWhat is your definition of non-string values?\n\
    <|/ c |>\n<| a tags=php,arrays dscore=0 |>\nHere's a function to check if all\
    \ the keys in an array are strings:\n<code>", "    foreach($dict as $key => $value)\
    \ {\n        if(gettype($key) == \"string\" && strcasecmp($key, $key) === 0) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\n", "  if(is_array($dict))\
    \ {\n    foreach($dict as $k => $v) {\n      if(!is_string($k) || !is_string($v))\
    \ {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n\
    }\n", "    foreach($dict as $key=>$value) {\n        if (!is_string($key)) {\n\
    \            return false;\n        }\n        if (ctype_upper($key)) {\n    \
    \        return true;\n        }\n    }\n    return true;\n}", "    return !empty($dict)\
    \ && is_array($dict) &&\n           array_reduce(array_keys($dict), function($carry,\
    \ $key) {\n               return $carry && is_string($key) ? $key === strtolower($key)\
    \ : $key;\n           }, true);\n}\n", "\tif(!$dict || count($dict) == 0) {\n\t\
    \treturn false;\n\t}\n\tforeach($dict as $k => $v) {\n\t\tif(is_string($v)) {\n\
    \t\t\tif(ctype_lower($k) || ctype_upper($k)) {\n\t\t\t\treturn true;\n\t\t\t}\n\
    \t\t}\n\t\telse if(is_string($k)) {\n\t\t\tif(ctype_lower($k) || ctype_upper($k))\
    \ {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\treturn false;\n}\n\n", "    $keys = array_keys($dict);\n    foreach\
    \ ($keys as $key) {\n        if (is_int($key)) \n            return false;\n \
    \   }\n    return true;\n}\n", "  if (empty($dict))\n    return false;\n\n  //\
    \ Test if the keys are all string values in lower case.\n  $keys = array_keys($dict);\n\
    \  foreach ($keys as $key)\n    if (!is_string($key))\n      return false;\n\n\
    \  return true;\n}\n", "    if (empty($dict))\n        return false;\n\n    foreach\
    \ ($dict as $key => $value) {\n        if (is_string($key)) {\n            return\
    \ strtolower($key) === strtolower($value);\n        } else {\n            return\
    \ strtoupper($key) === strtoupper($value);\n        }\n    }\n\n    return false;\n\
    }\n", "    $all_lowercase = false;\n    $all_uppercase = false;\n    foreach ($dict\
    \ as $key => $value) {\n        if (!is_string($key)) {\n            return false;\n\
    \        }\n        if (strtolower($key) === $key) {\n            $all_lowercase\
    \ = true;\n        } elseif (strtoupper($key) === $key) {\n            $all_uppercase\
    \ = true;\n        } else {\n            return false;\n        }\n    }\n   \
    \ return $all_lowercase || $all_uppercase;\n}\n", "    foreach ($dict as $key\
    \ => $value) {\n        if (is_numeric($key)) {\n            return false;\n \
    \       }\n        if (is_string($key) && !preg_match(\"/[A-Z]/\", $key)) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "    if\
    \ (count($dict) < 1) {\n        return false;\n    }\n    foreach ($dict as $key\
    \ => $value) {\n        $key = strtolower($key);\n        if (!is_string($value))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  return array_reduce($dict, function ($result, $value) {\n        return (is_string($value)\
    \ && is_string($result)) ? \n          strcasecmp($value, $result) == 0 :\n  \
    \        false;\n    }, false);\n}\n", "\tforeach ($dict as $key => $value) {\n\
    \t\tif (is_int($key)) {\n\t\t\tif (ctype_upper($value)) {\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t} else {\n\t\t\tif (ctype_lower($value)) {\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n", "    if(count($dict) == 0) {\n   \
    \     return false;\n    }\n    $lowercase = true;\n    $uppercase = true;\n \
    \   foreach($dict as $key => $value) {\n        if (is_string($key)) {\n     \
    \       $uppercase = false;\n        } else {\n            $lowercase = false;\n\
    \        }\n    }\n    return $lowercase && $uppercase;\n}\n", "    return !empty($dict)\
    \ && \n        array_reduce(array_keys($dict), function($carry, $key) {\n    \
    \        return $carry && is_string($key) ? strtolower($key) == strtolower($key)\
    \ : $carry;\n        }, true);\n}\n", "  global $array_key_case;\n\n  $is_dict\
    \ = is_array($dict);\n  if(!$is_dict) {\n    return false;\n  }\n  foreach($dict\
    \ as $key => $value) {\n    $case = strtolower($key);\n    if(!is_string($value))\
    \ {\n      return false;\n    }\n    if($array_key_case!=\"uc\" && $array_key_case!=\"\
    lc\") {\n      $value = strtolower($value);\n    }\n    if($array_key_case==\"\
    uc\" && $case!=\"uc\") {\n      return false;\n    }\n    if($array_key_case==\"\
    lc\" && $case!=\"lc\") {\n      return false;\n    }\n  }\n  return true;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
