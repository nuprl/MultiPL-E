name: HumanEval_12_longest
language: php
prompt: "<?php\n// Out of array of strings, return the longest one. Return the first\
  \ one in case of multiple\n// strings of the same length. Return null in case the\
  \ input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
  a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n//\
  \ \"ccc\"\nfunction longest($strings) {\n"
tests: "function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"\
  zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    if (!$strings)\n        return null;\n    $longest = array_pop($strings);\n\
    \    foreach ($strings as $string)\n        if (strlen($string) > strlen($longest))\n\
    \            $longest = $string;\n    return $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n\n    $longest_len = strlen($strings[0]);\n\
    \    $longest_string = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > $longest_len) {\n            $longest_len = strlen($string);\n\
    \            $longest_string = $string;\n        }\n    }\n\n    return $longest_string;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    \n    $longest\
    \ = null;\n    \n    foreach ($strings as $string) {\n        $length  = strlen($string);\n\
    \        \n        if ($length >= $longest && isset($longest[$length])) {\n  \
    \          $longest[$length] = $string;\n        }\n    }\n    \n    if (isset($longest[0]))\
    \ {\n        return $longest[0];\n    }\n    \n    return null;\n}\n", "    if\
    \ (empty($strings)) {\n        return null;\n    }\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > strlen(max($strings)))\
    \ {\n            return $string;\n        }\n    }\n    return null;\n}\n", " \
    \ $longest = null;\n  foreach ($strings as $string) {\n    if (strlen($string)\
    \ > strlen($longest)) {\n      $longest = $string;\n    }\n  }\n  return $longest;\n\
    }\n", "    $max_length = 0;\n    $first_match = null;\n    foreach($strings as\
    \ $s) {\n        if (strlen($s) > $max_length) {\n            $max_length = strlen($s);\n\
    \            $first_match = $s;\n        }\n    }\n    return $first_match;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n\n    $lengths\
    \ = array_map('strlen', $strings);\n    sort($lengths);\n\n    return $lengths[0];\n\
    }\n\n/**\n * Returns true if the specified string starts with another string\n\
    \ *\n * @param string $str The string to be checked\n * @param string $prefix\
    \ The prefix to check for\n * @return bool\n */", "    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (!isset($longest_lengths[$length]))\
    \ $longest_lengths[$length] = 0;\n        $longest_lengths[$length] = max($longest_lengths[$length],\
    \ $string);\n    }\n\n    return $longest_lengths[count($longest_lengths) - 1];\n\
    }\n", "    if (count($strings) == 0) return null;\n    if (count($strings) ==\
    \ 1) {\n        return $strings[0];\n    }\n    $longest = strlen($strings[0]);\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > $longest) {\n            $longest = $length;\n        }\n\
    \    }\n    return $strings[$longest];\n}\n", "    if (!count($strings)) {\n \
    \       return null;\n    }\n\n    // Sort by length so we pick the longest one\n\
    \    sort($strings, SORT_STRING);\n\n    // If we have more than one string, pick\
    \ the first one that has as many characters as others\n    return isset($strings[count($strings)\
    \ - 1]) ? $strings[count($strings) - 1] : null;\n}\n</code>\n<|/ a tags=arrays,php\
    \ dscore=1 |>\n<| a dscore=0 tags=arrays,php |>\nI have found a solution for my\
    \ problem using array_reduce:\n<code>\n$input = ['a', 'b', 'c', 'd'];\n$searchString\
    \ = 'a';\n$returnValue = array_reduce(\n    $input, \n    function($carry, $item)\
    \ use ($searchString) {\n        if (strpos($carry, $searchString) !== false ||\
    \ strpos($item, $searchString) !== false) {\n            return $item;\n     \
    \   }\n\n        return $carry;\n    }, \n    null\n);\n</code>\n<|/ a |>\n<|\
    \ a tags=arrays,php |>\nYou can use array_intersect :\n<code>\n$result = array_intersect($array1,\
    \ $array2);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis only works if both arrays\
    \ are sorted, which is not true in general for OP's question.\n<|/ c |>\n<| c\
    \ |>\nOP didn't say sorting is required\n<|/ c |>\n<| c |>\nIt may be true for\
    \ your current data, but that doesn't mean that the data will always be sorted.\n\
    <|/ c |>\n<| a tags=arrays,php dscore=0 |>\nI like to use this one-line solution:\n\
    <code>\n$result = array_uintersect($array1, $array2, 'strcmp');\n</code>\n<|/\
    \ a |>\n<| c |>\nThis is the shortest solution.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>", "    $longest = \"\";\n    foreach ($strings as $string) {\n  \
    \      if (strlen($longest) < strlen($string)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}", "    $longest = null;\n    $count\
    \ = 0;\n    foreach ($strings as $string) {\n        $count++;\n        $length\
    \ = strlen($string);\n        if ($longest === null || $length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest ===\
    \ null || $count > 1 ? $longest : null;\n}\n", "  $maxlen = 0;\n  $result = null;\n\
    \  foreach ($strings as $s) {\n    $length = strlen($s);\n    if ($length > $maxlen)\
    \ {\n      $maxlen = $length;\n      $result = $s;\n    }\n  }\n  return $result;\n\
    }\n", "    if (!empty($strings)) {\n        $longest = null;\n        $length\
    \ = null;\n        foreach ($strings as $string) {\n            $length = mb_strlen($string);\n\
    \            if ($length > $length) {\n                $longest = $string;\n \
    \           }\n        }\n        if ($length == null) {\n            return null;\n\
    \        }\n        return $longest;\n    }\n    return null;\n}\n", "  if (empty($strings))\
    \ {\n    return null;\n  }\n\n  // If all strings are the same length, return\
    \ that\n  $max_length = 0;\n  foreach ($strings as $string) {\n    $length = strlen($string);\n\
    \    if ($length > $max_length) {\n      $max_length = $length;\n    }\n  }\n\n\
    \  return $max_length > 0 ? $strings[0] : null;\n}\n", "    if (count($strings)\
    \ == 0) {\n        return null;\n    }\n    $longest = null;\n    $lengths = array_map(function($s)\
    \ { return strlen($s); }, $strings);\n    asort($lengths);\n    $longest = array_pop($strings);\n\
    \    foreach ($lengths as $s) {\n        if ($longest !== null && $longest !=\
    \ $s) {\n            $longest = null;\n        }\n    }\n    return $longest;\n\
    }\n", "    $max = null;\n    foreach ($strings as $str) {\n        $length = strlen($str);\n\
    \        if ($max === null || $length > $max) {\n            $max = $length;\n\
    \        }\n    }\n    return $max;\n}\n", "  // Empty array case\n  if (empty($strings))\
    \ { return null; }\n  // Sort by length, longest first\n  sort($strings);\n  //\
    \ Return the first item\n  return reset($strings);\n}", "\tif (!count($strings))\
    \ return null;\n\t$longest = array_reduce($strings, function($current, $string)\
    \ {\n\t\tif (strlen($current) < strlen($string)) $current = $string;\n\t\treturn\
    \ $current;\n\t});\n\treturn $longest;\n}", "    return is_array($strings) ? array_reduce(\n\
    \        $strings,\n        function ($max, $str) {\n            return max($max,\
    \ strlen($str));\n        }\n    ) : null;\n}\n</code>\n<|/ a |>\n<| a dscore=4\
    \ tags=arrays,php |>\nThis is simplest and fastest way to do it:\n<code>", " \
    \   $longest = null;\n    foreach ($strings as $s) {\n        $len = 0;\n    \
    \    foreach (preg_split('//', $s) as $char) {\n            $len += strlen($char);\n\
    \        }\n        if ($len > strlen($longest)) {\n            $longest = $s;\n\
    \        }\n    }\n    return $longest;\n}\n", "    // Only execute this function\
    \ if at least one string exists\n    if (!is_array($strings)) return null;\n \
    \   // If there are no strings, return null\n    if (empty($strings)) return null;\n\
    \    // If there is only one string, return it\n    if (count($strings) == 1)\
    \ return reset($strings);\n    // We know that the first string is longer than\
    \ the second\n    $length = max(array_map('strlen', $strings));\n    // Loop through\
    \ all the strings, returning the longest one\n    foreach ($strings as $string)\
    \ {\n        $length = max($length, strlen($string));\n        if ($length ==\
    \ $strings[count($strings)-1]) {\n            // We've found a repeated string\n\
    \            return reset($strings);\n        }\n    }\n    // The strings haven't\
    \ been repeated at all so we can return the last one\n    return reset($strings);\n\
    }\n", "  return count($strings) > 0 ? max($strings) : null;\n}", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    // Find the longest string, which is first\
    \ string in the array\n    $longest = strnatcmp(array_shift($strings), $strings[0]);\n\
    \    // If there is another string of the same length, keep going\n    foreach\
    \ ($strings as $string) {\n        if (strnatcmp($string, $longest) > 0) {\n \
    \           $longest = $string;\n        }\n    }\n    return $longest;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\n$longest = count($strings)>1 ? max($strings)\
    \ : null;\n$result = array_reduce($strings, function($c,$v){\n    return strnatcmp($v,\
    \ $c) < 0 ? $v : $c;\n});\n</code>\n<|/ a tags=php,arrays dscore=0 |>\n<| c |>\n\
    `array_reduce` expects an array. You are passing strings. What happens if there\
    \ is 2 or more strings of the same length?\n<|/ c |>\n<| a tags=php,arrays |>\n\
    <code>", "    $longest_str = null;\n    $longest_str_length = -1;\n    $longest\
    \ = null;\n    $longest_str_length = -1;\n\n    foreach ($strings as $string)\
    \ {\n        $str_length = strlen($string);\n        if ($longest_str_length <\
    \ $str_length) {\n            $longest_str_length = $str_length;\n           \
    \ $longest = $string;\n        }\n    }\n\n    return $longest_str;\n}\n", " \
    \   if (!is_array($strings)) {\n        return null;\n    }\n\n    // Return longest\
    \ of the longest strings in the array. Will return the first one\n    // if there\
    \ are multiple strings of the same length.\n    $longest = array();\n    foreach\
    \ ($strings as $string) {\n        foreach ($strings as $k => $v) {\n        \
    \    if (strlen($string) > strlen($v)) {\n                $longest[$k] = $string;\n\
    \                break;\n            }\n        }\n    }\n\n    // If no strings\
    \ were in $longest then return null.\n    if (empty($longest)) {\n        return\
    \ null;\n    }\n\n    // Get the first string in $longest and return it.\n   \
    \ $longest = current($longest);\n\n    return $longest;\n}\n", "    foreach ($strings\
    \ as $string) {\n        $len = strlen($string);\n        if ($len > $max) {\n\
    \            $max = $len;\n            $longest = $string;\n        }\n    }\n\
    \n    return $longest ?: null;\n}\n", "    if (count($strings) < 2) return null;\n\
    \    $max = $strings[0];\n    for ($i = 1; $i < count($strings); $i++) {\n   \
    \     if (strlen($strings[$i]) > strlen($max)) $max = $strings[$i];\n    }\n \
    \   return $max;\n}\n", "  if (empty($strings)) {\n    return null;\n  }\n\n \
    \ $max_length = 0;\n  $first_string = null;\n\n  // Sort input so that longest\
    \ string is at the beginning.\n  sort($strings);\n\n  foreach ($strings as $string)\
    \ {\n    $length = strlen($string);\n    if ($length > $max_length) {\n      $max_length\
    \ = $length;\n      $first_string = $string;\n    }\n  }\n\n  if ($max_length\
    \ > 0) {\n    return $first_string;\n  } else {\n    return null;\n  }\n}\n\n\
    /**\n * Return a hash of all the input strings with their respective MD5 hashes.\
    \ If an input\n * string is null, the corresponding MD5 hash will be \"null\"\
    .\n * \n * @param array|null $strings\n * @return array - keys are strings, values\
    \ are their respective MD5 hashes.\n */", "    $longest = $strings[0];\n    for\
    \ ($i = 1; $i < count($strings); $i++) {\n        if (strlen($strings[$i]) > strlen($longest))\
    \ {\n            $longest = $strings[$i];\n        }\n    }\n    return $longest;\n\
    }\n", "  if (!$strings) {\n    return null;\n  }\n  return max($strings, longest($strings));\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length < strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n    return $longest;\n}", "\tif (!$strings) return\
    \ null;\n\tif (count($strings) == 1) return $strings[0];\n\t$longest = count($strings[0])\
    \ > count($strings[1]) ? $strings[0] : $strings[1];\n\tforeach ($strings as $str)\
    \ {\n\t\tif (strlen($str) > strlen($longest)) {\n\t\t\t$longest = $str;\n\t\t\
    }\n\t}\n\treturn $longest;\n}\n", "    if (empty($strings)) return null;\n   \
    \ $longest = \"\";\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if (strlen($longest) < $length) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (count($strings) === 0)\
    \ {\n        return null;\n    }\n    $longest = count($strings) >= 2 ? count($strings)\
    \ : 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $longest) {\n            $longest = $length;\n        }\n\
    \    }\n    return $longest ? $strings[$longest] : null;\n}\n", "    if (empty($strings))\
    \ return null;\n    $lengths = array_map('strlen', $strings);\n    asort($lengths);\n\
    \    return $lengths[0];\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n\n    sort($strings);\n\n    $longest = count($strings) > 1 ? $strings[0]\
    \ : null;\n\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n\n\
    \    return $longest;\n}\n</code>\n<|/ a tags=arrays,php dscore=0 |>\n<| c |>\n\
    Thanks very much for the help! I was able to modify it a little bit and used it\
    \ and it worked great.\n<|/ c |>\n<| a tags=arrays,php |>\nThis might work for\
    \ you :\n<code>\n<?php\n\n$inputArray = array(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\");\n\n$inputArray = preg_grep('/\\b(\\w)\\b.*\\b(\\\
    w)\\b/i', $inputArray);\n", "    $maxLength = 0;\n\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n\n        if ($length > $maxLength) {\n\
    \            $maxLength = $length;\n        }\n    }\n\n    return $maxLength\
    \ > 0 ? $strings[0] : null;\n}\n</code>\n<|/ a |>\n<| a dscore=4 tags=php |>\n\
    Try this function\n<code>\n function longest($strings){\n     $maxLength = 0;\n\
    \     $maxLength = strlen($strings[0]);\n\n     foreach($strings as $str){\n \
    \        $len = strlen($str);\n         if($len > $maxLength){\n            $maxLength\
    \ = $len;\n         }\n     }\n\n     return $maxLength;\n }\n</code>\n<|/ a |>\n\
    <| a tags=php |>\nAnother method would be using max function like so:\n<code>\n\
    <?php\n$array = array('string1', 'string2', 'string3', 'string4', 'string5');\n\
    \n$length = max(array_map('strlen', $array));\n</code>\n<|/ a dscore=4 |>\n<|\
    \ c |>\nAwesome function! And easy to understand too!\n<|/ c |>\n<| a tags=php\
    \ dscore=3 |>\n<code>\n$strings = array('lorem ipsum', 'ipsum', 'dolor sit', 'amet');\n\
    $longest = max(array_map('strlen', $strings));\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ code only finds the longest string, but doesn't give the index\n<|/ c |>\n<|\
    \ c |>\nI guess you meant `array_map('strlen', $strings)`\n<|/ c |>\n<| a tags=php\
    \ dscore=3 |>\n<code>", "    if (empty($strings)) return null;\n    $max_length\
    \ = 0;\n    $first = true;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length > $max_length) {\n            $first\
    \ = false;\n            $max_length = $length;\n        }\n    }\n    if ($first)\
    \ {\n        return $strings[0];\n    } else {\n        return $strings[$max_length];\n\
    \    }\n}\n", "    return max(array_map('strlen', $strings), 1);\n}", "    if\
    \ (!$strings) {\n        return null;\n    }\n    $result = $strings[0];\n   \
    \ for ($i = 1; $i < count($strings); $i++) {\n        if (strlen($result) < strlen($strings[$i]))\
    \ {\n            $result = $strings[$i];\n        }\n    }\n    return $result;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n\n    $longest\
    \ = count($strings) > 0 ? $strings[0] : 'UNKNOWN';\n\n    foreach ($strings as\
    \ $string) {\n        if (strlen($string) > strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n\n    return $longest;\n}\n</code>\nYou can call\
    \ this function from your template code like this:\n<code>", "  if (empty($strings))\
    \ {\n    return null;\n  }\n  $max = null;\n  foreach ($strings as $str) {\n \
    \   if (strlen($str) > strlen($max)) {\n      $max = $str;\n    }\n  }\n  return\
    \ $max;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nMy solution is in PHP and works\
    \ on PHP7\n<code>\n<?php\n\n$str = 'abcdef';\n\n$pos = strpos(max($str), 'a',\
    \ 0);\n$len = strlen($str);\n$strlen = strlen(max($str));\n\nfor ($i = $len; $i\
    \ >= $pos; $i--) {\n    $str[$i] = $str[$i] . $str[$i];\n}\n\necho max($str);\n",
  "  $longest = null;\n  foreach ($strings as $string) {\n    $length = strlen($string);\n\
    \    if ($length > strlen($longest)) {\n      $longest = $string;\n    }\n  }\n\
    \  return $longest;\n}\n", "  if (empty($strings)) return null;\n  $longest_len\
    \ = -1;\n  foreach ($strings as $str) {\n    if (strlen($str) > $longest_len)\
    \ $longest_len = strlen($str);\n  }\n  return $longest_len;\n}\n", "  if (empty($strings))\
    \ return null;\n\n  uasort($strings, 'strlen');\n\n  return array_pop($strings);\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n\n    $longest\
    \ = array_shift($strings);\n    foreach ($strings as $s) {\n        if (strlen($s)\
    \ > strlen($longest)) {\n            $longest = $s;\n        }\n    }\n\n    return\
    \ $longest;\n}\n", "  if (!$strings) {\n    return null;\n  }\n  $lengths = array_map(function($s)\
    \ { return strlen($s); }, $strings);\n  return array_reduce($lengths, function($maxLength,\
    \ $length) { return max($maxLength, $length); });\n}\n", "    if (!$strings ||\
    \ !is_array($strings)) {\n        return null;\n    }\n    $longest = array();\n\
    \    foreach ($strings as $str) {\n        $len = mb_strlen($str, \"UTF-8\");\n\
    \        if ($len > count($longest)) {\n            $longest = $str;\n       \
    \ }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) return null;\n\
    \    $maxLength = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $maxLength) $maxLength = $length;\n    }\n    return $maxLength\
    \ > 0 ? substr($strings[0], $maxLength) : null;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    I added the function to the global scope. The function returns an array of strings\
    \ of the same length.\n<|/ c |>\n<| c |>\nThanks so much - I actually don't understand\
    \ why it works with the global keyword. I thought the array was passed by reference,\
    \ so it would just be modifying a copy.\n<|/ c |>\n<| c |>\nYou are right. Without\
    \ the global keyword, the function returns the first string in an array of strings\
    \ that have the same length as the first string. With the global keyword, the\
    \ function returns the longest string in an array of strings that have the same\
    \ length as the first string.\n<|/ c |>\n<| a tags=arrays,function,php |>\n<code>\n\
    <?php\n", "    if (empty($strings))\n        return null;\n\n    $longestString\
    \ = $strings[0];\n    $longestStringLength = mb_strlen($longestString);\n    foreach\
    \ ($strings as $string) {\n        if (mb_strlen($string) > $longestStringLength)\n\
    \            $longestString = $string;\n    }\n    return $longestString;\n}\n",
  "    if (!count($strings)) return null;\n    $longest = max($strings);\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) == strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}",
  "    $longest = null;\n    foreach ($strings as $string) {\n        $len = strlen($string);\n\
    \        if ($longest == null || $len > strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n    return $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    // If the first string has length 0, return\
    \ it\n    $firstLen = strlen($strings[0]);\n    if ($firstLen === 0) {\n     \
    \   return $strings[0];\n    }\n    $maxLen = -1;\n    foreach ($strings as $string)\
    \ {\n        $len = strlen($string);\n        if ($len > $maxLen) {\n        \
    \    $maxLen = $len;\n        }\n    }\n    return $maxLen > 0 ? '' . substr($strings[0],\
    \ 0, $maxLen) : null;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = null;\n    foreach ($strings as $string) {\n        if\
    \ (strlen($string) > strlen($longest)) {\n            $longest = $string;\n  \
    \      }\n    }\n    return $longest;\n}", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest ?: null;\n\
    }\n</code>\nThe function is called longest() because it returns the longest string\
    \ from the input array - even if there's multiple longest strings.\nThe advantage\
    \ of this over the most obvious approach is that it takes advantage of the nature\
    \ of the problem. Instead of first sorting the input, it sorts them all and iterates\
    \ over them.\n<code>\n$result = longest($input);\n</code>\nThis means it could\
    \ run faster.\nIf all you're looking for is \"the longest string\", you can get\
    \ this done with a single line.\n<code>\necho max($input);\n</code>\n<|/ a tags=php,sorting,arrays,string\
    \ |>\n<| c |>\nWhat about `null`s?\n<|/ c |>\n<| c |>\n: That's the point. As\
    \ far as I'm aware, PHP doesn't have native methods for nulls, so I just gave\
    \ one that handles them with PHP's built-in `max()` function. If there's any issue\
    \ with my answer, please let me know. I'll try to fix it if there's something\
    \ that needs to be changed.\n<|/ c |>\n<| c |>\nWhy wouldn't you `array_walk`\
    \ over the array and return the max if the value is `null`?\n<|/ c |>\n<| c |>\n\
    : That's a good question. PHP arrays can contain `null` values inside their values,\
    \ so I wasn't sure how that would play out when calling `max()`. Now that I think\
    \ about it, I suppose it might be better to do a `array_walk()` on the input,\
    \ since it seems that's what the OP is wanting to do. But I imagine that would\
    \ still be slower since we're iterating over it twice. So I thought I'd just leave\
    \ this answer as-is and explain how to do it the way he asked. It will work fine\
    \ even if the `null` values aren't at the front.\n<|/ c |>\n<| c |>\nYeah the\
    \ nulls at the beginning could cause trouble if you do that.\n<|/ c |>\n<| a tags=php,sorting,arrays,string\
    \ |>\n<code>\n<?php", "    if (empty($strings)) return null;\n\n    $long = null;\n\
    \    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $long = $string;\n            $longest =\
    \ strlen($string);\n        }\n    }\n    return $long;\n}\n</code>\n<|/ a tags=php,multidimensional-array\
    \ dscore=1 |>\n<| c |>\nWhy do you use strlen instead of mb_strlen?\n<|/ c |>\n\
    <| c |>\nFor that matter, why do you use `mb_strlen($longest, 'UTF-8')` instead\
    \ of `mb_strlen($longest)`? This could cause some problems, as the docs point\
    \ out. http://php.net/mb_strlen\n<|/ c |>\n<| c |>\nYeah, I noticed that too.\
    \ I've updated my answer. Thanks for pointing out!\n<|/ c |>\n<| c |>\nI used\
    \ your function and I got this error :\nFatal error: Call to undefined function\
    \ mb_strlen() in /homepages/16/d37205219/htdocs/index.php on line 23\n<|/ c |>\n\
    <| c |>\nYeah, I wrote this before I noticed you're using PHP >= 5.4. `mb_strlen`\
    \ is only available in PHP >= 5.3. So, the function won't work without some tweaks.\
    \ I've updated my answer again.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$longest\
    \ = array();\n$longestIndex = -1;\nforeach ($strings as $key => $string) {\n \
    \  if(strlen($string) > strlen($longest)) {\n       $longest = $string;\n    \
    \   $longestIndex = $key;\n   }\n}\n$longestString = $strings[$longestIndex];\n\
    </code>\n<|/ a tags=php,multidimensional-array |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post.\n<|/ c |>\n<| c |>\nI really like this approach\
    \ but it seems too long.\n<|/ c |>\n<| c |>\nI wrote this before I noticed you're\
    \ using PHP >= 5.4. `mb_strlen` is only available in PHP >= 5.3. So, the function\
    \ won't work without some tweaks. I've updated my answer again.\n<|/ c |>\n<|\
    \ a |>\nTry this code:\n<code>", "  if (empty($strings)) {\n    return null;\n\
    \  }\n\n  $max = null;\n  foreach ($strings as $str) {\n    if (strlen($str) >\
    \ strlen($max)) {\n      $max = $str;\n    }\n  }\n\n  return $max;\n}\n", " \
    \   $length = count($strings);\n    if ($length == 0) {\n        return null;\n\
    \    }\n    $longest = PHP_INT_MAX;\n    $last = null;\n    foreach ($strings\
    \ as $s) {\n        $len = strlen($s);\n        if ($len > $longest) {\n     \
    \       $longest = $len;\n            $last = $s;\n        }\n    }\n    return\
    \ $last;\n}\n", "    if (!$strings || count($strings) === 0) {\n        return\
    \ null;\n    }\n    $longest_length = 0;\n    foreach ($strings as $string) {\n\
    \        $length = mb_strlen($string, 'UTF-8');\n        if ($length > $longest_length)\
    \ {\n            $longest_length = $length;\n        }\n    }\n    return $longest_length\
    \ > 0 ? $strings[array_search(max($longest_length), $strings)] : null;\n}\n\n\
    /**\n * Get the first element of an array.\n *\n * PHP has a rich comparison feature\
    \ that allows you to compare an element of an array\n * to a value or to another\
    \ array. This function lets you test if a value is equal\n * to another array\
    \ or value. For example:\n *\n * ``` php\n * $array1 = array(\"a\" => \"green\"\
    , \"b\" => \"brown\", \"c\" => \"blue\");\n * $array2 = array(\"a\" => \"green\"\
    , \"b\" => \"brown\", \"c\" => \"blue\", \"d\" => \"red\");\n *\n * if (is_array($array)\
    \ && is_array($array2)) {\n *     $same_count = count(array_intersect($array,\
    \ $array2));\n *     $diff_count = count(array_diff($array, $array2));\n *   \
    \  $array_count = count($array);\n * }\n * ```\n *\n * @param mixed $value\n *\
    \   The value to compare against.\n *\n * @return bool\n *   True, if $value equals\
    \ $array1, $array2, or both.\n */", "    $longest = '';\n\n    foreach ($strings\
    \ as $string) {\n        $length = mb_strlen($string);\n\n        if ($length\
    \ > $longest) {\n            $longest = $length;\n        }\n    }\n\n    return\
    \ $longest ? $strings[array_search($longest, $strings)] : null;\n}\n", "    $long\
    \ = null;\n    $longest = array();\n    foreach ($strings as $string) {\n    \
    \    $length = strlen($string);\n        if ($length > 0 && isset($longest[$length]))\
    \ {\n            // Found a string of same length. Replace previous one.\n   \
    \         $longest[$length] = $string;\n        } else {\n            $longest[$length]\
    \ = $string;\n        }\n    }\n    if (count($longest) > 0) {\n        // Find\
    \ the longest string.\n        $longest = current($longest);\n    }\n    return\
    \ $longest;\n}\n", "    // If the input array is empty, return null\n    if (count($strings)\
    \ == 0) {\n        return null;\n    }\n\n    // If the input array has a single\
    \ element that's longer than all the other elements,\n    // return that element.\n\
    \    if (count($strings) == 1) {\n        $longest = array_pop($strings);\n  \
    \      if (count($strings) == 0) {\n            return $longest;\n        }\n\
    \        for ($i = 0; $i < count($strings); $i++) {\n            if (strlen($strings[$i])\
    \ < strlen($longest)) {\n                $longest = $strings[$i];\n          \
    \  }\n        }\n        return $longest;\n    }\n\n    // Sort the input array,\
    \ then find the longest.\n    sort($strings);\n    $longest = array_pop($strings);\n\
    \    for ($i = 0; $i < count($strings); $i++) {\n        if (strlen($strings[$i])\
    \ < strlen($longest)) {\n            $longest = $strings[$i];\n        }\n   \
    \ }\n    return $longest;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nGreat answer.\
    \ Even if it doesn't solve the problem, it should provide an alternative to the\
    \ asker's problem. Upvote!\n<|/ c |>\n<| c |>\nGreat answer, but this doesn't\
    \ work, if the strings are `aa`, `bb`, `cc`, `aaa`. In this case, it returns `aa`\
    \ when it should return `aaa`. So it can't return the longest of the strings.\n\
    <|/ c |>\n<| c |>\n, Thanks for the heads up! I added a `count()` check in the\
    \ code so it will return the longest string in that case.\n<|/ c |>\n<| c |>\n\
    That is awesome. I was looking for something very similar to this.\n<|/ c |>\n\
    <| a tags=php,string |>\n<code>\n$str = array('aa', 'bb', 'cc');\n\necho max($str);\n\
    </code>\nOutput\n\ncc\n<|/ a dscore=2 |>\n<| c |>\nI don't think this will help\
    \ the OP because it doesn't explain what he's trying to do.\n<|/ c |>\n<| c |>\n\
    It does answer the OP's question. He's trying to get the longest string from a\
    \ set of strings. Using `max()` is obviously the correct way to go, but you need\
    \ to explain what it is that he's trying to do.\n<|/ c |>\n<| c |>\nThis isn't\
    \ what the OP asked for. It's not what he asked for ***at all***. He asked for\
    \ the string that *occurs most often in a set of strings*. For example, ", " \
    \ if (empty($strings)) {\n    return null;\n  }\n  $longest_string = $strings[0];\n\
    \  foreach ($strings as $string) {\n    if (strlen($longest_string) > strlen($string))\
    \ {\n      $longest_string = $string;\n    }\n  }\n  return $longest_string;\n\
    }\n", "    return $strings[0] ?? max(array_map(function ($s) { return strlen($s);\
    \ }, $strings));\n}\n</code>\n<|/ a tags=php,arrays,substr dscore=0 |>\n<| a |>\n\
    I think this is the solution\n<code>\n<?php\n    $arr = ['ab', 'cd', 'ef', 'gh',\
    \ 'ij', 'kl', 'mn'];\n\n    $maxLen = 0;\n\n    foreach ($arr as $key => $value)\
    \ {\n\n        $length = strlen($value);\n\n        if ($length > $maxLen) {\n\
    \            $maxLen = $length;\n        }\n\n    }\n\n    echo 'Max lenght :\
    \ '.$maxLen;", "    if (empty($strings)) {\n        return null;\n    }\n\n  \
    \  $longest = str_repeat(max($strings, function($s) {\n        return strlen($s);\n\
    \    }));\n\n    return max($strings, function($s) use ($longest) {\n        $len\
    \ = strlen($s);\n\n        return $len > strlen($longest) ? $s : $longest;\n \
    \   });\n}\n", "  if (!$strings) return null;\n  $longest = null;\n  foreach ($strings\
    \ as $string) {\n    if (strlen($string) > strlen($longest)) {\n      $longest\
    \ = $string;\n    }\n  }\n  return $longest;\n}", "    return count($strings)\
    \ === 0 || !is_array($strings) ? null : max($strings);\n}\n", "  if (!$strings)\
    \ return null;\n  $max_length = 0;\n  $longest = null;\n  foreach ($strings as\
    \ $string) {\n    if (strlen($string) > $max_length) {\n      $longest = $string;\n\
    \      $max_length = strlen($string);\n    } else if (strlen($string) == $max_length)\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n", "  rsort($strings);\n\
    \  return $strings[0] ?? null;\n}", "  sort($strings);\n  $longest = array();\n\
    \n  foreach ($strings as $key => $value) {\n    if (strlen($value) > count($longest))\
    \ {\n      $longest = $value;\n    }\n  }\n\n  return $longest;\n}\n", "    if\
    \ (!$strings)\n        return null;\n    $max = null;\n    foreach ($strings as\
    \ $string) {\n        if (strlen($string) > $max)\n            $max = strlen($string);\n\
    \    }\n    return $max === null ? null : $max;\n}\n</code>\n<|/ a tags=php,arrays\
    \ dscore=1 |>\n<| a |>\nHere's an alternative method that returns an array of\
    \ all possible combinations of the input array's values:\n<code>\n$input = [\n\
    \    'a',\n    'b',\n    'c'\n];\n\n$result = array_reduce(array_chunk($input,\
    \ 2), function($carry, $item) {\n    return $carry ? array_merge(array_slice($carry,\
    \ 0, -1), [$item]) : [$item];\n}, []);\n\nprint_r($result);\n</code>\nOutput:\n\
    <code>\nArray\n(\n    [0] => a\n    [1] => b\n    [2] => c\n)\n</code>\nDemo\n\
    <|/ a dscore=1 tags=php,arrays |>\n<| a dscore=1 |>\nA solution using array_reduce:\n\
    <code>\n$input = array('a', 'b', 'c');\n$result = array_reduce(array_chunk($input,\
    \ 2), function($carry, $item) {\n    return $carry ? array_merge(array_slice($carry,\
    \ 0, -1), [$item]) : [$item];\n}, []);\n\nvar_dump($result);\n</code>\nOutput:\n\
    <code>\narray(3) {\n  [0]=>\n  string(1) \"a\"\n  [1]=>\n  string(1) \"b\"\n \
    \ [2]=>\n  string(1) \"c\"\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$arr = [\n    0 => 'a',\n    1 => 'b',\n    2 => 'c'\n];\n$result\
    \ = array();\nforeach(array_chunk($arr, 2) as $arr) {\n    $result = array_merge($result,\
    \ $arr);\n}\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\n$a = array(\"a\",\"b\",\"c\");\n$b = array_chunk($a, 2);\n$c = array_combine(range(0,count($b)-1),$b);\n\
    var_dump($c);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis answer has a couple\
    \ of issues. One is that `array_chunk` always returns an array with elements even\
    \ when it has to produce an empty array for you to fill in. `array_combine` on\
    \ the other hand will fail to combine two empty arrays. Second, you're using `array_combine`\
    \ incorrectly. ", "    $longest = null;\n    $length = 0;\n    foreach ($strings\
    \ as $string) {\n        $length = max($length, strlen($string));\n        $longest\
    \ = null === $longest ? $string : $longest;\n    }\n    return $length === 0 ?\
    \ null : $longest;\n}", "    if (empty($strings)) {\n        return null;\n  \
    \  }\n    sort($strings);\n    $max = reset($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($max)) {\n            $max\
    \ = $string;\n        }\n    }\n    return $max;\n}\n", "    if (!$strings) return\
    \ null;\n\n    if (empty($strings)) return null;\n\n    $max_length = 0;\n   \
    \ foreach ($strings as $string) {\n        $string_length = strlen($string);\n\
    \        if ($string_length > $max_length) {\n            $max_length = $string_length;\n\
    \        }\n    }\n\n    return $max_length > 0 ? $strings[0] : null;\n}\n", " \
    \   if (empty($strings)) {\n        return null;\n    }\n    $max_length = -1;\n\
    \    $max_string_length = -1;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length > $max_string_length) {\n          \
    \  $max_string_length = $length;\n        }\n        if ($length > $max_length)\
    \ {\n            $max_length = $length;\n        }\n    }\n    return $max_length\
    \ <= 1 ? null : $strings[$max_string_length];\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n\n    $longest = max(array_map('strlen', $strings));\n\
    \n    return array_reduce($strings, function ($result, $string) use ($longest)\
    \ {\n        return $result ? max(strlen($string), strlen($result), $longest)\
    \ : $longest;\n    }, null);\n}\n", "  if (empty($strings)) {\n    return null;\n\
    \  }\n  $max = array_reduce($strings, function ($current, $string) {\n    return\
    \ max($current, strlen($string));\n  }, 0);\n  return empty($max) ? null : $strings[0];\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis is much better. I'm going\
    \ to keep this one as the accepted answer for now, but I will definitely look\
    \ into array_reduce() and see if I can make some use out of it.\n<|/ c |>\n<|\
    \ c |>\nI like it, but I think it is missing a final `return`. I think it should\
    \ just be `return empty($max) ? null : $strings[0];` That said, this doesn't seem\
    \ to answer the original question; it just returns the longest string.\n<|/ c\
    \ |>\n<| c |>\nI agree and added a `return`. By the way, the accepted answer doesn't\
    \ even work correctly. It just returns the largest string in the array. So if\
    \ that array was `array(\"a\",\"b\",\"c\",\"d\")`, it would return `d`\n<|/ c\
    \ |>\n<| c |>\nYou're right. My bad. I did miss it. My bad.\n<|/ c |>\n<| c |>\n\
    I like it.  I added a solution that just returns the longest string.  If you use\
    \ this, please remember to up-vote the other solution too.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array1 = array();\n$array2 = array('abc', 'abc', 'abc', 'abc',\
    \ 'abc', 'abc', 'abc', 'abc', 'abc');\n\n$array1[] = $array2;\necho array_max($array1);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis does not answer his question - he wants\
    \ to find the maximum value of an array... not an array with itself.\n<|/ c |>\n\
    <| c |>\nI think it does\n<|/ c |>\n<| c |>\nThanks for pointing out that it's\
    \ actually a duplicate.\n<|/ c |>\n<| c |>\nThis is a duplicate answer.\n<|/ c\
    \ |>\n<| c |>\narray_max() is deprecated since php 5.3.0\n<|/ c |>\n<| a |>\n\
    Here's a solution using max(), the array max function and closures. I haven't\
    \ tested this with large arrays, but I believe it should work:\n<code>\n$array1\
    \ = array();\n$array2 = array('abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc',\
    \ 'abc', 'abc');\n$", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (!is_null($longest) && $length\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n        if\
    \ (!is_null($longest) && $length == strlen($longest)) {\n            return $longest;\n\
    \        }\n    }\n    return null;\n}", "    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $maxLength = 0;\n    foreach ($strings as $string)\
    \ {\n        if (mb_strlen($string) > $maxLength) {\n            $maxLength =\
    \ mb_strlen($string);\n        }\n    }\n\n    return reset($strings) ?: null;\n\
    }\n", "  $longest = null;\n\n  // Find the longest string in the array\n  $max_len\
    \ = PHP_INT_MAX;\n  for ($i = 0, $l = count($strings); $i < $l; $i++) {\n    $len\
    \ = strlen($strings[$i]);\n    if ($len > $max_len) {\n      $max_len = $len;\n\
    \      $longest = $strings[$i];\n    }\n  }\n\n  // Return null if array is empty\n\
    \  if (!$longest) {\n    return null;\n  }\n\n  // If the longest string has multiple\
    \ characters, return the first one\n  $matches = preg_grep('/^./', $strings);\n\
    \  if (count($matches) > 1) {\n    return $matches[0];\n  }\n\n  return $longest;\n\
    }\n", "  $longest = \"\";\n  $last_length = 0;\n\n  foreach ($strings as $string)\
    \ {\n    $length = strlen($string);\n\n    if ($length <= $last_length) {\n  \
    \    $longest = $string;\n    }\n    elseif ($length > $last_length) {\n     \
    \ $longest = $last_length < $length ? $string : null;\n    }\n    $last_length\
    \ = $length;\n  }\n\n  return $longest;\n}\n", "  // No strings given, return\
    \ null\n  if (count($strings) == 0) {\n    return null;\n  }\n\n  // Array of\
    \ strings given, sort the array by length\n  $strings = array_map(\"strlen\",\
    \ $strings);\n  array_multisort($strings);\n\n  // Get the longest string, return\
    \ it\n  if (count($strings) == 1) {\n    return $strings[0];\n  }\n\n  return\
    \ $strings[0];\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI like this answer, it's\
    \ short and does the job well.  However it doesn't return the longest string in\
    \ case of multiple strings of the same length. Example:  $strings = array(\"aaaa\"\
    , \"bbbb\", \"ccc\", \"dddd\", \"eeee\"); returns 'bbbb', while it really should\
    \ return 'eeee'.  I suggest a change to line 9: if (count($strings) == 1) {return\
    \ $strings[0];}\n<|/ c |>\n<| c |>\n- thanks for your feedback. I've edited the\
    \ answer to make use of the `array_multisort()` function which seems to do the\
    \ job well for me\n<|/ c |>\n<| c |>\nThis is an interesting approach. Can it\
    \ be made to also return the count?\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  \
    \  if (empty($strings)) {\n        return null;\n    }\n    return implode('',\
    \ array_keys(array_reduce($strings, function ($result, $string) {\n        return\
    \ $result ? max($result, strlen($string)) : $result;\n    }, 0)));\n}\n", "  \
    \  if (empty($strings)) {\n        return null;\n    }\n    $maxLength = 0;\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > $maxLength) {\n            $maxLength = $length;\n       \
    \ }\n    }\n    return $maxLength > 0 ? $strings[0] : null;\n}", "    if (!$strings)\
    \ {\n        return null;\n    }\n    // Loop through the strings, from longest\
    \ to shortest\n    $maxLength = 0;\n    foreach ($strings as $string) {\n    \
    \    $currentLength = strlen($string);\n        if ($currentLength > $maxLength)\
    \ {\n            $maxLength = $currentLength;\n        }\n    }\n    return $strings[$maxLength];\n\
    }\n", "  return ($strings ? max(array_map(function($value) {\n    return mb_strlen($value);\n\
    \  }, $strings)) : null);\n}\n", "    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $result = null;\n    $maxLength = 0;\n    $strings = array_filter($strings);\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > $maxLength) {\n            $maxLength = $length;\n       \
    \     $result = $string;\n        }\n    }\n    return $result;\n}", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest_length = strlen($strings[0]);\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length >= $longest_length) {\n            $longest_length = $length;\n\
    \        }\n    }\n    return $strings[array_search($longest_length, array_map('strlen',\
    \ $strings))];\n}\n</code>\n<|/ a |>\n<| a |>\nUse strlen function in php to get\
    \ length of string. And then compare the length with length of longest string\
    \ and return the one with longest length from array\n<code>\n$arr = [\n    'string1',\n\
    \    'string2',\n    'string3',\n    'string4',\n    'string5',\n];\n$longest\
    \ = array_reduce($arr, function($longest, $string) {\n    return strlen($string)\
    \ > strlen($longest) ? $string : $longest;\n});\n</code>\n<|/ a tags=arrays,php,longest-substring,string\
    \ dscore=0 |>\n<| a |>\n<code>", "    if (count($strings) === 0) {\n        return\
    \ null;\n    }\n    $longest = count($strings[0]) > 0 ? $strings[0] : null;\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > strlen($longest)) {\n            $longest = $string;\n   \
    \     }\n    }\n    return $longest;\n}\n", "    $longest = null;\n\n    $stringCount\
    \ = count($strings);\n    if ($stringCount == 0) {\n        return null;\n   \
    \ }\n\n    $maxLength = 0;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length > $maxLength) {\n            $maxLength\
    \ = $length;\n            $longest = $string;\n        }\n    }\n\n    return\
    \ $longest;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nHi Matthew thanks\
    \ for the answer, the code looks good, but unfortunately I am not a pro at php,\
    \ is there a way to achieve the same thing without using regex?\n<|/ c |>\n<|\
    \ c |>\nI didn't say you were a pro. I'm just saying that regex is more complicated\
    \ than a solution that doesn't use regex. Of course, you can use a loop and some\
    \ logic to achieve the same thing. I just didn't want to spend time writing out\
    \ a regex solution when the answer is already written out here.\n<|/ c |>\n<|\
    \ c |>\nI agree that regex is complicated - I wouldn't call my regex solution\
    \ pro either, but just seemed simpler to me.\n<|/ c |>\n<| c |>\nIt might be simpler\
    \ - but what happens if you have an array of arrays or objects or an associative\
    \ array? And I meant it this way because you use regular expressions to do the\
    \ same thing in different ways and this way is more complicated than doing it\
    \ with an algorithm.\n<|/ c |>\n<| c |>\nI agree that regex is complicated - I\
    \ wouldn't call my regex solution pro either, but just seemed simpler to me. Maybe\
    \ I should have been a little more specific about what the code is actually doing.\
    \ Thanks for the answer, will give it a shot :)\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = [\n    'a',\n    'aa',\n    'aaa',\n    'aaa',\n    'aa',\n\
    \    'aa'\n];\n\n$longest = \"\";\nforeach($array as $val){\n    if(strlen($longest)<strlen($val)){\n\
    \        $longest = $val;\n    }\n}\n\necho \"longest string: \". $longest;\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=php,arrays |>\nThis can be done using php\
    \ preg_grep with a regular expression (regex) to get the longest string in the\
    \ array\n<code>\n$longest = preg_grep('/(.*)/', array_map(function($value) { return\
    \ strlen($value); }, $array));", "    if(count($strings) == 0) {\n        return\
    \ null;\n    }\n    $lengths = array();\n    foreach($strings as $string) {\n\
    \        $length = strlen($string);\n        if(!isset($lengths[$length])) {\n\
    \            $lengths[$length] = 0;\n        }\n        $lengths[$length] += 1;\n\
    \    }\n    $maxKey = max($lengths);\n    foreach($lengths as $length => $count)\
    \ {\n        if($count != $maxKey) {\n            return $strings[$length];\n\
    \        }\n    }\n    return null;\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\n: You are welcome. By the way, I have edited my answer, please\
    \ take a look.\n<|/ c |>\n<| c |>\nThat's just too much code for a simple task.\
    \ Try `usort($strings, 'longest');`. Also, I think you could make that `array_count_values`\
    \ a bit shorter by using a `foreach` instead of the `foreach` loop and then `max($result)`.\n\
    <|/ c |>\n<| c |>\n: Yeah. I just wrote the function as an exercise. And I don't\
    \ see why I should use more codes than I have to. Thanks.\n<|/ c |>\n<| c |>\n\
    : Yes, that's true, you can make that even shorter. Thanks for your comment. I\
    \ have edited my answer.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\nI made a\
    \ quick function that will solve your problem.\n<code>", "    if (empty($strings))\n\
    \        return null;\n    $maxLength = 0;\n    foreach ($strings as $s)\n   \
    \     if (strlen($s) > $maxLength)\n            $maxLength = strlen($s);\n   \
    \ return $maxLength > 0 ? max($strings) : null;\n}", "    if (empty($strings))\
    \ {\n        echo \"null\";\n        return null;\n    }\n    $longest = null;\n\
    \    $longestLength = 0;\n    foreach ($strings as $s) {\n        if (strlen($s)\
    \ > $longestLength) {\n            $longest = $s;\n            $longestLength\
    \ = strlen($s);\n        }\n    }\n    return $longest;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nI love that it's called a longest but your variable naming is a\
    \ bit confusing\n<|/ c |>\n<| c |>\n, `$longestLength` means *longestLength*,\
    \ it's just a shorter name ;)\n<|/ c |>\n<| c |>\nThank you. I had a similar implementation\
    \ but I was using sort() and then array_pop() instead of array_reduce(). Thank\
    \ you for sharing your answer :)\n<|/ c |>\n<| c |>\nI disagree. array_reduce()\
    \ is the proper solution to this problem, and it has the benefit of being able\
    \ to pass in any number of arrays, not just two. Also, array_reduce() is an actual\
    \ function and can be used in every PHP script, not just in certain places. It's\
    \ a much more elegant solution, while still keeping the readable one-liner :)\n\
    <|/ c |>\n<| c |>\n, you are right about the readability and elegance but you\
    \ also have to consider `array_reduce()` is available only in `PHP >= 5.5.0` not\
    \ in `PHP >= 5.3.0` http://php.net/manual/en/function.array-reduce.php\n<|/ c\
    \ |>\n<| a |>\nYou could use array_reduce:\n<code>\n$longest = array_reduce($myArray,\
    \ function($max, $string) {\n    return strlen($string) > strlen($max) ? $string\
    \ : $max;\n}, null);\n</code>\n<|/ a tags=php,arrays dscore=2 |>\n<| a tags=php,arrays\
    \ dscore=2 |>\n<code>", "    if (empty($strings)) {\n        return null;\n  \
    \  }\n\n    // Use key() to get the longest string and array_count_values() to\
    \ get the count of each string\n    $longest = max(array_count_values($strings),\
    \ function ($count) {\n        return $count;\n    });\n\n    // Return the first\
    \ string in the array that matches the longest string length\n    return array_keys($strings,\
    \ function ($string) use ($longest) {\n        return strlen($string) === $longest;\n\
    \    })[0];\n}\n\n$strings = array(\"a\", \"b\", \"c\");\n\necho $longest($strings);",
  "    if (empty($strings)) {\n        return null;\n    }\n    $longest = strlen($strings[0]);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > $longest)\
    \ {\n            $longest = strlen($string);\n        }\n    }\n    return $longest\
    \ ? $strings[0] : null;\n}\n", "    $max_len = null; // The longest string in\
    \ the array\n\n    foreach ($strings as $str) {\n        $len = mb_strlen($str);\n\
    \        if ($max_len === null || $len > $max_len) {\n            $max_len = $len;\n\
    \        }\n    }\n\n    return $max_len !== null ? $strings[$max_len] : null;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,arrays,php,string |>\nTry this\
    \ one:\n<code>", "    foreach ($strings as $key => $string) {\n        if ($strings[$key]\
    \ < $string) {\n            $strings[$key] = $string;\n        }\n    }\n    return\
    \ $strings[0];\n}\n</code>\nAs for performance, the array lookup should be faster\
    \ than the function call in most cases and for very few elements in the array,\
    \ the difference should be negligible. However, the difference can still be seen\
    \ in case of large arrays. That is what I would consider the most critical part.\n\
    <|/ a dscore=1 tags=arrays,string,php |>\n<| c |>\nThank you so much :) That was\
    \ very helpful\n<|/ c |>\n<| a dscore=1 tags=arrays,string,php |>\nIf your strings\
    \ are sorted by length and you want to find the longest string, you can use a\
    \ binary search:\n<code>", "    if (!$strings) {\n        return null;\n    }\n\
    \n    // Make sure we have an array, then sort it\n    $strings = (array) $strings;\n\
    \    usort($strings, 'strcmp');\n\n    $longest = count($strings) == 1 ? $strings[0]\
    \ : null;\n\n    foreach ($strings as $string) {\n        $charsLength = mb_strlen($string,\
    \ 'UTF-8');\n        if ($charsLength > $longest) {\n            $longest = $charsLength;\n\
    \        }\n    }\n\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $s) {\n        if (strlen($s) > strlen($longest)) {\n         \
    \   $longest = $s;\n        }\n    }\n    return $longest;\n}\n", "  if (!count($strings))\
    \ return null;\n  $maxLen = 0;\n  $longestString = null;\n  foreach ($strings\
    \ as $str) {\n    if (strlen($str) > $maxLen) $maxLen = strlen($str);\n    if\
    \ ($longestString == null || strlen($str) > strlen($longestString)) {\n      $longestString\
    \ = $str;\n    }\n  }\n  return $longestString;\n}\n", "    if (empty($strings))\
    \ return null;\n    $longest = null;\n    foreach ($strings as $string) {\n  \
    \      if (strlen($string) > strlen($longest)) $longest = $string;\n    }\n  \
    \  return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = array();\n    $max_length = 0;\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > $max_length) {\n            $longest = array();\n        \
    \    $max_length = $length;\n        }\n        if ($length > 0 && is_string($string)\
    \ && $length > 1) {\n            $longest[] = $string;\n        }\n    }\n   \
    \ return empty($longest) ? null : $longest[0];\n}\n", "    return $strings &&\
    \ count($strings) > 0 ?\n            max(array_map('strlen', $strings)) :\n  \
    \          null;\n}\n</code>\nYou can then use your filter to filter the records:\n\
    <code>\n$filtered = array_filter($records, function($record) {\n    $date = $record->date;\n\
    \    return $date && $date->diffInDays(Carbon::now()) > 24; // filters records\
    \ with a date that has passed the day limit\n});\n", "  if (!$strings) {\n   \
    \ return null;\n  }\n  $maxlen = -1;\n  foreach ($strings as $s) {\n    $len =\
    \ strlen($s);\n    if ($len > $maxlen) {\n      $maxlen = $len;\n    }\n  }\n\
    \  return $maxlen > 0 ? $strings[$maxlen - 1] : null;\n}\n", "  if (!empty($strings))\
    \ {\n    $longest = $strings[0];\n    foreach ($strings as $i => $str) {\n   \
    \   $length = strlen($str);\n      if ($length > strlen($longest)) {\n       \
    \ $longest = $str;\n      }\n    }\n    return $longest;\n  }\n  return null;\n\
    }\n</code>\nAnd then you can call it like so from your view:\n<code>\n$longest\
    \ = array_search(longest($array), $array);\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thank you for your help - but I get the error \"Warning: array_search() expects\
    \ parameter 2 to be array, null given\" when i try to add this to my view\n<|/\
    \ c |>\n<| c |>\nThat's probably because you're not passing an array to the function\
    \ - I'll update my answer to include how you pass it in.\n<|/ c |>\n<| c |>\n\
    I have updated my question with the view code and tried to add your new code to\
    \ my view and got this error: Parse error: syntax error, unexpected '<' in D:\\\
    Hosting\\10674\\html\\dev\\views\\home\\index.php on line 3\n<|/ c |>\n<| c |>\n\
    Yeah, I was missing some `<?php` and `?>` tags.\n<|/ c |>\n<| a tags=wordpress,php,arrays\
    \ |>\nYou could use this function instead :\n<code>", "    $longest_length = -1;\n\
    \    $first_string = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > $longest_length) {\n            $longest_length\
    \ = strlen($string);\n            $first_string = $string;\n        }\n    }\n\
    \    return $first_string;\n}\n</code>\n<|/ a |>\n<| a tags=php,arrays |>\nI believe\
    \ this question has been answered already, but if you're looking for the simplest\
    \ solution, here's an alternative:\n<code>\n$array = [\n    'aaa',\n    'abc',\n\
    \    'asdf',\n    'abcdef',\n];\n\necho max(array_map(function($val) { return\
    \ strlen($val); }, $array));\n</code>\n<|/ a dscore=4 |>\n<| c |>\nNice use of\
    \ array_map()\n<|/ c |>\n<| c |>\nNot sure if this is any better than the `array_reduce()`\
    \ answers.\n<|/ c |>\n<| c |>\nThe OP didn't ask for an alternative solution,\
    \ they asked for the simplest solution.\n<|/ c |>\n<| c |>\nI disagree. `array_reduce()`\
    \ can be very useful if you need to return several values from the same function.\n\
    <|/ c |>\n<| c |>\nNot only that, but `array_map()` is less verbose than `array_reduce()`\
    \ + `array_values()` if you don't need to keep the array keys. `array_reduce()`\
    \ also preserves the keys if you need that.\n<|/ c |>\n<| a tags=php,arrays |>\n\
    If you're looking for an answer which works on multidimensional arrays, try this\
    \ one:\n<code>\n<?php", "    return max($strings, function($s) use ($strings)\
    \ {\n        return strlen($s);\n    });\n}\n", "    $longest = null;\n    $shortest\
    \ = null;\n    foreach ($strings as $string) {\n        if (strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n        elseif\
    \ ($shortest === null) {\n            $shortest = $string;\n        }\n      \
    \  elseif (strlen($string) < strlen($shortest)) {\n            $shortest = $string;\n\
    \        }\n    }\n    return $longest ?: $shortest;\n}\n", "    if (!is_array($strings))\
    \ {\n        return null;\n    }\n    if (empty($strings)) {\n        return null;\n\
    \    }\n    $max = $strings[0];\n    foreach ($strings as $string) {\n       \
    \ $length = strlen($string);\n        if ($length > strlen($max)) {\n        \
    \    $max = $string;\n        }\n    }\n    return $max;\n}\n", "    if (empty($strings))\n\
    \        return null;\n\n    $max_len = -1;\n    foreach ($strings as $s) {\n\
    \        if (strlen($s) > $max_len)\n            $max_len = strlen($s);\n    }\n\
    \n    return empty($strings) ? null : $max_len;\n}\n", "    if (!count($strings))\
    \ {\n        return null;\n    }\n    $max = null;\n    $longest = null;\n   \
    \ foreach ($strings as $string) {\n        $len = mb_strlen($string);\n      \
    \  if ($max === null || ($len > $max)) {\n            $max = $len;\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 tags=arrays,max,php,max |>\nI like this one:\n\
    <code>\n<?php\n$array = array(1,2,3,4,5,6,7,8,9,10);", "    if (!$strings || !count($strings))\
    \ return null;\n    $max_length = 0;\n    foreach ($strings as $str) {\n     \
    \   $len = mb_strlen($str, \"UTF-8\");\n        if ($len > $max_len) $max_len\
    \ = $len;\n    }\n    return $max_len > 0 ? mb_substr($strings[0], 0, $max_len,\
    \ \"UTF-8\") : null;\n}\n</code>\nThe above solution has some benefits over using\
    \ array_filter as it returns the first matching array element (the one with the\
    \ longest string length), whereas array_filter will always return an array with\
    \ a boolean in it.\n<|/ a tags=php,arrays |>\n<| c |>\nThis one works perfectly,\
    \ except for the case where 2 strings occur equally many times. For example, array(\"\
    a\",\"aaa\",\"aaa\",\"b\") will return \"aaa\", while it should be \"a\"\n<|/\
    \ c |>\n<| a |>\n<code>\n$longest = substr($arr[0], 0, max(array_map(function($v)\
    \ { return mb_strlen($v, \"UTF-8\"); }, $arr)));\n</code>\n<|/ a dscore=4 tags=php,arrays\
    \ |>\n<| c |>\nAwesome. Thanks!\n<|/ c |>\n<| c |>\nI think you should change\
    \ the second parameter of mb_strlen() to the current string as otherwise the length\
    \ of the first element will be used.\n<|/ c |>\n<| c |>\nI don't think so, since\
    \ $arr[0] is the first element and mb_strlen() doesn't care about the string length\
    \ at all.\n<|/ c |>\n<| c |>\nHmmm... maybe I misunderstood the documentation.\
    \ Thank you!\n<|/ c |>\n<| a tags=php,arrays |>\nIf your array is an associative\
    \ one, you could also use the array_keys() function and get the max string length\
    \ from it :\n<code>\n<?php\n$array = array('aaa' => 100, 'bb' => 200, 'cc' =>\
    \ 300, 'dd' => 400, 'ee' => 500);\n$max_len = max(array_keys($array));\necho $max_len;\
    \ // 5\n</code>\n<|/ a dscore=3 |>\n<| c |>\nWorks great. I can even use it for\
    \ associative arrays: https://3v4l.org/EmXeL\n<|/ c |>\n<| a dscore=3 |>\nThe\
    \ function array_count_values() will return a counting array which can be used\
    \ with max().\n<code>\n$array = array('aaa','bbb','aaa','ccc');\n$maxlen = max(array_count_values($array));\n\
    </code>\n<|/ a tags=php,", "    if (!$strings) {\n        return null;\n    }\n\
    \n    $longest = array_reduce($strings, function ($carry, $string) {\n       \
    \ return $carry === null\n            ? mb_strlen($string)\n            : mb_strlen($string)\
    \ > mb_strlen($cart) ? $string : $cart;\n    });\n\n    return $longest === null\n\
    \        ? null\n        : $longest;\n}", "  if (count($strings) === 0) {\n  \
    \  return null;\n  }\n  $maxLen = 0;\n  foreach ($strings as $string) {\n    $len\
    \ = strlen($string);\n    if ($len > $maxLen) {\n      $maxLen = $len;\n    }\n\
    \  }\n  return $strings[0];\n}", "    if (!count($strings)) return null;\n   \
    \ return max(array_map('strlen', $strings));\n}", "    $longest_length = null;\n\
    \    $max_length     = 0;\n\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > $max_length) {\n            $max_length = strlen($string);\n            $longest_length\
    \ = $string;\n        }\n    }\n\n    if ($max_length > 0) {\n        return $longest_length;\n\
    \    }\n\n    return null;\n}\n", "    if (empty($strings)) {\n        return\
    \ null;\n    }\n    if (count($strings) === 1) {\n        return $strings[0];\n\
    \    }\n    $length = array();\n    foreach ($strings as $str) {\n        $length[]\
    \ = strlen($str);\n    }\n    return max($length);\n}\n\n/**\n * Get file contents\
    \ by path.\n *\n * @param string $path The path to file.\n * @return string Contents\
    \ of file.\n */", "    $longest = null;\n    foreach ($strings as $string) {\n\
    \        $length = (strlen($string)) ?: strlen($string);\n        if ($length\
    \ == 0 || $length < strlen($longest)) {\n            $longest = $string;\n   \
    \     }\n    }\n\n    return $longest ? $longest : null;\n}\n", "    if (!$strings)\
    \ {\n        return null;\n    }\n\n    $longest = array();\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if ($length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n\n    return $longest;\n\
    }\n</code>\n<|/ a dscore=1 tags=php,laravel,laravel-4,eloquent |>\n<| a dscore=1\
    \ tags=php,laravel,laravel-4,eloquent |>\nI wanted to do the same thing as you\
    \ did but without the need of extra query to db. Maybe the solution is not the\
    \ best, but it's working.\nI used array_walk and array_combine functions to sort\
    \ a multidimensional array. As you can see i used array_map function in combination\
    \ with array_map and array_walk.\n<code>\npublic function show($slug){\n    $courses\
    \ = Course::where('slug',$slug)->first();\n\n    $courses_data = $courses->toArray();\n\
    \    $courses_data = array_map(function($course){\n        $course['course_image']\
    \ = CourseImage::where('course_id',$course['course_id'])->first()->toArray();\n\
    \        return $course;\n    },$courses_data);\n\n    $courses_data = array_map(function($course){\n\
    \        $course['course_image'] = array_map(function($course_image){\n      \
    \      $course_image['image_thumbnail'] = CourseImage::where('id',$course_image['id'])->first()->toArray();\n\
    \            return $course_image;\n        },$course['course_image']);\n    \
    \    return $course;\n    },$courses_data);\n\n    $courses_data = array_map(function($course){\n\
    \        $course['course_image'] = array_combine($course['course_image'],$course['course_image']);\n\
    \        return $course;\n    },$courses_data);\n\n    $courses_data = array_map(function($course){\n\
    \        $course['course_image'] = array_map(function($course_image){\n      \
    \      $course_image['image_default'] = CourseImage::where('id',$course_image['id'])->first()->toArray();\n\
    \            return $course_image;\n        },$course['course_image']);\n    \
    \    return $course;\n    },$courses_data);\n\n    $courses_data = array_map(function($course){\n\
    \        $course['course_image'] = array_map(function($course_image){\n      \
    \      $course_image['image_default'] = array_map(function($image_default){\n\
    \                $image_default", "  if (count($strings) == 0)\n    return null;\n\
    \  sort($strings);\n  $longest = current($strings);\n  foreach ($strings as $i\
    \ => $string) {\n    if (strlen($string) > strlen($longest))\n      $longest =\
    \ $string;\n  }\n  return $longest;\n}", "    if (!$strings) {\n        return\
    \ null;\n    }\n    $longest_length = strlen($strings[0]);\n    $max_length =\
    \ 0;\n    foreach ($strings as $string) {\n        $max_length = strlen($string)\
    \ > $max_length ? strlen($string) : $max_length;\n    }\n    for ($i = 0; $i <\
    \ $max_length; $i++) {\n        foreach ($strings as $string) {\n            if\
    \ ($i < strlen($string) && $string[$i] == $i) {\n                if ($i == strlen($string))\
    \ {\n                    return $strings[0];\n                }\n            \
    \    if (strlen($string) > $longest_length) {\n                    $longest_length\
    \ = strlen($string);\n                }\n                return $string;\n   \
    \         }\n        }\n    }\n    return null;\n}\n", "    sort($strings);\n\
    \    $length = strlen($strings[0]);\n    foreach ($strings as $key => $value)\
    \ {\n        $length = max($length, strlen($value));\n    }\n    return $length\
    \ > 1 ? substr($strings[0], 0, $length) : null;\n}\n", "    if (count($strings)\
    \ === 0) {\n        return null;\n    }\n\n    $longer = $strings[0];\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longer)) {\n\
    \            $longer = $string;\n        }\n    }\n\n    return $longer;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=php |>\nHere is a simpler solution without\
    \ using array_count_values and just looping through the array with a foreach loop.\n\
    <code>\n$counts = [];\nforeach ($myarray as $key=>$value) {\n    $counts[$value]++;\n\
    }\n$result = array_search(strlen(max($counts, key=function($count){return $count;})),\
    \ $counts);\n</code>\n$result is the key of the first largest array item found.\n\
    <|/ a dscore=1 |>\n<| a dscore=0 tags=php |>\n<code>", "  $longest = null;\n \
    \ foreach ($strings as $string) {\n    if (!$longest) {\n      $longest = $string;\n\
    \    } elseif (strlen($string) < strlen($longest)) {\n      $longest = $string;\n\
    \    }\n  }\n  return $longest;\n}", "    if (!$strings || count($strings) ==\
    \ 0) {\n        return null;\n    }\n    $max = null;\n    foreach ($strings as\
    \ $string) {\n        $maxlength = strlen($string);\n        if ($max === null\
    \ || $maxlength > $max) {\n            $max = $maxlength;\n        }\n    }\n\
    \    return $strings[array_search($max, $strings)];\n}\n", "    return array_reduce($strings,\
    \ function($previous, $current) {\n        $length = mb_strlen($current);\n  \
    \      return $previous === null\n            ? $length\n            : $length\
    \ < mb_strlen($previous)\n                ? $previous\n                : null;\n\
    \    });\n}\n", "  $longest = null;\n  $lengths  = [];\n\n  // Count the lengths\
    \ of each string\n  foreach ($strings as $string) {\n    $lengths[] = mb_strlen($string,\
    \ \"UTF-8\");\n  }\n\n  // Find the largest string in the array\n  for ($i = 0;\
    \ $i < count($lengths); $i++) {\n    if ($lengths[$i] > $length) {\n      $length\
    \ = $lengths[$i];\n    }\n  }\n\n  // Return largest string or null in case of\
    \ an empty array\n  return $length ? substr($longest, 0, $length) : null;\n}",
  "    return array_reduce(\n        $strings,\n        function ($carry, $string)\
    \ {\n            return max($carry, strlen($string));\n        }\n    );\n}\n",
  "  if (empty($strings)) {\n    return null;\n  }\n  $longest_len = strlen($strings[0]);\n\
    \  foreach ($strings as $string) {\n    $this_len = strlen($string);\n    if ($this_len\
    \ > $longest_len) {\n      $longest_len = $this_len;\n    }\n  }\n  return $longest_len;\n\
    }\n", "    if (empty($strings)) return null;\n    $longest_length = strlen(end($strings));\n\
    \    foreach ($strings as $string) {\n        $current_length = strlen($string);\n\
    \        if ($current_length > $longest_length) $longest_length = $current_length;\n\
    \    }\n    return reset($strings);\n}\n", "  $length = max(array_map('strlen',\
    \ $strings));\n  $longest = array_reduce($strings, function ($carry, $item) {\n\
    \    return max($carry, strlen($item));\n  }, $length);\n  return $longest ? $strings[$longest]\
    \ : null;\n}\n</code>\n<|/ a tags=sorting,arrays,php dscore=2 |>\n<| c |>\nYou\
    \ might want to use [array_reduce](http://php.net/array_reduce) instead of array_map.\n\
    <|/ c |>\n<| c |>\n: Why do you think it would matter?\n<|/ c |>\n<| c |>\n`array_reduce`\
    \ can perform a lot better on large arrays.\n<|/ c |>\n<| c |>\n: Do you have\
    \ a reference for the performance difference? I couldn't find anything on that...\n\
    <|/ c |>\n<| c |>\nFrom the [docs](http://php.net/array_reduce):\n\n> Note: As\
    \ of PHP 5.5.0 this function is deprecated when passing an\n> associative array.\
    \ Please use array_reduce() instead. \n> \n> On the other hand, since 5.5.0 an\
    \ E_WARNING level error is emitted instead\n> of a notice when the passed array\
    \ is not an associative array. \n\nSo I guess it depends on the version of PHP,\
    \ but yes, I think in general it's best to use array_reduce since it gives you\
    \ the best performance with large arrays.\n<|/ c |>\n<| a dscore=2 |>\nI usually\
    \ use this:\n<code>\n<?php\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $max_length = array_reduce($strings, function ($max_length, $string)\
    \ {\n        $max_length = max($max_length, strlen($string));\n        return\
    \ $max_length;\n    }, 0);\n    return reset($strings) ?: null;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>", "    if (count($strings) === 0) {\n     \
    \   return null;\n    }\n    $lengths = array();\n    $max_length = 0;\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if (!isset($lengths[$length]))\
    \ {\n            $lengths[$length] = 0;\n        }\n        $lengths[$length]++;\n\
    \        if ($length > $max_length) {\n            $max_length = $length;\n  \
    \      }\n    }\n    return $strings[$max_length];\n}\n</code>\n<|/ a tags=performance,php,string,algorithm\
    \ |>\n<| c |>\nJust for future reference, `array_count_values()` returns a `SplFixedArray`\
    \ which implements most of the array functions.\n<|/ c |>\n<| a dscore=2 |>\n\
    A bit of mathematical thinking and a slightly more advanced version of the accepted\
    \ answer by. \n(I added some more test cases in the code below too)\n<code>\n\
    <?php\n", "    if (empty($strings)) {\n        return null;\n    }\n    $lengths\
    \ = array_map(function($string) {\n        return strlen($string);\n    }, $strings);\n\
    \    asort($lengths);\n    return reset($lengths);\n}\n", "  // Return null if\
    \ $strings is empty\n  if (empty($strings)) {\n    return null;\n  }\n  // Return\
    \ longest string in array\n  $longest_length = 0;\n  $longest_string = \"\";\n\
    \  // Go through each string, find the longest and save it\n  foreach ($strings\
    \ as $string) {\n    if (strlen($string) > $longest_length) {\n      $longest_length\
    \ = strlen($string);\n      $longest_string = $string;\n    }\n  }\n  return $longest_string;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a |>\nYou can use this code \n<code>\n <?php\n\
    \      $arr = array(\"a b\", \"a c\", \"bb ccc\", \"ccc ddd\", \"aaa\");\n   \
    \   $longest = array_shift(array_map('strlen',$arr));\n      echo $longest;\n\
    \ ?>\n</code>\n<|/ a tags=arrays,php,string dscore=0 |>\n<| c |>\nYou should explain\
    \ what your code does, otherwise your answer will be voted down and deleted.\n\
    <|/ c |>\n<| c |>\narray_shift() is used to retrieve the first element of an array\
    \ and array_map() is used to apply a function to every element of an array\n<|/\
    \ c |>\n<| a tags=arrays,php,string |>\nFor PHP 5.3 or older:\n<code>", "    if\
    \ (empty($strings)) {\n        return null;\n    }\n\n    // Keep track of longest\
    \ string\n    $longest = $strings[0];\n    foreach ($strings as $s) {\n      \
    \  $length = strlen($s);\n        if ($length > strlen($longest)) {\n        \
    \    $longest = $s;\n        }\n    }\n    return $longest;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 tags=php,algorithm |>\nI like using array_reduce.\
    \  I like using foreach for side effects instead of for loops because it feels\
    \ more functional to me.  But array_reduce is a very handy little function that\
    \ I haven't seen before, so I think I'll use it.\n<code>\n$longest = array_reduce($strings,\
    \ function($a,$b){\n    return strlen($b) > strlen($a) ? $b : $a;\n});\n</code>\n\
    I should add that this is probably a really bad example to use in production code,\
    \ but it does show how the algorithm can be expressed with array_reduce.\n<|/\
    \ a |>\n<| a tags=php,algorithm |>\nI've also written a short function that does\
    \ the same:\n<code>", "    if (empty($strings)) {\n        return null;\n    }\n\
    \n    // We sort the array by length to get the longest strings first.\n    usort($strings,\
    \ function ($a, $b) {\n        return strlen($a) - strlen($b);\n    });\n\n  \
    \  return $strings[0];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nYou can\
    \ use array_map() with array_sum() to get number of characters of any character\
    \ set you want. \n<code>\n$str = array();\n$str[] = \"Hello\";\n$str[] = \"Good\
    \ morning\";\n$str[] = \"I'm fine\";\n", "\tif (!$strings || count($strings) ===\
    \ 0) {\n\t\treturn null;\n\t}\n\n\t$longest = array_reduce($strings, function($longest,\
    \ $string) {\n\t\treturn strlen($string) > strlen($longest) ? $string : $longest;\n\
    \t});\n\n\treturn count($strings) === 1 ? $longest : $longest[0];\n}\n", "   \
    \ if (empty($strings)) {\n        return null;\n    }\n    $lengths = array_map(function\
    \ ($str) { return mb_strlen($str); }, $strings);\n    return array_reduce($lengths,\
    \ function ($max, $length) { return max($max, $length); }, 0);\n}\n\n/**\n * Converts\
    \ a string into all uppercase.\n */", "    if (!empty($strings)) { return max($strings);\
    \ }\n    return null;\n}\n</code>\n<|/ a tags=string,function,php,arrays |>\n\
    <| a tags=string,function,php,arrays |>\narray_map() will be the best to go for\
    \ this. \n<code>\n$stringArray = array(\"a\",\"b\",\"c\");\n$longestStringLength\
    \ = array_map('strlen', array_filter($stringArray));\n$longestStringLength = array_shift($longestStringLength);\n\
    \necho \"Longest string is: \" . $longestStringLength;\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI agree with this answer, array_map should be used over max().\n\
    <|/ c |>\n<| a dscore=1 |>\nHere is another way of doing this:\n<code>\n$strings\
    \ = array(\"a\", \"b\", \"c\", \"d\", \"\", null);\n$longest = $strings[0];\n\
    foreach ($strings as $s) {\n    $len = strlen($s);\n    if ($len > strlen($longest))\
    \ {\n        $longest = $s;\n    }\n}\n</code>\nThis has the advantage of not\
    \ requiring any additional functions/libraries.  Also, it does not create unnecessary\
    \ intermediate arrays and so can be used in a for loop or any loop structure that\
    \ iterates over arrays.\n<|/ a tags=string,function,php,arrays |>\n<| a tags=string,function,php,arrays\
    \ |>\n<code>\n$array= array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\");\n    $array2\
    \ = array();\n    for($i = 0; $i < count($array); $i++)\n    {\n        $array2[$i]\
    \ = strlen($array[$i]);\n    }\n    $longest = max( $array2 );\n    echo $longest;\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=string,function,php,arrays |>\nI tried to\
    \ make something like that\n<code>\n<?php", "    if (!$strings)\n        return\
    \ null;\n\n    $length = count($strings);\n    if ($length == 0)\n        return\
    \ null;\n\n    $max_length = 0;\n    $max_length_string = null;\n    $length_of_string\
    \ = count($strings[0]);\n\n    foreach ($strings as $string) {\n        $str_length\
    \ = count($string);\n\n        if ($str_length > $max_length) {\n            $max_length\
    \ = $str_length;\n            $max_length_string = $string;\n        }\n    }\n\
    \n    return $max_length_string;\n}\n</code>\n<|/ a tags=arrays,string,php |>\n\
    <| c |>\nThe question stated that the strings are in order. So, I guess you mean\
    \ `$strings = array('cat', 'dog', 'cat', 'cat', 'dog')`, then your answer would\
    \ be \"cat\".\n<|/ c |>\n<| a dscore=0 |>\nIf all strings are in order, you can\
    \ use something like:\n<code>\n$strings = array('cat', 'dog', 'cat', 'cat', 'dog');\n\
    \nif (strpos($strings[0], 'cat') !== false)\n    // do something\n</code>\n<|/\
    \ a tags=arrays,string,php |>\n<| c |>\nSorry, I should have stated that they\
    \ are not in order. I'll update my question.\n<|/ c |>\n<| c |>\nThe question\
    \ stated that the strings are in order. So, I guess you mean `$strings = array('cat',\
    \ 'dog', 'cat', 'cat', 'dog')`, then your answer would be \"cat\".\n<|/ c |>\n\
    <| c |>\n: Ah, I see. Yes, the original code was wrong. Sorry.\n<|/ c |>\n<| c\
    \ |>\n: Yeah, I see that now. Sorry.\n<|/ c |>\n<| a dscore=0 tags=arrays,string,php\
    \ |>\nJust to share a solution I came up with:\n<code>\n<?php", "  $max_len =\
    \ -1;\n  $max_str = null;\n  foreach ($strings as $str) {\n    $len = mb_strlen($str);\n\
    \    if ($len > $max_len) {\n      $max_len = $len;\n      $max_str = $str;\n\
    \    }\n  }\n  return $max_str;\n}\n", "    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (is_null($longest) || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = $strings[0];\n    $shortest = 0;\n    if (count($strings)\
    \ === 0) {\n        return null;\n    }\n    foreach ($strings as $string) {\n\
    \        $length = (strlen($string));\n        if ($length < $shortest || $shortest\
    \ == 0) {\n            $longest = $string;\n            $shortest = $length;\n\
    \        } else {\n            if ($length == $shortest) {\n                $longest\
    \ = $string;\n            }\n        }\n    }\n    return $longest;\n}", "   \
    \ if (empty($strings))\n        return null;\n    $max = array_reduce($strings,\
    \ function ($carry, $item) {\n        $new_len = strlen($item);\n        if ($new_len\
    \ > strlen($carry))\n            return $item;\n        return $carry;\n    });\n\
    \    return $max;\n}\n", "    $maxLength = null;\n    foreach ($strings as $s)\
    \ {\n        $length = strlen($s);\n        if ($maxLength === null || $length\
    \ > $maxLength) {\n            $maxLength = $length;\n        }\n    }\n    return\
    \ $maxLength === null ? null : $maxLength;\n}\n</code>\n<|/ a tags=php,arrays,string,sorting\
    \ |>\n<| c |>\nGreat answer. Thank you for sharing your ideas!\n<|/ c |>\n<| a\
    \ |>\nJust a little improvement on answer with sorting and filtering using array_filter()\
    \ and array_merge(). Just thought of sharing since i was looking for an answer\
    \ of this type but i didnt find it any where else. Hope this helps\n<code>", " \
    \   if (!$strings) {\n        return null;\n    }\n\n    // Return longest string\
    \ in input array (may be null, in case it only contains empty strings)\n    $longest\
    \ = array_reduce($strings, function ($a, $b) {\n        $a = strlen($a) > strlen($b)\
    \ ? $a : $b;\n        return $a;\n    });\n\n    if (empty($longest)) {\n    \
    \    return null;\n    }\n\n    return $longest;\n}\n", "    if (!$strings ||\
    \ count($strings) == 0) return null;\n\n    $max = null;\n    $count = null;\n\
    \    foreach ($strings as $s) {\n        if ($count === null) {\n            $count\
    \ = $s;\n            $max = $s;\n        } elseif (strlen($s) <= strlen($count))\
    \ {\n            $count = $s;\n            $max = $s;\n        }\n    }\n\n  \
    \  return $max;\n}\n", "    if (!$strings) {\n        return null;\n    }\n\n\
    \    if (!is_array($strings)) {\n        return null;\n    }\n\n    // Find the\
    \ longest one\n    $max_length = 0;\n    $max_length_found = false;\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if (!$max_length_found\
    \ || $length < $max_length) {\n            $max_length = $length;\n          \
    \  $max_length_found = true;\n        }\n    }\n    return $strings[$max_length_found\
    \ ? $max_length : 0];\n}\n", "    if (count($strings) < 1) {\n        return null;\n\
    \    }\n    $max = max(array_map(function($str) {\n            return strlen($str);\n\
    \        }, $strings));\n    return $strings[array_search(max($max), $strings)];\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n\n    $longest\
    \ = null;\n    $length = strlen(max($strings));\n\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length === $longest) {\n\
    \            return $string;\n        }\n\n        if ($length > $longest) {\n\
    \            $longest = $length;\n        }\n    }\n\n    return null;\n}\n</code>\n\
    <|/ a tags=regex,arrays,php,string dscore=0 |>\n<| c |>\nI dont want a global\
    \ variable, i want one for each string. i need to count the characters, not just\
    \ count how many times they are in the array.\n<|/ c |>\n<| c |>\nYou want a count\
    \ of how many times the string appears in the array?\n<|/ c |>\n<| c |>\nthe string\
    \ \"aaa\" is repeated 4 times in the array so i want to count the characters in\
    \ each array element as 4 not just how many times they appear in the array.\n\
    <|/ c |>\n<| a |>\nThis may be what you are looking for. Basically just use the\
    \ php function count and pass the array to it. \n<code>\n<?php\n$myArray = array(\"\
    aaa\", \"bbb\", \"ccc\", \"aaa\");\n\necho count($myArray);", "  if (empty($strings))\
    \ return null;\n\n  $max = null;\n  $length = 0;\n\n  foreach ($strings as $string)\
    \ {\n    $length += mb_strlen($string, 'utf-8');\n    if ($max === null || $length\
    \ >= $max) {\n      $max = $length;\n    }\n  }\n\n  return $max === null ? 'null'\
    \ : $strings[$max];\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n\n    $longest = array_reduce($strings, function($max, $item) {\n    \
    \    return max($max, strlen($item));\n    });\n    return empty($longest) ? null\
    \ : $longest;\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\n$array = array('this', 'is',\
    \ 'a', 'test');\n\necho max(array_map('strlen', $array)); //returns 13\n</code>\n\
    <|/ a tags=arrays,max,php dscore=2 |>\n<| a |>\nJust for fun:\n<code>\n$array\
    \ = [1, 2, 3, 6, 7, 8, 9];\n$max = max($array);\n$min = min($array);\n$mid = array_sum($array)\
    \ / count($array);\n\necho \"Max: \" . $max;\necho \"Min: \" . $min;\necho \"\
    Mid: \" . $mid;\n</code>\n<|/ a dscore=2 tags=arrays,max,php |>\n<| c |>\nThis\
    \ doesn't give me the midpoint though.\n<|/ c |>\n<| c |>\nIt does, just not in\
    \ the context of the original question.\n<|/ c |>\n<| c |>\nWell, OP hasn't provided\
    \ any context for the midpoint. He just says _the longest str_ and then you say\
    \ _The midpoint of the strings is 4._, which is what my answer gives you.\n<|/\
    \ c |>\n<| c |>\nThis answer gives you the middle element, but not the midpoint.\n\
    <|/ c |>\n<| a dscore=1 |>\nAs others have said, just use max, min and array_sum.\
    \ \n<code>\n$array = array('this', 'is', 'a', 'test');\n\n$max = max($array);\n\
    $min = min($array);\n$mid = array_sum($array) / count($array);\n</code>\n<|/ a\
    \ tags=arrays,max,php |>\n<| c |>\nThis is very nice. Is there a way to make it\
    \ work for an array of non-integer values?\n<|/ c |>\n<| a |>\n<code>\n$array\
    \ = array('this', 'is', 'a', 'test');\n\n$max = max($array);\n$min = min($array);\n\
    $mid = array_sum($array) / count($array);\n</code>\n<|/ a dscore=1 tags=arrays,max,php\
    \ |>\n<| a |>\n<code>\n$arr1 = array(\"a\", \"b\", \"c\");\n$arr2 = array(\"a\"\
    , \"bb\", \"ccc\");\n\n$maxLength = max(array_map('strlen', $arr1)); // gives ",
  "    foreach ($strings as $string) {\n        if (mb_strlen($string) == strlen($string))\
    \ {\n            return $string;\n        }\n    }\n    return null;\n}\n", " \
    \   if (empty($strings)) {\n        return null;\n    }\n\n    $length = count($strings);\n\
    \    $longest = array();\n    $found = false;\n\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        $s = $strings[$i];\n        if (!$found && mb_strlen($s) >\
    \ $length) {\n            $found = true;\n            $longest = $s;\n       \
    \     continue;\n        } elseif ($found && !mb_strlen($s) == mb_strlen($longest))\
    \ {\n            $found = false;\n        } else {\n            $longest = trim($longest,\
    \ ' ');\n            $longest = trim($longest, \" \");\n            if (!mb_strlen($longest))\
    \ {\n                return null;\n            }\n            break;\n       \
    \ }\n    }\n\n    return $longest;\n}\n", "    $max = null;\n    $first = null;\n\
    \    foreach ($strings as $string) {\n        if ($max === null || strlen($string)\
    \ > strlen($max)) {\n            $max = $string;\n            $first = $string;\n\
    \        } else if (strlen($string) == strlen($max)) {\n            $first = $string;\n\
    \        }\n    }\n    return $first;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    Very good solution! But if you have an array with 3 or more elements, it will\
    \ return the first element of the array, not the last one. Example: array(\"a\"\
    ,\"b\",\"c\") will return \"a\", not \"c\".\n<|/ c |>\n<| a dscore=3 |>\n<code>",
  "    $max = null;\n    $longest = null;\n\n    foreach ($strings as $string) {\n\
    \        if ($string.length() > strlen($max)) {\n            $longest = $string;\n\
    \            $max = $string.length();\n        } else if ($string.length() ===\
    \ strlen($max)) {\n            $longest = $string;\n        }\n    }\n\n    return\
    \ $longest ?: null;\n}\n</code>\n<|/ a tags=php |>\n<| a |>\nA general function\
    \ for this could be:\n<code>", "    if (empty($strings)) return null;\n    $max\
    \ = count($strings);\n    foreach ($strings as $key => $value) {\n        if (strlen($value)\
    \ > $max) {\n            $max = $key;\n        }\n    }\n    return $max > 1 ?\
    \ $strings[$max] : $strings[0];\n}\n", "\tif (!$strings) return null;\n\t$length\
    \ = max(count($strings), 1);\n\tforeach ($strings as $key => $string) {\n\t\t\
    if ($length > strlen($string)) return $key;\n\t}\n\treturn null;\n}\n", "    if\
    \ (!$strings) {\n        return null;\n    }\n    return max($strings);\n}\n",
  "    $maxLength = 0;\n    $maxString = null;\n    foreach($strings as $string) {\n\
    \        if(strlen($string) > $maxLength) {\n            $maxLength = strlen($string);\n\
    \            $maxString = $string;\n        }\n    }\n    return $maxString;\n\
    }\n</code>\n<|/ a tags=php,laravel,laravel-4,laravel-routing |>\n<| c |>\nThis\
    \ does not seem to work with the way routes are set up in Laravel 4. Instead of\
    \ returning the last string, the function seems to return the first (which is\
    \ not the desired behavior). For example, I have a route set up that looks like\n\
    `Route::get('/test', array('as' => 'test', function(){ return 'test';}));` I would\
    \ expect this route to return 'test', but it is returning the string 'test' instead.\n\
    <|/ c |>\n<| c |>\nThe `longest` function only returns the longest string in the\
    \ array. Try this example to see what I mean:\n`Route::get('test', function(){\
    \ return 'test'; });\n\nRoute::get('test2', function(){ return 'test2'; });\n\
    Route::get('test3', function(){ return 'test3'; });\n\nRoute::get('test4', function(){\
    \ return 'test4'; });\n\nRoute::get('test5', function(){ return 'test5'; });\n\
    \nRoute::get('test6', function(){ return 'test6'; });\n\nRoute::get('test7', function(){\
    \ return 'test7'; });\n\nRoute::get('test8', function(){ return 'test8'; });\n\
    \nRoute::get('test9', function(){ return 'test9'; });\n\nRoute::get('test10',\
    \ function(){ return 'test10'; });\n`\n\nThe routes above will return \"test9\"\
    , which is the longest string.\n<|/ c |>\n<| c |>\nYou are correct, I was mistaken,\
    \ sorry for my unclarity\n<|/ c |>\n<| a dscore=1 tags=php,laravel,laravel-4,laravel-routing\
    \ |>\nThis should do it\n<code>\nRoute::get('/test/{one}', function($one){\n \
    \   $routes = explode('/', $_SERVER['REQUEST_URI']);\n    $routes[count($routes)-1]\
    \ = $one;\n    return URL::to($routes);\n});\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ answer also didn't work for me, it would still return the first (longest) string.\
    \ I ended up writing a custom route to match a path variable that would match\
    \ multiple strings anywhere in the URL. ", "    if (!$strings)\n        return\
    \ null;\n    $max = array();\n    foreach ($strings as $string) {\n        if\
    \ (strlen($string) > strlen(max($max)))\n            $max = array($string);\n\
    \        else if (strlen($string) < strlen(max($max)))\n            $max[] = $string;\n\
    \    }\n    return count($max) === 1 ? max($max) : null;\n}\n", "    $longest\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $longest) {\n            $longest = $length;\n        }\n\
    \    }\n    return ($longest > 0) ? $strings[$longest] : null;\n}\n", "  return\
    \ max(array_map(function ($s) {\n    return strlen($s);\n  }, $strings)) ?? null;\n\
    }\n", "    return max(array_map('mb_strlen', array_reverse($strings)));\n}\n",
  "    $lengths = array_map(function ($s) { return strlen($s); }, $strings);\n   \
    \ return max($lengths);\n}\n", "    if (!count($strings)) {\n        return null;\n\
    \    }\n    $longest = array();\n    foreach ($strings as $string) {\n       \
    \ $length = strlen($string);\n        if ($length > count($longest)) {\n     \
    \       $longest = $string;\n        } elseif ($length == count($longest)) {\n\
    \            if ($length > strlen($longest)) {\n                $longest = $string;\n\
    \            }\n        }\n    }\n    return $longest;\n}\n", "\tif (!$strings)\
    \ {\n\t\treturn null;\n\t}\n\tif (!is_array($strings)) {\n\t\tthrow new Exception('Expected\
    \ an array of strings');\n\t}\n\tforeach ($strings as $s) {\n\t\t$length = strlen($s);\n\
    \t\tif ($length > strlen($longest)) {\n\t\t\t$longest = $s;\n\t\t}\n\t}\n\treturn\
    \ $longest;\n}\n\n/**\n * Strip all HTML tags from an HTML string\n *\n * @param\
    \ string $html\n * @return string\n */", "  if (empty($strings)) {\n    return\
    \ null;\n  }\n  $max_length = 0;\n  $longest = \"\";\n  foreach ($strings as $string)\
    \ {\n    $length = mb_strlen($string, \"UTF-8\");\n    if ($length > $max_length)\
    \ {\n      $longest = $string;\n      $max_length = $length;\n    } else if ($length\
    \ == $max_length) {\n      $longest = $string . $longest;\n    }\n  }\n  return\
    \ $longest;\n}\n", "  if (!count($strings)) return null;\n  $max = 0;\n  $longest\
    \ = null;\n  foreach ($strings as $string) {\n    if (strlen($string) > $max)\
    \ {\n      $max  = strlen($string);\n      $longest = $string;\n    }\n  }\n \
    \ return $longest;\n}\n", "    if (!$strings) {\n        return null;\n    }\n\
    \    if (count($strings) === 0) {\n        return null;\n    }\n    $max_length\
    \ = -1;\n    $max_length_string = null;\n    foreach ($strings as $string) {\n\
    \        if (strlen($string) > $max_length) {\n            $max_length = strlen($string);\n\
    \            $max_length_string = $string;\n        }\n    }\n    return $max_length_string;\n\
    }\n", "    $longest = null;\n    $max_length = -1;\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > $max_length) {\n            $longest = $string;\n\
    \            $max_length = strlen($string);\n        }\n    }\n    return $longest\
    \ ?: null;\n}\n</code>\n<|/ a dscore=5 tags=arrays,php |>\n<| c |>\nHmm, I am\
    \ confused because this seems to me a more straight forward solution.  It seems\
    \ to me that array_walk is much more straight forward than array_filter and array_reduce.\n\
    <|/ c |>\n<| c |>\nIt's not more straight forward, it's more efficient in terms\
    \ of memory, because array_walk doesn't copy the array while filtering does.\n\
    <|/ c |>\n<| c |>\nI like the idea of using array_walk, but in my case the arrays\
    \ are huge (over 1000+ elements) and my array_walk call is taking over 30 seconds\
    \ to complete.  Any suggestions for how to optimize this?\n<|/ c |>\n<| c |>\n\
    The code above is still very efficient. Try to use `array_map` instead of `array_reduce`\
    \ if you can. See [this question](http://stackoverflow.com/questions/10447754/php-performance-for-using-reduce-vs-map)\n\
    <|/ c |>\n<| c |>\nIf your arrays are HUGE and you call `array_map` very frequently,\
    \ then you might want to look into [using xdebug](http://xdebug.org) to profile\
    \ the code. The bottleneck might well be somewhere else.\n<|/ c |>\n<| a tags=arrays,php\
    \ dscore=5 |>\nI've been using this:\n<code>", "    $longest = null;\n\n    foreach\
    \ ($strings as $string) {\n        if ($longest !== null && strlen($string) >\
    \ strlen($longest)) {\n            return null;\n        }\n        $longest =\
    \ $string;\n    }\n\n    return $longest;\n}\n", "    return !empty($strings)\
    \ ? max(array_map(\"strlen\", $strings)) : null;\n}\n</code>\n<|/ a tags=string,arrays,php\
    \ |>\n<| c |>\nI believe you meant `!empty($strings)` instead of `!is_null($strings)`.\n\
    <|/ c |>\n<| c |>\nThanks for your help! :)\n<|/ c |>\n<| a |>\nIf you're only\
    \ wanting the longest string, try this:\n<code>\n$longest = max((array)array_map(\"\
    strlen\", $strings));\n</code>\nIt may have a performance hit depending on the\
    \ size of the array, so you may want to benchmark your code to see if it works\
    \ out for you.\n<|/ a dscore=3 tags=string,arrays,php |>\n<| a tags=string,arrays,php\
    \ |>\nYou can use array_filter and array_map functions together:\n<code>\n$array\
    \ = array('first', 'second', 'third', 'fourth');\n$filtered = array_filter($array,\
    \ function($str) {\n    return strlen($str) >= 3; \n});\n\n$longest_string = max(array_map(function($str)\
    \ {\n    return strlen($str); \n}, $filtered));\n\nvar_dump($filtered);\nvar_dump($longest_string);\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nI do not want to use any loops. Thanks anyway\
    \ :)\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php", "    // If the array is empty,\
    \ return null\n    if (!is_array($strings)) return null;\n\n    // Create array\
    \ from $strings\n    $arr = array_map(function ($s) {\n        return $s;\n  \
    \  }, $strings);\n\n    // Get the longest string length\n    $maxLen = array_reduce($arr,\
    \ function ($carry, $str) {\n        return max($carry, mb_strlen($str));\n  \
    \  }, 0);\n\n    // If there's a tie, return the first one\n    if (count($arr)\
    \ > count(array_unique($arr))) {\n        return reset($arr);\n    } else {\n\
    \        return null;\n    }\n}\n</code>\nTo use the above, first require the\
    \ above file into a file and then use it, like this\n<code>\n<?php\n", "    if\
    \ (empty($strings)) {\n        return null;\n    }\n    // Sort strings descending\n\
    \    sort($strings, SORT_STRING);\n    // Get the longest string\n    $longest\
    \ = array_pop($strings);\n    // If there are any strings, return it\n    if ($strings)\
    \ {\n        return $longest;\n    }\n    // All is good\n    return null;\n}\n\
    </code>\n<|/ a dscore=0 tags=php |>\n<| c |>\nThank you! The code works, but it\
    \ still doesn't get the correct value. \n\nIt should return \"ccc\" but returns\
    \ \"bbb\".\n\nI hope someone can help me with this :)\n<|/ c |>\n<| c |>\n, do\
    \ you get correct value in `var_dump($strings)`?\n<|/ c |>\n<| c |>\nYes, it is\
    \ correct, \n\narray (size=2)\n  0 => string 'aaa' (length=3)\n  1 => string 'bbb'\
    \ (length=3)\n\nBut the function still returns \"bbb\".\n<|/ c |>\n<| c |>\n,\
    \ do you get correct value in `var_dump(longest($strings))`?\n<|/ c |>\n<| c |>\n\
    Yes, it is correct, \n\narray (size=2)\n  0 => string 'aaa' (length=3)\n  1 =>\
    \ string 'bbb' (length=3)\n\nBut the function still returns \"bbb\".\n\nI hope\
    \ someone can help me with this :)\n<|/ c |>\n<| a tags=php |>\nYou should use\
    \ usort() function.\n<code>\n<?php\n\n$array = [\n    'aaa', 'bbb', 'ccc', 'ddd'\n\
    ];\n\nusort($array, 'mycmp');\n\nvar_dump($array);\n", "    if (empty($strings))\n\
    \        return null;\n    $length = count($strings);\n    $longest_length = null;\n\
    \    for ($i = 0; $i < $length; $i++)\n        if ($longest_length < strlen($strings[$i]))\n\
    \            $longest_length = strlen($strings[$i]);\n    return $longest_length\
    \ > strlen($longest_length) ? $longest_length : null;\n}\n\n$max = $_GET['max'];\n\
    $min = $_GET['min'];\n$output = $_GET['output'];\n\n$sql = mysql_query(\"SELECT\
    \ * FROM table WHERE field = '$field' AND number = '$number' AND price = '$price'\
    \ AND date = '$date' AND price = '$price' AND number = '$number'\");", "    return\
    \ end($strings) === \"\" ? null : end(array_keys($strings) ?: 0);\n}\n", "   \
    \ $result = null;\n\n    $sorted = array_map(\"strlen\", $strings);\n    sort($sorted);\n\
    \    $len = array_shift($sorted);\n\n    foreach ($sorted as $string) {\n    \
    \    if ($len < strlen($string)) {\n            $result = $string;\n         \
    \   $len   = strlen($string);\n        }\n    }\n\n    return $result;\n}\n",
  "    if (empty($strings)) {\n        return null;\n    }\n\n    // Get longest string\n\
    \    $longest_string = array_reduce($strings, function ($max, $str) {\n      \
    \  return strlen($max) === 0 ? strlen($str) : strlen($max) > strlen($str) ? $max\
    \ : $str;\n    });\n\n    // Return longest string in case it's longer than all\n\
    \    return count($strings) > 1 ? $longest_string : null;\n}\n", "  if (!$strings)\n\
    \    return null;\n\n  $longest = array_reduce($strings, function($result, $string)\
    \ {\n    return strlen($string) > strlen($result) ? $string : $result;\n  });\n\
    \n  return $longest == 1 ? $strings[0] : $longest;\n}\n</code>\n<|/ a tags=javascript,arrays,php\
    \ |>\n<| c |>\nThis doesn't seem to work for me. `longest` returns nothing for\
    \ me (as long as the array is empty).\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ fine for me (also if the array is empty as you stated). Are you sure you're\
    \ testing this correctly and that you're not getting any errors?\n<|/ c |>\n<|\
    \ c |>\nOh, I see what happened. The code is indeed correct, but my data is bad.\
    \ I will try to fix it.\n<|/ c |>\n<| a tags=javascript,arrays,php |>\nTry array_reduce:\n\
    <code>\n$max = \"0\";\n$maxStr = \"\";\n$res = array_reduce($array, function($carry,\
    \ $item) {\n   if (strlen($item) > strlen($carry)) {\n        $carry = $item;\n\
    \   } else if (strlen($carry) > strlen($item)) {\n        $carry = $item;\n  \
    \ }\n   return $carry;\n}, $max);\nvar_dump($res);\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=javascript,arrays,php dscore=0 |>\nTry this: \n<code>", "    $length\
    \ = array_reduce($strings, function ($carry, $string) {\n        return max($carry,\
    \ strlen($string));\n    });\n\n    return $length == 0\n        ? null\n    \
    \    : $strings[array_search(max($length), $strings)];\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=longest-substring,php,arrays,string dscore=0 |>\n<code>\n<?php\n\
    $str='abc 123 123 abc 123 123';\n$arr=explode(' ',$str);\n$newArr=array();\nforeach($arr\
    \ as $k=>$v){\n    foreach($v as $k1=>$v1){\n        if(isset($newArr[$k1])){\n\
    \            $newArr[$k1]=strlen($v1);\n        }else{\n            $newArr[$k1]=strlen($v);\n\
    \        }\n    }\n}\necho max($newArr);\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$str=file_get_contents(\"test.txt\");\n$arr=explode(\" \",$str);\n\
    $newArr=array();\nforeach($arr as $k=>$v){\n    foreach($v as $k1=>$v1){\n   \
    \     if(isset($newArr[$k1])){\n            $newArr[$k1]=strlen($v1);\n      \
    \  }else{\n            $newArr[$k1]=strlen($v);\n        }\n    }\n}\necho max($newArr);",
  "    $longest = null;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($longest == null || $length < strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest = \"\
    \";\n    $string_length = strlen($strings[0]);\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $string_length)\
    \ {\n            $longest = $string;\n            $string_length = $length;\n\
    \        }\n    }\n\n    return ($longest != \"\") ? $longest : null;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nAh, that looks good. I'll be using that in a future\
    \ project I'm doing. I'm currently trying to solve this with a recursive function,\
    \ but I can't get it to work without errors. Thanks for the answer!\n<|/ c |>\n\
    <| a tags=php,arrays dscore=0 |>\n<code>\n$arr = array(\"as\", \"bb\", \"ccc\"\
    , \"ddd\", \"eee\", \"fff\");\n\n$longest = longest($arr);\necho \"Longest string:\
    \ \".$longest;\n", "    if (empty($strings)) return null;\n    $max = array_reduce($strings,\
    \ function ($max, $string) {\n        return strlen($string) > strlen($max) ?\
    \ $string : $max;\n    }, 0);\n    return in_array($max, $strings) ? $max : null;\n\
    }\n", "    if (!$strings) return null;\n    $length = -1;\n    foreach ($strings\
    \ as $s) {\n        if ($length < strlen($s)) {\n            $length = strlen($s);\n\
    \        }\n    }\n    return $length ? $strings[$length - 1] : null;\n}\n</code>\n\
    <|/ a |>\n<| a tags=php,arrays |>\nAnother variation on another similar question,\
    \ with a different definition of longest:\n<code>\n/**\n * Returns the longest\
    \ value in a list, by comparison\n *\n * $list An array of values to compare\n\
    \ * mixed $default The value returned in case all values fail to compare\n * int\
    \ The index of the longest value\n */", "    if (empty($strings)) {\n        return\
    \ null;\n    }\n    $longest_string = max($strings, function ($string) {\n   \
    \     return strlen($string);\n    });\n    $longest_string_length = strlen($longest_string);\n\
    \    foreach ($strings as $string) {\n        $string_length = strlen($string);\n\
    \        if ($string_length < $longest_string_length) {\n            $longest_string\
    \ = $string;\n            $longest_string_length = $string_length;\n        }\n\
    \    }\n    return $longest_string;\n}\n", "    $lengths = array_map(function($s)\
    \ { return strlen($s); }, $strings);\n    $max_length = array_reduce($lengths,\
    \ function($a, $b) {\n        return $a > $b ? $a : $b;\n    });\n    foreach\
    \ ($strings as $i => $string) {\n        if ($lengths[$i] == $max_length) {\n\
    \            return $strings[$i];\n        }\n    }\n    return null;\n}\n", " \
    \   if (empty($strings)) {\n        return null;\n    }\n\n    $lengths = array();\n\
    \    foreach ($strings as $string) {\n        $length = mb_strlen($string);\n\
    \        if (isset($lengths[$length])) {\n            $lengths[$length] = max($lengths[$length],\
    \ $string);\n        } else {\n            $lengths[$length] = $string;\n    \
    \    }\n    }\n\n    return current(array_filter($lengths, function($value) {\n\
    \        return $value !== null;\n    }));\n}\n", "  if (count($strings) == 0)\
    \ {\n    return null;\n  }\n  $maxLen = 0;\n  $longestString = null;\n  foreach\
    \ ($strings as $string) {\n    $len = strlen($string);\n    if ($len > $maxLen)\
    \ {\n      $maxLen = $len;\n      $longestString = $string;\n    }\n  }\n  return\
    \ $longestString;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        $len = strlen($string);\n        if ($len > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}",
  "    if(!$strings) {\n        return null;\n    }\n    $longest = array();\n   \
    \ foreach($strings as $string) {\n        $longest = $string != '' ? max($longest,\
    \ $string) : $longest;\n    }\n    return $longest;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\nHow about this:\n<code>\n$strings = array('a', 'bb', 'ccc', '');\n\
    echo max(array_map(function($string) { return strlen($string); }, $strings));\n\
    </code>\n<|/ a dscore=1 tags=arrays,php,string |>\n<| c |>\nYes, this works. But\
    \ it just doesn't feel right. It seems like it would be better to put the `strlen`\
    \ into its own function and return a boolean indicating whether the string was\
    \ empty or not. But the OP asked for another solution so I went with this.\n<|/\
    \ c |>\n<| c |>\nYeah, it just feels weird. `strlen` already returns either a\
    \ string or false if it's empty. I'd just stick with it because it's shorter,\
    \ but thanks for the suggestion.\n<|/ c |>\n<| c |>\nIt does feel wrong. It's\
    \ because you're not returning a boolean - you're returning the length of the\
    \ string.\n<|/ c |>\n<| c |>\nI agree. Although, in this case, it's shorter and\
    \ easier to read, I think. :D\n<|/ c |>\n<| c |>\nBut why not make it a function,\
    \ like suggested? It feels wrong to put a function in a loop - that's what functions\
    \ are for. :D\n<|/ c |>\n<| a dscore=1 |>\nA better way for me would be using\
    \ array_filter\n<code>\n$a = array(\"a\", \"bb\", \"ccc\", \"\");\n$maxLength\
    \ = max(array_map('strlen', $a));\n$result = array_filter($a, function($value)\
    \ use($maxLength) { return strlen($value) == $maxLength; });\n</code>\n<|/ a tags=arrays,php,string\
    \ |>\n<| a tags=arrays,php,string |>\n<code>\n$strings = array(\"a\", \"bb\",\
    \ \"ccc\", \"\");\n$max = max(array_map('strlen', $strings));\n$emptyStrings =\
    \ array_filter($strings, function($v) use ($max) {\n    return strlen($v) ===\
    \ $max;\n});\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php,string |>\n<code>\n\
    $strings = array(\"a\", \"bb\", \"ccc\", \"hello\");", "    if (empty($strings))\
    \ {\n        return null;\n    }\n\n    $longest = count($strings[0]) > 0 ? strlen(max($strings))\
    \ : 0;\n    foreach ($strings as $string) {\n        if (strlen($string) > $longest)\
    \ {\n            $longest = strlen($string);\n        }\n    }\n    return $longest\
    \ ? $strings[0] : null;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nHere is a simple\
    \ PHP solution:\n<code>\n$words = preg_split('/[\\s,]+/', $string);\n$max = max($words);\n\
    if ($max == $words[0]) {\n    // If all words have the same length\n    $word\
    \ = $words[0];\n} else {\n    // Otherwise find the longest one and replace it\
    \ in the array\n    $max = $words[array_search($max, $words)];\n    $word = str_replace($max,\
    \ \"\", $string);\n}\n</code>\nIf you want the word length to be dynamic you can\
    \ change the $max variable.\n<|/ a tags=php dscore=1 |>\n<| a tags=php |>\n<code>\n\
    $str=str_replace(',','',$string);\n$chars=strlen($str);\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThat will only get the length of the string without spaces. What\
    \ about the length of the longest word?\n<|/ c |>\n<| c |>\nOh yeah, I thought\
    \ that too. Sorry\n<|/ c |>\n<| a |>\nI believe this should work, assuming you\
    \ have an array of strings of unknown length:\n<code>\n$arrayOfStrings = array();",
  "  if (empty($strings)) {\n    return null;\n  }\n\n  $maxLength = 0;\n  $longest\
    \ = array();\n\n  foreach ($strings as $str) {\n    $strLength = strlen($str);\n\
    \    if ($strLength > $maxLength) {\n      $longest = array($str);\n      $maxLength\
    \ = $strLength;\n    }\n    else {\n      if ($strLength == $maxLength) {\n  \
    \      $longest[] = $str;\n      }\n    }\n  }\n  return empty($longest) ? null\
    \ : reset($longest);\n}", "    if (!$strings) {\n        return null;\n    }\n\
    \    $lengths = array_map(function ($string) {\n        return strlen($string);\n\
    \    }, $strings);\n    return $lengths == array_max($lengths) ? array_pop($lengths)\
    \ : null;\n}\n</code>\n<|/ a tags=arrays,count,php dscore=3 |>\n<| c |>\nThis\
    \ should have been accepted as the correct answer. The other answers work well\
    \ but this one is much more performant than most others because it uses native\
    \ php functions. `array_map` is very handy, but it is also the slowest method\
    \ of all when working with large arrays.\n<|/ c |>\n<| c |>\nThank you for your\
    \ comment, I have updated my answer to incorporate your comment. I have also tested\
    \ the performance of the methods using `microtime` function in PHP 5.5 but it\
    \ is very unreliable - I am not sure what PHP version it is working with. If you\
    \ are working with larger arrays, it may be more reliable to test them and see\
    \ which one is the fastest / most accurate.\n<|/ c |>\n<| c |>\nVery thorough\
    \ answer, especially the microtime test :) However, I am working with a large\
    \ array of strings (>100,000) and I couldn't figure out why this one was faster\
    \ than the others. I'm sure it's because of the way the array_count_values() function\
    \ works, but I can't find out why. Thanks again!\n<|/ c |>\n<| a |>\nHere's a\
    \ solution using array_map() and array_reduce().\n<code>", "    $longest_length\
    \ = 0;\n    foreach ($strings as $string) {\n        $len = mb_strlen($string,\
    \ \"UTF-8\");\n        if ($len > $longest_length) {\n            $longest_length\
    \ = $len;\n        }\n    }\n    return $longest_length ? $strings[$longest_length\
    \ - 1] : null;\n}", "    // First sort the array in descending order by length\n\
    \    sort($strings, SORT_STRING);\n    // Get the length of each string\n    $lengths\
    \ = array_map(function($s) { return strlen($s); }, $strings);\n    // Keep track\
    \ of the longest length\n    $longest = array_shift($lengths);\n    // If the\
    \ array is empty or all strings are equal, return null\n    if (empty($strings)\
    \ or count($lengths) < 2) return null;\n    // If the first string is the longest,\
    \ return it\n    if ($longest === array_shift($lengths)) return $strings[0];\n\
    \    // Otherwise, return the first string in the sorted array that has this length\n\
    \    return array_reduce($lengths, function($carry, $length) use ($strings) {\n\
    \        foreach ($strings as $str) {\n            if (strlen($str) === $length\
    \ && $str === $carry) return $str;\n        }\n        return null;\n    }, $strings[0]);\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
