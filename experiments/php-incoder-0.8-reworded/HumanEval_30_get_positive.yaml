name: HumanEval_30_get_positive
language: php
prompt: "<?php\n// Return only positive numbers in the array.\n// >>> get_positive(array(-1,\
  \ 2, -4, 5, 6))\n// array(2, 5, 6)\n// >>> get_positive(array(5, 3, -5, 2, -3, 3,\
  \ 9, 0, 123, 1, -10))\n// array(5, 3, 2, 3, 9, 123, 1)\nfunction get_positive($l)\
  \ {\n"
tests: "function candidate(...$args) {\n    return get_positive(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
  \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
  \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $s = array();\n    foreach($l as $k => $v) {\n        if($v > 0)\n\
    \            $s[] = $v;\n    }\n    return $s;\n}\n", "  $n = [];\n  foreach ($l\
    \ as $key => $value) {\n    if ($value > 0) $n[$key] = $value;\n  }\n  return\
    \ $n;\n}\n", "    $p = array();\n    foreach ($l as $n) {\n        if ($n >= 0)\
    \ {\n            $p[] = $n;\n        }\n    }\n    return $p;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nWon't this return `array(5, 3, 2, 3, 9, 123, 1)` when\
    \ run against `$x = array(-1, -2, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);`?\n<|/\
    \ c |>\n<| c |>\n, thank you for the feedback. Yes, you're right, that's a problem.\
    \ I'll correct my code.\n<|/ c |>\n<| a tags=php,arrays dscore=1 |>\n<code>\n\
    <?php\n\n$list = array('apple', 'ball', 'car');\n\n$filtered = array_filter($list,\
    \ function($item) {\n    return strlen($item);\n});\n\nprint_r($filtered);\n",
  "    $out = array();\n    foreach ($l as $item) {\n        if ($item > 0)\n    \
    \        $out[] = $item;\n    }\n    return $out;\n}\n", "\treturn array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "    return array_filter($l, function($v)\
    \ { return $v > 0; });\n}\n", "  return array_filter(array_map('abs'), $l);\n\
    }\n", "  return array_filter($l, 'is_positive');\n}\n", "    $p = array();\n \
    \   foreach ($l as $v) {\n        if ($v > 0) {\n            $p[] = $v;\n    \
    \    }\n    }\n    return $p;\n}\n", "    return array_filter($l, function ($item)\
    \ {\n        return $item > 0;\n    });\n}\n", "    return array_filter(\n   \
    \     $l,\n        function ($v) {\n            return $v >= 0;\n        }\n \
    \   );\n}\n", "  $p = [];\n  foreach($l as $v) {\n    if($v > 0) $p[] = $v;\n\
    \  }\n  return $p;\n}", "  return array_filter($l, function ($v) { return $v >\
    \ 0; });\n}", "    return array_filter($l, function ($num) {\n        return $num\
    \ >= 0;\n    });\n}\n", "  foreach ($l as $key => $value) {\n    if ($value <\
    \ 0) {\n      unset($l[$key]);\n    }\n  }\n  return $l;\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=2 |>\nUse array_filter to remove elements you don't want. This\
    \ will allow you to keep the original array structure.\n<code>", "    $ret = [];\n\
    \    foreach ($l as $i => $v) {\n        if ($v > 0) {\n            $ret[] = $v;\n\
    \        }\n    }\n    return $ret;\n}\n", "    return array_filter(array_map('abs',\
    \ $l), 'is_numeric');\n}\n", "  $p = array();\n  foreach ($l as $v) {\n    if\
    \ ($v > 0) $p[] = $v;\n  }\n  return $p;\n}\n", "    sort($l);\n    return array_filter(\n\
    \        $l,\n        function ($value) {\n            return $value >= 0;\n \
    \       }\n    );\n}\n", "  return array_filter($l, function($n) {\n    return\
    \ $n > 0;\n  });\n}", "    foreach ($l as $k => $v)\n        if ($v > 0)\n   \
    \         $l[$k] = $v;\n    return $l;\n}\n", "    return array_filter($l, function($k)\
    \ {\n        return $k > 0;\n    });\n}\n</code>\nIf you need the values to be\
    \ in sorted order or have them in a separate array, use array_multisort().\n<|/\
    \ a tags=php,arrays,sorting dscore=4 |>\n<| c |>\nIt's a good approach but it's\
    \ less efficient than `array_map` because it has to create another copy of the\
    \ array and `array_map` does not create its own.\n<|/ c |>\n<| a |>\nA more efficient\
    \ alternative to array_search would be to use a foreach loop to find the desired\
    \ key and array_slice to limit the number of results returned.\n<code>", "\t$p\
    \ = array();\n\tforeach($l as $i) {\n\t\tif ($i < 0)\n\t\t\t$p[] = $i;\n\t}\n\t\
    return $p;\n}\n\n", "  return array_filter($l, function($v) {\n    return ($v\
    \ > 0);\n  });\n}", "  return array_filter(array_map('abs', $l), 'is_numeric');\n\
    }\n\n/**\n * Given a two-dimensional array, convert the inner array to a string\
    \ and\n * return it as an array. If the inner array is empty or if it doesn't\
    \ have\n * a string value, then an empty array is returned.\n *\n * Example:\n\
    \ * >>> innerArrayToString(array(array(), array('a', 'b')));\n * array(\n *  \
    \   0 => ''\n *     1 => 'a',\n *     2 => 'b'\n * )\n *\n * @param array $arr\n\
    \ * @return array\n */", "    $p = array();\n    foreach ($l as $v) {\n      \
    \  if ($v >= 0) {\n            $p[] = $v;\n        }\n    }\n    return $p;\n\
    }\n", "    $p = array();\n    foreach ($l as $v) {\n        if ($v > 0) {\n  \
    \          $p[] = $v;\n        }\n    }\n    return $p;\n}\n", "  return array_filter($l,\
    \ function($v) {\n    return $v > 0;\n  });\n}", "    $n = 0;\n    foreach ($l\
    \ as $item) {\n        if ($item > 0) {\n            $n++;\n        }\n    }\n\
    \    return $n;\n}\n\n$a = array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n$b =\
    \ array();\n$c = array();\n\necho \"\\n--- Test with negative numbers in array\
    \ ---\\n\";\n$a = array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n$b = array();\n\
    $c = array();\n$n = get_positive($a);\necho \"$n\\n\";\necho \"$a\\n\";\narray_push($b,\
    \ $a[0]);\n$n = get_positive($a);\necho \"$n\\n\";\necho \"$a\\n\";\narray_push($b,\
    \ $a[1]);\n$n = get_positive($a);\necho \"$n\\n\";\necho \"$a\\n\";\narray_push($b,\
    \ $a[2]);\n$n = get_positive($a);\necho \"$n\\n\";\necho \"$a\\n\";\narray_push($b,\
    \ $a[3]);\n$n = get_positive($a);\necho \"$n\\n\";\necho \"$a\\n\";\narray_push($b,\
    \ $a[4]);\n$n = get_positive($a);\necho \"$n\\n\";\necho \"$a\\n\";\narray_push($b,\
    \ $a[5]);\n$n = get_positive($a);\necho \"$n\\n\";\necho \"$a\\n\";\narray_push($b,\
    \ $a[6]);\n$n = get_positive($a);\necho \"$n\\n\";\necho \"$a\\n\";\narray_push($b,\
    \ $a[7]);\n$n = get_positive($a);\necho \"$n\\n\";\necho \"$a\\n\";\narray_push($b,\
    \ $a[8]);\n$n = get_positive($a);\necho \"$n\\n\";\necho \"$a\\n\";\narray_push($b,\
    \ $a[9]);\n$n = get_positive($a);\necho \"$n\\n\";\necho \"$a\\n\";\narray_push($b,\
    \ $a[10]);\n$n = get_positive($a);\necho \"$n\\n\";\necho \"$a\\n\";\narray_push($b,\
    \ $a[11]);\n$n = get_positive($a);\necho \"$n\\n\";\necho \"$a\\n\";\narray_push($b,\
    \ $a[12]);\n$n = get_positive($a);\necho \"$n\\n\";\necho \"$a\\n\";\narray_push($b,\
    \ $a[13]);\n$n = get_positive($a);\necho \"$n\\n\";\necho \"$a\\n\";\narray_push($b,\
    \ $a[14]);\n$n = get_positive($a);\necho \"$n\\n\";\necho \"$a\\n\";\narray_push($b,\
    \ $a[15]);\n$", "    return array_filter($l, function ($item) {\n        return\
    \ $item >= 0;\n    });\n}\n", "  return array_filter($l, 'is_numeric');\n}\n",
  "    return array_filter(\n        $l,\n        function($value) use ($l) {\n  \
    \          return $value > 0;\n        }\n    );\n}\n\n/**\n * Returns the positive\
    \ values of the array.\n * Use this method when the array is a multidimensional\
    \ array.\n *\n * @param  array $l Array to get the positive values from.\n * @return\
    \ array The array of positive values.\n */", "\treturn array_filter(\n\t\t$l,\n\
    \t\tfunction ($n) { return $n > 0; },\n\t\tARRAY_FILTER_USE_BOTH\n\t);\n}\n",
  "    foreach ($l as $v) {\n        if ($v >= 0) {\n            $l[] = $v;\n    \
    \    }\n    }\n    return $l;\n}\n", "  $p = array();\n  foreach ($l as $k =>\
    \ $v) {\n    if ($v > 0) $p[$k] = $v;\n  }\n  return $p;\n}\n", "    $ret = array();\n\
    \    foreach ($l as $k => $v) {\n        if ($v > 0) $ret[$k] = $v;\n    }\n \
    \   return $ret;\n}\n\n/**\n * Returns a list of all available languages\n */",
  "\treturn array_filter($l, function ($n) { return $n >= 0; });\n}\n", "  $positives\
    \ = array();\n  foreach ($l as $v) {\n    if ($v >= 0) {\n      $positives[] =\
    \ $v;\n    }\n  }\n  return $positives;\n}\n\n/**\n * Remove empty strings from\
    \ an array. Also converts numeric to strings if\n * the element isn't already\
    \ a string.\n * @param array $array The array to clean.\n * @return array The\
    \ cleaned array.\n */", "  $positives = array();\n  foreach ($l as $v) {\n   \
    \ if ($v >= 0) {\n      $positives[] = $v;\n    }\n  }\n  return $positives;\n\
    }\n", "    $t = array();\n    foreach ($l as $i => $e) {\n        if ($e > 0)\
    \ {\n            $t[] = $e;\n        }\n    }\n    return $t;\n}", "    $ret =\
    \ $l;\n    foreach ($l as $i => $v) {\n        if ($v > 0) $ret[$i] = $v;\n  \
    \  }\n    return $ret;\n}\n", "    return array_filter($l, function($n) {\n  \
    \      return $n >= 0;\n    });\n}\n", "    return array_filter($l, function($el)\
    \ {\n        return $el > 0;\n    });\n}\n", "    return array_filter($l, function($val)\
    \ {\n        return $val >= 0;\n    });\n}\n</code>\n<|/ a |>\n<| c |>\nThat is\
    \ nice and simple, but it only returns positive values.\n<|/ c |>\n<| c |>\nI\
    \ modified the function to return only positive values.\n<|/ c |>\n<| c |>\nGreat!\
    \ Thanks for your effort.\n<|/ c |>\n<| a |>\n<code>", "  $positive = array();\n\
    \  foreach ($l as $v) {\n    if ($v > 0) {\n      $positive[] = $v;\n    }\n \
    \ }\n  return $positive;\n}\n", "  $r = array();\n  foreach ($l as $el) {\n  \
    \  if ($el >= 0)\n      $r[] = $el;\n  }\n  return $r;\n}", "  return array_filter($l,\
    \ 'is_numeric');\n}\n", "    $p = array();\n    foreach ($l as $e) {\n       \
    \ if ($e >= 0) $p[] = $e;\n    }\n    return $p;\n}", "\tforeach ($l as $k =>\
    \ $v) {\n\t\tif ($v > 0) unset($l[$k]);\n\t}\n\treturn $l;\n}\n", "  return array_filter($l,\
    \ function($i) {\n    return $i > 0;\n  });\n}", "  $n = 0;\n  foreach($l as $k\
    \ => $v) {\n    if ($v > 0) {\n      $n++;\n      $l[$k] = $n;\n    }\n  }\n \
    \ return $l;\n}", "  $a = array();\n  foreach($l as $e) {\n    if($e > 0) $a[$e]\
    \ = 1;\n  }\n  return array_keys($a);\n}", "    sort($l);\n    $n = count($l);\n\
    \    for ($i=0; $i<$n; $i++) {\n        if ($l[$i] > 0) {\n            $result[]\
    \ = $l[$i];\n        }\n    }\n    return $result;\n}\n", "    return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "  return array_filter($l, 'is_numeric');\n\
    }\n\n/**\n * Returns a unique random integer between 0 and the number of items\
    \ in\n * the array.\n *\n * @param array $l\n * @return int\n */", "  return array_filter(\n\
    \    array_map('abs', $l),\n    function ($n) {\n      return $n >= 0;\n    }\n\
    \  );\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| a |>\n<code>\n<?php\n$array\
    \ = array(1,2,-4,5,6,-1,-2,-5);\n$temp = array();\n$result = [];\n$max = 0;\n\n\
    foreach($array as $value) {\n    if($value > $max){\n        $max = $value;\n\
    \    }\n}\n\nforeach($array as $key=>$value) {\n    if($value > $max){\n     \
    \   $temp[] = $array[$key];\n    } else {\n        $result[] = $temp;\n      \
    \  $temp = array();\n    }\n}\n$result[] = $temp;\nprint_r($result);\n</code>\n\
    <|/ a tags=php,algorithm dscore=1 |>\n<| a |>\nThe first problem comes from the\
    \ fact that you don't have a clear idea of the maximum value. So, assuming that\
    \ the maximum value is zero, we need to solve the problem for just one value,\
    \ like this:\n<code>", "    return array_filter(get_negative($l));\n}", "    return\
    \ array_filter($l, function($v) use ($l) {\n        return $v > 0;\n    });\n\
    }\n", "\tforeach ($l as $key => $value) {\n\t\tif ($value > 0) {\n\t\t\tunset($l[$key]);\n\
    \t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $l;\n}\n", "    if (is_array($l))\
    \ {\n        $a = $l;\n    } else {\n        $a = explode(\",\", $l);\n    }\n\
    \    foreach ($a as &$value) {\n        if ($value > 0) {\n            $value++;\n\
    \        }\n    }\n    return $a;\n}\n", "    return array_filter(\n        $l,\n\
    \        function ($value) {\n            return $value > 0;\n        }\n    );\n\
    }", "  foreach ($l as $n) {\n    if ($n > 0) {\n      return $n;\n    }\n  }\n\
    \  return array();\n}\n", "    foreach ($l as $key => $value) {\n        if ($value\
    \ > 0)\n            unset($l[$key]);\n    }\n    return $l;\n}\n", "  $a = array();\n\
    \  foreach ($l as $k => $v)\n    if ($v > 0)\n      $a[] = $v;\n  return $a;\n\
    }", "    return array_filter($l, 'is_numeric');\n}\n", "    $p = array();\n  \
    \  foreach($l as $value) {\n        if ($value > 0) {\n            $p[] = $value;\n\
    \        }\n    }\n    return $p;\n}\n", "    $r = [];\n    foreach ($l as $e)\
    \ {\n        if ($e > 0) $r[] = $e;\n    }\n    return $r;\n}\n", "    return\
    \ array_filter(\n        $l,\n        function($value) {\n            return ($value\
    \ >= 0);\n        }\n    );\n}", "    return array_filter($l, function($n) {\n\
    \        return $n > 0;\n    });\n}\n", "  $res = array();\n  foreach ($l as $i\
    \ => $v) {\n    if ($v >= 0) {\n      $res[] = $v;\n    }\n  }\n  return $res;\n\
    }\n", "    if (is_array($l)) {\n        foreach ($l as $a) {\n            if ($a\
    \ >= 0) return $a;\n        }\n    }\n    return array();\n}\n", "    return array_filter($l,\
    \ function ($v) {\n        return $v >= 0;\n    });\n}\n", "  // Get all positive\
    \ numbers.\n  $positive = array();\n  foreach ($l as $i) {\n    if ($i > 0) {\n\
    \      $positive[] = $i;\n    }\n  }\n  return $positive;\n}", "    $result =\
    \ array();\n    foreach ($l as $item) {\n        if ($item > 0) {\n          \
    \  $result[] = $item;\n        }\n    }\n    return $result;\n}\n", "    if (is_array($l))\
    \ {\n        sort($l);\n        $l = array_filter($l);\n        return array_values($l);\n\
    \    }\n    return array();\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't\
    \ work unless you call `sort($l)` first and `array_filter` after. Otherwise you\
    \ get an error.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n<?php", "  return array_filter(array_filter($l,\
    \ 'is_int'), 'is_pos');\n}\n", "    $p = array();\n    foreach($l as $i => $v)\
    \ {\n        if ($v > 0) {\n            $p[$i] = $v;\n        }\n    }\n    return\
    \ $p;\n}\n", "    return array_filter(\n        $l,\n        function ($el) {\n\
    \            return $el > 0;\n        }\n    );\n}\n", "    return array_filter($l,\
    \ function($n) { return $n >= 0; });\n}\n\n/**\n * Get the largest integer less\
    \ than or equal to the given number.\n * @param int $number The number to get\
    \ the largest integer from\n * @return int\n */", "    $positive = array();\n\
    \    foreach($l as $value) {\n        if ($value > 0) {\n            $positive[]\
    \ = $value;\n        }\n    }\n    return $positive;\n}\n", "\tsort($l);\n\t$n\
    \ = count($l);\n\t$out = 0;\n\tfor ($i = 0; $i < $n; ++$i) {\n\t\tif ($l[$i] >\
    \ 0) {\n\t\t\t$out .= $l[$i];\n\t\t}\n\t}\n\treturn $out;\n}\n", "    sort($l);\n\
    \    return array_filter($l, function($v) {\n        return $v > 0;\n    });\n\
    }\n\n/**\n * Filters input by an array of tags to be removed from an input string.\n\
    \ *\n * Usage:\n *\n * $s = \"Hello [bold]World[/bold]\";\n * echo filter_content($s,\
    \ array('b', 'i'));\n * Output: Hello World\n *\n * $s = \"Hello [bold][color=blue]World[/color][/bold]\"\
    ;\n * echo filter_content($s, array('b', 'i', 'u', 'color'));\n * Output: Hello\
    \ World\n *\n * @param string $s     input string\n * @param array  $tags allowed\
    \ tag names\n * @param bool   $escape escape special characters, default true\n\
    \ *\n * @return string filtered string\n */", "  return array_filter($l, function\
    \ ($v) { return $v > 0; });\n}\n", "    return array_filter(array($l), 'is_numeric',\
    \ ARRAY_FILTER_USE_BOTH);\n}\n", "  return array_filter($l, 'is_numeric');\n}\n\
    \n/**\n * Removes values from an array that don't meet a given criteria.\n *\n\
    \ * @param array $l An array of data.\n * @param callback $condition A function\
    \ that will receive each element and must return true or false.\n * @param array\
    \ $extraCondition An optional additional list of conditions.\n * @return array\
    \ A new array with all elements that match the conditions.\n */", "  $positive\
    \ = array();\n  foreach($l as $l) {\n    if ($l > 0 && $l <= 1) {\n      $positive[]\
    \ = $l;\n    }\n  }\n  return $positive;\n}", "\t$a = array();\n\tforeach ($l\
    \ as $k => $v) {\n\t\tif ($v >= 0)\n\t\t\t$a[$k] = $v;\n\t}\n\treturn $a;\n}\n\
    \n/**\n * Get a list of all possible permutations of an array.\n * @return array\n\
    \ * @param array $items The array\n */", "\t$positive = array();\n\tforeach ($l\
    \ as $v) {\n\t\tif ($v > 0) {\n\t\t\t$positive[] = $v;\n\t\t}\n\t}\n\treturn $positive;\n\
    }\n", "  $positive = array();\n  foreach ($l as $item) {\n    if ($item > 0) {\n\
    \      $positive[] = $item;\n    }\n  }\n  return $positive;\n}\n</code>\n<|/\
    \ a dscore=4 |>\n<| c |>\nIt's an old answer but thank you for the solution :)\n\
    <|/ c |>\n<| a tags=arrays,php,sorting dscore=2 |>\nYou can do that using array_search,\
    \ array_multisort and array_unique:\n<code>\n$values = array(\n    array('apple',\
    \ 'orange', 'pear'),\n    array('apple', 'orange', 'pear'),\n    array('apple',\
    \ 'orange', 'pear'),\n    array('orange', 'pear'),\n    array('apple', 'orange',\
    \ 'pear'),\n    array('apple', 'orange', 'pear'),\n    array('orange', 'pear')\n\
    );\n\n$searchValues = array('apple', 'orange', 'pear');\n$values = array_unique($values);\n\
    $foundKeys = array_search($searchValues, $values);\n$result = array_multisort($foundKeys,\
    \ $values);\n\nvar_dump($result);\n</code>\n<|/ a |>\n<| c |>\nThis is what I\
    \ was looking for! Thank you!\n<|/ c |>\n<| a tags=arrays,php,sorting dscore=2\
    \ |>\nThis may work for you:\n<code>\n<?php\n$a1=array(1,3,5,7,9,10);\n$a2=array(2,4,6,8,10,12);\n\
    $b=array();\n$i=0;\nforeach($a1 as $v){\n    if(in_array($v,$b)){\n        $i=1;\n\
    \    }\n    if($v>=$a1[$i]){\n        array_push($b,$v);\n    }\n}\nif($i==1){\n\
    \    array_push($b,$a1[count($a1)]);\n}\nforeach($a2 as $v){\n    if(in_array($v,$b)){\n\
    \        $i=1;\n    }\n    if($v>=$a1[$i]){\n        array_push($b,$v);\n    }\n\
    }\nif($i==1){\n    array_push($b,$a2[count($a2)]);\n}\nvar_dump($b);", "\t$l =\
    \ array_filter($l);\n\t$l2 = array_map(function($item) { return $item > 0 ? $item\
    \ : null; }, $l);\n\treturn array_values(array_filter($l2));\n}", "    $out =\
    \ array();\n    foreach ($l as $item) {\n        if ($item > 0) {\n          \
    \  $out[] = $item;\n        }\n    }\n    return $out;\n}\n\n/**\n * Get all values\
    \ greater than or equal to $value.\n *\n * @param array|string $value The value\
    \ of the items to search for.\n *\n * @return array All items where value is >=\
    \ value.\n */", "  return array_filter($l, function($v) { return $v > 0; });\n\
    }", "    foreach ($l as $k => $v) {\n        if ($v < 0) unset($l[$k]);\n    }\n\
    \    return array_values($l);\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    $array = array(\n  array('title' => 'title1', 'text' => 'text1'),\n  array('title'\
    \ => 'title2', 'text' => 'text2'),\n  array('title' => 'title3', 'text' => 'text3'),\n\
    \  array('title' => 'title4', 'text' => 'text4')\n);\n\nforeach($array as $key\
    \ => $value) {\n  if($value['title'] < 0 && $value['title'] != 'title1') {\n \
    \   unset($array[$key]);\n  }\n}\n</code>\n<|/ a dscore=0 tags=php,arrays,multidimensional-array\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\nA simple way to do that\
    \ is to iterate over an array and check with a flag if the element should be removed\
    \ (unset), like this:\n<code>\n$array = array(\n  array('title' => 'title1', 'text'\
    \ => 'text1'),\n  array('title' => 'title2', 'text' => 'text2'),\n  array('title'\
    \ => 'title3', 'text' => 'text3'),\n  array('title' => 'title4', 'text' => 'text4')\n\
    );\n\nforeach($array as $key => $value) {\n  if($value['title'] < 0 && $value['title']\
    \ != 'title1') {\n    unset($array[$key]);\n  }\n}\n\nprint_r($array);\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$arr\
    \ = array(\n  array('title' => 'title1', 'text' => 'text1'),\n  array('title'\
    \ => 'title2', 'text' => 'text2'),\n  array('title' => 'title3', 'text' => 'text3'),\n\
    \  array('title' => 'title4', 'text' => 'text4')\n);\n", "  $result = [];\n  foreach($l\
    \ as $value) {\n    if ($value > 0) {\n      $result[] = $value;\n    }\n  }\n\
    \  return $result;\n}\n</code>\nAnd then call it like this \n<code>\n$result =\
    \ get_positive($list);\n</code>\nThis will get all the positive numbers from the\
    \ $list array.\n<|/ a dscore=0 |>\n<| c |>\nThank you very much! It worked. I\
    \ am sorry that I could not accept your answer, as I do not have enough reputation.\
    \ But I am sure that my next questions will be... Thanks again!\n<|/ c |>\n<|\
    \ c |>\nNo problem at all!\n<|/ c |>\n<| a dscore=0 tags=php,sorting,arrays |>\n\
    I have modified the accepted answer slightly to make it easier to use:\n<code>",
  "    $r = array();\n    foreach ($l as $i => $e) {\n        if ($e > 0) $r[$i] =\
    \ $e;\n    }\n    return $r;\n}", "    $a = array();\n    foreach ($l as $v) {\n\
    \        if ($v >= 0)\n            $a[] = $v;\n    }\n    return $a;\n}\n", " \
    \   $positive = array();\n    foreach ($l as $value) {\n        if ($value > 0)\
    \ {\n            $positive[] = $value;\n        }\n    }\n    return $positive;\n\
    }\n\n/**\n * Returns true if the value is in the list of numbers, otherwise false.\n\
    \ * Uses in_array() internally.\n * @param mixed $value Value to check\n * @param\
    \ array $list List of numbers to check for\n * @return bool\n */", "    $return\
    \ = array();\n    foreach($l as $v) {\n        if ($v <= 0) {\n            $return[]\
    \ = $v;\n        }\n    }\n    return $return;\n}\n", "    foreach ($l as $key\
    \ => $value) {\n        if ($value > 0) {\n            $l[$key] = $value;\n  \
    \      }\n    }\n    return $l;\n}", "  $positive = array();\n  foreach ($l as\
    \ $value) {\n    if ($value >= 0) {\n      $positive[] = $value;\n    }\n  }\n\
    \  return $positive;\n}\n", "    $positive = array();\n    foreach($l as $l2)\
    \ {\n        if ($l2 > 0) {\n            $positive[] = $l2;\n        }\n    }\n\
    \    return $positive;\n}\n", "  $positive = array();\n  foreach ($l as $item)\
    \ {\n    if ($item > 0) {\n      $positive[] = $item;\n    }\n  }\n  return $positive;\n\
    }\n", "    $r = array();\n    foreach ($l as $v) {\n        if ($v > 0) $r[] =\
    \ $v;\n    }\n    return $r;\n}\n", "  usort($l, create_function('$a, $b', 'return\
    \ $a > $b ? 1 : -1'));\n  return array_filter($l);\n}\n", "  $p = array();\n \
    \ foreach($l as $v) {\n    if ($v > 0) { $p[] = $v; }\n  }\n  return $p;\n}",
  "  $positive = array();\n  foreach ($l as $k => $v) {\n    if ($v >0) $positive[$k]\
    \ = $v;\n  }\n  return $positive;\n}\n", "  $positive = array();\n  foreach ($l\
    \ as $item) {\n    if ($item > 0) {\n      $positive[] = $item;\n    }\n  }\n\
    \  return $positive;\n}", "  return array_filter($l, function($v) {\n    return\
    \ $v !== 0.0;\n  });\n}\n", "  return array_filter($l, function ($v) { return\
    \ $v >= 0; });\n}", "    return array_filter(\n        $l,\n        function ($number)\
    \ {\n            return $number > 0;\n        }\n    );\n}\n</code>\n<|/ a |>\n\
    <| a |>\n<code>\n$array = array(-10, -4, -2, 2, 3, 4, 5);\n$result = array_filter($array,\
    \ function($n) {\n    return $n > 0;\n});\n</code>\n<|/ a dscore=2 tags=php,arrays\
    \ |>\n<| c |>\nI find it hard to understand what this does...does this filter\
    \ negatives out?\n<|/ c |>\n<| c |>\nthis filters your array with only positive\
    \ numbers. If you want all negative numbers replaced then replace > with >=\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$array = array(1, 2, 3, 4, -5,\
    \ 6, 7, 8, 9);\n$negatives = array_filter($array, function($n) { return $n < 0;\
    \ });\n\nprint_r($negatives);", "  $r = [];\n  foreach ($l as $v) {\n    if ($v\
    \ >= 0) {\n      $r[] = $v;\n    }\n  }\n  return $r;\n}", "    return array_filter(\n\
    \        $l,\n        function ($x) { return ($x > 0); },\n        ARRAY_FILTER_USE_BOTH\n\
    \    );\n}", "    return array_filter(\n        $l,\n        function ($el) {\n\
    \            return $el > 0;\n        }\n    );\n}\n\n/**\n * Returns a list of\
    \ strings that are substrings of the specified string.\n */", "    return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "    return array_filter($l, 'is_numeric',\
    \ ARRAY_FILTER_USE_BOTH);\n}\n", "    return array_filter($l, function ($v) {\n\
    \        return $v > 0;\n    });\n}", "    return array_filter($l, function($i)\
    \ {\n        return $i > 0;\n    });\n}\n", "    $positive = array();\n    foreach\
    \ ($l as $e) {\n        if ($e >= 0)\n            $positive[] = $e;\n    }\n \
    \   return $positive;\n}\n", "    if (is_array($l)) {\n        $p = array();\n\
    \        foreach ($l as $e) {\n            if ($e > 0) {\n                $p[]\
    \ = $e;\n            }\n        }\n        return $p;\n    }\n    else {\n   \
    \     return array();\n    }\n}", "    return array_filter($l, 'is_int');\n}\n",
  "  return array_filter($l, 'is_numeric');\n}\n", "    return array_filter($l, function($item)\
    \ {\n        return $item > 0;\n    });\n}\n", "    return array_filter($l, 'is_numeric');\n\
    }\n", "  foreach ($l as $key => $value) {\n    if ($value > 0) {\n      $l[$key]\
    \ = $value;\n    }\n  }\n  return $l;\n}", "    $r = array();\n    foreach ($l\
    \ as $v) {\n        if ($v >= 0)\n            $r[] = $v;\n    }\n    return $r;\n\
    }\n", "    $positive = array();\n    foreach ($l as $item) {\n        if ($item\
    \ > 0) {\n            $positive[] = $item;\n        }\n    }\n    return $positive;\n\
    }\n", "    foreach ($l as $item) {\n        if ($item > 0) {\n            $l[]\
    \ = $item;\n        }\n    }\n    return $l;\n}\n", "    $p = array();\n    foreach($l\
    \ as $i => $n)\n        $p[$i] = $n >= 0 ? $n : '';\n    return $p;\n}", "  return\
    \ array_filter(\n    $l,\n    function ($el) {\n      return $el > 0;\n    }\n\
    \  );\n}", "    return array_filter($l, function($value) {\n        return $value\
    \ >= 0;\n    });\n}\n</code>\n<|/ a tags=php dscore=1 |>\n<| a dscore=0 tags=php\
    \ |>\nYou can use the array_filter function to remove any value that doesn't meet\
    \ a certain criteria.  For example:\n<code>\n$a = array(1, 4, 2, -3);\nprint_r($a);\n\
    $b = array_filter($a, function($v) { return $v > 0; });\nprint_r($b);\n</code>\n\
    <|/ a |>\n<| a dscore=0 tags=php |>\nA bit too late but i had same problem.\n\
    This code will do the same what array_filter will do, but for associative arrays\
    \ only\n<code>", "\treturn array_filter(\n\t\t$l,\n\t\tfunction($v) { return ($v\
    \ > 0); },\n\t\tARRAY_FILTER_USE_BOTH\n\t);\n}\n", "    return array_filter($l,\
    \ function($n) {\n        return $n > 0;\n    });\n}\n", "    return array_filter(get_object_vars($l),\
    \ 'is_numeric');\n}", "    $r = array();\n    foreach ($l as $v) {\n        if\
    \ ($v >= 0) {\n            $r[] = $v;\n        }\n    }\n    return $r;\n}\n",
  "    $r = [];\n    foreach ($l as $e) {\n        if ($e > 0) {\n            $r[]\
    \ = $e;\n        }\n    }\n    return $r;\n}\n", "\treturn array_filter(array_map('abs',\
    \ $l), 'is_numeric');\n}\n", "\t$l = array_filter($l);\n\treturn array_filter($l,\
    \ create_function('$v', '$v >= 0;'));\n}\n", "    $s = array_filter($l, function\
    \ ($i) { return $i >= 0; });\n    return $s;\n}\n</code>\n<|/ a tags=arrays,php\
    \ dscore=1 |>\n<| a tags=arrays,php |>\n<code>", "    return array_filter($l,\
    \ function($element) {\n        return $element > 0;\n    });\n}\n", "  $r = array();\n\
    \  foreach ($l as $x) {\n    if ($x >= 0) {\n      $r[] = $x;\n    }\n  }\n  return\
    \ $r;\n}\n", "  foreach ($l as $key => $value) {\n    if ($value > 0) {\n    \
    \  $l[$key] = $value;\n    }\n  }\n  return $l;\n}\n", "  return array_filter($l,\
    \ function($i) { return ($i >= 0);});\n}\n", "    return array_filter($l, 'is_numeric');\n\
    }", "  $positive = $l;\n  foreach ($l as $value) {\n    if ($value > 0) {\n  \
    \    $positive[] = $value;\n    }\n  }\n  return $positive;\n}\n\n/**\n * Returns\
    \ a string representation of the array with the values joined by\n * the delimiter.\n\
    \ *\n * @example \"1,5,2,3,4\"\n * @param array $l the array\n * @param string\
    \ $delimiter the delimiter to use\n * @return string\n */", "  return array_filter(get_negative($l),\
    \ 'is_numeric');\n}\n\n/**\n * Remove negative numbers from the passed array.\n\
    \ */", "    return array_filter($l, function($val) { return $val > 0; });\n}\n",
  "\treturn array_filter($l, function($v) { return $v > 0; });\n}\n\n/**\n * Returns\
    \ only the negative numbers in the array.\n * >>> get_negative(array(-1, 2, -4,\
    \ 5, 6))", "    return array_filter($l, function($v) {\n        return $v > 0;\n\
    \    });\n}\n", "  return array_filter(\n    $l,\n    function ($x) { return ($x\
    \ > 0) ? $x : null; }\n  );\n}", "\t$n = array_filter($l, 'is_numeric');\n\tif\
    \ (empty($n)) return $l;\n\treturn $n;\n}\n", "\tforeach ($l as $v) {\n\t\tif\
    \ ($v <= 0) {\n\t\t\tunset($l[$v]);\n\t\t}\n\t}\n\treturn array_values($l);\n}",
  "    return array_filter($l, function($e) { return $e > 0; });\n}\n", "  return\
    \ array_filter(\n    $l,\n    function ($n) {\n      return $n > 0;\n    }\n \
    \ );\n}\n</code>\nBut really, as someone pointed out in the comments, the better\
    \ approach would be to just write a function that does exactly what you want to\
    \ do in the second line of code in your question.\n<|/ a |>\n<| c |>\nIt's not\
    \ really \"better\" since there's more than one way to do it, but I'd say it's\
    \ a better approach.\n<|/ c |>\n<| c |>\nI was thinking more about that. I'm just\
    \ showing a different approach.\n<|/ c |>\n<| c |>\nIn which case, it's better\
    \ to use a standard function with 1 line of code instead of doing it all over\
    \ again (so it's readable). Also, `array_filter` is a pretty efficient way of\
    \ removing elements from a PHP array, so I'd imagine that it would be faster than\
    \ calling `array_diff` twice.\n<|/ c |>\n<| c |>\n`array_filter` also has the\
    \ benefit of not needing to create an additional copy of an array.\n<|/ c |>\n\
    <| c |>\nI agree. The original answer had an issue that made the first version\
    \ more confusing than it needed to be.\n<|/ c |>\n<| a tags=php dscore=1 |>\n\
    <code>\n<?php\n\n$a = [\n  0 => 1,\n  1 => 2,\n  2 => 3,\n  3 => 4,\n  4 => 5,\n\
    \  5 => 6,\n  6 => 7,\n  7 => 8,\n  8 => 9,\n  9 => 10,\n  10 => 11,\n  11 =>\
    \ 12,\n  12 => 13,\n  13 => 14,\n  14 => 15,\n];\n\n$a2 = array_diff($a, [\n \
    \ 0 => 1,\n  1 => 2,\n  2 => 3,\n  3 => 4,\n  4 => 5,\n  5 => 6,\n  6 => 7,\n\
    \  7 => 8,\n  8 => 9,\n  9 => 10,\n  10 => 11,\n  11 => 12,\n  12 => 13,\n  13\
    \ => 14,\n  14 => 15,\n]);\n</code>\n<|/ a |>\n<| c |>\n`array_diff` is faster\
    \ than `array_filter`, but it only removes one array item at a time. `array_filter`\
    \ can remove multiple items at once.\n<|/ c |>\n<| c |>\narray_filter is probably\
    \ faster than array_diff because array_filter does not need to create a new array\n\
    <|/ c |>\n<| c |>\narray_filter will create a new array if used with array_filter\
    \ with an array. array_diff ", "  return array_filter($l, function($e) {\n   \
    \ return $e > 0;\n  });\n}\n", "    foreach ($l as $k => $v)\n        if ($v >=\
    \ 0)\n            $l[$k] = $v;\n    return $l;\n}", "  foreach ($l as $v) {\n\
    \    if ($v > 0) break;\n  }\n  return array_slice($l, 0, count($l) - 1);\n}\n",
  "  // Return the positive numbers in the array.\n  $positive = array();\n  foreach\
    \ ($l as $element) {\n    if ($element > 0) {\n      $positive[] = $element;\n\
    \    }\n  }\n  return $positive;\n}", "    return array_filter($l, function($item)\
    \ {\n        return $item >= 0;\n    });\n}\n</code>\n<|/ a tags=sorting,arrays,php,filter\
    \ |>\n<| c |>\nGood idea for negative numbers, but it would fail for `array(2,\
    \ 1, -5, -4, -2)`\n<|/ c |>\n<| c |>\n: I already addressed that in the first\
    \ line of my answer.\n<|/ c |>\n<| c |>\nOh, you mentioned it first. Sorry. My\
    \ bad!\n<|/ c |>\n<| a |>\nHere is a version which sorts by positive numbers first,\
    \ then negative numbers, and so forth. It uses array_filter which is similar to\
    \ array_reduce but allows more complex filter conditions.\n<code>\n<?php\n\n$input\
    \ = array(2,5,6,-3,-4,-5,-6,-7,-8,-9,-10);\n", "  return array_filter($l, function($num)\
    \ { return $num >= 0; });\n}\n", "  $a = array_filter(\n    $l,\n    function\
    \ ($a) {\n      return $a >= 0;\n    }\n  );\n  return $a;\n}", "  $a = array();\n\
    \  foreach ($l as $e) {\n    if ($e > 0) {\n      $a[$e] = 1;\n    }\n  }\n  return\
    \ $a;\n}\n</code>\n<code>\n<?php", "\t$r = array();\n\tforeach ($l as $k => $v)\
    \ {\n\t\tif ($v > 0) {\n\t\t\t$r[$k] = $v;\n\t\t}\n\t}\n\treturn $r;\n}\n", " \
    \ $positives = array();\n  foreach ($l as $value) {\n    if ($value > 0) {\n \
    \     $positives[] = $value;\n    }\n  }\n  return $positives;\n}\n", "    foreach\
    \ ($l as $item) {\n        if ($item > 0) {\n            $l[] = $item;\n     \
    \   }\n    }\n    return $l;\n}\n", "    return array_filter(\n        $l,\n \
    \       function($v) {\n            return ($v > 0);\n        }\n    );\n}\n",
  "  return array_filter($l, function($v) {\n    return $v > 0;\n  });\n}\n", "  $positive\
    \ = array();\n  $sign = 1;\n  $length = 0;\n  foreach ($l as $num) {\n    if ($sign\
    \ == 1 && ($num < 0 || $num == 0)) {\n      if ($length == 0) {\n        $positive[]\
    \ = $num;\n      }\n      else {\n        $negative = array_slice($positive, $length\
    \ + 1);\n        $positive = array_slice($positive, 0, $length);\n        $negative[]\
    \ = $num;\n        $positive = array_merge($positive, $negative);\n      }\n \
    \   }\n    if ($sign == -1) {\n      if ($length == 0) {\n        $positive[]\
    \ = $num;\n      }\n      else {\n        $negative = array_slice($positive, $length\
    \ + 1);\n        $positive = array_slice($positive, 0, $length);\n        $negative[]\
    \ = $num;\n        $positive = array_merge($negative, $positive);\n      }\n \
    \   }\n    $sign = $num > 0 ?\n      1 : $num < 0 ?\n      -1 : 0;\n    $length\
    \ += $num > 0 ?\n      1 : 0;\n  }\n  return $positive;\n}", "    return array_filter($l,\
    \ function($x) {\n        return $x >= 0;\n    });\n}\n", "  return array_filter($l,\
    \ function($e) { return $e > 0; });\n}\n</code>\n<|/ a dscore=0 tags=php,arrays\
    \ |>\n<| a |>\nTry this one:\n<code>\n$a = array(1,2,3,4,5,6,7,8,9);\n$a_filter\
    \ = array_filter($a, function($n) { return $n >= 0; });\n</code>\n<|/ a tags=php,arrays\
    \ dscore=0 |>\n<| a tags=php,arrays |>\nYou can use the following functions:\n\
    <code>\n$a = [1, 2, -3, 4, 5, 6, -7, 8, 9];\n\n$a_filtered = array_filter($a,\
    \ function($n) {\n    return $n >= 0;\n});\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays\
    \ |>\nUse array_filter() like this:\n<code>\n$array = array(1,2,3,4,-5,6,7,8,9,0);\n\
    \n$array = array_filter($array, function($var){\n    return $var < 0;\n});\n\n\
    echo \"<pre>\";\nprint_r($array);\necho \"</pre>\";\n</code>\nWill produce :\n\
    <code>\nArray\n(\n    [2] => 2\n    [4] => 4\n    [6] => 6\n    [8] => 8\n)\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\ntry this,\n<code>\n$a = [1,2,-3,4,5,-6,7,8,-9,0];\n\
    $new_array = array_filter($a, function($value){\n    return $value >= 0;\n});\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\nYou can try this way\
    \ also with array_filter()\n<code>\n<?php\n$a = [1,2,-3,4,5,-6,7,8,-9,0];\n$result\
    \ = array_filter($a, function($n){\n    return $n>=0;\n});\nprint_r($result);",
  "    return array_filter(\n        $l,\n        function ($x) {\n            return\
    \ $x > 0;\n        }\n    );\n}\n</code>\n<|/ a dscore=3 tags=php,arrays,filter\
    \ |>\n<| a dscore=2 tags=php,arrays,filter |>\n<code>", "  return array_filter($l,\
    \ function($item) {\n    return $item > 0;\n  });\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\npublic function getDataByName($name)\n{\n    $result\
    \ = array();\n    $rows = $this->database->query(\"SELECT * FROM `mytable` WHERE\
    \ `name` = '$name' ORDER BY `id`\");\n\n    while($row = $rows->fetch(PDO::FETCH_ASSOC))\n\
    \    {\n        $result[] = $row;\n    }\n    return $result;\n}\n</code>\n<|/\
    \ a tags=php,arrays,pdo |>\n<| a dscore=0 |>\n<code>\n<?php\n    require_once(\"\
    pdoconnect.php\");\n    require_once(\"functions.php\");\n    $getname = $_GET[\"\
    name\"];\n    $getdata = $function->getDataByName($getname);\n    $data = $getdata->fetchAll(PDO::FETCH_ASSOC);\n\
    \    $data = array_map(function($data){\n        $data = array_map(function($data){\n\
    \            return $data[\"name\"];\n        },$data);\n        return $data;\n\
    \    },$data);\n    echo json_encode($data);", "  foreach ($l as $v) {\n    if\
    \ ($v > 0) $l[$v] = $v;\n  }\n  return $l;\n}\n", "    $positives = array();\n\
    \    foreach ($l as $val) {\n        if ($val > 0) {\n            $positives[]\
    \ = $val;\n        }\n    }\n    return $positives;\n}\n", "    return array_filter($l,\
    \ function($e) {\n        return $e >= 0;\n    });\n}", "  $p = array();\n  foreach($l\
    \ as $v) {\n    if ($v >= 0) $p[] = $v;\n  }\n  return $p;\n}\n", "  $positive\
    \ = array();\n\n  foreach ($l as $value) {\n    if ($value > 0) {\n      $positive[]\
    \ = $value;\n    }\n  }\n\n  return $positive;\n}\n", "    $positive = array();\n\
    \    foreach ($l as $item) {\n        if ($item > 0) $positive[] = $item;\n  \
    \  }\n    return $positive;\n}\n", "  return array_filter($l, function ($v) {\n\
    \    return $v > 0;\n  });\n}\n</code>\n<|/ a dscore=3 tags=arrays,filter,php,array-filter,negative-number\
    \ |>\n<| c |>\nIt would have been nice to include a little explanation of what\
    \ it does.\n<|/ c |>\n<| c |>\nFor future readers, you might also consider `array_filter($l,\
    \ function ($v) {return $v >= 0;});`\n<|/ c |>\n<| a dscore=3 tags=arrays,filter,php,array-filter,negative-number\
    \ |>\n<code>\n$array = array(-1, 2, -4, 5, 6);\n$positive = array_filter($array,\
    \ function($i) { return $i >= 0; });\n</code>\n<|/ a |>\n<| c |>\nI believe this\
    \ is exactly what the OP is looking for since the question explicitly mentions\
    \ negative numbers in the array.\n<|/ c |>\n<| c |>\nThis doesn't answer the question.\n\
    <|/ c |>\n<| c |>\n: I suppose it does answer the question, but doesn't address\
    \ what the OP wants, which is to filter the original array based on the results\
    \ of `array_filter()`.\n<|/ c |>\n<| c |>\n, maybe I misunderstood what OP wants,\
    \ but I think his original array `$array` should still be intact.\n<|/ c |>\n\
    <| a dscore=3 |>\n<code>\n$arr = array(-1, 2, -4, 5, 6);\n$positive = array_filter($arr,\
    \ 'is_int');\n</code>\n<|/ a tags=arrays,filter,php,array-filter,negative-number\
    \ |>\n<| a dscore=3 tags=arrays,filter,php,array-filter,negative-number |>\n<code>\n\
    $negative = array_filter($arr, 'is_int');\n</code>\n<|/ a |>\n<| a dscore=2 |>\n\
    <code>\n$numbers = array(-1, 2, -4, 5, 6);\n$positive = array_filter($numbers,\
    \ create_function('$val', 'return $val > 0;'));\n</code>\n<|/ a tags=arrays,filter,php,array-filter,negative-number\
    \ |>\n<| a tags=arrays,filter,php,array-filter,negative-number |>\nAs of PHP >=\
    \ 5.5.0 you can use anonymous functions:\n<code>\n$numbers = array(-1, 2, -4,\
    \ 5, 6);\n$positive = array_filter($numbers, function($v) {\n    return $v > 0;\n\
    });\n</code>\n<|/ a dscore=2 |>\n<| a |>\nYou can define your own filter function:",
  "    return array_filter($l, function($x) {\n        return ($x >= 0);\n    });\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis is perfect, thank you! My next task is to\
    \ find out how to remove a key from a multidimensional array if the value is negative.\n\
    <|/ c |>\n<| c |>\nJust updated my answer to include a filter function that will\
    \ remove values from a nested array\n<|/ c |>\n<| a |>\nI made a function that\
    \ will remove the negative keys from an array (a multidimensional array).\n<code>\n\
    $input = array(array('value' => 0), array('value' => 1), array('value' => 2),\
    \ array('value' => 3));\n$output = array_filter($input, 'positive');\n", "  $result\
    \ = array();\n  foreach ($l as $v) {\n    if ($v >= 0) {\n      $result[] = $v;\n\
    \    }\n  }\n  return $result;\n}\n", "  return array_filter($l, function ($v)\
    \ {\n    return $v > 0;\n  });\n}\n</code>\n<|/ a tags=arrays,php,sorting |>\n\
    <| a |>\nYou could use usort with array_filter as callback:\n<code>", "  return\
    \ array_filter($l, function($v) {\n    return $v > 0;\n  });\n}\n</code>\n<|/\
    \ a tags=php |>\n<| c |>\nI like it! Nice solution! +1\n<|/ c |>\n<| c |>\nThanks\
    \ man! Just tested it out and works perfectly. Can you please explain me what\
    \ is the use of `$v > 0` ? I'm confused how does it works.\n<|/ c |>\n<| c |>\n\
    `$v > 0` compares `$v` value with 0 and returns true or false. If it is positive,\
    \ it returns true, otherwise - false. This is how we filter numbers from positive\
    \ array using `array_filter()` function.\n<|/ c |>\n<| a dscore=1 tags=php |>\n\
    I believe you mean something like\n<code>\n$a = array(3, -2, 4);\n$a = array_filter($a,\
    \ function($v) { return $v > 0; });\n</code>\nwhere $a is the array\n<|/ a |>\n\
    <| a |>\nYou could always use something like this.\n<code>\n$array = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9);\n\n$positive = array_filter($array, function($value)\
    \ {\n    return $value > 0;\n});\n\nprint_r($positive);\n</code>\nOr you can just\
    \ use this\n<code>\n$array = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n\n$positive =\
    \ array_filter(array_map('intval', $array));\n\nprint_r($positive);\n</code>\n\
    <|/ a tags=php dscore=0 |>\n<| a tags=php |>\nYou can use array_filter\n<code>",
  "    return array_filter($l, function($v) { return $v > 0; });\n}\n", "  $positive\
    \ = array();\n  $l = array_filter($l);\n  if (count($l) > 0) {\n    foreach ($l\
    \ as $item) {\n      if ($item > 0) {\n        array_push($positive, $item);\n\
    \      }\n    }\n  }\n  return $positive;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThanks for this but it's not working for me. http://sandbox.onlinephpfunctions.com/code/9e3ed7dfd54580e89f90ab4db0d64eba479b84e3\n\
    <|/ c |>\n<| c |>\nWhat is your expected result? Can you post an example?\n<|/\
    \ c |>\n<| c |>\nMy expected result would be the array sorted first by positive\
    \ numbers and then by negative numbers. The negative numbers should not be placed\
    \ before the positive numbers. Here is an example of the array: http://sandbox.onlinephpfunctions.com/code/7d6bdcf030b84a2d833ffa4546fc0dfe4de8fd97\n\
    <|/ c |>\n<| c |>\nI've updated my answer. I've also added an example for you.\n\
    <|/ c |>\n<| a dscore=0 |>\nYou can use array_multisort() to sort both arrays\
    \ separately. Something like (untested):\n<code>\n$a = array(5,1,4,9,-9,3,6,2,8,7,2,5,4,0,10,5);\n\
    $b = array(5,1,4,9,-9,3,6,2,8,7,2,5,4,0,10,5);\narray_multisort($a, SORT_ASC);\n\
    array_multisort($b, SORT_ASC);\n</code>\nNote that array_multisort() requires\
    \ PHP 5.5 or higher.\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThat doesn't\
    \ do what the OP wants.\n<|/ c |>\n<| a dscore=0 |>\nJust sort it two times\n\
    <code>\narray_multisort($a, SORT_DESC, $b);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a tags=php,arrays,sorting |>\nTry this. \n<code>\n$a = array(5,1,4,9,-9,3,6,2,8,7,2,5,4,0,10,5);\n\
    $b = array(5,1,4,9,-9,3,6,2,8,7,2,5,4,0,10,5);\n$array = array();\n$array[0] =\
    \ $a;\n$array[1] = $b;\narray_multisort($array[0], SORT_DESC, $array[1], SORT_",
  "  return array_filter(\n    $l,\n    function ($element) {\n      return ($element\
    \ > 0);\n    }\n  );\n}\n", "    return array_filter($l, function($i) { return\
    \ $i >= 0; });\n}\n", "    return array_filter($l, function($value) {\n      \
    \  return $value >= 0;\n    });\n}\n\n/**\n * Get negative numbers in the array.\n\
    \ *\n * @param   array  $l\n * @return  array\n */", "    $p = array();\n    foreach\
    \ ($l as $num) {\n        if ($num > 0) $p[] = $num;\n    }\n    return $p;\n}",
  "  return array_filter($l, function($n) { return $n > 0; });\n}", "  foreach ($l\
    \ as $v) if ($v < 0) return $v;\n  return $l;\n}\n", "    foreach ($l as $i =>\
    \ $value) {\n        if ($value > 0) {\n            unset($l[$i]);\n         \
    \   $l[] = $value;\n        }\n    }\n    return $l;\n}\n", "  return array_filter($l,\
    \ 'is_numeric', ARRAY_FILTER_USE_BOTH);\n}\n", "    return array_filter($l, function($v)\
    \ {\n        return $v > 0;\n    });\n}\n\n/**\n * Returns the largest number\
    \ in an array.\n *\n * @param array $l\n *   The array.\n *\n * @return integer|string|null\n\
    \ *   The largest number in the array, or NULL if the array is empty.\n */", " \
    \ // Return only positive numbers in the array.\n  return array_filter($l, function\
    \ ($n) {\n    return ($n > 0) ? true : false;\n  });\n}\n", "  foreach ($l as\
    \ $key => $value) {\n    if ($value > 0) {\n      $l[$key] = $value;\n    }\n\
    \  }\n  return $l;\n}\n", "  return array_filter($l, function($v) { return $v\
    \ >= 0; });\n}\n", "    $p = array();\n    foreach ($l as $e) {\n        if ($e\
    \ > 0) {\n            $p[] = $e;\n        }\n    }\n    return $p;\n}", "    return\
    \ array_filter(\n        $l,\n        function ($value) {\n            return\
    \ $value >= 0;\n        }\n    );\n}", "  $positive = array();\n  foreach ($l\
    \ as $item) {\n    if ($item > 0) $positive[] = $item;\n  }\n  return $positive;\n\
    }\n", "  $p = array();\n  foreach ($l as $l) {\n    if ($l > 0) {\n      $p[]\
    \ = $l;\n    }\n  }\n  return $p;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
