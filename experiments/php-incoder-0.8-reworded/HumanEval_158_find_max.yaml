name: HumanEval_158_find_max
language: php
prompt: "<?php\n// Write a function that accepts an array of strings.\n// The array\
  \ contains different words. Return the word with maximum number\n// of unique characters.\
  \ If multiple strings have maximum number of unique\n// characters, return the one\
  \ which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"\
  of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"\
  game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"\
  aaaaaaa\"\nfunction find_max($words) {\n"
tests: "function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
  string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
  name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\"))\
  \ !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
  play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\"\
  , \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
  we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"))\
  \ !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
  b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
  play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    // Write your logic here\n}\n", "  $unique = array();\n  $max =\
    \ 0;\n  $word = \"\";\n  foreach ($words as $word) {\n    $unique[$word] = 0;\n\
    \  }\n  foreach ($unique as $key => $value) {\n    if ($value == 1) {\n      $word\
    \ = $key;\n    }\n    $max = $value > $max ? $value : $max;\n  }\n  return $word;\n\
    }\n", "  // Write your code here\n}\n\n$strings = [\n  \"name of a string\",\n\
    \  \"enam game\",\n  \"aaaaaaa bb cc\",\n];\nforeach($strings as $string) {\n\
    \  echo find_max($string), \"\\n\";\n}", "    arsort($words);\n    return reset($words);\n\
    }", "    $max = '';\n    $max_cnt = 0;\n    foreach ($words as $w) {\n       \
    \ $l = strlen($w);\n        if ($max_cnt < $l) {\n            $max_cnt = $l;\n\
    \            $max = $w;\n        }\n    }\n    return $max;\n}\n", "    // Write\
    \ your PHP implementation here.\n    $arr = array_count_values($words);\n    $max\
    \ = $words[0];\n    foreach ($arr as $word => $count) {\n        if ($count >\
    \ $max) {\n            $max = $count;\n        }\n    }\n    return $max;\n}\n",
  "    $max_chars = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $chars = count_chars($word);\n        if ($chars > $max_chars) {\n   \
    \         $max_chars = $chars;\n            $max_word = $word;\n        }\n  \
    \  }\n    return $max_word;\n}\n", "    // Your code here\n    $unique_chars =\
    \ [];\n    foreach ($words as $word) {\n        foreach (str_split($word) as $char)\
    \ {\n            if (!array_key_exists($char, $unique_chars)) {\n            \
    \    $unique_chars[$char] = 0;\n            }\n            $unique_chars[$char]++;\n\
    \        }\n    }\n    return array_keys($unique_chars, max($unique_chars))[0];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhy would you convert `$words` into a\
    \ string just to split it? Just loop `$words`. Also this code is not correct,\
    \ as it returns \"aaaaaaa\" when it should return \"bb\".\n<|/ c |>\n<| c |>\n\
    I did it because OP asked for \"the word with maximum number of unique characters\"\
    \ not just one \"word\". \nIf OP just wants first word, then just remove `implode()`\n\
    <|/ c |>\n<| c |>\nYou're right I overlooked that fact. Maybe I should delete\
    \ this answer because it's incorrect?\n<|/ c |>\n<| c |>\nNo, my answer is correct.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$words = 'name of a string';\n\n$words\
    \ = str_replace(' ', '', $words);\n$words = str_replace(\" \", '', $words);\n\
    $words = explode(\" \", $words);\n\n$uniqueChars = [];\nforeach ($words as $word)\
    \ {\n    $uniqueChars[] = str_split($word);\n}\n$uniqueChars = array_count_values($uniqueChars);\n\
    arsort($uniqueChars);\n\n$word = array_keys($uniqueChars)[0];\n\necho $word;\n\
    </code>\nOutput\n<code>\nstring\n</code>\n<|/ a tags=php |>\n<| c |>\nYour output\
    \ will be wrong if the string contains multiple words with same number of unique\
    \ characters. Try it with `array(\"aaa\", \"bbb\", \"ccc\")`.\n<|/ c |>\n<| c\
    \ |>\nthanks for pointing out, will update my answer\n<|/ c |>\n<| a tags=php\
    \ dscore=0 |>\n<code>\n$string = 'name of a string';\n\n$string  = str_replace('\
    \ ', '', $string);\n$string  = str_replace(\" \", '', $string);\n\n$arr  = explode(\"\
    \ \", $string);\n\n$uniqueChars = [];\nforeach ($arr as $word) {\n    $uniqueChars[]\
    \ = str_split($word);\n}\narsort($uniqueChars);", "    $arr = array();\n    foreach($words\
    \ as $word) {\n        $chars = array_count_values(str_split($word));\n      \
    \  $sorted_array = array();\n        foreach($chars as $char => $count) {\n  \
    \          $sorted_array[$char] = $count;\n        }\n        ksort($sorted_array);\n\
    \        $sorted_array = array_reverse($sorted_array);\n        $arr[] = $sorted_array;\n\
    \    }\n    $max = max(array_column($arr, max(array_column($arr, 'count'))));\n\
    \    foreach($arr as $i => $arr) {\n        foreach($arr as $key => $value) {\n\
    \            if($value['count'] == $max) {\n                return $words[$i];\n\
    \            }\n        }\n    }\n}\n</code>\n<|/ a |>\n<| a tags=arrays,php |>\n\
    I believe that the following is what you are looking for.\n<code>\n$array = array(\"\
    aaaaaaa\", \"bb\", \"cc\");\nusort($array, function($a, $b) {\n    // compare\
    \ the length first and if same compare alphabetically\n    return strlen($a) -\
    \ strlen($b) <=> strcmp($a, $b);\n});\n", "    // Write your code here\n    $wordCounts\
    \ = array_count_values($words);\n    $maxCount = max($wordCounts);\n    return\
    \ array_search(max($wordCounts), $wordCounts, true);\n}\n", "    // write your\
    \ code here\n}", "    // Your code here\n    $chars=array();\n    $counts=array();\n\
    \    foreach($words as $w){\n        $chars[]= strlen($w);\n        $counts[]=\
    \ count($w);\n    }\n    usort($counts, \"str_compare_int\");\n    for($i=0;$i<count($counts);$i++){\n\
    \        if($counts[$i]==1){\n            continue 2;\n        }\n    }\n    for($i=0;$i<count($counts);$i++){\n\
    \        if($counts[$i]>1){\n            continue 2;\n        }\n    }\n    $max=$words[0];\n\
    \    for($i=0;$i<count($chars);$i++){\n        if($chars[$i]==count($max)){\n\
    \            $max=$words[$i];\n        }\n    }\n    return $max;\n}\n", "   \
    \ $chars = array_count_values($words);\n    $max = key($chars);\n    foreach ($chars\
    \ as $index => $value) {\n        if ($value == $max) {\n            return $words[$index];\n\
    \        }\n    }\n    return $words[0];\n}\n", "    // Your code here\n    return\
    \ $words[0];\n}\n", "    $max = 0;\n    $str = '';\n    foreach ($words as $word)\
    \ {\n        $length = count($str);\n        for ($i = 0; $i < $length; ++$i)\
    \ {\n            $str .= $word[$i];\n        }\n        if (strlen($str) > $max)\
    \ {\n            $str = '';\n        }\n        $length++;\n    }\n    return\
    \ $str;\n}", "    // Write your solution here\n}", "    // Write your solution\
    \ here\n    $maxes = [];\n    foreach ($words as $word) {\n        foreach(str_split($word)\
    \ as $character) {\n            $count = $maxes[$character] ?? 0;\n          \
    \  $maxes[$character] = $count + 1;\n        }\n    }\n    arsort($maxes);\n \
    \   return key($maxes);\n}\n", "  $arr = array_count_values($words);\n  return\
    \ array_search((max($arr) + 1), $arr);\n}\n", "  $result = array();\n  $word_count\
    \ = array();\n  foreach ($words as $word) {\n    $word_count[$word] = 0;\n  }\n\
    \n  // Scan through array\n  foreach ($words as $word) {\n    foreach ($words\
    \ as $key => $value) {\n      if ($value == $word) {\n        continue;\n    \
    \  }\n\n      // Compare words and increment word count if they have the same\
    \ number of characters.\n      if (strlen($word) == strlen($value)) {\n      \
    \  $word_count[$word] += 1;\n        $word_count[$value]++;\n        if ($word_count[$word]\
    \ > $word_count[$value]) {\n          $result[] = $word;\n        }\n      }\n\
    \    }\n  }\n\n  // Check if word with most characters is first.\n  foreach ($word_count\
    \ as $word => $count) {\n    if ($count > count($result)) {\n      $result = $word;\n\
    \    }\n  }\n\n  return $result;\n}\n", "    sort($words);\n    $words[] = \"\"\
    ;\n    $max = $words[0]; // init the max value\n    $i = 0; // init the index\n\
    \    foreach ($words as $word) {\n        if ($word == \"\") continue;\n     \
    \   $count = 0; // init the count for the word\n        $temp = \"\";\n      \
    \  for ($i = 0; $i < strlen($word); $i++) {\n            $temp .= $word[$i];\n\
    \            $count++;\n        }\n        if ($count > $max) {\n            $max\
    \ = $count;\n        }\n        if ($count == $max) {\n            $temp .= \"\
    \";\n        }\n        if ($temp > $max) {\n            $max = $temp;\n     \
    \   }\n    }\n    return $max;\n}\n", "  // Write your code here\n}\n", "  //\
    \ Initialize your answer here\n  $answer = \"0\";\n  $len = count($words);\n \
    \ // Loop through the array and add each word to your answer if its length\n \
    \ // has maximum characters.\n  for ($i = 0; $i < $len; $i++) {\n    if (strlen($words[$i])\
    \ > $answer) {\n      $answer = strlen($words[$i]);\n    }\n  }\n  // Compare\
    \ length of answer with every word in the array\n  for ($i = 0; $i < $len; $i++)\
    \ {\n    if (strlen($words[$i]) == $answer) {\n      // If length of string is\
    \ equal to the answer, then check which\n      // word comes first alphabetically\n\
    \      if ($words[$i] < $words[$i + 1]) {\n        $answer = $words[$i];\n   \
    \   }\n    }\n  }\n  return $answer;\n}\n", "  $unique = array();\n  $max_unique\
    \ = count($words);\n\n  for ($i = 0; $i < count($words); $i++) {\n    for ($j\
    \ = $i + 1; $j < count($words); $j++) {\n      $unique[$words[$i]] += $words[$j];\n\
    \    }\n  }\n\n  uasort($unique, 'strnatcmp');\n\n  foreach ($unique as $key =>\
    \ $value) {\n    if ($value == $max_unique) {\n      return $key;\n    }\n  }\n\
    \n  return '';\n}\n\n$result = find_max($words);\necho $result;\n</code>\n<|/\
    \ a dscore=2 tags=sorting,arrays,php |>\n<| c |>\nNice answer! I'm curious how\
    \ long your function takes to run.\n<|/ c |>\n<| c |>\nThis solution works well\
    \ for me in 5.6.24, but in 7.0.17 I get the following error `Warning: uasort()\
    \ expects parameter 2 to be a valid callback, function 'strnatcmp' not found or\
    \ invalid function name`. I tried replacing `'strnatcmp'` with `'strnatcasecmp'`,\
    \ which didn't throw an error but didn't sort the array either.\n<|/ c |>\n<|\
    \ a tags=sorting,arrays,php |>\nHere is one more solution: \n<code>", "    if\
    \ (!is_array($words) or count($words) < 1) {\n        return false;\n    }\n \
    \   $wordCount = array();\n    foreach ($words as $word) {\n        if (!isset($wordCount[$word]))\
    \ {\n            $wordCount[$word] = 0;\n        }\n        $wordCount[$word]++;\n\
    \    }\n\n    arsort($wordCount);\n    $max = reset($wordCount);\n    return $wordCount[$max];\n\
    }\n</code>\n<|/ a |>\n<| a |>\n<code>\n<?php\n", "    $max = null;\n    $current_max\
    \ = null;\n    foreach ($words as $w) {\n        if (is_null($current_max) ||\
    \ count($w) == count($current_max)) {\n            $current_max = count($w) >\
    \ count($current_max) ? $w : $current_max;\n        } else {\n            $current_max\
    \ = count($w) > count($current_max) ? $w : $current_max;\n        }\n    }\n \
    \   return $current_max;\n}\n", "  $counts = array_count_values($words);\n  arsort($counts);\n\
    \  return array_keys($counts)[0];\n}\n", "    // Your code here\n}", "    $count\
    \ = 0;\n    $max_word_len = 0;\n    foreach ($words as $word) {\n        $count\
    \ = str_split($word);\n        $word_len = count($count);\n        if ($word_len\
    \ > $max_word_len) {\n            $max_word_len = $word_len;\n        }\n    }\n\
    \    foreach ($words as $word) {\n        $count = str_split($word);\n       \
    \ $word_len = count($count);\n        if ($word_len == $max_word_len) {\n    \
    \        $index = array_search($count, array_count_values($count));\n        \
    \    $word = $words[$index];\n        }\n    }\n    return $word;\n}\n", "  //\
    \ code here\n}\nprint(find_max(array(\"name\", \"of\", \"string\")));\nprint(find_max(array(\"\
    name\", \"enam\", \"game\")));\nprint(find_max(array(\"aaaaaaa\", \"bb\", \"cc\"\
    )));", "    asort($words);\n    $ret = 0;\n    foreach ($words as $word) {\n \
    \       if (strlen($word) == 0) {\n            $ret++;\n        }\n        else\
    \ {\n            $ret = max($ret, strlen($word));\n        }\n    }\n    return\
    \ $words[count($words) - 1];\n}\n", "  // Write your code in PHP\n}\n", "    $max\
    \ = 0;\n    $word = \"\";\n    foreach ($words as $word) {\n        $temp = str_split($word);\n\
    \        $temp_count = count($temp);\n        $temp_max = max($temp_count);\n\
    \        $temp_word = \"\";\n        for ($i = 0; $i < $temp_max; $i++) {\n  \
    \          $temp_word .= $temp[$i];\n        }\n        if ($temp_count > $max)\
    \ {\n            $max = $temp_count;\n            $word = $temp_word;\n      \
    \  }\n    }\n    return $word;\n}\n", "    \n    $max = 1;\n    $word_with_smallest_max\
    \ = array();\n    \n    foreach ($words as $word) {\n        \n        if (strlen($word)\
    \ > $max) {\n            $max = strlen($word);\n            $word_with_smallest_max\
    \ = $word;\n        }\n    }\n    \n    return $word_with_smallest_max;\n}\n",
  "    sort($words);\n    $count = array_count_values($words);\n    foreach ($count\
    \ as $key => $value) {\n        if($value > 1) {\n            return $key;\n \
    \       }\n    }\n    return $words[0];\n}", "    $words = array_flip($words);\n\
    \    asort($words);\n    $words[0] = 0;\n    $result = $words[0];\n    $count\
    \ = 1;\n    foreach ($words as $key => $value) {\n        $count = $count;\n \
    \       if ($value > $result) {\n            $result = $key;\n        }\n    }\n\
    \    return $result;\n}\n", "  // Write your code here\n  $words = array_count_values($words);\n\
    \  arsort($words);\n  $max = reset($words);\n  foreach($words as $word => $count)\
    \ {\n    if($count > $max) {\n      $max = $count;\n    }\n  }\n  return $max;\n\
    }\n</code>\n<|/ a |>\n<| a |>\n<code>\n$arr= array('aaaaaaa', 'bbbbbb', 'cccc',\
    \ 'ddddddd');\n\n$max = count($arr);\n$counts = array_count_values($arr);\nforeach($counts\
    \ as $key => $value){\n    if($value > $max){\n        $max = $value;\n    }\n\
    }\n\necho 'Maximum number of unique characters is '.$max;\n</code>\n<|/ a dscore=0\
    \ tags=php,unique,arrays |>\n<| a |>\nYou can do it this way:\n<code>", "  $max\
    \ = -99999;\n  $word = \"\";\n  $uniqueChars = 0;\n  $index = 0;\n  for ($x =\
    \ 0; $x < count($words); $x++) {\n    $words[$x] = trim($words[$x]);\n    $word\
    \ = substr($words[$x], 0, 1);\n    if ($word == \"\") {\n      break;\n    }\n\
    \    $index = strpos($words, $word);\n    if ($index == false || $index < 0) {\n\
    \      break;\n    }\n    if ($words[$index] == $word) {\n      continue;\n  \
    \  }\n    if ($word == \"\") {\n      break;\n    }\n    $uniqueChars = substr_count($words[$index],\
    \ $word);\n    if ($uniqueChars > $max) {\n      $max = $uniqueChars;\n      $words[$index]\
    \ = $word;\n      $word = \"\";\n    }\n  }\n  if ($word == \"\") {\n    return\
    \ $words[$index];\n  }\n  return $word;\n}", "  // Write your solution here\n}",
  "    $max = null;\n    $max_count = 0;\n    foreach ($words as $word) {\n      \
    \  $count = str_word_count($word);\n        if ($count > $max_count) {\n     \
    \       $max = $word;\n            $max_count = $count;\n        }\n    }\n  \
    \  return $max;\n}\n", "  // Initialize max number to zero and current position\
    \ as zero.\n  $max_number = 0;\n  $current_position = 0;\n  // Loop through all\
    \ the words.\n  foreach ($words as $word) {\n    // Get number of unique characters\
    \ in the current word.\n    $unique_characters = strlen($word);\n    // If number\
    \ of unique characters is bigger than current max number,\n    // update max number\
    \ with current position and current word.\n    if ($unique_characters > $max_number)\
    \ {\n      $max_number = $unique_characters;\n      $current_position = 0;\n \
    \   }\n    // If number of unique characters is same as current max number,\n\
    \    // increment current position by 1.\n    if ($unique_characters == $max_number)\
    \ {\n      $current_position++;\n    }\n  }\n  // Return word with max number\
    \ of unique characters in lexicographical order.\n  return $words[$current_position];\n\
    }", "    $max = null;\n    foreach ($words as $word) {\n        if (!is_string($word))\
    \ {\n            throw new \\InvalidArgumentException('Expected an array of strings');\n\
    \        }\n\n        $counter = array();\n        foreach ($word as $c) {\n \
    \           if (!isset($counter[$c])) {\n                $counter[$c] = 0;\n \
    \           }\n            $counter[$c]++;\n        }\n\n        if ($max ===\
    \ null || $counter['c'] > $max['c']) {\n            $max = $counter;\n       \
    \ }\n    }\n\n    return $max;\n}\n", "  foreach($words as $word) {\n    foreach($word\
    \ as $char) {\n      $count[$char]++;\n    }\n  }\n  $max = -1;\n  $word = \"\"\
    ;\n  foreach($count as $char => $count) {\n    if ($count > $max) {\n      $max\
    \ = $count;\n      $word = $char;\n    }\n  }\n  return $word;\n}\n", "    $counts\
    \ = [];\n    foreach ($words as $word) {\n        $counts[$word] = 0;\n    }\n\
    \    foreach ($words as $word) {\n        ++$counts[$word];\n    }\n    asort($counts);\n\
    \    return key($counts);\n}", "    $counter = array();\n\n    foreach ($words\
    \ as $word) {\n        if (!isset($counter[$word])) {\n            $counter[$word]\
    \ = 0;\n        }\n        $counter[$word] += 1;\n    }\n\n    foreach ($counter\
    \ as $word => $count) {\n        if ($count > 1) {\n            $letters = str_split($word);\n\
    \            $max_letter = null;\n            $max_letters = array();\n\n    \
    \        foreach ($letters as $letter) {\n                if ($max_letter ===\
    \ null || $max_letters[$letter] > $max_letter) {\n                    $max_letters[$letter]\
    \ = $max_letter;\n                    $max_letter = $letter;\n               \
    \ }\n            }\n\n            return $word;\n        }\n    }\n}\n", "   \
    \ // Your code here\n    $sorted = array_count_values($words);\n    $max = $sorted[$words[0]];\n\
    \    foreach($sorted as $key => $value){\n        if($value > $max){\n       \
    \     $max = $value;\n        }\n    }\n    return $words[$key];\n}", "  // Write\
    \ your code here\n  return $words[0];\n}\n", "    foreach($words as $word){\n\
    \        $chars = str_split($word);\n        $counts = array_count_values($chars);\n\
    \        $maxKey = array_search($counts, $counts);\n        if($maxKey > 0){\n\
    \            return $word;\n        }\n    }\n}\n", "  // Your code here\n  $max\
    \ = array_count_values($words);\n  arsort($max);\n  echo reset($max);\n}", " \
    \   $sorted = $words;\n    sort($sorted, SORT_STRING);\n    $longest = null;\n\
    \    $max_count = 0;\n    foreach ($sorted as $w) {\n        if (strlen($w) >\
    \ $max_count) {\n            $longest = $w;\n            $max_count = strlen($w);\n\
    \        }\n    }\n    return $longest;\n}\n", "  $count = array();\n  foreach($words\
    \ as $word) {\n    $unique = array_count_values(str_split($word));\n    $count[$word]\
    \ = $unique;\n  }\n  arsort($count);\n  $highest = key(array_slice($count, 0,\
    \ 1));\n  return $highest == count($count) ? $highest : $highest;\n}", "  $count\
    \ = array_count_values($words);\n  arsort($count);\n  return array_keys($count)[0];\n\
    }", "  $max = \"\";\n  $num = 0;\n  foreach ($words as $word) {\n    $length =\
    \ 0;\n    $letters = \"\";\n    foreach ($word as $c) {\n      $letters .= $c;\n\
    \      $length++;\n    }\n    if ($length > $num) {\n      $max = $word;\n   \
    \   $num = $length;\n    }\n  }\n  return $max;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't seem to work as well. `find_max` returns \"enam\" instead of \"game\"\
    \n<|/ c |>\n<| c |>\nI changed the code - now it finds multiple words with the\
    \ maximum number of unique chars. Now it works with your test cases.\n<|/ c |>\n\
    <| c |>\nAh yeah, I see what I did now. Thanks!\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me. When I put it into my code, it returns \"enam\" instead of \"game\"\
    . I also tried it with different words and it still returns \"enam\" instead of\
    \ \"game\".\n<|/ c |>\n<| c |>\nOh, yeah, I tested it with different words - now\
    \ it works.\n<|/ c |>\n<| a dscore=1 |>\nUsing a custom comparison function will\
    \ make the whole process much easier and less verbose. Try this:\n<code>\n$words\
    \ = ['name', 'of', 'string'];\n$max = $words[0];\nforeach ($words as $word) {\n\
    \    if ($word == $max) {\n        continue;\n    }\n    if ($wordCount($word)\
    \ > $max) {\n        $max = $word;\n    }\n}\necho $max;\n", "  $count = array_count_values($words);\n\
    \  arsort($count);\n  $word  = $words[0];\n  $count = $count[$word];\n  unset($words[0]);\n\
    \  foreach ($words as $word) {\n    $count += $count[$word];\n  }\n  return $word;\n\
    }", "  // Write your code in PHP. Return the word with maximum number of unique\
    \ characters.\n  $count = array();\n  foreach ($words as $word) {\n    $count[$word]\
    \ = 0;\n  }\n  foreach ($words as $word) {\n    foreach ($count as $k => $v) {\n\
    \      if ($v >= strlen($word)) {\n        $count[$k] = $v;\n      }\n    }\n\
    \  }\n  $max = max($count);\n  foreach ($count as $k => $v) {\n    if ($v == $max)\
    \ {\n      return $k;\n    }\n  }\n  return NULL;\n}\n", "  $count = array();\n\
    \  $words = array_count_values($words);\n  arsort($words);\n\n  foreach ($words\
    \ as $word => $count) {\n    break;\n  }\n\n  foreach ($words as $word => $count)\
    \ {\n    break;\n  }\n\n  return $word;\n}", "    $hash = [];\n    foreach ($words\
    \ as $w) {\n        $length = count($w);\n        for ($i = 0; $i < $length; $i++)\
    \ {\n            $hash[$i] += $w[$i];\n        }\n    }\n    arsort($hash);\n\
    \    return reset($hash);\n}\n</code>\n<code>\n<?php", "    return min($words);\n\
    }\n", "    if (count($words) === 0) {\n        throw new Exception('No words specified');\n\
    \    }\n\n    // This map will hold the words with maximum length\n    $longest\
    \ = [];\n    foreach ($words as $word) {\n        // Count the number of unique\
    \ characters in the word\n        $length = count(str_split($word));\n       \
    \ $longest[$length] = $word;\n    }\n\n    // This map will hold the words with\
    \ maximum number of unique characters\n    $result = $longest;\n    foreach ($longest\
    \ as $length => $word) {\n        // Iterate through the rest of the words and\
    \ find one that has maximum unique characters\n        $i = 1;\n        while\
    \ (isset($longest[$length]) && $i <= $length) {\n            $length++;\n    \
    \        while (isset($longest[$length]) && $i <= $length) {\n               \
    \ $i++;\n            }\n\n            $result[$length] = $word;\n        }\n \
    \   }\n    return key($result);\n}\n", "  // This code assumes that all of the\
    \ input words have the same length.\n  // This is not the case if some words are\
    \ longer than others, or if some words have\n  // different lengths. It's also\
    \ not an error or warning if input words are empty\n  // or just contain one word.\n\
    \  // Write code here!\n}", "    foreach ($words as $word) {\n        $unique\
    \ = array_count_values(str_split($word));\n        $max_key = array_keys($unique,\
    \ max($unique));\n        sort($max_key);\n        if ($max_key[0] == $word[0])\
    \ {\n            return $max_key[0];\n        }\n    }\n}\n", "    return max(array_count_values($words),\
    \ function($count) {\n        return $count['strlen'];\n    });\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nIf there are more than two distinct words, then \"\
    string\" will come first, because of the alphabetical order. But \"string\" is\
    \ not the maximum word. So I don't think this is a correct solution.\n<|/ c |>\n\
    <| c |>\nYou are right. I had the wrong logic initially, but I have corrected\
    \ it. I think the answer is still correct now.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for \"string\". It still returns \"name\" and not \"string\"\n<|/ c |>\n\
    <| a tags=algorithm,php,arrays |>\nHere is my solution. No loops needed.\n<code>\n\
    <?php\n\n$words = ['string', 'name', 'game', 'enam'];\n\n$sorted = array_count_values($words);\n\
    \narsort($sorted);\n\n$max = $sorted['string'];\n\necho $max;\n", "    $max_count\
    \ = -1;\n    $max_word = null;\n    foreach ($words as $word) {\n        $count\
    \ = count(array_unique(str_split($word)));\n        if ($count > $max_count) {\n\
    \            $max_count = $count;\n            $max_word = $word;\n        }\n\
    \    }\n    return $max_word;\n}\n", "    // Write your code here\n\n    $maxes\
    \ = 0;\n    $max = 0;\n    $array = $words;\n\n    foreach ($array as $word) {\n\
    \        $count = 0;\n        $maxword = $word;\n\n        foreach ($array as\
    \ $word) {\n            if ($word==$maxword) {\n                $count++;\n  \
    \          }\n        }\n\n        if ($count>$max) {\n            $max = $count;\n\
    \            $maxword = $word;\n        }\n    }\n\n    if ($max>$maxes) {\n \
    \       return $maxword;\n    } else {\n        return false;\n    }\n}", "  \
    \  $result = array();\n    $char_map = array();\n    $char_count = array();\n\
    \    $wordcount = count($words);\n    foreach ($words as $word) {\n        $char_count\
    \ = array();\n        foreach (str_split($word) as $char) {\n            $char_count[$char]\
    \ = isset($char_count[$char]) ? $char_count[$char] + 1 : 1;\n        }\n     \
    \   $char_map[] = $char_count;\n    }\n    $max = -1;\n    $pos = 0;\n    while\
    \ (count($char_map) > 0) {\n        $char = array_shift($char_map);\n        if\
    \ (isset($char[$max])) {\n            continue;\n        }\n        $pos++;\n\
    \        $max = $char[$max] = $pos;\n    }\n    return $words[$max];\n}\n</code>\n\
    <|/ a tags=algorithm,php dscore=2 |>\n<| a dscore=2 tags=algorithm,php |>\nHere\
    \ is my solution. I think it's not very efficient but simple.\n<code>", "    //\
    \ Return the word with maximum number of unique characters.\n    $max = $words[0];\n\
    \    $count = 1;\n    foreach ($words as $word) {\n        $char = mb_substr($word,\
    \ 0, 1);\n        $pos = mb_strpos($word, $char);\n        if ($pos === false)\
    \ {\n            $count = 1;\n        } else {\n            $count = $pos + 1;\n\
    \        }\n        if ($count > $max) {\n            $max = $count;\n       \
    \ }\n    }\n    return $max;\n}", "  $chars = array();\n  foreach ($words as $word)\
    \ {\n    if (strlen($word) > 0) {\n      $chars[] = $word;\n    }\n  }\n\n  usort($chars,\
    \ function($a, $b) {\n    return strlen($b) - strlen($a);\n  });\n\n  return $chars[0];\n\
    }\n", "    $max_len = array_reduce($words, function($a, $b) {\n        return\
    \ max($a, $b);\n    });\n    $words_in_len = array_count_values($words);\n   \
    \ $max_words = array_keys($words_in_len, $max_len);\n    return $max_words[0]\
    \ ?? false;\n}\n", "  foreach ($words as $word) {\n    $count = 1;\n    foreach\
    \ ($words as $w) {\n      if ($word === $w) {\n        $count++;\n      }\n  \
    \  }\n    if ($count > 1) {\n      return $word;\n    }\n  }\n}", "  return $words[0];\n\
    }", "    $max = -PHP_INT_MAX;\n    $curr = 0;\n    foreach ($words as $word) {\n\
    \        $curr += strlen($word);\n        if ($curr > $max) {\n            $max\
    \ = $curr;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n", "    // Write your PHP code here\n    $max_elements = array();\n    foreach\
    \ ($words as $key => $value) {\n        $unique_chars = count($value) - 1;\n \
    \       $max_elements[$unique_chars] = $words[$key];\n    }\n    usort($max_elements);\n\
    \    return $max_elements[0];\n}", "    // Write your code here\n    $max = $words[0];\n\
    \    foreach($words as $word){\n        $count=0;\n        $count_array = preg_split('//',\
    \ $word);\n        foreach($count_array as $char){\n            $count+=1;\n \
    \       }\n        if($count>$max){\n            $max = $count;\n        }\n \
    \   }\n    return $max;\n}", "    return count(array_unique(array_map(\"strlen\"\
    , $words))) ==\n           count($words) ? max($words) : find_max(array_values($words));\n\
    }\n", "    $max = -1;\n    foreach ($words as $word) {\n        $current_max =\
    \ count($word);\n        if ($current_max > $max) {\n            $max = $current_max;\n\
    \        }\n    }\n\n    foreach ($words as $word) {\n        $current_max = count($word);\n\
    \        if ($current_max != $max) {\n            return $word;\n        }\n \
    \   }\n\n    return $words[0];\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ dscore=1 |>\nYou can get unique keys of an array with array_keys and then sort\
    \ it with the array_sort function.\nExample:\n<code>\n$words = [\"aaaaaaa\", \"\
    bb\", \"cc\", \"aaaaaaa\"];\n$uniqueKeys = array_keys($words);\nsort($uniqueKeys);\n\
    print_r($uniqueKeys);\n</code>\n<|/ a |>\n<| c |>\nI think OP wants all the unique\
    \ values not the keys.\n<|/ c |>\n<| c |>\nyes you are right, I got confused with\
    \ the question.... but still, the answer is correct.\n<|/ c |>\n<| a dscore=1\
    \ |>\nPHP array sorting help:\n<code>\n$array = array('a', 'b', 'c', 'b', 'b');\n",
  "    $maxCount = 0;\n    $maxWord = \"\";\n    foreach ($words as $word) {\n   \
    \     if (strlen($word) == 0) {\n            continue;\n        }\n        $count\
    \ = count($word);\n        if ($count > $maxCount) {\n            $maxCount =\
    \ $count;\n            $maxWord = $word;\n        }\n    }\n    return $maxWord;\n\
    }\n", "    $unique_chars = array();\n    foreach ($words as $word) {\n       \
    \ $unique_chars[$word] = 0;\n    }\n    uasort($unique_chars, function($a, $b)\
    \ {\n        return strlen($a) - strlen($b);\n    });\n    $max = null;\n    foreach\
    \ ($unique_chars as $char => $count) {\n        if (null === $max || $max < $count)\
    \ {\n            $max = $count;\n        }\n    }\n    return $words[array_search($max,\
    \ $unique_chars)];\n}\n</code>\n<|/ a |>\n<| c |>\nThat is amazing. But I cannot\
    \ understand it at all. Can you please explain it to me?\n<|/ c |>\n<| c |>\n\
    : I've added a short explanation.\n<|/ c |>\n<| a dscore=1 |>\nHere's a one-liner:\n\
    <code>", "\t$max_count = 0;\n\t$max_word = \"\";\n\tforeach ($words as $word)\
    \ {\n\t\t$current_count = 1;\n\t\tforeach (str_split($word) as $char) {\n\t\t\t\
    $current_count += substr_count($char, \"a\");\n\t\t}\n\t\tif ($current_count >\
    \ $max_count) {\n\t\t\t$max_count = $current_count;\n\t\t\t$max_word = $word;\n\
    \t\t}\n\t}\n\treturn $max_word;\n}", "    $hash = [];\n    foreach ($words as\
    \ $word) {\n        $h = 0;\n        foreach (str_split($word) as $c) {\n    \
    \        $h += array_key_exists($c, $hash) ? $hash[$c] : 0;\n            $hash[$c]\
    \ = $h;\n        }\n    }\n    arsort($hash);\n    return reset($hash);\n}\n</code>\n\
    This solution is very fast. It uses O(n) time complexity and O(n) space. Since\
    \ it is sorted, it is also O(nlogn) time complexity and O(n) space.\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 tags=algorithm,php,sorting |>\n<code>", "    \n    // Write\
    \ your code here\n    $max_word_len = array();\n    \n    foreach ($words as $word)\
    \ {\n        $length = strlen($word);\n        if (!isset($max_word_len[$length]))\
    \ {\n            $max_word_len[$length] = 1;\n        } else {\n            $max_word_len[$length]\
    \ += 1;\n        }\n    }\n    \n    $sorted_max_word_len = arsort($max_word_len);\n\
    \    \n    return $words[$sorted_max_word_len[0]];\n}", "  $chars = array_count_values($words);\n\
    \  arsort($chars);\n  return key($chars);\n}\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ works like a charm, thank you. Although, I don't understand how this works.\
    \ Could you please elaborate?\n<|/ c |>\n<| c |>\nThe [array_count_values manual](http://php.net/array_count_values)\
    \ is pretty clear about how it works.\n<|/ c |>\n<| c |>\nThe function returns\
    \ the word with maximum count of unique characters, not character that comes first\
    \ in lexicographical order.\n<|/ c |>\n<| c |>\nI suppose I misunderstood the\
    \ question. I am not at all sure if \"string\" is supposed to be the first word\
    \ as alphabetical ordering would put \"of\" before \"string\" in the alphabet.\n\
    <|/ c |>\n<| c |>\nYes, that's exactly the problem. The first word has most unique\
    \ characters.\n<|/ c |>\n<| a tags=php dscore=0 |>\nThe solution is quite complicated,\
    \ although it works, is quite slow. \nThis code finds the first word with maximum\
    \ unique characters, that is the first word that comes first in lexicographical\
    \ order after sorting of unique characters:\n<code>\n<?php", "    // Your code\
    \ here\n    $max = 0;\n    $result = '';\n\n    foreach ($words as $word) {\n\
    \        // Count the number of occurences\n        $word_count = array_count_values(str_split($word));\n\
    \n        // Store the word with the highest number of occurences\n        if\
    \ (isset($word_count[$max])) {\n            $result = $word;\n        }\n    \
    \    $max++;\n    }\n\n    return $result;\n}", "    $hash = [];\n    foreach\
    \ ($words as $word) {\n        if (!isset($hash[$word])) {\n            $hash[$word]\
    \ = 1;\n        } else {\n            $hash[$word]++;\n        }\n    }\n    ksort($hash);\n\
    \    $max = $hash[0];\n    $word = null;\n    foreach ($hash as $num => $count)\
    \ {\n        if ($count > $max) {\n            $max = $count;\n            $word\
    \ = $words[$num];\n        }\n    }\n    return $word;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=arrays,php,algorithm dscore=1 |>\nI came across this problem and\
    \ I solved it in PHP by first getting an array of the unique words and then sorting\
    \ this array.\nHere is the code:\n<code>", "  $arr = array_count_values($words);\n\
    \  $max = -1;\n  foreach ($arr as $word => $count) {\n    if ($count > $max) {\n\
    \      $max = $count;\n      $result = $word;\n    }\n  }\n  return $result;\n\
    }\n</code>\n<|/ a |>\n<| a tags=php |>\nHere is another solution:\n<code>", " \
    \   // Write your implementation here.\n    $count = array_count_values($words);\n\
    \    krsort($count);\n    return reset($count);\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\n`ksort()` works fine on associative arrays. `array_count_values()` works\
    \ on both associative and numeric arrays. Neither is required by the OP's question.\n\
    <|/ c |>\n<| c |>\nThanks for the answer! But I still don't understand how I should\
    \ use it. I'm not a pro, I'm learning from books and googling, but what code should\
    \ I write in my case?\n<|/ c |>\n<| c |>\nThanks for the answer! But I still don't\
    \ understand how I should use it. I'm not a pro, I'm learning from books and googling,\
    \ but what code should I write in my case? I mean what code I should put in the\
    \ \"write your implementation here.\"?\n<|/ c |>\n<| c |>\n, I have added the\
    \ code. Hope that helps\n<|/ c |>\n<| c |>\nGreat thanks for all the answers.\
    \ But I still don't understand how I should use it. I'm not a pro, I'm learning\
    \ from books and googling, but what code should I write in my case? I mean what\
    \ code I should put in the \"write your implementation here.\"?\n<|/ c |>\n<|\
    \ a dscore=0 tags=arrays,sorting,php |>\n<code>\n<?php", "    foreach ($words\
    \ as $key => $value) {\n        $words[$key] = strtolower($value);\n    }\n  \
    \  $count = array_count_values($words);\n    $max = max($count);\n    foreach\
    \ ($count as $key => $value) {\n        if ($value == $max) {\n            return\
    \ $key;\n        }\n    }\n    return \"\";\n}\n", "  $result = array();\n  foreach\
    \ ($words as $word) {\n    $result[$word] = array_count_values(str_split($word))[count($result[$word])\
    \ - 1];\n  }\n  return max($result);\n}", "    $words = array_count_values($words);\n\
    \    krsort($words);\n    $max = key($words);\n    foreach ($words as $k => $v)\
    \ {\n        if ($v == $max) {\n            continue;\n        }\n        if ($v\
    \ > $max) {\n            $max = $k;\n        }\n    }\n    return $words[$max];\n\
    }\n", "    return $words[array_search(strnatcmp($words[0], '0'), $words)];\n}\n",
  "    $max_word = \"\";\n    $max_char_count = array();\n    foreach ($words as $word)\
    \ {\n        $count = 0;\n        foreach (str_split($word) as $c) {\n       \
    \     $count += strlen($c);\n        }\n        if ($count > count($max_char_count))\
    \ {\n            $max_word = $word;\n            $max_char_count = $count;\n \
    \       }\n    }\n    return $max_word;\n}\n</code>\n<|/ a tags=arrays,php |>\n\
    <| a tags=arrays,php dscore=0 |>\n<code>", "\t$count = 0;\n\t$best_word = \"\"\
    ;\n\tforeach ($words as $word) {\n\t\t$char = strlen($word);\n\t\t$unique_chars\
    \ = 0;\n\t\t$total_chars = 0;\n\t\tfor ($i = 0; $i < $char; $i++) {\n\t\t\t$total_chars\
    \ += $word[$i];\n\t\t\t$unique_chars += $word[$i];\n\t\t}\n\t\tif ($total_chars\
    \ > $count) {\n\t\t\t$count = $total_chars;\n\t\t\t$best_word = $word;\n\t\t}\n\
    \t}\n\treturn $best_word;\n}", "    $max = null;\n    $count = null;\n\n    foreach($words\
    \ as $word) {\n        if (is_null($count)) {\n            $count = 1;\n     \
    \       $max = $word;\n        } else {\n            if (strlen($word) == $count)\
    \ {\n                $count++;\n            } else {\n                $count =\
    \ strlen($word);\n                $max = $word;\n            }\n        }\n  \
    \  }\n\n    return $max;\n}", "  $max_word = \"\";\n  $max_count = 0;\n  foreach\
    \ ($words as $word) {\n    $word_count = str_word_count($word);\n    if ($word_count\
    \ > $max_count) {\n      $max_word = $word;\n      $max_count = $word_count;\n\
    \    }\n  }\n  return $max_word;\n}\n</code>\n<|/ a dscore=2 tags=php |>\n<| a\
    \ dscore=1 tags=php |>\n<code>", "    $letters = array();\n    foreach ($words\
    \ as $word) {\n        foreach (str_split($word) as $letter) {\n            $letters[$letter]++;\n\
    \        }\n    }\n    arsort($letters);\n    return reset($letters);\n}\n</code>\n\
    <|/ a tags=algorithm,php,string dscore=5 |>\n<| a dscore=3 |>\n<code>", "    $max\
    \ = 0;\n    $index = 0;\n    $length = count($words);\n    foreach ($words as\
    \ $word) {\n        if (count($word) == $max) {\n            $index = $i;\n  \
    \      }\n        $max = count($word);\n    }\n    return $words[$index];\n}\n",
  "    // Create an empty array.\n    $characters = array();\n\n    // For each word\
    \ in the array.\n    foreach ($words as $word) {\n        // Get the number of\
    \ unique characters in the word.\n        $characters[] = count_chars($word);\n\
    \    }\n\n    // Sort the characters in the array in descending order.\n    arsort($characters);\n\
    \n    // The word with maximum number of unique characters is stored in\n    //\
    \ the variable.\n    $max = 0;\n\n    // Iterate through the characters in the\
    \ array.\n    for ($i = 0; $i < count($characters); $i++) {\n        // If the\
    \ current character is greater than the maximum number of unique\n        // characters\
    \ stored in the variable, store the new maximum value.\n        if ($characters[$i]\
    \ > $max) {\n            $max = $characters[$i];\n        }\n    }\n\n    // Return\
    \ the word with the maximum number of unique characters.\n    return $words[array_search($max,\
    \ $characters)];\n}", "    // Write your code here\n    $count = array();\n  \
    \  foreach ($words as $word) {\n        $letters = str_split($word);\n       \
    \ $char_count = array_count_values($letters);\n        $count[] = $char_count;\n\
    \    }\n    arsort($count);\n    foreach ($count as $item) {\n        $max = array_slice($item,\
    \ 0);\n    }\n    return $max[0];\n}\n", "  // TODO: Write your code in PHP. Make\
    \ sure you pass the tests in the\n  // block below.\n}\n", "    // TODO: Implement\
    \ find_max() function\n    $letters = array_map(\"utf8_encode\", $words);\n  \
    \  $freq = array_count_values($letters);\n    return null;\n}", "    return $words[array_search(max(array_count_values($words)),\
    \ array_count_values($words))];\n}\n", "  // Initialize a $count variable to 0.\n\
    \  $count = 0;\n  // Initialize a $max_count variable to null.\n  $max_count =\
    \ null;\n  // Initialize an array to hold max count words.\n  $words_with_max_count\
    \ = 0;\n  foreach($words as $word) {\n    // Increment $count.\n    $count +=\
    \ strlen($word);\n    // If the current $count is greater than the $max_count,\
    \ update $max_count\n    // and add current word to $words_with_max_count.\n \
    \   if($count > $max_count) {\n      $max_count = $count;\n      $words_with_max_count[]\
    \ = $word;\n    }\n  }\n  // Return the $words_with_max_count array with max count\
    \ word.\n  return $words_with_max_count[0];\n}\n", "  return array_reduce($words,\
    \ function ($carry, $word) {\n    return max($carry, array_count_values(str_split($word)));\n\
    \  });\n}", "  // Initialize max and count with first element.\n  $max = $words[0];\n\
    \  $count = 0;\n\n  // Find the longest string in $words.\n  foreach ($words as\
    \ $word) {\n    // Increment count if current word has maximum number of unique\
    \ characters.\n    if (strlen($word) > strlen($max)) {\n      $max = $word;\n\
    \      $count = count($max);\n    }\n  }\n\n  // If all strings had the same number\
    \ of unique characters, return the\n  // first string with lexicographical order.\n\
    \  if ($count == count($max)) {\n    return $max;\n  }\n\n  // If count > 1, then\
    \ return the word which comes first.\n  return $count > 1 ? $words[0] : $max;\n\
    }\n</code>\n<|/ a dscore=2 tags=string,php,arrays,sorting |>\n<| a |>\nYou can\
    \ try this one also,\n<code>", "    if (count($words) == 1) {\n        return\
    \ $words[0];\n    }\n    $counts = array();\n    foreach ($words as $word) {\n\
    \        if (!isset($counts[$word])) {\n            $counts[$word] = 0;\n    \
    \    }\n        $counts[$word]++;\n    }\n    arsort($counts);\n    return $words[0];\n\
    }", "    return max(array_count_values($words), function ($counts) {\n       \
    \ return $counts['string'];\n    });\n}\n", "    $max = null;\n    foreach ($words\
    \ as $word) {\n        $counts[] = count(array_unique(str_split($word)));\n  \
    \  }\n    foreach ($counts as $count) {\n        if ($count > count($counts) ||\
    \ !$max) {\n            $max = $count;\n            $word = $words[$count];\n\
    \        }\n    }\n    return $word;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Nice. Nice use of `array_reduce`. I like that this is using O(n) space and not\
    \ `O(k)` space.\n<|/ c |>\n<| c |>\nthanks that's a great solution! My solution\
    \ is still O(n) space but O(n) time!\n<|/ c |>\n<| a tags=arrays,php |>\nHere's\
    \ a recursive solution using arrays:\n<code>", "  if (empty($words)) {\n    return\
    \ null;\n  }\n  $words = array_unique($words);\n  if (count($words) == 1) {\n\
    \    return $words[0];\n  }\n  sort($words);\n  $max = array_shift($words);\n\
    \  foreach ($words as $word) {\n    if (count($word) > strlen($max)) {\n     \
    \ $max = substr($max, 0, -1);\n    }\n  }\n  return $max;\n}\n", "  $unique_chars\
    \ = [];\n  foreach ($words as $word) {\n    $unique_chars = array_merge(array_count_values(str_split($word)),\
    \ $unique_chars);\n  }\n\n  $sorted_unique_chars = array_keys($unique_chars, max($unique_chars));\n\
    \  return $sorted_unique_chars[0];\n}", "    // Write your PHP implementation\
    \ here.\n}\n", "    $max = -99999; // -ve number indicates no word has a max number\
    \ of unique chars\n    $maxWord = null;\n    foreach($words as $word) {\n    \
    \    $numChars = count($word);\n        if($numChars > $max) {\n            $maxWord\
    \ = $word;\n            $max = $numChars;\n        } elseif($numChars == $max)\
    \ {\n            $maxWord = $word;\n        }\n    }\n    return $maxWord;\n}\n",
  "    $result = \"\";\n    $word_count = count($words);\n    for($i = 0; $i < $word_count;\
    \ $i++) {\n        if($i == 0) {\n            $result = $words[$i];\n        }\
    \ else {\n            $unique_char_count = 0;\n            $prev_char = \"\";\n\
    \            $unique_char_index = 0;\n            for($j = $i; $j < $word_count;\
    \ $j++) {\n                if($words[$j] == $prev_char) {\n                  \
    \  $unique_char_count++;\n                } else {\n                    $unique_char_count\
    \ = 0;\n                    break;\n                }\n                $prev_char\
    \ = $words[$j];\n                $unique_char_index++;\n            }\n      \
    \      if($unique_char_count == $unique_char_index) {\n                $result\
    \ = $words[$i];\n            }\n        }\n    }\n    return $result;\n}\n", " \
    \   return array_reduce($words, function ($count, $word) {\n        $count[$word]\
    \ = count($count);\n        return $count;\n    }, [\"-\"]);\n}\n", "  if (count($words)\
    \ == 0) {\n    return \"\";\n  }\n  $max = 1;\n  $first_pos = 0;\n  foreach ($words\
    \ as $word) {\n    if (strlen($word) > $max) {\n      $maxstr = $word;\n     \
    \ $max_pos = 0;\n    }\n    foreach (str_split($word) as $pos) {\n      if ($pos\
    \ == $first_pos) {\n        $first_pos++;\n      }\n      if ($pos + 1 > $max_pos)\
    \ {\n        $max_pos = $pos + 1;\n      }\n    }\n  }\n  return $maxstr;\n}\n",
  "    $max_word = \"\";\n    $max_count = 0;\n    foreach ($words as $word) {\n \
    \       if (count(array_count_values(str_split($word))) > $max_count) {\n    \
    \        $max_count  = count(array_count_values(str_split($word)));\n        \
    \    $max_word  = $word;\n        }\n    }\n    return $max_word;\n}\n</code>\n\
    <|/ a tags=algorithm,php,string,arrays |>\n<| c |>\nI didn't downvote this answer,\
    \ but I think it's because this does not produce the expected results. Please\
    \ try `find_max(array(\"aaaaaaa\", \"bbbb\", \"cc\"))`. The answer is \"bbbb\"\
    , which is clearly not the expected result.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ this out. I edited my answer and it's now working.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for \"aaaaaaa\", \"bb\", \"ccc\" but \"aaaaaaa\", \"bbbbb\", \"\
    cc\".  I believe it needs to be: count(array_count_values(str_split($word))) >\
    \ $max_count\n<|/ c |>\n<| c |>\nThanks, you are right. I've edited the answer\
    \ and now it's working.\n<|/ c |>\n<| a tags=algorithm,php,string,arrays dscore=2\
    \ |>\n<code>\n<?php\n$arr=array();\n$arr[0] = \"aaa\";\n$arr[1] = \"bb\";\n$arr[2]\
    \ = \"bbb\";\n$arr[3] = \"cc\";\n$arr[4] = \"ccc\";\n$arr[5] = \"aa\";\n\n$arrSort\
    \ = sort($arr);\n$highest_value = array_pop($arrSort);\n$highest_count = count($arr);\n\
    $highest_word_index = 0;\nfor ($i=0; $i<count($arr); $i++) {\n    if($arr[$i]\
    \ == $highest_value) {\n        $highest_count--;\n        if($highest_count ===\
    \ 0) {\n            $highest_word_index = $i;\n        }\n    }\n}\necho \"Highest\
    \ count word: \".$highest_value.\", occuring at: \".$highest_word_index;\n</code>\n\
    <|/ a |>\n<| a dscore=2 |>\nTry this.\n<code>", "  $count = array_count_values($words);\n\
    \  arsort($count);\n  return key($count);\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nOh, sorry, I misread the OP's expected output. I'll edit the answer.\n\
    <|/ c |>\n<| c |>\nNice one +1 for the elegant solution\n<|/ c |>\n<| c |>\n+1\
    \ Nice solution I like it\n<|/ c |>\n<| a |>\nYou could use array_count_values,\
    \ arsort, and then get the last element.\n<code>\n$array = array(\"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"", "    $chars\
    \ = [];\n    $counts = [];\n    foreach ($words as $word) {\n        foreach ($chars\
    \ as $char) {\n            $counts[$char] = isset($counts[$char]) ? $counts[$char]\
    \ + 1 : 1;\n            if ($counts[$char] > 1) {\n                continue 2;\n\
    \            }\n        }\n        $chars[] = $word[0];\n    }\n    return $chars[array_search(max($counts),\
    \ $counts)];\n}\n</code>\nThe above function returns an array of unique characters\
    \ and the position of the maximum in that array. \nThen, it just returns the first\
    \ element of that array with the highest number of unique characters.\nThe above\
    \ function can be tested here:\nhttps://3v4l.org/FhGkE\n<|/ a dscore=1 tags=sorting,string,php,unique\
    \ |>\n<| a tags=sorting,string,php,unique |>\n<code>\n<?php\n$string = \"hello\
    \ my name is sunny sun sun sun sun sunny sun sun\";\n$words = explode(\" \", $string);\n\
    $result = array_count_values($words);\n$result = $result[0];\n$result = $result[0];\n\
    var_dump($result);", "    $max = 0;\n    $index = 0;\n    $result = false;\n \
    \   $letters = array_fill(0, 26, -1);\n\n    foreach ($words as $word) {\n   \
    \     foreach (str_split($word) as $letter) {\n            $letters[$letter] =\
    \ $letters[$letter] + 1;\n        }\n\n        if ($letters[$letter] > $max) {\n\
    \            $index = 0;\n            $max = $letters[$letter];\n            $result\
    \ = $word;\n        } else if ($letters[$letter] == $max) {\n            $index\
    \ = 0;\n            $result = $word;\n        }\n    }\n\n    return $result;\n\
    }\n", "    foreach ($words as $key => $value) {\n        if (strlen($value) >\
    \ strlen($words[$key])) {\n            $words[$key] = $value;\n        }\n   \
    \ }\n    arsort($words);\n    return $words[0];\n}\n", "    foreach ($words as\
    \ $key => $word) {\n        $unique = array_count_values(str_split($word));\n\
    \        $maxValue = $unique[max($unique)];\n        if ($maxValue > count($words[$key]))\
    \ {\n            return $words[$key];\n        }\n    }\n}\n</code>\n<|/ a |>\n\
    <| a tags=algorithm,php |>\nTry this\n<code>\n<?php\n$words = array('abc', 'aac',\
    \ 'bac');\n$wordslength = count($words);\nforeach ($words as $key => $word) {\n\
    \    foreach (str_split($word) as $character) {\n        $counts[$character]++;\n\
    \    }\n    $max = $counts[max($counts)];\n    $keys[$key] = $words[$key];\n \
    \   if ($max === count($word)) {\n        break;\n    }\n}\nif (count($keys) ===\
    \ $wordslength) {\n    echo 'Word not found';\n} else {\n    echo 'Word is ' .\
    \ $keys[array_search(max($counts), $counts)];\n}", "    $max = $words[0];\n  \
    \  foreach ($words as $word) {\n        if (strlen($word) > strlen($max)) {\n\
    \            $max = $word;\n        }\n    }\n    return $max;\n}\n", "    $result\
    \ = \"\";\n    foreach ($words as $word) {\n        $count = 1;\n        for ($i\
    \ = 1; $i < strlen($word); $i++) {\n            $current_char = $word[$i];\n \
    \           foreach ($words as $other) {\n                $other_char = $other[$i];\n\
    \                if ($current_char == $other_char) {\n                    $count++;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     if ($count > strlen($result)) {\n            $result = $word;\n        }\n\
    \    }\n    return $result;\n}", "  $unique = [];\n  $count = 0;\n\n  foreach\
    \ ($words as $word) {\n    if (in_array($word, $unique)) {\n      $count++;\n\
    \    } else {\n      $unique[$count] = $word;\n    }\n  }\n\n  arsort($unique);\n\
    \  return $unique[0];\n}", "    if (count($words) == 0) return 0;\n    $max =\
    \ 0;\n    $letters = array();\n    foreach ($words as $word) {\n        $letters\
    \ = array_merge($letters, preg_split('//', $word, -1, PREG_SPLIT_NO_EMPTY));\n\
    \    }\n    $letters = array_unique($letters);\n    foreach ($letters as $letter)\
    \ {\n        if (count($words) >= $max && strlen($words[$max]) <= strlen($letter))\
    \ {\n            $max = $max;\n        } else if (count($words) >= $max) {\n \
    \           $max = count($words);\n        }\n    }\n    return $words[$max];\n\
    }\n</code>\n<|/ a |>\n<| a tags=string,arrays,php,sorting dscore=0 |>\nHere is\
    \ a very basic solution that just checks if the string contains duplicates and\
    \ returns the longest one. You can use preg_match_all() to do the actual counting\
    \ of letters. This is what I have so far and it works fine for me:\n<code>", " \
    \   // Write your code here\n}\n", "    if (!is_array($words)) {\n        throw\
    \ new InvalidArgumentException(\"The input is not an array\");\n    }\n    \n\
    \    $length = count($words);\n    if ($length == 0) {\n        return null;\n\
    \    }\n    \n    $max = 0;\n    $max_word = null;\n    \n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $word = strtolower($words[$i]);\n        $count\
    \ = array_count_values(str_split($word));\n        $counts = array_map('strlen',\
    \ array_keys($count));\n        $counts = array_filter($counts);\n        if ($max\
    \ < count($counts)) {\n            $max = count($counts);\n            $max_word\
    \ = $word;\n        }\n    }\n    \n    return $max_word;\n}\n", "    $unique_lengths\
    \ = array_count_values($words);\n    arsort($unique_lengths);\n    $highest_index\
    \ = array_keys($unique_lengths)[0];\n    return $words[$highest_index];\n}\n",
  "    $result = [];\n    foreach($words as $word) {\n        $chars = count($word);\n\
    \        $counts = array_count_values($word);\n        $sorted = [];\n       \
    \ ksort($counts);\n        foreach($counts as $key => $value) {\n            $sorted[$key]\
    \ = $value;\n        }\n        $result = $word != $sorted[0] ? $word : max($result,\
    \ $sorted);\n    }\n    return $result;\n}\n", "  $counter = array();\n  foreach\
    \ ($words as $word) {\n    $counter[$word] = count($word);\n  }\n  return $counter\
    \ = array_keys($counter, $counter[0]);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This doesn't work because `'aaa'` is less than `'a'` because it is `'a'` but with\
    \ a lowercase `a`. So the count function returns the string with the lowest length\
    \ and therefore `'aaa'` is returned before `'aaa'` because it has 2 `a`s. I suggest\
    \ changing `count($word)` to `strlen($word)`.\n<|/ c |>\n<| c |>\nI fixed that\
    \ bug in code thanks for noticing. `strlen` function returns number of characters\
    \ in string so it works as charcount.\n<|/ c |>\n<| c |>\nStill doesn't work as\
    \ expected for multiple words. `find_max(array(\"name\", \"of\", \"name\"))` returns\
    \ `\"name\"` instead of `\"of\"`\n<|/ c |>\n<| a dscore=1 |>\nA more readable\
    \ version of my answer:\n<code>\n$myarray = [\n    \"name\" => \"Jimmy\",\n  \
    \  \"of\" => \"Guns worn by people in battle\",\n    \"string\" => \"This is an\
    \ example string for testing the function\",\n    \"string2\" => \"This is another\
    \ string for testing the function\",\n];\n", "    return max($words, function\
    \ ($elem) {\n        return count(array_unique(str_split($elem)));\n    });\n\
    }\n", "  $counts = array_count_values($words);\n  $key = array_search(max($counts),\
    \ $counts);\n  return $key?$words[$key]:\"No strings have unique characters\"\
    ;\n}\n\n$words = [\n  \"to\", \"the\", \"of\", \"and\", \"a\", \"in\", \"at\"\
    , \"of\", \"and\", \"the\", \"to\",\n  \"in\", \"at\", \"of\", \"and\", \"the\"\
    , \"to\", \"in\", \"at\", \"of\", \"and\", \"the\",\n  \"to\", \"in\", \"at\"\
    , \"of\", \"and\", \"the\", \"to\", \"in\", \"at\", \"of\", \"and\",\n  \"the\"\
    , \"to\", \"in\", \"at\", \"of\", \"and\", \"the\", \"to\", \"in\", \"at\", \"\
    of\",\n  \"and\", \"the\", \"to\", \"in\", \"at\", \"of\", \"and\", \"the\", \"\
    to\", \"in\", \"at\",\n  \"of\", \"and\", \"the\", \"to\", \"in\", \"at\", \"\
    of\", \"and\", \"the\", \"to\", \"in\",\n  \"at\", \"of\", \"and\", \"the\", \"\
    to\", \"in\", \"at\", \"of\", \"and\", \"the\", \"to\",\n  \"in\", \"at\", \"\
    of\", \"and\", \"the\", \"to\", \"in\", \"at\", \"of\", \"and\", \"the\",\n  \"\
    to\", \"in\", \"at\", \"of\", \"and\", \"the\", \"to\", \"in\", \"at\", \"of\"\
    , \"and\",\n  \"the\", \"to\", \"in\", \"at\", \"of\", \"and\", \"the\", \"to\"\
    , \"in\", \"at\", \"of\",\n  \"and\", \"the\", \"to\", \"in\", \"at\", \"of\"\
    , \"and\", \"the\", \"to\", \"in\", \"at\",\n  \"of\", \"and\", \"the\", \"to\"\
    , \"in\", \"at\", \"of\", \"and\", \"the\", \"to\", \"in\",\n  \"at\", \"of\"\
    , \"and\", \"the\", \"to\", \"in\", \"at\", \"of\", \"and\", \"the\", \"to\",\n\
    \  \"in\", \"at\", \"of\", \"and\", \"the\", \"to\", \"in\", \"at\", \"of\", \"\
    and\", \"the\",\n  \"to\", \"in\", \"at\", \"of\", \"and\", \"the\", \"to\", \"\
    in\", \"at\", \"of\", \"and\",\n  \"the\", \"to\", \"in\", \"at\", \"of\", \"\
    and\", \"the\", \"to\", \"in\", \"at\", \"of\",\n  \"and\", \"the\", \"to\", \"\
    in\", \"at\", \"of\", \"and\", \"the\", \"to\", \"in\", \"at\",\n  \"of\", \"\
    and\", \"the\", \"to\", \"in\", \"at\", \"of\", \"and\", \"the\", \"to\", \"in\"\
    ,\n  \"at\", \"of\", \"and\", \"the\", \"to\", \"in\", \"at\", \"of\", \"and\"\
    , \"the\", \"to\",\n  \"in\", \"at\", \"of\", \"and\", \"the\", \"", "    // Write\
    \ your PHP code here.\n    sort($words);\n    $max = 0;\n    $temp = \"\";\n \
    \   foreach ($words as $w) {\n        $len = strlen($w);\n        if ($len > $max)\
    \ {\n            $temp = $w;\n            $max = $len;\n        } elseif ($len\
    \ == $max) {\n            $temp = substr($w, 0, $max);\n        }\n    }\n   \
    \ return $temp;\n}\n", "    $max = 0;\n    foreach ($words as $word) {\n     \
    \   if (strlen($word) > $max) {\n            $max = strlen($word);\n        }\n\
    \    }\n\n    foreach ($words as $word) {\n        $unique = 0;\n        for ($i\
    \ = 0; $i < $max; $i++) {\n            if (strpos($word, $words[$i]) === FALSE)\
    \ {\n                $unique++;\n            }\n        }\n        if ($unique\
    \ > $max) {\n            return $word;\n        }\n    }\n    return $words[0];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI'm really sorry for my incovenience,\
    \ but I tried to run this code and I got this \"Parse error: syntax error, unexpected\
    \ '[' in /home/.../find_max.php on line 7\". Can you fix it? Thanks.\n<|/ c |>\n\
    <| c |>\nsorry about the typo in the array declaration (it should be `$words =\
    \ array(\"name\", \"of\", \"string\");`). I don't have the error you mentioned\
    \ (but have another issue with the algorithm itself). I will post my code with\
    \ the appropriate error when I have the time to test it properly.\n<|/ c |>\n\
    <| c |>\nThank you so much for your help! I really appreciate it :)\n<|/ c |>\n\
    <| c |>\nsorry for another question: how do I get the return value of this code?\
    \ I mean, how do I print it? I tried `echo find_max($words);` but it's giving\
    \ me a syntax error.\n<|/ c |>\n<| c |>\nI updated my answer to add another possible\
    \ implementation\n<|/ c |>\n<| a dscore=0 |>\nThis should work\n<code>\n$words\
    \ = array(\"name\", \"of\", \"string\");\n$max = 0;\nforeach ($words as $word)\
    \ {\n    if (strlen($word) > $max) {\n        $max = strlen($word);\n    }\n}\n\
    \nforeach ($words as $word) {\n    $unique = 0;\n    for ($i = 0; $i < $max; $i++)\
    \ {\n        if (strpos($word, $words[$i]) === FALSE) {\n            $unique++;\n\
    \        }\n    }\n    if ($unique > $max) {\n        echo $words[$i];\n    }\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nI tried to run this code and I\
    \ got this \"Parse error: syntax error, unexpected '[' in /home/.../find_max.php\
    \ on line 7\". Can you fix it? Thanks.\n<|/ c |>\n<| a dscore=", "    $counter\
    \ = array();\n    foreach ($words as $word) {\n        if (!isset($counter[$word]))\
    \ {\n            $counter[$word] = 0;\n        }\n        $counter[$word]++;\n\
    \    }\n    arsort($counter);\n    return $counter;\n}", "    // Write your code\
    \ in PHP\n    $wordList = array();\n    foreach($words as $word){\n        foreach(str_split($word)\
    \ as $letter){\n            $wordList[$letter]++;\n        }\n    }\n    ksort($wordList);\n\
    \    foreach ($wordList as $key => $value) {\n        if ($value > count($words))\
    \ return $key;\n    }\n}", "    sort($words);\n    $max = count($words);\n   \
    \ $count = 1;\n    foreach ($words as $word) {\n        if (count($word) > $count)\
    \ {\n            $max = count($word);\n            $count = 1;\n        }\n  \
    \      $count++;\n    }\n    if ($count > $max) {\n        return $words[$max-1];\n\
    \    } else {\n        return $words[0];\n    }\n}\n</code>\nThe same example\
    \ works in PHP\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nHere's an algorithm that\
    \ takes your input and sorts it in descending order, starting at the largest word\
    \ and counting the number of characters in each word. After it's finished, it\
    \ returns the word that comes first (alphabetically).\n<code>\n<?php", "    return\
    \ $words[0];\n}", "    $unique = array();\n    $counter = 0;\n    foreach ($words\
    \ as $word) {\n        if (!array_key_exists($word, $unique)) {\n            $unique[$word]\
    \ = 0;\n            $counter++;\n        }\n        $unique[$word]++;\n    }\n\
    \    arsort($unique);\n    $max = $words[0];\n    foreach ($unique as $key =>\
    \ $count) {\n        if ($count > $max) {\n            $max = $count;\n      \
    \  }\n    }\n    return $max;\n}\n", "  $max_count = 0;\n  $res = '';\n  foreach($words\
    \ as $word) {\n    $count = count(array_count_values(str_split($word)));\n   \
    \ if ($count > $max_count) {\n      $res = $word;\n      $max_count = $count;\n\
    \    }\n  }\n  return $res;\n}\n", "  // Write your code here\n  for($i = 0; $i\
    \ < count($words); $i++)\n  {\n    $count[$i] = count(array_unique($words[$i]));\n\
    \  }\n  $max = 0;\n  for($i = 0; $i < count($words); $i++)\n  {\n    if($count[$i]\
    \ > $max)\n    {\n      $max = $count[$i];\n    }\n  }\n  $first_value = array_search($max,\
    \ $count);\n  return $words[$first_value];\n}\n", "    // Write your code here\n\
    }", "    $unique_chars = array_count_values($words);\n    arsort($unique_chars);\n\
    \    return $unique_chars[reset($unique_chars)];\n}\n", "    $wordCount = array();\n\
    \    foreach($words as $word) {\n        $wordCount[$word] = 0;\n    }\n    foreach($words\
    \ as $word) {\n        foreach($wordCount as $key => $count) {\n            if(strcasecmp($word,\
    \ $key) === 0) {\n                $wordCount[$key] += 1;\n                break;\n\
    \            }\n        }\n    }\n    foreach($wordCount as $key => $count) {\n\
    \        if($count > $wordCount[$key]) {\n            $max = $key;\n        }\n\
    \    }\n    return $max;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is awesome! I wasn't\
    \ aware of the string sorting functions.\n<|/ c |>\n<| c |>\nGreat answer, however,\
    \ I'm getting some errors with it for larger strings. It's throwing errors on\
    \ every line with strpos and stripos functions. Any idea why that is?\n<|/ c |>\n\
    <| c |>\nI figured out the problem. It was because I was using an old version\
    \ of PHP. It didn't like some of the new function calls I used (strpos and stripos)\
    \ so I changed it to substr and it works just fine.\n<|/ c |>\n<| c |>\nI see\
    \ now, the error was actually an error in my code. You're right, those functions\
    \ were indeed outdated and no longer supported.\n<|/ c |>\n<| c |>\nI did some\
    \ performance tests, and this method doesn't take into account cases with multiple\
    \ words with the same maximum length. It only checks the longest word. The following\
    \ test is valid: `$words = array(\"word\", \"word\");\n$words = array($words);\n\
    var_dump(find_max($words));`\n<|/ c |>\n<| a tags=php,string |>\nA variation on\
    \ a theme of's answer but just to give an alternative to the OP I thought I'd\
    \ put it up:\n<code>\n$words = array(\"word\", \"word\");\n$words = array($words);\n\
    var_dump(find_max($words));\n", "  $chars = array_count_values($words);\n  arsort($chars);\n\
    \  return key($chars);\n}\n", "    $max = null;\n    $max_len = 0;\n    foreach\
    \ ($words as $word) {\n        $counts = array_count_values(str_split($word));\n\
    \        if ($counts['a'] > $counts['b']) {\n            if ($counts['b'] > $counts['c'])\
    \ {\n                $max = $word;\n                $max_len = $counts['a'];\n\
    \            } else {\n                $max = $word;\n                $max_len\
    \ = $counts['b'];\n            }\n        } else if ($counts['b'] > $counts['c'])\
    \ {\n            $max = $word;\n            $max_len = $counts['b'];\n       \
    \ } else {\n            $max = $word;\n            $max_len = $counts['c'];\n\
    \        }\n    }\n    return $max;\n}\n", "    foreach ($words as $word) {\n\
    \        $char = array();\n        $unique = array_count_values(str_split($word));\n\
    \        arsort($unique);\n        $max = current($unique);\n        $count =\
    \ count($unique);\n        if ($count > $max) {\n            $max = $count;\n\
    \            $word = $word;\n        }\n    }\n    return $word;\n}\n", "    //\
    \ Write your implementation here\n\n}", "    $max = $words[0];\n    foreach ($words\
    \ as $word) {\n        $c = count($word);\n        if ($c > strlen($max))\n  \
    \          $max = $word;\n    }\n    return $max;\n}\n", "    $arr = array();\n\
    \    foreach ($words as $word) {\n        if (!isset($arr[$word])) {\n       \
    \     $arr[$word] = 1;\n        } else {\n            $arr[$word]++;\n       \
    \ }\n    }\n    arsort($arr);\n    return $arr[0];\n}\n", "    $unique_count =\
    \ array_count_values($words);\n    $max_count = max($unique_count);\n    foreach\
    \ ($unique_count as $k => $v) {\n        if ($v == $max_count) {\n           \
    \ return $words[$k];\n        }\n    }\n}", "    $freq = array_count_values($words);\n\
    \    $max = $freq[0];\n    foreach ($freq as $key => $value) {\n        if ($value\
    \ == $max) {\n            $max = $key;\n        }\n    }\n    return $words[$max];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\nUsing array_count_values you can do it\
    \ as:\n<code>\n<?php", "    // initialize count to zero\n    $count = 0;\n   \
    \ // initialize max to zero\n    $max = 0;\n    // initialize max to zero\n  \
    \  $maxWord = \"\";\n    // traverse through each word\n    foreach ($words as\
    \ $word) {\n        // increase count by 1\n        $count += 1;\n        // compare\
    \ the count to the maximum\n        if ($count > $max) {\n            // if the\
    \ count is greater than maximum\n            // assign count to maximum and keep\
    \ the word with maximum count\n            $max = $count;\n            $maxWord\
    \ = $word;\n        }\n    }\n    // return the maximum word\n    return $maxWord;\n\
    }\n", "    // initialize variables\n    $max_lenght = 0;\n    $word_found = null;\n\
    \    $max_char_count = 0;\n\n    // loop through the words\n    foreach ($words\
    \ as $word) {\n        // get the word length\n        $word_len = strlen($word);\n\
    \n        // check word length\n        if ($word_len > $max_lenght) {\n     \
    \       $max_lenght = $word_len;\n            $word_found = $word;\n        }\
    \ else if ($word_len == $max_lenght) {\n            // if the word is the same\
    \ length as the previous one\n            // check how many unique characters\
    \ it has\n            $char_count_array = array_count_values(str_split($word));\n\
    \n            // if there is more then one unique character\n            // choose\
    \ the one which comes first\n            if (count($char_count_array) > 1) {\n\
    \                ksort($char_count_array);\n\n                $max_char_count\
    \ = end($char_count_array);\n            } else {\n                // there is\
    \ only one unique character\n                // and it's the most frequent one\n\
    \                $max_char_count = end($char_count_array);\n            }\n  \
    \      }\n    }\n\n    // return the most frequent word\n    return $word_found;\n\
    }\n</code>\n<|/ a dscore=0 tags=php,arrays |>\n<| c |>\nThis only works for single\
    \ character words. Try running it on this array: `array(\"name\", \"of\", \"string\"\
    , \"and\", \"game\")` and it will not return the correct output.\n<|/ c |>\n<|\
    \ c |>\nPlease read the question again: *\"Return words which have maximum number\
    \ of unique characters\"*.\n<|/ c |>\n<| c |>\nOh, sorry, didn't see that. I just\
    \ assumed OP meant \"word\" instead of \"character\" because that's how I read\
    \ it.\n<|/ c |>\n<| c |>\n: Thank you for pointing that out, I've updated my answer\
    \ accordingly.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n", "    $max = $words[0];\n\
    \    $count = 0;\n    foreach($words as $word) {\n        if (count(array_count_values(str_split($word)))\
    \ > $count) {\n            $max = strtolower($word);\n            $count  = count(array_count_values(str_split($word)));\n\
    \        }\n    }\n    return $max;\n}\n", "  $max_value = count($words);\n  $max_key\
    \ = null;\n  foreach ($words as $key => $value) {\n    if ($value == $max_value)\
    \ {\n      $max_key = $key;\n    }\n  }\n  return $words[$max_key];\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,algorithm dscore=2 |>\nYou can use array_count_values\
    \ and find the maximum.\n<code>\n$words = array(\"name\",\"of\",\"string\");\n\
    $count = array_count_values($words);\n$max = max($count);\n</code>\n<|/ a |>\n\
    <| c |>\nAnd if there are two or more words with the same max count? :)\n<|/ c\
    \ |>\n<| c |>\nthen sort by values and pick the first one as the result\n<|/ c\
    \ |>\n<| a dscore=0 |>\nTry this function\n<code>", "    $max = 0; // Maximum\
    \ number of unique characters\n    $result = '.'; // Word with maximum number\
    \ of unique characters\n    foreach ($words as $word) {\n        $unique_chars\
    \ = countUniqueChars($word);\n        if ($unique_chars > $max) {\n          \
    \  $max = $unique_chars;\n            $result = $word;\n        }\n    }\n   \
    \ return $result;\n}\n", "  // Initialize a variable to store the number of unique\
    \ characters.\n  $num_chars = 0;\n  // Initialize a variable to store the most\
    \ frequent word.\n  $word = \"\";\n  // Iterate over the array elements.\n  for\
    \ ($i = 0; $i < count($words); $i++) {\n    // Get the number of unique characters\
    \ in the current word.\n    $num_chars += substr_count($words[$i], \".\") + 1;\n\
    \    // If the number of unique characters has increased since last word,\n  \
    \  // then update the most frequent word.\n    if ($num_chars > $words[$i]) {\n\
    \      $word = $words[$i];\n    }\n  }\n  return $word;\n}\n</code>\n<|/ a tags=arrays,php,sorting\
    \ dscore=1 |>\n<| c |>\nI think he wants to get words with max unique chars regardless\
    \ of the order\n<|/ c |>\n<| c |>\nYes, I see that now. I've updated the answer\
    \ to accommodate that.\n<|/ c |>\n<| a tags=arrays,php,sorting |>\n<code>\n$words\
    \ = array(\n    'abbc',\n    'abcd',\n    'abc',\n    'bb',\n    'cc',\n    'c',\n\
    \    '',\n    'abcd',\n    'abc',\n    'aabc',\n    'abcd',\n    'abbc',\n   \
    \ 'abc'\n);\n$count = array();\nforeach($words as $word)\n    $count[$word] =\
    \ substr_count($word, '.');\n\nasort($count);\n\nvar_dump(array_shift($count));\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nI think he wants to get words with max unique\
    \ chars regardless of the order\n<|/ c |>\n<| c |>\nThanks for your feedback!\n\
    <|/ c |>\n<| c |>\nThanks for your feedback! Your code works but there is another\
    \ case. Suppose I have an array with 'aaaaaa', 'bb','cc'. When I put this array\
    \ into your code the output would be 'abcd'. I want it to return 'aaaaaa'\n<|/\
    \ c |>\n<| c |>\n, just remove the asort() function call\n<|/ c |>\n<| c |>\n\
    Sorry I wasn't clear enough. I mean the output should be 'aaaaaa' because I want\
    \ the one with more unique characters first and the one with fewer unique characters\
    \ last.\n<|/ c |>\n<| a tags=arrays,php,sorting |>\nWhat you are asking is quite\
    \ similar to what people do in their dictionary to find the longest word in the ",
  "    $count = array_count_values($words);\n    ksort($count);\n    $biggest = key($count);\n\
    \    foreach ($count as $key => $value) {\n        if ($value == $biggest) {\n\
    \            return $key;\n        }\n    }\n    return $biggest;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nYou can use PHP's preg_match_all to find\
    \ the word with maximum number of occurrences. \n<code>\n$string = \"Join me with\
    \ the Join me with the Join me with the Join me with the Join me with the Join\
    \ me with the Join me with the Join me with the Join me with the Join me with\
    \ the Join me with the Join me with the Join me with the Join me with the Join\
    \ me with the Join me with the Join me with the Join me with the Join me with\
    \ the Join me with the Join me with the Join me with the Join me with the Join\
    \ me with the Join me with the Join me with the Join me with the Join me with\
    \ the Join me with the Join me with the Join me with the Join me with the Join\
    \ me with the Join me with the Join me with the Join me with the Join me with\
    \ the Join me with the Join me with the Join me with the Join me with the Join\
    \ me with the Join me with the Join me with the Join me with the Join me with\
    \ the Join me with the Join me with the Join me with the Join me with the Join\
    \ me with the Join me with the Join me with the Join me with the Join me with\
    \ the Join me with the Join me with the Join me with the Join me with the Join\
    \ me with the Join me with the Join me with the Join me with the Join me with\
    \ the Join me with the Join me with the Join me with the Join me with the Join\
    \ me with the Join me with the Join me with the Join me with the Join me with\
    \ the Join me with the Join me with the Join me with the Join me with the Join\
    \ me with the Join me with the Join me with the Join me with the Join me with\
    \ the Join me with the Join me with the Join me with the Join me with the Join\
    \ me with the Join me with the Join me with the Join me with the Join me with\
    \ the Join me with the Join me with the Join me with the Join me with the Join\
    \ me with the Join me with the Join me with the Join me with the Join me with\
    \ the Join me with the Join me with the Join me with the Join me with the Jo",
  "  $count = array_count_values($words);\n  $max = -1;\n  $key = '';\n  foreach ($count\
    \ as $w => $c) {\n    if ($c > $max) {\n      $max = $c;\n      $key = $w;\n \
    \   }\n  }\n  return $key;\n}", "    // Code here\n    $result = \"\";\n    $lengths\
    \ = array();\n    foreach($words as $word) {\n        $words = str_split($word);\n\
    \        $word_length = count($words);\n        $lengths[$word_length] = isset($lengths[$word_length])\
    \ ? $lengths[$word_length]+1 : 1;\n        $length = max($lengths[$word_length]);\n\
    \        $result = ($word_length == $length) ? $word : $result;\n    }\n    return\
    \ $result;\n}\n", "    sort($words);\n    $max_count = 0;\n    $max_word = $words[0];\n\
    \    foreach ($words as $word) {\n        $count = count($word);\n        if ($max_count\
    \ < $count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\n", "    $counter = array();\n   \
    \ foreach ($words as $word) {\n        $counter[$word] = 0;\n    }\n    foreach\
    \ ($words as $word) {\n        $counter[$word]++;\n    }\n    foreach ($words\
    \ as $word) {\n        if (!isset($counter[$word])) {\n            return $word;\n\
    \        }\n    }\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nGreat idea with the\
    \ counter. My first solution used a map with strings as keys and counts as values,\
    \ but your solution is more elegant\n<|/ c |>\n<| c |>\nI like this answer as\
    \ well as it allows me to keep the original order of the words. Thank you.\n<|/\
    \ c |>\n<| c |>\nThis doesn't return the correct answer when an array with two\
    \ of the same words comes in (e.g., `find_max(array('hello', 'hello'))`).\n<|/\
    \ c |>\n<| c |>\nAgree with, the solution by Nick works better - just tested it\
    \ - it returns the first word where all the counts are the same.\n<|/ c |>\n<|\
    \ c |>\nYou just need a `break;` inside the `foreach` loop to return the first\
    \ result rather than just looping through the rest of the array.\n<|/ c |>\n<|\
    \ a dscore=3 |>\nAnother way to accomplish this with PHP 7.\n<code>", "    $num_uniq\
    \ = array();\n\n    foreach ($words as $word) {\n        $num_uniq[$word] = 0;\n\
    \n        foreach ($words as $other_word) {\n            if ($word !== $other_word\
    \ &&\n                strlen($word) > strlen($other_word) &&\n               \
    \ strpos($word, $other_word) === false\n            ) {\n                $num_uniq[$word]++;\n\
    \            }\n        }\n    }\n\n    arsort($num_uniq);\n\n    return key($num_uniq);\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\nHere is a solution using PHP preg_replace\
    \ and array_count_values():\n<code>\n$wordsArr = array(\"name\", \"of\", \"string\"\
    );\n$wordsStr = implode(\" \", $wordsArr);\n\n$wordsStr = preg_replace(\"/\\s/\"\
    , \" \", $wordsStr);\n$wordsArr = explode(\" \", $wordsStr);\n$wordsArr = array_filter($wordsArr,\
    \ \"strlen\");\n$wordsArr = array_count_values($wordsArr);\n\n$maxKey = array_search(max($wordsArr),\
    \ $wordsArr);\n$maxKey = $wordsArr[$maxKey];\n\necho \"The word with maximum number\
    \ of unique characters is {$maxKey}\";\n</code>\n<|/ a tags=php,arrays |>\n<|\
    \ c |>\nYeah but i need to find the word that has maximum number of unique characters.\n\
    <|/ c |>\n<| c |>\nI have updated my answer to also find the word with maximum\
    \ number of unique characters.\n<|/ c |>\n<| c |>\nI guess i didn't explained\
    \ well. but i want the first word that has maximum number of unique characters.\n\
    <|/ c |>\n<| c |>\nThen you can simply use `array_search` in the updated answer.\n\
    <|/ c |>\n<| a |>\nThis should do it. It should be O(n) time complexity.\n<code>",
  "    $wordCount = array_count_values($words);\n    $sortedWords = array_keys($wordCount);\n\
    \    asort($sortedWords);\n    return $sortedWords[0];\n}\n", "    // Write your\
    \ code here\n    $chars = array_count_values($words);\n    arsort($chars);\n \
    \   $vals = array_keys($chars);\n    return $vals[0];\n}\n", "    // Your code\
    \ here\n}\n</cell>\n<cell>", "    $unique_characters = [];\n    foreach ($words\
    \ as $word) {\n        $unique_characters[] = count($word);\n    }\n    return\
    \ $unique_characters[array_search(max($unique_characters), $unique_characters)];\n\
    }", "    $word_count = array_count_values($words);\n    arsort($word_count);\n\
    \    return key($word_count);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis code\
    \ will also not work for \"aardvark\" and \"airplane\". As those two strings have\
    \ only one character that occurs in both strings. It will always return \"aardvark\"\
    \ as string. Which is not correct.\n<|/ c |>\n<| a |>\n<code>\n<?php\n\nclass\
    \ UniqueCount{\n    public $word;\n    public $count;\n    public function __construct($word){\n\
    \        $this->word = $word;\n        $this->count = 1;\n    }\n    public function\
    \ __toString(){\n        if($this->count > 1){\n            return $this->word;\n\
    \        }else{\n            return '';\n        }\n    }\n    public function\
    \ increment(){\n        $this->count++;\n    }\n}\n", "    $max = 1;\n    $found\
    \ = false;\n    foreach ($words as $word) {\n        if ($words[$max] <> $word)\
    \ {\n            $found = true;\n            $max = $words[$max];\n        } elseif\
    \ ($words[$max] == $word) {\n            $max++;\n        }\n    }\n    return\
    \ $found ? $max : $words[0];\n}", "  $max_count = -1; // start with impossible\
    \ count\n  $best_word = ''; // start with impossible word\n  foreach ($words as\
    \ $word) {\n    // calculate the word's count and whether it is the best so far\n\
    \    $count = count($word);\n    if ($max_count < $count) {\n      $max_count\
    \ = $count;\n      $best_word = $word;\n    } else if ($max_count === $count)\
    \ {\n      $best_word = $word;\n    }\n  }\n  return $best_word;\n}", "    $max\
    \ = null;\n    $count = 0;\n    foreach($words as $word) {\n        $count++;\n\
    \        $length = strlen($word);\n        $max = isset($max)? max($max, $count,\
    \ $length): $count;\n    }\n    return $max;\n}\n\n$words = [\n    'game',\n \
    \   'enam',\n    'of',\n    'string',\n    'name',\n    'of',\n    'string',\n\
    \    'string'\n];\n$max = find_max($words);\n$count = $words[array_search($max,\
    \ $words)];\necho \"max count {$max}, word count {$count}\\n\";\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nthank you so much, your solution is very similar to\
    \ mine, with some little difference, i made a little modification in my code to\
    \ compare the results of both your solution. here is my code:\n\n$words = array('game',\
    \ 'enam', 'of', 'string', 'name', 'of', 'string', 'string', 'string');\n$max =\
    \ find_max($words);\n$count = $words[array_search($max, $words)];\necho \"max\
    \ count {$max}, word count {$count}\\n\";\n\ni think i found my mistake. i forgot\
    \ that i need to include all the words in my array (because they contain 'name'\
    \ for example) and also in the second parameter i need to use array_search to\
    \ compare the word with the array (because array_search can search any element\
    \ in the array). thanks again :)\n<|/ c |>\n<| c |>\nIf you want a unique function\
    \ you can find it [here](http://stackoverflow.com/a/14078778/6805601).\n<|/ c\
    \ |>\n<| a tags=php,word,arrays,count,string |>\nYour code is not working because\
    \ you are using $count in your array_search and $max variable in both array_search\
    \ and max function and that leads to wrong result.\nYou can use something like\
    \ that:\n<code>", "    return $words[count($words) - 1];\n}\n", "  $words = array_count_values($words);\n\
    \  $sorted_keys = array_keys($words);\n  arsort($sorted_keys);\n  $max_key = array_pop($sorted_keys);\n\
    \  foreach ($sorted_keys as $key => $val) {\n    if ($val == $max_key) {\n   \
    \   return $words[$key];\n    }\n  }\n}\n</code>\n<|/ a dscore=0 tags=sorting,arrays,php\
    \ |>\n<| c |>\nI added a comment in the code where it says \"// Write a function\
    \ that accepts an array of strings.\"\n<|/ c |>\n<| c |>\nThe question is about\
    \ string array, so I did not include anything about sorting array values.\n<|/\
    \ c |>\n<| c |>\nMy point was that if you wanted to sort an array of strings based\
    \ on the occurrence counts you could use array_count_values to do that for you\
    \ instead of writing a custom function.\n<|/ c |>\n<| c |>\nIf you read my comment\
    \ carefully, I said \"// Write a function that accepts an array of strings\".\
    \ Not about sorting array values.\n<|/ c |>\n<| a dscore=0 tags=sorting,arrays,php\
    \ |>\n<code>", "    // Write your code here\n\n}\n", "    sort($words);\n    $counts\
    \ = [];\n    $word = null;\n    foreach ($words as $word) {\n        if (isset($counts[$word]))\
    \ {\n            $counts[$word]++;\n        }\n        else {\n            $counts[$word]\
    \ = 1;\n        }\n    }\n    foreach ($counts as $count => $word) {\n       \
    \ if ($count > count($words)) {\n            $word = reset($counts);\n       \
    \     break;\n        }\n    }\n    return $word;\n}", "    sort($words);\n  \
    \  $count = array_count_values($words);\n    $max = $words[0];\n    for ($i =\
    \ 1; $i < count($words); $i++) {\n        if ($count[$words[$i]] > $count[$max])\
    \ {\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n",
  "  $maxLenght = 0;\n  $word = \"\";\n  foreach ($words as $w) {\n    $wordLenght\
    \ = count($w);\n    if ($wordLenght > $maxLenght) {\n      $maxLenght = $wordLenght;\n\
    \      $word = $w;\n    }\n  }\n  sort($words);\n  foreach ($words as $w) {\n\
    \    $words[$i] = substr($w, 0, $maxLenght);\n  }\n  return $words[0];\n}\n",
  "  $max_chars = array();\n  foreach($words as $word) {\n    $chars = count_chars($word);\n\
    \    $char = max($chars);\n    $max_chars[$char] = $chars;\n  }\n  ksort($max_chars);\n\
    \  return key($max_chars);\n}\n", "    $word_count = array_count_values($words);\n\
    \    arsort($word_count);\n    $max = key($word_count);\n    $index = 0;\n   \
    \ foreach ($word_count as $key => $value) {\n        if ($value > $word_count[$max])\
    \ {\n            $max = $key;\n            $index = 1;\n        }\n        if\
    \ ($word_count[$max] == $value) {\n            $index = 0;\n        }\n    }\n\
    \    return $words[$max];\n}\n", "    // code here\n}\n</cell>\n<text>\nReturn\
    \ Phase: Write a function to get the longest common prefix of two given strings.\n\
    \n</text>\n<cell>", "    $max = array();\n    $i = 0;\n    $count_array = [];\n\
    \    foreach ($words as $word) {\n        if (!array_key_exists($word, $count_array))\
    \ {\n            $count_array[$word] = 0;\n        }\n        $count_array[$word]++;\n\
    \    }\n    foreach ($count_array as $word => $count) {\n        if ($count >\
    \ 1) {\n            $max[$i] = $word;\n            array_push($max, $word);\n\
    \            $i++;\n        }\n    }\n    if (count($max) > 1) {\n        $max\
    \ = min($max);\n    }\n    return $max;\n}\n", "    $result = \"\";\n    foreach($words\
    \ as $word) {\n        $tmp = \"\";\n        $count = 0;\n        for($i = 0;\
    \ $i < strlen($word); $i++) {\n            $tmp = substr($word, $i, 1) . substr($tmp,\
    \ strlen($tmp), 1);\n            $count++;\n        }\n        $tmp =  $tmp .\
    \ $word;\n        if($count > strlen($result)) {\n            $result = $tmp;\n\
    \        }\n    }\n    return $result;\n}", "    $word_count = array_count_values($words);\n\
    \    arsort($word_count);\n    return key($word_count);\n}\n", "  $max_count =\
    \ -1;\n  foreach ($words as $word) {\n    $count = count($word);\n    if ($max_count\
    \ < $count) {\n      $max_count = $count;\n      $max_word = $word;\n    }\n \
    \ }\n  return $max_word;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 tags=arrays,php\
    \ |>\nHere's another solution using array_count_values():\n<code>", "  // Your\
    \ code here\n}\n", "  $count = array();\n\n  foreach($words as $word) {\n    if(!isset($count[$word]))\
    \ {\n      $count[$word] = 0;\n    }\n\n    $count[$word]++;\n  }\n\n  ksort($count);\n\
    \n  return key($count);\n}\n", "  $max_len = -1; // The maximum number that a\
    \ string has in unique characters.\n  $max_len_index; // Index of the string that\
    \ has maximum number of unique characters.\n  foreach($words as $index => $word)\
    \ {\n    // Count the number of unique characters in the current string.\n   \
    \ $unique_count = count_unique_chars($word);\n    // If this string doesn't have\
    \ maximum number of unique characters, continue.\n    if($unique_count != $max_len)\
    \ {\n      continue;\n    }\n    // If the number of unique characters is equal\
    \ to the maximum number of\n    // unique characters, return this string.\n  \
    \  if($unique_count == $max_len) {\n      $max_len_index = $index;\n      $max_len\
    \ = $unique_count;\n    }\n  }\n  return $words[$max_len_index];\n}", "    $max\
    \ = array();\n    $unique = array();\n    foreach ($words as $word) {\n      \
    \  $unique[$word] = 0;\n    }\n    $lengths = array_count_values($words);\n  \
    \  foreach ($lengths as $length => $count) {\n        $length = abs($length);\n\
    \        if (isset($unique[$length])) {\n            $unique[$length] += $count;\n\
    \        } else {\n            $unique[$length] = $count;\n        }\n    }\n\
    \    $highest = null;\n    $highestKey = array_search(max($unique), $unique);\n\
    \    if ($highestKey) {\n        $highestKey = $unique[$highestKey];\n       \
    \ $highest = $words[$highestKey];\n    }\n    foreach ($unique as $length => $count)\
    \ {\n        if ($count === $highestKey) {\n            $highest = $words[$count];\n\
    \        }\n    }\n    return $highest;\n}\n", "  $max_unique = array();\n  $highest_nr\
    \ = array();\n  foreach ($words as $word) {\n    // Count the number of unique\
    \ chars in each string.\n    $nr = countUniqueChars($word);\n    // If the number\
    \ of unique chars has the max number in the array,\n    // store the words with\
    \ the highest number of unique chars.\n    if ($nr == $max_unique[$nr - 1]) {\n\
    \      $highest_nr[$nr] = $word;\n    }\n    // If no word has a max number of\
    \ unique chars, store the word with the\n    // highest number of unique chars.\n\
    \    elseif ($nr > $max_unique[$nr - 1]) {\n      $max_unique[$nr] = $word;\n\
    \    }\n  }\n  if (count($highest_nr) == 1) {\n    return $highest_nr[0];\n  }\n\
    \  // Otherwise, return the word with the lowest number of unique chars.\n  return\
    \ $max_unique[array_search($max_unique, array_reverse($highest_nr))];\n}\n", " \
    \   // Only change code below this line\n    \n    \n    return $words[0];\n}\n",
  "  $max = 0;\n  $word = \"\";\n\n  foreach ($words as $w) {\n    if (strlen($w)\
    \ > $max) {\n      $max = (int) strlen($w);\n      $word = $w;\n    }\n  }\n\n\
    \  return $word;\n}\n", "    $max = '';\n    $count = -1;\n    foreach ($words\
    \ as $word) {\n        if ($count == 0) {\n            $max = $word;\n       \
    \     $count = 1;\n        } else if ($count > 1) {\n            if (strlen($max)\
    \ < strlen($word)) {\n                $max = $word;\n            }\n        }\
    \ else if (strlen($word) > strlen($max)) {\n            $max = $word;\n      \
    \      $count = 1;\n        }\n    }\n    return $max;\n}", "  $chars = array_count_values($words);\n\
    \  $max = max($chars);\n  return $max ? key($chars) : NULL;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\nYou can use a function like that:\n<code>", " \
    \ $chars_count = array();\n  $max = null;\n  foreach ($words as $word) {\n   \
    \ $count = count($word);\n    $chars_count[$word] = $count;\n    if (!$max) {\n\
    \      $max = $count;\n    } elseif ($count > $max) {\n      $max = $count;\n\
    \    }\n  }\n  $max_key = array_search($max, $chars_count);\n  return $words[$max_key];\n\
    }", "    // Your code here\n    $unique_words = array_count_values($words);\n\
    \    arsort($unique_words);\n    $word = null;\n    $max_count = 0;\n    $max_word\
    \ = null;\n    foreach ($unique_words as $w => $c) {\n        $cur_count = $c;\n\
    \        if ($c > $max_count) {\n            $word = $w;\n            $max_count\
    \ = $c;\n        } else if ($c == $max_count) {\n            $word = $w;\n   \
    \     }\n    }\n\n    return $word;\n}\n", "  // Your code here\n}\n", "    sort($words);\n\
    \    $max_count = 1;\n    $best_word = \"\";\n    $best_word_length = strlen($best_word);\n\
    \    for ($i = 0; $i < count($words); $i++) {\n        $char = substr($words[$i],\
    \ 0, 1);\n        $count = substr_count($words[$i], $char);\n        if ($count\
    \ > $max_count) {\n            $best_word = $words[$i];\n            $best_word_length\
    \ = $best_word_length - 1;\n            $max_count = $count;\n        }\n    }\n\
    \    return substr($best_word, 0, $best_word_length);\n}\n</code>\n<|/ a tags=algorithm,php,sorting\
    \ |>\n<| c |>\nI dont think that works, it just puts 1 into the string and only\
    \ returns it.\n<|/ c |>\n<| c |>\nAh my bad I didn't see the need to put in that\
    \ extra function. I will try this out now\n<|/ c |>\n<| c |>\nNice and simple,\
    \ and works great. Just a note to the OP: you may want to change `$best_word =\
    \ $words[$i];` to `$best_word = substr($words[$i], 0, $best_word_length);`. That\
    \ way you can pass it to `substr_count()` without having to recalculate the length\
    \ of `$best_word` every time. Also, your function will fail if the array is empty\
    \ or contains no words that contain unique characters: `find_max(array())` returns\
    \ an empty string, whereas `find_max(array(\"abc\"))` returns `\"abc\"`.\n<|/\
    \ c |>\n<| a tags=algorithm,php,sorting |>\nTry this:\n<code>", "  $result = array();\n\
    \  $max_chars = array();\n  foreach($words as $word) {\n    $words = str_word_count($word);\n\
    \    $words = array_count_values($words);\n    $keys = array_keys($words);\n \
    \   foreach($keys as $key) {\n      if ($words[$key] > $max_chars[$key]) $max_chars[$key]\
    \ = $words[$key];\n    }\n  }\n  foreach($words as $word) {\n    $words = str_word_count($word);\n\
    \    $words = array_count_values($words);\n    $keys = array_keys($words);\n \
    \   foreach($keys as $key) {\n      if ($words[$key] == $max_chars[$key]) $result[]\
    \ = $word;\n    }\n  }\n  return count($result) == 1 ? $result[0] : array_keys($max_chars,\
    \ max($max_chars))[0];\n}\n", "    $result = array();\n    foreach ($words as\
    \ $word) {\n        $result = array_merge($result, find_unique_characters($word));\n\
    \    }\n    return $result;\n}\n", "    // Your code here\n}\n", "    $result\
    \ = array();\n    $max = $number = 0;\n    foreach ($words as $word) {\n     \
    \   $count = count($word);\n        if ($count > $number) {\n            $number\
    \ = $count;\n            $result = $word;\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI think you made a typo mistake in line 6. Should\
    \ be `count(array_count_values($words)[$word]);` not `count($word);`\n<|/ c |>\n\
    <| a tags=arrays,php |>\nThis might help. It counts the letters occurring in the\
    \ string and returns an array with the most frequent letters, in alphabetical\
    \ order.\n<code>", "  $words = array_count_values($words);\n  arsort($words);\n\
    \  $word = key($words);\n  return $word;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
