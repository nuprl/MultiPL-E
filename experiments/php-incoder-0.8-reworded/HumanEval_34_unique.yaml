name: HumanEval_34_unique
language: php
prompt: "<?php\n// Return sorted unique elements in an array\n// >>> unique(array(5,\
  \ 3, 5, 2, 3, 3, 9, 0, 123))\n// array(0, 2, 3, 5, 9, 123)\nfunction unique($l)\
  \ {\n"
tests: "function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
  \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    sort($l);\n    return array_unique(array_reverse($l));\n}\n\n$l\
    \ = array();\nwhile ($row = mysqli_fetch_array($result, MYSQLI_ASSOC)) {\n   \
    \ $l[] = $row['title'];\n}\n$l = unique($l);\nforeach ($l as $k=>$v) {\n    ?>\n\
    \    <option value=\"<?php echo $k; ?>\" <?php if ($k == $selected) echo 'selected';\
    \ ?>><?php echo $v; ?></option>\n    <?php\n}", "\t$s = $out = array();\n\tforeach($l\
    \ as $el) {\n\t\t$key = array_search($el, $out);\n\t\tif ($key === false) {\n\t\
    \t\t$s[] = $el;\n\t\t\t$out[] = $el;\n\t\t}\n\t}\n\treturn $s;\n}\n", "  return\
    \ array_filter(array_unique($l));\n}\n\n/**\n * Sort the items in $items with\
    \ $sortingFunction. \n * \n * @param array $items array of items to sort\n * @param\
    \ string $sortingFunction (optional) sorting function (default: sortByValue)\n\
    \ * \n * @return array\n */", "\t$l = array_reverse($l);\n\tdo {\n\t\t$f = array_shift($l);\n\
    \t} while ($f == $l);\n\treturn $l;\n}\n", "  return array_unique($l);\n}\n",
  "\tsort($l);\n\t$u = array();\n\tforeach($l as $e) {\n\t\tif(!in_array($e, $u))\n\
    \t\t\t$u[] = $e;\n\t}\n\treturn $u;\n}\n", "    sort($l);\n    return array_unique($l);\n\
    }", "\t$u = $l; // clone array\n\tforeach ($l as $key => $val) {\n\t\t$x = array_search($val,\
    \ $u);\n\t\tif ($x !== false) {\n\t\t\tunset($u[$x]);\n\t\t\t$u[$key] = $val;\n\
    \t\t}\n\t}\n\treturn $u;\n}\n", "    if (empty($l)) {\n        return array();\n\
    \    }\n    $a = array_diff($l, array_unique($l));\n    return array_values($a);\n\
    }\n", "  return array_values(array_filter(array_unique($l)));\n}\n", "    return\
    \ array_filter($l, 'strnatcasecmp');\n}\n", "    if (is_null($l)) {\n        return\
    \ $l;\n    }\n\n    // Copy $l so we don't have array keys modifying the values\n\
    \    $l = array_map(function($el) {\n        return $el;\n    }, $l);\n\n    //\
    \ Sort\n    sort($l);\n\n    // Remove duplicate entries from $l\n    $result\
    \ = array();\n    $i = 0;\n    while ($i < count($l)) {\n        if ($l[$i] !=\
    \ $l[$i - 1]) {\n            $result[] = $l[$i];\n        }\n        $i++;\n \
    \   }\n\n    return $result;\n}\n", "    sort($l);\n    return array_unique(array_reverse($l));\n\
    }", "    $result = array();\n    $l = array_values($l);\n    sort($l);\n    $l\
    \ = array_unique($l);\n    foreach ($l as $item) {\n        $result[] = $item;\n\
    \    }\n    return $result;\n}\n", "  $a = array();\n  foreach ($l as $key =>\
    \ $value) {\n    if (in_array($value, $a)) {\n      unset($a[$key]);\n    } else\
    \ {\n      $a[$key] = $value;\n    }\n  }\n  return $a;\n}", "\t$a = array();\n\
    \tforeach ($l as $k=>$v) $a[$v] = 1;\n\t\n\treturn array_keys($a);\n}\n", "\t\
    $ret = array();\n\tforeach ($l as $v) {\n\t\tif (array_search($v, $ret) === FALSE)\
    \ {\n\t\t\t$ret[] = $v;\n\t\t}\n\t}\n\treturn $ret;\n}\n", "  sort($l);\n  $u\
    \ = array();\n  $i = null;\n  for ($k = 0; $k < count($l); $k++) {\n    if ($i\
    \ > $l[$k]) {\n      if (isset($l[$k])) {\n        $u[] = $l[$k];\n        $i\
    \ = $l[$k];\n      }\n    } else {\n      $i = $i;\n    }\n  }\n  return $u;\n\
    }\n", "    $s = array();\n    $cnt = count($l);\n    $i = 0;\n    while ($i <\
    \ $cnt) {\n        $s[] = $l[$i++];\n    }\n    return array_unique($s);\n}\n",
  "\t$l = array_keys($l);\n\tsort($l);\n\treturn array_unique($l);\n}", "\t$unique\
    \ = [];\n\tforeach ($l as $val) {\n\t\tif (!in_array($val, $unique)) {\n\t\t\t\
    $unique[] = $val;\n\t\t}\n\t}\n\treturn $unique;\n}", "    $a = array();\n   \
    \ $l = array_reverse($l);\n    foreach ($l as $k) {\n        if (in_array($k,\
    \ $a)) {\n            continue;\n        }\n        array_push($a, $k);\n    }\n\
    \    return array_reverse($a);\n}\n", "    if ($l == null) return array();\n \
    \   $res = array();\n    $keys=array();\n    foreach ($l as $value) {\n      \
    \  $keys[$value]++;\n        if ($keys[$value] == 1) {\n            $res[] = $value;\n\
    \        }\n    }\n    return $res;\n}\n", "    if (count($l) !== count(array_unique($l)))\
    \ {\n        sort($l);\n    }\n\n    return array_unique($l);\n}", "    sort($l);\n\
    \    $r = [];\n    foreach($l as $k) {\n        $r[count($r) - 1] = $k;\n    }\n\
    \    return array_values($r);\n}", "    $l = $l ? $l : array();\n    return array_merge(\n\
    \        array_diff(array_count_values($l), $l),\n        array(0)\n    );\n}",
  "\t$return = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e, $return)) {\n\
    \t\t\t$return[] = $e;\n\t\t}\n\t}\n\treturn $return;\n}\n", "  return array_unique(array_values($l));\n\
    }\n", "\t$unique = [];\n\tforeach ($l as $value) {\n\t\tif (in_array($value, $unique))\
    \ {\n\t\t\tcontinue;\n\t\t}\n\t\t$unique[] = $value;\n\t}\n\treturn $unique;\n\
    }\n", "\t$ret = array();\n\tforeach ($l as $e) {\n\t\tif ($e == null) { continue;\
    \ }\n\t\tif (isset($ret[$e])) {\n\t\t\tunset($ret[$e]);\n\t\t} else {\n\t\t\t\
    $ret[$e] = 1;\n\t\t}\n\t}\n\treturn $ret;\n}\n", "    $seen = array();\n    $result\
    \ = array();\n    foreach ($l as $v) {\n        if (in_array($v, $seen)) {\n \
    \           continue;\n        }\n        $seen[$v] = true;\n        $result[]\
    \ = $v;\n    }\n    return $result;\n}\n", "  if (is_array($l)) return array_unique($l);\n\
    \  $seen = array();\n  $unique = array();\n  foreach ($l as $v) {\n    if (in_array($v,\
    \ $seen)) {\n      continue;\n    }\n    $seen[] = $v;\n    $unique[] = $v;\n\
    \  }\n  return $unique;\n}", "    $out = array();\n    foreach ($l as $i => $v)\
    \ {\n        if ($v == $out[$i]) {\n            continue;\n        }\n       \
    \ $out[$i] = $v;\n    }\n    return $out;\n}\n", "\t$l = array_values($l);\n\t\
    array_walk($l, function($item, $key) use (&$result) { $result[] = $item; });\n\
    \t$result = array_unique($result);\n\treturn $result;\n}\n", "  $l[] = array();\n\
    \  foreach ($l as $a) {\n    foreach ($a as $k => $b) {\n      if ($a[$k] == $b)\
    \ {\n        unset($a[$k]);\n      }\n    }\n  }\n  return array_values(array_unique($l));\n\
    }\n\n/**\n * Return the sum of the given numbers.\n * >>> sum(1, 2, 3)", "   \
    \ $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u, true)) {\n\
    \            $u[] = $e;\n        }\n    }\n    return $u;\n}\n", "    return array_diff(array_keys($l),\
    \ array_unique($l));\n}\n", "\t\n\tif (count($l) == 0) {\n\t\treturn $l;\n\t}\n\
    \t$m = min(count($l), sizeof($l)/2);\n\t$l[$m] = $l[$m] = $l[$m+1] = $l[$m+1]\
    \ = NULL;\n\t\n\twhile ($m = min(count($l), sizeof($l)/2)) {\n\t\tif ($l[$m] <\
    \ $l[$m+1]) {\n\t\t\t$l[$m]++;\n\t\t\t$l[$m+1] = NULL;\n\t\t} else {\n\t\t\t$l[$m+1]++;\n\
    \t\t}\n\t}\n\treturn array_unique($l);\n}", "    $unique = array();\n    $unique_counter\
    \ = 0;\n    foreach ($l as $k => $v) {\n        if (! in_array($v, $unique)) {\n\
    \            $unique[$unique_counter] = $v;\n            $unique_counter++;\n\
    \        }\n    }\n    return array_values($unique);\n}\n", "\tstatic $u;\n\t\
    if (empty($l)) {\n\t\treturn array();\n\t}\n\tif (!isset($u)) {\n\t\t$u = array();\n\
    \t\tforeach ($l as $i) {\n\t\t\tif (in_array($i, $u)) {\n\t\t\t\tcontinue;\n\t\
    \t\t}\n\t\t\t$u[] = $i;\n\t\t}\n\t}\n\treturn $u;\n}\n", "  usort($l, 'strnatcmp');\n\
    \  $s = array();\n  foreach ($l as $e) {\n    if (in_array($e, $s)) { continue;\
    \ }\n    $s[] = $e;\n  }\n  return $s;\n}\n", "    $result = array();\n    foreach\
    \ ($l as $el) {\n        if (! in_array($el, $result)) {\n            $result[]\
    \ = $el;\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Why not use array_unique and avoid the loop?\n<|/ c |>\n<| c |>\nIt was the quickest\
    \ way I could think of.\n<|/ c |>\n<| a dscore=1 |>\nHow about this one:\n<code>\n\
    $a = array(5, 3, 5, 2, 3, 3, 9, 0, 123);\n$res = array_map(function($a) { return\
    \ $a; }, array_unique($a));\nprint_r($res);\n</code>\n<|/ a tags=php,arrays,unique\
    \ |>\n<| c |>\nWhy not use array_unique and avoid the loop?\n<|/ c |>\n<| a tags=php,arrays,unique\
    \ dscore=1 |>\nAnother one with array_unique and array_map:\n<code>\narray_unique(array_map(function($i){\
    \ return $i; }, $array));\n</code>\n<|/ a |>\n<| c |>\nWhy not use array_unique\
    \ and avoid the loop?\n<|/ c |>\n<| a tags=php,arrays,unique |>\n<code>", "\t\
    $o=array();\n\tforeach($l as $v) {\n\t\tif(isset($o[$v])) continue;\n\t\t$o[$v]=1;\n\
    \t}\n\treturn array_keys($o);\n}\n", "    return array_map(function ($i) {\n \
    \       return $i;\n    }, array_unique(sort($l)));\n}\n</code>\nThe above function\
    \ would accept an array of arbitrary depth and sort the unique elements.\n<|/\
    \ a tags=arrays,php,sorting |>\n<| a |>\nThis is a recursive function.  It works\
    \ by first sorting the array using a standard sort then recursively calling the\
    \ function for each element in the array.  \n<code>", "    $u = array();\n   \
    \ foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n            $u[] = $v;\n\
    \        }\n    }\n    return $u;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c\
    \ |>\nThe code looks good to me, but for some reason the output is not ordered.\
    \ I did test it here: http://sandbox.onlinephpfunctions.com/code/ca3fe2ed815d2e873ab027698767a29a64e3e3e6\
    \ and my output array is still the same\n<|/ c |>\n<| c |>\nIt looks like it is\
    \ ordering the data somehow - I'll have to look more into it.\n<|/ c |>\n<| c\
    \ |>\nYeah, I just went through it again, and it appears to be ordering it by\
    \ numeric index value instead of the original order. Just adding an `usort()`\
    \ call to the output function sorted it. It wasn't too difficult to change my\
    \ code though, as I see now what it was doing, so it's all good now.\n<|/ c |>\n\
    <| c |>\nNice, I was looking for a solution to that myself but couldn't find one.\n\
    <|/ c |>\n<| a |>\nI needed to find duplicate rows in my database and had this\
    \ problem solved so I thought I would share my solution here for anyone else that\
    \ may find this question and have a similar need.\nI needed to find duplicate\
    \ rows and delete them, so I built an array of the IDs based on the first column\
    \ and then did a comparison to see if the next ID was already in the array.\n\
    <code>\npublic function findDuplicatesOnId($id){\n    $array = [];\n    foreach($this->getResults()\
    \ as $result){\n        if($result->getId() == $id){\n            $array[] = $result->getId();\n\
    \        }\n    }\n    $arrayUnique = array_unique($array);\n    foreach ($arrayUnique\
    \ as $i) {\n        $this->delete($i);\n    }\n}\n</code>\n<|/ a tags=arrays,php\
    \ dscore=2 |>\n<| c |>\nThis is really helpful, I did have to modify the $arrayUnique\
    \ line to be:\n`$arrayUnique = array_unique($array);`\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\narray_unique($array_data);\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This does not provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/", "   \
    \ return array_unique(preg_grep('/^\\d+$/', $l));\n}\n", "\t$a = $l = array();\n\
    \tforeach ($l as $v) {\n\t\tif (!in_array($v, $a)) {\n\t\t\t$l[$i] = $v;\n\t\t\
    \t$a[] = $v;\n\t\t}\n\t\t++$i;\n\t}\n\treturn $l;\n}\n", "    if (!is_array($l))\
    \ {\n        return $l;\n    }\n    if (count($l) == 0) {\n        return $l;\n\
    \    }\n    $result = [];\n    $unique = true;\n    foreach ($l as $item) {\n\
    \        if (in_array($item, $result)) {\n            $unique = false;\n     \
    \   } else {\n            $result[] = $item;\n        }\n    }\n    return $unique\
    \ ? $result : sort($l);\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nA note on the\
    \ array_unique() approach is that if the array contains objects of class Foo it\
    \ won't work, because the comparison function used by array_unique compares by\
    \ object identity. There are several approaches to overcome this: https://stackoverflow.com/questions/10407670/php-array-unique-with-object-comparison\n\
    <|/ c |>\n<| c |>\nThank you for mentioning that! I'll add some examples of different\
    \ approaches to my answer.\n<|/ c |>\n<| c |>\nIt doesn't work for me when I try\
    \ to sort objects. Any solution?\n<|/ c |>\n<| a |>\nI see a lot of answers with\
    \ unnecessary loops and multiple passes, but here's a solution that uses one pass\
    \ with minimal extra memory usage:\n<code>\n$data = [\n  new class {\n    private\
    \ $id;\n    private $name;\n    private $code;\n    function __construct($id,\
    \ $name, $code) {\n      $this->id = $id;\n      $this->name = $name;\n      $this->code\
    \ = $code;\n    }\n    public function __toString() {\n      return $this->name;\n\
    \    }\n  },\n  new class {\n    private $id;\n    private $name;\n    private\
    \ $code;\n    function __construct($id, $name, $code) {\n      $this->id = $id;\n\
    \      $this->name = $name;\n      $this->code = $code;\n    }\n    public function\
    \ __toString() {\n      return $this->name;\n    }\n  },\n  new class {\n    private\
    \ $id;\n    private $name;\n    private $code;\n    function __construct($id,\
    \ $name, $code) {\n      $this->id = $id;\n      $this->name = $name;\n      $this->code\
    \ = $code;\n    }\n    public function __toString() {\n      return $this->name;\n\
    \    }\n  },\n];\n\n$ids = [\n  'B',\n  'A',\n  'D',\n  'C',\n  'E',\n];\n", " \
    \   if (count($l) === 0) {\n        return $l;\n    }\n\n    $r = [];\n    $h\
    \ = [];\n\n    foreach ($l as $e) {\n        if (isset($h[$e])) {\n          \
    \  $r[] = $e;\n        } else {\n            $h[$e] = 1;\n        }\n    }\n\n\
    \    return $r;\n}\n", "    $a = array_keys($l);\n    asort($a);\n    return array_values($a);\n\
    }\n\n/**\n * Remove duplicate values from a numeric array\n *\n * @param array\
    \ $l\n * @return array\n */", "    foreach ($l as $k => $v) {\n        $l[$k]\
    \ = $v == $k ? $v : $k;\n    }\n    return array_unique($l);\n}", "\tif (!$l ||\
    \ $l === true) {\n\t\treturn array();\n\t}\n\t$us = array();\n\tforeach ($l as\
    \ $key => $val) {\n\t\tif ($val !== $us[$key]) {\n\t\t\t$us[$key] = $val;\n\t\t\
    }\n\t}\n\treturn $us;\n}\n", "    if (!is_array($l)) return $l;\n    $c = array_count_values($l);\n\
    \    return array_flip(array_keys($c));\n}", "    return array_unique($l);\n}\n",
  "    $s = array();\n    $l = array_values($l);\n    foreach ($l as $key => $val)\
    \ {\n        if (!in_array($val, $s)) {\n            $s[] = $val;\n        }\n\
    \    }\n    return $s;\n}\n", "\tsort($l);\n\treturn array_unique($l);\n}\n",
  "  $sorted = array();\n  $sorted = array_merge($sorted, $l);\n  $sorted = array_unique($sorted);\n\
    \  return $sorted;\n}\n", "  $a = array();\n  foreach ($l as $val) {\n    if (in_array($val,\
    \ $a)) {\n      continue;\n    }\n    $a[] = $val;\n  }\n  return $a;\n}\n", " \
    \   if (empty($l)) {\n        return $l;\n    }\n    $a = array();\n    $l = array_reverse($l);\n\
    \    foreach ($l as $i) {\n        if ( ! in_array($i, $a)) {\n            $a[count($a)]\
    \ = $i;\n        }\n    }\n    return $a;\n}\n", "    $result = [];\n    foreach\
    \ ($l as $item) {\n        if (in_array($item, $result, true)) {\n           \
    \ continue;\n        }\n        $result[] = $item;\n    }\n    return $result;\n\
    }\n", "\t$uq = [];\n\tforeach ($l as $i) {\n\t\tif (!in_array($i, $uq)) {\n\t\t\
    \t$uq[] = $i;\n\t\t}\n\t}\n\treturn $uq;\n}\n", "  $a = $l = $l?array_map(\"unserialize\"\
    , $l):array();\n  foreach($a as $e) {\n    if(!isset($l[$e])) $l[$e] = $e;\n \
    \ }\n  foreach($l as $e) {\n    $a[$e] = $e;\n  }\n  return array_values($a);\n\
    }\n", "    $u = [];\n    foreach ($l as $item) {\n        if (!in_array($item,\
    \ $u, true)) {\n            $u[] = $item;\n        }\n    }\n    return $u;\n\
    }\n", "    return array_unique($l);\n}", "    return array_unique($l);\n}\n</code>\n\
    <|/ a tags=php |>\n<| a tags=php |>\nIf you have an array of ints and want to\
    \ remove duplicates:\n<code>\n$ints = [5, 6, 5, 7, 5, 7, 8, 9];\n$newints = array_unique(array_filter($ints,\
    \ function($v) { return ! in_array($v, $ints); }));\n</code>\nThe first line will\
    \ remove duplicate elements in the $ints array, and the second line will remove\
    \ all non-unique values.\n<|/ a dscore=5 |>\n<| c |>\nThis works great for removing\
    \ duplicate ints. However, if you're not looking for a list of ints but are looking\
    \ for a string with duplicates (eg like \"1,2,3,4,4,5,6,6\") then you can use\
    \ the following solutions: https://stackoverflow.com/questions/203960/how-do-you-remove-duplicate-values-from-a-string-using-php?rq=1\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$arr = [1, 2, 3, 4, 5, 6, 4, 5, 6, 7];\n\n\
    $unique = array();\n$i = 0;\nforeach ($arr as $item) {\n    $i++;\n    if(!in_array($item,\
    \ $unique)) {\n        $unique[$i] = $item;\n    }\n}\n\nvar_dump($unique);\n\n\
    /*\n   result\n   array(4) {\n       [0]=> int(1)\n       [1]=> int(2)\n     \
    \  [2]=> int(3)\n       [3]=> int(5)\n   }\n*/\n</code>\n<|/ a tags=php |>\n<|\
    \ c |>\nNice solution. Easy and simple.\n<|/ c |>\n<| c |>\n`array_search` returns\
    \ first occurence, not a key. You should use `array_search()` instead of `array_search($item)`.\n\
    <|/ c |>\n<| a tags=php dscore=5 |>\nHere is one way of doing it with a foreach\
    \ loop\n<code>\n$array = [1, 2, 4, 5, 6, 8, 8, 9];\n\n$arrayWithoutDuplicates\
    \ = array();\n$count = 0;\nforeach ($array as $value) {\n    if (in_array($value,\
    \ $arrayWithoutDuplicates)) {\n        continue;\n    }\n    $arrayWithoutDuplicates[]\
    \ = $value;\n    $count++;\n}\n\necho \"The number of unique values is: \" . $count;\n\
    echo \"<pre>\";\nprint_r($arrayWithoutDuplicates);\n</code>\n<|/ a |>\n<| a tags=php\
    \ |>\nTry this one:\n<code>", "\tif (empty($l)) {\n\t\treturn array();\n\t}\n\t\
    sort($l);\n\t$ret = array();\n\tfor ($i = 0; $i < count($l); $i++) {\n\t\tif (!isset($ret[$l[$i]]))\
    \ {\n\t\t\t$ret[$l[$i]] = 1;\n\t\t} else {\n\t\t\t$ret[$l[$i]]++;\n\t\t}\n\t}\n\
    \treturn $ret;\n}", "    if (!is_array($l)) {\n        return $l;\n    }\n   \
    \ return array_unique($l);\n}\n", "\t$s = array();\n\tforeach($l as $e) {\n\t\t\
    if(in_array($e, $s)) continue;\n\t\telse $s[] = $e;\n\t}\n\treturn $s;\n}", " \
    \ if (empty($l)) {\n    return array();\n  }\n\n  $out = array();\n\n  foreach\
    \ ($l as $value) {\n    if (!in_array($value, $out)) {\n      $out[] = $value;\n\
    \    }\n  }\n\n  return $out;\n}\n", "    if (!is_array($l)) {\n        return\
    \ $l;\n    }\n    $a = array_merge($l, $l);\n    $a  = array_unique($a);\n   \
    \ $a  = array_reverse($a);\n    return $a;\n}", "    return array_reduce($l, function($result,\
    \ $item) {\n        $result[$item] = $item;\n        return $result;\n    }, array());\n\
    }\n</code>\n<|/ a |>\n<| c |>\nWow, thanks! I did have something similar to this\
    \ originally but I'm worried my arrays are going to get very large so I'm trying\
    \ to keep memory usage to a minimum. I'll try this method and see how it goes.\n\
    <|/ c |>\n<| c |>\nIt works great! It's so simple and amazing! I'm amazed it's\
    \ been so long since I've done any programming so I didn't even know about this\
    \ function. Thanks again!\n<|/ c |>\n<| c |>\nYou're very welcome. Glad you found\
    \ this useful.\n<|/ c |>\n<| a |>\nI would recommend using the array_unique()\
    \ function.\n<code>\n$array = array();\n$array[] = \"red\";\n$array[] = \"red\"\
    ;\n$array[] = \"blue\";\n$array[] = \"blue\";\n$array[] = \"red\";\n$array[] =\
    \ \"yellow\";\n$array[] = \"yellow\";\n$array[] = \"yellow\";\n\n$result = array_unique($array);\n\
    print_r($result);\n</code>\nResult\n<code>\nArray\n(\n    [0] => blue\n    [1]\
    \ => red\n    [2] => yellow\n)\n</code>\n<|/ a dscore=2 tags=arrays,php,duplicates\
    \ |>\n<| c |>\nThis only works with numerical arrays. Strings are also unique.\n\
    <|/ c |>\n<| c |>\nActually, it works for strings too, as long as the string is\
    \ not numerical. For example try `var_dump(\"red\" == \"red\");`\n<|/ c |>\n<|\
    \ a tags=arrays,php,duplicates dscore=1 |>\n<code>", "  if ($l == null)\n    return\
    \ array();\n  $a1 = array();\n  $a2 = array();\n  foreach ($l as $k => $v)\n \
    \   if (in_array($v, $a1)) {\n      $a1[$k] = $v;\n    } else {\n      $a2[$k]\
    \ = $v;\n    }\n  return array_merge($a1, $a2);\n}", "  $u = array();\n  foreach\
    \ ($l as $v) {\n    if (in_array($v, $u)) continue;\n    $u[] = $v;\n  }\n  return\
    \ $u;\n}\n", "\t$a = [];\n\tforeach($l as $k=>$v){\n\t\tif (!isset($a[$v])) {\n\
    \t\t\t$a[$v] = $k;\n\t\t}\n\t}\n\treturn $a;\n}\n", "\t$u = [];\n\tforeach ($l\
    \ as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\treturn\
    \ $u;\n}\n", "    return array_unique(array_map(\"unserialize\", $l));\n}\n",
  "\tif (!is_array($l))\n\t\treturn $l;\n\t$a = $l = array_map('unserialize', array_unique(array_map('serialize',\
    \ $l)));\n\tforeach ($a as $v)\n\t\tsort($v);\n\treturn $a;\n}\n", "\tif (!$l)\
    \ {\n\t\treturn array();\n\t}\n\t$u = $l[0];\n\tforeach (array_slice($l, 1) as\
    \ $v) {\n\t\tif ($v === $u) {\n\t\t\tcontinue;\n\t\t}\n\t\t$u = $v;\n\t}\n\treturn\
    \ array($u);\n}\n\n/**\n * Convert a UTF-8 string into ISO-8859-1, encoding it\
    \ into binary string\n *\n * Unicode code points that can't be encoded as UTF-8\
    \ into ISO-8859-1 are encoded into binary\n *\n * @param string $s The input UTF-8\
    \ string\n * @return string\n */", "  sort($l);\n  $res = array();\n  foreach($l\
    \ as $v) {\n    $res[$v] = true;\n  }\n  return array_keys($res);\n}", "    return\
    \ array_filter($l, function($value) {\n        return !in_array($value, $l);\n\
    \    });\n}\n", "\t$s = array();\n\tforeach($l as $k => $v) {\n\t\t$s[$k] = $v;\n\
    \t}\n\tasort($s);\n\t$l = $s;\n\tunset($s);\n\treturn $l;\n}\n", "    if (empty($l))\n\
    \        return array();\n    $r = array();\n    $ls = array();\n    $ls[] = &$ls;\n\
    \    for ($c = count($l) - 1; $c >= 0; $c--) {\n        $c = $c * 2;\n       \
    \ $ls[] = &$ls[$c];\n    }\n    while ($l = array_pop($ls)) {\n        foreach\
    \ ($l as &$e) {\n            if ($e == $l)\n                unset($e, $ls);\n\
    \            elseif (count($ls) < 2 && $e == end($ls))\n                unset($e,\
    \ $ls);\n        }\n    }\n    return array_merge($l);\n}", "\t$s = array();\n\
    \tforeach($l as $k=>$v) {\n\t\t$k == $v ? $s[$k] = $k : $s[$k] = $v;\n\t}\n\t\
    return $s;\n}", "    return array_filter(\n        $l,\n        function ($n)\
    \ use (&$l) {\n            return in_array($n, $l);\n        }\n    );\n}\n",
  "\tsort($l);\n\t$u = array();\n\twhile ($l = array_shift($l)) $u[] = $l;\n\treturn\
    \ $u;\n}\n", "    $a = array();\n    $l = array_keys($l);\n    sort($l);\n   \
    \ foreach($l as $k) {\n        if(!in_array($k, $a)) {\n            $a[$k] = 1;\n\
    \        }\n    }\n    return $a;\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>",
  "  sort($l);\n  $res = array();\n  foreach ($l as $key => $value) {\n    if (!isset($res[$value]))\
    \ {\n      $res[$value] = $key;\n    }\n  }\n  return $res;\n}\n</code>\n<|/ a\
    \ dscore=1 tags=unique,sorting,php |>\n<| c |>\nThanks Jens, this helped me the\
    \ most.\n<|/ c |>\n<| a |>\n<code>", "  if (!$l) return array();\n  $a = array_keys($l);\n\
    \  return array_unique($a);\n}\n", "    $unique = array();\n    foreach ($l as\
    \ $item) {\n        if (in_array($item, $unique)) continue;\n        $unique[]\
    \ = $item;\n    }\n    return $unique;\n}", "\t$s = array();\n\tforeach($l as\
    \ $v) $s[] = $v;\n\treturn array_unique($s);\n}\n", "  $a = $f = array();\n  foreach\
    \ ($l as $v) {\n    if (array_search($v, $a) === false) $f[$v] = $v;\n    $a[$v]\
    \ = true;\n  }\n  return $f;\n}", "\t$a = array();\n\tforeach ($l as $k=>$v) {\n\
    \t\tif (!in_array($v, $a)) {\n\t\t\t$a[$k] = $v;\n\t\t}\n\t}\n\treturn $a;\n}",
  "    if (is_array($l)) {\n        sort($l);\n    }\n    $f = array_keys(array_flip($l));\n\
    \    foreach ($f as $v) {\n        unset($l[$v]);\n    }\n    return $l;\n}\n\
    </code>\n<|/ a |>\n<| a tags=php,arrays,sorting,unique dscore=1 |>\nSince PHP\
    \ 5.4 you can use the array_unique function\n<|/ a |>\n<| c |>\nThis does not\
    \ work for my case. `array_unique` removes the duplicate elements in the beginning\
    \ of the array. Not the unique ones that are in the end. See the examples given\
    \ in the manual page of array_unique.\n<|/ c |>\n<| c |>\nI think this would also\
    \ require a custom sort function\n<|/ c |>\n<| c |>\nIt works in PHP 5.4 when\
    \ used correctly. I've just tested.\n<|/ c |>\n<| c |>\n: You mean you actually\
    \ used array_unique(), then ran sort() on the result, which had the desired effect?\n\
    <|/ c |>\n<| c |>\n: Yes, I did. That's why I mentioned \"since the PHP 5.4\"\
    .\n<|/ c |>\n<| a tags=php,arrays,sorting,unique |>\nI have used this function\
    \ in all my projects, it works fine.\n<code>", "    if (!is_array($l)) return\
    \ array();\n    $a = array();\n    foreach($l as $e) {\n        if (!in_array($e,\
    \ $a)) {\n            $a[$e] = 1;\n        }\n    }\n    return array_keys($a);\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| a dscore=2 |>\nIf anyone needs it for Laravel\
    \ 5, use Laravel's helper function unique:\n<code>\n$a = array(1, 5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123);\n$a = array_unique($a);\n</code>\n<|/ a tags=arrays,php |>\n\
    <| a tags=arrays,php |>\n<code>\n$array = array('apple','apple','banana','apple','orange','pear','pear');\n\
    $array = array_unique($array);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nPlease consider\
    \ editing your post to add explanation about code only answers.\n<|/ c |>\n<|\
    \ a |>\nJust use array_unique function:\n<code>\n$array = array_unique($array);\n\
    </code>\n<|/ a dscore=1 tags=arrays,php |>\n<| c |>\nPlease consider editing your\
    \ post to add explanation about code only answers.\n<|/ c |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value\n<|/ c |>\n\
    <| a tags=arrays,php |>\n<code>\n$array1 = array(\"red\",\"green\",\"red\",\"\
    blue\",\"red\");\n$array2 = array(\"blue\",\"green\",\"red\",\"red\",\"green\"\
    ,\"red\");\n$unique = array_unique(array_merge($array1,$array2));\nprint_r($unique);\n\
    \n/* Result\nArray\n(\n    [0] => red\n    [1] => green\n    [2] => blue\n   \
    \ [3] => red\n)\n*/\n</code>\n<|/ a dscore=1 |>\n<| c |>\nPlease consider editing\
    \ your post to add explanation about code only answers.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\nI personally prefer the array_filter function for this. It will remove duplicate\
    \ entries from an array and leave only unique ones.\n<code>\n$myArray = array(\n\
    \  'one',\n  'two',\n  'three',\n  'one',\n  'two',\n  'four',\n  'two'\n);\n\n\
    $myArrayFiltered = array_filter($myArray);\n\necho $myArrayFiltered[0];\n", " \
    \   $i = count($l);\n    while($i--) {\n        if(in_array($l[$i], $l)) {\n \
    \           $l[$i] = $l[$i];\n        }\n        else {\n            unset($l[$i]);\n\
    \        }\n    }\n    return $l;\n}", "\tsort($l);\n\t$ln = count($l);\n\t$l\
    \ = array_keys(array_flip($l));\n\t$u = array();\n\tforeach ($l as $key => $val)\
    \ {\n\t\tif ($val !== $key) {\n\t\t\t$u[$val] = $key;\n\t\t}\n\t}\n\treturn $u;\n\
    }\n", "  if (!is_array($l)) {\n    throw new Exception('Argument should be an\
    \ array');\n  }\n  $a = $l = array_map('unserialize', array_unique(array_map('serialize',\
    \ $l)));\n  return array_map('unserialize', array_unique($l));\n}\n", "  usort($l,\
    \ function($a, $b) {\n    return $a < $b ? -1 : 1;\n  });\n  return $l;\n}\n",
  "  if (!is_array($l) || count($l)<1) return array();\n  $rv = array();\n  foreach($l\
    \ as $k=>$v) {\n    if (!isset($rv[$k])) $rv[$k] = $v;\n  }\n  return $rv;\n}\n",
  "  return array_keys(array_flip($l));\n}\n", "    $s = array();\n    foreach($l\
    \ as $n) {\n        if(!in_array($n, $s)) $s[] = $n;\n    }\n    return $s;\n}",
  "    $l = array_values($l);\n    $c = array();\n    foreach ($l as $k => $v) $c[$v]++;\
    \ \n    return array_keys($c);\n}\n", "\treturn array_filter(\n\t\t$l,\n\t\tfunction($e)\
    \ use (&$l) {\n\t\t\treturn !in_array($e, $l);\n\t\t}\n\t);\n}\n", "\tsort($l);\n\
    \treturn array_unique($l);\n}\n", "    $a = $l = $l = array_unique($l);\n    sort($a);\n\
    \    return $l;\n}\n", "\t$r = [];\n\tforeach ($l as $e) {\n\t\tif (!array_key_exists($e,\
    \ $r)) {\n\t\t\t$r[$e] = 1;\n\t\t} else {\n\t\t\tunset($r[$e]);\n\t\t}\n\t}\n\t\
    return array_keys($r);\n}\n", "    return array_filter($l, function($e) use (&$l)\
    \ { return !in_array($e, $l); });\n}\n", "\tif (!is_array($l)) {\n\t\treturn array();\n\
    \t}\n\t$result = array();\n\t$i = 0;\n\tforeach ($l as $v) {\n\t\tif ($i == $v)\
    \ {\n\t\t\tcontinue;\n\t\t}\n\t\t$result[$i] = $v;\n\t\t$i++;\n\t}\n\treturn $result;\n\
    }", "  if (empty($l))\n    return array();\n  foreach ($l as $key)\n    foreach\
    \ (array_diff($l, array($key)) as $temp)\n      $l[$key] = $temp;\n  return array_values($l);\n\
    }\n", "    return sort($l);\n}\n", "    return array_unique($l);\n}", "    return\
    \ array_unique($l);\n}\n", "    if (!is_array($l)) {\n        $l = array($l);\n\
    \    }\n    $res = array();\n    foreach ($l as $key => $value) {\n        if\
    \ (in_array($value, $res)) {\n            continue 2;\n        }\n        $res[$key]\
    \ = $value;\n    }\n    return $res;\n}\n", "    if (!is_array($l)) {\n      \
    \  return array();\n    }\n    $l2 = array();\n    foreach ($l as $value) {\n\
    \        $l2[$value] = $value;\n    }\n    return array_keys($l2);\n}\n", "  return\
    \ array_reduce($l, function($r, $v) { return $r + array($v); }, array());\n}\n",
  "  $u = array();\n  $d = array();\n  foreach ($l as $e) {\n    if (in_array($e,\
    \ $d, true)) {\n      continue;\n    }\n    $u[$e] = true;\n    $d[] = $e;\n \
    \ }\n  return $d;\n}\n", "    $r = [];\n    $i = 0;\n    foreach ($l as $v) {\n\
    \        if (!isset($r[$v])) {\n            $r[$v] = $i;\n            $i++;\n\
    \        }\n    }\n    return array_values($r);\n}\n", "\tsort($l);\n\t$u = array();\n\
    \tforeach ($l as $i => $e) {\n\t\tif (!in_array($e, $u)) {\n\t\t\t$u[] = $e;\n\
    \t\t}\n\t}\n\treturn $u;\n}\n", "    // Return sorted unique elements\n    sort($l);\n\
    \    return array_unique($l);\n}\n", "\t$a = array();\n\tforeach ($l as $e) {\n\
    \t\tif (!in_array($e, $a)) $a[$e] = 1;\n\t}\n\treturn array_keys($a);\n}\n", " \
    \   $a = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $a)) {\n\
    \            $a[$v] = 1;\n        }\n    }\n    return array_keys($a);\n}", " \
    \   return array_unique(array_values($l));\n}", "  return sort(array_unique($l));\n\
    }\n\n/**\n * Sort the given array in descending order (newest first) using the\n\
    \ * given comparison function.\n *\n * @param array  &$array\n * @param string\
    \ $sort_type\n * @param string $sort_func\n *\n * @return void\n */", "  $l =\
    \ sort($l);\n  return array_unique(array_slice($l,0,count($l)-1));\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis would be better if you used `array_values` instead\
    \ of the `array_slice` which could cause unintended results if your array had\
    \ values stored with keys greater than `0`. Just something to keep in mind.\n\
    <|/ c |>\n<| c |>\nAh good point. I've updated my answer to use `array_values`\
    \ instead. Cheers.\n<|/ c |>\n<| a tags=arrays,php |>\nI like the other answers\
    \ so far, but this is my take on it:\n<code>", "    sort($l);\n    return array_keys(array_flip($l));\n\
    }\n", "    return array_keys(array_flip($l));\n}", "    $l = array_map('unserialize',\
    \ array_unique(array_map('serialize', $l)));\n    return array_values($l);\n}\n",
  "    foreach ($l as $el) {\n        if (in_array($el, $l))\n            continue;\n\
    \        $l[] = $el;\n    }\n    return array_unique($l);\n}\n", "    $a = array();\n\
    \    $l = array_reverse($l);\n    foreach($l as $i => $e) {\n        $b = $e==$a[$i];\n\
    \        $a[$i] = $e;\n        $a = array_merge($a, array($i));\n        if($b)\
    \ break;\n    }\n    return array_values($a);\n}", "\t$r = [];\n\tforeach ($l\
    \ as $el) {\n\t\t$r[md5($el)] = $el;\n\t}\n\treturn array_values($r);\n}", " \
    \ $unique = array();\n  $l = array_map('unserialize', $l);\n  foreach ($l as $key\
    \ => $value) {\n    if (!in_array($value, $unique)) {\n      $unique[] = $value;\n\
    \    }\n  }\n  return array_map('serialize', $unique);\n}\n", "    $sorted = $l;\n\
    \    asort($sorted);\n    $result = array();\n    $j = 0;\n    foreach ($sorted\
    \ as $k => $v) {\n        if ($k != $j) {\n            $result[] = $v;\n     \
    \   }\n        $j++;\n    }\n    return $result;\n}", "\t$a = array_keys($l);\n\
    \t$a = array_map('unserialize', $a);\n\t$a = array_map('serialize', $a);\n\t$a\
    \ = array_unique($a);\n\t$a = array_map('unserialize', $a);\n\treturn $a;\n}\n",
  "    if ($l == null) {\n        return array();\n    }\n\n    $result = [];\n  \
    \  $count = count($l);\n    for($i = 0; $i < $count; $i++) {\n        if (in_array($l[$i],\
    \ $result)) {\n            continue;\n        } else {\n            $result[]\
    \ = $l[$i];\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\nI hope below function will work for you.\n<code>", " \
    \ if (!is_array($l))\n    return array();\n\n  $a = array();\n  foreach ($l as\
    \ $item)\n    if (!in_array($item, $a))\n      array_push($a, $item);\n\n  return\
    \ $a;\n}\n", "\t$u=array();\n\twhile($l = array_shift($l)) {\n\t\tif (!in_array($l,\
    \ $u)) {\n\t\t\t$u[] = $l;\n\t\t}\n\t}\n\treturn $u;\n}\n", "    return sort(array_unique($l));\n\
    }\n</code>\n<|/ a |>\n<| c |>\n`usort` is quite slower than `sort` (on large arrays).\
    \ Plus your `usort` doesn't use `$l` as an array parameter but uses it as an object\
    \ property. Also `array_unique` should be faster than `array_diff`.\n<|/ c |>\n\
    <| c |>\nI thought this was pretty clever. I was trying to think of a way to do\
    \ it without sorting in PHP, but I couldn't think of any other way. Your approach\
    \ is just amazing. Thanks!\n<|/ c |>\n<| c |>\nThank you for pointing that out,\
    \ I didn't even consider this as a possible performance improvement. Good catch!\n\
    <|/ c |>\n<| a |>\nI used the following as a simple solution to get the distinct\
    \ values from a multidimensional array in PHP:\n<code>\n$result = array();\nforeach($arr\
    \ as $key => $value) {\n  $result[] = $value['mykey'];\n}\n$result = array_unique($result);\n\
    </code>\n<|/ a tags=php,arrays,unique,multidimensional-array dscore=2 |>\n<| c\
    \ |>\nThe only issue with this is the duplicated value will get returned in $result.\
    \  If you don't want that to happen you can do a quick check to see if the value\
    \ is already in $result before adding it.\n<|/ c |>\n<| a dscore=2 |>\nYou can\
    \ try this one also\n<code>\n$a = array(\n   0 => array(\n    'name' => 'foo',\n\
    \    'amount' => '3'\n   ),\n   1 => array(\n    'name' => 'bar',\n    'amount'\
    \ => '1'\n   ),\n   2 => array(\n    'name' => 'foo',\n    'amount' => '5'\n \
    \  ),\n);\n\n$uniqueValues = array();\nforeach($a as $value)\n{\n    if(!in_array($value['name'],\
    \ $uniqueValues))\n    {\n       $uniqueValues[] = $value['name'];\n    }\n}\n\
    \necho \"<pre>\";\nprint_r($uniqueValues);\n</code>\n<|/ a tags=php,arrays,unique,multidimensional-array\
    \ |>\n<| a tags=php,arrays,unique,multidimensional-array |>\nI think this solution\
    \ will be easy to understand.\n<code>", "\t$r = array();\n\tfor ($i = 0, $cnt\
    \ = count($l); $i < $cnt; ++$i) {\n\t\t$key = null;\n\t\tforeach ($r as $key =>\
    \ $v) {\n\t\t\tif ($l[$i] === $v) {\n\t\t\t\tunset($r[$key]);\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($key === null) {\n\t\t\t$r[] = $l[$i];\n\t\t}\n\t}\n\t\
    return $r;\n}\n", "\t$a = array();\n\tforeach ($l as $value) {\n\t\tif (!in_array($value,\
    \ $a)) {\n\t\t\t$a[$value] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "\t\
    return array_keys(array_flip($l));\n}\n", "    if (empty($l)) {\n        return\
    \ array();\n    }\n    sort($l);\n    return array_unique($l);\n}\n", "    return\
    \ array_values(array_unique(\n        array_map(\n            function ($v) {\n\
    \                return $v;\n            },\n            $l\n        )\n    ));\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis solution seems to work, but I feel like it\
    \ could be improved by using iterators instead of building a new array on every\
    \ call. I'm looking into how to do that now.\n<|/ c |>\n<| c |>\n: I agree that\
    \ this is far from ideal, but I haven't come up with a better solution yet. `iterators`\
    \ are not really much simpler than arrays - you need to write your own `foreach`\
    \ loop to iterate over an `iterator`, which can only do one element at a time.\n\
    <|/ c |>\n<| c |>\n: I've just written a simple `foreach` loop that will iterate\
    \ over an iterator like an array. The only thing you need to do is to make sure\
    \ that you don't call `next` twice on the iterator, but instead check if it is\
    \ empty first.\n<|/ c |>\n<| a |>\nYou can use array_reduce:\n<code>\n$array =\
    \ array(\n    array(\"a\", \"b\", \"c\", \"d\"),\n    array(\"e\", \"f\", \"g\"\
    , \"h\")\n);\n\n$array_reduced = array_reduce($array, function($carry, $item){\n\
    \    return array_merge($carry, $item);\n}, array());\n\nprint_r($array_reduced);\n\
    </code>\n<|/ a dscore=2 tags=arrays,php |>\n<| c |>\n`array_merge()` does not\
    \ preserve the keys, so you'd need to use [`array_merge_recursive()`](http://php.net/array_merge_recursive)\
    \ instead.\n<|/ c |>\n<| c |>\nThis doesn't preserve the keys.  It just concatenates\
    \ the elements of the sub-arrays.\n<|/ c |>\n<| a dscore=2 tags=arrays,php |>\n\
    How about\n<code>\n$result = call_user_func_array('array_merge_recursive', array_map(function($arr)\
    \ {\n    return $arr;\n}, $array));\n</code>\n<|/ a |>\n<| c |>\nI like this one\
    \ because it's very concise and functional.  I like that it uses `array_map` instead\
    \ of `array_reduce`.  But I like the idea of using `array_reduce` instead of `call_user_func_array`.\
    \  It's a little bit more elegant.  It feels like a hack, but it does work.\n\
    <|/ c |>\n<| c |>\n, how is `call_user_func_array` less hacky than `array_merge_recursive`?\
    \ The latter is in fact a language construct, ", "\tif (is_array($l)) {\n\t\t\
    $u = array();\n\t\tforeach ($l as $key => $value) {\n\t\t\tif (in_array($value,\
    \ $u)) {\n\t\t\t\tunset($l[$key]);\n\t\t\t} else {\n\t\t\t\t$u[] = $value;\n\t\
    \t\t}\n\t\t}\n\t\treturn $l;\n\t} else {\n\t\treturn false;\n\t}\n}\n", "    return\
    \ array_diff(array_unique($l), $l);\n}\n", "    $s = array();\n    foreach($l\
    \ as $e) {\n        if(!isset($s[$e])) {\n            $s[$e] = 1;\n        } else\
    \ {\n            $s[$e]++;\n        }\n    }\n    return array_keys($s);\n}\n",
  "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a))\n      continue;\n\
    \    $a[] = $e;\n  }\n  return $a;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nThis\
    \ is a function that I wrote to remove the duplicates from the array without using\
    \ the in-built PHP functions\n<code>", "    $u = array();\n    $l = array_map('unserialize',\
    \ $l);\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n         \
    \   $u[] = $v;\n        }\n    }\n    return $u;\n}\n", "  return sort($l, SORT_NUMERIC);\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis looks promising, but I can't get\
    \ it to work.\n\nWhat I'm trying to do is to remove duplicates when comparing\
    \ a value with the rest of the array. So for example when comparing a value to\
    \ array(3, 3, 9, 0, 123), it should remove 3 and 9, leaving 0 and 123 as duplicates.\
    \ Can this be done with your function?\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ I think I got it figured out now. I'll update my answer to show how I did it.\n\
    <|/ c |>\n<| c |>\nWow, thank you for this. I'm going to test it out and see if\
    \ it's working as I need it to.\n<|/ c |>\n<| a tags=php,arrays,duplicates |>\n\
    You could do something like this:\n<code>\n<?php", "\tsort($l);\n\t$a = array();\n\
    \tfor ($i = 0, $count = count($l); $i < $count; $i++) {\n\t\tif (!in_array($l[$i],\
    \ $a)) {\n\t\t\t$a[] = $l[$i];\n\t\t}\n\t}\n\treturn $a;\n}\n\n/**\n * Create\
    \ a random number in the range [min,max]\n * \n * @param float $min \n * @param\
    \ float $max \n * @return float\n */", "    sort($l);\n    $unique = array();\n\
    \    foreach ($l as $k => $v) {\n        if ($v === $l[($k + 1)]) {\n        \
    \    unset($l[$k]);\n        } else {\n            $unique[$k] = $v;\n       \
    \ }\n    }\n    return $l;\n}\n\n/**\n * Sort an array by an arbitrary key and\
    \ some optional sub-keys.\n *\n * This is useful for sorting an multidimensional\
    \ array by any of its sub-keys,\n * while keeping the sub-keys sorted when passed\
    \ to the function.\n *\n * @param  array  $a\n * @param  string $key\n * @param\
    \  array  $subKeys\n * @return array\n */", "    $lc = array();\n    foreach ($l\
    \ as $ll) {\n        $lc[$ll]++;\n    }\n    $l = array();\n    foreach ($lc as\
    \ $ll) {\n        $l[] = $ll;\n    }\n    return array_unique($l);\n}\n", "\t\
    $seen = array();\n\tforeach ($l as $v) {\n\t\tif (!array_key_exists($v, $seen))\
    \ {\n\t\t\t$seen[$v] = 1;\n\t\t\treturn $v;\n\t\t}\n\t}\n\treturn '';\n}\n", " \
    \ $s = array();\n  foreach ($l as $k => $v) $s[$k] = $v;\n  return array_keys($s);\n\
    }\n</code>\n(This would also work, however, using a hash table instead of an array\
    \ to store the unique elements. Though it might be slightly slower, it might also\
    \ be a bit faster because it avoids the overhead of using an extra array or hash.)\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>", "  if (!is_array($l))\n\
    \    return array();\n  $a = array();\n  foreach ($l as $e) {\n    if ($e == $a[$e])\n\
    \      continue;\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n", "    $return\
    \ = array();\n    $l = array_values($l);\n    sort($l);\n    $return = array_unique($l);\n\
    \    return $return;\n}\n", "    sort($l);\n    return array_values(array_unique($l));\n\
    }\n", "    if (empty($l)) {\n        return array();\n    }\n\n    $unique = array();\n\
    \    foreach ($l as $item) {\n        if (!in_array($item, $unique)) {\n     \
    \       $unique[] = $item;\n        }\n    }\n    return $unique;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nHere is my code using array_filter() and\
    \ sort() to sort and remove duplicates:\n<code>\n$data[] = array(\"id\"=>$id,\
    \ \"date\"=>$date);\nsort($data);\n$data = array_filter($data, function($v){\n\
    \    return ! in_array($v['id'], $result);\n});\n$result = array_values($data);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\nI created a function\
    \ to remove duplicate entries from an array, based on one of the answers above.\n\
    The function accepts an array of objects with an id field and returns the same\
    \ array with the duplicates removed. \n<code>\n<?php", "  $a = array_keys($l);\n\
    \  sort($a);\n  return $a;\n}", "    $a = array();\n    foreach ($l as $e) {\n\
    \        if (! array_key_exists($e, $a)) {\n            $a[] = $e;\n        }\n\
    \    }\n    return $a;\n}\n", "  return array_unique($l);\n}\n", "    return array_map('unserialize',\
    \ array_unique(array_map('serialize', $l)));\n}\n</code>\n<|/ a tags=sorting,php,arrays\
    \ |>\n<| a dscore=1 tags=sorting,php,arrays |>\nI took the advice of and created\
    \ a solution using usort to sort arrays based on a key. Here it is.\n<code>\n\
    $data = [\n    ['name'=>'apple', 'quantity'=>100, 'price'=>150],\n    ['name'=>'banana',\
    \ 'quantity'=>15, 'price'=>18],\n    ['name'=>'orange', 'quantity'=>20, 'price'=>5],\n\
    \    ['name'=>'mango', 'quantity'=>12, 'price'=>10],\n];\n", "\tglobal $uniqueID;\n\
    \t$result=array();\n\tforeach($l as $key=>$value)\n\t{\n\t\t$result[$key]=$value;\n\
    \t}\n\tasort($result);\n\t$uniqueID++;\n\tforeach($result as $value)\n\t{\n\t\t\
    $result[$uniqueID]=$value;\n\t}\n\treturn $result;\n}", "    if (!is_array($l))\
    \ {\n        return $l;\n    }\n    $a = array();\n    foreach ($l as $v) {\n\
    \        if (in_array($v, $a)) {\n            continue;\n        }\n        $a[]\
    \ = $v;\n    }\n    return $a;\n}\n\n/**\n * Sorts an array of objects by a field\
    \ name.\n *\n * @param array  $a      The array of objects to sort.\n * @param\
    \ string $field  The field to use when sorting. Must exist in\n *            \
    \           each object.\n * @param string $order The sort order. Must be either\
    \ 'asc' or 'desc'.\n *\n * @return array The sorted array of objects.\n */", "\t\
    sort($l);\n\t$l = array_flip($l);\n\treturn $l;\n}\n", "\t$s = $l = array();\n\
    \tforeach ($l as $e) $l[$e] = 1;\n\tforeach ($l as $e) if (!isset($s[$e])) $s[$e]\
    \ = 0;\n\treturn array_keys($s);\n}\n", "  if (!is_array($l) || empty($l)) {\n\
    \    return $l;\n  }\n\n  $l = array_map(\"unserialize\", array_unique(array_map(\"\
    serialize\", $l)));\n  sort($l, SORT_NUMERIC);\n  return $l;\n}\n\n/**\n * A simple\
    \ wrapper to run a query on a database and return the results.\n *\n * Examples:\n\
    \ *\n *     $rows = $db->query($query);\n *     $rows = $db->query($query, $args);\n\
    \ *     $rows = $db->query($query, $args, $params);\n *     $rows = $db->query($query,\
    \ $args, $params);\n *     $rows = $db->query($query, $args);\n *\n * @param string\
    \ $query A database query.\n * @param array  $args  An array of arguments for\
    \ the query.\n * @param array  $params An array of parameters for the query.\n\
    \ *\n * @return array\n *   An array of rows retrieved from the database query.\
    \ If there are no results\n *   the array will be empty.\n */", "    if (empty($l))\n\
    \        return array();\n    $s = array();\n    $l = array_reverse($l);\n   \
    \ foreach ($l as $k => $e) {\n        if (!in_array($e, $s)) {\n            array_push($s,\
    \ $e);\n        }\n    }\n    return $s;\n}", "  $u = [];\n  $f = array_flip($l);\n\
    \  foreach ($l as $v) {\n    if (isset($f[$v])) {\n      $u[] = $v;\n    }\n \
    \ }\n  return $u;\n}\n", "\t$l = $l ? $l : array();\n\t$l = array_values($l);\n\
    \tsort($l);\n\treturn $l;\n}\n", "    $ar = [];\n    $ar = array_unique($l);\n\
    \    return $ar;\n}\n", "\tsort($l);\n\treturn array_values(array_unique($l));\n\
    }\n", "    return array_unique(implode('', $l));\n}\n", "    if ($l===array())\n\
    \        return array();\n    $i=0;\n    $k=0;\n    $nx=count($l);\n    while\
    \ ($i<$nx)\n    {\n        ++$i;\n        if ($k<$i)\n        {\n            $t=key($l);\n\
    \            $keys[$t]=$t;\n            unset($l[$t]);\n        }\n        ++$k;\n\
    \    }\n    return array_values($l);\n}", "    return array_diff(array_unique(sort($l)),\
    \ $l);\n}\n", "    asort($l);\n    $result = array();\n    foreach ($l as $e)\
    \ {\n        $result[] = $e;\n    }\n    return $result;\n}\n", "\tsort($l);\n\
    \t$u = array();\n\twhile ($l = array_shift($l)) {\n\t\tif (!in_array($l, $u))\
    \ {\n\t\t\t$u[] = $l;\n\t\t}\n\t}\n\treturn $u;\n}", "  $a = array_map(function\
    \ ($x) { return $x; }, $l);\n  $a = array_unique($a);\n  return $a;\n}\n", " \
    \   if ($l == array()) {\n        return array();\n    }\n    $a = $l = array_values($l);\n\
    \    asort($a);\n    $a = array_unique($a);\n    sort($a);\n    return $a;\n}\n",
  "  return array_unique($l);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n\
    \        $b[] = $e;\n    }\n    $c = array_values(array_unique($b));\n    return\
    \ $c;\n}", "    return array_unique($l);\n}\n", "    return array_unique(sort($l));\n\
    }\n", "    $f = function($item) use ($l) {\n        return array_search(&$item,\
    \ $l) !== false;\n    };\n    return array_filter($l, $f);\n}", "    $r = [];\n\
    \    $cnt = count($l);\n    for($i = 0; $i < $cnt; $i++) {\n        $k = $l[$i];\n\
    \        if(!isset($r[$k])) {\n            $r[$k] = 1;\n        } else {\n   \
    \         $r[$k]++;\n        }\n    }\n    return array_keys($r);\n}", "    return\
    \ array_unique($l);\n}", "  $a = array();\n  foreach ($l as $v) {\n    if (array_key_exists($v,\
    \ $a)) continue;\n    $a[$v] = 1;\n  }\n  return array_keys($a);\n}\n", "\t$u\
    \ = array();\n\tforeach($l as $i=>$e) if ($e && $e!=$l[0]) $u[$i]=$e;\n\trsort($u);\n\
    \treturn $u;\n}\n", "\t$c = array_count_values($l);\n\t$t = array();\n\tforeach\
    \ ($c as $k => $v) {\n\t\tif ($v == 1) unset($c[$k]);\n\t\telse $t[$k] = $v;\n\
    \t}\n\treturn $t;\n}\n", "\t$u = array();\n\tforeach ($l as $i => $e) {\n\t\t\
    if ($e == $l[$i]) {\n\t\t\tcontinue;\n\t\t}\n\t\t$u[] = $e;\n\t}\n\treturn $u;\n\
    }\n", "    $c = count($l);\n    for($i = 1; $i <= $c; $i++) {\n        for($j\
    \ = $i; $j < $c; $j++) {\n            if ($l[$i] == $l[$j]) {\n              \
    \  unset($l[$j]);\n            }\n        }\n    }\n    return $l;\n}\n", "  $s\
    \ = array();\n  foreach($l as $e) $s[$e] = $e;\n  return array_values($s);\n}\n",
  "    $d = array();\n    foreach($l as $e) {\n        $d[$e] = true;\n    }\n   \
    \ return array_keys($d);\n}", "    $a = array_slice($l, 0, 0);\n    foreach (array_slice($l,\
    \ 0, -1) as $b) {\n        if ( !in_array($b, $a) ) {\n            $a[count($a)]\
    \ = $b;\n        }\n    }\n    return $a;\n}\n", "\treturn array_keys(array_flip($l));\n\
    }", "  $res = array();\n  foreach ($l as $e) {\n    $key = array_search($e, $res);\n\
    \    if ($key !== false)\n      $res[$key]++;\n    else\n      $res[$e] = 1;\n\
    \  }\n  return $res;\n}", "    if (is_array($l)) {\n        return array_unique($l);\n\
    \    } else {\n        return array();\n    }\n}\n", "\tif (!$l) {\n\t\treturn\
    \ array();\n\t}\n\tsort($l);\n\t$l = array_values($l);\n\t$l = array_unique($l);\n\
    \t$l = array_merge($l, array_slice($l,0,count($l)-1));\n\treturn $l;\n}\n\n",
  "\tsort($l);\n\t$s = array();\n\tforeach ($l as $key => $val)\n\t\t$s[] = $key;\n\
    \treturn array_unique($s);\n}\n", "\tif ($l == NULL || !is_array($l))\n\t\treturn\
    \ $l;\n\telse\n\t\treturn array_unique(array_map('strtolower', $l));\n}\n", " \
    \   return array_keys(array_flip($l));\n}\n</code>\n<|/ a |>\n<| a dscore=4 |>\n\
    As I needed something that would allow me to not have duplicates in a multidimensional\
    \ array I could do this (I needed this for a multidimensional array that had some\
    \ duplicate key values in it):\n<code>\n<?php\n\n$my_array = array(\n    'a' =>\
    \ array(\n        'title' => 'Some title',\n        'id' => '1',\n        'desc'\
    \ => 'Some description'\n    ),\n    'b' => array(\n        'title' => 'Some title',\n\
    \        'id' => '2',\n        'desc' => 'Some description'\n    ),\n    'c' =>\
    \ array(\n        'title' => 'Some title',\n        'id' => '3',\n        'desc'\
    \ => 'Some description'\n    ),\n    'd' => array(\n        'title' => 'Some title',\n\
    \        'id' => '4',\n        'desc' => 'Some description'\n    )\n);\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
