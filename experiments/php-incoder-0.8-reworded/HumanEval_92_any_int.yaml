name: HumanEval_92_any_int
language: php
prompt: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if one\
  \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
  // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n\
  // >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
  \ -2.2, 2)\n// false\nfunction any_int($x, $y, $z) {\n"
tests: "function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    return ($x + $y) == $z && (intval($x) + intval($y)) == $z;\n}",
  "    if (is_numeric($x)) {\n        if (is_numeric($y)) {\n            if (is_numeric($z))\
    \ {\n                if ($x + $y == $z) {\n                    return true;\n\
    \                }\n            } else {\n                if ($y == 0) {\n   \
    \                 return true;\n                }\n            }\n        } else\
    \ {\n            if (is_numeric($z)) {\n                if ($x == $z) {\n    \
    \                return true;\n                }\n            } else {\n     \
    \           if ($x == 0) {\n                    return true;\n               \
    \ }\n            }\n        }\n    } else {\n        if (is_numeric($y)) {\n \
    \           if (is_numeric($z)) {\n                if ($y == $z) {\n         \
    \           return true;\n                }\n            } else {\n          \
    \      if ($y == 0) {\n                    return true;\n                }\n \
    \           }\n        } else {\n            if (is_numeric($z)) {\n         \
    \       if ($x == $z) {\n                    return true;\n                }\n\
    \            } else {\n                if ($x == 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;\n\
    }\n</code>\n<|/ a |>\n<| a |>\nThe main idea is to count the zeroes in the binary\
    \ representation of all numbers. To calculate this number of zeroes we apply the\
    \ concept of bit-wise operations.\nExample\n<code>\n   0101 (bin)\n   ----\n \
    \  0001 \n\n   0010 (bin)\n   ------\n   0001 \n</code>\nThe number of zeroes\
    \ in the binary representation of both numbers is 3\nSo if we use some bit-wise\
    \ operations to do this\n<code>\n<?php\n$num1 = 1;\n$num2 = 2;\n\n$bin1 = $num1\
    \ >> 1;\n$bin2 = $num2 >> 1;\n\n$zeroes1 = ($bin1 & 1);\n$zeroes2 = ($bin2 & 1);\n\
    \necho \"Number of zeroes is \" . ($zeroes1 + $zeroes2);", "    if ($x === $y\
    \ || $x === $z) return true;\n    if ($y === $z) return true;\n    return false;\n\
    }\n", "    // Make sure the three numbers are integers.\n    if (intval($x) !=\
    \ $x || intval($y) != $y || intval($z) != $z) {\n        return false;\n    }\n\
    \n    // Return true if any of the three numbers matches the sum.\n    return\
    \ $x + $y + $z == ($x + $y + $z);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ was the simplest solution in my opinion\n<|/ c |>\n<| c |>\nThis is so simple\
    \ it deserves more upvotes.  It was the only one that actually works.  If you're\
    \ looking for something that doesn't involve integers, you can use `floatval()`,\
    \ `is_numeric()`, `is_integer()`, or `is_float()`.  You really should look into\
    \ php docs.\n<|/ c |>\n<| a dscore=1 tags=sum,php,math |>\nTry this function:\n\
    <code>", "    return (is_int($x) && is_int($y) && is_int($z)) || (is_int($x) &&\
    \ is_int($y) && is_int($z)) || (is_int($x) && is_int($y) && is_int($z));\n}",
  "    if (is_int($x) && is_int($y) && is_int($z)) {\n        return $x + ($y + $z)\
    \ == $x + $y + $z;\n    }\n    return false;\n}", "    return ($x == $y) || is_int($x)\
    \ && is_int($y) && is_int($z);\n}\n", "    // Add $x and $y\n    $add = $x + $y;\n\
    \    // Make sure the sum is an integer\n    if ($add != round($add)) {\n    \
    \    // If it's not, the sum was not an integer - return false\n        return\
    \ false;\n    }\n    // Add $x and $z\n    $add = $x + $z;\n    // Make sure the\
    \ sum is an integer\n    if ($add != round($add)) {\n        // If it's not, the\
    \ sum was not an integer - return false\n        return false;\n    }\n    //\
    \ Return true if all numbers are equal\n    return true;\n}\n", "    if ($x +\
    \ $y == $z) {\n        return true;\n    }\n    return false;\n}\n", "    $a =\
    \ $x - $y;\n    $b = $y - $z;\n    if ($a == 0 || $b == 0)\n        return true;\n\
    \    elseif ($a < 0 && $b < 0)\n        return true;\n    elseif ($a < 0 && $b\
    \ > 0)\n        return false;\n    else\n        return false;\n}\n", "    if\
    \ (is_int($x) && is_int($y) && is_int($z)) {\n        return (($x+$y+$z) === ($x+$y+$z));\n\
    \    }\n    return false;\n}", "    if ((is_integer($x) and is_integer($y)) and\
    \ is_integer($z)) {\n        return ($x + $y == $z);\n    }\n\n    return false;\n\
    }\n", "    if ($x === $y || $x === $z) {\n        return true;\n    }\n    if\
    \ ($y === $z) {\n        return true;\n    }\n    if ($x === $z || $y === $z)\
    \ {\n        return false;\n    }\n    if (is_int($x)) {\n        return true;\n\
    \    }\n    if (is_int($y)) {\n        return true;\n    }\n    if (is_int($z))\
    \ {\n        return true;\n    }\n    return false;\n}\n", "    $result = ($x==$y?true:false)\
    \ AND ($y==$z?true:false) AND (is_int($x)?true:false);\n    return $result;\n}",
  "    $xis_int = (int) $x;\n    $yis_int = (int) $y;\n    $zis_int = (int) $z;\n\
    \    if ($xis_int == $yis_int && $xis_int == $zis_int) {\n        return true;\n\
    \    }\n    if ($yis_int == $xis_int && $yis_int == $zis_int) {\n        return\
    \ true;\n    }\n    if ($zis_int == $xis_int && $zis_int == $yis_int) {\n    \
    \    return true;\n    }\n    return false;\n}\n</code>\n<|/ a |>\n<| c |>\nWhat\
    \ does this have to do with the question? The question was about how to use an\
    \ \"or\" in the conditional statement, and this answer does not use that.\n<|/\
    \ c |>\n<| c |>\nThis answer is about how to apply \"or\" in the conditional statement.\
    \ I am not sure what kind of answer you expect from the question as there is nothing\
    \ in the question about the \"or\" operator. But in any case, this is something\
    \ you can always use.\n<|/ c |>\n<| c |>\nNot the question, but I wanted to point\
    \ out that while this answer may work it probably isn't the best way of doing\
    \ it.\n<|/ c |>\n<| c |>\nActually, a better way would be to wrap it in a function,\
    \ which would allow you to pass it anything.\n<|/ c |>\n<| c |>\nThat is the better\
    \ way. I think the \"or\" operator is just to demonstrate that the same number\
    \ can appear more than once in a statement, and that the same number may not appear\
    \ more than once in a statement, which is also why I used a function. It was just\
    \ to demonstrate the use of a function.\n<|/ c |>\n<| a dscore=0 |>\nTry this,\
    \ this will return the value you are looking for\n<code>\n$sum = 0;\n$sum = $sum\
    \ + $value; //This line is for getting sum of all the variables\n</code>\n$sum\
    \ is equal to sum of all the variables. \nHope this helps\n<|/ a tags=php,conditional\
    \ |>\n<| c |>\nHi Praveen, I'm pretty sure I posted that before you deleted your\
    \ comment and now you rewrote your answer. I understand what you're saying, but\
    \ I'm looking for an answer like yours that is more concise in terms of coding.\
    \ I prefer to see an answer that doesn't use multiple lines.\n<|/ c |>\n<| a tags=php,conditional\
    \ |>\nYou can create a function with any amount of arguments and it will do the\
    \ job.\n<code>", "    $sum = $x + $y;\n    $all_integer = filter_var($sum, FILTER_VALIDATE_INT,\
    \ FILTER_NULL_ON_FAILURE);\n\n    // If one or the other are non-integers, return\
    \ false\n    if (!is_int($x) or !is_int($y) or !is_int($z) or !is_int($all_integer))\
    \ {\n        return false;\n    }\n\n    // If only two numbers are provided,\
    \ return true\n    if ($x === $z and $y === $z) {\n        return true;\n    }\n\
    \n    // If only one number is provided, return false\n    if ($x === $y or $y\
    \ === $z or $x === $z or $y === $z) {\n        return false;\n    }\n\n    //\
    \ Return true only if all numbers are equal\n    return $all_integer === $x +\
    \ $y;\n}\n</code>\n<|/ a dscore=1 tags=php |>\n<| c |>\nHmm, not sure how I can\
    \ use your method with mine though.\n<|/ c |>\n<| c |>\n- See my updated answer\
    \ for a way to solve your original problem, as well as the explanation of your\
    \ algorithm.\n<|/ c |>\n<| c |>\n- If my answer solved your problem, please accept\
    \ it by clicking the checkmark next to it (you can also upvote if you like). Thanks!\n\
    <|/ c |>\n<| c |>\nI really appreciate your answer. I do however have an additional\
    \ question: how would I be able to add multiple numbers together and return the\
    \ highest result? For example if the numbers I wanted to add were 5,8,9, and I\
    \ wanted to return 9 how would I be able to do so?\n<|/ c |>\n<| c |>\n- You could\
    \ use something similar to the `any_int` function that I posted, which checks\
    \ the sum of the numbers and returns `true` or `false` based on the sum. `any_int`\
    \ should be able to return `true` or `false` based on any number that is `int`.\n\
    <|/ c |>\n<| a dscore=0 |>\nYou can do it in a single line like this:\n<code>\n\
    $result = (max($a + $b, $a + $c, $a + $d) === $a + $b + $c + $d) ? $a + $b + $c\
    \ + $d : 0;\n</code>\n<|/ a tags=php |>\n<| c |>\nWhile this code may answer the\
    \ question, it would be better to explain how it solves the problem and why to\
    \ use it. Code-only answers are not useful in the long run.\n<|/ c |>\n<| c |>\n\
    Sorry, I completely agree with you. The problem is that I don't have that ", " \
    \ // This function uses bitwise operators and is very easy to understand.\n  //\
    \ It returns a binary number whose only one bit represents a \"1\".\n  // If the\
    \ number is \"0\", then return false.\n  // If the last bit is 0, the result is\
    \ \"1\". If the number is negative, then the result is \"0\".\n  // If the first\
    \ bit is 1, then the result is \"1\". If the sum of x and y is even, then the\
    \ result is \"0\". If not, then it is \"1\". Return this value.\n  // Explanation:\
    \ 511 is the binary representation of 111. 110 (the \"5\" in the beginning) is\
    \ \"1\"; 110+3 is \"10\". Therefore the result is \"1\"\n  // If the sum of x\
    \ and y is odd, then the result is \"0\". If not, then it is \"1\". Return this\
    \ value.\n  // Explanation: 511 is the binary representation of 111. 110 (the\
    \ \"5\" in the beginning) is \"1\"; 110+3 is \"11\". Therefore the result is \"\
    1\"\n  // If the sum is even, then the result is \"0\". If not, then it is \"\
    1\". Return this value.\n  // Explanation: 511 is the binary representation of\
    \ 111. 110 (the \"5\" in the beginning) is \"1\"; 110+3 is \"10\". Therefore the\
    \ result is \"1\"\n  // If the sum is odd, then the result is \"0\". If not, then\
    \ it is \"1\". Return this value.\n  // Explanation: 511 is the binary representation\
    \ of 111. 110 (the \"5\" in the beginning) is \"1\"; 110+3 is \"11\". Therefore\
    \ the result is \"1\"\n  // If the sum is even and the last bit is 0, then the\
    \ result is \"0\". If not, then it is \"1\". Return this value.\n  // Explanation:\
    \ 511 is the binary representation of 111. 110 (the \"5\" in the beginning) is\
    \ \"1\"; 110+3 is \"10\". Therefore the result is \"1\"\n  // If the sum is odd\
    \ and the first bit is 0, then the result is \"0\". If not, then it is \"1\".\
    \ Return this value.\n  // Explanation: 511 is the binary representation of 111.\
    \ 110 (the \"5\" in the beginning) is \"1\"; 110+3 is \"11\". Therefore the result\
    \ is \"1\"\n\n  // This part is the same as any_int() except that if any number\
    \ is an integer, then return true. Return false otherwise.\n  $x_or_zero = $x\
    \ | 0;\n  $y_or_zero = $y | 0;\n  $z_or_zero = $z | 0;\n  if ($x_or_zero === $y_or_zero)\
    \ {\n    if ($x_or_zero === $z_or_zero) {\n      return ($x_or_zero & 1);\n  \
    \  } else {\n", "    $isOdd = $x % 2;\n    $isEven = $y % 2;\n    $isSum = $x\
    \ + $y + $z == $isOdd ? 1 : 0;\n\n    return $isSum == $isEven && $isOdd && $isEven;\n\
    }", "    if (is_int($x) && is_int($y) && is_int($z)) {\n        return ($x + $y\
    \ + $z) == 0;\n    } else {\n        return false;\n    }\n}", "    if ($x ==\
    \ $y + $z && is_int($x) && is_int($y) && is_int($z)) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n", "  if(is_int($x) && is_int($y)\
    \ && is_int($z)) {\n    return $x === $y + $z;\n  } else {\n    return false;\n\
    \  }\n}\n", "  if (is_string($x)) {\n    $x = strtolower($x);\n  }\n  if (is_string($y))\
    \ {\n    $y = strtolower($y);\n  }\n  if (is_string($z)) {\n    $z = strtolower($z);\n\
    \  }\n  // Make sure they all are integers\n  if (is_int($x) && is_int($y) &&\
    \ is_int($z)) {\n    if ($x === $y || $y === $z || $z === $x) {\n      return\
    \ TRUE;\n    } else {\n      return FALSE;\n    }\n  }\n  return FALSE;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThat was my first thought as well, but when I tested it I got\
    \ \"Warning: Cannot redeclare any_int() (previously declared in\" on the `any_int($x,\
    \ $y, $z)` line (I used PHP 5.2.17).\n<|/ c |>\n<| c |>\nThat's what I thought\
    \ too. I wasn't sure if that function declaration was in the other file, but after\
    \ testing it I realized that it didn't appear in the other file, so I took it\
    \ out from the file that had the function and then I was able to use it in my\
    \ own file.\n<|/ c |>\n<| c |>\n: I used this exact function in my code and it\
    \ seemed to work fine. Are you sure you weren't declaring it in some other file?\n\
    <|/ c |>\n<| c |>\nI'm just trying to figure out what my problem was, my code\
    \ is the same as yours so I don't know why it won't work. Maybe I'll try your\
    \ code now to see if it works.\n<|/ c |>\n<| c |>\n: Are you declaring it twice\
    \ in two different files?\n<|/ c |>\n<| a tags=php dscore=2 |>\n<code>", "\t//\
    \ $x has to be a number\n\t// $y has to be a number\n\t// $z has to be a number\n\
    \treturn $x==$y + $z && $x==$y && $x==$z;\n}\n", "    return ($x == $y or $x ==\
    \ $z or $y == $z) and is_int($x) and is_int($y) and is_int($z);\n}\n", "    if\
    \ ($x == $y + $z) {\n        if (is_int($x) && is_int($y) && is_int($z)) {\n \
    \           return true;\n        }\n        return false;\n    }\n    if (is_int($x)\
    \ && is_int($y) && is_int($z)) {\n        return true;\n    }\n    return false;\n\
    }\n", "    return $x === $y + $z && is_int($x) && is_int($y) && is_int($z);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=php,math |>\nYou could try this:\n\
    <code>\nif ($number == $number + $number + $number) {\n    // do something\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis won't work.  It will match ANY number, which\
    \ is *not* what he wants.  He wants to match ALL numbers.\n<|/ c |>\n<| c |>\n\
    If all numbers are equal, how can any number be the sum of other numbers?\n<|/\
    \ c |>\n<| c |>\nNo, no.  Read the code more carefully.  He wants to match all\
    \ numbers.\n<|/ c |>\n<| c |>\nHe wants to match all numbers.\n<|/ c |>\n<| c\
    \ |>\nWhat about `+5` and `+5+5`?\n<|/ c |>\n<| a |>\nYou could try this (works\
    \ in PHP 5.3+):\n<code>\nif ($number == $number + $number + $number) {\n    //\
    \ do something\n}\n</code>\n<|/ a tags=php,math dscore=1 |>\n<| c |>\nThis is\
    \ good for the specific case where all numbers are equal, but will not work for\
    \ the general case.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    return ($x == $y\
    \ || $x == $z || $y == $z) ? true : false;\n}\n", "  if ($x == $y + $z) {\n  \
    \  return true;\n  }\n  if ($x != $y && $x != $z && $y != $z) {\n    return false;\n\
    \  }\n  return true;\n}", "  $x_int = (int)$x;\n  $y_int = (int)$y;\n  $z_int\
    \ = (int)$z;\n\n  // If one number is zero, then the sum must be zero.\n  if ($x_int\
    \ == 0 && $y_int == 0 && $z_int == 0) {\n    return true;\n  }\n\n  // If all\
    \ three numbers are zero, then the sum must be zero.\n  if ($x_int == 0 && $y_int\
    \ == 0 && $z_int == 0) {\n    return true;\n  }\n\n  // If only one number is\
    \ zero, the sum must be zero.\n  if ($x_int == 0 && $y_int != 0 && $z_int == 0)\
    \ {\n    return true;\n  }\n\n  // If only the other two are zero, the sum must\
    \ be zero.\n  if ($x_int == 0 && $y_int == 0 && $z_int != 0) {\n    return true;\n\
    \  }\n\n  // Otherwise, check if the sum equals the sum of the other two.\n  return\
    \ ($x_int + $y_int + $z_int) == ($x + $y + $z);\n}", "    \n    // Test each element\
    \ in the array.\n    foreach ($x as $key => $value) {\n        // $value must\
    \ be an integer.\n        if (!is_int($value)) {\n            return false;\n\
    \        }\n    }\n    \n    // Test each element in the array.\n    foreach ($y\
    \ as $key => $value) {\n        // $value must be an integer.\n        if (!is_int($value))\
    \ {\n            return false;\n        }\n    }\n    \n    // Test each element\
    \ in the array.\n    foreach ($z as $key => $value) {\n        // $value must\
    \ be an integer.\n        if (!is_int($value)) {\n            return false;\n\
    \        }\n    }\n    \n    // Test each element in the array.\n    foreach ($x\
    \ as $key => $value) {\n        // $value must be an integer.\n        if (!is_int($value))\
    \ {\n            return false;\n        }\n    }\n    \n    // Test each element\
    \ in the array.\n    foreach ($y as $key => $value) {\n        // $value must\
    \ be an integer.\n        if (!is_int($value)) {\n            return false;\n\
    \        }\n    }\n    \n    // Test each element in the array.\n    foreach ($z\
    \ as $key => $value) {\n        // $value must be an integer.\n        if (!is_int($value))\
    \ {\n            return false;\n        }\n    }\n    \n    // Test each element\
    \ in the array.\n    foreach ($x as $key => $value) {\n        // $value must\
    \ be an integer.\n        if (!is_int($value)) {\n            return false;\n\
    \        }\n    }\n    \n    // All elements are the same.\n    return true;\n\
    }\n", "  return ((is_int($x) && is_int($y) && is_int($z)) || (is_numeric($x) &&\
    \ is_numeric($y) && is_numeric($z)))\n    && ($x == $y || $x == $z || $y == $z);\n\
    }", "    if (!is_int($x) || !is_int($y) || !is_int($z)) {\n        return false;\n\
    \    }\n    return ($x + $y == $z) ? true : false;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI don't understand the downvote. Did I do something wrong?\n<|/\
    \ c |>\n<| a tags=php |>\nYou can use this function. \n<code>\n<?php\n", "   \
    \ if (($x == $y) && ($y == $z)) {\n        return true;\n    }\n    elseif ($x\
    \ == $y) {\n        return true;\n    }\n    elseif ($y == $z) {\n        return\
    \ true;\n    }\n    else {\n        return false;\n    }\n}", "  $sum = ($x +\
    \ $y) + $z;\n  return is_int($sum) && ($sum == $x || $sum == $y || $sum == $z);\n\
    }\n", "    $is_sum = ($x + $y) == $z;\n    if ($x === $y) {\n        if ($z ===\
    \ 0 || $z === 1) {\n            return $is_sum;\n        }\n    } else {\n   \
    \     $is_square = ($x * $x) == ($y * $y);\n        if ($is_square) {\n      \
    \      $is_sum = $is_sum || $z == 0;\n        }\n    }\n    return $is_sum;\n\
    }\n\n$nums = [1, 3, 4, 4];", "  if ($x == $y + $z) return true;\n  return false;\n\
    }\n", "    // Return true if the sum of the first two numbers is equal to the\
    \ third\n    if ($x + $y == $z) {\n        return true;\n    }\n\n    // Return\
    \ false if the sum of the first two numbers is different from the third\n    if\
    \ ($x + $y != $z) {\n        return false;\n    }\n\n    // Check each number\
    \ individually to see if they are integers\n    // Return true if all numbers\
    \ are integers\n    if ($x % 1 == 0) {\n        if ($y % 1 == 0) {\n         \
    \   return $z % 1 == 0;\n        } else {\n            return false;\n       \
    \ }\n    } else {\n        if ($y % 1 == 0) {\n            return false;\n   \
    \     } else {\n            return $z % 1 == 0;\n        }\n    }\n}", "    $x_int\
    \ = (int) $x;\n    $y_int = (int) $y;\n    $z_int = (int) $z;\n\n    if ($x_int\
    \ == $y_int + $z_int) {\n        if ($x_int == $y_int || $x_int == $z_int) {\n\
    \            return true;\n        }\n    }\n\n    return false;\n}\n", "    //\
    \ Check if any of them are integers\n    if (is_int($x) && is_int($y) && is_int($z))\
    \ {\n        if ($x + $y == $z) {\n            return true;\n        } else {\n\
    \            return false;\n        }\n    } else {\n        return false;\n \
    \   }\n}\n", "    $a = $x + $y;\n    $b = $x + $z;\n    $c = $y + $z;\n    if\
    \ ($a == $b && $a == $c) {\n        return true;\n    }\n    return false;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nWhy not just `return $a + $b == $c + $d`?\
    \ This way you are not creating any extra variables.\n<|/ c |>\n<| c |>\nThat\
    \ would do the same thing as this answer. Although this would also work `$a ==\
    \ $b && $a == $c && $a == $d` which seems kind of cool :D\n<|/ c |>\n<| c |>\n\
    I guess the point is to show that you can do it in one line. It's not a good example\
    \ but it shows that you can do it in one line (at least for the cases you've given).\n\
    <|/ c |>\n<| c |>\nThanks guys for answering.\n<|/ c |>\n<| c |>\n: Yeah, I was\
    \ trying to think of a good example where you couldn't do it that way but it doesn't\
    \ seem to exist.\n<|/ c |>\n<| a tags=php |>\n<code>", "    return $x === $y +\
    \ $z;\n}\n</code>\nYou can create a function like that in PHP like this:\n<code>",
  "\tif ($x == $y || $x == $z || $y == $z) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\n", "    $return = ($x == $y) || ($x == $z) || ($y == $z);\n    if (!$return)\
    \ return false;\n    $return = ($x === intval($x)) || ($y === intval($y)) || ($z\
    \ === intval($z));\n    if (!$return) return false;\n    return ($x === intval($x))\
    \ || ($y === intval($y)) || ($z === intval($z));\n}", "    return (($x == $y)\
    \ | ($x == $z)) & intval($x) == intval($y) | intval($x) == intval($z);\n}\n</code>\n\
    <|/ a dscore=3 tags=php,function,variables |>\n<| c |>\nYeah this is what I was\
    \ looking for, just don't know how or where to put it.\n<|/ c |>\n<| a tags=php,function,variables\
    \ |>\n<code>\n<?php", "    if(is_int($x) && is_int($y) && is_int($z)) {\n    \
    \    if($x == $y || $x == $z || $y == $z) {\n            return true;\n      \
    \  } else {\n            return false;\n        }\n    } else {\n        return\
    \ false;\n    }\n}\n</code>\n<|/ a |>\n<| a tags=php,javascript,math,if-statement\
    \ |>\nThis simple code should do the trick:\n<code>", "    if ($x + $y === $z\
    \ || $x + $y === $z - $x || $y - $z === $x) {\n        return true;\n    }\n \
    \   return false;\n}\n", "    $result = $x + $y === $z;\n    if ($result) {\n\
    \        $x = (int) $x;\n        $y = (int) $y;\n        $z = (int) $z;\n    \
    \    $result &= $x === $y;\n        $result &= $y === $z;\n    }\n    return $result;\n\
    }", "  // Check for valid values\n  if ($x < 0 || $y < 0 || $z < 0) {\n    return\
    \ false;\n  }\n\n  // Check if all values are integers\n  if ($x === (int) $x\
    \ && $y === (int) $y && $z === (int) $z) {\n    return true;\n  }\n\n  return\
    \ false;\n}\n", "    if(is_int($x) && is_int($y) && is_int($z)) {\n        return\
    \ ($x + $y + $z == ($x + $y) + $z);\n    } else {\n        return false;\n   \
    \ }\n}", "    return $x === $y || $x === $z || $y === $z;\n}", "    $x_int = (int)$x;\n\
    \    $y_int = (int)$y;\n    $z_int = (int)$z;\n    return ($x_int + $y_int + $z_int)\
    \ == $x_int + $y_int + $z_int;\n}\n</code>\n<code>\n<?php", "  return ($x + $y\
    \ + $z == (int) $x + $y + (int) $z);\n}", "  return (($x + $y + $z) == $x + $y\
    \ + $z);\n}", "  $x = abs($x);\n  $y = abs($y);\n  $z = abs($z);\n  if ($x ==\
    \ $y && $y == $z) {\n    return true;\n  }\n  return false;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThank you for answering! I appreciate your time. After\
    \ testing your code, I realized that I had to remove the second '$y' in line 15\
    \ to make it work. I wonder why it only works with one variable. Also, could you\
    \ please explain your solution? I am a beginner programmer and I am not too sure\
    \ how I would use the code you provided to solve the problem. Thank you!\n<|/\
    \ c |>\n<| c |>\nOh yeah. Yes, you're right. I've fixed it now. I just had to\
    \ change that one variable for my code to work. Just replace line 15 with `$x\
    \ = abs($x);`.\n<|/ c |>\n<| a tags=php dscore=1 |>\nHere's another way to do\
    \ it using range(). Your input values are all positive so you can test them against\
    \ the sum of their absolute values to see if the absolute value matches the sum.\n\
    <code>", "    return ($x + $y + $z == $x + $y || $x + $y + $z == $x + $z || $x\
    \ + $y + $z == $y + $z);\n}", "  if (is_int($x) && is_int($y) && is_int($z) &&\
    \ $x + $y == $z) {\n    return true;\n  }\n  else {\n    return false;\n  }\n\
    }\n", "  if (is_integer($x) && is_integer($y) && is_integer($z)) {\n    if ($x\
    \ === $y || $x === $z || $y === $z) {\n      return ($x === $y);\n    }\n  }\n\
    \  return false;\n}\n", "    // Your code here\n    if ($x==$y+$z) return false;\n\
    \    else if (($x==$y+$z) || ($y==$z) || ($z==$x)) return true;\n    else if (($x==$y+$z)\
    \ || ($y==$z) || ($z==$x)) return true;\n    else if (($x==$y+$z) || ($y==$z)\
    \ || ($z==$x)) return true;\n    else if (($x==$y+$z) || ($y==$z) || ($z==$x))\
    \ return true;\n    else if (($x==$y+$z) || ($y==$z) || ($z==$x)) return true;\n\
    \    else if (($x==$y+$z) || ($y==$z) || ($z==$x)) return true;\n    else if (($x==$y+$z)\
    \ || ($y==$z) || ($z==$x)) return true;\n    else if (($x==$y+$z) || ($y==$z)\
    \ || ($z==$x)) return true;\n    else if (($x==$y+$z) || ($y==$z) || ($z==$x))\
    \ return true;\n    else if (($x==$y+$z) || ($y==$z) || ($z==$x)) return true;\n\
    \    else if (($x==$y+$z) || ($y==$z) || ($z==$x)) return true;\n    else if (($x==$y+$z)\
    \ || ($y==$z) || ($z==$x)) return true;\n    else if (($x==$y+$z) || ($y==$z)\
    \ || ($z==$x)) return true;\n    else if (($x==$y+$z) || ($y==$z) || ($z==$x))\
    \ return true;\n    else if (($x==$y+$z) || ($y==$z) || ($z==$x)) return true;\n\
    \    else if (($x==$y+$z) || ($y==$z) || ($z==$x)) return true;\n    else if (($x==$y+$z)\
    \ || ($y==$z) || ($z==$x)) return true;\n    else if (($x==$y+$z) || ($y==$z)\
    \ || ($z==$x)) return true;\n    else if (($x==$y+$z) || ($y==$z) || ($z==$x))\
    \ return true;\n    else if (($x==$y+$z) || ($y==$z) || ($z==$x", "  return is_int($x)\
    \ || is_int($y) || is_int($z) || $x == $y || $x == $z || $y == $z;\n}", "    return\
    \ (\n        ($x==$y+$z) &&\n        ctype_digit($x) && ctype_digit($y) && ctype_digit($z)\
    \ &&\n        (($x>0&&$y>0&&$z>0) || ($x>0&&$z>0) || ($y>0&&$z>0)) &&\n      \
    \  (($x%$y)==0&&($x%$z)==0&&($y%$z)==0)\n    );\n}", "    // Write your code here\n\
    \    $a = is_int($x);\n    $b = is_int($y);\n    $c = is_int($z);\n    $d = ($a\
    \ + $b <= $c);\n    return $d;\n}\n", "    if (is_int($x) && is_int($y) && is_int($z))\
    \ {\n        return $x === $y || $x === $z || $y === $z;\n    }\n\n    return\
    \ false;\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nThis works, but, unfortunately,\
    \ it does not handle edge cases like `any_int(3.6, -2.2, 2)`\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\nHere's a quick function to check if all the arguments in an array are equal\
    \ to the sum of their values:\n<code>", "\t// If any of the numbers is not a integer,\
    \ then return false.\n\t// We could just use $x === $y || $y === $z || $z ===\
    \ $x,\n\t// but it's much more readable if we use the above approach.\n\tif ($x\
    \ !== intval($x) || $y !== intval($y) || $z !== intval($z)) {\n\t\treturn false;\n\
    \t}\n\n\t// Return true if any of the numbers are equal to the sum of their two\
    \ neighbors.\n\t// This approach is faster and more concise than the approach\
    \ described in the book,\n\t// section 15.9.3.3, page 438.\n\t// The expression\
    \ ($x === ($y + $z) || ($y === $z) || ($z === $x)) is equivalent to\n\t// ($x\
    \ === $y) || $x === $z || $y === $z\n\treturn (($x === $y) || ($x === $z) || ($y\
    \ === $z));\n}\n", "    $all_integer = true;\n    for ($i = 2; $i <= 3; $i++)\
    \ {\n        if ($i == $x || $i == $y || $i == $z) {\n            $all_integer\
    \ = false;\n        }\n    }\n    return $all_integer;\n}", "  $x_int = (int)\
    \ $x;\n  $y_int = (int) $y;\n  $z_int = (int) $z;\n  if ($x_int == $y_int && $x_int\
    \ == $z_int) {\n    return true;\n  } else if ($x_int == $y_int || $x_int == $z_int)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "  $x = intval($x);\n\
    \  $y = intval($y);\n  $z = intval($z);\n  if ($x === $y || $x === $z || $y ===\
    \ $z) {\n    return true;\n  }\n  return false;\n}\n", "    if ($x == $y + $z)\
    \ return true;\n    if ($x == -$y - $z) return true;\n    return false;\n}\n</code>\n\
    <|/ a tags=php,if-statement dscore=0 |>\n<| c |>\nSorry, I should have been more\
    \ clear about that I meant any amount of integers, not necessarily the three being\
    \ equal.\n<|/ c |>\n<| a tags=php,if-statement dscore=0 |>\n<code>\n<?php\n$sum\
    \ = $x + $y;\n$sub = $x - $y;\n$mul = $x * $y;\n\nif ($sum == $sub && $sum ==\
    \ $mul) echo \"Sum of x and y is equal\";\nelseif ($sub == $mul) echo \"Subtraction\
    \ of x and y is equal\";\nelseif ($mul == $sum) echo \"Multiplication of x and\
    \ y is equal\";\nelse echo \"Not Equal\";", "  $ans = false;\n  if (is_int($x)\
    \ && is_int($y) && is_int($z)) {\n    if ($x == $y || $x == $z) {\n      $ans\
    \ = true;\n    }\n  }\n  return $ans;\n}\n", "    if ($x == $y + $z) {\n     \
    \   return true;\n    }\n    if ($x < $y || $y < $z || $z < $x) {\n        return\
    \ false;\n    }\n    if ($x < $y && $y < $z) {\n        return any_int($x, $y,\
    \ $z);\n    }\n    if ($y < $z && $z < $x) {\n        return any_int($x, $y, $z);\n\
    \    }\n    if ($z < $x && $z < $y) {\n        return any_int($x, $y, $z);\n \
    \   }\n}", "    if (is_int($x) && is_int($y) && is_int($z)) {\n        return\
    \ (is_int($x) == $x) + (is_int($y) == $y) + (is_int($z) == $z);\n    }\n    return\
    \ false;\n}\n", "  return (is_int($x) && is_int($y) && is_int($z)) ? $x + $y +\
    \ $z == $x + $y + $z : false;\n}", "  // Check to see if all are ints.\n  if (!is_int($x)\
    \ || !is_int($y) || !is_int($z)) {\n    return false;\n  }\n\n  // If they're\
    \ the same, return true\n  if ($x == $y && $y == $z) {\n    return true;\n  }\n\
    \n  // If one is negative, make them equal and reverse the order.\n  if ($x <\
    \ 0) {\n    $x = abs($x);\n    $y = abs($y);\n    $z = abs($z);\n  }\n\n  if ($y\
    \ < 0) {\n    $y = abs($y);\n    $z = abs($z);\n  }\n\n  // Check if the largest\
    \ number is positive, and the smallest is negative.\n  if (($x > 0 && $y > 0 &&\
    \ $z > 0) || ($x < 0 && $y < 0 && $z < 0)) {\n    return false;\n  }\n\n  // If\
    \ they're equal and the second one is positive, the second number is positive,\
    \ and the third is negative,\n  // or if the second number is negative, and the\
    \ third number is positive, and the fourth is negative,\n  // return false.\n\
    \  if (($x == $y && $y > 0 && $z < 0) || ($x == $z && $z < 0 && $y < 0)) {\n \
    \   return false;\n  }\n\n  // If they're equal and the first one is positive,\
    \ the first number is positive, and the second is negative,\n  // or if the second\
    \ number is negative, and the third number is positive, and the fourth is negative,\n\
    \  // return false.\n  if (($x < 0 && $x == $y && $z < 0) || ($x < 0 && $x ==\
    \ $z && $z < 0 && $y < 0)) {\n    return false;\n  }\n\n  // If they're equal\
    \ and the first one is negative, the first number is negative, and the second\
    \ is positive,\n  // or if the second number is positive, and the third number\
    \ is negative, and the fourth is positive,\n  // return false.\n  if (($x > 0\
    \ && $x == $y && $y < 0) || ($x > 0 && $x == $z && $y < 0 && $z > 0)) {\n    return\
    \ false;\n  }\n\n  // If they're equal and the second one is negative, the second\
    \ number is negative, and the third is positive,\n  // or if the third number\
    \ is positive, and the fourth is negative, return false.\n  if (($x < 0 && $x\
    \ == $y && $z < 0) || ($x < 0 && $x == $z && $z < 0 && $y > 0)) {\n    return\
    \ false;\n  }\n\n  return true;\n}\n</code>\n<|/ a tags=math,php |>\n<| c |>\n\
    Thanks for your post! This would work for positive numbers but would fail on `any_int(3.6,\
    \ -2.2, 2)` (which is true for `any_int(4, -2, 3)`) and it also fails on `any_int(-2,\
    \ -4, 5)` (which is true for `any_int(-2, -5, ", "  if ($x == $y + $z) { return\
    \ true; }\n  else { return false; }\n}\n</code>\nThe function any_int() is now\
    \ available everywhere in the code. For example:\n<code>\nif (any_int($x, $y,\
    \ $z)) {\n  // any of $x, $y, or $z must be 3\n}\n</code>\nHope this helps. Please\
    \ let me know if you have any questions about it. Good luck.\n<|/ a |>\n<| c |>\n\
    This is a bit advanced for me so I would love a little bit more of explanation\
    \ than just a code snippet. I'm a beginner at PHP. :)\n<|/ c |>\n<| c |>\n: I'm\
    \ really glad I could help out! :)\n<|/ c |>\n<| c |>\nWhat about `1==3` ? It\
    \ returns `false` but `3==3` is true.\n<|/ c |>\n<| a |>\nYou could also use an\
    \ array and in_array:\n<code>\n$arr = [$x, $y, $z];\nif (in_array(3, $arr)) {\
    \ \n    //Do something\n}\n</code>\n<|/ a dscore=3 tags=php |>\n<| c |>\nThis\
    \ is exactly what I did.\n<|/ c |>\n<| c |>\nI added an alternative solution using\
    \ an array.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nif($x == $y + $z) \n{\n  // Do\
    \ something\n}\n</code>\n<|/ a tags=php |>\n<| a tags=php |>\nYou can compare\
    \ values like this. \n<code>\nif($x==$y+$z)\n{\n  //do something\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php dscore=2 |>\nYou can use $x === $y === $z , \n\
    but you should know that $x === $y will work only if both values are integers\
    \ so it's better to use $x == $y && $x == $z \nFor example :\n<code>\nif($x==$y\
    \ && $x == $z) {\n //do something\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\n$x =\
    \ 1;\n$y = 2;\n$z = 3;\n\nif($x == $y + $z){\n  echo \"true\";\n}else{\n  echo\
    \ \"false\";\n}\n</code>\n<|/ a tags=php dscore=1 |>\n<| a tags=php dscore=0 |>\n\
    Use array_sum() with array_diff() like\n<code>\n$vals = ", "  // Initialize variables.\n\
    \  $vars = array('x', 'y', 'z');\n  $found = false;\n\n  // Loop through variables.\n\
    \  foreach ($vars as $var) {\n    // Make sure a variable has been passed.\n \
    \   if (empty($var)) {\n      return false;\n    }\n\n    // Make sure that variable\
    \ is a number.\n    if (!is_numeric($var)) {\n      return false;\n    }\n\n \
    \   // Get the current value of the variable.\n    $varValue = $$var;\n    //\
    \ Make sure the variable is at least as big as all variables.\n    if ($varValue\
    \ < $x || $varValue < $y || $varValue < $z) {\n      return false;\n    }\n\n\
    \    // Make sure that variable is integer (rounding down).\n    if (is_int($varValue))\
    \ {\n      $found = true;\n      break;\n    }\n  }\n\n  // Return if the variable\
    \ was found, and all of them were integers.\n  if ($found) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}", "    if ($x<0 || $y<0 || $z<0) {\n  \
    \      return false;\n    }\n    return ($x + $y + $z) == ($x + $y) + $z;\n}\n",
  "    $x_int = (int)$x;\n    $y_int = (int)$y;\n    $z_int = (int)$z;\n    if ($x_int\
    \ == $y_int + $z_int) {\n        return true;\n    }\n    return false;\n}", " \
    \   if ($x == $y || $x == $z) {\n        return true;\n    }\n\n    if (!is_int($x)\
    \ || !is_int($y) || !is_int($z)) {\n        return false;\n    }\n\n    return\
    \ ($x + $y + $z) == ($x + $z + $y);\n}\n", "  if ($x === $y || $y === $z || $x\
    \ === $z) {\n    return $x === $y;\n  }\n  return false;\n}", "    if (is_int($x)\
    \ && is_int($y) && is_int($z)) {\n        return $x != 0 || $y != 0 || $z != 0;\n\
    \    }\n    return false;\n}\n</code>\n<|/ a tags=python,javascript,jquery |>\n\
    <| c |>\nthank you so much. your answer was very helpful\n<|/ c |>\n<| a tags=python,javascript,jquery\
    \ |>\nI assume you meant to use an && instead of a || in the line that checks\
    \ for $x != 0 || $y != 0 || $z != 0, but if you did, that is your issue.\nThe\
    \ || will return a true if one of the values is true. Hence, \n<code>\n$x != 0\
    \ || $y != 0 || $z != 0\n</code>\nwill always evaluate to true, and so you will\
    \ always be calling return true; from your function.\n<|/ a dscore=1 |>\n<| c\
    \ |>\nyes, I do mean to use an `&&` instead of an `||`. I tried to fix it but\
    \ I can't figure it out\n<|/ c |>\n<| a tags=python,javascript,jquery |>\n<code>",
  "  $x_is_integer = is_integer($x);\n  $y_is_integer = is_integer($y);\n  $z_is_integer\
    \ = is_integer($z);\n\n  // Return false if any of them is not a numeric type.\n\
    \  // Otherwise, return true if any of them is an integer.\n  return !($x_is_integer\
    \ || $y_is_integer || $z_is_integer);\n}", "    $x = intval($x);\n    $y = intval($y);\n\
    \    $z = intval($z);\n    if ($x == $y) {\n        if ($x == $z) {\n        \
    \    return true;\n        } else {\n            return false;\n        }\n  \
    \  } else {\n        return false;\n    }\n}\n", "    $int_x = intval($x);\n \
    \   $int_y = intval($y);\n    $int_z = intval($z);\n    $sum = $int_x + $int_y;\n\
    \    return ($sum == $int_z && $sum == $int_y) ? true : false;\n}\n", "  return\
    \ (is_int($x) && is_int($y) && is_int($z)) ? in_array($x + $y + $z, array(0, $x,\
    \ $x + $y, $x + $y + $z, $y, $y + $z, $z, $x + $z, $x + $y + $z, $x + $y + $z,\
    \ $x + $z + $y, $x + $z + $y, $x + $y + $z + $y, $y + $z + $z, $z + $x + $y, $z\
    \ + $x + $y + $z, $z + $x + $y + $z, $z + $y + $z + $x, $z + $y + $z + $x + $y,\
    \ $z + $y + $z + $x + $y + $z, $z + $y + $z + $x + $y + $z + $x, $z + $y + $z\
    \ + $x + $y + $z + $x + $y) : false;\n}\n", "    return ($x + $y + $z) == $x +\
    \ $y + $z;\n}\n", "  // Initialize sum and sum2\n  $sum = $x + $y;\n  $sum2 =\
    \ $sum * $sum;\n\n  // Initialize product\n  $product = $x * $y;\n\n  // Check\
    \ if the two sums are equal\n  if ($sum2 == $product) {\n    return true;\n  }\n\
    \n  return false;\n}\n</code>\nThe same can be done with arrays but that would\
    \ just make the code more complicated. The above example is the simplest way to\
    \ check if two numbers are equal, though there are (at least) some faster ways\
    \ if you know exactly how many numbers you will be checking.\n<|/ a dscore=0 tags=php,validation\
    \ |>\n<| a tags=php,validation |>\n<code>\n<?php\n$number = array(\"1\", \"4\"\
    , \"5\");\n$sum = array_sum($number);\n", "  if (!is_int($x) || !is_int($y) ||\
    \ !is_int($z)) {\n    return false;\n  }\n  return $x + $y + $z == $x || $x +\
    \ $y + $z == $y || $x + $y + $z == $z;\n}\n$var2 = $var1;\n$var1 = $var3;", " \
    \   if ($x + $y == $z) {\n        $x = intval($x);\n        $y = intval($y);\n\
    \        $z = intval($z);\n        if ($x + $y == $z) {\n            $x = intval($x);\n\
    \            $y = intval($y);\n            $z = intval($z);\n            return\
    \ (($x + $y) == $z);\n        }\n    }\n    return false;\n}\n", "  $x_int = is_int($x);\n\
    \  $y_int = is_int($y);\n  $z_int = is_int($z);\n  if ($x_int && $y_int && $z_int)\
    \ {\n    return $x_int && $y_int && $z_int;\n  } else {\n    $x_is_str = is_string($x);\n\
    \    $y_is_str = is_string($y);\n    $z_is_str = is_string($z);\n    if ($x_is_str\
    \ || $y_is_str || $z_is_str) {\n      return !($x_is_str || $y_is_str || $z_is_str);\n\
    \    }\n  }\n}", "    $fx_num = floatval($x);\n    $fy_num = floatval($y);\n \
    \   $fz_num = floatval($z);\n\n    if (($fx_num === $fz_num) || ($fy_num === $fz_num))\
    \ {\n        return true;\n    }\n    if (($fx_num === $fy_num) && ($fy_num ===\
    \ $fz_num)) {\n        return true;\n    }\n    if (($fx_num === $fy_num) || ($fy_num\
    \ === $fz_num)) {\n        return true;\n    }\n    if (($fx_num === $fz_num)\
    \ && ($fx_num === $fy_num)) {\n        return true;\n    }\n    if ($fx_num ===\
    \ $fy_num) {\n        return true;\n    }\n    return false;\n}\n", "    // Check\
    \ if all numbers are integers.\n    if (is_int($x) and is_int($y) and is_int($z))\
    \ {\n        // Get sum of the numbers.\n        $sum = is_int($x) ? $x + $y :\
    \ 0 + $y + $z;\n\n        // Check if the sum is equal to the other numbers.\n\
    \        $bool = ($sum == $x) or ($sum == $y) or ($sum == $z);\n        return\
    \ $bool;\n    }\n    return false;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for\
    \ your answer. It works perfectly and easy to understand.\n<|/ c |>\n<| a dscore=1\
    \ |>\nHere's a simple solution based on your code.\n<code>\n<?php", "\treturn\
    \ is_int($x) && is_int($y) && is_int($z) && $x == $y || $x == $z || $y == $z;\n\
    }\n\n/**\n * Returns true if any of the numbers in an array is equal to the sum\
    \ of the other numbers in the array, and all numbers in the array are integers.\n\
    \ * Returns false in any other case\n * Usage\n * >>> any_int_arr([1, 2], 4, 5)\n\
    \ * True\n * >>> any_int_arr([1, 2, 3], 4, 5)\n * False\n * >>> any_int_arr([1,\
    \ 2, 3], 4, 3.5)\n * True\n * >>> any_int_arr([1, 4, 3], 4, 3.5)\n * False\n *\
    \ >>> any_int_arr([1, 4, 3], 4, 5)\n * False\n * >>> any_int_arr([1, 4, 3, 1],\
    \ 4, 3.5)\n * True\n * >>> any_int_arr([1, 4, 3, 1], 4, 5)\n * True\n * >>> any_int_arr([1,\
    \ 4, 3, 1], 4, 3.5)\n * True\n * >>> any_int_arr([1, 2, 3], 4, 3.5)\n * False\n\
    \ *\n * @param array  $numbers\n * @param mixed  $sum\n * @param string $message\n\
    \ * @return bool\n */", "    $total = $x + $y + $z;\n    return ($total == intval($total))\
    \ || $total > 0;\n}\n</code>\n<|/ a |>\n<| c |>\nI think you meant to use `!==`\
    \ instead of `!=` on line 8 of your function.\n<|/ c |>\n<| c |>\nThe question\
    \ said `Returns true if any of the numbers is equal to the sum of the other two,\
    \ and all numbers are integers.`\n<|/ c |>\n<| a dscore=1 tags=php |>\nThis function\
    \ is working fine, I have just added the two conditions.\n<code>", "  if ($x +\
    \ $y == $z && is_int($x) && is_int($y) && is_int($z)) {\n    return true;\n  }\
    \ else {\n    return false;\n  }\n}", "    $xs = explode('.', $x);\n    $ys =\
    \ explode('.', $y);\n    $zs = explode('.', $z);\n\n    // Check to see if the\
    \ first value is equal to any of the others.\n    foreach($xs as $i => $xi) {\n\
    \        if(!is_int($xi)) {\n            return false;\n        }\n    }\n   \
    \ foreach($ys as $i => $yi) {\n        if(!is_int($yi)) {\n            return\
    \ false;\n        }\n    }\n    foreach($zs as $i => $zi) {\n        if(!is_int($zi))\
    \ {\n            return false;\n        }\n    }\n\n    // All values are integers.\
    \ Now check to see if they're equal.\n    $xint = intval($x);\n    $yint = intval($y);\n\
    \    $zint = intval($z);\n    if((($xint + $yint) == $zint) || (($yint + $zint)\
    \ == $xint)) {\n        return true;\n    }\n    return false;\n}", "    // Write\
    \ your code here\n    \n    $r = $x + $y;\n    $s = $x + $z;\n    if($r ==  $s\
    \ || ($r > $s && $x < $z)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nWe can write one single\
    \ function for that by checking the value of one variable if its greater then\
    \ add that value to the other variable and again compare both variable if greater\
    \ then return true and if equal return false\n<|/ a tags=php,logic,if-statement,function\
    \ |>\n<| a tags=php,logic,if-statement,function |>\n<code>\n<?php\n", "    return\
    \ ($x == $y + $z) || ($x == $y - $z) || ($x == $y + $z - $x);\n}", "    $sum =\
    \ $x + $y;\n    if ($sum === $z) {\n        return true;\n    }\n    return false;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for the solution, i did some changes\
    \ in your code and it worked for me\n<|/ c |>\n<| c |>\nSorry, I forgot to paste\
    \ the code. I edited my original answer. My solution was based off of your code\n\
    <|/ c |>\n<| a |>\nI used a modified version of Chris' answer, and changed it\
    \ to use PHP's range function.\n<code>", "    $sum = $x + $y;\n    return ($sum\
    \ == $z) && ($sum % 1 == 0);\n}", "    // TODO: Make sure all numbers are integers\n\
    \    if ($x == $y + $z) {\n        return true;\n    } elseif ($x != $y || $x\
    \ != $z || $y != $z) {\n        return false;\n    } else {\n        return false;\n\
    \    }\n}", "    if ($x !== $y + $z) return false;\n    if (is_int($x) && is_int($y)\
    \ && is_int($z)) return true;\n    return false;\n}\n", "    if (!is_numeric($x)\
    \ || !is_numeric($y) || !is_numeric($z)) {\n        return false;\n    }\n   \
    \ return ($x + $y + $z == $x + $y + $z);\n}\n", "    if ($x == $y) return true;\n\
    \    if ($x == $z) return true;\n    if ($y == $z) return true;\n\n    return\
    \ false;\n}\n", "    foreach(array($x, $y, $z) as $num) {\n        if ($num ===\
    \ false || $num === 0 || $num < 0 || $num % 1 > 0) {\n            return false;\n\
    \        }\n    }\n    return $x + ($y == $z ? $x : $y) - ($y == $x ? $z : $x)\
    \ == 0;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis is amazing, but i think\
    \ i will stick to my solution.\n<|/ c |>\n<| c |>\nNice solution, but I wonder\
    \ why this is faster than `array_sum`? Because `array_sum` needs to iterate over\
    \ the entire array for each sum calculation. And, `array_sum` can only add up\
    \ numbers that are the same type. Which means all numbers in the array have to\
    \ be numbers, not integers, which is what the OP wanted.\n<|/ c |>\n<| c |>\n\
    It's not faster, but it is easier to understand.\n<|/ c |>\n<| c |>\nI like the\
    \ idea of using `array_sum()` instead of doing all the calculation myself. But\
    \ I think I like the `is_int($num)` thing better than `$num > 0` - it feels more\
    \ natural in code. By the way, I believe PHP has had [is_int()](http://php.net/manual/en/function.is-int.php)\
    \ since version 5.1, so you should probably change that.\n<|/ c |>\n<| c |>\n\
    It should be noted that this is quite slower than simply summing all the numbers\
    \ and then comparing the sum to zero. This makes sense because array_sum has to\
    \ loop over every number in every possible order until it finds a match and sums\
    \ them.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "    if ($x!=='' && $y!=='' && $z!=='')\
    \ {\n        $z = $x-$y;\n        $x = $y-$z;\n        if ($x!=='' && $y!==''\
    \ && $z!=='') {\n            $y = $x-$z;\n            $x = $y-$z;\n          \
    \  if ($x!=='' && $y!=='' && $z!=='') {\n                return ($x-$y)*($x-$y)\
    \ == ($x-$z)*($x-$z);\n            }\n            else {\n                return\
    \ false;\n            }\n        }\n        else {\n            return false;\n\
    \        }\n    }\n    return false;\n}\n", "  if ($x == $y + $z) {\n    return\
    \ true;\n  }\n  return false;\n}", "    if ($x == $y || $x == $z) {\n        return\
    \ true;\n    }\n    if ($y == $z) {\n        return true;\n    }\n    if ($x <\
    \ $y && $x < $z) {\n        return true;\n    }\n    if ($y < $z) {\n        return\
    \ true;\n    }\n    return false;\n}", "    list($x, $y, $z) = array_map('intval',\
    \ array($x, $y, $z));\n    if ($x == $y + $z) {\n        return true;\n    }\n\
    \    return false;\n}\n", "    if ($x === $y + $z && $x === (int)$x && $y ===\
    \ (int)$y && $z === (int)$z) {\n        return true;\n    }\n    return false;\n\
    }", "  // Write your answer inside the following function.\n  return ( $x==$y+$z\
    \ );\n}", "    if (is_int($x)) {\n        if (is_int($y)) {\n            return\
    \ is_int($z) && ($x + $y + $z == $y);\n        }\n        return is_int($z) &&\
    \ ($x + $y + $z == $y);\n    }\n    return false;\n}\n", "  if ($x == $y + $z)\
    \ {\n    return true;\n  }\n  if ($x == $y - $z) {\n    return true;\n  }\n  if\
    \ ($x == $y - $z) {\n    return true;\n  }\n  return false;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\nAnother way for doing it\n<code>\n<?php", "\t\
    if ($x != $y) return false;\n\tif ($x == $z) return true;\n\tif (!is_int($x) ||\
    \ !is_int($y) || !is_int($z)) return false;\n\treturn $x + ($y == $z);\n}\n",
  "  if ($x === $y + $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n  \
    \    return true;\n    }\n  }\n  return false;\n}", "  // Make sure everything\
    \ is an integer.\n  // If it isn't, don't bother trying anything.\n  if (is_numeric($x)\
    \ && is_numeric($y) && is_numeric($z)) {\n    // Make sure the numbers are equal\
    \ in length.\n    if (strlen($x) != strlen($y) || strlen($x) != strlen($z)) {\n\
    \      return false;\n    }\n    // Make sure they are all integers.\n    if (!is_int($x)\
    \ || !is_int($y) || !is_int($z)) {\n      return false;\n    }\n    // Make sure\
    \ the sum is equal to the first two numbers.\n    // It will be a boolean, because\
    \ the sum is greater than 0, or not.\n    return $x + $y == $z;\n  }\n  return\
    \ false;\n}", "    $int1 = is_int($x) && is_int($y);\n    $int2 = is_int($x) &&\
    \ is_int($z);\n    $int3 = is_int($y) && is_int($z);\n    return ($int1 && $int2\
    \ && $int3);\n}", "    if ($x == $y + $z) {\n        return true;\n    }\n   \
    \ if ($x == $y - $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n\
    \        return true;\n    }\n    if ($x == $y / $z) {\n        return true;\n\
    \    }\n    if ($x == $y % $z) {\n        return true;\n    }\n    if ($y == $z)\
    \ {\n        return true;\n    }\n    if ($y == $z) {\n        return true;\n\
    \    }\n    if ($y == $z) {\n        return true;\n    }\n    return false;\n}",
  "    list($a, $b) = func_get_args();\n    return ($a + $b == $x || $x + $b == $y\
    \ || $x + $y == $z || $y + $z == $x);\n}\n</code>\n<|/ a tags=php dscore=0 |>\n\
    <| a |>\nThis solution uses the array_filter function:\n<code>", "    // Only\
    \ run this if all arguments are integers.\n    if ($x % 1 !== 0 || $y % 1 !==\
    \ 0 || $z % 1 !== 0) {\n        return false;\n    }\n    // Check if the sum\
    \ of the numbers is equal to the sum of the other two.\n    return $x + $y ===\
    \ $z;\n}", "    $a = $x + $y;\n    $b = $x + $z;\n    $c = $y + $z;\n    if ($a\
    \ == $b && $a == $c)\n        return true;\n    else\n        return false;\n}",
  "    if (is_numeric($x) && is_numeric($y) && is_numeric($z)) {\n        if ($x +\
    \ $y == $z) {\n            return true;\n        } else {\n            return\
    \ false;\n        }\n    } else {\n        return false;\n    }\n}\n", "    \n\
    \    // Declare a variable to hold the sum of the 3 numbers.\n    $sum = $x +\
    \ $y + $z;\n    \n    // Return true if sum of the numbers is equal to the sum\
    \ of the other two.\n    if ($sum === $x + $y) return true;\n    \n    // Return\
    \ false if sum of the numbers is different than the sum of the other two.\n  \
    \  if ($sum === $x + $y + $z) return false;\n    \n    // Return true if all numbers\
    \ are not integers.\n    if ($x < 0 | $y < 0 | $z < 0) {\n        return false;\n\
    \    }\n    \n    // Return false if any number is a float or is an integer.\n\
    \    if ($x !== (int)$x | $y !== (int)$y | $z !== (int)$z) return false;\n   \
    \ \n    // Return true if any number is a float.\n    if ($x !== (float)$x | $y\
    \ !== (float)$y | $z !== (float)$z) return true;\n    \n    // Return true if\
    \ all numbers are integers.\n    if ($x === (int)$x | $y === (int)$y | $z ===\
    \ (int)$z) return true;\n    \n    // Return false if none of the numbers are\
    \ integers.\n    return false;\n}\n</code>\n<|/ a tags=php dscore=0 |>\n<| a |>\n\
    <code>", "    $min = min(abs($x), abs($y), abs($z));\n    $max = max(abs($x),\
    \ abs($y), abs($z));\n    if ($min > $max) return false;\n    if ($min == $max)\
    \ {\n        return $min == 0;\n    }\n    $n = $min > 0 ? $min : -$min;\n   \
    \ return $x == $n || $y == $n || $z == $n;\n}\n</code>\n<|/ a |>\n<| c |>\n`any_int`\
    \ would be a good name for such a function...\n<|/ c |>\n<| c |>\nIt would be\
    \ great if this function could take negative numbers as well\n<|/ c |>\n<| a |>\n\
    Here is a very simple solution to this problem. Just do this\n<code>", "  $sum\
    \ = ($x + $y + $z);\n  if ($sum == 0) {\n    return ($x == $y);\n  } else if ($sum\
    \ < 0) {\n    return ($x < $y);\n  } else {\n    return ($x > $y);\n  }\n}\n",
  "    // Return false if $z is not an int\n    if (!is_int($z)) {\n        return\
    \ false;\n    }\n\n    // Add all three numbers and check them individually if\
    \ they are equal or false\n    return ($x == $y || $x == $z || $y == $z);\n}\n\
    </code>\n<|/ a tags=php |>\n<| c |>\nHi, what if my input is like these:\n`$input1\
    \ = '-5 +3';\n$input2 = '-3 -3';\n$input3 = '+3 +4';`\n<|/ c |>\n<| c |>\nThen\
    \ you might want to look into the `eval()` function, but be careful of security\
    \ risks. You might want to rethink your design and how you are dealing with your\
    \ inputs. You might want to look into using Symfony form components, such as [Symfony\
    \ Form Events](http://symfony.com/doc/current/components/form/form_events.html).\
    \ You might also want to look at [Symfony form validation](http://symfony.com/doc/current/validation.html)\n\
    <|/ c |>\n<| c |>\nI have update my answer with some suggestions for using Symfony\
    \ form validation.\n<|/ c |>\n<| c |>\nWhat if I got `+3 -3` and `-3 -3` as input?\n\
    <|/ c |>\n<| c |>\n`+3 -3` and `-3 -3` should be false as they have no solution\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n<?php\n\n/**\n * Checks if 3 numbers are equal\n\
    \ *\n * integer $num1 First number\n * integer $num2 Second number\n * integer\
    \ $num3 Third number\n * boolean\n */", "    $min = $min ? $min : $x;\n    $max\
    \ = $max ? $max : $y;\n    $sum = $x + $y + $z;\n    // $sum === intval($sum)\n\
    \    return $sum === intval($sum);\n}\n</code>\n<|/ a |>\n<| c |>\nThe `intval`\
    \ function won't work because it doesn't convert floats and will just convert\
    \ integers without a warning. `intval(3.6)` will give `3` but `intval(3.0)` will\
    \ give `3`.\n<|/ c |>\n<| c |>\nYeah this doesn't work either. `intval(3.0)` will\
    \ still give `3` when it should give `3`.\n<|/ c |>\n<| c |>\nThat's what I meant\
    \ when I said it doesn't work :) I'm talking about converting a number to a string\
    \ first.\n<|/ c |>\n<| c |>\nThat still doesn't work because you are still trying\
    \ to compare floats as integers. See my answer for a version that works.\n<|/\
    \ c |>\n<| c |>\nThis is great.  I modified it slightly to allow for negative\
    \ numbers by using $sum - $x <= $x || $y <= $y || $z <= $z.\n<|/ c |>\n<| a |>\n\
    The answer posted here is very elegant, but it doesn't work when comparing a single\
    \ float with a variable containing a float.\n<code>", "  return ($x == $y + $z)\
    \ && is_integer($x) && is_integer($y) && is_integer($z);\n}\n</code>\nThen you\
    \ can use this in the query as:\n<code>\n$query = $db->prepare(\"SELECT id, name,\
    \ (SELECT COUNT(id) FROM `user` WHERE `type` = 'admin') AS admin, \n  (SELECT\
    \ COUNT(id) FROM `user` WHERE `type` = 'moderator') AS moderator, \n  (SELECT\
    \ COUNT(id) FROM `user` WHERE `type` = 'guest') AS guest\n  FROM `user`\n  WHERE\
    \ `type` IN ('admin', 'moderator', 'guest') AND `id` NOT IN (SELECT `id` FROM\
    \ `user` WHERE `type` IN ('guest'))\n  GROUP BY `id`\");\n$query->execute();\n\
    $results = $query->fetchAll();\nforeach($results as $result){\n  if(any_int($result['admin'],\
    \ $result['moderator'], $result['guest'])){\n    echo \"The user with id $result['id']\
    \ exists as an admin, moderator or guest\";\n  } else {\n    echo \"The user with\
    \ id $result['id'] does not exist\";\n  }\n}\n</code>\nHowever, if you want to\
    \ get that result using a single query then you need to use sub queries (SELECT\
    \ .... IN (...)) but you will still need multiple queries to get that result.\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks Strawberry. Your idea is interesting and I\
    \ may use this at some point. However, my database has over 5000 records and I\
    \ don't want to query them one by one. I think I will go with 's suggestion.\n\
    <|/ c |>\n<| c |>\nI guess I didn't understand your question then. Why do you\
    \ need to query them one by one?\n<|/ c |>\n<| c |>\nThanks Strawberry, I forgot\
    \ to mention that my `type` field is a `varchar` field and it has values like\
    \ `admin`, `moderator`, `guest`. So when I query them one by one, I may get false\
    \ positives. So I thought that it would be better if I could get all id's that\
    \ exist in admin AND moderator AND guest. Then I could simply use `in_array` to\
    \ check for whether there are any id's that exist in any of those three categories.\n\
    <|/ c |>\n<| c |>\nI updated my question to show my actual query with your suggestion.\n\
    <|/ c |>\n<| a dscore=0 |>\n", "    return ((int)$x == $x) + ((int)$y == $y) +\
    \ ((int)$z == $z);\n}", "    // Your code here\n    return true;\n}\n</code>\n\
    <|/ a tags=php,function |>\n<| a tags=php,function dscore=0 |>\n<code>\n$x = 'hello';\n\
    $y = 'hello';\n$z = 'hello';\n", "  $min = ($x >= $y) ? $x : $y;\n  $max = ($x\
    \ <= $y) ? $x : $y;\n  return ($min == $z) && ($max == $z);\n}", "    return ($x\
    \ + $y) == $z && is_int($x) && is_int($y) && is_int($z);\n}\n</code>\n<|/ a dscore=0\
    \ tags=php |>\n<| c |>\nThe function is only meant to be a quick check to see\
    \ if there is any collision between the numbers. What I'm trying to do is have\
    \ a database of \"rooms\" with numbers 1-100 in them and then have PHP check every\
    \ room number against the other numbers in the room in order to see if there is\
    \ any overlap. I then want to be able to choose a random room and move it out\
    \ of the way. I don't want to have 100 different rooms and then have to run a\
    \ query to check for collision every time I want to move a room.\n<|/ c |>\n<|\
    \ c |>\nWell, if you have 100 rooms, you might as well have 100 numbers in them.\
    \ If your rooms are \"rooms\" then you should be able to just store the numbers\
    \ in your database and retrieve them whenever you need them.\n<|/ c |>\n<| c |>\n\
    The issue with this is that it's too slow to do it that way. I've tried this with\
    \ 10,000 rooms and the script has been running for over an hour now.\n<|/ c |>\n\
    <| c |>\nThis answer does use numbers in a room as an example. That's not a good\
    \ idea. My suggestion would be to store all the rooms in a database and then you\
    \ can run any operation you want, including \"check if there exists an existing\
    \ room\".\n<|/ c |>\n<| c |>\nI added some code to the original question to show\
    \ how I'm currently doing this. My script is running on PHP 5.5 but as far as\
    \ I know it's not going to be running on PHP 7 yet. The script is just running\
    \ too long.\n<|/ c |>\n<| a tags=php dscore=0 |>\nThis should do the trick. The\
    \ function returns an array of all the rooms with no overlap with the passed in\
    \ rooms. The function also takes the max number allowed for the rooms as an argument.\n\
    <code>\n<?php\n$maxNumber = 100;\n\n$rooms = array_combine(range(1, $maxNumber),\
    \ range(1, $maxNumber));\n$rooms[50] = 1;\n\n$rooms1 = $rooms;\n$rooms2 = $rooms;\n\
    $rooms3 = $rooms;\n\n$rooms = array_merge(array_merge($rooms1, $rooms2), $rooms3);\n\
    \n$overlap = array();\n", "  $f = max($x, $y);\n  $g = min($x, $y);\n  $f = min($f,\
    \ $g);\n  $f = max($f, $z);\n  return $x === $f || $y === $f || $z === $f;\n}",
  "    if ($x === $y || $x === $z) {\n        return true;\n    }\n    return false;\n\
    }\n", "\tif ( (is_int($x) && is_int($y) && is_int($z)) || (is_double($x) && is_double($y)\
    \ && is_double($z)) ) {\n\t\tif (is_int($x)) {\n\t\t\tif (is_int($y)) {\n\t\t\t\
    \tif (is_int($z)) {\n\t\t\t\t\treturn ((($x + $y) + $z) == $x);\n\t\t\t\t} else\
    \ {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t} else {\n\t\t\tif (is_int($z)) {\n\t\t\t\treturn ((($x + $y) + $z)\
    \ == $x);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n", "    if ($x === $y + $z) {\n        if (is_int($x)\
    \ && is_int($y) && is_int($z)) {\n            return true;\n        } else {\n\
    \            return false;\n        }\n    }\n    return false;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=2 tags=php,function |>\nThis one is for 3 numbers:\n<code>\n\
    <?php", "  return ($x + $y + $z == 6);\n}", "  if ($x == $y + $z) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}", "    return $x == $y + $z;\n}",
  "  return $x == $y + $z;\n}\n", "  $x = intval($x);\n  $y = intval($y);\n  $z =\
    \ intval($z);\n  if ($x == $y || $x == $z || $y == $z) {\n    return true;\n \
    \ }\n  return false;\n}", "    return $x == $y + $z;\n}", "\treturn ($x + $y +\
    \ $z === 0);\n}\n", "    if ($x==$y) {\n        return $x==$z;\n    }\n    if\
    \ ($y==$z) {\n        return $x==$y;\n    }\n    return !isset($x) || !isset($y)\
    \ || !isset($z) || $x!=(int)$x || $y!=(int)$y || $z!=(int)$z;\n}\n", "  $a = $x\
    \ + $y;\n  $b = $y + $z;\n  $c = $x + $z;\n  $d = $y + $x;\n\n  if ($a == $b ||\
    \ $a == $c || $a == $d || $b == $c || $b == $d || $c == $d) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}", "  if ($x == $y || $x == $z) {\n    return\
    \ true;\n  }\n  if ($y == $z) {\n    return true;\n  }\n  return false;\n}\n",
  "    // If the sum is equal to the sum of the other two numbers, return true.\n\
    \    if ($x == $y || $x == $z) {\n        return true;\n    }\n    // Otherwise,\
    \ return false.\n    return false;\n}\n", "    $total = $x + $y;\n    return ($total\
    \ == $z && is_int($x) && is_int($y) && is_int($z));\n}\n", "\tif ($x == $y ||\
    \ $y == $z || $x == $z) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\n", "    return (is_numeric($x) && is_numeric($y) && is_numeric($z)) || (is_numeric($x)\
    \ && is_numeric($z) && is_numeric($y)) || (is_numeric($y) && is_numeric($z) &&\
    \ is_numeric($x)) || (is_numeric($z) && is_numeric($y) && is_numeric($x)) || (is_numeric($x)\
    \ && is_numeric($y) && is_numeric($z)) || (is_numeric($y) && is_numeric($z) &&\
    \ is_numeric($x)) || (is_numeric($z) && is_numeric($y) && is_numeric($x));\n}\n",
  "    if ($x == $y) {\n        if ($x == $z) {\n            return true;\n      \
    \  }\n    }\n    return false;\n}\n</code>\n<|/ a tags=php dscore=0 |>\n<| c |>\n\
    How does this answer the question?\n<|/ c |>\n<| a tags=php |>\n<code>", "   \
    \ if ($x == $y && $y == $z) {\n        return true;\n    }\n\n    return false;\n\
    }\n", "  if (is_int($x) && is_int($y) && is_int($z)) {\n    return $x === $y +\
    \ $z;\n  } else {\n    return false;\n  }\n}", "    $x = (int)$x;\n    $y = (int)$y;\n\
    \    $z = (int)$z;\n    if ($x === $y || $x === $z || $y === $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n", "    if ((int)$x == (int)$y + (int)$z)\
    \ return true;\n    else if ((int)$x == (int)$z + (int)$y) return true;\n    else\
    \ if ((int)$x == (int)$y + (int)$z && (int)$z == (int)$y) return true;\n    else\
    \ if ((int)$x == (int)$z + (int)$y && (int)$y == (int)$z) return true;\n    else\
    \ return false;\n}\n</code>\n<|/ a |>\n<| c |>\nI wrote a function that takes\
    \ 3 arguments. You just need to put it in a function and call it from your main\
    \ code.\n<|/ c |>\n<| a dscore=0 tags=javascript,math,php |>\n<code>", "    $a\
    \ = (int)$x;\n    $b = (int)$y;\n    $c = (int)$z;\n    if ($a === $b || $a ===\
    \ $c || $b === $c) {\n        return true;\n    }\n    return false;\n}\n", "\t\
    if ($x == $y + $z) {\n\t\treturn true;\n\t}\n\tif ($x != $y && $z != $y) {\n\t\
    \treturn false;\n\t}\n\tif ($x == $y || $y == $z) {\n\t\treturn false;\n\t}\n}",
  "    if ( is_int($x) && is_int($y) && is_int($z) ) {\n        if ( $x + $y == $z\
    \ ) return true;\n        if ( $x - $y == $z ) return true;\n        if ( $x *\
    \ $y == $z ) return true;\n        if ( $x / $y == $z ) return true;\n       \
    \ if ( $x / $z == $y ) return true;\n        if ( $x * $z == $y ) return true;\n\
    \        if ( $x / $z == $x ) return true;\n    }\n    return false;\n}", "  //\
    \ We have 3 integers, so we check them all.\n  // No need to check if any are\
    \ NaN.\n  return ($x === $y || $x === $z || $y === $z || is_int($x) && is_int($y)\
    \ && is_int($z));\n}\n", "    $total = min($x, $y, $z);\n    if ($total > 0 &&\
    \ $total <= $x && $total <= $y && $total <= $z) {\n        $total = (int)$total;\n\
    \        $total = $x + $y + $z + $total;\n        if ($total == $x || $total ==\
    \ $y || $total == $z) {\n            return true;\n        } else {\n        \
    \    return false;\n        }\n    } else {\n        return false;\n    }\n}\n",
  "    if ($x == $y || $x == $z || $y == $z) return true;\n    return false;\n}",
  "    // Test if the sum of the two numbers is equal to the given number.\n    if\
    \ ($x + $y == $z) {\n        return true;\n    }\n    // Test if the sum is equal\
    \ to the first number, and if true test if the sum is equal to the second number.\n\
    \    // If true, return true.\n    if ($x == $z) {\n        if ($y == $z) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\n", "  if ($x\
    \ == $y || $x == $z || $y == $z) {\n    return ($x == $y);\n  }\n  else {\n  \
    \  return false; // Not a number\n  }\n}", "  if ($x == $y || $x == $z || $y ==\
    \ $z) {\n    return true;\n  }\n\n  return false;\n}", "\tif ($x == $y || $x ==\
    \ $z || $y == $z) return true;\n\tif ($x > $y && $x > $z) return true;\n\tif ($y\
    \ > $x && $y > $z) return true;\n\tif ($z > $x && $z > $y) return true;\n\treturn\
    \ false;\n}\n", "  // Remember, this function is only called to test the sum of\
    \ the other two.\n  // But this may still be useful to check whether any of the\
    \ numbers are a fraction of two numbers.\n  // It will check whether the sum of\
    \ two numbers is an integer.\n  global $sum;\n\n  // Don't do anything if all\
    \ of the numbers are the same\n  // Return false if all numbers are the same.\n\
    \  // Return true if any number is not an integer.\n  // Return false if any number\
    \ is an integer but does not equal the sum of other two.\n  if ($x == $y || $x\
    \ == $z) {\n    return false;\n  }\n\n  // Return true if any number is an integer.\n\
    \  // Return false if all numbers are not integers.\n  // Return false if any\
    \ number is a fraction of two numbers.\n  return !(\n    is_int($x) || is_int($y)\
    \ || is_int($z) ||\n    (is_float($x) && round($x) == round($y)) ||\n    (is_float($x)\
    \ && round($x) == round($z)) ||\n    (is_float($y) && round($y) == round($z))\
    \ ||\n    (is_float($z) && round($z) == round($x)) ||\n    (is_int($x) && round($x)\
    \ == round($y) && is_int($y) && is_int($z)) ||\n    (is_int($x) && round($x) ==\
    \ round($z) && is_int($y) && is_int($z)) ||\n    (is_int($y) && round($y) == round($z)\
    \ && is_int($x) && is_int($z)) ||\n    (is_int($z) && round($z) == round($x) &&\
    \ is_int($y) && is_int($z)) ||\n    (is_float($x) && round($x) == round($y) &&\
    \ is_float($y) && is_int($z)) ||\n    (is_float($x) && round($x) == round($z)\
    \ && is_float($y) && is_int($z)) ||\n    (is_float($y) && round($y) == round($z)\
    \ && is_float($x) && is_int($z)) ||\n    (is_float($z) && round($z) == round($x)\
    \ && is_float($y) && is_int($z)) ||\n    (is_float($x) && round($x) == round($y)\
    \ && is_float($y) && is_float($z)) ||\n    (is_float($x) && round($x) == round($z)\
    \ && is_float($y) && is_float($z)) ||\n    (is_float($y) && round($y) == round($z)\
    \ && is_float($x) && is_float($z))", "    return ($x == $y + $z && is_int($x)\
    \ && is_int($y) && is_int($z));\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,if-statement,variables\
    \ dscore=1 |>\nOne more way to do it is:\n<code>\n<?php\n", "    return ($x ==\
    \ $y || $x == $z && $y == $z) ? true : false;\n}\n", "    return $x === $y + $z;\n\
    }\n", "    if (!is_int($x) || !is_int($y) || !is_int($z)) {\n        return false;\n\
    \    }\n    return ($x + $y + $z) == $x + $y + $z;\n}\n", "    if ($x == $y ||\
    \ $x == $z) {\n        return true;\n    }\n    if ($y == $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n", "  return ($x == $y + $z) && (is_int($x)\
    \ && is_int($y) && is_int($z));\n}\n", "    return ($x == $y + $z && ($x % 1 ==\
    \ 0) && is_integer($x) && is_integer($y) && is_integer($z));\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis answer could be improved if you added some example code\
    \ of what the code in your answer should look like. Explaining why your answer\
    \ is better than other answers is a very important piece of information for people\
    \ trying to learn from you.\n<|/ c |>\n<| a tags=php,validation dscore=4 |>\n\
    <code>", "    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x +\
    \ $y == $z) return true;\n    }\n    return false;\n}\n</code>\n<|/ a tags=php,math\
    \ |>\n<| a tags=php,math |>\n<code>\n<?php", "  if ($x == $y) {\n    $sum = ($x\
    \ + $y);\n    if ($sum == $z) {\n      return true;\n    } else {\n      return\
    \ false;\n    }\n  } else {\n    return false;\n  }\n}\n", "  $a = (int) $x;\n\
    \  $b = (int) $y;\n  $c = (int) $z;\n  if ($x == $y || $x == $z) {\n    return\
    \ true;\n  }\n  if ($y == $z) {\n    return true;\n  }\n  if ($a == $b) {\n  \
    \  return true;\n  }\n  return false;\n}\n", "  // If not all are integers, return\
    \ false.\n  if (!is_int($x) || !is_int($y) || !is_int($z)) {\n    return false;\n\
    \  }\n  if ($x == $y && $x == $z) {\n    return true;\n  }\n  if ($x > $y && $x\
    \ > $z) {\n    return true;\n  }\n  if ($x < $y && $x < $z) {\n    return true;\n\
    \  }\n  return false;\n}\n", "    return ( (int) $x == (int) $y || (int) $x ==\
    \ (int) $z );\n}", "  return $x === $z || $y === $z || $z === $x || $x === $y\
    \ || $x === $z;\n}\n", "\tif (intval($x) == $x + intval($y) && intval($x) == $x\
    \ + intval($z) && intval($y) == $y + intval($z)) {\n\t\treturn true;\n\t} else\
    \ {\n\t\treturn false;\n\t}\n}\n", "    \n    $sum = ($x + $y);\n    $check =\
    \ ($x + $z) == $sum;\n    \n    return $check;\n}", "    if (($x === null) ||\
    \ ($y === null) || ($z === null)) {\n        return false;\n    }\n    $valid\
    \ = ($x > 0 && $y > 0 && $z > 0);\n    return $valid && ($x == $y || $x == $z\
    \ || $y == $z);\n}\n", "    if ($x === $y + $z) {\n        return true;\n    }\n\
    \    if ($x !== $y || $x !== $z) {\n        return false;\n    }\n    if ($x !=\
    \ (int) $x || $y != (int) $y || $z != (int) $z) {\n        return false;\n   \
    \ }\n    return true;\n}\n", "  return (($x + ($y + $z)) === $x && ($y + ($z +\
    \ $x)) === $y && ($z + ($x + $y)) === $z);\n}\n", "  // Make sure the inputs are\
    \ integers.\n  // Otherwise return false.\n  if ($x !== intval($x)) {\n    return\
    \ false;\n  }\n  if ($y !== intval($y)) {\n    return false;\n  }\n  if ($z !==\
    \ intval($z)) {\n    return false;\n  }\n  // Check if each number is equal to\
    \ the sum of the other two.\n  // If so, then return true.\n  return (($x + $y)\
    \ === $z);\n}", "    if (is_int($x) && is_int($y) && is_int($z)) {\n        return\
    \ ($x + $y + $z === 0);\n    } else {\n        return false;\n    }\n}\n", " \
    \   $x_is_int = (int) $x;\n    $y_is_int = (int) $y;\n    $z_is_int = (int) $z;\n\
    \    if (($x_is_int == $y_is_int) && ($x_is_int == $z_is_int)) {\n        return\
    \ $x_is_int;\n    } else {\n        return false;\n    }\n}", "    // YOUR CODE\
    \ HERE\n    \n    return $x === $y + $z;\n}\n", "    // Your code here\n    //\
    \ Solution\n    return $x == $y + $z;\n}\n</code>\nThen you can test it like this:\n\
    <code>\nif (any_int(5, 2, 7)) {\n    // Do something\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis answer also works when you have a list of values to test against,\
    \ e.g. `return in_array($x, array(5, 2, 7));`\n<|/ c |>\n<| c |>\nWhat if the\
    \ first number is negative?\n<|/ c |>\n<| a |>\n<code>\n<?php\n$sum=sumArray(5,2,7);\n\
    echo $sum; //print sum \n", "  $return = false;\n  if ($x + $y == $z) {\n    $return\
    \ = true;\n  }\n  return $return;\n}", "    if ($x == $y || $y == $z) {\n    \
    \    return true;\n    } elseif (is_int($x) && is_int($y) && is_int($z)) {\n \
    \       $x_int = intval($x);\n        $y_int = intval($y);\n        $z_int = intval($z);\n\
    \        if ($x_int == $y_int || $y_int == $z_int || $z_int == $x_int) {\n   \
    \         return true;\n        }\n    }\n    return false;\n}\n</code>\n<|/ a\
    \ dscore=4 |>\n<| c |>\nThis is the best answer so far. The only problem is that\
    \ this function does not always return true. For example: any_int(3, -9, 5) will\
    \ return false. Which is correct, but if you wanted to check for 3 then -9 then\
    \ 5 then you could just write $x < $y && $y < $z && $z < $x\n<|/ c |>\n<| a tags=php,math,integer\
    \ |>\nI know this is an old question, but I think this is the most efficient solution:\n\
    <code>", "    if ($x === $y + $z) {\n        return (bool) true;\n    }\n    return\
    \ false;\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\n\"any number is the\
    \ sum of the three numbers\" - this sounds like the condition should be reversed.\n\
    <|/ c |>\n<| c |>\nNo, I don't want any number to be the sum of the three numbers.\
    \ I want all the numbers to be the sum of the three numbers. It's like saying\
    \ \"any number is equal to the sum of the three numbers\" - which is what your\
    \ solution does.\n<|/ c |>\n<| c |>\nIt doesn't matter what order the numbers\
    \ are in, just that they add up together.\n<|/ c |>\n<| c |>\nIt does, but it's\
    \ wrong. [Example](http://codepad.viper-7.com/4GsL9W).\n<|/ c |>\n<| c |>\nOh\
    \ yes, I see it now. The condition was reversed from the first example. I missed\
    \ that. I updated the first example. Sorry about that.\n<|/ c |>\n<| a dscore=2\
    \ |>\nIn Ruby, you can do:\n<code>\ndef any_int(*args)\n    p args.inject([true,\
    \ false, false]){|sum, n| sum |= n.inject(:+) == args} ? true : false\nend\n</code>\n\
    <|/ a tags=php,algorithm |>\n<| c |>\nNice use of inject. I would have used a\
    \ loop, but I wanted to stay in Ruby land.\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\n<code>", "    if (is_int($x) && is_int($y) && is_int($z)) {\n        if\
    \ ($x == $y + $z) {\n            return true;\n        }\n    }\n    return false;\n\
    }", "  $sum = $x + $y + $z;\n  return is_int($sum)\n    ? $sum\n    : $sum - $sum\
    \ === 0\n    ? ($sum % 3) == 0\n    : ($x < $y && $y < $z && $z < $sum);\n}\n\
    </code>\n<|/ a |>\n<| c |>\nYou would still need to check both sides of the condition\
    \ to handle negative integers: `(x < y && y < z && z < sum) || (x < y && y > z\
    \ && z < sum)`\n<|/ c |>\n<| a dscore=0 |>\nI used a generator to calculate the\
    \ result\n<code>", "  if (is_int($x)) {\n    if ((is_int($y) && $x == $y) || is_int($z)\
    \ && $x == $z) return true;\n  }\n  if (is_int($y)) {\n    if ((is_int($x) &&\
    \ $y == $x) || is_int($z) && $y == $z) return true;\n  }\n  if (is_int($z)) {\n\
    \    if ((is_int($x) && $z == $x) || is_int($y) && $z == $y) return true;\n  }\n\
    \  return false;\n}\n", "    return (!is_numeric($x) || !is_numeric($y) || !is_numeric($z))\
    \ ? false : (($x + $y + $z) === $z);\n}\n</code>\n<|/ a |>\n<| c |>\nThat doesn't\
    \ work as well as I hoped. :) I mean, it does *kind of* work - if you have a number\
    \ that is equal to some sum of the other three numbers, but it is incorrect when\
    \ it comes to negative numbers (for example, `any_int(7, 2, -3)` returns false,\
    \ but that's not what the OP wanted).\n<|/ c |>\n<| c |>\nIt works better than\
    \ I thought, thanks! However, I should note that I used PHP 7.0.3 on my system,\
    \ and while this code works on 7.0.2, it does not work on 7.0.3, apparently. So,\
    \ I'll have to look for an alternative.\n<|/ c |>\n<| c |>\nYes, I tested on 7.0.2\
    \ and it doesn't work for negative numbers. But I've edited the code to make it\
    \ work with negative numbers.\n<|/ c |>\n<| a |>\nI thought I should give it a\
    \ shot, because I couldn't find anything better than this in my little search\
    \ of the PHP documentation and I've been wanting to learn more about PHP by doing\
    \ this little exercise.\nI used is_int, is_float and is_numeric to test the numbers.\
    \ It doesn't have to be the right solution, but I hope this helps someone else.\n\
    <code>", "  if (is_integer($x) && is_integer($y) && is_integer($z)) {\n    return\
    \ ($x + $y + $z) === 0 || $x === $y || $x === $z || $y === $z;\n  }\n  return\
    \ false;\n}", "    $a = $x + ($y * ($z - 1));\n    $b = ($y * ($z - 1) - $x);\n\
    \    if ($b == 0) {\n        if ($a == $x) {\n            return true;\n     \
    \   } else {\n            return false;\n        }\n    }\n    if ($a < 0) {\n\
    \        $a *= -1;\n        if ($b < 0) {\n            return true;\n        }\
    \ else {\n            return false;\n        }\n    }\n    $c = -$x + $y;\n  \
    \  $d = -$y + $x;\n    $e = $x + $y;\n    $f = -$x;\n    $g = -$y;\n    $h = $z\
    \ * $x + $y;\n    $i = $z * $y + $x;\n    $j = $z * $y - $x;\n    $k = $i * $x\
    \ + $j;\n    $l = $i * $y + $j;\n    $m = $i * $z - $j;\n    $n = $z * $i;\n \
    \   $o = $n * $i;\n    $p = $j * $i;\n    $q = $i * $j;\n    $r = $j * $j;\n \
    \   $s = -$c;\n    $t = -$d;\n    $u = -$e;\n    $v = -$f;\n    $w = -$g;\n  \
    \  $x = -$h;\n    $y = -$i;\n    $z = -$j;\n    $A = $k + ($v * $m) + ($w * $n);\n\
    \    $B = ($m * ($p - $r) + ($v * $n));\n    $C = $r + ($v * $q) + ($w * $o);\n\
    \    $D = $p + ($v * $o);\n    $E = $q + ($w * $r);\n    $F = $o + ($w * $q);\n\
    \    $G = $r + ($m * ($p + $q));\n    $H = $s + ($m * $n);\n    $I = $n + ($m\
    \ * $o);\n    $J = $o + ($m * $r);\n    $K = $t + ($n * $p);\n    $L = $f + ($n\
    \ * $q);\n    $M = $p + ($n * $r);\n    $N = $s + ($n * $o);\n    $O = $n + ($n\
    \ * $p);\n    $P = $o + ($n * $q);\n    $Q = $f + ($m * $p);\n    $R = $r + ($m\
    \ * $q);\n    $S = $t + ($m * $o);\n    $T = $f + ($m * $n);\n    $U = $m + ($m\
    \ * $p);\n    $V", "  $valid = (is_int($x) && is_int($y) && is_int($z));\n  if\
    \ (!$valid) return FALSE;\n  return ($x + $y + $z == 0);\n}", "    if (is_int($x)\
    \ && is_int($y) && is_int($z) && $x <= $y && $y <= $z && $z <= $x) {\n       \
    \ return true;\n    }\n    return false;\n}", "    $sum = intval($x) + intval($y);\n\
    \    return $sum == intval($z);\n}\n", "    return $x == $y || (is_numeric($x)\
    \ && is_numeric($y) && is_numeric($z) && is_int($x) && is_int($y) && is_int($z));\n\
    }\n\n/**\n * Returns the last element of an array, or an empty string if the given\
    \ array is empty.\n *\n * PHP version 5.3\n *\n * @since 3.0.0\n *\n * @param\
    \ array $arr An array or other types that can be iterated over, such as Traversable.\n\
    \ *\n * @return mixed The last element of the given array; otherwise, the empty\
    \ string.\n */"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
