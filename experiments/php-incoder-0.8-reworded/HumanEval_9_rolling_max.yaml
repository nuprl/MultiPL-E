name: HumanEval_9_rolling_max
language: php
prompt: "<?php\n// From a given array of integers, generate an array of rolling maximum\
  \ element found until given moment\n// in the sequence.\n// >>> rolling_max(array(1,\
  \ 2, 3, 2, 3, 4, 2))\n// array(1, 2, 3, 3, 3, 4, 4)\nfunction rolling_max($numbers)\
  \ {\n"
tests: "function candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
  \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
  \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    if (count($numbers) < 1) {\n        return array();\n    }\n  \
    \  $max_number = $numbers[0];\n    $max_values = [];\n    $index = 0;\n    for\
    \ ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] > $max_number)\
    \ {\n            if ($max_values === array()) {\n                $max_values =\
    \ [$max_number];\n                $index = $i;\n            } else {\n       \
    \         $max_values[] = $max_number;\n            }\n            $max_number\
    \ = $numbers[$i];\n        } else {\n            if ($max_values === array())\
    \ {\n                $max_values = [$max_number];\n                $index = $i;\n\
    \            } else {\n                $max_values[] = $max_number;\n        \
    \    }\n            $max_number = $numbers[$i];\n        }\n    }\n    if ($max_values\
    \ === array()) {\n        $max_values = [$max_number];\n    }\n    $max_values[]\
    \ = $max_number;\n    return $max_values;\n}\n", "    $largest = null;\n    foreach\
    \ ($numbers as $number) {\n        if (is_null($largest) || $number > $largest)\
    \ {\n            $largest = $number;\n        }\n    }\n    return $largest;\n\
    }", "    $size = count($numbers);\n\n    for ($i = 0; $i < $size; $i++) {\n  \
    \      $last_value = $numbers[$size - 1];\n        $numbers[$i] = max($numbers[$i],\
    \ $last_value);\n    }\n\n    return $numbers;\n}\n", "    $rolling_maxes = array();\n\
    \n    // Go through all the numbers.\n    foreach ($numbers as $number) {\n  \
    \      $rolling_max = $number;\n        $rolling_maxes[] = $rolling_max;\n   \
    \ }\n\n    // Now go through all the numbers, one by one. Find the highest and\
    \ store it into the array until\n    // the time has come.\n    foreach ($numbers\
    \ as $number) {\n        for ($i = 0; $i <= $rolling_max; $i++) {\n          \
    \  if ($i == $rolling_max) {\n                $rolling_max = $number;\n      \
    \      }\n            if ($i > $rolling_max) {\n                $rolling_max =\
    \ $i;\n            }\n        }\n\n        $rolling_maxes[] = $rolling_max;\n\
    \    }\n\n    return $rolling_maxes;\n}\n", "    if (!count($numbers)) {\n   \
    \     return $numbers;\n    }\n\n    $previous = end($numbers);\n\n    for ($i\
    \ = 0; $i < count($numbers); $i++) {\n        if ($numbers[$i] > $previous) {\n\
    \            $previous = $numbers[$i];\n        }\n    }\n\n    return array_slice($numbers,\
    \ 0, $i + 1);\n}\n", "  $result = array();\n  $max_value = $numbers[0];\n  for\
    \ ($i = 0; $i < count($numbers); $i++) {\n    if ($numbers[$i] > $max_value) {\n\
    \      $max_value = $numbers[$i];\n    }\n    if ($numbers[$i] == $max_value)\
    \ {\n      $result[] = $max_value;\n    }\n  }\n  return $result;\n}\n", "   \
    \ $numbers = array_filter($numbers);\n    $result = array_shift($numbers);\n \
    \   foreach ($numbers as $number) {\n        $result = max($number, $result);\n\
    \    }\n    return $result;\n}\n", "  $max_number = 0;\n  $max_element = null;\n\
    \  for ($i = 0; $i < count($numbers); $i++) {\n    if ($numbers[$i] > $max_number)\
    \ {\n      $max_number = $numbers[$i];\n      $max_element = $numbers[$i];\n \
    \   } else if ($numbers[$i] == $max_number) {\n      $max_number = $numbers[$i];\n\
    \      $max_element = $numbers[$i];\n    }\n  }\n  return $max_element;\n}\n",
  "    return array_map(function ($number) {\n        if ($number === false) {\n \
    \           return false;\n        }\n        return max($number);\n    }, array_chunk($numbers,\
    \ ceil(count($numbers) / 2)));\n}\n", "  $max_element = array();\n  foreach ($numbers\
    \ as $key => $number) {\n    $max_element[$key] = $number;\n  }\n  while (true)\
    \ {\n    foreach ($max_element as $key => $number) {\n      $max_element[$key]\
    \ = $number;\n      if ($numbers[$key - 1] < $number) {\n        unset($max_element[$key]);\n\
    \        continue;\n      }\n      break;\n    }\n    if ($max_element === $numbers)\
    \ {\n      break;\n    }\n  }\n  return $max_element;\n}\n", "    $res = 0;\n\
    \    foreach($numbers as $num) {\n        if($num > $res)\n            $res =\
    \ $num;\n    }\n    return $res;\n}\n", "    $max = -INF;\n    $max_found = false;\n\
    \    $index = 0;\n    foreach ($numbers as $number) {\n        if ($number > $max\
    \ || !$max_found) {\n            $max_found = true;\n            $max = $number;\n\
    \            $index = 0;\n        } else {\n            $index++;\n        }\n\
    \    }\n    return $max;\n}", "    sort($numbers);\n    $res = array();\n    $max\
    \ = reset($numbers);\n    foreach($numbers as $key => $num) {\n        if ($num\
    \ > $max) {\n            $max = $num;\n        }\n        $res[] = $num;\n   \
    \ }\n    return $res;\n}\n", "    $rolling_max = array();\n    $max_value = $numbers[0];\n\
    \    foreach ($numbers as $number) {\n        if ($number > $max_value) {\n  \
    \          $rolling_max[] = $max_value;\n            $max_value = $number;\n \
    \       } else {\n            $max_value = max($max_value, $number);\n       \
    \ }\n    }\n    $rolling_max[] = $max_value;\n    return $rolling_max;\n}\n",
  "    $numbers = array_reverse($numbers);\n    $result = $numbers[0];\n    $index\
    \ = 0;\n\n    foreach ($numbers as $number) {\n        if ($number > $result)\
    \ {\n            $result = $number;\n            $index = $index;\n        }\n\
    \        $index++;\n    }\n\n    return array_slice($numbers, 0, $index);\n}\n",
  "    $array = array_filter($numbers, 'is_numeric');\n    $max = reset($array);\n\
    \    $rolling_max = $max;\n    foreach ($array as $number) {\n        if ($number\
    \ > $rolling_max) {\n            $rolling_max = $number;\n        }\n    }\n \
    \   $result = [];\n    for ($i = 0; $i <= (count($numbers) - 1); $i++) {\n   \
    \     if ($numbers[$i] == $rolling_max) {\n            $result[] = $rolling_max;\n\
    \            break;\n        }\n        $result[] = $rolling_max;\n        $rolling_max\
    \ = $rolling_max - $numbers[$i];\n    }\n    return $result;\n}\n", "    $max\
    \ = $numbers[0];\n    $rolling_max = array();\n    for ($i = 0; $i < count($numbers)\
    \ - 1; $i++) {\n        if ($numbers[$i] > $max) {\n            $rolling_max[]\
    \ = $max;\n            $max = $numbers[$i];\n        } else {\n            $max\
    \ = $numbers[$i];\n        }\n    }\n    $rolling_max[] = $max;\n\n    return\
    \ $rolling_max;\n}\n", "    $max_found = array();\n    foreach ($numbers as $number)\
    \ {\n        $max_found[$number] = $number;\n    }\n    return $max_found;\n}\n",
  "    $result = array();\n    $size = sizeof($numbers);\n    $i = 0;\n    while($i\
    \ < $size) {\n        $result[$i] = $numbers[$i];\n        if($i == 0) {\n   \
    \         $j = $i + 1;\n        }\n        else if($i + $size == $size) {\n  \
    \          $j = $size - 1;\n        }\n        else {\n            $j = $i + $size;\n\
    \        }\n        if(isset($numbers[$j])) {\n            $result[$i] = max($result[$i],\
    \ $numbers[$j]);\n        }\n        $i = $j;\n    }\n    return $result;\n}\n",
  "    $current = array_pop($numbers);\n    return $current > 0 ? array_merge($numbers,\
    \ array($current)) : array();\n}", "    $result = [];\n    $i = 0;\n    $max =\
    \ PHP_INT_MAX;\n    foreach ($numbers as $number) {\n        $number = max(-PHP_INT_MAX,\
    \ $number);\n        if ($number > $max) {\n            $result[$i] = $number;\n\
    \            $max = $number;\n        } else {\n            $i++;\n        }\n\
    \    }\n    return $result;\n}\n", "  $max = array_shift($numbers);\n  foreach\
    \ ($numbers as $number) {\n    if ($number > $max) {\n      $max = $number;\n\
    \    }\n  }\n  return $max;\n}\n", "  $maximums = array_fill(0, count($numbers),\
    \ -INF);\n  $result = array();\n  foreach ($numbers as $n) {\n    $i = 1;\n  \
    \  while (true) {\n      $maximum = $maximums[$i];\n      if ($maximum < $n) {\n\
    \        $result[] = $maximum;\n        $i++;\n      } else if ($maximum == $n)\
    \ {\n        $result[] = $n;\n        break;\n      }\n    }\n  }\n  return $result;\n\
    }", "    $result = array();\n    for($i=0;$i<count($numbers);$i++) {\n       \
    \ array_push($result, max($numbers[$i]));\n    }\n    return $result;\n}", " \
    \   $max = max($numbers);\n    $index = 0;\n    $result = array();\n    foreach\
    \ ($numbers as $n) {\n        if ($n > $max) {\n            $max = $n;\n     \
    \       $index = 0;\n        } else if ($n != $max && $n != $numbers[$index +\
    \ 1]) {\n            $result[] = $n;\n            $index++;\n        }\n    }\n\
    \    if ($index < count($numbers)) {\n        $result[] = $numbers[$index];\n\
    \    }\n    return $result;\n}\n", "    $maximum = $numbers[0];\n    $numbers\
    \ = array_slice($numbers, 1);\n    $rolling_max = 0;\n    foreach ($numbers as\
    \ $number) {\n        if ($number > $rolling_max) {\n            $rolling_max\
    \ = $number;\n        }\n        $maximum = max($maximum, $rolling_max);\n   \
    \ }\n    return array($maximum, $rolling_max);\n}\n", "    return array_values(array_map(function\
    \ ($n) {\n        return max($numbers);\n    }, $numbers));\n}\n", "  return array_reduce(\n\
    \    $numbers,\n    function ($result, $number) {\n      return $result > $number\
    \ ? $result : $number;\n    }\n  );\n}\n</code>\n<|/ a |>\n<| a |>\n<code>", "\t\
    sort($numbers);\n\t$n = count($numbers);\n\t$m = $n - 1;\n\t$max = $numbers[0];\n\
    \tfor ($i = 1; $i < $m; $i++) {\n\t\tif ($numbers[$i] == $max) {\n\t\t\t$max =\
    \ $numbers[$i];\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor ($i = $m; $i >\
    \ 0; $i--) {\n\t\tif ($numbers[$i] == $max) {\n\t\t\t$max = $numbers[$i];\n\t\t\
    } else {\n\t\t\tbreak;\n\t\t}\n\t}\n\twhile ($max > $numbers[$m]) {\n\t\t$m--;\n\
    \t}\n\twhile ($n < $m - 1) {\n\t\t$max = $numbers[$m] + 1;\n\t\t$m++;\n\t}\n\t\
    for ($i = 0; $i <= $m; $i++) {\n\t\t$numbers[$i] = $max;\n\t}\n\treturn $numbers;\n\
    }\n", "    $max_number = $numbers[0];\n    $rolling_max = array();\n\n    foreach\
    \ ($numbers as $number) {\n        if ($number > $max_number) {\n            $max_number\
    \ = $number;\n            $rolling_max = array();\n        }\n\n        $rolling_max[]\
    \ = $number;\n    }\n\n    return $rolling_max;\n}\n", "  $result = [];\n  $currentMax\
    \ = null;\n  foreach ($numbers as $number) {\n    if ($currentMax === null) {\n\
    \      $currentMax = $number;\n      $result[] = $currentMax;\n    } else {\n\
    \      $currentMax = max($currentMax, $number);\n      $result[] = $currentMax;\n\
    \    }\n  }\n  return $result;\n}\n</code>\nYou can check the difference between\
    \ the two functions using below code:\n<code>\n$numbers = [1, 2, 3, 2];\n$expectedResult\
    \ = [1, 2, 3, 2];\n$actualResult = rolling_max($numbers);\nprint_r($actualResult\
    \ === $expectedResult);\n</code>\n<|/ a dscore=4 |>\n<| c |>\nI believe your expected\
    \ result should be `[1, 2, 3, 1, 2]`\n<|/ c |>\n<| a dscore=3 |>\n<code>\npublic\
    \ function sumArrayElements($arr) {\n    $sum = 0;\n    foreach ($arr as $key\
    \ => $val) {\n        $sum += $val;\n    }\n    return $sum;\n}\n</code>\n<|/\
    \ a tags=php,function,arrays,sum |>\n<| a tags=php,function,arrays,sum |>\n<code>",
  "    $max = reset($numbers);\n    $index = count($numbers) - 1;\n    while ($index\
    \ >= 0) {\n        if ($numbers[$index] > $max) {\n            $max = $numbers[$index];\n\
    \        }\n        $index--;\n    }\n    return $max;\n}\n", "    $max = reset($numbers);\n\
    \    foreach ($numbers as $number) {\n        if ($number > $max) {\n        \
    \    $max = $number;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a tags=arrays,php,algorithm,mathematical-optimization,math\
    \ dscore=0 |>\n<| a dscore=0 |>\nI came up with this, which is not 100% but it's\
    \ pretty close:\n<code>\n<?php\n$arr1 = array(1,2,2,3,4);\n$arr2 = array(2,2,2,4,4);\n\
    $arr3 = array(2,2,2,4,5);\n\n$arr4 = array(5,4,5,5,5);\n", "\tsort($numbers);\n\
    \t$rolling_max = $numbers[0];\n\tfor ($i = 1; $i < count($numbers); $i++) {\n\t\
    \tif ($numbers[$i] > $rolling_max) {\n\t\t\t$rolling_max = $numbers[$i];\n\t\t\
    }\n\t}\n\treturn $rolling_max;\n}", "  if (count($numbers) < 1) return array();\n\
    \  $results=array();\n  $results[] = $numbers[0];\n  foreach ($numbers as $number)\
    \ {\n    if ($number > $results[-1]) {\n      $results[] = $number;\n    }\n \
    \ }\n  return $results;\n}", "  $max = NULL;\n  foreach ($numbers as $number)\n\
    \    $max = max($max, $number);\n  return $max;\n}\n", "  $max_number = array();\n\
    \  for ($i = 0; $i < count($numbers); $i++) {\n    $max_number[] = max($numbers[$i]);\n\
    \  }\n  return $max_number;\n}\n</code>\n<|/ a tags=php,arrays dscore=2 |>\n<|\
    \ c |>\nWow, just wow, I never knew you could do something like this.\n<|/ c |>\n\
    <| c |>\nThank you for sharing! However, I did notice one bug in the logic. I\
    \ did edit my answer to reflect it, so please re-re-re-accept this as the answer,\
    \ unless you want me to re-edit it with the fix you gave.\n<|/ c |>\n<| c |>\n\
    Oh you're right, I had forgotten that I had changed my answer based on your response.\
    \ I thought I had fixed it earlier, but apparently not. I apologize for the confusion.\n\
    <|/ c |>\n<| c |>\nThanks alot for the solution! It works perfectly :)\n<|/ c\
    \ |>\n<| a tags=php,arrays dscore=1 |>\nThis seems like a fun problem to solve,\
    \ so here are some ideas that I came up with:\nFirst off, you can do this by first\
    \ finding the maximum value in the array, and then iterating through the array\
    \ and creating a new array by adding each value one at a time to the new array\
    \ until you encounter a value that is higher than the maximum of all values in\
    \ the original array:\n<code>\n$numbers = array(1, 2, 3, 4, 5);\n$max_value =\
    \ max($numbers);\n$new_array = array();\nforeach($numbers as $number) {\n    if\
    \ ($number > $max_value) {\n        break;\n    }\n    $new_array[] = $number;\n\
    }\n</code>\nSo that's the first idea. If you want more sophisticated behavior\
    \ (like skipping the first element), you could use array_shift() to pull off the\
    \ first value from the array and run it through the above code.\nIf you want an\
    \ even more sophisticated behavior, you can use array_walk() to add each item\
    \ to a new array until you encounter a value that is higher than the maximum of\
    \ all values in the original array:\n<code>\n$numbers = array(1, 2, 3, 4, 5);\n\
    $max_value = max($numbers);\n$new_array = array();\narray_walk($numbers, function($value,\
    \ $key) use ($max_value) {\n    if ($value >= $max_value) {\n        break;\n\
    \    }\n    $new_array[] = $value;\n}, $new_array);\n</code>\nBut this doesn't\
    \ skip the first element of the array. Instead it just adds the first element\
    \ to the new array if the current element value is greater than the ", "    $result\
    \ = [];\n    foreach ($numbers as $number) {\n        $result[] = $number;\n \
    \       if (empty($numbers)) {\n            $result[] = array_pop($numbers);\n\
    \        }\n        $result[] = max($numbers);\n    }\n    return $result;\n}\n",
  "    $max_number = 0;\n    $max_index = 0;\n    foreach($numbers as $number) {\n\
    \        if($number > $max_number) {\n            $max_number = $number;\n   \
    \         $max_index = 0;\n        }\n        if($number == $max_number) {\n \
    \           $max_index++;\n        }\n    }\n    $numbers = array_slice($numbers,\
    \ 0, $max_index);\n    return $numbers;\n}\n", "    $max_element = max($numbers);\n\
    \    $result = [];\n    foreach ($numbers as $number) {\n        if ($number ==\
    \ $max_element) {\n            $result[] = $number;\n        } else {\n      \
    \      $result[] = $max_element;\n        }\n    }\n    return $result;\n}\n</code>\n\
    <|/ a dscore=2 tags=php,algorithm,optimization |>\n<| c |>\nYou don't need to\
    \ sort the array first, since all you're doing is looking for the *next* max value.\n\
    <|/ c |>\n<| a tags=php,algorithm,optimization |>\nHere's a recursive implementation\
    \ that works. Notice how we can get the value of the \"next rolling max\" by recursively\
    \ calling the function. It's a very similar approach to the one you suggested,\
    \ but slightly different. \n<code>", "    $result = [];\n    $max_val = array_shift($numbers);\n\
    \    foreach ($numbers as $number) {\n        if ($number > $max_val) {\n    \
    \        $result[] = $max_val;\n            $max_val = $number;\n        } else\
    \ {\n            $max_val = $max_val > $number ? $max_val : $number;\n       \
    \ }\n    }\n    $result[] = $max_val;\n    return $result;\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nPlease read the question. I am looking for any existing algorithm\
    \ or solution to this.\n<|/ c |>\n<| c |>\nHe is looking for a generalized approach\
    \ that works for any array size.\n<|/ c |>\n<| c |>\nIt can be done with one loop,\
    \ see my answer.\n<|/ c |>\n<| c |>\nI know, but I wanted to be more general.\n\
    <|/ c |>\n<| c |>\nThis is not a general solution because it doesn't use recursion\n\
    <|/ c |>\n<| a dscore=0 tags=php,arrays,algorithm,multidimensional-array |>\n\
    Here's a solution with no recursion:\n<code>\n$max = array();\nforeach ($array\
    \ as $key => $value) {\n    if ($max and max($max) < $value) {\n        continue;\n\
    \    }\n    $max[$key] = $value;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>",
  "    // Sort numbers ascending\n    $numbers = array_values($numbers);\n\n    //\
    \ Find the max element\n    $max = array_shift($numbers);\n\n    // For each subsequent\
    \ number in the array\n    // if the number is greater than the current max, increment\
    \ the max\n    foreach ($numbers as $number) {\n        if ($number > $max) {\n\
    \            $max = $number;\n        }\n    }\n\n    // Return the numbers of\
    \ the max element\n    return $max;\n}\n", "    return array_filter(\n       \
    \ $numbers,\n        function($value) {\n            return $value > $numbers[0];\n\
    \        },\n        ARRAY_FILTER_USE_BOTH\n    );\n}\n\n/**\n * Get the value\
    \ that comes after the given number in the array\n * >>> get_value_after(array(2,\
    \ 3, 4, 2, 3, 4, 5), 3)", "    $lengths = array_map('count', $numbers);\n    asort($lengths);\n\
    \    $highest_sum = -PHP_INT_MAX;\n    $highest_sum_index = 0;\n    foreach ($lengths\
    \ as $index => $length) {\n        $current_sum = 0;\n        for ($i = 0; $i\
    \ < $length; $i++) {\n            $current_sum += $numbers[$index];\n        }\n\
    \        if ($current_sum > $highest_sum) {\n            $highest_sum = $current_sum;\n\
    \            $highest_sum_index = $index;\n        }\n    }\n    return array_slice($numbers,\
    \ $highest_sum_index + 1);\n}\n", "    $numbers = array_values($numbers);\n  \
    \  $max_index = count($numbers) - 1;\n    $max_value = $numbers[$max_index];\n\
    \n    foreach ($numbers as $index => $value) {\n        if ($value > $max_value)\
    \ {\n            $max_value = $value;\n            $max_index = $index;\n    \
    \    }\n    }\n\n    $max_value = $max_index + 1;\n\n    return array_slice($numbers,\
    \ 0, $max_index);\n}\n", "\t$result = array();\n\t$last_max = null;\n\tforeach\
    \ ($numbers as $number) {\n\t\tif (!is_null($last_max)) {\n\t\t\tif ($number >\
    \ $last_max) {\n\t\t\t\t$last_max = $number;\n\t\t\t}\n\t\t} else {\n\t\t\t$last_max\
    \ = $number;\n\t\t}\n\t\t$result[] = $last_max;\n\t}\n\treturn $result;\n}\n\n",
  "    $rolling_max_array = array();\n\n    foreach ($numbers as $number) {\n    \
    \    $rolling_max_array = array_merge($rolling_max_array, array_slice($rolling_max_array,\
    \ 0, $number));\n    }\n\n    return $rolling_max_array;\n}\n", "    $max = array_shift($numbers);\n\
    \    foreach ($numbers as $number) {\n        if ($number > $max) {\n        \
    \    $max = $number;\n        }\n    }\n    return $max;\n}\n", "    $max_value\
    \ = PHP_INT_MAX;\n    $return      = [];\n    $current_max = $max_value;\n\n \
    \   foreach ($numbers as $index => $value) {\n        $current_max = $value <\
    \ $current_max ? $value : $current_max;\n\n        $return[$index] = $current_max;\n\
    \    }\n\n    return $return;\n}\n", "\tsort($numbers);\n\t$max = array_shift($numbers);\n\
    \tforeach($numbers as $number) {\n\t\tif ($number > $max) {\n\t\t\t$max = $number;\n\
    \t\t}\n\t}\n\treturn $max;\n}\n", "    $res = $numbers[0];\n    for ($i = 1; $i\
    \ < count($numbers); $i++) {\n        if ($numbers[$i] > $res)\n            $res\
    \ = $numbers[$i];\n    }\n    return $res;\n}\n", "    // Initialize result\n\
    \    $result = array();\n\n    // Initialize rolling maximum\n    $rolling_maximum\
    \ = array(0);\n\n    // Iterate through array elements\n    foreach ($numbers\
    \ as $i => $number) {\n        // Check if this element is greater than the rolling\
    \ maximum\n        if ($number > $rolling_maximum[$i]) {\n            // If not,\
    \ update the rolling maximum value\n            $rolling_maximum[$i] = $number;\n\
    \        }\n        // Otherwise, do nothing and move to the next element\n  \
    \      else {\n            continue;\n        }\n\n        // If we reached the\
    \ last element in the array, add it to the result and break out of the loop\n\
    \        if ($i == count($numbers) - 1) {\n            $result[] = $rolling_maximum[$i];\n\
    \            break;\n        }\n    }\n\n    return $result;\n}\n", "    foreach\
    \ ($numbers as $index => $number) {\n        $previous = $number;\n        for\
    \ ($i = $index; $i < count($numbers); $i++) {\n            $number = max($number,\
    \ $numbers[$i]);\n            if ($number == $previous) {\n                $numbers[$i]\
    \ = $number;\n            } else {\n                $numbers[$i] = $previous;\n\
    \                $previous = $number;\n            }\n        }\n    }\n    return\
    \ $numbers;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nHere is solution for PHP\
    \ 7.3+ version\n<code>", "    $result = [];\n    $prev_number = null;\n    $max_number\
    \ = null;\n    foreach ($numbers as $number) {\n        if ($number != $prev_number)\
    \ {\n            $prev_number = $number;\n            $max_number = $number;\n\
    \        } else {\n            if ($number > $max_number) {\n                $max_number\
    \ = $number;\n            }\n        }\n    }\n\n    if ($max_number != null)\
    \ {\n        $result[] = $max_number;\n    }\n\n    return $result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\nThis may be an issue with the way PHP is handling\
    \ arrays. I have had a similar issue before and found that using unset() in the\
    \ loop solved it for me:\n<code>\nfor ($i = 1; $i <= $noOfDays; ++$i) {\n    $days[$i]\
    \ = $i;\n    unset($days[$i-1]);\n}\n</code>\nI tested this on a few test cases\
    \ and it seemed to work.\n<|/ a dscore=0 tags=php |>\n<| a tags=php |>\nHere is\
    \ how you can do it using foreach and array_slice:\n<code>\n<?php\n\n$numbers\
    \ = [1, 2, 3, 4, 3, 2, 1];\n\n$max = 0;\n\nforeach ($numbers as $key => $val)\
    \ {\n    if ($val > $max) {\n        $max = $val;\n    }\n    if ($key == 0) {\n\
    \        continue;\n    }\n\n    $numbers = array_slice($numbers, $key + 1);\n\
    \n    if ($numbers[0] > $max) {\n        $max = $numbers[0];\n    }\n}\n\necho\
    \ \"Max: \" . $max;\n</code>\nThe key here is that the value can go up to N-1\
    \ where N is the size of the array. So, each value can only have a maximum value\
    \ equal to the size of the array.\n<|/ a dscore=0 |>\n<| a tags=php dscore=0 |>\n\
    I got it!! \n<code>\n$array = array(4,5,6,7,8,9,5,3,6,4,5,6,7,8,9);\n$max = $array[0];\n\
    \nfor($i=1;$i<count($array);$i++){\n    if($max>$array[$i]){\n        $max=$array[$i];\n\
    \    }\n}\n\necho \"Max: \".$max;\n</code>\n<|/ a |>\n<| c |>\nWhile this code\
    \ snippet may solve the question, [including an explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion. Please also try ", "    $rolling_max = array();\n\
    \    $rolling_max[0] = $numbers[0];\n    foreach ($numbers as $index => $number)\
    \ {\n        if ($index === 0) {\n            $rolling_max[] = $number;\n    \
    \    } else {\n            $rolling_max[] = max($rolling_max[$index - 1], $number);\n\
    \        }\n    }\n    return $rolling_max;\n}\n</code>\n<|/ a tags=php,arrays,function\
    \ |>\n<| a dscore=3 |>\nI wrote a function to do this. Works well and easy.\n\
    <code>", "    $max = null;\n    $rolling_max = null;\n\n    $length = count($numbers);\n\
    \n    for ($i = $length - 1; $i >= 0; $i--) {\n        $number = $numbers[$i];\n\
    \n        if ($max !== null && $max < $number) {\n            $rolling_max = $max;\n\
    \            $max = $number;\n        } elseif ($rolling_max !== null && $rolling_max\
    \ === $number) {\n            $rolling_max = $rolling_max . $number . \" \";\n\
    \        } elseif ($rolling_max !== null) {\n            $rolling_max = $rolling_max\
    \ . $number . \" \";\n        }\n    }\n\n    return $rolling_max;\n}\n</code>\n\
    <|/ a dscore=1 tags=laravel,laravel-5,laravel-4 |>\n<| c |>\ni get an error \"\
    Cannot redeclare rolling_max()\"\n<|/ c |>\n<| c |>\n`rolling_max()` will be called\
    \ on `echo`. You will need to declare `rolling_max()` separately.\n<|/ c |>\n\
    <| c |>\ni tried `function rolling_max($numbers) {\n    $max = null;\n    $rolling_max\
    \ = null;\n\n    $length = count($numbers);\n\n    for ($i = $length - 1; $i >=\
    \ 0; $i--) {\n        $number = $numbers[$i];\n\n        if ($max !== null &&\
    \ $max < $number) {\n            $rolling_max = $max;\n            $max = $number;\n\
    \        } elseif ($rolling_max !== null && $rolling_max === $number) {\n    \
    \        $rolling_max = $rolling_max . $number . \" \";\n        } elseif ($rolling_max\
    \ !== null) {\n            $rolling_max = $rolling_max . $number . \" \";\n  \
    \      }\n    }\n\n    return $rolling_max;\n}\n`\n<|/ c |>\n<| c |>\ni get an\
    \ error \"Cannot redeclare rolling_max()\"\n<|/ c |>\n<| c |>\n`function rolling_max($numbers)\
    \ {\n    $max = null;\n    $rolling_max = null;\n\n    $length = count($numbers);\n\
    \n    for ($i = $length - 1; $i >= 0; $i--) {\n        $number = $numbers[$i];\n\
    \n        if ($max !== null && $max < $number) {\n            $rolling_max = $max;\n\
    \            $max = $number;\n        } elseif ($rolling_max !== null && $rolling_max\
    \ === $number) {\n            $rolling_max = $rolling_max . $number . \" \";\n\
    \        } elseif ($rolling_max !== null) {\n            $rolling_max = $rolling_max\
    \ . $", "    $result = array();\n    foreach ($numbers as $k => $v) {\n      \
    \  if ($k !== 0) {\n            $result[] = $v;\n        }\n        if ($k >=\
    \ count($numbers) - 1) {\n            $result[] = $v;\n        }\n    }\n    return\
    \ $result;\n}\n", "\t$result = array();\n\t$lastItem = null;\n\tfor ($i = 0, $len\
    \ = count($numbers); $i < $len; $i++) {\n\t\tif ($numbers[$i] == $lastItem) {\n\
    \t\t\tcontinue;\n\t\t}\n\t\t$result[] = $numbers[$i];\n\t\t$lastItem = $numbers[$i];\n\
    \t}\n\treturn $result;\n}\n", "    $max = NULL;\n    $prev_value = NULL;\n   \
    \ $prev_sum = NULL;\n    $size = count($numbers);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        if ($max == NULL || $numbers[$i] > $max) {\n            $max\
    \ = $numbers[$i];\n        }\n        if ($numbers[$i] == $prev_value) {\n   \
    \         $prev_sum += $prev_value;\n        } else {\n            if ($prev_sum\
    \ == NULL) {\n                $prev_sum = $numbers[$i];\n            } else {\n\
    \                $prev_sum = $prev_sum + $numbers[$i];\n            }\n      \
    \      if ($prev_sum > $max) {\n                $max = $prev_sum;\n          \
    \  }\n        }\n        $prev_value = $numbers[$i];\n        $prev_sum = $numbers[$i];\n\
    \    }\n    return $max;\n}\n", "    if (count($numbers) < 2) return array($numbers[0]);\n\
    \    $result_array = array();\n    $result_array[0] = $numbers[0];\n    $max_index\
    \ = 0;\n    $max_val = $numbers[0];\n\n    for($i = 1; $i < count($numbers); $i++)\
    \ {\n        if($numbers[$i] > $max_val) {\n            $result_array[$i] = $max_val;\n\
    \            $max_index = $i;\n            $max_val = $numbers[$i];\n        }\
    \ else {\n            $result_array[$i] = $numbers[$i];\n        }\n    }\n\n\
    \    return $result_array;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is the only solution\
    \ that worked for me using php7.2.11\n<|/ c |>\n<| c |>\nThis answer worked for\
    \ me also.\n<|/ c |>\n<| c |>\nThis is working perfectly for me..\n<|/ c |>\n\
    <| a dscore=4 tags=php,arrays |>\n<code>\n$array = array(1,2,3,4,5,6,7,8);\n$result\
    \ = array();\n\nfor($i=0; $i<count($array); $i++)\n{\n    if(!isset($result[$i]))\n\
    \    {\n        $result[$i] = $array[$i];\n    }\n    else\n    {\n        if($array[$i]\
    \ > $result[$i])\n        {\n            $result[$i] = $array[$i];\n        }\n\
    \    }\n}\n</code>\n<|/ a |>\n<| c |>\nWhy would you use isset here? You don't\
    \ need to check if array index is set, just check if it's an empty value.\n<|/\
    \ c |>\n<| c |>\nThe answer above worked for me. I am using the isset so that\
    \ if my array was empty it would still give me my desired result. However I didn't\
    \ want to keep an extra count variable. It could be done with less code but it\
    \ just seemed messy to me\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\nforeach($array\
    \ as $key => $value)\n{\n   if ($key > 0)\n      $result[$key] = $value;\n}\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=php,arrays |>\nSimple one-liner:\n<code>\n\
    array_reduce($array, function ($last, $current) {return $current > $last ? $current\
    \ : $last;}, 0);\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\n$array\
    \ = [1, 2, 3, 4, 5];\n\n$largest = max($array);\n\nif (count($array) > 1) {\n\
    \    ", "    $max_value = 0;\n    foreach ($numbers as $key => $number) {\n  \
    \      if ($number > $max_value) {\n            $max_value = $number;\n      \
    \  }\n    }\n    return array_pad($max_value, count($numbers), 0);\n}\n", "  \
    \  $max = reset($numbers);\n    foreach ($numbers as $item) {\n        if ($item\
    \ > $max) {\n            $max = $item;\n        }\n    }\n    return $max;\n}\n",
  "  $result = [];\n  $count  = count($numbers);\n  $last_val = array_pop($numbers);\n\
    \  for ($i = 0; $i < $count; ++$i) {\n    if ($last_val < $numbers[$i]) {\n  \
    \    $last_val = $numbers[$i];\n      unset($numbers[$i]);\n    }\n    $result[]\
    \ = $last_val;\n  }\n  return $result;\n}\n", "    $output = [];\n    $n = count($numbers);\n\
    \    if ($n === 1) {\n        $output[] = $numbers[0];\n        return $output;\n\
    \    }\n    $output[0] = max($numbers[0]);\n    for ($i = 1; $i < $n; $i++) {\n\
    \        $max_found = false;\n        foreach ($output as $k => $v) {\n      \
    \      if ($v > $numbers[$i]) {\n                $output[$k] = $numbers[$i];\n\
    \                $max_found = true;\n            }\n        }\n        if (!$max_found)\
    \ {\n            $output[$i] = $numbers[$i];\n        }\n    }\n    return $output;\n\
    }\n\n/**\n * Finds minimum of given array and return the array of values as keys\
    \ and their index as values.\n *\n * @param  array $values The array of given\
    \ values to find the minimum from\n *\n * @return array\n */", "    if (!is_array($numbers))\
    \ {\n        $numbers = array($numbers);\n    }\n    $max = array_shift($numbers);\n\
    \    while ($numbers) {\n        $max = max($max, array_shift($numbers));\n  \
    \  }\n    return $max;\n}\n", "    $max = NULL;\n    foreach ($numbers as $k =>\
    \ $v) {\n        if ($v > $max) {\n            $max = $v;\n        }\n    }\n\
    \    return $max;\n}\n", "    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = max((int)$number, 0);\n    }\n    return $result;\n}\n\
    </code>\n<|/ a dscore=3 |>\n<| c |>\nJust to give a heads up, since this answer\
    \ was posted, the array_merge() function was added in PHP version 5.4.0 (http://php.net/manual/en/function.array-merge.php).\n\
    <|/ c |>\n<| c |>\nNote that this doesn't do what you think it does: it gives\
    \ [3, 3]. Your code is equivalent to `max(array(3, 3))`.\n<|/ c |>\n<| c |>\n\
    I see you use max() and array_merge(). Can you explain the array_merge() function\
    \ in more detail? Why are there 2 values returned and not a combination of them?\n\
    <|/ c |>\n<| a |>\n<code>", "    $result = array();\n    $current_max = $numbers[0];\n\
    \    $current_index = 0;\n    $result[$current_index] = $current_max;\n    for\
    \ ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] > $current_max)\
    \ {\n            $current_max = $numbers[$i];\n            $current_index = $i;\n\
    \        }\n        $result[$current_index] = $current_max;\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\nAn alternative solution without\
    \ recursion, also uses array_reduce:\n<code>\n$arr = [\n    1,2,3,4,2,3,6,5,6,6,6,6,6,5,5,2,\n\
    \    6,3,6,3,4,2,3,2,6,5,4,4,2,3,4,5,2,\n    6,5,5,5,6,2,3,6,5,4,6,3,5,2,1,3,\n\
    \    1,2,4,6,2,3,6,5,6,3,5,6,6,6,6,5,5,2,\n    6,3,6,3,4,2,3,2,6,5,4,4,2,3,4,5,2,\n\
    \    6,5,5,5,6,2,3,6,5,4,6,3,5,2,1,3,\n    1,2,4,6,2,3,6,5,6,3,5,6,6,6,6,5,5,2,\n\
    \    6,3,6,3,4,2,3,2,6,5,4,4,2,3,4,5,2,\n    6,5,5,5,6,2,3,6,5,4,6,3,5,2,1,3\n\
    ];\n\n$maxes = array_reduce($arr, function($a, $i) {\n    if ($i > $a[count($a)-1])\
    \ {\n        $a[count($a)-1] = $i;\n    }\n    return $a;\n});\n\n$maxes[] = array_reduce($maxes,\
    \ function($a, $i) {\n    return $a > $i ? $a : $i;\n}, 0);\n</code>\n<|/ a tags=php,math,algorithm,sorting\
    \ |>\n<| c |>\nThanks for the solution. I am going to give a try to my first solution\
    \ by iterating through the array and comparing each element with the previous\
    \ one to find the maximum one\n<|/ c |>\n<| c |>\nYou shouldn't make my solution\
    \ dependent on any external data like array_reduce\n<|/ c |>\n<| c |>\nYes, you\
    \ are right! I didn't think to test your solution because it was more like a math\
    \ problem than a programming problem but I did test the other solution because\
    \ I was able to use array_reduce and it's probably faster than a for loop\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>", "    do {\n        foreach ($numbers as &$number)\
    \ {\n            $number = $number < $number ? $number : $numbers[count($numbers)-1];\n\
    \        }\n        $numbers[] = max($numbers);\n    } while ($numbers[count($numbers)-1]\
    \ != $numbers[count($numbers)-2]);\n    return $numbers;\n}\n", "    // Create\
    \ an array with negative numbers to detect when the sequence has ended\n    $negatives_array\
    \ = array_map('intval', array_reverse(array_fill(1, count($numbers), '-')));\n\
    \    // Generate an array to store rolling max value until the current moment\n\
    \    $rolling_max_values = array_fill(0, count($numbers) - 1, 0);\n    // Iterate\
    \ through the numbers and generate rolling max until the last number\n    foreach\
    \ ($numbers as $key => $value) {\n        $rolling_max_values[$key] = max($rolling_max_values[$key\
    \ + 1], $value);\n    }\n    // If the last number in the given array is positive,\
    \ increment it by 1\n    if ($rolling_max_values[count($numbers) - 1] > 0) {\n\
    \        $rolling_max_values[count($numbers) - 1]++;\n    }\n    // Replace negative\
    \ number sequence\n    for ($i = 0; $i < count($negatives_array); $i++) {\n  \
    \      if ($negatives_array[$i] > 0) {\n            $rolling_max_values[count($numbers)\
    \ - 1 - $i]++;\n        }\n    }\n    // Return the resulting array\n    return\
    \ $rolling_max_values;\n}", "    $max_element = array();\n    for ($i = 0; $i\
    \ < count($numbers); $i++) {\n        if ($numbers[$i] > $max_element[0]) {\n\
    \            $max_element = $numbers[$i];\n        }\n    }\n    return $max_element;\n\
    }\n", "  $result = [];\n\n  foreach ($numbers as $number => $current) {\n    if\
    \ (empty($result[$current])) {\n      $result[$current] = $number;\n    } else\
    \ {\n      $result[$current] = max($number, $result[$current]);\n    }\n  }\n\n\
    \  return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is great, thank you! How\
    \ would you make this function return an array with every 'max' array key (so\
    \ if my input is [2, 3, 2, 3, 4, 2, 1] it would return [2, 3, 3, 3, 4, 4, 1])?\
    \ I have been fiddling with it but have had no luck so far.\n<|/ c |>\n<| c |>\n\
    Please see my answer update. I hope it helps.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\nThis should work:\n<code>\n$arr = [2, 3, 2, 3, 4, 2, 1];\n$max = $arr[0];\n\
    $temp = [];\nfor($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] > $max) {\n\
    \        $temp = $arr;\n        $max = $arr[$i];\n    }\n    else {\n        $temp[$i]\
    \ = $arr[$i];\n    }\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not what\
    \ OP asked.\n<|/ c |>\n<| c |>\nSorry didn't see that. My bad. Hope this is what\
    \ OP was looking for :)\n<|/ c |>\n<| c |>\nYou shouldn't change your answer to\
    \ a wrong one, rather post a new one with your updated code.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "    $max = array_shift($numbers);\n    foreach ($numbers as $number)\
    \ {\n        if ($number > $max) {\n            $max = $number;\n        }\n \
    \   }\n    return $max;\n}\n\n/**\n * Remove duplicates from an array.\n *\n *\
    \ Taken from: http://stackoverflow.com/a/4993009/4135364\n *\n * array $array\n\
    \ * array The input array, but with all duplicates removed.\n */", "    // We\
    \ need to find maximum only if it is not equal to any of previous elements\n \
    \   $currentMax = $numbers[0];\n    foreach ($numbers as $number) {\n        if\
    \ ($number > $currentMax) {\n            $currentMax = $number;\n        }\n \
    \   }\n    return $currentMax;\n}\n\n/**\n * Generate an array with rolling min\
    \ elements.\n *\n * @param array $numbers Input array of integers.\n *\n * @return\
    \ array An array containing rolling min elements.\n */", "    list($max, $max2)\
    \ = array(null, null);\n    foreach ($numbers as $number) {\n        $currentMax\
    \ = $max;\n        if ($number > $currentMax) {\n            $max = $number;\n\
    \            $max2 = $currentMax;\n        }\n    }\n    return array($max, $max2);\n\
    }\n", "    $max = -999999999999;\n    $result = [];\n    foreach ($numbers as\
    \ $number) {\n        if ($number > $max) {\n            $max = $number;\n   \
    \         $result[] = $number;\n        }\n    }\n    return $result;\n}", " \
    \ $max_element = 0;\n  $max_position = 0;\n  foreach ($numbers as $number) {\n\
    \    if ($number > $max_element) {\n      $max_element = $number;\n      $max_position\
    \ = $numbers;\n    }\n    $max_position[] = $number;\n  }\n  return $max_position;\n\
    }", "    foreach ($numbers as $key => $value) {\n        if ($key == 0) {\n  \
    \          $max_value = $value;\n            $max_key = $key;\n        } else\
    \ {\n            if ($value > $max_value) {\n                $max_value = $value;\n\
    \                $max_key = $key;\n            }\n        }\n    }\n    return\
    \ array($max_value, $max_key);\n}\n", "    if (!is_array($numbers)) {\n      \
    \  return [];\n    }\n    if (count($numbers) === 0) {\n        return [];\n \
    \   }\n    if (count($numbers) === 1) {\n        return $numbers;\n    }\n   \
    \ $max_number = $numbers[0];\n    for ($i = 1; $i < count($numbers); $i++) {\n\
    \        if ($numbers[$i] > $max_number) {\n            $max_number = $numbers[$i];\n\
    \        }\n    }\n    $numbers_copy = $numbers;\n    if ($max_number > 0) {\n\
    \        for ($i = 1; $i < count($numbers); $i++) {\n            $numbers_copy[$i]\
    \ = $numbers_copy[$i] + ($max_number - $numbers_copy[$i - 1]);\n        }\n  \
    \  }\n    return $numbers_copy;\n}", "    $max_value = $numbers[0];\n\n    //\
    \ Find the first value greater than max value\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] >= $max_value) {\n            $max_value =\
    \ $numbers[$i];\n        }\n    }\n\n    $rolling_max_array = array();\n    $max_index\
    \ = 0;\n    for ($i = 0; $i < count($numbers); $i++) {\n        if ($numbers[$i]\
    \ == $max_value) {\n            $rolling_max_array[] = $max_value;\n         \
    \   $max_index = $i;\n        }\n    }\n\n    return $rolling_max_array;\n}\n\
    </code>\n<|/ a tags=arrays,php,algorithm dscore=1 |>\n<| c |>\nFor large arrays\
    \ (say `1000000 items`), this method is more than 10 times slower than the built-in\
    \ PHP [max](http://php.net/manual/en/function.max.php) function. Your answer is\
    \ much more elegant.\n<|/ c |>\n<| a tags=arrays,php,algorithm |>\nIf you want\
    \ something that's \"more concise\", you can do the following:\n<code>\n$numbers\
    \ = [\n  1,\n  2,\n  3,\n  2,\n  3,\n  4,\n  2,\n  3,\n];\n\n$maxes = array_map(function($e){\n\
    \    return $e;\n}, $numbers);\n\n$maxes = array_merge($maxes, array_fill(0, count($numbers)+1,\
    \ 0));\n$maxes = array_merge($maxes, array_fill(0, count($numbers)+1, 0));\n\n\
    for($i=0;$i<count($numbers);$i++){\n    $maxes[$numbers[$i]][$i] = max($maxes[$numbers[$i]][$i],\
    \ $numbers[$i]);\n}\n\n$maxes = array_filter($maxes, function($e){\n    return\
    \ $e != 0;\n});\n</code>\nIt seems like this should work, even though it might\
    \ not be the most efficient way to accomplish it.\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nMy solution does exactly what you are looking for, using one array.\nIt\
    \ also gives you the ability to retrieve the original index values of the highest\
    \ numbers. \n<code>", "  // We need to calculate the rolling maximum, so we store\
    \ all the elements we're currently looking at.\n  $current = [];\n  // We want\
    \ to find the rolling maximum so the first step is to find the maximum.\n  $max\
    \ = max($numbers);\n  // Now let's go through all the numbers we have, and keep\
    \ track of where we are.\n  foreach ($numbers as $i => $number) {\n    if ($number\
    \ == $max) {\n      $current[$i] = $max;\n    } else {\n      $current[$i] = $number;\n\
    \    }\n  }\n  // Now we know where the current maximum is, so we can calculate\
    \ how much to add to it.\n  $increment = array_sum($current) - $max;\n  // And\
    \ now we know the increment we need to make, let's keep track of how much we need\
    \ to subtract.\n  $decrement = 0;\n  // Now we have to keep track of what was\
    \ the previous maximum.\n  $previousMax = $current[0];\n  // Let's start building\
    \ the rolling max array.\n  $rollingMax = array();\n  foreach ($current as $i\
    \ => $number) {\n    if ($number == $previousMax) {\n      $rollingMax[$i] = $previousMax\
    \ + $increment;\n    } else {\n      $rollingMax[$i] = $previousMax + $decrement;\n\
    \    }\n    $previousMax = $number;\n  }\n  return $rollingMax;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for the answer! But I'm sorry I don't understand how\
    \ it works, can you explain it please?\n<|/ c |>\n<| c |>\nI added some comments\
    \ and a better explanation for the code. I hope it helps!\n<|/ c |>\n<| a tags=php,arrays,max\
    \ dscore=3 |>\nYou could use an iterator to create an array containing the maximums\
    \ and then rewind the array back one element.\n<code>\n$array = [1,2,3,2,2,3,4,4,5,6,7,8,8,8,9,9];\n\
    $iterator = new LimitIterator(new ArrayIterator($array), 0, count($array) - 1);\n\
    $max = iterator_to_array($iterator, 2);\n\necho \"max: \" . $max[0] . \" max:\
    \ \" . $max[1];\n</code>\n<|/ a |>\n<| c |>\nThe iterator is really nice and simple!\n\
    <|/ c |>\n<| a |>\nFor a non-recursive solution based on array_slice and array_reverse:\n\
    <code>", "    $max_rolling_max_val = $numbers[0];\n\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] > $max_rolling_max_val) {\n            $max_rolling_max_val\
    \ = $numbers[$i];\n        }\n    }\n\n    return $max_rolling_max_val;\n}\n",
  "  $result = [];\n  $prev = null;\n  foreach ($numbers as $number) {\n    if ($number\
    \ == $prev) {\n      continue;\n    }\n    $result[] = $number;\n    $prev = $number;\n\
    \  }\n  return $result;\n}", "    \n    $max_element = array_shift($numbers);\n\
    \    \n    $last_index = count($numbers)-1;\n    \n    for ($i = 0; $i < $last_index;\
    \ $i++) {\n        if($numbers[$i] < $max_element) {\n            $max_element\
    \ = $numbers[$i];\n        }\n    }\n    \n    $numbers[] = $max_element;\n  \
    \  \n    return $numbers;\n}\n", "    if (count($numbers) < 2) {\n        return\
    \ $numbers;\n    }\n\n    // The size of the current array being inspected as\
    \ we move back in time\n    $size = count($numbers);\n\n    // The largest current\
    \ array we've seen so far\n    $max = null;\n    for ($i = 0; $i < $size; $i++)\
    \ {\n        if (null === $max) {\n            $max = $numbers[$i];\n        }\
    \ elseif ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n        }\n\
    \    }\n\n    return $max;\n}\n", "    $max_num = end($numbers);\n    return array_map(\n\
    \        function ($num) use ($max_num) {\n            return $num > $max_num\
    \ ? $num : $max_num;\n        },\n        array_chunk($numbers, ceil(count($numbers)\
    \ / 2))\n    );\n}\n</code>\n<|/ a tags=arrays,php dscore=1 |>\n<| a dscore=1\
    \ |>\nIf you don't want to use array_map or array_chunk or array_reduce, here's\
    \ a recursive solution using iterators in PHP. \nThis solution does not use array_map\
    \ or array_chunk and uses array_reduce instead.\n<code>", "\t$max = reset($numbers);\n\
    \tforeach ($numbers as $key => $value) {\n\t\tif ($value > $max) {\n\t\t\t$max\
    \ = $value;\n\t\t}\n\t}\n\treturn $max;\n}", "    return array_filter(\n     \
    \   $numbers,\n        function ($number) {\n            return $number != ''\
    \ && $number != null;\n        },\n        function ($number) {\n            return\
    \ $number >= max($numbers);\n        }\n    );\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\n`array_filter` isn't the right tool for this. A simple `foreach`\
    \ loop will do\n<|/ c |>\n<| c |>\nWhat do you mean by *doesn't work*? I tested\
    \ it before posting it and it worked.\n<|/ c |>\n<| c |>\n\"It doesn't work\"\
    \ doesn't help. Please explain what exactly is not working.\n<|/ c |>\n<| c |>\n\
    : Your code does not produce the expected results. You want `array(1, 2, 3, 3,\
    \ 3, 3, 4, 4)`\n<|/ c |>\n<| c |>\n`array_filter` returns a new array and not\
    \ `array(1, 2, 3, 3, 3, 3, 4, 4)` as OP expects\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>", "\t$current_min = array_shift($numbers);\n\t$result = [];\n\twhile\
    \ (count($numbers)) {\n\t\t$max = array_pop($numbers);\n\t\tif ($max == $current_min)\
    \ {\n\t\t\tarray_push($result, $max);\n\t\t} else {\n\t\t\t$result[] = $max;\n\
    \t\t}\n\t\t$current_min = $max;\n\t}\n\treturn $result;\n}\n", "    $max = array();\n\
    \    foreach($numbers as $number) {\n        $max[] = $number;\n    }\n    return\
    \ $max;\n}", "    $result = 0;\n\n    foreach ($numbers as $number) {\n      \
    \  $result = max($number, $result);\n    }\n\n    return $result;\n}\n", "  $numbers\
    \ = array_slice($numbers);\n  $max = null;\n  $max_index = null;\n  foreach ($numbers\
    \ as $i => $number) {\n    if ($number != $max) {\n      if ($max != null) $maxs[]\
    \ = $max;\n      $max = $number;\n      $max_index = $i;\n    } else if ($i ==\
    \ $max_index + 1) $maxs[] = $max;\n  }\n  return $maxs;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\n$array = array(1, 2, 3, 2, 3, 4, 2);\n$maxs = array();\n\
    foreach($array as $key => $val) {\n    $maxs[] = max($array, $key);\n}\nprint_r($maxs);\n\
    </code>\n<|/ a tags=php,arrays dscore=0 |>\n<| c |>\nThis answer is good, but\
    \ it does not seem to answer the question \"how to get maximum rolling max?\"\
    . The OP asked for the rolling max of consecutive elements (rolling max of 2,\
    \ 3, 2, 3, 4, 2).\n<|/ c |>\n<| a dscore=0 |>\nYou can use usort() with array_slice()\
    \ to sort a specific part of your array.\n<code>", "    if (!is_array($numbers))\
    \ {\n        $numbers = array($numbers);\n    }\n    $max = array();\n    for\
    \ ($i = 0; $i < count($numbers); ++$i) {\n        if ($numbers[$i] > $max[$i])\
    \ {\n            $max[$i] = $numbers[$i];\n        }\n    }\n    return $max;\n\
    }\n", "    if (count($numbers) < 2) {\n        return array();\n    }\n    $max_numbers\
    \ = array();\n    $max_index = 0;\n    $max_numbers[$max_index++] = max($numbers);\n\
    \    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] == $max_numbers[$max_index])\
    \ {\n            $max_numbers[$max_index++] = max($numbers, $i);\n        } else\
    \ {\n            $max_numbers[$max_index] = max($numbers);\n        }\n    }\n\
    \    return $max_numbers;\n}\n", "    $max_value = $numbers[0];\n    $rolling_max\
    \ = array();\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i]\
    \ > $max_value) {\n            $rolling_max[] = $max_value;\n            $max_value\
    \ = $numbers[$i];\n        } else {\n            $rolling_max[] = $numbers[$i];\n\
    \        }\n    }\n    $rolling_max[] = $max_value;\n    return $rolling_max;\n\
    }\n</code>\nAnd here is how to use it:\n<code>\n$rolling_max = rolling_max(array(1,\
    \ 2, 3, 2, 3, 4, 2));\n</code>\n<|/ a tags=php,algorithm dscore=1 |>\n<| a tags=php,algorithm\
    \ |>\nUse two for loops. One for going through all the elements in the array,\
    \ and the second for going from 1st element to the last element and checking if\
    \ it is greater than the previous one.\n<code>\n<?php", "    $rolling_max = null;\n\
    \    $rolling_max_index = 0;\n    $rolling_max_value = 0;\n    foreach($numbers\
    \ as $index => $value) {\n        if($rolling_max === null) {\n            $rolling_max\
    \ = $value;\n            $rolling_max_index = $index;\n            $rolling_max_value\
    \ = $rolling_max;\n            continue;\n        }\n        if($rolling_max >\
    \ $value) {\n            $rolling_max = $value;\n            $rolling_max_index\
    \ = $index;\n            $rolling_max_value = $rolling_max;\n        }\n    }\n\
    \    return array($rolling_max_index, $rolling_max_value);\n}\n", "    $max =\
    \ 0;\n    $index = count($numbers) - 1;\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        $value = $numbers[$i];\n        if ($value > $max) {\n    \
    \        $max = $value;\n            $index = $i;\n        }\n        if ($i ==\
    \ count($numbers) - 1) {\n            $max = max($max, $numbers[$index]);\n  \
    \      }\n    }\n    return $max;\n}", "  // Get the number of items to return.\n\
    \  $size = count($numbers);\n\n  // Sum each item in the array and store the sums.\n\
    \  $sums = array();\n  for ($i = 0; $i < $size; $i++) {\n    $sums[] = array_sum($numbers);\n\
    \    array_shift($numbers);\n  }\n\n  // Return the max of the sums.\n  return\
    \ array_reduce($sums, function($max, $sum) { return max($max, $sum); });\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThanks for this answer - I wish I had seen it before\
    \ I started implementing my solution!\n<|/ c |>\n<| a tags=php,algorithm,language-agnostic\
    \ |>\nThe question isn't very clear, but here's my interpretation:\n<code>\n<?php\n\
    $a = array(1,2,3,4,2);\n$b = array(2,3,5,3,5);\n$c = array(1,2,3);\n\n$s = array_sum($c);\n\
    echo \"The sum of the original array is $s\\n\";\n$s = array_sum($a);\necho \"\
    The sum of the original array is $s\\n\";\n$s = array_sum($b);\necho \"The sum\
    \ of the original array is $s\\n\";\n$s = array_sum($a);\necho \"The sum of the\
    \ original array is $s\\n\";\n$s = array_sum($b);\necho \"The sum of the original\
    \ array is $s\\n\";\n$s = array_sum($a);\necho \"The sum of the original array\
    \ is $s\\n\";\n$s = array_sum($b);\necho \"The sum of the original array is $s\\\
    n\";\n$s = array_sum($a);\necho \"The sum of the original array is $s\\n\";\n\
    $s = array_sum($b);\necho \"The sum of the original array is $s\\n\";\n$s = array_sum($a);\n\
    echo \"The sum of the original array is $s\\n\";\n$s = array_sum($b);\necho \"\
    The sum of the original array is $s\\n\";\n$s = array_sum($a);\necho \"The sum\
    \ of the original array is $s\\n\";\n$s = array_sum($b);\necho \"The sum of the\
    \ original array is $s\\n\";\n$s = array_sum($a);\necho \"The sum of the original\
    \ array is $s\\n\";\n$s = array_sum($b);\necho \"The sum of the original array\
    \ is $s\\n\";\n$s = array_sum($a);\necho \"The sum of the original array is $s\\\
    n\";\n$s = array_sum($b);\necho \"The sum of the original array is $s\\n\";\n\
    $s = array_sum($a);\necho \"The sum of the original array is $s\\n\";\n$s = array_sum($b);\n\
    echo \"The sum of the original array is $s", "  $max = -999999999;\n  $max_idx\
    \ = count($numbers) - 1;\n  for ($i = 0; $i < count($numbers); $i++) {\n    $current\
    \ = $numbers[$i];\n    if ($current > $max) {\n      $max = $current;\n      $max_idx\
    \ = $i;\n    }\n  }\n  return array('number' => $numbers[$max_idx], 'max' => $max);\n\
    }\n", "    return array_merge(\n        array_slice($numbers, 0, -1, true),\n\
    \        array(max($numbers)),\n        array_slice($numbers, -1, array_sum(count($numbers)))\n\
    \    );\n}\n", "  return array_reduce(\n    $numbers,\n    function ($result,\
    \ $current) {\n      if (isset($result[count($result)-1])) {\n        $result[count($result)-1]\
    \ = max($result[count($result)-1], $current);\n      } else {\n        $result[]\
    \ = $current;\n      }\n      return $result;\n    },\n    array()\n  );\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php |>\n<code>", "    foreach($numbers\
    \ as $key => $number) {\n        $numbers[$key] = array_merge([$number], $numbers);\n\
    \    }\n\n    for($i = count($numbers); $i >= 0; --$i) {\n        $numbers[$i]\
    \ = max($numbers[$i]);\n    }\n\n    return $numbers;\n}\n", "    $max = NULL;\n\
    \    $max_position = 0;\n\n    foreach ($numbers as $number => $position) {\n\
    \        if ($position > $max_position) {\n            $max_position = $position;\n\
    \            $max = $number;\n        }\n    }\n\n    return $max;\n}\n", "  \
    \  $result = array();\n    $max_element = array_shift($numbers);\n    $current_element\
    \ = $max_element;\n    while ($numbers) {\n        $current_element = max($numbers[0],\
    \ $current_element);\n        if ($current_element == $max_element) {\n      \
    \      $result[] = $max_element;\n        } else {\n            $result[] = $current_element;\n\
    \        }\n        $max_element = array_shift($numbers);\n    }\n    return $result;\n\
    }\n", "    $res = array();\n    foreach ($numbers as $number) {\n        $res[]\
    \ = $number;\n        if ($number > $res[count($res) - 1]) {\n            $res[count($res)\
    \ - 1] = $number;\n        }\n    }\n    return $res;\n}\n", "  $max_value = 0;\n\
    \  $max_index = 0;\n  foreach ($numbers as $k => $v) {\n    if ($v > $max_value)\
    \ {\n      $max_value = $v;\n      $max_index = $k;\n    }\n  }\n  return $numbers[$max_index];\n\
    }\n", "    $size = count($numbers);\n    $result = array();\n    for ($i = 0;\
    \ $i < $size; $i++) {\n        $result[$i] = max($numbers[$i], $result[$i]);\n\
    \    }\n    return $result;\n}\n", "    if (!is_array($numbers)) {\n        throw\
    \ new InvalidArgumentException('Given array is not an array');\n    }\n\n    if\
    \ (count($numbers) <= 0) {\n        return array();\n    }\n\n    $arrays = array();\n\
    \    $result   = array();\n\n    foreach ($numbers as $number) {\n        $array\
    \ = array();\n        array_push($array, $number);\n\n        while ($number >\
    \ 0) {\n            $number = $number - 1;\n            array_push($array, $number);\n\
    \        }\n\n        array_push($array, $number);\n        array_push($arrays,\
    \ $array);\n    }\n\n    foreach ($arrays as $array) {\n        $max = $array[0];\n\
    \        $index = 0;\n\n        foreach ($array as $number) {\n            if\
    \ ($number > $max) {\n                $max = $number;\n                $index\
    \ = $index;\n            }\n        }\n\n        array_push($result, $max, $index);\n\
    \    }\n\n    return $result;\n}\n", "    $result = [];\n    $current = array_shift($numbers);\n\
    \    foreach ($numbers as $number) {\n        if ($number == $current) {\n   \
    \         $result[] = $number;\n        } else {\n            $result[] = $current;\n\
    \            $current = $number;\n        }\n    }\n    $result[] = $current;\n\
    \    return $result;\n}\n", "    sort($numbers);\n    $max = array_shift($numbers);\n\
    \    $max = array_shift($numbers);\n    foreach ($numbers as $key => $number)\
    \ {\n        $current = $number > $max ? $number : $max;\n        $max = max($max,\
    \ $current);\n    }\n    return $max;\n}", "    $max = max($numbers);\n    $max_indexes\
    \ = array_keys($numbers, $max);\n    $max_indexes = $max_indexes[0];\n    $max_indexes\
    \ = array_slice($max_indexes, 0, count($numbers) - 1);\n    return $max;\n}\n",
  "\t$return = array();\n\tforeach ($numbers as $number) {\n\t\t$return[] = $number;\n\
    \t}\n\treturn $return;\n}\n", "    $size = sizeof($numbers);\n    $result = [];\n\
    \    for ($i = 0; $i < $size; ++$i) {\n        if ($i == 0) {\n            $result[$i]\
    \ = $numbers[$i];\n            continue;\n        }\n        $max = $numbers[$i];\n\
    \        for ($j = ($size - 1); $j > $i; --$j) {\n            if ($numbers[$j]\
    \ > $max) {\n                $max = $numbers[$j];\n            }\n        }\n\
    \        $result[$i] = $max;\n    }\n    return $result;\n}", "    $maxes = [];\n\
    \    $cur = 0;\n    foreach ($numbers as $number) {\n        if ($number > $cur)\
    \ {\n            $maxes[] = $number;\n            $cur = $number;\n        } else\
    \ {\n            $maxes[] = $cur;\n            $cur = $number;\n        }\n  \
    \  }\n    return $maxes;\n}\n", "    $largest = null;\n    $index = 0;\n    foreach\
    \ ($numbers as $number) {\n        if ($number > $largest) {\n            $largest\
    \ = $number;\n            $index = $number;\n        }\n    }\n    return array($largest,\
    \ $index);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nWhy do you return an array\
    \ with two elements? And why do you have `$index` there when you don't use it?\n\
    <|/ c |>\n<| a dscore=1 tags=php,arrays,sorting,loops |>\nMy attempt\n<code>\n\
    $arr=array(\n    array('value'=>2,1),\n    array('value'=>5,2),\n    array('value'=>1,1),\n\
    \    array('value'=>1,1),\n    array('value'=>4,3),\n    array('value'=>4,3),\n\
    \    array('value'=>5,3),\n    array('value'=>4,3),\n    array('value'=>3,3),\n\
    \    array('value'=>3,3),\n    array('value'=>6,2),\n    array('value'=>2,1),\n\
    \    array('value'=>5,1),\n    array('value'=>4,2),\n    array('value'=>4,2),\n\
    \    array('value'=>5,2),\n    array('value'=>4,2),\n    array('value'=>3,3),\n\
    \    array('value'=>3,3),\n    array('value'=>6,1),\n    array('value'=>6,1),\n\
    \    array('value'=>7,1)\n);\n\n$value=array();\n$index=array();\n$indexMax=array();\n\
    foreach ($arr as $k => $v) {\n    $value[]=$v['value'];\n    $index[]=$k+1;\n\
    }\n\n$i=1;\n$j=0;\n$k=(max($index)-1);\n$m=1;\n\n$j++;\n$k--;\n\nwhile ($j<$k){\n\
    \    $i=0;\n    while ($i<$k){\n        $value[$i+$j]=$value[$i];\n        $index[$i+$j]=-1;\n\
    \        $i++;\n    }\n    $j++;\n}\n\n$value=array_fill(0,max($index),$value[0]);\n\
    $index=array_fill(0,max($index),$index[0]);\n$value=array_filter($value,'strlen');\n\
    $index=array_filter($index,'strlen');\n$value=array_filter($value,'strlen');\n\
    \n$j=0;\nforeach ($index as $v){\n    while ($j<$v){\n        $value[$j+$index[$v",
  "\t$max_element = array();\n\tforeach($numbers as $number) {\n\t\t$max_element[$number]\
    \ = $number;\n\t}\n\t\n\tfor($i = 1; $i < count($numbers); $i++) {\n\t\tfor($j\
    \ = count($max_element); $j > 0; $j--) {\n\t\t\tif($numbers[$i] == $max_element[$j])\
    \ {\n\t\t\t\t$max_element[$j] = $max_element[$j - 1];\n\t\t\t} else {\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn $max_element;\n}", "    $rolling_max\
    \ = null;\n    foreach ($numbers as $number)\n        if ($rolling_max === null)\
    \ {\n            $rolling_max = $number;\n        } else {\n            $rolling_max\
    \ = max($rolling_max, $number);\n        }\n    return $rolling_max;\n}\n", " \
    \ $max = reset($numbers);\n  foreach ($numbers as $number) {\n    if ($number\
    \ > $max) {\n      $max = $number;\n    }\n  }\n  return $max;\n}\n", "  $max_value\
    \ = array_shift($numbers);\n  $max_key = 0;\n\n  foreach ($numbers as $key =>\
    \ $value) {\n    if ($value > $max_value) {\n      $max_value = $value;\n    \
    \  $max_key = $key;\n    }\n  }\n\n  return array_slice($numbers, $max_key);\n\
    }", "  $results = array();\n  $current_max = reset($numbers);\n  $current_max\
    \ = max($current_max);\n\n  foreach ($numbers as $number) {\n    if ($number >\
    \ $current_max) {\n      $results[] = $current_max;\n      $current_max = $number;\n\
    \    } else {\n      $current_max = $number;\n    }\n  }\n\n  $results[] = $current_max;\n\
    \n  return $results;\n}\n", "    $result = array();\n    $max = -999999999;\n\
    \    foreach ($numbers as $number) {\n        if ($number > $max) {\n        \
    \    $result = array($number);\n            $max = $number;\n        } elseif\
    \ ($number == $max) {\n            $result[] = $number;\n        } else {\n  \
    \          $result[] = $max;\n            $max = $number;\n        }\n    }\n\
    \    return $result;\n}\n", "    $max = array_shift($numbers);\n    foreach ($numbers\
    \ as $number) {\n        if ($number > $max) {\n            $max = $number;\n\
    \        }\n    }\n    return $max;\n}\n", "    if (count($numbers) < 2) return\
    \ $numbers;\n    $max_index = count($numbers) - 1;\n    $rollingMax = array($numbers[0]);\n\
    \    $numbers[$max_index] = $numbers[$max_index] + 1;\n\n    for ($index = 1;\
    \ $index <= $max_index; $index++) {\n        if ($numbers[$index] > $numbers[$max_index])\
    \ {\n            $rollingMax[] = $numbers[$index];\n            $numbers[$index]\
    \ = $numbers[$max_index] + 1;\n            $numbers[$max_index] = $numbers[$max_index]\
    \ - 1;\n        } else {\n            $numbers[$index] = $numbers[$index] - 1;\n\
    \        }\n    }\n\n    $rollingMax[] = $numbers[$max_index];\n    return $rollingMax;\n\
    }\n", "    $max = end($numbers);\n    $numbers_copy = array();\n    foreach ($numbers\
    \ as $number) {\n        if ($number > $max) {\n            $numbers_copy[] =\
    \ $max;\n            $max = $number;\n        } else {\n            $max = $number;\n\
    \        }\n    }\n    $numbers_copy[] = $max;\n    return $numbers_copy;\n}\n",
  "    $max = reset($numbers);\n    foreach ($numbers as $item) {\n        if ($item\
    \ > $max) {\n            $max = $item;\n        }\n    }\n    return $max;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThe OP asked for a php solution, not Javascript.\n\
    <|/ c |>\n<| c |>\nThe question was tagged with php so I was giving him a php\
    \ solution. If he is looking for another language in another question, this answer\
    \ should be the way to go\n<|/ c |>\n<| c |>\nSorry, but this answer is only showing\
    \ how to write the algorithm, but not how to implement it in PHP. If you would\
    \ have pointed it out, I would have voted it up.\n<|/ c |>\n<| c |>\n: I was thinking\
    \ about it, but you already got my upvote. :)\n<|/ c |>\n<| a tags=algorithm,php\
    \ |>\nThe problem is quite simple and easy to solve using just arrays and functions.\
    \ It is very easy, because you can use the modulus operator to find the index\
    \ of the number you need, that is the position of the max element.\n<code>\n<?php\n\
    $array = [1, 2, 3, 2, 2, 3, 3, 4];\n$max = max($array);\n$maxIndex = 0;\nfor ($i\
    \ = 0; $i < count($array); $i++) {\n    if ($array[$i] == $max) {\n        $maxIndex\
    \ = $i;\n        break;\n    }\n}\n$maxIndex = ($maxIndex * -1) + 1; // this line\
    \ is not necessary, but I added it for clarification\n$newArray = array_slice($array,\
    \ 0, $maxIndex);\nprint_r($newArray);\n</code>\nAnd this is the output:\n<code>\n\
    Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 3\n    [4] => 3\n\
    )\n</code>\nThe code is also very simple but you need to know how to use the modulus\
    \ operator. Here is another way of doing it, using functions:\n<code>\n<?php",
  "    $max = $numbers[0];\n    $maxIndex = 0;\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n\
    \            $maxIndex = $i;\n        }\n    }\n    return array_slice($numbers,\
    \ 0, $maxIndex + 1);\n}\n", "    if (count($numbers) < 2) return $numbers;\n \
    \   $max = $numbers[0];\n    for ($i = 0; $i < count($numbers); $i++) {\n    \
    \    if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n        }\n\
    \    }\n    return $max;\n}\n</code>\n<|/ a dscore=4 tags=php,algorithm |>\n<|\
    \ c |>\nThank you. I also came across this in the PHP documentation, though didn't\
    \ look too much into it. Will take a look at it.\n<|/ c |>\n<| c |>\nThis is called\
    \ \"windowing\", which you should be able to Google for.\n<|/ c |>\n<| c |>\n\
    I've added a comment about the efficiency of `array_filter`. Although `array_filter`\
    \ seems quite a big win, I can't really say why.\n<|/ c |>\n<| c |>\n: I added\
    \ some test cases to show that `array_filter` will run slightly faster on larger\
    \ arrays. I'm guessing that's because its less function calls.\n<|/ c |>\n<| c\
    \ |>\nI ran a test on array_filter and it seems to have about the same speed as\
    \ using array_reduce. My tests consisted of doing a for loop and calling array_filter\
    \ 5 times. Here is a link to the results: http://jasonjl.me/blog/2012/06/testing-array_filter-vs-array_reduce.html\n\
    <|/ c |>\n<| a dscore=4 |>\nI suggest that you have an array of $n numbers and\
    \ you wish to find the highest rolling value from that array. \nIf that is the\
    \ case, you can make use of array_walk to keep a running tally of numbers that\
    \ are greater than the highest value in the array.\n<code>", "    $result = [];\n\
    \    foreach ($numbers as $i => $number) {\n        $result[$i] = $number;\n \
    \       $result[$i - 1] = $number > $result[$i] ? $result[$i] : $result[$i - 1];\n\
    \    }\n    return $result;\n}\n", "    $max_value = $numbers[0];\n    $max_index\
    \ = 0;\n    $current_index = 0;\n    $current_value = 0;\n    for ($i = 1; $i\
    \ < count($numbers); $i++) {\n        if ($numbers[$i] > $current_value) {\n \
    \           $current_value = $numbers[$i];\n            $current_index = $i;\n\
    \        }\n\n        if ($current_value === $max_value) {\n            $max_value\
    \ = $current_value;\n            $max_index = $current_index;\n        }\n   \
    \ }\n\n    $array_roll = array_slice($numbers, $max_index, $max_index + count($numbers)\
    \ - $max_index);\n    return $array_roll;\n}", "  list($max_val, $max_idx) = $numbers;\n\
    \  foreach ($numbers as $key => $value) {\n    if ($value > $max_val) $max_val\
    \ = $value;\n    if ($value == $max_val) $max_idx = $key;\n  }\n  return array($max_val,\
    \ $max_idx);\n}", "    $output = [];\n    foreach($numbers as $num) {\n      \
    \  $output[] = $num;\n    }\n    return $output;\n}", "    $max = -INF;\n    $max_idx\
    \ = 0;\n    $found = false;\n    for ($i = 1; $i < count($numbers); $i++) {\n\
    \        if (!$found) {\n            $found = true;\n            $max = $numbers[$i];\n\
    \            $max_idx = $i;\n        } elseif ($numbers[$i] >= $max) {\n     \
    \       $found = false;\n            $max = $numbers[$i];\n            $max_idx\
    \ = $i;\n        } else {\n            $max = $numbers[$i];\n        }\n    }\n\
    \    return array($numbers[$max_idx], $max_idx, $found);\n}\n", "  $rolling =\
    \ array();\n  $max_val = null;\n  foreach ($numbers as $n) {\n    if ($n < $max_val)\
    \ {\n      $rolling[] = $n;\n    } else {\n      $max_val = $n;\n      $rolling[]\
    \ = $max_val;\n    }\n  }\n  return $rolling;\n}", "    $max = NULL;\n    $result\
    \ = array();\n\n    foreach ($numbers as $key => $value) {\n        $result[$key]\
    \ = $max;\n        if ($max === NULL) $max = $value;\n        else if ($max <\
    \ $value) $max = $value;\n    }\n\n    return $result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI think you misunderstood. I'm looking for a function that returns\
    \ an array which contains all elements from the original array that are bigger\
    \ than the one passed as argument\n<|/ c |>\n<| c |>\nIt returns an array that\
    \ contains all elements from the original array that are bigger than the one passed\
    \ as argument\n<|/ c |>\n<| c |>\nApologies, I misunderstood. You were asking\
    \ for an efficient way to get all the maximum elements up to a given moment. I\
    \ edited my answer.\n<|/ c |>\n<| a dscore=0 |>\nTry this - It will get all maximum\
    \ (largest) elements from a given array:\n<code>", "\t$result = array();\n\tforeach($numbers\
    \ as $number) {\n\t\t$tmp = array();\n\t\t$result[] = $number;\n\t\tfor($i=0;$i<count($numbers);$i++)\
    \ {\n\t\t\tif ($numbers[$i] >= $number) {\n\t\t\t\t$tmp[] = $numbers[$i];\n\t\t\
    \t}\n\t\t}\n\t\t$result = $tmp;\n\t}\n\treturn $result;\n}\n", "    $result =\
    \ [];\n    for ($i = 1; $i < count($numbers); $i++) {\n        $max = $numbers[$i\
    \ - 1];\n        $element = $numbers[$i];\n        for ($j = 1; $j < $i; $j++)\
    \ {\n            if ($numbers[$j] > $max) {\n                $max = $numbers[$j];\n\
    \                $element = $numbers[$j];\n            }\n        }\n        $result[]\
    \ = $element;\n    }\n    return $result;\n}\n", "    $result = [];\n    $rollingMax\
    \ = FALSE;\n    foreach ($numbers as $number) {\n        // Stop processing if\
    \ the given number is less than the current rolling max\n        if ($number >\
    \ $rollingMax) {\n            $result[] = $rollingMax;\n            $rollingMax\
    \ = $number;\n        } else {\n            // Increment the rolling max and continue\
    \ processing the rest of the array if necessary\n            $rollingMax = max($rollingMax,\
    \ $number);\n        }\n    }\n    // Add the final rolling max\n    $result[]\
    \ = $rollingMax;\n    return $result;\n}\n", "    return array_map(function ($number)\
    \ use ($numbers) {\n        return max($numbers);\n    }, array_chunk($numbers,\
    \ ceil(count($numbers) / 2)));\n}\n", "    $max_values = array();\n    foreach\
    \ ($numbers as $number => $key) {\n        $max_values[$number] = max($max_values[$number],\
    \ $key);\n    }\n    return $max_values;\n}", "\t$max = $numbers[0];\n\tforeach\
    \ ($numbers as $number) {\n\t\tif ($number > $max) {\n\t\t\t$max = $number;\n\t\
    \t}\n\t}\n\treturn array($max);\n}", "  $highest = array();\n  $count    = 0;\n\
    \  foreach ($numbers as $number) {\n    if ($number >= $count) {\n      $highest[]\
    \ = $number;\n      $count = $number + 1;\n    } else {\n      $count = $number;\n\
    \    }\n  }\n  return $highest;\n}", "    $result = [];\n    $previous = null;\n\
    \    foreach ($numbers as $index => $value) {\n        if ($value === $previous)\
    \ {\n            $result[] = $value;\n            continue;\n        }\n\n   \
    \     $result[] = $previous;\n        $previous = $value;\n    }\n\n    return\
    \ $result;\n}\n", "    $result = [];\n    $max = $numbers[0];\n    foreach ($numbers\
    \ as $number) {\n        if ($number > $max) {\n            $max = $number;\n\
    \        }\n        $result[] = $max;\n    }\n    return $result;\n}\n", "   \
    \ $rollingMax = array();\n    $current = 0;\n    $max = 0;\n    $maxIndex = 0;\n\
    \    foreach ($numbers as $number => $i) {\n        if ($i == $max) {\n      \
    \      $maxIndex++;\n            $rollingMax[$maxIndex] = $number;\n         \
    \   $current = $number;\n        } elseif ($i > $current) {\n            $rollingMax[$maxIndex]\
    \ = $max;\n            $max = $i;\n            $maxIndex = 0;\n        }\n   \
    \ }\n    $rollingMax[$maxIndex] = $max;\n    return $rollingMax;\n}", "    $result\
    \ = [];\n    $prev = null;\n    $number = null;\n    foreach ($numbers as $i =>\
    \ $number) {\n        // If number is less than previous number, replace it\n\
    \        if ($number < $prev) {\n            $result[$i] = $number;\n        }\n\
    \        // If number is greater than previous number, replace it\n        elseif\
    \ ($number > $prev) {\n            $result[$i] = $prev;\n        }\n        //\
    \ If number is the same as previous number, add it to the result\n        elseif\
    \ ($number == $prev) {\n            $result[$i] = $prev;\n        }\n        //\
    \ If there is no previous number yet, just add this number\n        else {\n \
    \           $result[$i] = $number;\n        }\n        // Update previous number\n\
    \        $prev = $number;\n    }\n    return $result;\n}\n", "  return array_reduce($numbers,\
    \ function ($result, $item) {\n    return $item > $result ? $item : $result;\n\
    \  });\n}\n", "    $rolling_max = null;\n    foreach($numbers as $num){\n    \
    \    if(!isset($rolling_max) || $rolling_max[0] > $num) {\n            $rolling_max\
    \ = $num;\n        }\n    }\n    return $rolling_max;\n}", "    $max_number =\
    \ $numbers[0];\n    $max_number_count = 1;\n    $rolling_max = array();\n\n  \
    \  foreach ($numbers as $number) {\n        if ($number > $max_number) {\n   \
    \         $max_number = $number;\n            $max_number_count = 1;\n       \
    \ } else {\n            $max_number_count++;\n        }\n\n        $rolling_max[]\
    \ = $max_number;\n    }\n\n    return $rolling_max;\n}\n", "    $array = [];\n\
    \    foreach ($numbers as $k => $v) {\n        if ($v > $array[$k]) $array[$k]\
    \ = $v;\n    }\n    return $array;\n}", "    sort($numbers);\n    $result = $numbers[0];\n\
    \    $max = $numbers[0];\n    $count = 1;\n\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n\
    \        }\n    }\n\n    for ($i = 1; $i < count($numbers); $i++) {\n        if\
    \ ($numbers[$i] == $max) {\n            $count++;\n        } else {\n        \
    \    $result = array($count, $result);\n            $max = $numbers[$i];\n   \
    \         $count = 1;\n        }\n    }\n\n    $result = array($count, $result);\n\
    \    return $result;\n}\n", "    return array_merge(array_slice($numbers, 0, -1),\
    \ array_slice($numbers, -1));\n}\n", "    $maximum = array();\n    $index = 0;\n\
    \    $highest_value = $numbers[0];\n    $highest_index = -1;\n    $highest_index\
    \ = $index;\n\n    // Find out whether the $numbers array is sorted ascending\n\
    \    $sorted_asc = !($numbers[0] < $numbers[1]);\n\n    // Search for the highest\
    \ value in the array\n    for($i = 0; $i < count($numbers); $i++) {\n        if($numbers[$i]\
    \ > $highest_value) {\n            $highest_value = $numbers[$i];\n          \
    \  $highest_index = $i;\n        }\n    }\n\n    // Calculate number of increments\
    \ in case $numbers is not sorted\n    $number_of_values = count($numbers) - 1;\n\
    \n    // If the highest value is not in the middle of the array\n    if($highest_index\
    \ != $number_of_values) {\n        // Calculate the number of increments needed\
    \ to move from highest value to lowest value\n        $rolling_max_increments\
    \ = ceil(($number_of_values - $highest_index) / 2);\n\n        // Calculate the\
    \ max values at the start of the array\n        for($i = 0; $i < $rolling_max_increments;\
    \ $i++) {\n            $maximum[] = $highest_value;\n        }\n\n        // Calculate\
    \ the max values at the end of the array\n        for($i = $rolling_max_increments;\
    \ $i < $number_of_values; $i++) {\n            $maximum[] = $numbers[$highest_index];\n\
    \        }\n    }\n\n    // If the highest value is in the middle of the array\n\
    \    else{\n        // Calculate the number of increments needed to move from\
    \ highest value to lowest value\n        $rolling_max_increments = ceil(($highest_index\
    \ - $number_of_values) / 2);\n\n        // Calculate the max values at the start\
    \ of the array\n        for($i = 0; $i < $rolling_max_increments; $i++) {\n  \
    \          $maximum[] = $highest_value;\n        }\n\n        // Calculate the\
    \ max values at the end of the array\n        for($i = $rolling_max_increments;\
    \ $i < $highest_index; $i++) {\n            $maximum[] = $numbers[$highest_index];\n\
    \        }\n    }\n\n    // If the array is sorted ascending\n    if($sorted_asc)\
    \ {\n        $maximum = array_reverse($maximum);\n    }\n\n    return $maximum;\n\
    }", "    $result = array();\n    foreach ($numbers as $number) {\n        if (is_null($number))\
    \ {\n            continue;\n        }\n\n        if (count($result) == 0) {\n\
    \            $result[] = $number;\n            continue;\n        }\n\n      \
    \  if ($number > array_pop($result)) {\n            $result[] = $number;\n   \
    \     }\n    }\n    return $result;\n}\n\n/**\n * Generate an array of rolling\
    \ minimum element found until given moment in the sequence.\n * >>> rolling_min(array(1,\
    \ 2, 3, 2, 3, 4, 2))\n * array(2, 1, 2, 2, 2, 3, 2)\n */", "    $numbers_count\
    \ = count($numbers);\n    $max = $numbers[0];\n    for ($i = 1; $i < $numbers_count;\
    \ $i++) {\n        if ($numbers[$i] >= $max) {\n            $max = $numbers[$i];\n\
    \        }\n    }\n    return $max;\n}\n", "    if (count($numbers) < 2) return\
    \ $numbers;\n    $max_number = 0;\n    $max_index = 0;\n    for ($i = 0; $i <\
    \ count($numbers); $i++) {\n        if ($numbers[$i] > $max_number) {\n      \
    \      $max_number = $numbers[$i];\n            $max_index = $i;\n        }\n\
    \    }\n    return array_merge(\n        array($max_number),\n        rolling_max(array_slice($numbers,\
    \ 0, $max_index - 1))\n    );\n}\n", "\t$max_element = array();\n\tfor ($i = 0;\
    \ $i < sizeof($numbers); $i++) {\n\t\t$max_element[$i] = max($numbers[$i]);\n\t\
    }\n\n\treturn $max_element;\n}\n", "    // Create a list of all possible max values\
    \ from the input array\n    $max_elements = array();\n    foreach ($numbers as\
    \ $number) {\n        $max_elements[] = $number;\n    }\n\n    $current_max =\
    \ 0;\n    $current_maxKey = null;\n    foreach ($max_elements as $key => $value)\
    \ {\n        $current_max += $value;\n        if ($current_max > $numbers[$key])\
    \ {\n            $current_maxKey = $key;\n        }\n    }\n\n    return $numbers[$current_maxKey];\n\
    }\n", "    $max_val = $numbers[0];\n    $max_elem = null;\n    foreach($numbers\
    \ as $val) {\n        if ($val > $max_val) {\n            $max_val = $val;\n \
    \           $max_elem = $max_val;\n        }\n    }\n    return array($max_elem,\
    \ $max_val);\n}\n", "    $max_value = $numbers[0];\n    $max_index = 0;\n    $max_index2\
    \ = 0;\n    foreach ($numbers as $key => $value) {\n        if ($value > $max_value)\
    \ {\n            $max_value = $value;\n            $max_index = $key;\n      \
    \  }\n        $max_index2++;\n    }\n    return array($max_value, $max_index,\
    \ $max_index2);\n}\n", "    $max = array_reduce($numbers, function($carry, $num)\
    \ {\n        if ($num > $carry) return $num;\n        return $carry;\n    });\n\
    \    return array_values($numbers);\n}\n", "    $n = sizeof($numbers);\n    $max_num\
    \ = $numbers[0];\n    $max_nums = array();\n    for ($i = 1; $i < $n; $i++) {\n\
    \        if ($numbers[$i] >= $max_num) {\n            $max_num = $numbers[$i];\n\
    \            $max_nums[] = $max_num;\n        }\n    }\n    return $max_nums;\n\
    }", "\t$result = [];\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\t$result[$i]\
    \ = max($numbers[$i]);\n\t}\n\treturn $result;\n}\n", "    $result = [];\n   \
    \ $sum = 0;\n    $length = 0;\n    foreach ($numbers as $number) {\n        ++$length;\n\
    \        if ($length > 5) {\n            $sum = 0;\n            $length = 0;\n\
    \        }\n        if ($length > 0) {\n            $sum += $number;\n       \
    \ }\n        if ($sum > $number) {\n            $sum = $number;\n        }\n \
    \       $result[] = $sum;\n    }\n    return $result;\n}\n\n$x = [1, 2, 3, 2,\
    \ 3, 2, 3, 2];\n$y = rolling_max($x);\necho '<pre>' . print_r($y, 1) . '</pre>';\n\
    </code>\nOutput:\n<code>\nArray\n(\n    [0] => 1\n    [1] => 3\n    [2] => 3\n\
    \    [3] => 4\n    [4] => 4\n    [5] => 4\n)\n</code>\nDemo.\n<|/ a tags=algorithm,php\
    \ |>\n<| a tags=algorithm,php |>\nYou can use array_sum in combination with array_slice.\
    \ After that, you get the sum of the values till the current index and subtract\
    \ the sum of values till the current index from the sum of the values till the\
    \ previous index.\n<code>\n$array = [1, 2, 3, 2, 3, 2, 3, 2];\n$sum = 0;\n$max\
    \ = [];\n$n = 1;\n\nfor ($i = count($array) - 1; $i > 0; $i--) {\n    $sum +=\
    \ $array[$i];\n    if ($sum > $array[$i]) {\n        $sum = $array[$i];\n    \
    \    $max[$i] = $sum - $sum;\n    }\n    else {\n        $max[$i] = $sum;\n  \
    \  }\n}\n\nprint_r($max);\n</code>\nThe output obviously is:\n<code>\nArray\n\
    (\n    [0] => 1\n    [1] => 3\n    [2] => 3\n    [3] => 4\n    [4] => 4\n    [5]\
    \ => 4\n)\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 tags=algorithm,php |>\n<code>\n\
    <?php\n$numbers = [1, 2, 3, 2, 3, 2, 3, 2];\n\n$newNumbers = [];\n$sum = 0;\n\
    foreach ($numbers as $key => $value) {\n    if($sum > $value) {\n        $sum\
    \ = $value;\n    }\n    $newNumbers[$key] = $sum - $value;\n}\n\nvar_dump($newNumbers);\n\
    </code>\n<|/ a |>\n<| c |>\nCode only answers are discouraged. Please consider\
    \ adding some explanation as to why this solves the issue.\n<|/ c |>\n<| c |>\n\
    Sorry, I forgot to explain that\n<|/ c |>\n<| c ", "    $max = reset($numbers);\n\
    \    foreach ($numbers as $number) {\n        if ($number > $max) {\n        \
    \    $max = $number;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a dscore=4\
    \ tags=max,arrays,php |>\n<| c |>\nThis code doesn't work if there are duplicates\
    \ in the array.\n<|/ c |>\n<| a tags=max,arrays,php dscore=3 |>\nIf you do not\
    \ want to use a loop you can use array_map in combination with max:\n<code>\n\
    $arr = array_map(function($a) { return max($a); }, $arr);\n</code>\nThe function\
    \ will return the max value from the array.\n<|/ a |>\n<| c |>\nThe `array_map`\
    \ solution only works for PHP versions prior to 5.3. See http://stackoverflow.com/questions/3341176/php-5-2-3-array-map-callback-not-working-with-class-method\n\
    <|/ c |>\n<| a |>\n<code>\n$numbers = array(1,2,3,4,5);\nrsort($numbers);\n$numbers[]\
    \ = max($numbers);\n</code>\n<|/ a tags=max,arrays,php dscore=2 |>\n<| c |>\n\
    I do not believe this will work, try running it with an array: array(-1, 1, 2,\
    \ 3, 4)\n<|/ c |>\n<| c |>\n: no, it won't.\n<|/ c |>\n<| c |>\nI didn't try it,\
    \ but it seems plausible.  What if I sort the array in descending order, do the\
    \ same as above, and then reverse the order of the elements?  Does this make any\
    \ sense whatsoever?  I do not believe it does though, I don't think it would be\
    \ any different than my solution.\n<|/ c |>\n<| c |>\n: No, that's not what the\
    \ OP wants. That would return `2`, which is not the maximum value that `rsort()`\
    \ returns.\n<|/ c |>\n<| c |>\nOhh I see now, my mistake.  Well then this solution\
    \ isn't what OP needs.\n<|/ c |>\n<| a tags=max,arrays,php dscore=2 |>\n<code>\n\
    <?php\n$numbers = array(1, 2, 3, 4, 5);\n$max = 0;\n$max = max($numbers);\necho\
    \ $max;", "    return array_map(function($number){\n        return max($number);\n\
    \    }, $numbers);\n}\n", "    $result = [];\n    $i = 0;\n    foreach ($numbers\
    \ as $num) {\n        $result[$i] = max($num, $result[$i]);\n        $i++;\n \
    \   }\n    return $result;\n}", "  $max = $numbers[0];\n  $max_index = -1;\n\n\
    \  for ($i = 1; $i < count($numbers); $i++) {\n    if ($numbers[$i] > $max) {\n\
    \      $max = $numbers[$i];\n      $max_index = $i;\n    }\n  }\n\n  return $max_index;\n\
    }\n", "    // Start with an array of 0s\n    $maxes = array_fill(0, count($numbers),\
    \ 0);\n    // Walk through the array and increment the max value for each element\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        $maxes[$i] += $numbers[$i];\n\
    \    }\n\n    // Return the array of rolling max values\n    return $maxes;\n\
    }\n", "    if (empty($numbers)) {\n        return array();\n    }\n    $result\
    \ = array();\n    $length = count($numbers);\n    $numbers[$length - 1] = 0;\n\
    \    $index = $length - 2;\n    $numbers[$index] = $numbers[$length - 1];\n  \
    \  while ($index !== 0) {\n        ++$index;\n        $numbers[$index] = $numbers[$index\
    \ - 1];\n    }\n    while ($numbers[$length - 1] === $numbers[$index]) {\n   \
    \     --$index;\n        --$numbers[$index];\n    }\n    array_splice($numbers,\
    \ $index, 1);\n    $length = count($numbers);\n    for ($i = 0; $i < $length;\
    \ ++$i) {\n        $result[] = $numbers[$i];\n    }\n    return $result;\n}\n",
  "  $max = null;\n  $last_num = null;\n  foreach ($numbers as $num) {\n    if ($num\
    \ != $last_num) {\n      $last_num = $num;\n      if ($num > $max) {\n       \
    \ $max = $num;\n      }\n    }\n  }\n  return $max;\n}\n", "  $size = count($numbers);\n\
    \  for ($i = 1; $i < $size; $i++) {\n    $numbers[$i] = max($numbers[$i], $numbers[$i\
    \ - 1]);\n  }\n  return $numbers;\n}", "    $max_number = null;\n    $max_index\
    \ = -1;\n    for ($i = 0; $i < count($numbers); $i++) {\n        if ($max_number\
    \ === null) {\n            $max_number = $numbers[$i];\n            $max_index\
    \ = $i;\n        } else if ($numbers[$i] > $max_number) {\n            $max_number\
    \ = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return\
    \ array($max_number, $max_index);\n}\n</code>\n<|/ a tags=php dscore=2 |>\n<|\
    \ a |>\nHere's a solution using array_walk, which makes use of array_search to\
    \ find the current max index, and max() to find the current max. \n<code>\n$arr\
    \ = [1, 5, 6, 8, 3, 7, 4];\n\narray_walk($arr, function(&$val, $key){\n    if\
    \ ($val > max($arr)){\n        $val = max($arr);\n        $key = $key;\n    }\n\
    });\n\necho \"Max is at key $key. Value is $val\";\n</code>\n<|/ a dscore=2 tags=php\
    \ |>\n<| a dscore=1 tags=php |>\nHere is a version using array_reduce. With this\
    \ version you also can get the max number and the key of the max number.\n<code>\n\
    $arr = [1, 5, 6, 8, 3, 7, 4];\n\n$maxKey = array_reduce($arr, function($carry,\
    \ $item, $key) use (&$maxKey) {\n    if ($carry['max'] > $item) {\n        $carry['max']\
    \ = $item;\n        $carry['key'] = $key;\n    }\n    return $carry;\n}, array('max'\
    \ => 0, 'key' => -1));\n\necho \"Max number is: {$maxKey['max']}. Key is: {$maxKey['key']}\"\
    ;\n</code>\n<|/ a |>\n<| a dscore=1 |>\nAnother possible solution:\n<code>\n$arr\
    \ = [1, 5, 6, 8, 3, 7, 4];\n\n$max = array_reduce($arr, 'max', 0);\n\n$key = array_search($max,\
    \ $arr);\n\necho \"Max number is \" . $max . \". Key is \" . $key;\n", "    $result\
    \ = [];\n    $max = $numbers[0];\n    foreach ($numbers as $number) {\n      \
    \  if ($number > $max) {\n            $max = $number;\n        }\n    }\n    array_push($result,\
    \ $max);\n    while ($numbers && $numbers[0] < $max) {\n        $numbers[array_shift($numbers)]\
    \ = $max;\n        array_push($result, $max);\n    }\n    return $result;\n}\n",
  "\tif (!$numbers) {\n\t\treturn;\n\t}\n\n\tsort($numbers);\n\n\t$max_value = $numbers[0];\n\
    \t$first_max_element = array_shift($numbers);\n\tfor ($i = 1; $i < count($numbers);\
    \ $i++) {\n\t\tif ($numbers[$i] > $max_value) {\n\t\t\t$max_value = $numbers[$i];\n\
    \t\t\t$first_max_element = $i;\n\t\t}\n\t}\n\treturn array_slice($numbers, $first_max_element);\n\
    }", "    // Prepare output\n    $result = array();\n    $found = false;\n\n  \
    \  // Loop for all given numbers\n    foreach($numbers as $number) {\n       \
    \ // Check if we need to add this value to output\n        if ($number != $found)\
    \ {\n            // If not yet found, add it to the output and set as $found for\
    \ next check\n            $result[] = $number;\n            $found = $number;\n\
    \        }\n    }\n\n    return $result;\n}\n", "  $result = array();\n  $rolling_max\
    \ = array();\n  foreach ($numbers as $number) {\n    if (!is_int($number)) {\n\
    \      return $result;\n    }\n    if (!isset($rolling_max[$number])) {\n    \
    \  $rolling_max[$number] = $number;\n      $result[] = $number;\n    }\n    else\
    \ {\n      $rolling_max[$number] = max($rolling_max[$number], $number);\n    \
    \  $result[] = $rolling_max[$number];\n    }\n  }\n  return $result;\n}\n", " \
    \   if (count($numbers) < 2) {\n        throw new Exception('At least 2 elements\
    \ should be passed to rolling_max()');\n    }\n\n    $result = [];\n\n    $result[]\
    \ = array_shift($numbers);\n    $result[] = array_shift($numbers);\n\n    foreach\
    \ ($numbers as $number) {\n        if ($number >= $result[0]) {\n            $result[]\
    \ = $number;\n        }\n    }\n\n    return $result;\n}\n</code>\nIt should work\
    \ with any type of collection and any size of array.\n<|/ a tags=php,arrays |>\n\
    <| a dscore=3 |>\nThis is a very simple and easy to understand solution:\n<code>",
  "    return array_map(function ($value, $i) use ($numbers) {\n        return max($value,\
    \ array_pop($numbers));\n    }, array_chunk(array_map(function ($value, $i) {\n\
    \        return $value;\n    }, $numbers), count($numbers)), range(0, count($numbers)\
    \ - 1));\n}\n</code>\nAnd here is the PHP script that will calculate the rolling\
    \ average.\n<code>\n<?php", "    if (count($numbers) < 2) {\n        return $numbers;\n\
    \    }\n\n    $max_number = array_shift($numbers);\n    $max_number = max($max_number,\
    \ $numbers[0]);\n\n    $result = array();\n    foreach ($numbers as $n) {\n  \
    \      if ($n >= $max_number) {\n            $result[] = $max_number;\n      \
    \      $max_number = $n;\n        } else {\n            $max_number = max($max_number,\
    \ $n);\n        }\n    }\n    return $result;\n}\n", "    $max = array_shift($numbers);\n\
    \    $max = max($max, $numbers[0]);\n    $max = rolling_max($numbers, $max);\n\
    \    return $max;\n}\n", "    $max_rolling = -1;\n    $max_rolling_value = null;\n\
    \    foreach ($numbers as $num) {\n        $num = abs($num);\n        $rolling\
    \ = $num % $max_rolling;\n        if ($rolling == 0) {\n            $max_rolling\
    \ = $rolling;\n            $max_rolling_value = $num;\n        } else {\n    \
    \        $max_rolling = $rolling;\n        }\n    }\n    return array($max_rolling_value,\
    \ $max_rolling);\n}\n", "    return array_reduce($numbers, function ($previous,\
    \ $value) {\n        return $previous >= $value ? $previous : $value;\n    },\
    \ 0);\n}\n", "    if (empty($numbers)) {\n        return array();\n    }\n   \
    \ // If only one element, it cannot be the largest one.\n    if (count($numbers)\
    \ <= 1) {\n        return array($numbers[0]);\n    }\n    // Calculate first rolling\
    \ maximum element of the sequence using previous maximum value.\n    $max_number\
    \ = $numbers[0];\n    foreach ($numbers as $number) {\n        if ($number > $max_number)\
    \ {\n            $max_number = $number;\n        }\n    }\n    $max_number_array\
    \ = array($max_number);\n    for ($i = 1; $i < count($numbers); $i++) {\n    \
    \    $current_number = $numbers[$i];\n        if ($current_number > $max_number)\
    \ {\n            // Current number is greater than the previous maximum, current\
    \ max number is replaced\n            // by current number.\n            $max_number\
    \ = $current_number;\n        }\n        $max_number_array[] = $max_number;\n\
    \    }\n    return $max_number_array;\n}\n", "    return array_map(\n        function\
    \ ($number) {\n            return $number > array_shift($numbers) ? $number :\
    \ rolling_max($numbers);\n        },\n        $numbers\n    );\n}\n", "    $highest\
    \ = 0;\n    $numbers = array_reverse($numbers);\n    do {\n        $highest =\
    \ $numbers[count($numbers) - 1];\n        if ($highest > count($numbers)) {\n\
    \            $highest = 0;\n        }\n        $numbers = array_slice($numbers,\
    \ 0, -1);\n    } while (count($numbers) > 0);\n    return $highest;\n}\n", " \
    \   $result = [];\n\n    foreach ($numbers as $key => $value) {\n        $result[]\
    \ = $value;\n        if (isset($numbers[$key - 1])) {\n            $result[] =\
    \ $numbers[$key - 1];\n        }\n    }\n\n    return $result;\n}\n", "\t$maxes\
    \ = array();\n\n\tforeach ($numbers as $number) {\n\t\t$current_max = -1;\n\t\t\
    $index_in_seq = 0;\n\t\t$i = 0;\n\n\t\twhile ($i < count($numbers)) {\n\t\t\t\
    if ($numbers[$i] > $current_max) {\n\t\t\t\t$current_max = $numbers[$i];\n\t\t\
    \t\t$index_in_seq = $i;\n\t\t\t}\n\t\t\t$i++;\n\t\t}\n\n\t\t$maxes[] = $current_max;\n\
    \t}\n\n\treturn $maxes;\n}\n", "    return array_reduce($numbers, function ($carry,\
    \ $number) {\n        return max($carry, $number);\n    });\n}\n", "    return\
    \ array_reduce($numbers, function ($carry, $number) {\n        return $number\
    \ > $carry ? $number : $carry;\n    });\n}\n", "    $max_num = array();\n    $counter\
    \ = 0;\n    foreach($numbers as $num) {\n        if ($num > $max_num[$counter])\
    \ {\n            $max_num[$counter] = $num;\n        }\n        $counter++;\n\
    \    }\n    return $max_num;\n}\n", "\t$result = array();\n\tforeach ($numbers\
    \ as $number) {\n\t\t$result[] = $number;\n\t}\n\treturn $result;\n}\n", "  if\
    \ (empty($numbers)) {\n    return array();\n  }\n\n  return array_unique(array_merge($numbers,\
    \ array_slice($numbers, 0, -1)));\n}\n\n", "    $max = current($numbers);\n  \
    \  $max_size = count($numbers) - 1;\n    for ($i = 1; $i < $max_size; $i++) {\n\
    \        if (current($numbers) >= $max) {\n            $max = current($numbers);\n\
    \        } else {\n            $max = $max == current($numbers) ? next($numbers)\
    \ : max($max, current($numbers));\n        }\n    }\n    return array_slice($numbers,\
    \ 0, $max_size) . array($max);\n}\n", "  if ($numbers === array()) return $numbers;\n\
    \  $max = reset($numbers);\n  $result = array();\n  foreach ($numbers as $n) {\n\
    \    if ($n > $max) {\n      $result = array_merge($result, array($n));\n    \
    \  $max = $n;\n    } else {\n      $result[] = $n;\n    }\n  }\n  return $result;\n\
    }\n</code>\nAnd for rolling average, here is the same code but with added option\
    \ for non-integer values - average of non-integer values.\n<code>\n<?php\n", " \
    \ $rolling_max = array();\n  // Calculate each rolling max element\n  for ($i\
    \ = 0; $i < count($numbers); $i++) {\n    $rolling_max[$i] = $numbers[$i];\n \
    \   for ($j = $i + 1; $j < count($numbers); $j++) {\n      $rolling_max[$i] =\
    \ max($rolling_max[$i], $numbers[$j]);\n    }\n  }\n  return $rolling_max;\n}",
  "  $result = [];\n  $temp = -9223372036854775808; // Largest signed integer value\
    \ possible.\n  $min = $temp;\n  for ($i = 0; $i < count($numbers); ++$i) {\n \
    \   $numbers_length = count($numbers);\n    if ($i >= $numbers_length) {\n   \
    \   break;\n    }\n    if ($numbers[$i] < $min) {\n      $min = $numbers[$i];\n\
    \    }\n  }\n  for ($i = 0; $i < count($numbers); ++$i) {\n    $result[] = $temp;\n\
    \    if ($numbers[$i] >= $min) {\n      $temp = $numbers[$i];\n      for ($j =\
    \ $i; $j < count($numbers); ++$j) {\n        $result[] = max((int)$temp, $numbers[$j]);\n\
    \      }\n    }\n  }\n  return $result;\n}", "  $results = array();\n\n  foreach\
    \ ($numbers as $key => $value) {\n    if ($value > 0) {\n      $results[$value]\
    \ = $key;\n    }\n  }\n\n  return $results;\n}\n", "    $max = array_shift($numbers);\n\
    \    foreach ($numbers as $number) {\n        if ($number > $max) {\n        \
    \    $max = $number;\n        }\n    }\n    return $max;\n}\n", "  $result = [];\n\
    \  for ($i = 0; $i < count($numbers); $i++) {\n    $result[$i] = max($numbers);\n\
    \    $numbers[$i] = $result[$i];\n  }\n  return $result;\n}\n", "    // If there\
    \ are no numbers to roll to, return an empty array\n    if (!$numbers) {\n   \
    \     return array();\n    }\n\n    // Sort input array from smallest to largest,\
    \ removing duplicates\n    // if there are any\n    sort($numbers);\n\n    //\
    \ Initialize output array to the first item in the array\n    $result = $numbers[0];\n\
    \n    // Iterate over input array and save last element into output array\n  \
    \  for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] == $result[count($numbers)\
    \ - 1]) {\n            $result = $numbers[$i];\n        } else {\n           \
    \ $result[] = $numbers[$i];\n        }\n    }\n\n    return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
