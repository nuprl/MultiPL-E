name: HumanEval_85_add
language: php
prompt: "<?php\n// Given a non-empty array of integers lst. add the even elements\
  \ that are at odd indices..\n// Examples:\n// >>> add(array(4, 2, 6, 7))\n// 2\n\
  function add($lst) {\n"
tests: "function candidate(...$args) {\n    return add(...$args);\n}\n\nfunction test():\
  \ void {\n    if (candidate(array(4, 88)) !== 88) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(4, 5, 6, 7, 2, 122)) !== 122) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, 0, 6, 7)) !== 0) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, 4, 6, 8)) !== 12) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    if ($lst==null) return null;\n    foreach ($lst as $i=>$x) {\n\
    \        if ($i%2==1) return $x+$lst[$i+1];\n    }\n    return null;\n}\n", " \
    \   $evens = [];\n    for ($i = 0, $n = count($lst); $i < $n; $i += 2) {\n   \
    \     $evens[] = $lst[$i];\n    }\n    return count($evens) ? $evens[0] : 0;\n\
    }\n</code>\nFor example using your array:\n<code>\necho add($arr);\n</code>\n\
    Output\n<code>\n2\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis answer got my vote\
    \ for the most minimal code - and I voted for it, but for completeness, I would\
    \ suggest that `return count($evens) ? $evens[0] : 0;` is replaced with `return\
    \ array_sum($evens);` which would reduce that function in half to just `return\
    \ array_sum($arr);` - and that would make your answer even better - if you don't\
    \ mind my saying :)\n<|/ c |>\n<| c |>\n: yes, that's an option. I prefer to reduce\
    \ code to the minimum so I don't have to read it more than once. Sometimes it's\
    \ also better to use a short `if` statement than to reduce code just to save space\
    \ and make the code more readable. Of course it depends on the situation. I also\
    \ like ternary operators better than `if`s because they make the code more readable\
    \ in my opinion.\n<|/ c |>\n<| c |>\nThank you for the answer and your time. I\
    \ found your answer more practical and easy to understand but accepted Jonathan's\
    \ answer because it was the most succinct and efficient. I appreciate your help\
    \ and feedback.\n<|/ c |>\n<| c |>\n: No problem. I always prefer a readable and\
    \ easy to understand code, because if you have to debug a bug you can always understand\
    \ and debug it yourself by looking at the code. It's more flexible and easier\
    \ to maintain.\n<|/ c |>\n<| c |>\nI agree, which is why I upvoted your answer\
    \ ;) But I prefer Jonathan's answer as well.\n<|/ c |>\n<| a dscore=2 |>\nAnother\
    \ approach:\n<code>\n$sum = 0;\n$evens = [];\nfor ($i = 0, $n = count($arr); $i\
    \ < $n; $i+=2) {\n    $sum += $arr[$i];\n    $evens[] = $arr[$i];\n}\nif ($sum\
    \ != 0) {\n    return $sum;\n}\nreturn $evens[0];\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=2 tags=php,arrays |>\nHere's a solution ", "    $evens = 0;\n\
    \    $odds = 0;\n    foreach ($lst as $v) {\n        if ($v % 2 == 0) {\n    \
    \        $evens += $v;\n        } else {\n            $odds += $v;\n        }\n\
    \    }\n    return $evens + $odds;\n}\n", "    if (empty($lst) || !is_array($lst))\
    \ {\n        throw new InvalidArgumentException('Cannot add non-array elements!');\n\
    \    }\n\n    $evensIndex = [];\n    foreach ($lst as $k => $v) if ($k % 2 ===\
    \ 0) $evensIndex[] = $k;\n\n    return array_sum(array_slice($lst,\n        count($evensIndex),\n\
    \        count($lst) - count($evensIndex)));\n}\n", "  $even_indices = array();\n\
    \  $odd_indices = array();\n  foreach ($lst as $i => $v) {\n    if ($i % 2 ===\
    \ 0) {\n      $even_indices[] = $i;\n    } else {\n      $odd_indices[] = $i;\n\
    \    }\n  }\n  return array_sum(array_slice($lst,0,$even_indices)) + array_sum(array_slice($lst,$even_indices));\n\
    }\n", "\t$evens = $odds = array();\n\tforeach($lst as $key => $value) {\n\t\t\
    $key % 2 == 0 ? $evens[] = $value : $odds[] = $value;\n\t}\n\treturn count($evens)\
    \ ? $evens[0] : $odds[0];\n}\n", "    $sum = 0;\n    foreach ($lst as $e) {\n\
    \        if ($e % 2 != 0) {\n            $sum += $e;\n        }\n    }\n    return\
    \ $sum;\n}\n", "  $result = 0;\n  for ($i = 0; $i < count($lst); $i ++) {\n  \
    \  if ($i % 2 == 1) {\n      $result += $lst[$i];\n    }\n  }\n  return $result;\n\
    }\n", "    foreach($lst as $i => $x) {\n        if ($i%2 == 0) $lst[$i] = $x +\
    \ $lst[$i+1];\n    }\n    return $lst;\n}\n", "    $res = 0;\n    foreach ($lst\
    \ as $key => $value) {\n        if ($key % 2 == 0) {\n            $res += $value;\n\
    \        }\n    }\n    return $res;\n}\n", "    $add = 0;\n    foreach ($lst as\
    \ $i => $val) {\n        if ($i % 2 == 0) {\n            $add += $val;\n     \
    \   }\n    }\n    return $add;\n}", "    $sum = 0;\n    foreach ($lst as $i =>\
    \ $num) {\n        if ($i % 2 == 0) {\n            $sum += $num;\n        }\n\
    \    }\n    return $sum;\n}\n</code>\n<|/ a |>\n<| a tags=arrays,php |>\n<code>\n\
    $arr = [1, 2, 3, 4, 5, 6, 7];\n$arr = (array)$arr;\n$sum = 0;\nforeach ($arr as\
    \ $key => $value) {\n  if ($key % 2 === 0) {\n    $sum += $value;\n  }\n}\necho\
    \ $sum;\n</code>\n<|/ a dscore=1 |>\n<| c |>\nNo need to convert to array before\
    \ using foreach. Since PHP 5.5 foreach works with array and associative arrays\
    \ alike.\n<|/ c |>\n<| c |>\nWhat about if array is multidimensional? Would it\
    \ be possible to loop through each dimension? Like looping through each row and\
    \ column?\n<|/ c |>\n<| a tags=arrays,php |>\nUsing array_filter() and array_sum()\
    \ in a single line\n<code>\necho array_sum(array_filter(array_filter(range(1,\
    \ count($arr)), function($i){\n  return ($i % 2 === 0);\n}, ARRAY_FILTER_USE_BOTH)));\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n$arr = [1, 2, 3, 4, 5, 6, 7];\n$sum\
    \ = 0;\nforeach ($arr as $key => $value) {\n    if ($key % 2 == 0) {\n       \
    \ $sum += $value;\n    }\n}\necho $sum;\n</code>\n<|/ a tags=arrays,php dscore=0\
    \ |>\n<| a |>\nUsing array_filter()\n<code>\n$arr = [1, 2, 3, 4, 5, 6, 7];\n$sum\
    \ = array_sum(array_filter(array_filter($arr, function($v){return $v%2==0;}, ARRAY_FILTER_USE_BOTH)));\n\
    </code>\n<|/ a tags=arrays,php dscore=0 |>\n<| a dscore=0 |>\n<code>", "    $evens\
    \ = array_filter(function($elem) {\n        return $elem % 2 === 0;\n    }, $lst);\n\
    \n    return $evens;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php dscore=0 |>\n\
    I have used a combination of array_filter() and array_intersect()\nThe idea behind\
    \ array_filter() is to remove all elements in $lst that are not even numbers.\
    \ The array_intersect() then returns the intersection of the two arrays. \n<code>\n\
    $lst = [2, 4, 6, 8, 10];\n$evens = array_filter($lst,function($v){return $v%2==0;});\n\
    $evens = array_intersect($lst,$evens);\n\necho count($evens);\n</code>\n<|/ a\
    \ |>\n<| c |>\nThank you for this code snippet, which may provide some immediate\
    \ help.  A proper explanation [would greatly improve](//meta.stackexchange.com/q/114762)\
    \ its educational value by showing *why* this is a good solution to the problem,\
    \ and would make it more useful to future readers with similar, but not identical,\
    \ questions.  Please [edit] your answer to add explanation, and give an indication\
    \ of what limitations and assumptions apply.\n<|/ c |>\n<| a |>\n<code>\n$lst\
    \ = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\n\n$arrEvens = array_filter($lst,function($v){return\
    \ $v%2==0;});\n$arrOdds = array_filter($lst,function($v){return $v%2!==0;});\n\
    $arrBoth = array_merge($arrEvens,$arrOdds);\n\nprint_r($arrBoth);\n\n$arrOdds\
    \ = array_filter($lst,function($v){return $v%2!==0;});\n$arrEvens = array_filter($lst,function($v){return\
    \ $v%2==0;});\n$arrBoth = array_merge($arrEvens,$arrOdds);\n\nprint_r($arrBoth);\n\
    </code>\n<|/ a tags=php dscore=0 |>\n<| c |>\nThank you for this code snippet,\
    \ which may provide some immediate help.  A proper explanation [would greatly\
    \ improve](//meta.stackexchange.com/q/114762) its educational value by showing\
    \ *why* this is a good solution to the problem, and would make it more useful\
    \ to future readers with similar, but not identical, questions.  Please [edit]\
    \ your answer to add explanation, and give ", "    $add = 0;\n    foreach ($lst\
    \ as $item) {\n        if (($item % 2) === 1) {\n            $add += $item;\n\
    \        }\n    }\n    return $add;\n}\n", "    $evens = array();\n    foreach\
    \ ($lst as $i => $n) {\n        if ($i % 2 === 1) {\n            $evens[] = $n;\n\
    \        }\n    }\n    return count($evens) ? array_sum($evens) : 0;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThanks I thought of doing something like this\
    \ but was looking for a more efficient solution (not very familiar with array\
    \ functions myself). I appreciate the help and will accept once I'm allowed to\
    \ do so\n<|/ c |>\n<| c |>\nI added some performance comparisons to my answer;\
    \ I wouldn't be surprised if any of them are worse than the naive loop.\n<|/ c\
    \ |>\n<| c |>\nThank you for the comparisons! I'm fairly new to coding so all\
    \ of this is very helpful.\n<|/ c |>\n<| a tags=php,arrays |>\nThis would be the\
    \ most inefficient solution, but you could use array_slice:\n<code>\n$evens =\
    \ array_slice($lst, 0, $count-1);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis assumes\
    \ that the OP wants the evens, whereas they want the odds\n<|/ c |>\n<| c |>\n\
    It's not very efficient\n<|/ c |>\n<| a dscore=1 |>\nThis doesn't scale very well\
    \ to larger lists.\n<code>\n$list = [];\nfor($i = count($arr); $i > 0; $i--)\n\
    {\n    if($i % 2 == 0)\n        $list[] = $arr[--$i];\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays dscore=1 |>\n<code>\n$odd_sum = array_sum(array_slice($array,\
    \ 0, $count-1));\n</code>\n<|/ a |>\n<| a dscore=1 |>\nIf $count is the number\
    \ of items in the array $array, this should work:\n<code>\narray_sum(array_slice($array,\
    \ 0, $count-1))\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\narray_sum()\
    \ should be the simplest solution for this.  It will automatically loop through\
    \ the array and only add up the odd indexes for you and then return you the sum.\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\nYou can use array_slice to\
    \ only get the last $count elements and then array_sum to get the sum of those.\n\
    <|/ a dscore=0 |>\n<| a dscore=0 ", "    if (count($lst) <= 1) {\n        return\
    \ 0;\n    }\n    $evens = array_filter($lst, 'is_int');\n    $odds = array_filter($lst,\
    \ 'is_int', 'odd');\n    $result = array_sum($evens);\n    $result += array_sum($odds);\n\
    \    return $result;\n}\n", "    foreach ($lst as $i => $v) {\n        if ($i\
    \ % 2 === 0) {\n            $lst[$i] = $v;\n        }\n    }\n    return array_sum($lst);\n\
    }\n</code>\n<|/ a tags=php,math,algorithm |>\n<| c |>\nThis doesn't seem to add\
    \ up `[4, 2, 6, 7]` as `2+6+7=13`. It should be `2+7=8`\n<|/ c |>\n<| c |>\nI\
    \ don't think this is what the OP asked for. At least not my interpretation of\
    \ the question.\n<|/ c |>\n<| c |>\nThe OP asked for \"the even elements that\
    \ are at odd indices\", and `2+6+7` is indeed `8`\n<|/ c |>\n<| c |>\nHmmm, I\
    \ suppose I misread it then.\n<|/ c |>\n<| c |>\n: this doesn't seem to add the\
    \ `[4, 2, 6, 7]` array as it should.\n<|/ c |>\n<| a dscore=2 |>\n<code>", " \
    \   foreach($lst as $i => $e) {\n        if($i % 2 === 0) {\n            $lst_out[]\
    \ = $e;\n        }\n    }\n    return $lst_out;\n}", "    $sum = 0;\n    foreach($lst\
    \ as $key=>$value){\n        if($key%2 != 0){\n            $sum += $value;\n \
    \       }\n    }\n    return $sum;\n}\n", "    foreach($lst as $key => $val) {\n\
    \        if($key % 2 == 0) {\n            $lst += $val;\n        }\n    }\n  \
    \  return $lst;\n}", "    $res = 0;\n    $n = count($lst);\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        if ($i % 2 == 0) {\n            $res += $lst[$i];\n \
    \       }\n    }\n    return $res;\n}", "    if (count($lst) < 2) {\n        return\
    \ 0;\n    }\n    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n     \
    \   if ($i % 2 == 0) {\n            $sum += $lst[$i];\n        }\n    }\n    return\
    \ $sum;\n}", "  $even = array();\n  $odd = array();\n  foreach($lst as $i) {\n\
    \    $i = (int)$i;\n    if ($i % 2 == 0)\n      $even[] = $i;\n    else\n    \
    \  $odd[] = $i;\n  }\n  return $even[0] + $odd[1];\n}\n", "   foreach ($lst as\
    \ $key => $value) {\n       if ($key % 2 == 1) {\n          $sum = $sum + $value;\n\
    \       }\n   }\n   return $sum;\n}\n", "    return array_sum($lst) + array_sum(array_slice($lst,\
    \ 1, count($lst)));\n}\n", "  $evenIndices = array_filter(array_keys($lst), function($key)\
    \ use($lst) {\n    return $key % 2 == 0;\n  });\n  return array_sum(array_intersect_key($lst,\
    \ array_flip($evenIndices)));\n}\n", "    foreach ($lst as $key => $value) {\n\
    \        if ($key % 2 != 0) {\n            continue;\n        }\n        $lst[$key]\
    \ += $value;\n    }\n    return array_sum($lst);\n}\n</code>\n<|/ a dscore=1 tags=php,arrays\
    \ |>\n<| a dscore=1 |>\nHere's a way to do it:\n<code>\n<?php\n\n$arr = array();\n\
    \n$arr[] = array('name' => 'Amy Johnson', 'age' => 42);\n$arr[] = array('name'\
    \ => 'Jack Jones', 'age' => 29);\n$arr[] = array('name' => 'Mark Smith', 'age'\
    \ => 24);\n$arr[] = array('name' => 'Sam Smith', 'age' => 41);\n\n$arr[] = array('name'\
    \ => 'Joe Mick', 'age' => 28);\n$arr[] = array('name' => 'Garry Carey', 'age'\
    \ => 32);\n\n$arr[] = array('name' => 'Jim Bauer', 'age' => 43);\n$arr[] = array('name'\
    \ => 'Molly Bauer', 'age' => 43);\n\n$arr[] = array('name' => 'Joe Bauer', 'age'\
    \ => 43);\n$arr[] = array('name' => 'Lord Brown', 'age' => 44);\n\n$arr[] = array('name'\
    \ => 'Jill Brown', 'age' => 45);\n\n$arr[] = array('name' => 'Ben Smith', 'age'\
    \ => 51);\n$arr[] = array('name' => 'Sally Smith', 'age' => 52);\n\n$arr[] = array('name'\
    \ => 'Joe Smith', 'age' => 52);\n$arr[] = array('name' => 'Sally Smith', 'age'\
    \ => 52);\n\n$arr[] = array('name' => 'Sally Smith', 'age' => 52);\n$arr[] = array('name'\
    \ => 'Joe Smith', 'age' => 53);\n", "  $even = false;\n  $total = 0;\n\n  foreach\
    \ ($lst as $i => $item) {\n    $total += $item;\n    if ($i % 2 == 0) {\n    \
    \  $even += $item;\n    }\n  }\n\n  return $even ? $even : $total;\n}\n", "  \
    \  $res = 0;\n    foreach ($lst as $i => $val) {\n        if ($i%2 == 0) $res\
    \ += $val;\n    }\n    return $res;\n}\n", "\t$result = $lst[0];\n\tforeach ($lst\
    \ as $item) {\n\t\t$result += $item;\n\t}\n\treturn $result;\n}\n", "    $result\
    \ = $lst[0];\n    $odd = array_slice($lst, 1, null, true);\n    foreach ($odd\
    \ as $i => $e){\n        if ($i % 2 === 0){\n            $result += $e;\n    \
    \    }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c\
    \ |>\nThat's not correct. [array_sum](http://php.net/array_sum) is a native PHP\
    \ function, while your code is using array_reduce which comes with PHP5+.\n<|/\
    \ c |>\n<| c |>\nOk, I didn't know that.\n<|/ c |>\n<| a |>\n<code>\n$array =\
    \ array(1, 2, 3, 4, 5, 6, 8);\n$even = 0;\n$odd = 0;\n\nfor($i = 0; $i < count($array);\
    \ $i++)\n{\n    if($i % 2 != 0)\n    {\n        $odd++;\n    }\n    else\n   \
    \ {\n        $even++;\n    }\n}\n\necho $even;\necho $odd;\n</code>\n<|/ a dscore=1\
    \ tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$arr = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);\n\
    \n$odd = array_sum(array_chunk($arr,2));\n$even = array_sum(array_diff($arr,$odd));\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$arr = [1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10];\n$count = 0;\n$arrSum = 0;\n\nforeach($arr as $value)\
    \ {\n    if($count % 2 == 0) {\n        $arrSum += $value;\n    }\n    $count++;\n\
    }\n\necho $arrSum; // 15\n</code>\n<|/ a dscore=0 |>\n<| c |>\nNo need to use\
    \ `foreach` when you are using PHP5+ functions. Just do `array_sum(array_slice($arr,\
    \ 2, null, true))`.\n<|/ c |>\n<| a tags=php,arrays dscore=0 |>\n<code>\n$arr\
    \ = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);\n$sum = 0;\n\nfor($i = 0; $i\
    \ < count($arr); $i++)\n{\n    if($i % 2 != 0)\n    {\n        $sum += $arr[$i];\n\
    \    }\n}\n\necho $sum; // 15\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n$array\
    \ = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];\n$odds = 0;\n$evens = 0;\nfor",
  "    $count = 0;\n    foreach ($lst as $value) {\n        $count += ($value % 2);\n\
    \    }\n    return $count;\n}\n", "    $sum = 0;\n    foreach ($lst as $i => $x)\
    \ {\n        if ($i % 2 !== 0) {\n            $sum += $x;\n        }\n    }\n\
    \    return $sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for you answer\
    \ but that doesn't work correctly, it returns 3 instead of 6. I'm still trying\
    \ to figure it out. I think I understand how it works, just not how to implement\
    \ it.\n<|/ c |>\n<| c |>\nThanks for you answer. I tried this in PHP version 7.0\
    \ and got `Warning: Invalid argument supplied for foreach() in`. When I tried\
    \ this in PHP version 5.5 it worked. It seems like the foreach does not work on\
    \ arrays of arrays. When I tried it on one level only it worked.\n<|/ c |>\n<|\
    \ a dscore=1 |>\nHere is an optimized solution using a different approach that\
    \ does not use any loops.\n<code>", "    if (!$lst) {\n        return null;\n\
    \    }\n    $evens = array_filter($lst, 'is_int');\n    $odds = array_filter($lst,\
    \ '!is_int');\n    return array_sum($odds) + array_sum($evens);\n}\n", "  return\
    \ $lst[$lst % 2 == 0 ? 1 : 0] + $lst[$lst % 2 ? 2 : 1] + $lst[$lst % 2 ? 3 : 2]\
    \ + $lst[$lst % 2 ? 4 : 3] + $lst[$lst % 2 ? 5 : 4];\n}\n", "  if (empty($lst)\
    \ || count($lst) == 0) {\n    return 0;\n  }\n\n  $evens = array_filter($lst,\
    \ 'is_int');\n  return $evens[count($evens) - 2];\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nCan you please explain me the whole thing?\n<|/ c |>\n<| c |>\n\
    Why use array_filter? I can do it with foreach. What's the advantage?\n<|/ c |>\n\
    <| c |>\nThe advantage of `array_filter` is that it returns an array, so it's\
    \ one less function call, which makes it faster. But if you don't care about performance,\
    \ it's okay to use `foreach`, it's just that `array_filter` is often a lot more\
    \ readable, so it's often useful.\n<|/ c |>\n<| c |>\nAh, thanks! I thought array_filter\
    \ returns only 1 value. It returns all of them. Why do we need \"count($evens)-1\"\
    \ then? Why don't we use count($evens)-2? What does \"-1\" mean?\n<|/ c |>\n<|\
    \ c |>\nIt returns the even numbers. If you use count($evens) - 1, then it's only\
    \ returning the odd numbers.\n<|/ c |>\n<| a |>\n<code>", "    $res = 0;\n   \
    \ for ($i = 0, $l = count($lst); $i < $l; $i++) {\n        if ($i % 2 != 0) {\n\
    \            $res += $lst[$i];\n        }\n    }\n    return $res;\n}\n", "  \
    \  $sum = array_sum($lst);\n    return $sum % 2 === 0 ? $sum : 0;\n}\n", "   \
    \ return $lst[array_filter($lst, function($n) {\n        return $n % 2 === 0;\n\
    \    })];\n}\n</code>\nAnd if you also need O(1) access to the even indexes, you\
    \ can do this:\n<code>\n<?php", "    $count = 0;\n    for ($i = 1, $n = count($lst);\
    \ $i < $n; $i++) {\n        if ($lst[$i] % 2 == 0) {\n            $lst[$count++]\
    \ = $lst[$i];\n        }\n    }\n    return $count;\n}\n", "    // Your code here\n\
    \    $result = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result += $lst[$i];\n        }\n    }\n    return\
    \ $result;\n}", "    return array_filter($lst, 'is_odd');\n}", "    foreach ($lst\
    \ as $idx => $num) {\n        if ($idx % 2 === 0) {\n            $lst += $num;\n\
    \        }\n    }\n    return $lst;\n}\n", "    $sum = 0;\n    foreach ($lst as\
    \ $index => $elem) {\n        if ($index % 2 === 0) {\n            $sum += $elem;\n\
    \        }\n    }\n    return $sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nTry this one:\n<code>", "  $evens = array_filter(array_map(function($element){return\
    \ ($element & 1); }, $lst));\n  return count($evens) + count(array_diff($lst,$evens));\
    \ \n}\n", "    $even_indexes = [];\n    $odd_indexes = [];\n    foreach ($lst\
    \ as $index => $value) {\n        if ($index % 2 == 0) {\n            $even_indexes[]\
    \ = $value;\n        } else {\n            $odd_indexes[] = $value;\n        }\n\
    \    }\n    return array_sum($even_indexes) + array_sum($odd_indexes);\n}\n</code>\n\
    I didn't test the above code so I may have missed some things. But if you need\
    \ more help, let me know :)\n<|/ a dscore=3 |>\n<| c |>\nYour solution is indeed\
    \ the easiest to implement. Thanks.\n<|/ c |>\n<| a |>\nIf you have access to\
    \ array_filter and a foreach loop, then you can easily achieve this using a foreach\
    \ loop:\n<code>\n$values = [1, 2, 3, 4, 5, 6, 7];\n$evens = [];\n$odds = [];\n\
    \nforeach ($values as $value) {\n    if ($value % 2 == 0) {\n        $evens[]\
    \ = $value;\n    } else {\n        $odds[] = $value;\n    }\n}\n\n$result = array_sum($evens)\
    \ + array_sum($odds);\n</code>\n<|/ a dscore=3 tags=php |>\n<| c |>\nI wanted\
    \ to use a loop. Thanks for your answer!\n<|/ c |>\n<| a |>\n<code>\n<?php\n$arr1\
    \ = [1,2,3,5,6,7];\n$arr2 = [1,4,5,6,8,9];\n", "    $res = 0;\n    foreach ($lst\
    \ as $item) {\n        if (is_int($item) && $item % 2 === 0) {\n            $res\
    \ += $item;\n        }\n    }\n    return $res;\n}\n", "    $sum = 0;\n    foreach\
    \ ($lst as $elt) {\n        if ($elt % 2 != 0) {\n            $sum += $elt;\n\
    \        }\n    }\n    return $sum;\n}\n", "    if (count($lst) < 2) {\n     \
    \   return 0;\n    }\n    sort($lst);\n    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i += 2) {\n        $sum += $lst[$i];\n    }\n    return $sum;\n}\n", "   $sum\
    \ = 0;\n   for ($i = 0; $i < count($lst); $i++) {\n      $sum = ($sum + $lst[$i])\
    \ % 10;\n   }\n   return $sum;\n}\n", "    $sum = 0;\n    $i = 0;\n    $len =\
    \ count($lst);\n    while ($len > 0) {\n        if ($lst[$i] % 2 === 0) {\n  \
    \          $sum += $lst[$i];\n        }\n        $i++;\n        $len--;\n    }\n\
    \    return $sum;\n}\n", "  $evens = array();\n  foreach($lst as $ix => $x) {\n\
    \    if($ix % 2 == 0) {\n      $evens[] = $x;\n    }\n  }\n  return count($evens);\n\
    }\n", "\tforeach ($lst as $key => $value) {\n\t\tif ($key % 2 == 1) {\n\t\t\t\
    $result[] = $value;\n\t\t}\n\t}\n\treturn count($result) > 0 ? $result : 0;\n\
    }\n", "    $evens = 0;\n    $odds = 0;\n    foreach ($lst as $i) {\n        if\
    \ ($i & 1) {\n            $odds += $i;\n        } else {\n            $evens +=\
    \ $i;\n        }\n    }\n    return $evens + $odds;\n}\n", "    $result = $lst[0];\n\
    \    for ($i = 1; $i < count($lst); $i++) {\n        if ($i % 2 == 0) {\n    \
    \        $result += $lst[$i];\n        }\n    }\n    return $result;\n}\n</code>\n\
    The above method can also be seen as a generator function:\n<code>", "  $sum =\
    \ 0;\n  foreach($lst as $v) {\n    if($v % 2 != 0) {\n      $sum += $v;\n    }\n\
    \  }\n  return $sum;\n}\n", "  $even = 0;\n  $odd = 0;\n  foreach ($lst as $k)\
    \ {\n    if ($k % 2 == 0) {\n      $even += $k;\n    } else {\n      $odd += $k;\n\
    \    }\n  }\n  return $even * 2 + $odd;\n}\n</code>\nThis is basically an algorithm\
    \ that is very straight forward: You take the first element of the array, add\
    \ it to the even counter and to the odd counter. Then, you look at the next element\
    \ and do the same. Add the next element to the even counter and to the next odd\
    \ counter. Keep doing this until there are no more elements. Then you take all\
    \ elements of the odd counter and add them to the even counter and to the sum.\
    \ That's how we do it. Hope this helps. I tried to explain it in a very simple\
    \ way so that it's easy to understand. Feel free to ask questions in the comments\
    \ section.\n<|/ a tags=php,algorithm |>\n<| c |>\nthanks for answer. it helped\
    \ me.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", "    $res = 0;\n    $len =\
    \ count($lst);\n    for ($i = 0; $i < $len; $i++) {\n        if ($i % 2 === 0)\
    \ {\n            $res += $lst[$i];\n        }\n    }\n    return $res;\n}\n",
  "  // Return 0 if no elements are given to be added\n  if (count($lst) == 0) return\
    \ 0;\n  // Return 0 if the array has only one element\n  else if (count($lst)\
    \ == 1) return $lst[0];\n  \n  $sum = 0;\n  foreach ($lst as $i => $v) {\n   \
    \ if ($i % 2 == 0) {\n      $sum += $v;\n    }\n  }\n  return $sum;\n}\n", " \
    \ $even = 0;\n  foreach ($lst as $k => $v) {\n    if ($k % 2 == 0) {\n      $even\
    \ += $v;\n    }\n  }\n  return $even;\n}", "    $evens = array_filter($lst, function($i)\
    \ { return ($i % 2); });\n    return count($evens) + count($lst) - count($evens);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php |>\n<code>\n<?php\n$arr = array(3,\
    \ 7, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41);\n$evens\
    \ = array_filter($arr, function($i) {return ($i % 2 == 0);});\n$odd_count = count($arr)\
    \ - count($evens);\necho \"<b>Odd count: \".$odd_count.\"</b>\";\necho \"<b>Odd\
    \ Elements: \".implode(',', $odds).\"</b>\";\necho \"<b>Even Elements: \".implode(',',\
    \ $evens).\"</b>\";", "    foreach ($lst as $index => $el) {\n        if ($index\
    \ & 1) {\n            $sum += $el;\n        }\n    }\n    return $sum;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis answer is very good. I'll leave mine below because\
    \ it is a bit more technical, and maybe a bit more fun to understand how it works.\
    \ Both are great answers that teach us something. Thank you.\n<|/ c |>\n<| a tags=algorithm,php,arrays\
    \ |>\n<code>", "    if (empty($lst)) {\n        return 0;\n    }\n\n    $evens\
    \ = array_filter($lst, 'is_even');\n    if (empty($evens)) {\n        return 0;\n\
    \    }\n\n    return $evens[0];\n}\n", "  $evens = $odds = array();\n\n  foreach\
    \ ($lst as $i => $val) \n    if ($i%2 == 0) $evens[] = $val;\n    else $odds[]\
    \ = $val;\n\n  return $odds[count($odds)/2] - $evens[count($evens)/2];\n}", " \
    \ $evens = $lst[0];\n  foreach ($lst as $k => $v) {\n    if ($k%2) {\n      $evens\
    \ += $v;\n    }\n  }\n  return $evens;\n}\n", "    return $lst[count($lst)-1];\n\
    }\n", "    $result = 0;\n    foreach ($lst as $k=>$v) {\n        if ($k & 1)\n\
    \            $result += $v;\n    }\n    return $result;\n}\n", "    for($i = 0;\
    \ $i < count($lst); $i++) {\n        if($lst[$i] % 2 == 0) {\n            $lst[$i]\
    \ = $lst[$i] + $lst[$i];\n        }\n    }\n    return $lst;\n}\n", "    return\
    \ $lst[0]+$lst[1]+$lst[2]+$lst[3];\n}\n", "    $evens = array();\n    $odds =\
    \ array();\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 2 ===\
    \ 0) {\n            $evens[] = $lst[$i];\n        } else {\n            $odds[]\
    \ = $lst[$i];\n        }\n    }\n    return count($evens) + count($odds);\n}\n",
  "    $even = array_filter(array_keys($lst), function($i) { return $i % 2; }); //\
    \ filter out even indices as keys\n    return array_sum(array_slice($lst, 0, $even));\
    \ // sum all even elements\n}\n", "  $result = 0;\n  for ($i = 0; $i < count($lst);\
    \ $i += 2) {\n    $result += $lst[$i];\n  }\n  return $result;\n}\n", "    $result\
    \ = 0;\n    foreach ($lst as $i => $n) {\n        if ($i % 2 === 0) {\n      \
    \      $result += $n;\n        }\n    }\n    return $result;\n}\n", "  $sum =\
    \ 0;\n  foreach ($lst as $i => $v) {\n    if (isset($lst[$i + 1])) {\n      if\
    \ (($v & 1) == 0) {\n        $sum += $v;\n      }\n    }\n  }\n  return $sum;\n\
    }\n</code>\n<|/ a tags=arrays,function,php |>\n<| a tags=arrays,function,php |>\n\
    Use array_reduce() to get sum of the elements at odd indexes.\n<code>\n$arr =\
    \ array(1,2,3,4,5,6,7,8,9);\n$odd_sum = array_reduce($arr, 'add', 0);\n</code>\n\
    <|/ a dscore=3 |>\n<| a |>\n<code>\n$myarray = array(1, 2, 3, 4, 5);\n$sum = 0;\n\
    foreach ($myarray as $value)\n{\n    if($value % 2 == 1)\n    {\n        $sum\
    \ += $value;\n    }\n}\n</code>\n<|/ a tags=arrays,function,php dscore=3 |>\n\
    <| a tags=arrays,function,php |>\nThis would work fine for you \n<code>\n<?php\n\
    $myarray = array(1, 2, 3, 4, 5);\n$sum = 0;\nforeach ($myarray as $value) {\n\
    \    if($value % 2 == 1) {\n        $sum += $value;\n    }\n}\necho $sum;", " \
    \   // The sum of an empty list is 0.\n    if (empty($lst)) {\n        return\
    \ 0;\n    }\n    // The sum of the first element\n    $sum = $lst[0];\n    //\
    \ The sum of the rest of the elements.\n    foreach (array_slice($lst, 1) as $item)\
    \ {\n        // Add together two elements that are at odd indices\n        $sum\
    \ += $item % 2 ? $item + 1 : $item;\n    }\n    return $sum;\n}\n", "    $res\
    \ = 0;\n    foreach ($lst as $k => $v) {\n        if ($k % 2 == 0) {\n       \
    \     $res += $v;\n        }\n    }\n    return $res;\n}\n", "    if (empty($lst))\
    \ return 0;\n    $even = array_filter($lst, function($i) { return $i % 2 == 0;\
    \ });\n    $odd = array_filter($lst, function($i) { return $i % 2 == 1; });\n\
    \    return array_sum(array_merge($even, $odd));\n}\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\nYou can use array_filter to filter out the odd indices and array_sum to\
    \ sum the filtered array.\n<code>\n$arr = array(1,2,3,4,5,6);\n$odd = array_filter($arr,\
    \ function($v){return $v%2==1;});\necho array_sum($odd);\n</code>\nDemo\n<|/ a\
    \ tags=php,sum,arrays,filter |>\n<| c |>\nThat will fail if there are two or more\
    \ of the same odd number, though.\n<|/ c |>\n<| c |>\nI know... but that's the\
    \ only constraint they had. No one gave any constraints :)\n<|/ c |>\n<| a dscore=0\
    \ tags=php,sum,arrays,filter |>\nYou can use this code to sum even and odd numbers\
    \ in an array:\n<code>", "    $evens = array();\n    foreach($lst as $key => $value)\
    \ {\n        if ($key % 2 === 0) {\n            $evens[] = $value;\n        }\n\
    \    }\n    return count($evens);\n}\n", "    $evens = array();\n    $odds = array();\n\
    \    foreach ($lst as $n) {\n        if ($n & 1) {\n            $odds[] = $n;\n\
    \        } else {\n            $evens[] = $n;\n        }\n    }\n    return array_sum(array_diff($evens,\
    \ $odds));\n}", "\tglobal $odd;\n\tfor ($i=0; $i<count($lst); $i++) {\n\t\tif\
    \ ($lst[$i%2]==0) $odd[$i] = $lst[$i]+$odd[$i];\n\t}\n\treturn $odd[0];\n}\n",
  "  foreach($lst as $i => $e) {\n    if ($i % 2 == 0)\n      $lst += $e;\n  }\n \
    \ return $lst;\n}", "  // Iterate through all array elements\n  foreach ($lst\
    \ as $key => $value) {\n    // If the current value is odd\n    if ($key % 2 ==\
    \ 0) {\n      // Add it to the result\n      return $value + $lst[$key + 1]; //\
    \ +1 because we don't want to add the current value\n    }\n  }\n}\n</code>\n\
    <|/ a tags=php,arrays,function |>\n<| a dscore=0 |>\nThe code below checks the\
    \ array for even values only, then adds all of the even values. The array must\
    \ be sorted from low to high. \n<code>\n<?php\n$input = array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10);\n$input = array_reverse($input);\n$input = array_filter($input,\
    \ function($v){return $v%2 == 0;});\n$input = array_merge($input, array_slice($input,\
    \ 2));\n$input = array_merge($input, array_slice($input, -1));\nvar_dump($input);\n\
    </code>\n<|/ a tags=php,arrays,function |>\n<| a dscore=0 |>\n<code>\n$arr = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14);\n\
    \n$temp = array();\n\nfor($i=count($arr)-1;$i>0;$i--)\n{\n    if($arr[$i] % 2\
    \ != 0)\n    {\n        $temp[$i] = $arr[$i];\n        unset($arr[$i]);\n    }\n\
    }\n\nvar_dump($arr);\n\necho \"<br>\";\nvar_dump($temp);\n</code>\n<|/ a tags=php,arrays,function\
    \ |>\n<| a dscore=0 tags=php,arrays,function |>\nHere is a way I wrote it. It\
    \ is not efficient, but it is very short:\n<code>", "  return count($lst) ? $lst[array_keys($lst)[array_filter(array_keys($lst),\
    \ function($v) { return $v & 1; })]] : '';\n}\n", "    return $lst[array_filter($lst,\
    \ function ($el) {\n        return ($el & 1) === 1;\n    })];\n}\n", "    $lst\
    \ = array_filter($lst, function($v) { return ($v & 1); });\n    $lst = array_filter($lst,\
    \ function($v) { return (!($v & 1)); });\n    return count($lst);\n}\n</code>\n\
    This isn't an O(n) solution but still fairly efficient since it only passes two\
    \ elements at a time and avoids calling array_filter() twice.\n<|/ a |>\n<| c\
    \ |>\nI like the solution but it does require a lot of overhead which might be\
    \ more efficient in certain cases than other solutions posted here. For example,\
    \ if you're working with very large arrays, you might have to use the `array_filter`\
    \ method instead of just `array_slice`.\n<|/ c |>\n<| c |>\nYeah that's a good\
    \ point, I updated my answer to use array_filter instead of array_slice since\
    \ `array_slice` wouldn't work in those cases. I'm going to try to come up with\
    \ an O(n) solution using array_filter as well though.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>", "    $even = $lst[$lst % 2];\n    foreach($lst as $key => $val)\
    \ {\n        if ($key % 2 == 0) {\n            $even += $val;\n        } else\
    \ {\n            $lst[] = $even;\n        }\n    }\n    return $even;\n}\n", " \
    \ $sum = 0;\n  foreach($lst as $i => $val) {\n    if($i % 2 != 0) {\n      $sum\
    \ += $val;\n    }\n  }\n  return $sum;\n}\n", "  foreach($lst as $i) {\n    if($i\
    \ % 2 == 1) {\n      return $i + 1;\n    }\n  }\n  return -1;\n}\n</code>\n<|/\
    \ a tags=php,arrays,math dscore=0 |>\n<| a tags=php,arrays,math |>\nHere is a\
    \ solution that will return the number of even numbers between the given range\
    \ (inclusive) and excluding those numbers (exclusive).\n<code>\n<?php", "  $result\
    \ = 0;\n  foreach ($lst as $i => $val) {\n    if ($i % 2 == 0) {\n      $result\
    \ += $val;\n    }\n  }\n  return $result;\n}\n", "    foreach($lst as $i => $v){\n\
    \        if($i % 2 == 0) return $v + $lst[$i + 2];\n    }\n}\n", "  $evens = array();\n\
    \  $odds = array();\n  $len   = count($lst);\n\n  for ($i = 0; $i < $len; ++$i)\
    \ {\n    $isOdd = ($i % 2 != 0) ? true : false;\n    if ($isOdd) {\n      $odds[]\
    \ = $lst[$i];\n    } else {\n      $evens[] = $lst[$i];\n    }\n  }\n  return\
    \ $evens[count($evens) - 1] + $odds[count($odds) - 1];\n}\n", "    $evens = array_filter($lst,\
    \ function ($elem) use ($lst) {\n        return $elem % 2 == 0;\n    });\n   \
    \ return count($evens);\n}\n", "    $sum = 0;\n    foreach ($lst as $value) {\n\
    \        if ($value % 2 == 0) {\n            $sum += $value;\n        }\n    }\n\
    \    return $sum;\n}", "    $sum = 0;\n    foreach ($lst as $key => $value) {\n\
    \        if ($key % 2 == 1) {\n            $sum += $value;\n        }\n    }\n\
    \    return $sum;\n}\n", "  $result = 0;\n  foreach($lst as $value) {\n    if\
    \ ($value & 1)\n      $result += $value;\n  }\n  return $result;\n}\n", "  $even\
    \ = false;\n  $evenLst = array();\n  foreach($lst as $val) {\n    if($val%2 ==\
    \ 0) {\n      $evenLst[] = $val;\n      $even = true;\n    }\n    else {\n   \
    \   if(!$even) {\n        $evenLst[] = $val;\n      }\n    }\n  }\n  return $evenLst;\n\
    }\n", "    if (empty($lst)) return 0;\n    $cnt = 0;\n    foreach ($lst as $idx\
    \ => $val) {\n        if ($idx & 1) $cnt += $val;\n    }\n    return $cnt;\n}\n",
  "    $even = array_filter($lst, function ($i) { return $i & 1; });\n    return count($even)\
    \ ? count($lst) + count($even) : count($lst);\n}\n", "    foreach ($lst as $key\
    \ => $value) {\n        if ($key % 2 === 1) {\n            $lst += $value;\n \
    \       }\n    }\n    return $lst;\n}\n", "  $res = 0;\n  foreach ($lst as $key\
    \ => $value) {\n    if ($key % 2 == 0) {\n      $res += $value;\n    }\n  }\n\
    \  return $res;\n}\n</code>\nA few notes:\n\nThe function returns the sum of all\
    \ even indices, so you have to add them all together to return the final result.\n\
    The above code assumes the input array is passed by reference (to not change the\
    \ original array).\nSince you are using PHP > 5.5, it is better to pass an array\
    \ by reference (see the function signature).\nThe above function can be made more\
    \ concise (by removing the foreach loop) and also faster (by using the + operator\
    \ instead of +=). I leave that as an exercise to the reader.\n<|/ a tags=php,algorithm\
    \ dscore=1 |>\n<| a dscore=0 |>\nYou could do it using php array_filter and array_sum.\
    \ Here's an example -\n<code>\n$array = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12);\necho array_sum(array_filter($array, function($key){\n    return $key %\
    \ 2 == 0;\n}));\n</code>\n<|/ a tags=php,algorithm |>\n<| a tags=php,algorithm\
    \ |>\n<code>\n$result = array_sum(array_filter($list, function($i){\n   return\
    \ ($i % 2) == 0;\n}));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$list = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);", "    foreach ($lst\
    \ as $key => $value) {\n        if ($key % 2 === 1) {\n            $lst += $value;\n\
    \        }\n    }\n\n    return count($lst);\n}\n</code>\n<|/ a dscore=0 tags=php,arrays,function\
    \ |>\n<| c |>\nYou don't need `array_shift` at all. Just increment `foreach`'s\
    \ loop counter: `for ($i = count($lst); $i--;)`.\n<|/ c |>\n<| c |>\nThis answer\
    \ has some interesting ways of doing things.  As a beginner, I think it's easier\
    \ to understand a solution using standard php array functions.\n<|/ c |>\n<| a\
    \ |>\nA simple and short and simple answer, using array_slice:\n<code>", "\t$evens\
    \ = 0;\n\tforeach ($lst as $key => $val) {\n\t\tif ($key % 2 === 0) {\n\t\t\t\
    $evens += $val;\n\t\t}\n\t}\n\treturn $evens;\n}\n", "  \n    // We are assuming\
    \ that each integer is larger than 0\n    // since we are using an array.\n  \
    \  \n    if (empty($lst)) return 0;\n    $evens = array();\n    $odds = array();\n\
    \    $sum = 0;\n    \n    foreach ($lst as $key => $value) {\n      if ($key %\
    \ 2 == 0) {\n        $evens[] = $value;\n      } else {\n        $odds[] = $value;\n\
    \      }\n    }\n    \n    foreach ($evens as $key => $value) {\n      $sum +=\
    \ $value;\n    }\n    \n    foreach ($odds as $key => $value) {\n      $sum +=\
    \ $value;\n    }\n    \n    return $sum;\n    \n}\n", "    $evens = 0;\n    $odds\
    \ = 0;\n    foreach ($lst as $val) {\n        if ($val % 2 == 0) {\n         \
    \   $evens++;\n        } else {\n            $odds++;\n        }\n    }\n\n  \
    \  return $evens + $odds;\n}\n", "    if (count($lst) == 0)\n        return 0;\n\
    \    $sum = 0;\n    foreach ($lst as $i => $el) {\n        if ($i % 2 == 0) {\n\
    \            $sum += $el;\n        }\n    }\n    return $sum;\n}\n", "    $i =\
    \ 0;\n    $sum = 0;\n    while ($i < count($lst)) {\n        if ($i % 2 == 0)\
    \ {\n            $sum += $lst[$i];\n        }\n        $i++;\n    }\n    return\
    \ $sum;\n}", "  $sum = 0;\n  foreach ($lst as $i => $val) {\n    if ($i % 2) {\n\
    \      $sum += $val;\n    }\n  }\n  return $sum;\n}\n</code>\n<|/ a |>\n<| a tags=php,php-5.3,function,arrays\
    \ dscore=3 |>\nHere is another solution to the problem:\n<code>\n<?php\n", " \
    \   $sum = 0;\n    $even = count($lst) & 1;\n    for ($i = 0; $i < count($lst);\
    \ ++$i) {\n        $sum += $lst[$i];\n        $ev = ! $even;\n        if ($ev)\
    \ {\n            if ($i % 2 == 1) {\n                $sum += $lst[$i];\n     \
    \       }\n        }\n        $even = $ev;\n    }\n    return $sum;\n}\n", " \
    \   $i = 0;\n    foreach ($lst as $i) {\n        if ($i % 2) {\n            $lst_out[]\
    \ = $i;\n        }\n    }\n    return $lst_out;\n}\n", "    $evens  = array_filter($lst,\
    \ 'is_int'); // filter out integers\n    $odds   = array_filter($lst, 'is_int',\
    \ 'odd'); // filter out odd-numbers\n    $even_sum = array_sum($evens);\n    return\
    \ $even_sum;\n}\n", "    $evens = array_filter($lst);\n    $odds = array_filter($lst,\
    \ 'is_int');\n    return array_sum(array_diff($evens, $odds));\n}\n", "  $even\
    \ = $lst[0];\n  return array_sum(array_slice($lst,1)) + $even;\n}\n</code>\n<|/\
    \ a tags=php,algorithm,arrays,sum |>\n<| a |>\n<code>\n<?php\n$total = 0;\nforeach\
    \ ($arr as $value) {\n    if ($value % 2 != 0) {\n        $total += $value;\n\
    \    }\n}\n</code>\n<|/ a tags=php,algorithm,arrays,sum dscore=2 |>\n<| a tags=php,algorithm,arrays,sum\
    \ |>\nUse array_sum\n<code>\n$arr[]=1;\n$arr[]=1;\n$arr[]=1;\n$arr[]=1;\n$arr[]=1;\n\
    \necho array_sum($arr);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe question was\
    \ about sums, not about additions.\n<|/ c |>\n<| c |>\n$arr[]=1; is not an array.\n\
    <|/ c |>\n<| a tags=php,algorithm,arrays,sum dscore=1 |>\n<code>\n$sum = 0;\n\
    for ($i = 0, $len = count($array); $i < $len; $i++) {\n    if($array[$i] % 2 ==\
    \ 0)\n        $sum += $array[$i];\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\n$sum\
    \ = 0;\nforeach ($numbers as $number) {\n    if ($number % 2 === 0) {\n      \
    \  $sum += $number;\n    }\n}\n</code>\n<|/ a dscore=1 tags=php,algorithm,arrays,sum\
    \ |>\n<| a dscore=0 |>\n<code>\n$sum = 0;\nforeach ($numbers as $number)\n{\n\
    if ($number % 2 === 0)\n{\n   $sum += $number;\n}\n}\n</code>\n<|/ a tags=php,algorithm,arrays,sum\
    \ |>\n<| c |>\nWhile this code snippet may solve the question, [including an explanation](http://meta.stackexchange.com/questions/114762/explaining-entirely-\u200C\
    \u200Bcode-based-answers) really helps to improve the quality of your post. Remember\
    \ that you are answering the question for readers in the future, and those people\
    \ might not know the reasons for your code suggestion.\n<|/ c |>\n<| a dscore=0\
    \ |>\nYou can do this in many ways but here is one that uses arrays:\n<code>\n\
    $arr = array(1, 4, 6, 2, 7, 3, 8, 0);\n$sum = 0;\nforeach ($arr as $value)\n{\n\
    \    if ($value % 2 != 0)\n", "    foreach ($lst as $i => $num) {\n        if\
    \ ($i % 2 == 0) {\n            $lst_even[] = $num;\n        }\n    }\n    return\
    \ $lst_even;\n}\n", "    // get even indices\n    $even_lst = array_filter(\n\
    \        $lst,\n        function ($x) use ($lst) {\n            return $x % 2\
    \ === 0;\n        },\n        ARRAY_FILTER_USE_BOTH\n    );\n    // add even elements\n\
    \    $add = 0;\n    foreach ($even_lst as $e) {\n        $add += $e;\n    }\n\
    \    return $add;\n}\n", "  $res = 0;\n  foreach ($lst as $i)\n    if ($i % 2\
    \ == 1)\n      $res += $i;\n  return $res;\n}", "    $i = 0;\n    $sum = 0;\n\
    \    foreach ($lst as $elem) {\n        if ($i % 2 == 0) {\n            $sum +=\
    \ $elem;\n        }\n        $i++;\n    }\n    return $sum;\n}\n", "  foreach($lst\
    \ as $i => $v) {\n    if(isset($lst[$i+1])) {\n      if($v%2 != 0) {\n       \
    \ $lst[$i] = $v;\n      }\n    }\n  }\n  return count($lst);\n}\n", "  $even =\
    \ 0;\n  $odd = 0;\n  foreach ($lst as $key => $value) {\n    if ($value % 2 ==\
    \ 0) {\n      $even += $value;\n    } else {\n      $odd += $value;\n    }\n \
    \ }\n  return $even;\n}", "  $result = 0;\n  foreach ($lst as $k => $v) {\n  \
    \  if ($k % 2 == 0) {\n      $result += $v;\n    }\n  }\n  return $result;\n}",
  "    $even = 0;\n    $odd = 0;\n    foreach ($lst as $index => $value) {\n     \
    \   if ($index & 1) {\n            $even += $value;\n        } else {\n      \
    \      $odd += $value;\n        }\n    }\n    return $even;\n}\n", "  foreach($lst\
    \ as $i => $e) {\n    if($i%2 == 1)\n      $lst[$i+1] += $e;\n  }\n  return $lst;\n\
    }\n", "    $even = array_filter($lst, function($value){\n        return ($value\
    \ & 1) == 0;\n    });\n    return count($even) + count($lst) - count($lst);\n}",
  "    foreach ($lst as $key => $val) {\n        if ($key % 2 == 1)\n            $lst[]\
    \ = $val;\n    }\n    return count($lst);\n}\n", "    $result = 0;\n    foreach\
    \ ($lst as $key => $val) {\n        if ($key % 2 == 0)\n            $result +=\
    \ $val;\n    }\n    return $result;\n}\n", "    return $lst[$lst[0] & 1] + $lst[$lst[1]\
    \ & 1] + $lst[$lst[2] & 1];\n}\n", "    $result = 0;\n    for ($i = 1; $i < count($lst);\
    \ $i++)\n        if ($lst[$i] % 2 == 0)\n            $result += $lst[$i];\n  \
    \  return $result;\n}", "    return $lst[1 - ($lst[0] & 1)] + $lst[0];\n}\n</code>\n\
    <|/ a tags=optimization,php,function |>\n<| c |>\nYou sir are a genius! It worked\
    \ like a charm. I did have to change this line: if ($list[1] > $list[2]) { to\
    \ if ($list[1] > $list[0]) because the first element in the array is always odd.\
    \ I also added a line to show that the function returned the sum of all the odd\
    \ elements in the array. Thanks a lot!!\n<|/ c |>\n<| c |>\nOh, yeah I guess I\
    \ missed that. I guess it depends on what your requirements are since I assumed\
    \ the array had odd numbers.\n<|/ c |>\n<| a tags=optimization,php,function |>\n\
    I find that it's often easier to write code in an imperative paradigm that takes\
    \ advantage of other language constructs to do things like this in PHP without\
    \ having it be so slow.\nFor example:\n<code>", "  foreach ($lst as $i => $e)\
    \ {\n    if (isset($lst[$i])) {\n      if ($e % 2 == 0) continue;\n      else\
    \ return $e + $lst[$i];\n    }\n  }\n  return false;\n}", "    $evens = array_filter($lst,\
    \ function ($item, $index) {\n        return $index & 1;\n    });\n    return\
    \ array_sum($evens);\n}\n</code>\nThe only advantage of this solution is that\
    \ it uses PHP 5.3 or higher, but it's very clear what's going on. It's also very\
    \ clearly coded and easy to understand.\n<|/ a dscore=5 |>\n<| c |>\nI like how\
    \ simple this is. I didn't know about the array_filter function. +1\n<|/ c |>\n\
    <| c |>\nI like your solution, but I find it to be rather confusing. Especially\
    \ if you read it again 5 years later when you're looking at the code and trying\
    \ to figure out what's going on. I'd have preferred to write out the code explicitly\
    \ and explain to myself what's going on rather than have it be unreadable or unmaintainable.\
    \ :) But I guess I still prefer your answer.\n<|/ c |>\n<| c |>\nI find it extremely\
    \ easy to read.  Perl programmers have learned some Perl syntax and functions\
    \ on their own.  I find this more readable.\n<|/ c |>\n<| c |>\nI believe this\
    \ answer misses the point of OP. He wants to know how to use PHP's \"array_sum\"\
    \ function with only \"even\" elements of the array. \n\nYour answer shows how\
    \ to filter an array to only get even indices, but the original poster's question\
    \ states that he wants to know how to sum the even elements of the array at odd\
    \ indices. The correct answer to his question is \"array_sum\" with \"array_filter\"\
    . But I'm sure you know that. :)\n<|/ c |>\n<| c |>\nThis solution is much more\
    \ efficient than the accepted solution, since it only needs to iterate over the\
    \ array once, and it avoids the extra array creations.\n<|/ c |>\n<| a dscore=5\
    \ |>\nAs someone who has recently graduated from college, I would recommend array_reduce.\n\
    <code>\n$arr = [4, 6, 10, 8, 2, 5];\n\n$sum = array_reduce($arr, function($total,\
    \ $item){\n    return $total + $item;\n}, 0);\n\nvar_dump($sum);\n</code>\nOutputs:\n\
    <code>\nint 9\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nHow would you extend\
    \ this to get the sum of all elements in a multidimensional array?\n<|/ c |>\n\
    <| c |>\nIt would be done the same way and return the total of the array.\n<|/\
    \ c |>\n<| a tags=php,arrays dscore=", "    $total = 0;\n    foreach ($lst as\
    \ $i => $num) {\n        if ($i % 2 == 1) {\n            $total += $num;\n   \
    \     }\n    }\n    return $total;\n}\n", "  return array_sum(array_filter($lst,\
    \ function($v) use ($lst) {\n    return $v & 1;\n  }));\n}\n\n$result = add($arr);",
  "    return array_sum(array_map(function ($item, $key) {\n        return $key %\
    \ 2 == 1 ? $item + $lst[$key] : $item;\n    }, $lst, array_keys($lst)));\n}\n",
  "    $evens = array_filter($lst, \"is_int\");\n    return count($evens) ? array_sum($evens)\
    \ : 0;\n}\n", "  $sum = 0;\n  foreach ($lst as $k => $v) {\n    if (isset($lst[$k\
    \ + 1]) && $lst[$k + 1] % 2 === 0) {\n      $sum += $v;\n    }\n  }\n  return\
    \ $sum;\n}\n", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i += 2) {\n\
    \        $sum += $lst[$i];\n    }\n    return $sum;\n}", "    return $lst[count($lst)\
    \ - 1] + add($lst);\n}\n", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 2 === 0) {\n            $sum += $lst[$i];\n      \
    \  }\n    }\n    return $sum;\n}\n", "    if (!$lst) {\n        throw new Exception(\"\
    add expects non-empty list of integers lst\");\n    }\n    $sum = 0;\n    $len\
    \ = count($lst);\n    for($i = 0; $i < $len; $i++) {\n        if (!is_int($lst[$i]))\
    \ {\n            throw new Exception('all list elements must be integers');\n\
    \        }\n        if ($i%2 == 0) {\n            $sum += $lst[$i];\n        }\n\
    \    }\n    return $sum;\n}\n", "    $evens = array();\n    foreach ($lst as $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        }\n\
    \    }\n    return count($evens);\n}\n", "    return $lst[0] + (isset($lst[1])\
    \ ? $lst[1] : 0);\n}\n", "    $even = array_filter($lst, function($el) {\n   \
    \     return $el & 1; // is even\n    });\n    $odd = array_filter($lst, function($el)\
    \ {\n        return !$el & 1; // is odd\n    });\n    return count($even) + count($odd);\n\
    }\n", "    if (is_array($lst) && count($lst) > 0) {\n        $sum = 0;\n     \
    \   foreach ($lst as $value) {\n            if ($value % 2 == 1) {\n         \
    \       $sum += $value;\n            }\n        }\n        return $sum;\n    }\
    \ else {\n        throw new \\RuntimeException(\"No lists found\");\n    }\n}\n",
  "    $total = 0;\n    foreach ($lst as $value) {\n        if ($value % 2 == 1) {\n\
    \            $total += $value;\n        }\n    }\n    return $total;\n}\n", " \
    \ return array_sum(array_filter($lst, 'is_odd', ARRAY_FILTER_USE_BOTH));\n}\n",
  "    $sum = 0;\n    foreach ($lst as $idx => $val) {\n        if ($idx % 2 == 0)\
    \ {\n            $sum += $val;\n        }\n    }\n    return $sum;\n}\n", "  \
    \  if (!$lst) {\n        return 0;\n    }\n\n    foreach ($lst as $k => $v) {\n\
    \        if ($k % 2 === 0) {\n            $result = $result + $v;\n        }\n\
    \    }\n    return $result;\n}\n", "\t$ans = 0;\n\tforeach ($lst as $value) {\n\
    \t\tif ($value % 2 == 1) {\n\t\t\t$ans += $value;\n\t\t}\n\t}\n\treturn $ans;\n\
    }\n", "    $sum = 0;\n    foreach ($lst as $number) {\n        if ($number % 2\
    \ == 0) {\n            $sum += $number;\n        }\n    }\n\n    return $sum;\n\
    }\n", "    // initialize evensum to zero\n    $evensum = 0;\n    // initialize\
    \ even to true\n    $even = true;\n    // initialize odd to false\n    $odd =\
    \ false;\n    // iterate through all elements\n    foreach($lst as $element) {\n\
    \        // if the element is even, add it to evensum\n        if ($even) {\n\
    \            $evensum += $element;\n            // if the element is odd, add\
    \ it to oddsum\n        } else {\n            $oddsum += $element;\n        }\n\
    \        // If the element is odd, set it to true, and set it to false if it reaches\
    \ 0\n        // Otherwise, set it to false\n        if ($oddsum > 0) {\n     \
    \       $even = true;\n        } else {\n            $even = false;\n        }\n\
    \    }\n    // Return the even sum\n    return $evensum;\n}", "    foreach ($lst\
    \ as $idx => $el) {\n        if ($idx % 2 != 0) {\n            $lst[$idx] += $el;\n\
    \        }\n    }\n    return $lst;\n}\n", "  foreach ($lst as $i => $elem) {\n\
    \    if ($i % 2 == 0) {\n      $lst += $elem;\n    }\n  }\n\n  return $lst;\n\
    }\n", "    foreach ($lst as $k => $v) {\n        if ($k % 2 == 0) {\n        \
    \    $result += $v;\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nYour code is much more elegant than my solution\n<|/ c |>\n<| c\
    \ |>\n: Yeah, I wasn't sure if the OP wanted something more efficient or not.\n\
    <|/ c |>\n<| a |>\nThis is an alternative solution:\n<code>\n<?php", "    foreach\
    \ ($lst as $key => $value) {\n        if ($key % 2 === 0) {\n            $lst[$key]\
    \ += $value;\n        }\n    }\n    return $lst;\n}\n", "    $sum = 0;\n    foreach\
    \ ($lst as $i) {\n        $sum += $i & 1;\n    }\n    return $sum;\n}\n", "  $sum\
    \ = 0;\n  for ($i = 0; $i < count($lst); $i++) {\n    if ($i % 2 == 0) {\n   \
    \   $sum += $lst[$i];\n    }\n  }\n  return $sum;\n}", "  $sum = 0;\n  $len =\
    \ count($lst);\n  for ($i=0; $i<$len; $i++) {\n    if ($i % 2 == 0) {\n      $sum\
    \ += $lst[$i];\n    }\n  }\n  return $sum;\n}\n</code>\nNow the real fun: what\
    \ if instead of adding all even numbers you wanted to find the average of all\
    \ odd numbers?\n<code>\n<?php", "    if (count($lst) === 0) {\n        return\
    \ 0;\n    }\n    $evens = array();\n    $odds = array();\n    foreach ($lst as\
    \ $i => $x) {\n        if ($i % 2 === 0) {\n            $evens[] = $x;\n     \
    \   } else {\n            $odds[] = $x;\n        }\n    }\n    return count($evens)\
    \ + count($odds);\n}", "  $total = 0;\n  for ($i = 0; $i < count($lst); $i++)\
    \ {\n    if ($i % 2 != 0) {\n      $total += $lst[$i];\n    }\n  }\n  return $total;\n\
    }\n</code>\nFor you next question, there are a lot of ways to do this. One of\
    \ the easiest is to use array_map.\n<code>\n$arr = array(1, 2, 3, 4, 5);\n$evens\
    \ = array_map('add', $arr); // array(2, 4, 6)\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nI edited my post after adding my code. Let me know if you can help\
    \ me\n<|/ c |>\n<| c |>\nThank you for the answer! This worked for me. I'll accept\
    \ the answer after 8 minutes.\n<|/ c |>\n<| c |>\nI used a foreach loop for my\
    \ problem but your answer was great!\n<|/ c |>\n<| a |>\nThe simplest way would\
    \ probably be something like...\n<code>\n$sum = 0;\nforeach ($array as $value)\
    \ {\n    $sum += ($value % 2 == 0) ? $value : 0;\n}\n</code>\n<|/ a dscore=1 tags=arrays,php\
    \ |>\n<| a dscore=1 tags=arrays,php |>\nSince this is an \"interview question\"\
    , I assume you would want to find out how to do this with functional style.  A\
    \ more traditional function would look like this:\n<code>", "  $sum = 0;\n  foreach\
    \ ($lst as $item) {\n    if ($item % 2 == 0) {\n      $sum += $item;\n    }\n\
    \  }\n  return $sum;\n}\n", "    if (empty($lst)) {\n        return null;\n  \
    \  }\n    $evens = array_filter(array_keys($lst), 'is_int');\n    $odds = array_filter(array_keys($lst),\
    \ 'is_int', array_flip($evens));\n    $result = 0;\n    foreach ($evens as $key\
    \ => $value) {\n        $result += $lst[$key] * $value;\n    }\n    foreach ($odds\
    \ as $key => $value) {\n        $result += $lst[$key] * $value;\n    }\n    return\
    \ $result;\n}\n", "  $result = 0;\n  $n = sizeof($lst);\n  for ($i=0; $i<$n; $i++)\
    \ {\n    if (($i % 2)) {\n      $result += $lst[$i];\n    }\n  }\n  return $result;\n\
    }\n", "    $result = 0;\n    foreach ($lst as $i => $val) if ($i % 2 === 0) $result\
    \ += $val;\n    return $result;\n}\n", "    $result = 0;\n    foreach($lst as\
    \ $i => $num) {\n        $result += $num;\n        if ($i % 2 == 1) {\n      \
    \      $result += $lst[$i];\n        }\n    }\n    return $result;\n}\n</code>\n\
    This implementation is very efficient and doesn't use any looping constructs,\
    \ e.g. while, for, foreach, etc.\n<|/ a tags=php |>\n<| c |>\nThat's a good solution.\
    \ I'm very familiar with iterating over arrays in PHP, but I'm just trying to\
    \ figure out how to use `foreach` when it's nested inside another foreach. Your\
    \ solution seems very concise.\n<|/ c |>\n<| a dscore=2 |>\nYou can do this in\
    \ a single foreach loop.\n<code>\n$sum = 0;\n$even = array();\n\nforeach($numbers\
    \ as $number) {\n    if ($number % 2 == 0) {\n        $sum += $number;\n    }\n\
    \    else {\n        $even[] = $number;\n    }\n}\n", "    $evenIndices = array_filter(array_keys($lst),\
    \ 'is_int');\n    if (count($evenIndices) !== count(array_filter(array_keys($lst),\
    \ 'is_odd')))\n        throw new RuntimeException('Need even and odd indices for\
    \ an even length array');\n    $evenSum = 0;\n    foreach ($evenIndices as $i\
    \ => $i) {\n        $evenSum += $lst[$i];\n    }\n    return $evenSum;\n}\n",
  "    $res = [];\n    for ($i = 0, $len = count($lst); $i < $len; $i+=2) {\n    \
    \    $res[] = $lst[$i] + $lst[$i + 1];\n    }\n    return $res;\n}\n", "    foreach\
    \ ($lst as $i => $v) {\n        if ($i % 2 == 1) {\n            $lst[$i] = $v\
    \ + $lst[$i + 1];\n        }\n    }\n\n    return $lst;\n}\n", "    $sum = 0;\n\
    \    foreach($lst as $k=>$v) {\n        if($k%2 == 0) {\n            $sum += $v;\n\
    \        }\n    }\n    return $sum;\n}\n", "  if (!is_array($lst)) {\n    return\
    \ -1;\n  }\n\n  $evenIdxs = array_filter($lst, function ($value) use ($lst) {\n\
    \    return $value % 2 === 0;\n  });\n\n  return count($evenIdxs) + count($lst)\
    \ - count($evenIdxs);\n}\n", "  if (sizeof($lst) < 1) return 0;\n\n  $sum = 0;\n\
    \  for ($i = 0; $i < sizeof($lst); $i++) {\n    if ($i % 2 == 0) {\n      $sum\
    \ += $lst[$i];\n    }\n  }\n  return $sum;\n}\n", "    $sum = 0;\n    foreach\
    \ ($lst as $i => $v) {\n        if ($i & 1) {\n            $sum += $v;\n     \
    \   }\n    }\n    return $sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php\
    \ dscore=1 |>\n<code>\n$evenSum = 0;\n$oddSum = 0;\nforeach($arr as $value){\n\
    \    if($value % 2 == 0){\n        $evenSum += $value;\n    }else{\n        $oddSum\
    \ += $value;\n    }\n}\n</code>\n<|/ a |>\n<| c |>\nPlease add some explanation\
    \ to your answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$array1 = array(1,\
    \ 2, 3, 4);\n$array2 = array(4, 5, 6, 7);\n$array3 = array(8, 9, 10, 11);\n$result\
    \ = array();\n\nforeach($array1 as $k=>$v){\n    array_push($result, $v+$array2[$k]+$array3[$k]);\n\
    }\n\nprint_r($result);", "    return $lst[2] + $lst[3];\n}\n$lst = array(4, 2,\
    \ 6, 7);\necho add($lst);", "    foreach ($lst as $key => $value) {\n        if\
    \ ($value & 1)\n            $lst[$key] += $value;\n    }\n    return $lst;\n}\n",
  "    $result = 0;\n    for ($i = 0, $n = count($lst); $i < $n; $i++) {\n       \
    \ if ($i % 2 == 0) {\n            $result += $lst[$i];\n        }\n    }\n   \
    \ return $result;\n}", "    foreach ($lst as $key => $val) {\n        if ($key\
    \ % 2 == 0) {\n            $lst += $val;\n        }\n    }\n    return $lst;\n\
    }\n", "  $sum = 0;\n  for ($i = 0; $i < count($lst); $i++) {\n    if ($i % 2 ==\
    \ 0) {\n      $sum += $lst[$i];\n    }\n  }\n  return $sum;\n}", "    list($evens,\
    \ $odds) = $lst;\n    return array_sum($evens) + array_sum($odds);\n}\n", "  \
    \  $sum = 0;\n    foreach ($lst as $key => $value) {\n        if ($key % 2 ===\
    \ 1) {\n            $sum += $value;\n        }\n    }\n    return $sum;\n}\n</code>\n\
    <|/ a tags=php,arrays dscore=2 |>\n<| a dscore=2 |>\nThis is my solution\n<code>",
  "    $even = 0;\n    foreach ($lst as $index => $value) {\n        if ($index %\
    \ 2 == 0) {\n            $even += $value;\n        }\n    }\n    return $even;\n\
    }\n", "    $sum = 0;\n    foreach($lst as $k => $v) {\n        if($k % 2 != 0)\
    \ {\n            $sum += $v;\n        }\n    }\n    return $sum;\n}\n", "    $evens\
    \ = array_filter($lst, 'is_int');\n    return count($evens) / 2 - (count($lst)\
    \ % 2);\n}\n", "  $evenIndexes = [];\n  $oddIndexes = [];\n  $evenIndexes = array_filter($lst,\
    \ \"is_int\");\n  $oddIndexes = array_filter($lst, \"is_int\", \"odd\");\n  return\
    \ $evenIndexes[0] + $oddIndexes[0];\n}", "    $evens = array();\n    $odds = array();\n\
    \    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 2\
    \ == 0) {\n            $evens[] = $lst[$i];\n        } else {\n            $odds[]\
    \ = $lst[$i];\n        }\n    }\n    return array_sum(array_merge($evens, $odds));\n\
    }\n</code>\n<|/ a tags=math,php |>\n<| c |>\n: I see what you're saying, but in\
    \ this example the sum is 7.  If the input array was the array `[4, 2, 6, 7]`\
    \ then your method would return 7.\n<|/ c |>\n<| c |>\n- yes I am not saying this\
    \ is what he was looking for - my answer is just to show the idea\n<|/ c |>\n\
    <| c |>\n: Okay, fair enough.  In that case I recommend you delete the answer\
    \ as it is wrong.  Thanks!\n<|/ c |>\n<| c |>\n: I see your point, but I believe\
    \ that my answer is correct - it is the correct approach to solving the problem\
    \ of adding two arrays while taking only unique elements. Of course, there might\
    \ be better algorithms, I'm just providing one that could be used.\n<|/ c |>\n\
    <| c |>\n: Thanks, I did not know about array_unique. Yet another reason to stay\
    \ away from my solutions.\n<|/ c |>\n<| a tags=math,php |>\n<code>\n$array1 =\
    \ array(4, 2, 6, 7);\n$array2 = array(4, 5, 6, 7);\n", "    $even = 0;\n    $odd\
    \ = 0;\n    foreach ($lst as $i) {\n        if ($i % 2 == 0) {\n            $even\
    \ += $i;\n        } else {\n            $odd += $i;\n        }\n    }\n    return\
    \ $even - $odd;\n}\n</code>\nThe function can be used for multiple arrays by using\
    \ a foreach loop:\n<code>\n<?php", "  foreach ($lst as $i => $e) {\n    if ($i\
    \ % 2 == 0) {\n      $lst[] = $e;\n    }\n  }\n  return $lst;\n}", "    $even\
    \ = array();\n    $odd = array();\n\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $even[] = $lst[$i];\n        } else\
    \ {\n            $odd[] = $lst[$i];\n        }\n    }\n    return array_sum($even)\
    \ + array_sum($odd);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nthank you for this\
    \ simple solution, but i don't want use loop in my code.\n<|/ c |>\n<| c |>\n\
    You cant do it without a loop\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", " \
    \ return array_sum(array_filter(\n    array_map(\n      function($v) { return\
    \ $v%2==0 ? $v+2 : $v; },\n      $lst\n    ),\n    function($v) { return $v!=0;\
    \ }\n  ));\n}\n", "    $even = 0;\n    $odd = 0;\n    foreach ($lst as $v) {\n\
    \        if ($v & 1) {\n            $even += $v;\n        } else {\n         \
    \   $odd += $v;\n        }\n    }\n    return $even;\n}\n</code>\n<|/ a dscore=3\
    \ tags=php,arrays |>\n<| a tags=php,arrays |>\nA functional alternative to Mark\
    \ Meyer's answer is:\n<code>\n$even = array_filter(function($a) { return $a &\
    \ 1; }, $list);\n$odd = array_filter(function($a) { return $a & 2; }, $list);\n\
    </code>\n<|/ a dscore=3 |>\n<| a |>\n<code>", "    $sum = 0;\n    $even_sum =\
    \ 0;\n    $odd_sum = 0;\n    foreach ($lst as $index => $value) {\n        if\
    \ ($index % 2 == 0) {\n            $sum += $value;\n        } else {\n       \
    \     $even_sum += $value;\n        }\n    }\n    return $sum + $even_sum;\n}\n",
  "  if (!is_array($lst) || empty($lst)) return 0;\n  $res = 0;\n  $n = count($lst);\n\
    \  foreach ($lst as $i => $val) {\n    if ($i % 2 == 0) {\n      $res += $val;\n\
    \    }\n  }\n  return $res;\n}\n", "    return array_sum(array_slice($lst,1,count($lst)));\n\
    }", "    $res = [];\n    foreach ($lst as $value) {\n        if ($value & 1) {\n\
    \            $res[] = $value;\n        }\n    }\n    return $res;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nAwesome. Thank you very much. I had tried array_map,\
    \ but didn't think of using the key parameter. Thanks again for your help.\n<|/\
    \ c |>\n<| c |>\nI updated my answer to account for duplicates in the original\
    \ array by just appending the value to the array that already exists.\n<|/ c |>\n\
    <| c |>\nThank you for the update. I'm new to php and didn't realize you could\
    \ use array_unique() on a multidimensional array. Great work.\n<|/ c |>\n<| c\
    \ |>\nNo problem, glad I could help. If you feel it solved your problem please\
    \ consider marking it as the solution. Good luck with your project! :)\n<|/ c\
    \ |>\n<| c |>\nThanks for this. I've been working on this for a while but no matter\
    \ what I try I can't seem to get array_unique to work. The keys in the array still\
    \ appear. I've tried using array_map with my array_unique version and my array_unique\
    \ version but no luck so far. Anything else I can try?\n<|/ c |>\n<| a |>\nIf\
    \ you have PHP >= 5.5 you can use the array_column function :\n<code>\n$arr =\
    \ array(4, 2, 6, 7);\n$arr2 = array_column($arr, 1, 0);\nprint_r($arr2);\n</code>\n\
    will output :\n<code>\nArray ( [0] => 4 [2] => 6 )\n</code>\n<|/ a dscore=4 tags=php,arrays\
    \ |>\n<| c |>\nI upvoted you because the OP asked for an array solution. But your\
    \ solution is also a PHP 5.5 function\n<|/ c |>\n<| c |>\nAh yes, I saw the note\
    \ in the docs and immediately thought \"that's a big if\". Since I still have\
    \ PHP 5.2, I probably shouldn't be using it though, thank you for the answer though.\n\
    <|/ c |>\n<| c |>\nI know, but the OP didn't mention it so I thought I should\
    \ add that :P\n<|/ c |>\n<| a dscore=3 |>\nIf you're okay with using array_map\
    \ and array_unique:\n<code>\n$a = array(4, 2, 6, 7);\n$b = array_map(function($a)\
    \ { return $a; }, array_unique($a));\n</code>\n<|/ a tags=php,arrays |>", "  \
    \  $sum = 0;\n    foreach ($lst as $n) {\n        if ($n % 2 == 0) {\n       \
    \     $sum = $sum + $n;\n        }\n    }\n    return $sum;\n}\n", "    foreach($lst\
    \ as $key => $val) {\n        // if we're not at even indexes, we ignore\n   \
    \     if ($key % 2 == 0) {\n            continue;\n        }\n        // otherwise\
    \ return the sum of the two elements\n        return $val + $lst[$key + 1];\n\
    \    }\n}\n", "  // Add even numbers in odd indices:\n  $evens = 0;\n  foreach\
    \ ($lst as $key => $value) {\n    if ($key % 2 === 0) {\n      $evens += $value;\n\
    \    }\n  }\n\n  return $evens;\n}\n", "    foreach ($lst as $key => $value) {\n\
    \        if ($key % 2 === 0) {\n            $total = $value;\n        }\n    }\n\
    \    return $total;\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\n$odds = array();\n\
    $evens = array();\n\nforeach($values as $key => $value)\n{\n    if ($key % 2 ==\
    \ 1)\n    {\n        $evens[] = $value;\n    }\n    else\n    {\n        $odds[]\
    \ = $value;\n    }\n}\n\n$total = array_sum($odds);\n$total += array_sum($evens);\n\
    </code>\n<|/ a tags=php,math dscore=2 |>\n<| a tags=php,math dscore=1 |>\nThis\
    \ is quite simply a case of iterating through the array and adding each element\
    \ to an array, or vice versa, depending on what it is. Then use array_sum to get\
    \ the total sum of the array.\n<code>\n$a = array(2, 4, 6, 8);\n$b = array(1,\
    \ 3, 5, 7);\n\n$total = 0;\n\nforeach ($a as $key => $value) {\n    $total +=\
    \ $value; // Add each value to $total\n}\n\necho array_sum($b); // Get the total\
    \ sum of $b\n</code>\n<|/ a |>\n<| c |>\nI believe that this is probably the most\
    \ efficient method\n<|/ c |>\n<| a |>\n<code>\n$a = array(4, 2, 6, 7);\n\n$b =\
    \ array(4, 2, 6, 7);\n\n$c = array_sum($a);\n\n$d = array_sum($b);\n\n$c = $c\
    \ + $d;\n\nprint_r($c);\n</code>\n<|/ a tags=php,math dscore=1 |>\n<| c |>\nThis\
    \ is not what the OP is asking, as he wants to add only the even elements in the\
    \ two arrays.\n<|/ c |>\n<| a tags=php,math dscore=1 |>\nI came up with this solution:\n\
    <code>\n$a = array(2, 4, 6, 8);\n\n$b = array(1, 3, 5, 7);\n\n$sumEven = 0;\n\
    $sumOdd = 0;\n\nforeach($a as $key => $value) {\n\n    if( $key % 2 == 0 ) {\n\
    \        $sumEven += $value;\n    } else {\n        $sumOdd += $value;\n    }\n\
    \n}\n\n$sumTotal =  $sumEven + $sumOdd;\n\necho $sumTotal;\n</code>\n<|/ a |>\n\
    <| a tags=php,math |>\nYou can loop through your arrays, and add the even numbers\
    \ to the arrays of sums, and the odd numbers to the arrays of sums.  After the\
    \ loop has completed, you have a array of sums.\n<code>", "  $sum = 0;\n  $len\
    \ = count($lst);\n  for ($i = 0; $i < $len; ++$i) {\n    if ($i % 2 == 0) {\n\
    \      $sum += $lst[$i];\n    }\n  }\n  return $sum;\n}\n", "\t$sum = 0;\n\tforeach($lst\
    \ as $i => $item) {\n\t\tif($i % 2 == 1) {\n\t\t\t$sum += $item;\n\t\t}\n\t}\n\
    \treturn $sum;\n}\n", "    $evens = array();\n    $odds = array();\n\n    foreach\
    \ ($lst as $k => $v) {\n        if ($k % 2 === 0) {\n            $evens[] = $v;\n\
    \        } else {\n            $odds[] = $v;\n        }\n    }\n    return $evens\
    \ + $odds;\n}\n", "    $sum = 0;\n    $n = count($lst);\n    for($i = 0; $i <\
    \ $n; $i++) {\n        if($i % 2 != 0)\n            $sum = $sum + $lst[$i];\n\
    \    }\n    return $sum;\n}\n", "    return $lst[array_keys($lst,array_search($lst,$lst,1))[0]];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhat if the array is empty ? I get the\
    \ error `Undefined offset: 3` on line 9...\n<|/ c |>\n<| a tags=php,arrays,algorithm\
    \ dscore=0 |>\n<code>"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
