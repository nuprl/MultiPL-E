name: HumanEval_118_get_closest_vowel
language: php
prompt: "<?php\n// You are given a word. Your task is to find the closest vowel that\
  \ stands between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
  yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
  quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel($word)\
  \ {\n"
tests: "function candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Above\") !== \"\
  o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    // Your code here\n    $vowels = array(\"a\", \"e\", \"i\", \"\
    o\", \"u\");\n    $vowelsCount = array();\n    foreach ($vowels as $vowel) {\n\
    \        $vowelsCount[$vowel] = 0;\n    }\n    foreach (str_split($word) as $char)\
    \ {\n        $charLower = strtolower($char);\n        foreach ($vowels as $vowel)\
    \ {\n            if ($charLower == $vowel) {\n                $vowelsCount[$vowel]++;\n\
    \            }\n        }\n    }\n    $sortedVowels = array();\n    foreach ($vowelsCount\
    \ as $key => $val) {\n        if ($val == 1) {\n            $sortedVowels[] =\
    \ $key;\n        }\n    }\n    sort($sortedVowels);\n    $lastVowel = isset($sortedVowels[count($sortedVowels)\
    \ - 1]) ? $sortedVowels[count($sortedVowels) - 1] : '';\n    return $lastVowel;\n\
    }", "    $vowel_array = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for($i=0;$i<strlen($word);$i++){\n\
    \        for($j=$i;$j<strlen($word);$j++){\n            if($word[$i] != $word[$j]){\n\
    \                break;\n            }\n        }\n        if($j-$i <= strlen($vowel_array)\
    \ - 1 ){\n            return $vowel_array[$j-$i];\n        }\n    }\n    return\
    \ \"\";\n}\n</code>\n<|/ a tags=string,php,function,arrays,algorithm |>\n<| a\
    \ dscore=3 |>\n<code>\n$vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n$word = \"\
    your_word\";\nforeach ($vowels as $v) {\n    $pos = strrpos($word, $v);\n    if\
    \ ($pos !== false && $pos < strlen($word) - strlen($v)) {\n        return $v;\n\
    \    }\n}\n</code>\n<|/ a tags=string,php,function,arrays,algorithm |>\n<| c |>\n\
    This code does not work! It returns `u` as result for `get_closest_vowel(\"awesome\"\
    )`.\n<|/ c |>\n<| c |>\n: Oops, that's what I get for trusting answers in SO instead\
    \ of testing/verifying\n<|/ c |>\n<| c |>\nYeap, I realized that after I posted\
    \ my comment... :)\n<|/ c |>\n<| a tags=string,php,function,arrays,algorithm |>\n\
    <code>", "    \n    // get first consonant and last consonant\n    $firstConsonant\
    \ = substr($word, 0, 1);\n    $lastConsonant = substr($word,-1);\n\n    // if\
    \ the first and last consonant are both vowel then return the first\n    // one.\
    \ Else, get the first vowel between first and last consonant.\n    return $firstConsonant\
    \ == 'a' || $firstConsonant == 'o' || $firstConsonant == 'i' || $firstConsonant\
    \ == 'u' ? $firstConsonant : \n            (\n                $lastConsonant ==\
    \ 'a' || $lastConsonant == 'o' || $lastConsonant == 'i' || $lastConsonant == 'u'\
    \ ?  $lastConsonant : \n                (\n                    substr($word,1,1)\
    \ != substr($word,0,1) ?\n                    (\n                        substr($word,1,2)\
    \ != substr($word,0,1) ?\n                        (\n                        \
    \    substr($word,1,3) != substr($word,0,1) ?\n                            (\n\
    \                                substr($word,1,4) != substr($word,0,1) ?\n  \
    \                              (\n                                    substr($word,1,5)\
    \ != substr($word,0,1) ?\n                                    (\n            \
    \                            substr($word,1,6) != substr($word,0,1) ?\n      \
    \                                  (\n                                       \
    \     substr($word,1,7) != substr($word,0,1) ?\n                             \
    \               get_closest_vowel(substr($word,1,7)) :\n                     \
    \                       substr($word,1,6) :\n                                \
    \            substr($word,1,5) :\n                                           \
    \ substr($word,1,4) :\n                                            substr($word,1,3)\
    \ :\n                                            substr($word,1,2) :\n       \
    \                                     substr($word,1,1) :\n                  \
    \                          substr($word,0,1) :\n                             \
    \               ''\n                                        ) :\n            \
    \                            substr($word,1,5) :\n                           \
    \             substr($word,1,4) :\n                                        substr($word,1,3)\
    \ :\n                                        substr($word,1,2) :\n           \
    \                             substr($word,1,1) :\n                          \
    \              substr($word,0,1) :\n                                        ''\n\
    \                                    ) :\n                                   \
    \ substr($word,1,4) :\n                                    substr($word,1,3) :\n\
    \                                    substr($word,1,2) :\n                   \
    \                 substr($word,1,1) :\n                                    substr($word,0,1)\
    \ :\n                                    ''\n                                )\
    \ :\n                                substr($word,1,4) :\n                   \
    \             substr($word,1,3) :\n                                substr($word,1,2)\
    \ :\n                                substr($word,1,1) :", "  // your code here\n\
    \  $vowels= array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\",\"e\", \"i\", \"o\"\
    , \"u\",\"a\", \"e\", \"i\", \"o\", \"u\",\"y\", \"e\", \"i\", \"o\", \"u\");\n\
    \  $count= str_word_count($word);\n  if($count>0){\n    for($i=count($word);$i>0;$i--){\n\
    \      if(in_array($word[$i],$vowels)){\n        $vowel_index= array_search($word[$i],\
    \ $vowels);\n        $vowel_index++;\n        if($word[$i+$vowel_index]==$word[$i]&&$word[$i-$vowel_index]==$word[$i]){\n\
    \          return $word[$i];\n        }\n      }\n    }\n  }\n  return \"\";\n\
    }\n</code>\n<|/ a tags=php,algorithm,string |>\n<| c |>\nYour solution doesn't\
    \ work for this test case: `get_closest_vowel(\"ab\")`\n<|/ c |>\n<| c |>\nNo,it\
    \ doesn't work,because I haven't used the function you have written.\n<|/ c |>\n\
    <| c |>\nNo, `get_closest_vowel(\"ab\")` will output `\"a\"` and not `\"\"`\n\
    <|/ c |>\n<| c |>\nYes, It outputs a, but this is not a problem. That's not a\
    \ problem with my solution. My solution is just an example to show you how it\
    \ works.\n<|/ c |>\n<| c |>\nOk, I see. But your solution has some problems, for\
    \ example: `get_closest_vowel(\"ab\")`. It will output `\"a\"`, but I want it\
    \ to output `\"\"`.\n<|/ c |>\n<| a dscore=0 tags=php,algorithm,string |>\nYou\
    \ don't need to reinvent the wheel, there are many PHP libraries out there that\
    \ help you find what you're looking for, here's my take on it.\n<code>", "   \
    \ $vowels = \"aAeEiIoOuU\";\n    $vowels_array = str_split($vowels);\n    foreach($vowels_array\
    \ as $each_vowel) {\n        if(in_array($each_vowel, $word)) {\n            return\
    \ $each_vowel;\n        }\n    }\n    return \"\";\n}\n\n$test = get_closest_vowel(\"\
    yogurt\");\necho $test;", "    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    $words = str_split($word);\n    sort($words);\n    $firstVowel = \"\";\n\
    \    $lastVowel = \"\";\n    for ($i = count($words) -1; $i >= 0; $i--) {\n  \
    \      if (in_array($words[$i], $vowels)) {\n            if ($firstVowel == \"\
    \") {\n                $firstVowel = $words[$i];\n            }\n            if\
    \ ($lastVowel == \"\") {\n                $lastVowel = $words[$i];\n         \
    \   }\n        }\n    }\n    if ($firstVowel == \"\" && $lastVowel == \"\") {\n\
    \        return \"\";\n    }\n    return $firstVowel;\n}\n", "    if (!$word)\n\
    \        return \"\";\n    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \    $vowelsLeft = array_slice($vowels, 0, count($vowels));\n    $vowelsRight\
    \ = array_slice($vowels, count($vowels), count($vowels));\n    \n    foreach ($word\
    \ as $letter) {\n        if (in_array($letter, $vowelsLeft))\n            return\
    \ $letter;\n        if (in_array($letter, $vowelsRight))\n            return $letter;\n\
    \    }\n    return \"\";\n}\n", "    $result = '';\n    $words = str_word_count($word,\
    \ 1);\n    foreach ($words as $word) {\n        $chars = str_split($word);\n \
    \       foreach ($chars as $char) {\n            if ($char == \"a\" || $char ==\
    \ \"e\" || $char == \"i\" || $char == \"o\" || $char == \"u\") {\n           \
    \     $result = $char;\n                break;\n            }\n        }\n   \
    \ }\n    return $result;\n}\n</code>\n<|/ a tags=string,php |>\n<| c |>\nI like\
    \ this solution the best. But I wonder why you didn't accept the one from. I think\
    \ his answer is more complete.\n<|/ c |>\n<| c |>\nI wanted to give credit but\
    \ you already did, so I chose his one. Thank you\n<|/ c |>\n<| c |>\nThank you\
    \ for the answer. I think it is better to use *preg_split* in my opinion than\
    \ str_word_count\n<|/ c |>\n<| c |>\nI agree with you that `str_word_count` is\
    \ more correct in this case, but I posted an answer using `str_split` so I could\
    \ show how you could get the vowel without having to use `str_word_count` (which\
    \ is a preg_split). `str_word_count` is more generic though.\n<|/ c |>\n<| a tags=string,php\
    \ dscore=2 |>\nI wanted to offer a recursive solution, but it doesn't work when\
    \ more than one vowel follows a consonant. Also, it's not clear what to do in\
    \ the case where the word is empty or contains only vowels. So, I ended up using\
    \ a loop to find the first vowel in each word, and return the word when it matches\
    \ the first vowel.\n<code>", "    $vowels = \"aeiou\";\n    $vowels_array = explode('',$vowels);\n\
    \    $vowels_array_count = $vowels_array[0];\n    $vowels_array_count_left = $vowels_array[1];\n\
    \    $vowels_array_count_right = $vowels_array[2];\n    \n    $word_len = strlen($word);\n\
    \    \n    for($i=$word_len-1;$i>=0;$i--){\n        if($word[$i]==$vowels_array_count_right){\n\
    \            $next_char = substr($word,$i+1);\n            if($next_char==$vowels_array_count_left){\n\
    \                return $vowels_array_count_left;\n            }\n        }\n\
    \    }\n}", "    return substr($word, 1, 2);\n}\n", "    $vowels = array('a','e','i','o','u');\n\
    \    $consonants = array(\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\"\
    ,\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\",\"th\"\
    ,\"sh\",\"ph\",\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"\
    n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\",\"th\",\"sh\"\
    ,\"ph\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\"\
    ,\"t\",\"v\",\"w\",\"x\",\"y\",\"z\",\"th\",\"sh\",\"ph\",\"p\",\"q\",\"r\",\"\
    s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\",\"th\",\"sh\",\"ph\",\"b\",\"c\",\"d\"\
    ,\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\"\
    ,\"v\",\"w\",\"x\",\"y\",\"z\",\"th\",\"sh\",\"ph\",\"h\",\"j\",\"k\",\"l\",\"\
    m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\",\"th\",\"\
    sh\",\"ph\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\"\
    ,\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\",\"th\",\"sh\",\"ph\",\"b\",\"c\",\"\
    d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"\
    t\",\"v\",\"w\",\"x\",\"y\",\"z\",\"th\",\"sh\",\"ph\",\"t\",\"s\",\"t\",\"v\"\
    ,\"w\",\"x\",\"y\",\"z\",\"th\",\"sh\",\"ph\",\"b\",\"c\",\"d\",\"f\",\"g\",\"\
    h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"w\",\"\
    x\",\"y\",\"z\",\"th\",\"sh\",\"ph\",\"r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\"\
    ,\"z\",\"th\",\"sh\",\"ph\",\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\",\"\
    th\",\"sh\",\"ph\",\"f\",\"g\",\"h\",\"j\",\"k\",\"", "    $vowels = array(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n    $result = '';\n    for($i = strlen($word)\
    \ - 2; $i >= 0; $i--) {\n        if (in_array($word[$i], $vowels)) {\n       \
    \     $result = ($word[$i] == $word[$i + 1]) ? $word[$i] : '';\n            break;\n\
    \        }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\n\
    It should be noted that this isn't an optimal solution because the substring search\
    \ isn't being performed for each letter in the string. You'll need to consider\
    \ how to optimize that if you plan on using this with larger strings.\n<|/ c |>\n\
    <| a dscore=3 |>\nThis is O(n) time, O(1) space. It checks every character of\
    \ the string twice.\n<code>", "\t$vowels = ['a','e','i','o','u'];\n\t$vowel_count\
    \ = array_count_values($vowels);\n\tforeach ($vowels as $v){\n\t\tif ($vowel_count[$v]\
    \ == 1) {\n\t\t\tif (strpos($word,$v) !== false){\n\t\t\t\treturn $v;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn '';\n}", "    \n    $vowels = array(\"a\", \"e\", \"i\"\
    , \"o\", \"u\");\n    \n    // Convert the given word to lowercase to make the\
    \ searching faster.\n    $lower = strtolower($word);\n    \n    $vowel_index =\
    \ 0;\n    \n    // Compare to see which vowel index has the biggest distance from\
    \ the rightmost consonant.\n    foreach ($vowels as $key => $val) {\n        $distance\
    \ = levenshtein($lower, substr($word, 0, strrpos($word, $val)));\n        if ($distance\
    \ < $vowel_index) {\n            $vowel_index = $distance;\n        }\n    }\n\
    \    \n    // Return empty string if you didn't find any vowel met the above condition.\n\
    \    if ($vowel_index == 0) {\n        return \"\";\n    }\n    \n    return $vowels[$vowel_index];\n\
    }\n", "    $vowels_left  = array('a', 'e', 'i', 'o', 'u');\n    $vowels_right\
    \ = array('e', 'i', 'o', 'u');\n    $vowels_end   = array('e', 'i', 'o', 'u');\n\
    \    $vowels_start = array('a', 'e', 'i', 'o', 'u');\n    $vowels_middle = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $vowels_others = array('a', 'e', 'i', 'o', 'u', 'y');\n\
    \n    $last_char = $word[strlen($word) - 1];\n    if (in_array($last_char, $vowels_left))\
    \ {\n        array_push($vowels_right, $last_char);\n    }\n    if (in_array($last_char,\
    \ $vowels_right)) {\n        array_push($vowels_left, $last_char);\n    }\n  \
    \  if (in_array($last_char, $vowels_end)) {\n        array_push($vowels_end, $last_char);\n\
    \    }\n    if (in_array($last_char, $vowels_start)) {\n        array_push($vowels_start,\
    \ $last_char);\n    }\n    if (in_array($last_char, $vowels_middle)) {\n     \
    \   array_push($vowels_middle, $last_char);\n    }\n    if (in_array($last_char,\
    \ $vowels_others)) {\n        array_push($vowels_others, $last_char);\n    }\n\
    \n    $result = \"\";\n    $count = count($vowels_left);\n    for ($i = 0; $i\
    \ < $count; $i++) {\n        $index = count($vowels_left) - 1 - $i;\n        $letter\
    \ = $vowels_left[$index];\n        $word1 = substr($word, 0, strlen($word) - 1);\n\
    \        $word2 = substr($word1, strlen($word) - 1);\n        $result = $letter;\n\
    \        if (strpos($word, $letter) !== false) {\n            $result = $letter;\n\
    \        }\n        if (strpos($word1, $letter) !== false) {\n            $result\
    \ = $letter;\n        }\n        if (strpos($word2, $letter) !== false) {\n  \
    \          $result = $letter;\n        }\n        if (strpos($word, $letter) ===\
    \ false) {\n            $result = \"\";\n        }\n        if (strpos($word1,\
    \ $letter) === false) {\n            $result = \"\";\n        }\n        if (strpos($word2,\
    \ $letter) === false) {\n            $result = \"\";\n        }\n        if (strpos($word,\
    \ $letter) === false && strpos($word1, $letter) === false && strpos($word2, $letter)\
    \ === false) {\n            $result = \"\";\n        }\n        if (strpos($word,\
    \ $letter) === false && strpos($word1, $letter) === false && strpos($word2, ",
  "    $vowels = array('a','e','i','o','u');\n    sort($vowels);\n    $vowel = $vowels[count($vowels)-1];\n\
    \    $vowel_count = 0;\n    for($i=1;$i<strlen($word);$i++) {\n        $letter\
    \ = strtolower(substr($word,$i,1));\n        if(in_array($letter,$vowels)) {\n\
    \            $vowel_count++;\n            if($vowel_count == 1)\n            \
    \    return $letter;\n            elseif($vowel_count > 1)\n                break;\n\
    \        }\n    }\n    return \"\";\n}\n", "    $vowels = ['A','E','I','O','U'];\n\
    \    $consonants = ['B','C','D','F','G','H','J','K','L','M','N','P','R','S','T','V','W','Y'];\n\
    \    $reversed_word = $word;\n    $reversed_word = strrev($reversed_word);\n \
    \   $reversed_word = substr($reversed_word,0,-1);\n    $vowel_arr = array();\n\
    \    $consonant_arr = array();\n    $len = strlen($word);\n    for ($i=0; $i <\
    \ $len; $i++) {\n        if (in_array(substr($reversed_word,$i,1),$vowels)) {\n\
    \            $vowel_arr[] = substr($reversed_word,$i,1);\n        }\n        if\
    \ (in_array(substr($reversed_word,$i,1),$consonants)) {\n            $consonant_arr[]\
    \ = substr($reversed_word,$i,1);\n        }\n    }\n    $vowel_arr[] = '';\n \
    \   $consonant_arr[] = '';\n    $len = count($vowel_arr);\n    $index = -1;\n\
    \    for($i=0;$i<$len;$i++) {\n        $v1 = $vowel_arr[$i];\n        $v2 = $vowel_arr[$len-1-$i];\n\
    \        if($v1==$v2) {\n            $index = $i;\n            break;\n      \
    \  }\n    }\n    if ($index>-1) {\n        return $vowel_arr[$index];\n    }\n\
    \    $index = -1;\n    for($i=0;$i<$len;$i++) {\n        $v1 = $consonant_arr[$i];\n\
    \        $v2 = $consonant_arr[$len-1-$i];\n        if($v1==$v2) {\n          \
    \  $index = $i;\n            break;\n        }\n    }\n    if ($index>-1) {\n\
    \        return $consonant_arr[$index];\n    }\n    return '';\n}", "    return\
    \ \"\";\n}\n", "    if (!isset($word[0]) || !is_string($word)) {\n        return\
    \ false;\n    }\n\n    $vowels = array('a', 'e', 'i', 'o', 'u', 'y');\n    $vowels_count\
    \ = count($vowels);\n\n    $last_vowel = array_pop($vowels);\n\n    if ($last_vowel\
    \ == 'a') {\n        $first_vowel = array_shift($vowels);\n    } else {\n    \
    \    $first_vowel = $last_vowel;\n    }\n\n    return $word[strlen($word) - strlen($first_vowel)\
    \ - $vowels_count];\n}\n</code>\n<|/ a tags=php,string |>\n<| c |>\nThe question\
    \ was about finding \"closest vowel\" instead of \"next vowel\" :)\n<|/ c |>\n\
    <| c |>\n- I guess you are right :) My bad.\n<|/ c |>\n<| a dscore=0 tags=php,string\
    \ |>\n<code>\n<?php", "    if (count($word) > 1 && is_string($word) && isset($word[$word[0]\
    \ - 1]) && $word[$word[0] - 1] == 'a') {\n        if (isset($word[$word[count($word)\
    \ - 1]]) && $word[$word[count($word) - 1]] == 'u') {\n            return $word[count($word)\
    \ - 1];\n        }\n    }\n\n    $vowels = array('a','o','u','A','O','U');\n \
    \   $vowels_count = count($vowels);\n    $vowel_length = 0;\n\n    for ($i = count($word)\
    \ - 2; $i >= 0; $i--) {\n        if (in_array($word[$i], $vowels)) {\n       \
    \     $vowel_length++;\n            if ($vowel_length == $vowels_count) {\n  \
    \              return $word[$i];\n            }\n        }\n    }\n\n    return\
    \ '';\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php |>\n<code>\n$str = 'ABCCDE';\n\
    $vowels = 'AEIOUaeiou';\n$len = strlen($str);\n$count = preg_match_all('/[AEIOUaeiou]/i',\
    \ $str, $matches, PREG_OFFSET_CAPTURE);\n$count = count($matches[0]);\n$vowel_positions\
    \ = array();\nfor ($i = 0; $i < $count; $i++) {\n    if (strpos($vowels, $matches[0][$i][1])\
    \ !== FALSE) {\n        $vowel_positions[] = $i;\n    }\n}\n$max_offset = max($vowel_positions);\n\
    $result = $matches[0][$max_offset][0];\nvar_dump($result);\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis is very complicated and probably slower than just running\
    \ a single regex against the string. Also, this doesn't work if there are no vowels\
    \ in the string, such as with 'AB', which would be the case if you tried the other\
    \ answer here. Also, this doesn't check for repeated vowels, e.g. \"ABCCDE\",\
    \ should return 'E' but it returns 'A' because \"A\" is a repeated vowel.\n<|/\
    \ c |>\n<| c |>\nIt seems to work, though, so I'll leave it as is. Thanks for\
    \ your input.\n<|/ c |>\n<| c |>\nI'm not a huge fan of regex, but this doesn't\
    \ seem too complicated and probably faster than a regex solution.\n<|/ c |>\n\
    <| c |>\nHe said the string contains only letters. My regex solution works with\
    \ all characters. Regardless, you are correct that there are edge cases where\
    \ this won't work and you probably shouldn't ", "  if (strlen($word) > 3 && preg_match(\"\
    /^[aeiou]+$/i\", $word)) {\n    $vowels_array = array(\"a\", \"e\", \"i\", \"\
    o\", \"u\");\n    $vowels_count = count($vowels_array);\n\n    // Find the count\
    \ of vowels and subtract that count from lenght of word\n    $vowels_count -=\
    \ strlen($word) % $vowels_count;\n\n    // Find the index of the last consonant\n\
    \    $consonant_pos = strlen($word) - 1;\n    while ($consonant_pos >= 0 && !preg_match(\"\
    /[aeiou]$/i\", $word[$consonant_pos])) {\n      $consonant_pos -= 1;\n    }\n\n\
    \    // Return empty string if there is no vowel between last and next consonant\n\
    \    if ($consonant_pos < 0) {\n      return \"\";\n    }\n\n    // Find index\
    \ of vowel\n    $vowel_pos = $vowels_count + $consonant_pos + 1;\n    $closest_vowel\
    \ = $vowels_array[($vowel_pos - $vowels_count) % $vowels_count];\n\n    return\
    \ $closest_vowel;\n  }\n\n  return \"\";\n}\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ solution is very elegant.  I've been trying to think of a way to do this without\
    \ using a regular expression.  My code is a bit more complex than this example,\
    \ but it would be great to see a solution that doesn't involve using regular expressions.\n\
    <|/ c |>\n<| c |>\nThe solution with regular expressions works fine.\n<|/ c |>\n\
    <| c |>\nYes, I understand how this works.  I am looking for something that doesn't\
    \ use regular expressions.  I was just thinking it would be cool to see a solution\
    \ without them.\n<|/ c |>\n<| c |>\nI added a PHP implementation\n<|/ c |>\n<|\
    \ a |>\nThe original question asked for a non-regex solution. Here's an implementation\
    \ using recursion:\n<code>", "  $vowels = \"AEIOUaeiou\";\n  $words = explode(\"\
    \ \", $word);\n  $vowels_found = array();\n  foreach ($words as $k => $w) {\n\
    \    if (preg_match('/[AEIOUaeiou]$/', $words[$k])) {\n      $vowels_found[] =\
    \ $words[$k];\n    }\n  }\n  $vowels_found = array_filter($vowels_found);\n  \n\
    \  return $words[count($vowels_found)-1];\n}\n</code>\nThis approach is very fast\
    \ and reliable, but there is one caveat. Some words are found twice in the array,\
    \ so you have to find a way to filter out duplicates.\n<|/ a tags=php,string |>\n\
    <| a tags=php,string |>\nYou could use preg_replace() and explode(). \n<code>\n\
    <?php\n", "    $vowels = \"aeiou\";\n    $vowels_count = count($vowels);\n   \
    \ $vowels_str = '';\n    $prev_consonant = substr($word, 0, 1);\n\n    for ($i\
    \ = 1; $i < strlen($word); $i++) {\n        $this_consonant = substr($word, $i,\
    \ 1);\n        if ($prev_consonant != $this_consonant) {\n            if (strpos($vowels,\
    \ $this_consonant) !== FALSE) {\n                $vowels_str = $this_consonant;\n\
    \            }\n        }\n        $prev_consonant = $this_consonant;\n    }\n\
    \    if (strpos($vowels, $vowels_str) !== FALSE) {\n        return $vowels_str;\n\
    \    }\n\n    return '';\n}\n</code>\n<|/ a tags=php,substr,string |>\n<| a tags=php,substr,string\
    \ dscore=1 |>\n<code>\n<?php", "    $vowels = ['a','e','i','o','u'];\n    for($i=strlen($word);\
    \ $i>0; $i--){\n        $consonants = substr($word,0,$i);\n        for($j=strlen($consonants);\
    \ $j>0; $j--){\n            $consonants = substr($consonants,0,$j);\n        \
    \    $i = $j;\n            $vowels = preg_grep('~^('.$consonants.'*)?~', $vowels);\n\
    \        }\n    }\n    return $vowels[0];\n}\n</code>\n<|/ a tags=php dscore=2\
    \ |>\n<| a tags=php |>\n<code>\n<?php", "    $vowels = array(\"a\", \"e\", \"\
    i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\");\n    $vowels_count = count($vowels);\n\
    \    foreach ($word as $key => $letter) {\n        if ($key == 0) {\n        \
    \    continue;\n        }\n        if ($letter == \"a\" || $letter == \"e\" ||\
    \ $letter == \"i\" || $letter == \"o\" || $letter == \"u\") {\n            if\
    \ ($key == $vowels_count - 1) {\n                return $vowels[$key];\n     \
    \       } else {\n                $left = $word[$key - 1];\n                if\
    \ ($left == \"a\" || $left == \"e\" || $left == \"i\" || $left == \"o\" || $left\
    \ == \"u\") {\n                    return $vowels[$key];\n                }\n\
    \            }\n        }\n    }\n    return \"\";\n}", "    \n    $vowels = array('a','e','i','o','u');\n\
    \    $consonants = array('b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z');\n\
    \    \n    for($i = 0; $i < strlen($word); $i++) {\n        if(in_array($word[$i],\
    \ $vowels)) {\n            return $word[$i];\n        }\n        if(in_array($word[$i],\
    \ $consonants)) {\n            \n        }\n    }\n    \n}\n", "    $result =\
    \ '';\n    $vowels = ['a', 'A', 'u', 'U'];\n    \n    // We need to find the last\
    \ consonant after the last vowel\n    for ($i=strlen($word)-1; $i>-1; $i--) {\n\
    \        if (in_array($word[$i], $vowels)) {\n            $result= $word[$i];\n\
    \            break;\n        }\n    }\n    \n    return $result;\n}\n</code>\n\
    <|/ a tags=php |>\n<| a tags=php |>\nTry this:\n<code>\n<?php", "  if(strlen($word)\
    \ <= 2) return '';\n  $vowels = ['a', 'e', 'i', 'o', 'u'];\n  foreach($vowels\
    \ as $vowel) {\n    $letters = str_split($word);\n    foreach($letters as $key\
    \ => $letter) {\n      if($letter == $vowel) {\n        unset($letters[$key]);\n\
    \      }\n    }\n    if(count($letters) >= 2) return $vowel;\n  }\n  return '';\n\
    }\n</code>\n<|/ a dscore=1 tags=python |>\n<| a dscore=0 tags=python |>\nMy Solution\
    \ in Python: \n<code>\ndef get_closest_vowel(word):\n    vowels = ['a', 'e', 'i',\
    \ 'o', 'u']\n    for i in vowels:\n        if word.find(i) >= 0:\n           \
    \ return i\n        else:\n            if word[len(word)-2:] in vowels and word[len(word)-1:len(word)-3:-1]\
    \ in vowels:\n                return word[len(word)-2:]\n            else:\n \
    \               return word[len(word)-1:len(word)-3:-1]\n</code>\n<|/ a |>\n<|\
    \ a tags=python dscore=0 |>\nHere is my Solution in Python:\n<code>\ndef get_closest_vowel(word):\n\
    \    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = len(vowels)\n    word_length\
    \ = len(word)\n    while vowel_count > 0 and word_length > 2:\n        for i in\
    \ range(vowel_count):\n            if word[word_length-1 - i:] in vowels:\n  \
    \              return word[word_length-1 - i:]\n            elif word[word_length-1\
    \ - i] == vowels[i]:\n                vowel_count -= 1\n                word_length\
    \ -= 1\n            else:\n                word_length -= 1\n                break\n\
    \    return word\n</code>\n<|/ a |>\n<| a dscore=0 tags=python |>\nThis should\
    \ work for all cases:\n<code>\ndef get_closest_vowel(word):\n    vowels = ['a',\
    \ 'e', 'i', 'o', 'u']\n    vowel_count = len(vowels)\n    word_length = len(word)\n\
    \    while vowel_count > 0 and word_length > 2:\n        for i in range(vowel_count):\n\
    \            if word[word_length-1 - i:] in vowels:\n                return word[word_length-1\
    \ - i:]\n            elif word[word_length-1 - i] == vowels[i]:\n            \
    \    vowel_count -= 1\n                word_length -= 1\n            else:\n \
    \               word_length -= 1\n                break\n    return word\n</code>\n\
    <|/ a |>\n<| a tags=python |>\nMy solution:\n<code>\ndef get_closest_vowel(word):\n\
    \    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = len(vowels)\n    word_length\
    \ = len(word)\n    while vowel_count ", "  $vowels = 'aeiouy';\n  $consonants\
    \ = 'bcdfghjklmnpqrstvwxyz';\n  \n  $consonant_arr = str_split($word);\n  $vowel_arr\
    \ = str_split($vowels);\n  \n  $shortest_vowel = min($vowel_arr, function($a,\
    \ $b){\n    return strlen($a) - strlen($b);\n  });\n  \n  for($i = 0; $i < count($consonant_arr);\
    \ $i++) {\n    if (in_array($consonant_arr[$i], $vowel_arr)){\n      if ($vowel_arr[$i]\
    \ == $shortest_vowel){\n        return $consonant_arr[$i];\n      }\n    }\n \
    \ }\n  \n  return \"\";\n}\n", "\t$vowels = \"aeiouAEIOU\";\n\t$i = strlen($word)\
    \ - 1;\n\t$result = \"\";\n\tfor ($j = 0; $j < strlen($word); $j++) {\n\t\t$c1\
    \ = $word[$i];\n\t\t$c2 = $word[$j];\n\t\t$i--;\n\t\t$j--;\n\t\t$d1 = strlen($vowels)\
    \ - 1;\n\t\t$d2 = strlen($vowels) - 1;\n\t\tif ($c1 != $c2 && $c1 != \"\" && $c1\
    \ != \" \" && $c2 != \"\" && $c2 != \" \" && $c1 != $c2) {\n\t\t\tif ($c1 != \"\
    a\" && $c1 != \"e\" && $c1 != \"i\" && $c1 != \"o\" && $c1 != \"u\" && $c1 !=\
    \ \"\" && $c2 != \"\") {\n\t\t\t\tif ($c1 > $c2 || $c1 < $c2) {\n\t\t\t\t\t$result\
    \ = \"$c1\";\n\t\t\t\t} elseif ($c2 > $c1 || $c2 < $c1) {\n\t\t\t\t\t$result =\
    \ \"$c2\";\n\t\t\t\t} else {\n\t\t\t\t\t$result = \"$c1\";\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn $result;\n}\n", "  $vowels = array(\"a\", \"e\", \"i\"\
    , \"o\", \"u\");\n  $word = $word;\n  for($i = strlen($word) - 1, $j = strlen($word)\
    \ - 2; $i >= 0 && $j >= 0; $i--, $j--) {\n    if(in_array($word[$i], $vowels))\
    \ {\n      if(in_array($word[$j], $vowels)) {\n        return $word[$i];\n   \
    \   }\n    }\n  }\n  return '';\n}\n", "    if (strpos($word, 'a') !== false ||\
    \ strpos($word, 'e') !== false || strpos($word, 'i') !== false || strpos($word,\
    \ 'o') !== false || strpos($word, 'u') !== false) {\n        return $word[strlen($word)-1];\n\
    \    }\n    if (strpos($word, 'A') !== false || strpos($word, 'E') !== false ||\
    \ strpos($word, 'I') !== false || strpos($word, 'O') !== false || strpos($word,\
    \ 'U') !== false) {\n        return $word[strlen($word)-1];\n    }\n}\n", "\t\
    $vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n\t\n\t$arr = str_split($word);\n\t\
    $arr = array_reverse($arr);\n\n\t// checking if all characters are letters\n\t\
    if (strlen($word) === strlen($word[0]) && ctype_alpha($word[0])) {\n\t\t// checking\
    \ if all characters are vowels\n\t\t$isVowel = false;\n\t\tforeach ($vowels as\
    \ $vowel) {\n\t\t\tif (in_array($vowel, $arr)) {\n\t\t\t\t$isVowel = true;\n\t\
    \t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// checking if all characters are consonants\n\
    \t\t$isConsonant = false;\n\t\tforeach ($arr as $consonant) {\n\t\t\tif (ctype_alpha($consonant))\
    \ {\n\t\t\t\t$isConsonant = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($isVowel\
    \ && !$isConsonant) {\n\t\t\treturn end($arr);\n\t\t} else {\n\t\t\treturn '';\n\
    \t\t}\n\t}\n\treturn '';\n}", "    $vowels = array('a','e','i','o','u');\n   \
    \ $vowels_start = array('b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z');\n\
    \    $vowels_end = array('b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z');\n\
    \    $vowels_start_end = array('b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z');\n\
    \    $vowels_start_end_1 = array('b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z');\n\
    \    $vowels_start_end_2 = array('b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z');\n\
    \    $vowels_end_start = array('b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z');\n\
    \    $vowels_end_end_1 = array('b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z');\n\
    \    $vowels_end_end_2 = array('b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z');\n\
    \    $vowels_start_2 = array('b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z');\n\
    \    $vowels_end_end_2 = array('b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x",
  "    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_length\
    \ = count($vowels);\n    for ($i = 0; $i < $word.length; $i++) {\n        $c =\
    \ $word[$i];\n        if (!in_array($c, $vowels)) {\n            $i--;\n     \
    \       continue;\n        }\n\n        $vowel_found = false;\n        for ($k\
    \ = 0; $k < $vowels_length && $k <= $i; $k++) {\n            if ($k > 0) {\n \
    \               if (strpos($word, $vowels[$k], $i) === false) {\n            \
    \        $vowel_found = true;\n                    break;\n                }\n\
    \            }\n        }\n        if (!$vowel_found) {\n            return $c;\n\
    \        }\n    }\n    return '';\n}\n</code>\n<|/ a |>\n<| c |>\nYou should be\
    \ aware that your algorithm is O(n^2) in the size of the word.  That is very inefficient.\
    \  Try \"quick\" with your algorithm on \"ab\" for example.\n<|/ c |>\n<| c |>\n\
    Yes, I should have clarified that this is O(n) in the length of the word.  I haven't\
    \ looked at your algorithm closely, but I suspect it is O(n^2) there.  I will\
    \ update the algorithm to show that.\n<|/ c |>\n<| a dscore=0 |>\nFor starters,\
    \ you should start your loops from $word.length -1, or you will miss the last\
    \ letter of the word. Secondly, you should use continue instead of break in the\
    \ inner loop.\n<code>\n<?php\n", "    $vowels = \"aeiouAEIOU\";\n    $vowels_array\
    \ = str_split($vowels);\n    $vowels_array2 = array_reverse(str_split($vowels));\n\
    \    $vowel_array = array_diff($vowels_array, $vowels_array2);\n    \n    $vowel\
    \ = array_search(substr($word, -2, 2), $vowel_array);\n    return $vowel == false\
    \ ? \"\" : $vowels_array[$vowel];\n}\n</code>\nI hope it can help someone with\
    \ the same question :)\n<|/ a dscore=2 tags=php,string,function,arrays,substring\
    \ |>\n<| a |>\n<code>", "    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"y\");\n    $consonants = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"y\", \"z\");\n\n    $result = \"\";\n    $current_vowel = -1;\n\
    \    \n    for($i = 0; $i < strlen($word); $i++) {\n        if(isset($consonants[$word[$i]]))\
    \ {\n            $current_vowel = -1;\n        }\n        else if(isset($vowels[$word[$i]]))\
    \ {\n            $current_vowel = count($vowels) - 1;\n        }\n        else\
    \ if(isset($consonants[$word[$i]])) {\n            $current_vowel = count($consonants)\
    \ - 1;\n        }\n        else {\n            $current_vowel = -1;\n        }\n\
    \        \n        if($current_vowel >= 0) {\n            $result = '';\n    \
    \        break;\n        }\n    }\n    return $result;\n}\n", "    $vowel = 'Aa';\n\
    \    $vowel_positions = [];\n    $vowel_positions[$vowel] = 0;\n    $vowel_positions[substr($vowel,\
    \ -1)] = 0;\n\n    $consonant = 'BbCcDdFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz';\n\
    \    $consonant_positions = [];\n    $consonant_positions[$consonant] = 0;\n \
    \   $consonant_positions[substr($consonant, -1)] = 0;\n\n    $all_positions =\
    \ $vowel_positions + $consonant_positions;\n    $vowel_positions = array_unique($vowel_positions);\n\
    \    $consonant_positions = array_unique($consonant_positions);\n\n    $closest_vowel\
    \ = null;\n    $closest_distance = PHP_INT_MAX;\n    foreach ($vowel_positions\
    \ as $vowel_position => $position) {\n        $current_position = $position +\
    \ $consonant_positions[substr($word, -1)];\n        $distance = abs($vowel_position\
    \ - $current_position);\n\n        if ($distance < $closest_distance) {\n    \
    \        $closest_distance = $distance;\n            $closest_vowel = $vowel;\n\
    \        }\n    }\n\n    return $closest_vowel;\n}\n", "    $vowels = array(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n    for ($i = strlen($word); $i > 0;\
    \ $i--){\n        $test = $word[$i];\n        $test2 = $word[$i-1];\n        if\
    \ (in_array($test, $vowels) && in_array($test2, $vowels)){\n            return\
    \ $test;\n        }\n    }\n    return \"\";\n}", "    $vowels = ['a','e','i','o','u'];\n\
    \    $vowel_count = 0;\n    foreach ($vowels as $vowel) {\n        if (stripos($word,\
    \ $vowel) !== false) {\n            $vowel_count++;\n        }\n    }\n    $word\
    \ = strtolower($word);\n    $vowel = strtolower($vowels[0]);\n    if ($vowel_count\
    \ > 0) {\n        $vowel_index = strrpos($word, $vowel);\n        $vowel_length\
    \ = strlen($vowel);\n        $consonant_count = strlen($word) - $vowel_index -\
    \ $vowel_length;\n        if ($consonant_count > 0) {\n            $consonant_index\
    \ = strrpos($word, $consonant);\n            $consonant_length = strlen($consonant);\n\
    \            $best_vowel_index = $vowel_index - $consonant_index;\n          \
    \  $best_vowel_length = $vowel_length + $consonant_length;\n            for ($i\
    \ = 0; $i < $best_vowel_index; $i++) {\n                if (stripos($word, $vowel)\
    \ !== false) {\n                    return $vowel;\n                }\n      \
    \      }\n            return \"\";\n        }\n    }\n    return \"\";\n}\n",
  "    $vowels = array(\"a\",\"e\",\"i\",\"o\",\"u\");\n    \n    $pos = strlen($word)\
    \ - 1;\n    \n    for ($i = strlen($word) - 2; $i >= 0; $i--) {\n        if (in_array($word[$i],\
    \ $vowels)) {\n            if ($i > 0) {\n                $pos -= 1;\n       \
    \     }\n            else {\n                $pos++;\n            }\n        }\n\
    \    }\n    \n    return $word[$pos];\n}\n", "    $vowels = array(\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\");\n    \n    $pattern = \"/([aeiou])\";\n    $position\
    \ = 0;\n    $count = 1;\n    \n    while($position != strlen($word)) {\n     \
    \   if (preg_match($pattern, $word, $matches, $position)) {\n            \n  \
    \          for($i = 0; $i < count($matches); $i++) {\n                if ($matches[$i]\
    \ == $vowels[$i]) {\n                    $count++;\n                }\n      \
    \      }\n            \n            if ($count == 2) {\n                return\
    \ $matches[0];\n            }\n        }\n        \n        $position++;\n   \
    \ }\n    \n    return \"\";\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThis code\
    \ will output only \"u\" for \"yogurt\", but the expected result is \"U\", and\
    \ also it will output empty string for \"FULL\" and \"quick\" because the pattern\
    \ doesn't match\n<|/ c |>\n<| c |>\nI updated the code and fixed a bug. I also\
    \ updated the comments in the code to make more sense.\n<|/ c |>\n<| c |>\nThanks\
    \ for fixing my code ! But I'm still not able to get \"U\" as output for \"yogurt\"\
    \n<|/ c |>\n<| c |>\nI guess I missed that. It looks like I forgot to update the\
    \ condition to count the number of vowels. Updated my code above. Can you try\
    \ that code again?\n<|/ c |>\n<| c |>\nYes it works. I missed the count condition.\
    \ Thanks!\n<|/ c |>\n<| a tags=php |>\nHere is another way of doing it without\
    \ regular expressions.\n<code>", "    $vowels = array('u', 'a', 'o', 'e', 'I',\
    \ 'y', 'U');\n\n    $vowelsCount = count($vowels);\n    for($i = $word.length\
    \ - 2; $i >= 0; $i--) {\n        if($word[$i] >= 'a' && $word[$i] <= 'z') {\n\
    \            $v1 = $word[$i];\n        }\n        elseif($word[$i] >= 'A' && $word[$i]\
    \ <= 'Z') {\n            $v1 = $word[$i];\n        }\n        elseif($word[$i]\
    \ >= '0' && $word[$i] <= '9') {\n            $v1 = $word[$i];\n        }\n   \
    \     for($j = strlen($word) - $i - 1; $j >= 0; $j--) {\n            if($word[$j]\
    \ >= 'a' && $word[$j] <= 'z') {\n                $v2 = $word[$j];\n          \
    \  }\n            elseif($word[$j] >= 'A' && $word[$j] <= 'Z') {\n           \
    \     $v2 = $word[$j];\n            }\n            elseif($word[$j] >= '0' &&\
    \ $word[$j] <= '9') {\n                $v2 = $word[$j];\n            }\n     \
    \       if($v1 == $v2) {\n                $index = $j;\n            }\n      \
    \  }\n        $result = substr($word, $index + $vowelsCount, $vowelsCount);\n\
    \        if(!empty($result)) {\n            return $result;\n        }\n    }\n\
    \    return '';\n}", "    $vowels = [ 'A', 'a', 'E', 'e', 'I', 'i', 'O', 'o',\
    \ 'U', 'u' ];\n    $i = count($word) - 1;\n    $j = 0;\n\n    foreach ($word as\
    \ $letter) {\n        if ($letter != $word[0]) {\n            if (isset($vowels[$letter]))\
    \ {\n                $j = $i;\n                break;\n            }\n       \
    \ }\n        $j++;\n        $i--;\n    }\n\n    return $word[$j] ?? '';\n}\n",
  "    $vowels = ['a','e','i','o','u','A','E','I','O','U'];\n    $vowels_count = count($vowels);\n\
    \    $word = strtolower($word);\n    $pos = strrpos($word,'');\n    $vowel_index\
    \ = strrpos($vowels,$word[$pos]);\n    $vowel_start = $pos + $vowel_index + 1;\n\
    \    $vowel_end = strrpos($word,'');\n    $vowel_distance = 0;\n    $vowel_last_pos\
    \ = strrpos($word,'');\n    $consonant_last_pos = $vowel_last_pos + $vowels_count;\n\
    \    for($i=$vowel_start;$i<$consonant_last_pos;$i++){\n        if($word[$i]==$vowels[$vowel_index]){\n\
    \            if($i>$consonant_last_pos+$vowels_count){\n                $vowel_distance\
    \ = 1;\n                $vowel_last_pos = $consonant_last_pos;\n            }\n\
    \            if($i<$consonant_last_pos && $word[$i]==$vowels[$vowel_index]){\n\
    \                $vowel_distance += 2;\n            }\n        }\n    }\n    return\
    \ $vowels[$vowel_index]+$vowel_distance;\n}\n</code>\n<|/ a tags=php,string |>\n\
    <| a dscore=0 |>\nHere's a version that handles all edge cases (I only tested\
    \ the first case):\n<code>", "    \n    $vowels = array('a', 'e', 'i', 'o', 'u');\n\
    \n    $chars = str_split($word);\n    $startPos = 0;\n    $endPos = count($chars)\
    \ - 1;\n    \n    while ($startPos <= $endPos) {\n        $char = $chars[$startPos];\n\
    \        $consonantPos = strpos($chars, 'c', $startPos);\n\n        if ($consonantPos\
    \ === FALSE) {\n            $startPos++;\n        }\n        if ($char === strtoupper($char))\
    \ {\n            $startPos++;\n            $endPos--;\n        } else {\n    \
    \        $endPos--;\n        }\n    }\n\n    foreach ($vowels as $vowel) {\n \
    \       if (strpos($word, $vowel) !== FALSE) {\n            return $vowel;\n \
    \       }\n    }\n    \n    return \"\";\n}\n", "    $result = \"\";\n    $vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    for($i=strlen($word); $i>0;\
    \ $i--) {\n        if(!in_array($word[$i], $vowels)) {\n            $result =\
    \ ($i<strlen($word) - 1) ? $word[$i] : $word[0];\n        }\n    }\n    return\
    \ $result;\n}\n", "    $vowels = \"aeiouy\";\n    for($i=strlen($word)-1; $i>0;\
    \ $i--) {\n        if(strpos($vowels, substr($word,$i,1))!==false){\n        \
    \    return substr($word,$i,1);\n        }\n    }\n    return \"\";\n}\n", " \
    \   $vowels = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U');\n    $pos\
    \ = strrpos($word, 'a');\n    if ($pos !== false) {\n        $pos = $pos + 1;\n\
    \        $last_consonant = substr($word, $pos);\n    }\n    $pos = strrpos($word,\
    \ 'e');\n    if ($pos !== false) {\n        $pos = $pos + 1;\n        $last_consonant\
    \ = substr($word, $pos);\n    }\n    $pos = strrpos($word, 'i');\n    if ($pos\
    \ !== false) {\n        $pos = $pos + 1;\n        $last_consonant = substr($word,\
    \ $pos);\n    }\n    $pos = strrpos($word, 'o');\n    if ($pos !== false) {\n\
    \        $pos = $pos + 1;\n        $last_consonant = substr($word, $pos);\n  \
    \  }\n    $pos = strrpos($word, 'u');\n    if ($pos !== false) {\n        $pos\
    \ = $pos + 1;\n        $last_consonant = substr($word, $pos);\n    }\n    foreach\
    \ ($vowels as $vowel) {\n        if (strpos($word, $vowel) !== false) {\n    \
    \        return $vowel;\n        }\n    }\n    return \"\";\n}\n", "    $vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    $found = false;\n    $wordLength\
    \ = strlen($word);\n    for($i = 0; $i < $wordLength; $i++) {\n        $found\
    \ = false;\n        for($j = 0; $j < $wordLength; $j++) {\n            if($word[$j]\
    \ == $vowels[$i]) {\n                $found = true;\n                $result =\
    \ $vowels[$i];\n                break;\n            }\n        }\n        if(!$found)\
    \ {\n            break;\n        }\n    }\n    return $result;\n}", "    $vowels\
    \ = \"aeiouAEIOU\";\n    \n    $len = strlen($word);\n    $pos = 0;\n    \n  \
    \  // check left side consonants, if vowel not exist, return empty string\n  \
    \  while(!in_array($word[$pos], $vowels) && $pos < $len) {\n        $pos++;\n\
    \    }\n    if(!in_array($word[$pos], $vowels) && $pos < $len) {\n        return\
    \ \"\";\n    }\n    \n    // check right side consonants, if vowel not exist,\
    \ return empty string\n    while(!in_array($word[$len-1], $vowels) && $pos < $len)\
    \ {\n        $len--;\n    }\n    if(!in_array($word[$len-1], $vowels) && $pos\
    \ < $len) {\n        return \"\";\n    }\n    \n    // check both side consonants,\
    \ if vowel not exist, return empty string\n    while(!in_array($word[$pos-1],\
    \ $vowels) && $pos > 0) {\n        $pos--;\n    }\n    if(!in_array($word[$pos-1],\
    \ $vowels) && $pos > 0) {\n        return \"\";\n    }\n    \n    // find vowels,\
    \ return empty string if any vowel not exist\n    $vowel = array();\n    foreach($vowels\
    \ as $v) {\n        if(strpos($word, $v) !== false) {\n            array_push($vowel,\
    \ $v);\n        }\n    }\n    if(!count($vowel)) {\n        return \"\";\n   \
    \ }\n    \n    // sort the vowel to find the closest one\n    asort($vowel);\n\
    \    \n    return $vowel[0];\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nHi , i tried\
    \ the code but for some reason it gave me a wrong answer for the first example\
    \  \"oy\" it gave me \"y\" instead of the expected \"o\"\n<|/ c |>\n<| c |>\n\
    The code works fine. But for \"oy\" it can only find the \"y\" but not the \"\
    o\". As I told, for \"oy\" the best vowel would be \"o\", not \"y\".\n<|/ c |>\n\
    <| c |>\nSorry, I misunderstood the question. I fixed my code. Now it works fine.\n\
    <|/ c |>\n<| c |>\nThank you for that , i understood what you meant now ! :)\n\
    <|/ c |>\n<| a tags=algorithm,string,php,string |>\nYou can try this one", " \
    \   $vowelsArr = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"];\n    \n    $arrSize\
    \ = count($word);\n    $vowelArr = explode('', $word);\n    $rightVovelIndex =\
    \ 0;\n    $closestVowel = '';\n    $currentVowel = current($vowelArr);\n    \n\
    \    $vowelsCount = count($vowelsArr);\n    \n    foreach($vowelArr as $v){\n\
    \        $currentVowel = strtolower($v);\n        \n        if($currentVowel !==\
    \ $rightVovelIndex){\n            $rightVovelIndex = $currentVowel;\n        }\n\
    \    }\n    \n    for($i = 1; $i < $arrSize; $i++){\n        $currentVowel = strtolower($word[$i]);\n\
    \        \n        if(!in_array($currentVowel, $vowelsArr) && $currentVowel !==\
    \ $rightVovelIndex){\n            $closestVowel = $currentVowel;\n           \
    \ $rightVovelIndex = $currentVowel;\n            break;\n        }\n    }\n  \
    \  \n    return $closestVowel;\n}\n\n/*\n* Question 9\n* Write a function that\
    \ can remove all the vowel characters from a string without using the \n* built-in\
    \ string function.\n* You may assume that the given string contains only English\
    \ letters.\n* You may assume that the vowel list is predefined. \n* You may not\
    \ use the str_replace or str_replace function\n* Example:\n* >>> remove_vowel_without_str_replace(\"\
    yogurt\")\n* \"ygurt\"\n* >>> remove_vowel_without_str_replace(\"qurtz\")\n* \"\
    urtz\"\n* >>> remove_vowel_without_str_replace(\"ab\")\n* \"ab\"\n* >>> remove_vowel_without_str_replace(\"\
    a b c d\")\n* \"abc\"\n* >>> remove_vowel_without_str_replace(\"a ab c d\")\n\
    * \"acd\"\n*/\n", "    if(strlen($word) == 0) {\n        return \"\";\n    }\n\
    \    $vowels_array = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $vowel_array\
    \ = array_filter($vowels_array, function($v){\n        return preg_match(\"/^\"\
    .$v.\"$/i\", $word);\n    });\n    $vowel_array_reverse = array_reverse($vowel_array);\n\
    \    $vowel_array_reverse = array_filter($vowel_array_reverse, function($v){\n\
    \        return preg_match(\"/^\".$v.\"$/i\", $word);\n    });\n    if(count($vowel_array)\
    \ == 0) {\n        return \"\";\n    }\n    if(count($vowel_array_reverse) ==\
    \ 0) {\n        return \"\";\n    }\n    $vowel_array = array_reverse($vowel_array);\n\
    \    foreach($vowel_array as $vowel) {\n        if($vowel_array_reverse[0] ==\
    \ $vowel) {\n            return $vowel;\n        }\n    }\n    return \"\";\n\
    }\n\n/*\n * To get the sum of an array in php.\n * Example:\n * >>> $a = array(1,2,3,4);\n\
    \ * >>> get_sum($a)\n * 15\n */", "    for($i=0; $i<strlen($word); $i++) {\n \
    \       for($j=$i+1; $j<strlen($word); $j++) {\n            $char1 = $word[$i];\n\
    \            $char2 = $word[$j];\n            if($char1 == 'a' || $char1 == 'e'\
    \ || $char1 == 'i' || $char1 == 'o' || $char1 == 'u' || $char2 == 'a' || $char2\
    \ == 'e' || $char2 == 'i' || $char2 == 'o' || $char2 == 'u') {\n             \
    \   return $char1;\n            }\n        }\n    }\n    return '';\n}\n", " \
    \   $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n    $first_consonant\
    \ = substr($word, 0, 1);\n    $last_consonant = substr($word, -2, 1);\n    $second_consonant\
    \ = substr($word, 1, 1);\n    $second_to_last_consonant = substr($word, -3, 1);\n\
    \    $consonant_pairs = array();\n    $consonant_pairs[] = array($first_consonant,\
    \ $second_consonant);\n    $consonant_pairs[] = array($second_consonant, $last_consonant);\n\
    \    $consonant_pairs[] = array($last_consonant, $first_consonant);\n    $consonant_pairs[]\
    \ = array($second_to_last_consonant, $second_consonant);\n    $consonant_pairs[]\
    \ = array($second_consonant, $second_to_last_consonant);\n    foreach ($consonant_pairs\
    \ as $consonant_pair) {\n        $first_vowel = array_search($consonant_pair[0],\
    \ $vowels);\n        $second_vowel = array_search($consonant_pair[1], $vowels);\n\
    \        if ($first_vowel != -1 && $second_vowel != -1) {\n            $first_vowel_diff\
    \ = $first_vowel - $consonant_pair[0];\n            $second_vowel_diff = $second_vowel\
    \ - $consonant_pair[1];\n            if ($first_vowel_diff == 0 && $second_vowel_diff\
    \ == 0) {\n                return $consonant_pair[1];\n            }\n       \
    \     if ($first_vowel_diff > $second_vowel_diff) {\n                return $consonant_pair[1];\n\
    \            }\n            if ($first_vowel_diff < $second_vowel_diff) {\n  \
    \              return $consonant_pair[0];\n            }\n        }\n    }\n \
    \   return \"\";\n}", "    $words = array(\n        'a' => 'u',\n        'e' =>\
    \ 'u',\n        'i' => 'u',\n        'o' => 'u',\n        'u' => 'U',\n      \
    \  'A' => 'a',\n        'E' => 'e',\n        'I' => 'i',\n        'O' => 'o',\n\
    \        'U' => 'u',\n    );\n    $endPosition = strrpos($word, 'u') + 1;\n  \
    \  $startPosition = strrpos($word, 'u');\n    for($i = $startPosition; $i < $endPosition;\
    \ $i++) {\n        $found = false;\n        foreach($words as $char => $value)\
    \ {\n            if($i == strpos($word, $char)) {\n                $found = true;\n\
    \                break;\n            }\n        }\n        if($found) {\n    \
    \        return $value;\n        }\n    }\n    return '';\n}\n", "    // Write\
    \ your code here\n}\n</cell>\n<text>\n2. BST Search\nIn a BST, each node has two\
    \ children: left and right. \nWhen you are searching for a node, you should use\
    \ the node which has the smallest value.\nIf two nodes have a smaller value (or\
    \ same value), search them both (recursively).\nIf they have different values,\
    \ return null.\n\nYou can solve it by making a recursive search method which uses\
    \ these rules:\n\nIf current node value is smaller than your input value, then\
    \ search left subtree. \nIf current node value is larger than your input value,\
    \ then search right subtree. \nIf current node value is equal to your input value,\
    \ return the current node value.\n\nYou can solve this problem by creating a recursive\
    \ search function as follows:\n\n\n</text>\n<cell>\nclass Node(object):\n    #\
    \ constructor\n    def __init__(self, value):\n        self.value = value\n  \
    \      self.left = None\n        self.right = None\n    \n    # helper method\n\
    \    def search(self, value, current_node):\n        if current_node is None:\n\
    \            return None\n        \n        if value < current_node.value:\n \
    \           return self.search(value, current_node.left)\n        \n        if\
    \ value > current_node.value:\n            return self.search(value, current_node.right)\n\
    \        \n        return current_node.value\n    \n    \nclass Tree(object):\n\
    \    # constructor\n    def __init__(self):\n        self.root = None\n    \n\
    \    # insert node\n    def insert(self, value):\n        self.root = self.insert_node(self.root,\
    \ value)\n    \n    def insert_node(self, node, value):\n        if node is None:\n\
    \            return Node(value)\n        \n        if value < node.value:\n  \
    \          if node.left:\n                return self.insert_node(node.left, value)\n\
    \            else:\n                node.left = Node(value)\n                return\
    \ node\n        \n        if value > node.value:\n            if node.right:\n\
    \                return self.insert_node(node.right, value)\n            else:\n\
    \                node.right = Node(value)\n                return node\n    \n\
    \    # remove node\n    def remove(self, node):\n        if node.left is None\
    \ and node.right is None:\n            if node == self.root:\n               \
    \ self.root = None\n            else:\n                temp = node.left\n    \
    \            node.left = None\n                node.right = temp\n        \n \
    \       elif node.left is not None and node.right is None:\n            if node\
    \ == self.root:\n                self.root = node.left\n            else:\n  \
    \              temp = node.right\n                node.right = None\n        \
    \        node.left = temp\n        \n        elif node.left is None and node.right\
    \ is not None:\n            if node == self.root:\n                self.root =\
    \ node.right\n            else:\n                temp = node.left\n          \
    \      node.left = None\n                node.right = temp\n        \n       \
    \ elif node.left is not None and node.right is not None:\n            if node\
    \ == self.root:\n                temp = node.left\n                node.left =\
    \ self.remove(node.left)\n                node.right = temp\n            else:\n\
    \                temp = node.left\n                node.left = self.remove(node.left)\n\
    \                node.right = self.", "    $vowels = array('a', 'e', 'i', 'o',\
    \ 'u');\n    $vowels_right = array('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z');\n    $vowels_left =\
    \ array('d', 'g', 'f', 'c', 'b', 'a', 'e', 'i', 'o', 'm', 'n', 'p', 'q', 'r',\
    \ 's', 't', 'v', 'w', 'x', 'z');\n    $count = 1;\n    \n    foreach ($vowels\
    \ as $vowel) {\n        if(in_array($vowel, $word)) {\n            $count++;\n\
    \        }\n    }\n    \n    foreach ($vowels_right as $vowel) {\n        if(in_array($vowel,\
    \ $word)) {\n            $count++;\n        }\n    }\n    \n    foreach ($vowels_left\
    \ as $vowel) {\n        if(in_array($vowel, $word)) {\n            $count++;\n\
    \        }\n    }\n\n    if($count > count($word)) {\n        $closest_vowel =\
    \ '';\n    }else{\n        $closest_vowel = $word[$count];\n    }\n\n    return\
    \ $closest_vowel;\n}\n", "    $vowel_arr= [\"u\", \"A\", \"a\", \"E\", \"e\",\
    \ \"i\", \"I\", \"o\", \"O\", \"u\"];\n    $cons = [\"b\", \"B\", \"p\", \"P\"\
    , \"r\", \"r\", \"s\", \"S\", \"t\", \"T\", \"v\", \"V\", \"y\", \"Y\"];\n   \
    \ $pos = strlen($word) - 1;\n    $i = 0;\n    while(isset($vowel_arr[$i])){\n\
    \        $cons_pos = strpos($cons, $word[$pos]);\n        if($cons_pos === FALSE){\n\
    \            return \"\";\n        }\n        if($cons_pos > 0){\n           \
    \ $pos--;\n        } else {\n            $pos++;\n        }\n        $i++;\n \
    \   }\n    return $vowel_arr[$i];\n}\n", "    // write your code here\n    $vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $pattern = \"/[\\pL\\pM]+/u\"\
    ;\n    preg_match_all($pattern, $word, $matches);\n    $vowels_count = count(array_unique($matches[0]));\n\
    \    \n    $len = strlen($word);\n    $vowels_count_pre = array_count_values($matches[0]);\n\
    \    \n    foreach ($vowels as $vowel) {\n        if ($vowels_count <= $vowels_count_pre[$vowel])\
    \ {\n            return $vowel;\n        }\n    }\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nThis is an excellent answer but I'd like to point out that the question\
    \ specifically says \"Return empty string if you didn't find any vowel met the\
    \ above condition.\" That means if the word was \"ab\", the method should return\
    \ an empty string since there's nothing between consonants. Also, if the word\
    \ was \"Yogurt\" the method should return \"u\" since the vowel in the first and\
    \ last position are on the same side of the word.\n<|/ c |>\n<| a tags=php,string,regex\
    \ |>\nIf you don't want to use regexes, but want to use native php functions,\
    \ here's an algorithm I wrote that works for most of the strings that I've tested\
    \ it on:\n<code>\n$word = 'yogurt';\n$vowel_chars = \"aeiou\";\n\n$last_vowel\
    \ = 0;\n$start = 0;\n$length = 0;\n\nforeach(str_split($word) as $char){\n   \
    \ if(in_array($char, $vowel_chars)) {\n        if($last_vowel != $start){\n  \
    \          $last_vowel = $start;\n        }\n        $length++;\n    }\n    elseif($length\
    \ == 1){\n        $start = $last_vowel;\n        $length = 0;\n    }\n}\n\nif($length\
    \ > 1){\n    return $word[($start + $last_vowel - 1)];\n}\nelse{\n    return '';\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI tried to simplify this question,\
    \ and this is my answer:\n<code>\n<?php\n", "    $vowels = \"aeiou\";\n    $result\
    \ = [];\n    $start = false;\n    $end = false;\n    $word = str_replace(\"'\"\
    ,\"\", $word);\n    foreach ($word as $char) {\n        if ($char == \"'\" ||\
    \ $char == \"n\") {\n            $start = true;\n        }\n        if ($char\
    \ == \".\" || $char == \",\" || $char == \"-\") {\n            $end = true;\n\
    \        }\n        if ($start) {\n            $start = false;\n            $result[]\
    \ = $char;\n        }\n        if ($end) {\n            $end = false;\n      \
    \      $result[] = $char;\n        }\n    }\n    $first_vowel = array_search($result[0],\
    \ $vowels);\n    if ($first_vowel) {\n        $vowel_position = strrpos($word,\
    \ $vowels[$first_vowel]);\n        if ($vowel_position > 0) {\n            $end_vowel\
    \ = strrpos($word, \",\" . $result[0]);\n            if ($end_vowel > 0) {\n \
    \               $end_vowel = $end_vowel - 1;\n                if ($end_vowel <\
    \ strlen($word)) {\n                    $result[] = $word[$end_vowel];\n     \
    \           }\n            }\n        }\n    }\n    return $result;\n}\n\n$word\
    \ = 'abba';\nvar_dump(get_closest_vowel($word));\n$word = 'abba';\nvar_dump(get_closest_vowel($word));\n\
    $word = 'abba';\nvar_dump(get_closest_vowel($word));\n$word = 'abba';\nvar_dump(get_closest_vowel($word));\n\
    $word = 'abba';\nvar_dump(get_closest_vowel($word));\n$word = 'abba';\nvar_dump(get_closest_vowel($word));\n\
    $word = 'abba';\nvar_dump(get_closest_vowel($word));\n$word = 'abba';\nvar_dump(get_closest_vowel($word));\n\
    $word = 'abba';\nvar_dump(get_closest_vowel($word));\n$word = 'abba';\nvar_dump(get_closest_vowel($word));\n\
    $word = 'abba';\nvar_dump(get_closest_vowel($word));\n$word = 'abba';\nvar_dump(get_closest_vowel($word));\n\
    $word = 'abba';\nvar_dump(get_closest_vowel($word));\n$word = 'abba';\nvar_dump(get_closest_vowel($word));\n\
    $word = 'abba';\nvar_dump(get_closest_vowel($word));\n$word = 'abba';\nvar_dump(get_closest_vowel($word));\n\
    $word = 'abba';\nvar_dump(get_closest_vowel($word));\n$word = 'abba';\nvar_dump(get_closest_",
  "    $vowels = array('a', 'e', 'i', 'o', 'u');\n    sort($vowels, SORT_STRING);\n\
    \    $vowelsCount = 0;\n    $vowels = array_reverse($vowels);\n    for ($i = strlen($word)\
    \ - 1; $i >= 0; $i--) {\n        if (in_array($word[$i], $vowels)) {\n       \
    \     $vowelsCount++;\n        } else {\n            break;\n        }\n    }\n\
    \    if ($vowelsCount === 0) {\n        return \"\";\n    }\n    for ($i = strlen($word)\
    \ - 1; $i >= 0; $i--) {\n        if (in_array($word[$i], $vowels)) {\n       \
    \     $vowelsCount--;\n        }\n        if ($vowelsCount < 0) {\n          \
    \  break;\n        }\n    }\n    return $vowels[$i];\n}\n</code>\n<|/ a tags=substring,php,string\
    \ |>\n<| c |>\nIf you can explain how it works, I might be able to improve it.\n\
    <|/ c |>\n<| a |>\nHere is a simple solution using regular expressions with recursion:\n\
    <code>\n$text = \"The quick brown fox jumped over the lazy dog\";\n", "    $vowels\
    \ = array('a','e','i','o','u');\n    $vowels_count = count($vowels);\n    $vowels_array\
    \ = $vowels;\n    $vowels_count = count($vowels);\n    $consonants_count = strlen($word)\
    \ - 1;\n    $vowels_array[] = 'y';\n    \n    for($i = $consonants_count ; $i\
    \ >= 1; $i--){\n        $next_letter = substr($word,$i+1,1);\n        foreach($vowels_array\
    \ as $v){\n            if($v == $next_letter){\n                return $v;\n \
    \           }\n        }\n    }\n    return \"\";\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=php |>\nHere is my solution:\n<code>\n$word = \"abacus\";\n$consonants\
    \ = str_split($word);\n$vowels = array('a', 'e', 'i', 'o', 'u');\n\n$vowels_count\
    \ = count($vowels);\n\n$vowels_count = count($vowels);\n\n$vowels_array = $vowels;\n\
    \n$vowels_array[] = 'y';\n\nforeach($consonants as $key => $value){\n    foreach($vowels_array\
    \ as $v){\n        if($v == $value){\n            $consonants[$key] = $v;\n  \
    \      }\n    }\n}\n\n$lastVowel = array_pop($consonants);\nif($lastVowel == $vowels[$vowels_count]){\n\
    \    $lastVowel = \"\";\n}\n\n$first_consonant = $consonants[0];\nif($first_consonant\
    \ == $vowels[$vowels_count]){\n    $first_consonant = \"\";\n}\n\n$res = $lastVowel\
    \ .= $first_consonant;\necho $res;\n</code>\n<|/ a dscore=1 |>\n<| a |>\nI created\
    \ a function in PHP to find vowel between 2 consonants.\nHere is the function\n\
    <code>", "  $vowels = 'aeiouyAEIOUY';\n  $vowels_count = strlen($vowels);\n  \n\
    \  $vowels_left = strlen($word) - strlen($word) % $vowels_count;\n  \n  for ($i\
    \ = 0; $i < $vowels_count; $i++) {\n    $vowels_right = strlen($word) - $vowels_left\
    \ - strlen($word) % $vowels_count;\n    \n    if ($word[$vowels_left + $i] ==\
    \ $vowels[$i] && $word[$vowels_right - 1 - $i] == $vowels[$i]) {\n      return\
    \ $vowels[$i];\n    }\n  }\n  \n  return \"\";\n}\n", "    for($i = strlen($word)-1;\
    \ $i >= 0; $i--) {\n        if($word[$i] >= 'a' && $word[$i] <= 'z') continue;\n\
    \        if($word[$i] >= 'A' && $word[$i] <= 'Z') continue;\n        if($word[$i]\
    \ >= '0' && $word[$i] <= '9') continue;\n        if($word[$i] >= '0' && $word[$i]\
    \ <= '9') continue;\n        if($word[$i] >= 'a' && $word[$i] <= 'z') continue;\n\
    \        if($word[$i] >= 'A' && $word[$i] <= 'Z') continue;\n        if($word[$i]\
    \ >= '0' && $word[$i] <= '9') continue;\n        if($word[$i] >= '0' && $word[$i]\
    \ <= '9') continue;\n        $vowel = $word[$i];\n        break;\n    }\n    return\
    \ $vowel;\n}\n", "    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $vowels_count\
    \ = count($vowels);\n    $right_vowels = str_split($word, 1);\n    foreach($right_vowels\
    \ as $right_vowel) {\n        if($right_vowel == $vowels[0]) {\n            return\
    \ $vowels[0];\n        } elseif($right_vowel == $vowels[$vowels_count - 1]) {\n\
    \            return $vowels[$vowels_count - 1];\n        }\n    }\n    return\
    \ \"\";\n}\n", "    // Write your code here\n    return $word;\n}\n", "\t$vowel\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n\t$vowel_array = array(\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n\t$new_word = \"\";\n\tfor ($i = 0; $i < strlen($word);\
    \ $i++) {\n\t\tif ($word[$i] >= 'a' && $word[$i] <= 'z') {\n\t\t\t$new_word .=\
    \ $word[$i];\n\t\t} else {\n\t\t\tfor ($j = strlen($word) - 1; $j > $i; $j--)\
    \ {\n\t\t\t\tif ($word[$j] >= 'a' && $word[$j] <= 'z') {\n\t\t\t\t\t$temp_word\
    \ = $word;\n\t\t\t\t\t$temp_word[$i] = $word[$j];\n\t\t\t\t\tif (in_array($word[$j],\
    \ $vowel_array)) {\n\t\t\t\t\t\t$temp_word = implode($word[$i]);\n\t\t\t\t\t\t\
    $new_word .= $temp_word;\n\t\t\t\t\t} elseif (in_array($word[$j], $vowel)) {\n\
    \t\t\t\t\t\t$temp_word = implode($word[$j]);\n\t\t\t\t\t\t$new_word .= $temp_word;\n\
    \t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $new_word;\n}", "    $vowels_count\
    \ = count($vowels);\n    for($i = $vowels_count; $i > 0; $i--) {\n        $last_consonant_index\
    \ = $word[strlen($word) - $i];\n        $last_consonant_letter = strtolower($word[strlen($word)\
    \ - $i]);\n        if(in_array($last_consonant_letter, $vowels)) {\n         \
    \   for($j = $vowels_count; $j > $last_consonant_index; $j--) {\n            \
    \    $first_consonant_index = $word[$j];\n                $first_consonant_letter\
    \ = strtolower($word[$j]);\n                if(in_array($first_consonant_letter,\
    \ $vowels)) {\n                    return $first_consonant_letter;\n         \
    \       }\n            }\n        }\n    }\n    return '';\n}\n", "    $vowels\
    \ = array('a', 'e', 'i', 'o', 'u');\n    foreach ($vowels as $vowel) {\n     \
    \   if (strpos($word, $vowel) === FALSE) {\n            return '';\n        }\n\
    \    }\n    return array_pop(explode(\" \", $word));\n}\n", "    return empty($word)?\
    \ \"\" : preg_replace('~^(?:[^Aa](?!\\1)|[Aa](?!\\1))~', 'a', $word);\n}\n", " \
    \   $vowels = array(\"a\",\"e\",\"i\",\"o\",\"u\");\n    return $vowels[(count($vowels)*(strlen($word)-1))];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=php,string |>\nHere is another\
    \ way to do it, where $w is your input string:\n<code>\n$vowels = \"aeiouAEIOU\"\
    ;\n$wLen = strlen($w);\n$vLen = strlen($vowels);\n$vowelIdx = -1;\n$found = false;\n\
    for ($i = 0; $i < $wLen; $i++) {\n    if (in_array($w[$i], $vowels)) {\n     \
    \   $vowelIdx = ($i - $vLen + $wLen) % $vLen;\n        $found = true;\n      \
    \  break;\n    }\n}\nif ($found === true) {\n    $vowel = $vowels[$vowelIdx];\n\
    } else {\n    $vowel = \"\";\n}\n</code>\n<|/ a |>\n<| c |>\nThis is actually\
    \ wrong. Try your code on \"hey\". The returned value should be \"y\". But the\
    \ code above is giving \"e\".\n<|/ c |>\n<| c |>\nThat was my mistake, thanks.\
    \ I'll fix it now.\n<|/ c |>\n<| a tags=php,string |>\nIn case someone is looking\
    \ for an efficient way to do this in Python.\n<code>\ndef get_closest_vowel(word):\n\
    \    # Convert word into list of chars, removing any special chars\n    chars\
    \ = list(word)\n    for i in range(len(chars)):\n        if chars[i] == \"a\"\
    \ or chars[i] == \"A\" or chars[i] == \"e\" or chars[i] == \"E\" or chars[i] ==\
    \ \"i\" or chars[i] == \"I\" or chars[i] == \"o\" or chars[i] == \"O\" or chars[i]\
    \ == \"u\":\n            chars.pop(i)\n            vowel = chars[i]\n        \
    \    break\n\n    return vowel\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    <?php\n$vowels = \"aeiouAEIOU\";\n$w = \"\";\n$words = array('hey','hello','hi','hey',\
    \ 'hi', 'he', 'h');\nforeach ($words as $word) {\n    if (strlen($word) > 1) {\n\
    \        $w .= $word;\n    }\n}\n$vw = str_split($w);\n$vw = array_filter($vw);\n\
    foreach ($vw as $word) {\n    $pos = strrpos($vowels, $word);\n    if ($pos !==\
    \ false) {\n        $vowel = $vowels[$pos];\n        echo $word;\n        echo\
    \ '<br />", "    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $endPos = strlen($word)\
    \ - 1;\n    $startPos = 0;\n    \n    foreach ($vowels as $v) {\n        \n  \
    \      if ($v === $word[$endPos] || $v === $word[$startPos]) {\n            return\
    \ $v;\n        }\n    }\n    \n    return \"\";\n}\n", "\t$vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n\treturn $word[vw_prev($vowels, strlen($word)\
    \ - 1) % strlen($word)];\n}\n", "    $word=strtolower($word);\n    $vowels=array('a','e','i','o','u','y');\n\
    \    $length=strlen($word);\n    $index=0;\n    $vowel_index=0;\n    $found=false;\n\
    \    while($index<$length){\n        if(in_array(substr($word,$index,1),$vowels)){\n\
    \            $vowel_index=$index;\n            $found=true;\n        }\n     \
    \   $index++;\n    }\n    if($found){\n        $left=substr($word,0,$vowel_index+1);\n\
    \        $right=substr($word,$vowel_index+1,$length-$vowel_index-1);\n       \
    \ if($left!='' && $right!=''){\n            $left=strtolower($left);\n       \
    \     $right=strtolower($right);\n            if($left!=$right){\n           \
    \     $right_index=strlen($right);\n                $vowel_right='';\n       \
    \         $vowel_right_index=0;\n                while($right_index>0){\n    \
    \                if(in_array($right[$right_index],$vowels)){\n               \
    \         $vowel_right=$right[$right_index];\n                        $vowel_right_index=$right_index;\n\
    \                        break;\n                    }\n                    $right_index--;\n\
    \                }\n                $right_index++;\n                return $vowel_right.substr(0,$vowel_right_index);\n\
    \            }\n        }\n    }\n    return '';\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nYou should use `$index=strrpos($word,$needle)` to find the last occurrence\
    \ instead of `strpos($word,$needle)` to find the first occurrence.\n<|/ c |>\n\
    <| a |>\nMy first thought was to use strrev() to reverse the word and then use\
    \ strpos to find the first vowel backwards and then use substr to return what\
    \ you want.  However, you still have to be careful, since strpos will only work\
    \ if the letter is at the beginning.  So if you have a word like \"mydog\" the\
    \ first vowel would be the one before the \"y\", not the \"y\".\nSo this works\
    \ better, but still not perfect:\n<code>\n$word='mydog';\n$posVowel=strpos($word,strrev($word));\n\
    $posVowel-=strlen($word);\n$firstVowel=substr($word,$posVowel,1);\n$firstVowel=substr($firstVowel,0,1);\n\
    echo $firstVowel;\n</code>\nOutput:\n<code>\ny\n</code>\n", "    $words = preg_split('//',\
    \ $word, -1, PREG_SPLIT_NO_EMPTY);\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n\
    \    foreach($words as $word) {\n        $words = preg_split('//', $word, -1,\
    \ PREG_SPLIT_NO_EMPTY);\n        foreach($words as $i => $word) {\n          \
    \  $countVowel = 0;\n            if(in_array($word[0][0], $vowels)) {\n      \
    \          foreach($words as $j => $word) {\n                    if($word[$j][0]\
    \ != $word[$j-1][0]) {\n                        $countVowel++;\n             \
    \           break;\n                    }\n                }\n               \
    \ if(($i + 1) < count($words)) {\n                    $countVowel++;\n       \
    \         }\n                if($countVowel > count($words) - ($i + 1)) {\n  \
    \                  return '';\n                }\n            }\n        }\n \
    \   }\n    return '';\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=regex,php,loops,performance,performance\
    \ dscore=0 |>\nYou can use following regex to get it done\n<code>\n([A-za-z]*)[aeiou][^aeiou]*\n\
    </code>\nIt captures first letter then it matches vowels then again matches anything\
    \ other than vowels.\nSee Demo\n<|/ a |>\n<| c |>\nWhy would you use the `/` delimiters\
    \ around each character? They just add overhead.\n<|/ c |>\n<| c |>\nYes that's\
    \ true, I just wrote that for readability, my bad.\n<|/ c |>\n<| c |>\nThat will\
    \ match `u` at the beginning and end of the string which is not what is required.\
    \ Also, try `get_closest_vowel(\"a\")` and see that it will return an empty string\
    \ rather than the vowel.\n<|/ c |>\n<| a tags=regex,php,loops,performance,performance\
    \ dscore=0 |>\nHere is my solution:\n<code>\n<?php\n/**\n * String word\n * String\n\
    \ */", "    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    foreach ($vowels\
    \ as $vowel) {\n        $n = strlen($word);\n        $i = 0;\n        while ($i\
    \ < $n) {\n            $j = strpos($word, $vowel, --$i);\n            if ($j ===\
    \ false || $j > $n - 1) {\n                break;\n            }\n           \
    \ if ($i > 0) {\n                $word[$j] = \"\";\n            }\n        }\n\
    \        if ($i < $n && $word[$i] !== \"\") {\n            return $vowel;\n  \
    \      }\n    }\n    return \"\";\n}\n", "    $vowels = ['a','e','i','o','u'];\n\
    \    $consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];\n\
    \    $endPos = strrpos($word,$consonants);\n    $beginPos = strpos($word,$consonants);\n\
    \    if($endPos != false && $beginPos != false)\n    {\n        for($i=$beginPos;$i<$endPos;$i++)\n\
    \        {\n            if(in_array($word[$i],$vowels))\n            {\n     \
    \           return $word[$i];\n            }\n        }\n    }\n    return \"\"\
    ;\n}\n", "    $vowels = ['a','e','i','o','u'];\n    foreach ($vowels as $vowel)\
    \ {\n        if (strlen($word) > 0) {\n            $vowel_length = strlen($vowel);\n\
    \            $next_char_index = strrpos($word, $vowel);\n            $next_char_length\
    \ = $next_char_index - $vowel_length;\n            if ($next_char_length > 0)\
    \ {\n                $next_char = substr($word, $next_char_index, $next_char_length);\n\
    \                return $next_char;\n            }\n        }\n    }\n    return\
    \ \"\";\n}", "    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $left_vowel =\
    \ array_shift($vowels);\n    $right_vowel = array_pop($vowels);\n    $vowel_pos\
    \ = 0;\n    $left_pos = 0;\n    \n    for ($i = 0; $i < strlen($word); $i++) {\n\
    \        if ($word[$i] === $left_vowel) {\n            $left_pos = $i;\n     \
    \   }\n        if ($word[$i] === $right_vowel) {\n            $right_pos = $i;\n\
    \        }\n    }\n    \n    if ($left_pos > 0) {\n        return substr($word,\
    \ $left_pos + 1, ($vowel_pos - $left_pos - 1));\n    }\n    return \"\";\n}\n\
    </code>\n<|/ a |>\n<| c |>\nI feel like I'm missing something here, but I can't\
    \ seem to get the right output for these tests:\n\n```echo get_closest_vowel(\"\
    quick\");\necho \"\\n\";\necho get_closest_vowel(\"AB\");\necho \"\\n\";\necho\
    \ get_closest_vowel(\"aB\");\necho \"\\n\";\necho get_closest_vowel(\"cB\");\n\
    echo \"\\n\";\necho get_closest_vowel(\"Yogurt\");\necho \"\\n\";\necho get_closest_vowel(\"\
    Yogurt\");\necho \"\\n\";\necho get_closest_vowel(\"Yogurt\");\necho \"\\n\";\n\
    echo get_closest_vowel(\"yogurt\");\necho \"\\n\";\necho get_closest_vowel(\"\
    yogurt\");\necho \"\\n\";\necho get_closest_vowel(\"yogurt\");\necho \"\\n\";\n\
    echo get_closest_vowel(\"Yogurt\");\necho \"\\n\";\necho get_closest_vowel(\"\
    yogurt\");\necho \"\\n\";\necho get_closest_vowel(\"yogurt\");\necho \"\\n\";\n\
    echo get_closest_vowel(\"yogurt\");\necho \"\\n\";\necho get_closest_vowel(\"\
    yogurt\");\necho \"\\n\";\necho get_closest_vowel(\"yogurt\");\necho \"\\n\";\n\
    echo get_closest_vowel(\"yogurt\");```\n<|/ c |>\n<| c |>\nI think you need to\
    \ add `return \"\";` at end of `else` statement.\n<|/ c |>\n<| c |>\nI updated\
    \ the answer. You need to add `return \"\";` at end of `else` statement.\n<|/\
    \ c |>\n<| a dscore=1 |>\nThis may help you.\n<code>\n<?php", "    $vowels = \"\
    aeiouAEIOU\";\n    $pos = strrpos($word, $vowels);\n    if ($pos===false) return\
    \ '';\n    return substr($word, $pos + strlen($vowels), 1);\n}", "    $vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"e\", \"i\");\n    $wordArray\
    \ = explode(\" \", $word);\n    $count = count($wordArray);\n    for($i = 0; $i\
    \ < $count; $i++) {\n        if(!in_array($wordArray[$i], $vowels)) {\n      \
    \      $wordArray[$i] = \"\";\n        }\n    }\n    for($i = $count - 1; $i >=\
    \ 0; $i--) {\n        if(!in_array($wordArray[$i], $vowels)) {\n            $wordArray[$i]\
    \ = \"\";\n        }\n    }\n    \n    $vowelCount = 0;\n    foreach($wordArray\
    \ as $word) {\n        if($word != \"\") {\n            $vowelCount++;\n     \
    \   }\n    }\n    return $wordArray[$vowelCount - 1];\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| a dscore=0 tags=php |>\nTry this code:\n<code>\n$str = \"abacaba\";\n\
    $vowel = array(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"A\",\"E\",\"I\",\"O\",\"\
    U\",\"Y\");\n$str_array = explode(\" \", $str);\n$str_array_count = count($str_array);\n\
    $i=0;\n$vowel_count = 0;\n$vowels_count = count($vowel);\nfor($i=0;$i<$str_array_count;$i++)\
    \ {\n   if(in_array($str_array[$i],$vowel)) {\n       $vowel_count++;\n   }\n\
    }\nif($vowel_count < $vowels_count) {\n   $vowels_count =$vowel_count;\n}\n$vowels_array\
    \ = array();\n$i=0;\nfor($i=0;$i<$str_array_count;$i++) {\n   if(in_array($str_array[$i],$vowel))\
    \ {\n       $vowels_array[$i] = $str_array[$i];\n   }\n}\necho $vowels_array[$vowels_count-1];\n\
    </code>\n<|/ a |>\n<| a |>\nMy solution in php \n<code>\n<?php", "    \n    $vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\n    $lastLetter = substr($word, -strlen($word));\n\
    \    $startIndex = strrpos($vowels, $lastLetter);\n\n    if ($startIndex === false)\
    \ {\n        return \"\";\n    } else {\n        $startIndex += 1;\n    }\n\n\
    \    foreach ($vowels as $key => $vowel) {\n        if ($startIndex + $key ==\
    \ strrpos($vowels, $lastLetter)) {\n            return $vowel;\n        }\n  \
    \  }\n\n    return \"\";\n}\n\nget_closest_vowel(\"ab\");\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThank you for you answer. I did find another solution which works,\
    \ but it only works with PHP7+ because of array_count_values.\n<|/ c |>\n<| a\
    \ |>\nHere's an approach with array_count_values, array_filter and array_search\
    \ functions:\n<code>", "    $consonants = array(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n    $vowels = array(\"a\", \"e\", \"\
    i\", \"o\", \"u\");\n\n    $vowels_count = 0;\n    foreach ($word as $char) {\n\
    \        if (in_array($char, $vowels)) $vowels_count++;\n    }\n\n    $vowel_found\
    \ = false;\n    foreach ($consonants as $consonant) {\n        $position = rpos($word,\
    \ $consonant);\n        if ($position > 0 && $position < strlen($word) - $vowels_count\
    \ + 1) {\n            $consonant_position = $position - $vowels_count;\n     \
    \       $vowel_found = true;\n            foreach ($vowels as $vowel) {\n    \
    \            if (strtoupper($word[$consonant_position]) === $vowel) break;\n \
    \           }\n            break;\n        }\n    }\n    return $vowel_found ?\
    \ strtoupper($word[$consonant_position]) : \"\";\n}\n</code>\n<|/ a tags=php |>\n\
    <| a tags=php |>\nIf you only need the vowels within the given word (and not the\
    \ rest of the word), you can just use strpos to search for the first occurrence\
    \ of the vowel and then use substr to get everything between that position and\
    \ the next occurrence of another vowel.\n<code>\n$a = 'abc';\n$pos = strpos($a,\
    \ 'a');\n$len = strlen($a);\n\nif ($pos === FALSE) {\n    // no vowels found\n\
    } else {\n    $len = strlen($a) - $pos;\n    $vowel = substr($a, $pos, $len);\n\
    \n    $vowel = strtoupper($vowel);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ tags=php |>\n<code>", "    $vowels = array('a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U');\n    $wordLen = strlen($word);\n    $i = 0;\n    while($i <\
    \ $wordLen) {\n        $nextConsonant = substr($word, $i, 1);\n        $nextVowel\
    \ = array_shift($vowels);\n        if($nextConsonant == $nextVowel) {\n      \
    \      $i += 1;\n        } else {\n            return $nextVowel;\n        }\n\
    \    }\n    return '';\n}\n\necho get_closest_vowel(\"yogurt\") . \"\\n\"; //\
    \ u\necho get_closest_vowel(\"FULL\") . \"\\n\"; // U\necho get_closest_vowel(\"\
    quick\") . \"\\n\"; // \necho get_closest_vowel(\"ab\") . \"\\n\"; // \n", " \
    \  \n    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $endvowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $leftvowels = array('a', 'e', 'i', 'o', 'u');\n  \
    \  $rightvowels = array('a', 'e', 'i', 'o', 'u');\n    \n    $vowels_left = '';\n\
    \    $vowels_right = '';\n    $endvowels_left = '';\n    $endvowels_right = '';\n\
    \    $leftvowels_left = '';\n    $leftvowels_right = '';\n    $rightvowels_left\
    \ = '';\n    $rightvowels_right = '';\n    \n    $wordlen = strlen($word);\n \
    \   $leftvowel_found = false;\n    $rightvowel_found = false;\n    \n    for($i\
    \ = $wordlen-1; $i >= 0; $i--){\n        $char = substr($word, $i, 1);\n     \
    \   $vowel_found = in_array($char, $vowels);\n        \n        if ($leftvowel_found\
    \ == false && $rightvowel_found == false && $vowel_found){\n            $leftvowels_left\
    \ .= $char;\n            $leftvowels_right = $char;\n            $leftvowel_found\
    \ = true;\n        }\n        \n        $vowel_found = in_array($char, $endvowels);\n\
    \        \n        if ($leftvowel_found == false && $rightvowel_found == false\
    \ && $vowel_found){\n            $endvowels_left .= $char;\n            $endvowels_right\
    \ = $char;\n            $rightvowel_found = true;\n        }\n        \n     \
    \   $vowel_found = in_array($char, $leftvowels);\n        \n        if ($leftvowel_found\
    \ == false && $rightvowel_found == false && $vowel_found){\n            $leftvowels_right\
    \ .= $char;\n            $leftvowels_left = $char;\n            $leftvowel_found\
    \ = true;\n        }\n        \n        $vowel_found = in_array($char, $rightvowels);\n\
    \        \n        if ($leftvowel_found == false && $rightvowel_found == false\
    \ && $vowel_found){\n            $rightvowels_left .= $char;\n            $rightvowels_right\
    \ = $char;\n            $rightvowel_found = true;\n        }\n    }\n    \n  \
    \  if ($leftvowel_found == false && $rightvowel_found == false){\n        return\
    \ '';\n    }\n    \n    $result = $leftvowels_left;\n    if ($leftvowels_right\
    \ != $leftvowels_left){\n        $result .= $leftvowels_right;\n    }\n    if\
    \ ($leftvowels_right ", "    $vowels = array('a', 'e', 'i', 'o', 'u');\n    foreach\
    \ ($vowels as $i => $v) {\n        $word = preg_replace('~' . $v . '~', '', $word);\n\
    \    }\n    return $word;\n}\n</code>\n<|/ a tags=string,php,loops |>\n<| c |>\n\
    This returns 'z' when it should be returning 'y' as it is the closest vowel right\
    \ after 'o'\n<|/ c |>\n<| c |>\nThis one worked!! Thanks a lot man, you're the\
    \ best!! :D\n<|/ c |>\n<| a tags=string,php,loops |>\n<code>\n$string = 'This\
    \ is my string';\n$vowel = array('a','e','i','o','u');\n$stringlength = strlen($string);\n\
    $vowelLength = strlen($vowel);\n$stringLength = strlen($string) - $stringlength;\n\
    $newString = '';\nfor($i=$stringlength-1; $i>0; $i--){\n    if(in_array($string[$i],$vowel)\
    \ && in_array($string[$i-1],$vowel)){\n        $newString .= $string[$i-1];\n\
    \    }else{\n        $newString .= $string[$i];\n    }\n}\necho $newString;\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis one worked for me. But I really want\
    \ to thank you for teaching me something new. :D\n<|/ c |>\n<| a dscore=0 |>\n\
    Here is my solution:\n<code>", "    \n    $wordArray = str_split($word);\n   \
    \ $endIndex   = count($wordArray) - 1;\n    \n    $consonants = [\n        \"\
    b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"\
    r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\",\n        \"A\",\"B\",\"C\",\"D\"\
    ,\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\"\
    ,\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"\n    ];\n    \n    for\
    \ ($i = 0; $i <= $endIndex; $i++) {\n        \n        $vowels = false;\n    \
    \    \n        for ($j = 0; $j < count($consonants); $j++) {\n            \n \
    \           if ($wordArray[$i] == $consonants[$j]) {\n                \n     \
    \           $vowels = true;\n                \n                break;\n      \
    \      }\n        }\n        \n        if ($vowels) {\n            \n        \
    \    break;\n        }\n    }\n    \n    return $wordArray[$i];\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nI did this in python (which could be easily\
    \ translated to php):\n<code>\ndef get_closest_vowel(word):\n    vowels = \"aAyY\xE9\
    \xE9Oo0\xD4\xD6\xC7\xE7\xC7\"\n    ending_vowel = None\n    for i,c in enumerate(word):\n\
    \        if c in vowels:\n            return c # if a vowel is found return the\
    \ vowel\n        elif c == \"u\" and i != 0 and word[i-1] not in vowels:\n   \
    \         return c\n        elif c == \"u\" and i != len(word) - 1 and word[i+1]\
    \ not in vowels:\n            return c\n        elif c not in vowels and word[i-1]\
    \ not in vowels and word[i+1] not in vowels:\n            return c\n        elif\
    \ c in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n     \
    \       ending_vowel = c\n    if ending_vowel:\n        return ending_vowel\n\
    \    else:\n        return \"\"\n\nprint(get_closest_vowel(\"Yogurt\"))\nprint(get_closest_vowel(\"\
    Quick\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"ab\"))\n\
    print(get_closest_vowel(\"ab\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"\
    Quick\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"a\"))\n\
    print(get_closest_vowel(\"ab\"))\nprint(get_closest_vowel(\"yogurt\"))\nprint(get_closest_vowel(\"\
    Yogurt\"))\n", "    foreach ($word as $letter){\n        if (preg_match(\"/[AEIOUYaeiouy]/i\"\
    , $letter)) {\n            $vowel = $letter;\n        }\n    }\n    return $vowel;\n\
    }\n", "    // Your code here\n    $vowels = \"aeiouAEIOU\";\n    $vowels_arr =\
    \ str_split($vowels);\n    $vowels_arr = array_reverse($vowels_arr);\n    foreach($vowels_arr\
    \ as $vowel) {\n        \n        if ($word[strlen($word)-1] == $vowel) {\n  \
    \          $a = substr($word, 0, -1);\n            $b = substr($word, 0, -1);\n\
    \            $word_arr = str_split($a);\n            $word_arr = array_reverse($word_arr);\n\
    \            $word_arr = array_merge($word_arr,$vowels_arr);\n            $word_arr\
    \ = array_merge($word_arr,$b);\n            $word_arr = array_unique($word_arr);\n\
    \            \n            return substr($word_arr[0], 1);\n        }\n    }\n\
    \    return \"\";\n}\nvar_dump(get_closest_vowel(\"yogurt\"));\nvar_dump(get_closest_vowel(\"\
    FULL\"));\nvar_dump(get_closest_vowel(\"quick\"));\nvar_dump(get_closest_vowel(\"\
    ab\"));\nvar_dump(get_closest_vowel(\"aB\"));", "    // Write your code here.\n\
    \    for($i=strlen($word)-1;$i>=0;$i--) {\n        if($word[$i]=='a' || $word[$i]=='e'\
    \ || $word[$i]=='i' || $word[$i]=='o' || $word[$i]=='u'){\n            $word=substr($word,0,$i)+$word[$i+1];\n\
    \            return $word;\n        }\n    }\n    return '';\n}\nget_closest_vowel(\"\
    yogurt\");\nget_closest_vowel(\"FULL\");\nget_closest_vowel(\"quick\");\nget_closest_vowel(\"\
    ab\");\nget_closest_vowel(\"a\");\nget_closest_vowel(\"b\");\nget_closest_vowel(\"\
    c\");", "    $vowels = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U');\n\
    \    foreach ($vowels as $vowel) {\n        foreach ($word as $i => $char) {\n\
    \            if ($char !== $vowel) {\n                break;\n            }\n\
    \            $left = $i - 1;\n            $right = $i + 1;\n            if ($left\
    \ >= 0) {\n                if ($word[$left] === $vowel) {\n                  \
    \  return $vowel;\n                }\n            }\n            if ($right <\
    \ strlen($word)) {\n                if ($word[$right] === $vowel) {\n        \
    \            return $vowel;\n                }\n            }\n        }\n   \
    \ }\n    return \"\";\n}\n</code>\n<|/ a dscore=1 tags=php,string |>\n<| a tags=php,string\
    \ |>\nI got this problem too and this is my solution: \n<code>", "\t\n\t$vowel\
    \ = array('a', 'e', 'i', 'o', 'u');\n\t\n\t$letters = str_split($word);\n\t\n\t\
    sort($letters);\n\t\n\t\n\tforeach ($letters as $key => $letter) {\n\t\tif (in_array($letter,\
    \ $vowel)) {\n\t\t\t$vowel_found = $letter;\n\t\t}\n\t}\n\t\n\tif ($vowel_found\
    \ != '') {\n\t\treturn $vowel_found;\n\t} else {\n\t\treturn '';\n\t}\n}", " \
    \   $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $last_consonant =\
    \ end($word);\n    $last_vowel = array_search($last_consonant, $vowels);\n   \
    \ $result = $word[$last_vowel + 1];\n    return $result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\n<code>\n<?php\n$vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"y\", \"a\", \"e\", \"i\", \"o\", \"u\");\n$string = 'aeronautica';\n$search\
    \ = substr($string, -strlen($string) % 2, strlen($string));\n$search = str_replace($vowels,\
    \ '', $search);\nif($search){\n    echo $search;\n}", "    $vowels = array(\"\
    a\",\"e\",\"i\",\"o\",\"u\");\n    foreach ($vowels as $vowel) {\n        $consonants\
    \ = str_split($word);\n        sort($consonants);\n        sort($consonants, SORT_STRING);\n\
    \        if ($vowel == $consonants[0]) {\n            return $vowel;\n       \
    \ }\n    }\n    return \"\";\n}\n", "    $vowels = array('a', 'e', 'i', 'o', 'u');\n\
    \    $vowels_count = count($vowels);\n    for($i = 0; $i < $vowels_count; $i++)\
    \ {\n        $pos = strrpos($word, $vowels[$i]);\n        if ($pos !== FALSE)\
    \ {\n            $vowel_found = $vowels[$i];\n            break;\n        }\n\
    \    }\n    return $vowel_found;\n}", "    $word = strtolower($word);\n    $length\
    \ = strlen($word);\n    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \    $vowels_count = count($vowels);\n    $vowel_positions = array();\n    $prev_vowel_position\
    \ = 0;\n    $prev_vowel = 0;\n    for ($i=0; $i<$length-1; $i++) {\n        if\
    \ (in_array($word[$i], $vowels)) {\n            $vowel_positions[$i] = $i;\n \
    \       }\n        if ($prev_vowel && $word[$i] == $prev_vowel) {\n          \
    \  $vowel_positions[$i] = $prev_vowel_position;\n        }\n        $prev_vowel\
    \ = $word[$i];\n        $prev_vowel_position = $i;\n    }\n    $closest_vowels\
    \ = array_slice($vowel_positions, 0, count($vowel_positions)-1);\n    if (count($closest_vowels)\
    \ === $vowels_count) {\n        $closest_vowel = array_pop($closest_vowels);\n\
    \    } else {\n        $closest_vowel = $vowels[0];\n    }\n    return $closest_vowel;\n\
    }\n\n/**\n * Description TODO\n * @return string \n */ ", "    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U');\n    $vowelsCount = array_count_values($vowels);\n\
    \    $result = \"\";\n    foreach ($vowels as $vowel) {\n        if (isset($vowelsCount[$vowel]))\
    \ {\n            if ($vowelsCount[$vowel] > 1) {\n                $result = $vowel;\n\
    \                break;\n            } else {\n                $result = \"\"\
    ;\n                break;\n            }\n        } else {\n            $result\
    \ = \"\";\n            break;\n        }\n    }\n    return $result;\n}\n</code>\n\
    <|/ a tags=php dscore=2 |>\n<| c |>\nThis does not provide an answer to the question.\
    \ Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/29373346)\n<|/ c |>\n<| c |>\nSorry\
    \ about that, I've updated my answer. Thanks\n<|/ c |>\n<| a dscore=1 tags=php\
    \ |>\nYou can do this easily using strrpos() :\n<code>\n$string = 'aba';\n$char\
    \ = 'a';\n\n$last = strrpos($string, $char);\n$last = strlen($last)-1;\n\nif ($last\
    \ > 0){\n    $result = substr($string, $last);\n}\n\necho \"$result\";\n</code>\n\
    <|/ a |>\n<| c |>\nThat would not work if `$string` was `\"Aa\"`\n<|/ c |>\n<|\
    \ c |>\nThis answer has some flaws. Why not `if ($last > 0) { $result = substr($string,\
    \ $last); }`? And what about if `'a'` isn't found in `$string`?\n<|/ c |>\n<|\
    \ c |>\nI edited my answer. Thanks for pointing that out.\n<|/ c |>\n<| c |>\n\
    This still fails for `\"Aa\"`\n<|/ c |>\n<| c |>\nYou also need to check if `$char`\
    \ is found in `$string`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string =\
    \ 'aba';\n$char = 'a';\n\n$last = strrpos($string, $char);\n$last = strlen(",
  "    if (!is_string($word))\n        return \"\";\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    for ($i=$vowels_count;\
    \ $i>0; $i--){\n        $j = ($i>$vowels_count-1) ? ($vowels_count - 1) : $i;\n\
    \        $letter = $word[$j];\n        $prev_letter = $word[$j-1];\n        $next_letter\
    \ = $word[$j+1];\n        if ($letter == $prev_letter || $letter == $next_letter){\n\
    \            return $letter;\n        }\n    }\n    return \"\";\n}\n", "    $result\
    \ = '';\n    for($i = 0; $i < strlen($word); $i++) {\n        $letter = $word[$i];\n\
    \        if(in_array($letter, ['a', 'e', 'i', 'o', 'u'])) {\n            $result\
    \ .= $letter;\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,algorithm\
    \ dscore=2 |>\n<| a |>\n<code>\n<?php", "    \n    $vowels = \"aeiou\";\n    $vowels_size\
    \ = count($vowels);\n\n    $right_side = substr($word, 0, -1);\n    $right_side_size\
    \ = strlen($right_side);\n\n    if ($right_side_size == 0) {\n        return \"\
    \";\n    } elseif ($right_side_size < $vowels_size) {\n        return \"\";\n\
    \    } elseif ($right_side_size > $vowels_size) {\n        return $right_side[$vowels_size\
    \ - 1];\n    }\n    \n    $vowels_found = 0;\n    \n    for ($i = 0; $i < $right_side_size;\
    \ $i++) {\n        \n        if (preg_match('/[' . $vowels . ']/i',$right_side[$i]))\
    \ {\n            $vowels_found++;\n            if ($vowels_found == $vowels_size)\
    \ {\n                return $right_side[$i];\n            }\n        }\n    }\n\
    \    \n}\n", "  if(strlen($word) < 2)\n    return \"\";\n  if(strlen($word) >\
    \ 3)\n    return \"\";\n  if(ctype_upper($word[0])) {\n    if(ctype_upper($word[1]))\
    \ {\n      if(ctype_upper($word[2])) {\n        if(ctype_upper($word[3]))\n  \
    \        return \"U\";\n        else if(ctype_upper($word[3]))\n          return\
    \ \"O\";\n        else if(ctype_upper($word[4]))\n          return \"E\";\n  \
    \      else if(ctype_upper($word[4]))\n          return \"A\";\n        else \n\
    \          return \"\";\n      } else if(ctype_upper($word[2])) {\n        if(ctype_upper($word[3]))\n\
    \          return \"O\";\n        else if(ctype_upper($word[3]))\n          return\
    \ \"A\";\n        else if(ctype_upper($word[4]))\n          return \"E\";\n  \
    \      else if(ctype_upper($word[4]))\n          return \"U\";\n        else \n\
    \          return \"\";\n      } else if(ctype_upper($word[3])) {\n        if(ctype_upper($word[4]))\n\
    \          return \"A\";\n        else if(ctype_upper($word[4]))\n          return\
    \ \"U\";\n        else if(ctype_upper($word[5]))\n          return \"E\";\n  \
    \      else if(ctype_upper($word[5]))\n          return \"O\";\n        else \n\
    \          return \"\";\n      } else if(ctype_upper($word[4]))\n        return\
    \ \"U\";\n      else \n        return \"O\";\n    } else if(ctype_upper($word[1]))\
    \ {\n      if(ctype_upper($word[2])) {\n        if(ctype_upper($word[3]))\n  \
    \        return \"O\";\n        else if(ctype_upper($word[3]))\n          return\
    \ \"U\";\n        else if(ctype_upper($word[4]))\n          return \"A\";\n  \
    \      else if(ctype_upper($word[4]))\n          return \"E\";\n        else \n\
    \          return \"\";\n      } else if(ctype_upper($word[2])) {\n        if(ctype_upper($word[3]))\n\
    \          return \"A\";\n        else if(ctype_upper($word[3]))\n          return\
    \ \"O\";\n        else if(ctype_upper($word[4]))\n          return \"E\";\n  \
    \      else if(ctype_upper($word[4]))\n          return \"U\";\n        else \n\
    \          return \"\";\n      } else if(ctype_upper($word[3])) {\n        if(ctype_upper($word[4]))\n\
    \          return \"U\";\n        else if(ctype_upper($word[4]))\n          return\
    \ \"O\";\n        else if(ctype_upper($word[5]))\n          return \"E\";\n  \
    \      else if(ctype_upper($word[5]))\n          return \"A\";\n        else ",
  "    // Your code here\n    $arr = str_split($word);\n    $arr2 = array_reverse($arr);\n\
    \    $count = count($arr2);\n    for($i = 0; $i < $count - 1; $i++) {\n      \
    \  if($arr2[$i] == \"a\" || $arr2[$i] == \"e\" || $arr2[$i] == \"i\" || $arr2[$i]\
    \ == \"o\" || $arr2[$i] == \"u\") {\n            return $arr2[$i];\n        }\n\
    \    }\n    return \"\";\n}\n</code>\n<|/ a tags=php,string dscore=1 |>\n<| c\
    \ |>\nYou don't have to reverse the array: you can walk from the end backwards\
    \ to find matches.\n<|/ c |>\n<| c |>\nI was looking for a way to return the last\
    \ vowel.\n<|/ c |>\n<| c |>\nJust use `substr()` to find the last vowel.\n<|/\
    \ c |>\n<| c |>\nyes i do but it was a little tricky because i did not get the\
    \ first character of the string. Thanks.\n<|/ c |>\n<| c |>\nThe first character\
    \ can be gotten by `$word[0]`\n<|/ c |>\n<| a tags=php,string |>\n<code>", " \
    \   if (strlen($word) <= 2) {\n        return \"\";\n    }\n    $vowel_array =\
    \ array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $consonant_array = array(\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n    for($i\
    \ = 0; $i < strlen($word); $i++) {\n        $letter = $word[$i];\n        $found\
    \ = false;\n        $prev = $i;\n        $next = ($i + 1);\n        $found = false;\n\
    \        $consonants = $consonant_array;\n        if ($letter === $vowel_array[0])\
    \ {\n            $vowel_array = $vowel_array;\n            $consonant_array =\
    \ $consonant_array;\n        }\n        if ($letter === $vowel_array[5]) {\n \
    \           $vowel_array = $vowel_array;\n            $consonant_array = $consonant_array;\n\
    \        }\n        if ($letter === $vowel_array[6]) {\n            $vowel_array\
    \ = $vowel_array;\n            $consonant_array = $consonant_array;\n        }\n\
    \        foreach ($vowel_array as $v) {\n            if ($prev === $word[$prev]\
    \ && $letter === $consonant_array[0]) {\n                $found = true;\n    \
    \            $prev = $i;\n                break;\n            }\n        }\n \
    \       foreach ($consonant_array as $c) {\n            if ($prev === $word[$prev]\
    \ && $letter === $v) {\n                $found = true;\n                $prev\
    \ = $i;\n                break;\n            }\n        }\n        if ($found)\
    \ {\n            break;\n        }\n    }\n    if ($found) {\n        return $v;\n\
    \    } else {\n        return \"\";\n    }\n}\n$input = 'yogurt';\necho get_closest_vowel($input);\n\
    </code>\n<|/ a |>\n<| a tags=php,string |>\nAnother way to do this without using\
    \ regular expressions. Here is a method which works as follows:\n\nSplit the original\
    \ string into an array of characters (using str_split)\nLoop through the characters\
    \ and get the closest vowel to the current character. Store the index of the closest\
    \ vowel in an array\nUse the index from step 2 to split the original string into\
    \ an array of characters, and find the closest vowel to the first character in\
    \ the array and compare the two vowels.\n\nHere is the code:\n<code>\n$string\
    \ = 'yogurt';\n$array = str_split($string);\n\n$vowels = ['a','e','i','o','u'];\n\
    \n$minDistance = PHP_INT_MAX;\n$minDistanceVowel = -1;\n\n$index", "    $vowels\
    \ = array('a', 'e', 'i', 'o', 'u');\n    $vowel_count = array_count_values($vowels);\n\
    \    $consonant_count = array_count_values(str_split($word));\n    return $vowel_count['a']\
    \ < $consonant_count['e']\n        || $vowel_count['e'] < $consonant_count['i']\n\
    \        || $vowel_count['i'] < $consonant_count['o']\n        || $vowel_count['o']\
    \ < $consonant_count['u']\n        ? ''\n        : $vowels[$vowel_count['e'] <\
    \ $consonant_count['i']\n            ? 0\n            : $vowel_count['i'] < $consonant_count['o']\n\
    \            ? 1\n            : $vowel_count['o'] < $consonant_count['u']\n  \
    \          ? 2\n            : 3];\n}\n", "    $vowels = array(\"a\", \"e\", \"\
    i\", \"o\", \"u\", \"y\");\n    $vowel_count = array();\n    foreach($vowels as\
    \ $v){\n        if($word[$wordLen]===$v){\n            $vowel_count[$v]++;\n \
    \       }\n    }\n\n    $res = '';\n    $min_count = min(array_keys($vowel_count));\n\
    \    foreach($vowel_count as $v=>$cnt){\n        if($cnt==$min_count){\n     \
    \       $res = $v;\n            break;\n        }\n    }\n    return $res;\n}\n",
  "    $wordArr = str_split($word);\n    $vowels = \"aeiou\";\n    $leftVowel = array();\n\
    \    $rightVowel = array();\n    $leftConsonant = array();\n    $rightConsonant\
    \ = array();\n    foreach ($wordArr as $key => $char) {\n        if ( $char ==\
    \ \" \") {\n            continue;\n        }\n        if ( ($char >= 'a') && ($char\
    \ <= 'z') ) {\n            $leftVowel[] = $char;\n        }\n        if ( ($char\
    \ >= 'A') && ($char <= 'Z') ) {\n            $leftConsonant[] = $char;\n     \
    \   }\n        if ( $char == 'h') {\n            $leftVowel[] = \"a\";\n     \
    \   }\n        if ( $char == 'H') {\n            $leftConsonant[] = \"a\";\n \
    \       }\n        if ( $char == 'b') {\n            $rightVowel[] = \"a\";\n\
    \        }\n        if ( $char == 'B') {\n            $rightConsonant[] = \"a\"\
    ;\n        }\n    }\n    $leftVowelCount = count($leftVowel);\n    $rightVowelCount\
    \ = count($rightVowel);\n    $leftConsonantCount = count($leftConsonant);\n  \
    \  $rightConsonantCount = count($rightConsonant);\n    for ( $i = 0; $i < $leftVowelCount;\
    \ $i++ ) {\n        for ( $j = 0; $j < $leftConsonantCount; $j++ ) {\n       \
    \     if ( $leftVowel[$i] == $leftConsonant[$j] ) {\n                $consonant\
    \ = $leftConsonant[$j];\n                $leftConsonantCount --;\n           \
    \     $leftVowelCount --;\n                if ( $leftVowelCount < $leftConsonantCount\
    \ ) {\n                    $leftVowel = array_slice($leftVowel, 0, $leftVowelCount);\n\
    \                }\n                if ( $leftConsonantCount < $leftVowelCount\
    \ ) {\n                    $leftConsonant = array_slice($leftConsonant, 0, $leftConsonantCount);\n\
    \                }\n            }\n        }\n    }\n    for ( $i = 0; $i < $rightVowelCount;\
    \ $i++ ) {\n        for ( $j = 0; $j < $rightConsonantCount; $j++ ) {\n      \
    \      if ( $rightVowel[$i] == $rightConsonant[$j] ) {\n                $consonant\
    \ = $rightConsonant[$j];", "    $words = array(\"a\", \"e\", \"i\", \"o\", \"\
    u\", \"y\");\n    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n\n    $letters\
    \ = str_split($word);\n    $left = 0;\n    $right = $wordLenght;\n\n    $min_distance\
    \ = 0;\n\n    while($left < $right) {\n        $candidate = substr($word, $left,\
    \ $right);\n        if(in_array($candidate, $vowels)) {\n            $min_distance\
    \ += 1;\n            $left = $left + 1;\n        }\n        else {\n         \
    \   foreach($words as $k=>$word) {\n                $next_char = substr($word,\
    \ $left, $right);\n                $distance = get_distance($next_char, $candidate);\n\
    \                if($min_distance < $distance) {\n                    $min_distance\
    \ = $distance;\n                    $closest_word = $k;\n                }\n \
    \           }\n            $left = $left + 1;\n        }\n    }\n    return $closest_word;\n\
    }\n", "    $vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    $consonants = [\"b\"\
    ,\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\"\
    ,\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\"];\n    $vowels_count = count($vowels);\n\
    \    $consonants_count = count($consonants);\n    $i = 0;\n    $j = $consonants_count-1;\n\
    \    $result = \"\";\n    while($i<$vowels_count){\n        if(strpos($word,$vowels[$i])!==false){\n\
    \            if($j>=0){\n                if(strpos($word,$consonants[$j])!==false){\n\
    \                    $result = $vowels[$i];\n                    $j = $j-1;\n\
    \                }\n            }\n            else{\n                if(strpos($word,$consonants[$j])!==false){\n\
    \                    $result = $vowels[$i];\n                    $j = $j-1;\n\
    \                }\n            }\n        }\n        $i++;\n    }\n    return\
    \ $result;\n}", "    if (empty($word)) {\n        return \"\";\n    }\n    $vowels\
    \ = array('a', 'e', 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n   \
    \ $word = strtolower($word);\n    $len = strlen($word);\n    $right_vowel_pos\
    \ = -1;\n    $left_vowel_pos = $len-1;\n    $vowel_count = 0;\n    $i = $len-1;\n\
    \    while ($i > 0) {\n        if ($word[$i] == $vowels[$left_vowel_pos]) {\n\
    \            --$i;\n            ++$left_vowel_pos;\n        }\n        if ($word[$i]\
    \ == $vowels[$right_vowel_pos]) {\n            ++$i;\n            --$right_vowel_pos;\n\
    \        }\n        ++$vowel_count;\n    }\n    if ($vowel_count == $vowels_count\
    \ && $left_vowel_pos < $right_vowel_pos) {\n        return $vowels[$left_vowel_pos];\n\
    \    }\n    return \"\";\n}\n\n/*", "    $vowels = ['a', 'e', 'i', 'o', 'u', 'A',\
    \ 'E', 'I', 'O', 'U'];\n    $consonants = str_split($word);\n    $result = \"\"\
    ;\n    foreach ($consonants as $key => $letter) {\n        $result .= $letter;\n\
    \        if (($key + 1) === sizeof($consonants)) {\n            $result = strtr($result,\
    \ $vowels);\n            break;\n        }\n        $result = strtr($result, $vowels,\
    \ $consonants[$key + 1]);\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like this idea. I just added one more thing to it and added a\
    \ test to see if the word is \"A\" instead of \"a\". This is the final code: https://gist.github.com/andrewwhitaker/443fa492ba917d6bd9947cdbcb080a97\n\
    <|/ c |>\n<| c |>\nGood catch, I didn't think to test if the first letter was\
    \ an A\n<|/ c |>\n<| a dscore=2 |>\nThis may be a good solution, also it can be\
    \ modified to suit your needs.\n<code>\n<?php\n\n$a = \"ab\"; //String containing\
    \ single character \"a\" or \"b\"\n$b = \"\"; //Empty string to store new character\n\
    $vowels = \"aeiou\"; //Vowel set for searching\n\nfor($i=strlen($a)-1;$i>=0;$i--){\n\
    \    if($a[$i] == $vowels[0] || $a[$i] == $vowels[strlen($vowels)-1]){\n     \
    \   $b += $a[$i]; \n    }else{\n        break;\n    }\n}\n\necho $b;\n</code>\n\
    <|/ a tags=php,string,consonant,vowel |>\n<| c |>\nThis also works. Thanks for\
    \ your answer, but I found the answer I was looking for. :)\n<|/ c |>\n<| a |>\n\
    I was looking for something that looked good but didn't work. I found this answer:\n\
    <code>", "    $vowels = array('a','e','i','o','u');\n    for($i=strlen($word)-1;$i>-1;$i--){\n\
    \        if(!in_array($word[$i],$vowels)){\n            return \"\";\n       \
    \ }\n    }\n    return $word[$i];\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nYou\
    \ probably want `return substr($word, -$i);`\n<|/ c |>\n<| c |>\nNice and elegant\
    \ solution!\n<|/ c |>\n<| c |>\nThis does not work correctly. `get_closest_vowel(\"\
    ab\")` returns `\"\"` instead of `\"\"`. It's also not the correct answer because\
    \ it is case-sensitive.\n<|/ c |>\n<| c |>\n`get_closest_vowel(\"ab\")` returns\
    \ `\"\"` because it is first and only condition that is met in my code. Do you\
    \ see other conditions?\n<|/ c |>\n<| c |>\nI see it now... I was misreading the\
    \ question, I was thinking about `get_closest_vowel(\"Ab\")`. I misinterpreted\
    \ the part about only checking right side of the word. My bad!\n<|/ c |>\n<| a\
    \ tags=php,string |>\n<code>\n<?php", "    $vowel_positions = [\n        'a' =>\
    \ [\n            2 => [\n                'i' => -1,\n                'u' => -1,\n\
    \                'e' => -1,\n                'o' => -1,\n                'a' =>\
    \ -1,\n                'i' => -1,\n                'u' => -1,\n              \
    \  'e' => -1,\n                'o' => -1,\n                'a' => -1,\n      \
    \          'i' => -1,\n                'u' => -1,\n                'e' => -1,\n\
    \                'o' => -1,\n                'a' => -1,\n            ],\n    \
    \        3 => [\n                'i' => -1,\n                'u' => -1,\n    \
    \            'e' => -1,\n                'o' => -1,\n                'a' => -1,\n\
    \                'i' => -1,\n                'u' => -1,\n                'e' =>\
    \ -1,\n                'o' => -1,\n                'a' => -1,\n              \
    \  'i' => -1,\n                'u' => -1,\n                'e' => -1,\n      \
    \          'o' => -1,\n                'a' => -1,\n            ],\n          \
    \  4 => [\n                'i' => -1,\n                'u' => -1,\n          \
    \      'e' => -1,\n                'o' => -1,\n                'a' => -1,\n  \
    \              'i' => -1,\n                'u' => -1,\n                'e' =>\
    \ -1,\n                'o' => -1,\n                'a' => -1,\n              \
    \  'i' => -1,\n                'u' => -1,\n                'e' => -1,\n      \
    \          'o' => -1,\n                'a' => -1,\n            ],\n          \
    \  5 => [\n                'i' => -1,\n                'u' => -1,\n          \
    \      'e' => -1,\n                'o' => -1,\n                'a' => -1,\n  \
    \              'i' => -1,\n                'u' => -1,\n                'e' =>\
    \ -1,\n                'o' => -1,\n                'a' => -1,\n              \
    \  'i' => -1,\n                'u' => -1,\n                'e' => -1,\n      \
    \          'o' => -1,\n                'a' => -1,\n            ],\n          \
    \  6 => [\n                'i' => -1,\n                'u' => -1,\n          \
    \      'e' => -1,\n                'o' => -1,\n                'a' => -1,\n  \
    \              'i' => -1,\n                'u' => -1,\n                'e' =>\
    \ -1,\n                'o' => -1,\n                'a' => -1,\n              \
    \  'i' => -1,\n                'u' => -1,\n                'e' => -1,\n      \
    \          'o' => -1,\n                'a' => -1,\n            ],\n          \
    \  7 => [\n                'i' => -1,\n                'u' => -1,\n          \
    \      'e' => -1,\n                'o' => -1,\n                'a' => -1,\n  \
    \              'i' => -1,\n                'u' => -1,\n                'e' =>\
    \ -1,\n                'o' => -1,\n                'a' => -1,\n              \
    \  'i' => -1,\n                'u' => -1,\n                'e' => -1,\n      \
    \          'o' => -1,\n                'a' => -1,\n            ],\n          \
    \  8 => [\n                'i' => -1,", "    $vowel_arr = [ 'a', 'e', 'i', 'o',\
    \ 'u', 'A', 'E', 'I', 'O', 'U' ];\n    \n    // Loop through word from right to\
    \ left\n    for($i=strlen($word)-1; $i >= 0; $i--){\n        \n        // Find\
    \ index of first consonant in the string\n        $first_con_index = strpos($word,'a',$i+1);\n\
    \        \n        // Find index of first vowel from the last consonant\n    \
    \    $last_con_index = strpos($word,'a',$i);\n        \n        // Get the word\
    \ from the right to left that comes after the first consonant\n        $word_before_con\
    \ = substr($word,0,$last_con_index);\n        \n        // Get the word from the\
    \ right to left that comes before the last consonant\n        $word_after_con\
    \ = substr($word,0,$first_con_index);\n        \n        // Loop through the vowels\
    \ array and check if the word contains a vowel\n        for($x=count($vowel_arr);$x>0;$x--){\n\
    \            if(in_array($word_before_con,$vowel_arr) && in_array($word_after_con,$vowel_arr))\
    \ {\n                // The word contains the vowel\n                return $vowel_arr[$x-1];\n\
    \            }\n        }\n    }\n    \n    // If no vowels were found, the function\
    \ should return an empty string\n    return \"\";\n}\n", "    $vowels = 'aeiou';\n\
    \    $consonants = 'bcdfghjklmnpqrstvwxyz';\n    \n    $start = 0;\n    $end =\
    \ $word[strlen($word) - 1];\n    \n    while(strpos($vowels, $word[$start]) !==\
    \ false){\n        $start ++;\n    }\n    \n    while(strpos($consonants, $word[$end])\
    \ !== false){\n        $end --;\n    }\n    \n    if($end < $start){\n       \
    \ return \"\";\n    }\n    \n    $start = $end + 1;\n    \n    while(strpos($vowels,\
    \ $word[$start]) !== false){\n        $start ++;\n    }\n    \n    while(strpos($consonants,\
    \ $word[$end]) !== false){\n        $end --;\n    }\n    \n    $start = $end -\
    \ 1;\n    \n    while(strpos($vowels, $word[$start]) !== false){\n        $start\
    \ --;\n    }\n    \n    while(strpos($consonants, $word[$end]) !== false){\n \
    \       $end ++;\n    }\n    \n    return $word[$end];\n}\n", "  $vowels = array(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n  $vowels_count = count($vowels);\n\
    \  $vowels_array = array();\n  foreach ($vowels as $i => $v)\n    $vowels_array[]\
    \ = $v;\n  $word = strtolower($word);\n  $result = '';\n  if (strlen($word) ===\
    \ 0)\n    return '';\n  else {\n    $i = strrpos($word, '.');\n    if ($i !==\
    \ false)\n      $word = substr($word, 0, $i);\n    foreach (str_split($word) as\
    \ $c)\n      if (in_array($c, $vowels_array))\n        $result .= $c;\n    else\
    \ {\n      $pos = strrpos($word, $c);\n      if ($pos !== false)\n        $result\
    \ = $word[$pos];\n    }\n  }\n  if ($result === '')\n    return '';\n  else\n\
    \    return $result;\n}\n", "    foreach($word[strlen($word)-1] as $i => $char)\
    \ {\n        foreach($word[strlen($word)-2] as $i2 => $char2) {\n            $char\
    \ = strtolower($char);\n            $char2 = strtolower($char2);\n           \
    \ if ($char == \"a\") {\n                if ($char2 == \"e\") {\n            \
    \        foreach($word[strlen($word)-3] as $i3 => $char3) {\n                \
    \        $char3 = strtolower($char3);\n                        if ($char3 == \"\
    o\") {\n                            foreach($word[strlen($word)-4] as $i4 => $char4)\
    \ {\n                                $char4 = strtolower($char4);\n          \
    \                      if ($char4 == \"u\") {\n                              \
    \      foreach($word[strlen($word)-5] as $i5 => $char5) {\n                  \
    \                      $char5 = strtolower($char5);\n                        \
    \                if ($char5 == \"r\") {\n                                    \
    \        return $char;\n                                        }\n          \
    \                          }\n                                }\n            \
    \                }\n                        }\n                    }\n       \
    \         }\n            }\n        }\n    }\n    return \"\";\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 tags=python,php |>\n<code>\ndef closer(word, vowels):\n\
    \  for i in range(len(word)-1):\n    current = word[i]\n    next   = word[i+1]\n\
    \    for c in vowels:\n      if current.find(c)>-1 and next.find(c)>-1:\n    \
    \    return current\n  return \"\"\n\ncloser('yogurt', ['a', 'u', 'r', 'o', 'e'])\n\
    'u'\ncloser('ab', []) # returns empty string\n''\ncloser('quick', []) # returns\
    \ empty string\n</code>\n<|/ a |>\n<| c |>\nthis might work for this problem,\
    \ but if the word is \"quick\", then it returns \"q\", it should not return \"\
    q\" because \"q\" is in the middle of \"quick\"\n<|/ c |>\n<| c |>\nI think I\
    \ fixed it. Look at it now\n<|/ c |>\n<| c |>\nThanks, it's better now\n<|/ c\
    \ |>\n<| a dscore=1 |>\n<code>\ndef get_vowels(str):\n    vowels = ['a','e','i','o','u']\n\
    \    vowels_lc = str.lower()\n    vowels_lc_set = set(vowels_lc)\n    vowels_rm\
    \ = vowels_lc_set.difference()\n    if len(vowels_rm):\n        vowels_rm.sort()\n\
    \    vowels_rm_lc = \"\".join(vowels_rm)", "    // write your code here\n    $vowels\
    \ = \"aeiou\";\n    $len = strlen($word);\n    $vowel_count = array_count_values(str_split($word));\n\
    \    foreach ($vowels as $letter) {\n        if ($vowel_count[$letter] == 1) {\n\
    \            return $letter;\n        }\n    }\n    \n    $last_vowel = $word[($len-1)];\n\
    \    $first_vowel = $word[0];\n    foreach ($vowels as $letter) {\n        if\
    \ ($vowel_count[$letter] >= 2) {\n            return $letter;\n        }\n   \
    \ }\n}\n</code>\n<|/ a tags=string,php,arrays,for-loop,function |>\n<| c |>\n\
    I like the way you solved the problem, thanks for that. Unfortunately, this solution\
    \ didn't work for the last vowel in the string: get_closest_vowel(\"ab\"); should\
    \ return \"\" but instead it returns \"a\".\n<|/ c |>\n<| c |>\nYou are right.\
    \ Look at my updated code. There was a small problem in `get_closest_vowel` function.\
    \ It returns `u` instead of `U`.\n<|/ c |>\n<| c |>\nThanks, I tried your code\
    \ and noticed it gives wrong result for the last vowel, for example, it returns\
    \ \"m\" instead of \"\"\n<|/ c |>\n<| a tags=string,php,arrays,for-loop,function\
    \ |>\n<code>\n<?php\n$str = 'hello';\n$vowel = 'o';\n", "    if(strlen($word)\
    \ < 3) return \"\";\n\n    $vowels = array('a','e','i','o','u');\n    $vowel_counts\
    \ = array();\n\n    $vowels_count = count($vowels);\n    for($i = 0; $i < $vowels_count;\
    \ $i++) {\n        $pos = strrpos($word,$vowels[$i]);\n        if($pos !== false)\
    \ $vowel_counts[$i] = $pos;\n    }\n\n    $min_pos = array_search(min($vowel_counts),\
    \ $vowel_counts);\n\n    return $word[$min_pos];\n}\n</code>\n<|/ a tags=php,arrays,string\
    \ dscore=1 |>\n<| a |>\n<code>\n<?php\n$str = 'abcdefghijklmnopqrstuvwxyz';\n\
    $substr = 'q';\n$pos = 0;\n$found = 0;\n$vowels = array('a','e','i','o','u','y');\n\
    \n$length = strlen($substr);\nfor ($i = 0; $i < $length; $i++) {\n    $pos = strpos($str,\
    \ $substr, $pos);\n    if($pos !== false) {\n        if (in_array($substr[$i],\
    \ $vowels)) {\n            $found++;\n        }\n        $pos++;\n    }\n}\n\n\
    if ($found == 0) {\n    $pos = strrpos($str, $substr, $pos);\n    if ($pos !==\
    \ false) {\n        if (in_array($substr[$i], $vowels)) {\n            $found++;\n\
    \        }\n    }\n}\n\nif ($found == 0) {\n    $pos = strrpos($str, $substr);\n\
    \    if ($pos !== false) {\n        if (in_array($substr[$i], $vowels)) {\n  \
    \          $found++;\n        }\n    }\n}\n\necho \"\\n\" . $substr . \" found\
    \ \" . $found . \" times\";\n</code>\nOutput:\nq found 3 times\n<|/ a dscore=1\
    \ tags=php,arrays,string |>\n<| a |>\n<code>\n$str = 'abcdefghijklmnopqrstuvwxyz';\n\
    $substr = 'q';\n$pos = 0;\n$found = 0;\n$vowels = array('a','e','i','o','u','y');\n\
    \n$length = strlen($substr);\nfor ($i = 0; $i < $length; $i++) {\n    $pos = strpos($str,\
    \ $substr, $pos);\n    if($pos !== false) {\n        if (in_array($substr[$i],\
    \ $vowels)) {\n            $found++;\n        }\n        $pos++;\n    }\n}\n\n\
    if ($found == 0) {\n    $pos = strrpos($str, $substr, $pos", "    $vowels_array\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    $vowels_string = '';\n    foreach ($vowels_array\
    \ as $v){\n        $vowels_string .= $word[$v-1];\n    }\n    return $vowels_string;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nNice! But I would prefer to use string functions\
    \ instead `strrev` :)\n<|/ c |>\n<| c |>\nYeah I agree with you :) I just wanted\
    \ to point out that OP has already done the job with foreach.\n<|/ c |>\n<| a\
    \ tags=php,string |>\nHere is what I've got so far:\n<code>", "    $vowels = \"\
    aeiouAEIOU\";\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    \n    $result\
    \ = '';\n    $length = strlen($word);\n    \n    // Check left side of the word\n\
    \    for ($i=0; $i<$length; $i++) {\n        $result .= $word[$i];\n        if\
    \ ($result[0] === $consonants) {\n            $result = $result[0];\n        \
    \    break;\n        }\n    }\n    \n    // Check right side of the word\n   \
    \ for ($i=$length; $i>0; $i--) {\n        $result .= $word[$i];\n        if ($result[$i]\
    \ === $consonants) {\n            $result = $result[$i];\n            break;\n\
    \        }\n    }\n    \n    // If no vowel met above, return empty string\n \
    \   if ($result === \"\") {\n        return \"\";\n    }\n    \n    // Return\
    \ vowel\n    return $vowels[strpos($vowels, $result)]; \n}", "    $vowels = \"\
    aeiouAEIOU\";\n    $consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    $vowel_left = false;\n    $vowel_right = false;\n    $vowel_left_pos =\
    \ false;\n    $vowel_right_pos = false;\n    $consonant_left = false;\n    $consonant_right\
    \ = false;\n    $consonant_left_pos = false;\n    $consonant_right_pos = false;\n\
    \    $vowel_count = 0;\n    $consonant_count = 0;\n    $result = \"\";\n    \n\
    \    for($i = 0; $i < strlen($word); $i++) {\n        if($word[$i] == $vowels[$vowel_count]\
    \ && $word[$i] != $word[$vowel_left_pos] && $word[$i] != $word[$vowel_right_pos])\
    \ {\n            $vowel_left = true;\n            $vowel_right_pos = $i;\n   \
    \     } elseif($word[$i] == $consonants[$consonant_count] && $word[$i] != $word[$consonant_left_pos]\
    \ && $word[$i] != $word[$consonant_right_pos]) {\n            $consonant_left\
    \ = true;\n            $consonant_right_pos = $i;\n        }\n        if($vowel_left\
    \ && $consonant_left) {\n            $vowel_count++;\n            $consonant_count\
    \ = 0;\n            $vowel_left_pos = false;\n            $consonant_left_pos\
    \ = false;\n            $vowel_right = false;\n            $vowel_right_pos =\
    \ false;\n            $consonant_right = false;\n            $consonant_right_pos\
    \ = false;\n        } elseif($vowel_left && $vowel_right) {\n            $vowel_left_pos\
    \ = $i;\n            $vowel_count++;\n            $vowel_left = false;\n     \
    \       $vowel_right_pos = false;\n        } elseif($consonant_left && $consonant_right)\
    \ {\n            $consonant_left_pos = $i;\n            $consonant_count++;\n\
    \            $consonant_left = false;\n            $consonant_right_pos = false;\n\
    \        } elseif($vowel_right) {\n            $vowel_right = true;\n        \
    \    $vowel_right_pos = $i;\n        } elseif($consonant_right) {\n          \
    \  $consonant_right = true;\n            $consonant_right_pos = $i;\n        }\n\
    \    }\n\n    if($vowel_count > $consonant_count) {\n        if($vowel_left_pos\
    \ != false && $vowel_right_pos != false) {\n            $result = $word[$vowel_left_pos];\n\
    \        } elseif($consonant_left_pos != false && $consonant_right_po", "    //\
    \ Write your code here\n    $result = [];\n    foreach ($word as $letter) {\n\
    \        $result[] = strtolower($letter);\n    }\n    foreach ($result as $item)\
    \ {\n        foreach (str_split('aeiouyAEIOUY') as $i => $letter) {\n        \
    \    if ($item[$i] == 'a') {\n                $result[$i] = '';\n            \
    \    break;\n            }\n        }\n    }\n    if (count($result) == 0) {\n\
    \        return '';\n    }\n    $vowels = array_count_values($result);\n    return\
    \ key($vowels);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis answer would benefit\
    \ from some explanation and not just code.\n<|/ c |>\n<| c |>\n, What is the purpose\
    \ of `foreach ($word as $letter) { $result[] = strtolower($letter); }` here?\n\
    <|/ c |>\n<| c |>\n, `strtolower($letter)` converts the letter to lower case as\
    \ OP wants only the vowels from the right side of the word.\n<|/ c |>\n<| c |>\n\
    Okay, I see. But I still don't understand what the purpose of the outer loop is.\n\
    <|/ c |>\n<| a |>\n<code>", "    $vowels = \"aeiouAEIOU\";\n    $wordLength =\
    \ strlen($word);\n    $endIndex = $wordLength - 1;\n    $startIndex = 0;\n   \
    \ $startPoints = explode(\"a\", $word);\n    $endPoints = explode(\"e\", $word);\n\
    \    $startPointsLength = count($startPoints);\n    $endPointsLength = count($endPoints);\n\
    \    $vowelFound = false;\n    $vowelFoundCounter = 0;\n    while ($endIndex >\
    \ -1 && $startIndex < $wordLength) {\n        if (in_array($endPoints[$endIndex],\
    \ $vowels) && in_array($startPoints[$startIndex], $vowels)) {\n            $vowelFound\
    \ = true;\n            $vowelFoundCounter++;\n        }\n        if ($vowelFound)\
    \ {\n            $endIndex--;\n            $startIndex++;\n        }\n    }\n\
    \    if ($vowelFound) {\n        if ($vowelFoundCounter > $wordLength / 2) {\n\
    \            return \"\";\n        } else {\n            return $endPoints[$endIndex];\n\
    \        }\n    } else {\n        return \"\";\n    }\n}\n</code>\n<|/ a |>\n\
    <| c |>\nHi Jack, I had to make a few changes to get it to work but after that\
    \ it works great. Thanks for the help!\n<|/ c |>\n<| a dscore=0 tags=php,string,regex\
    \ |>\nTry this:\n<code>", "    $vowels = array(\"A\", \"a\", \"E\", \"e\", \"\
    I\", \"i\", \"O\", \"o\", \"U\", \"u\");\n    \n    $word = str_replace($vowels,\
    \ \"\", $word);\n    \n    $length = strlen($word);\n    \n    $last_consonant\
    \ = $consonants = \"\";\n    $vowel_found = false;\n    \n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $c = $word[$i];\n        \n        // check for\
    \ last consonant\n        if ($last_consonant == $consonants) {\n            $vowel_found\
    \ = true;\n            break;\n        }\n        // check for vowel found\n \
    \       if (in_array($c, $vowels)) {\n            $vowel_found = true;\n     \
    \       break;\n        }\n        // store last consonant\n        $last_consonant\
    \ = $consonants;\n        $consonants .= $c;\n    }\n    \n    if ($vowel_found)\
    \ {\n        return $c;\n    }\n    return \"\";\n}\n</code>\n<|/ a tags=string,php,regex,str-replace,preg-replace\
    \ |>\n<| c |>\nThe above solution works for this particular case, but fails when\
    \ there are multiple consonants in the string. For example, if the given string\
    \ was \"abracadabra\", the output should have been \"r\" as it stands between\
    \ the first and second consonants, but the above solution would return \"a\".\
    \ Also, it is recommended not to post code-only answers, try to explain what was\
    \ wrong in OPs code and how the solution fixes it.\n<|/ c |>\n<| c |>\n, thanks\
    \ for pointing that out. I've updated the answer and also pointed out OP's mistake\
    \ in the code :)\n<|/ c |>\n<| c |>\nThanks for sharing your solution! I made\
    \ a slight modification to my question to reflect my expected output. Could you\
    \ please let me know how your solution would change in that case?\n<|/ c |>\n\
    <| c |>\n, I've updated the answer. Hope it helps :)\n<|/ c |>\n<| a dscore=1\
    \ |>\nThis might do the trick:\n<code>\n<?php", "  $vowel = array(\"u\", \"E\"\
    , \"I\", \"O\", \"U\");\n  $found = false;\n  $word = strtolower($word);\n  for($i\
    \ = 0; $i < strlen($word); $i++) {\n    if(in_array($word[$i], $vowel)) {\n  \
    \    $found = true;\n      break;\n    }\n  }\n  if($found == true) {\n    return\
    \ $word[$i];\n  } else {\n    return \"\";\n  }\n}\n", "    if (strlen($word)\
    \ <= 3) {\n        return \"\";\n    }\n    $vowel_candidates = array();\n   \
    \ $last_consonant_index = $word[strlen($word) - 1];\n    $last_vowel_index = $word[strlen($word)\
    \ - 2];\n    for ($i = 0; $i < strlen($word) - 3; $i++) {\n        if ($word[$i]\
    \ == $last_consonant_index) {\n            $last_consonant_index = $word[$i +\
    \ 1];\n            $last_vowel_index = $word[$i + 2];\n        }\n    }\n\n  \
    \  $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    for ($i = 0; $i <\
    \ count($vowels); $i++) {\n        if ($word[$i + 3] == $vowels[$i]) {\n     \
    \       if ($word[$i + 1] == $last_consonant_index) {\n                $vowel_candidates[]\
    \ = $vowels[$i];\n            }\n        }\n    }\n\n    // sort candidates\n\
    \    sort($vowel_candidates);\n\n    // if the array is not empty, pick the first\
    \ one as the closest vowel\n    return $vowel_candidates[0];\n}\n", "    $vowels\
    \ = \"aeiou\";\n    $n = strlen($word);\n    $i = 0;\n    $vowel_found = false;\n\
    \    $vowel = substr($word, 0, 1);\n    $word1 = substr($word, 1, 1);\n    $word2\
    \ = substr($word, 2, 1);\n    do {\n        if (in_array($word[$i], $vowels))\
    \ {\n            $vowel_found = true;\n            break;\n        }\n       \
    \ $i++;\n    } while ($i < $n);\n    if ($vowel_found) {\n        return $word[$i];\n\
    \    }\n    $vowel_found = false;\n    do {\n        if (in_array($word[$n - 1],\
    \ $vowels)) {\n            $vowel_found = true;\n            break;\n        }\n\
    \        $n--;\n    } while ($n > 0);\n    if ($vowel_found) {\n        return\
    \ $word[$n - 1];\n    }\n    $vowel_found = false;\n    do {\n        if (in_array($word[$n\
    \ - 2], $vowels)) {\n            $vowel_found = true;\n            break;\n  \
    \      }\n        $n--;\n    } while ($n > 0);\n    if ($vowel_found) {\n    \
    \    return $word[$n - 2];\n    }\n    return \"\";\n}", "  $vowels = \"aeiou\"\
    ;\n  $start = 0;\n  $end = 0;\n  foreach ($word[$start] as $char) {\n    if ($char\
    \ == 'a' || $char == 'e' || $char == 'i' || $char == 'o' || $char == 'u') {\n\
    \      $end = $start;\n      break;\n    }\n    $start++;\n  }\n  if ($end ==\
    \ count($word)) {\n    return \"\";\n  }\n  $vowel_found = false;\n  for ($i =\
    \ $end; $i >= $start; $i--) {\n    if ($word[$i] == $vowels) {\n      $vowel_found\
    \ = true;\n      break;\n    }\n  }\n  if ($vowel_found) {\n    return $word[$end];\n\
    \  } else {\n    return \"\";\n  }\n}\n</code>\n<|/ a |>\n<| c |>\nThis code works\
    \ perfectly... Thanks\n<|/ c |>\n<| a dscore=1 |>\nYou can use some regex to do\
    \ this, here is a quick example\n<code>\n<?php\n\n$string = 'yogurt';\n\npreg_match_all('/(?<vowel>[aeiou])/i',$string,$matches);\n\
    \n$vowel = $matches['vowel'][0];\n\necho $vowel;\n", "   $vowels = array('a','e','i','o','u','A','E','I','O','U');\n\
    \   $result = '';\n   $vowels_count = count($vowels);\n   $word_length = strlen($word);\n\
    \   \n   for ($i = $word_length-1; $i>=0; $i--) {\n      if ( in_array($word[$i],\
    \ $vowels) ) {\n         $result = $word[$i];\n         break;\n      }\n    \
    \  if ( $i == 0 ) {\n         $result = $word[$i];\n         break;\n      }\n\
    \   }\n   \n   return $result;\n}\n", "    \n    $vowels = \"aieouaeiou\";\n \
    \   $result = \"\";\n    $letters = str_split($word);\n    $i = count($letters)\
    \ - 1; \n    \n    foreach ($letters as $letter) {\n        $nextLetter = $letters[$i];\n\
    \        if ($letter === $nextLetter) $i --;\n        \n        if (preg_match(\"\
    /$vowels$/i\", $letter)) {\n            $result = $letter;\n            break;\n\
    \        }\n    }\n    return $result;\n}\n", "    if(preg_match('/^[a-z]+$/',\
    \ $word)) {\n        $vowels = [\n            'a',\n            'ai',\n      \
    \      'aii',\n            'e',\n            'i',\n            'ii',\n       \
    \     'o',\n            'ou',\n            'oo',\n            'oui',\n       \
    \     'u',\n            'um',\n            'uum',\n            'y' ];\n      \
    \  $vowels_length = count($vowels);\n        $vowels_index = 0;\n        $vowels_counter\
    \ = 0;\n        $vowels_end = 0;\n        $vowels_index2 = 0;\n        $vowels_counter2\
    \ = 0;\n        $vowels_end2 = 0;\n        $vowels_counter3 = 0;\n        $vowels_end3\
    \ = 0;\n\n        foreach($word as $value) {\n            if($value == $vowels[$vowels_index])\
    \ {\n                $vowels_counter++;\n            } else {\n              \
    \  $vowels_counter2 = 0;\n                if($vowels_counter >= $vowels_length\
    \ || $vowels_counter2 >= $vowels_length || $vowels_counter3 >= $vowels_length)\
    \ {\n                    $vowels_end = $vowels_index;\n                }\n   \
    \             $vowels_counter3 = 0;\n                if($vowels_counter2 >= $vowels_length\
    \ || $vowels_counter3 >= $vowels_length) {\n                    $vowels_end2 =\
    \ $vowels_index2;\n                }\n                $vowels_counter3 = 0;\n\
    \                if($vowels_counter3 >= $vowels_length) {\n                  \
    \  $vowels_end3 = $vowels_index3;\n                }\n                $vowels_counter\
    \ = 0;\n                $vowels_index++;\n            }\n            if($value\
    \ == $vowels[$vowels_index2]) {\n                $vowels_counter2++;\n       \
    \     } else {\n                $vowels_counter3 = 0;\n                if($vowels_counter2\
    \ >= $vowels_length || $vowels_counter3 >= $vowels_length) {\n               \
    \     $vowels_end2 = $vowels_index2;\n                }\n                $vowels_counter2\
    \ = 0;\n                if($vowels_counter2 >= $vowels_length || $vowels_counter3\
    \ >= $vowels_length) {\n                    $vowels_end3 = $vowels_index3;\n \
    \               }\n                $vowels_counter2 = 0;\n                $vowels_index2++;\n\
    \            }\n            if($value == $vowels[$vowels_index3]) {\n        \
    \        $vowels_counter3++;\n            } else {\n                $vowels_counter2\
    \ = 0;\n                $vowels_index3++;\n            }\n        }\n        if($vowels_end\
    \ != 0) {\n            return $vowels[$vowels_end - 1];\n        } else if($vowels_end2\
    \ != 0) {\n            return $vowels[$vowels_end2 - 1];\n        } else if($vowels_end3\
    \ != 0) {\n            return $", "    $vowels_begin = array('a', 'e', 'i', 'o',\
    \ 'u');\n    $vowels_end = array('a', 'e', 'i', 'o', 'u');\n    foreach (str_split($word)\
    \ as $char) {\n        if (false !== $indexBegin = array_search($char, $vowels_begin,\
    \ false)) {\n            if (false !== $indexEnd = array_search($char, $vowels_end,\
    \ false)) {\n                return $vowels_begin[$indexBegin] . substr($vowels_end[$indexEnd],\
    \ 1);\n            }\n        }\n    }\n    return \"\";\n}\n", "    $vowels =\
    \ array('a','e','i','o','u','A','E','I','O','U');\n    $last_c = count($word)\
    \ - 1;\n    $last_v = end($vowels);\n    $last_r = substr($word,$last_c,1);\n\
    \    foreach ($vowels as $key => $vowel) {\n        if ($last_r == $vowel) {\n\
    \            $vowel_start = $key;\n        }\n    }\n    $next_c = count($word)\
    \ + 1;\n    $next_v = $vowels[$vowel_start];\n    $next_r = substr($word,$next_c,1);\n\
    \    foreach ($vowels as $key => $vowel) {\n        if ($next_r == $vowel) {\n\
    \            $vowel_end = $key;\n        }\n    }\n    if ($vowel_start > $vowel_end)\
    \ {\n        return \"\";\n    }\n    $vowel_length = $vowel_end - $vowel_start;\n\
    \    if ($vowel_length == 0) {\n        return \"\";\n    }\n    if ($vowel_start\
    \ == 0) {\n        return $vowels[$vowel_end];\n    }\n    if ($vowel_end == count($vowels))\
    \ {\n        return $vowels[$vowel_start];\n    }\n    $vowel_diff = abs($next_v\
    \ - $last_v);\n    if ($vowel_diff > 1) {\n        if ($next_v < $last_v) {\n\
    \            return $vowels[$vowel_start];\n        }\n        return $vowels[$vowel_end];\n\
    \    }\n    if ($next_v > $last_v) {\n        return $vowels[$vowel_end];\n  \
    \  }\n    return $vowels[$vowel_start];\n}\n", "    $vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n\n    $arr = str_split($word);\n    $count = count($arr);\n    $index\
    \ = 0;\n    $found = false;\n    do {\n        $index = count($arr) - 1;\n   \
    \     $last = array_pop($arr);\n        foreach ($vowels as $vow) {\n        \
    \    if ($vow == $last) {\n                $found = true;\n                break;\n\
    \            }\n        }\n        $index--;\n    } while ($found && $index <\
    \ $count);\n    \n    return !$found ? \"\" : $arr[$index];\n}\n", "\t$vowels_arr\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"\
    );\n\t$vowels_arr1 = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"y\", \"z\");\n\t$wordLen = strlen($word);\n\tfor ($i = $wordLen - 1; $i\
    \ >= 0; $i--) {\n\t\t$wordChar = substr($word, $i, 1);\n\t\t$vowels_arr1 = array_flip($vowels_arr1);\n\
    \t\tif (isset($vowels_arr1[strtolower($wordChar)])) {\n\t\t\treturn strtolower($vowels_arr1[strtolower($wordChar)]);\n\
    \t\t}\n\t}\n\treturn '';\n}\n", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n\n\
    \    $vowels_position = [\n        ['a', 'k', 'm', 'n', 'o', 'p'], // 0\n    \
    \    ['b', 'l', 'n', 'p', 'q', 's'], // 1\n        ['c', 'n', 'p', 'q', 'r', 's'],\
    \ // 2\n        ['d', 'm', 'n', 'r', 's', 't'], // 3\n        ['e', 'n', 'r',\
    \ 's', 't', 'u'], // 4\n        ['f', 'm', 'n', 's', 't', 'u'], // 5\n       \
    \ ['g', 'm', 'n', 't', 'u', 'v'], // 6\n        ['h', 'n', 'p', 'q', 'u', 'v'],\
    \ // 7\n        ['i', 'n', 'p', 'q', 'r', 'u', 'v'], // 8\n        ['j', 'n',\
    \ 'p', 'r', 's', 'u', 'v'], // 9\n        ['k', 'n', 'p', 's', 't', 'u', 'v'],\
    \ // 10\n        ['l', 'n', 'p', 's', 'u', 'v'], // 11\n        ['m', 'n', 'p',\
    \ 't', 'u', 'v'], // 12\n        ['n', 'n', 'p', 'u', 'v'], // 13\n        ['o',\
    \ 'n', 'p', 'u', 'v'], // 14\n        ['p', 'n', 'p', 'u', 'v'], // 15\n     \
    \   ['q', 'n', 'p', 'r', 'u', 'v'], // 16\n        ['r', 'n', 'p', 's', 'u', 'v'],\
    \ // 17\n        ['s', 'n', 'p', 't', 'u', 'v'], // 18\n        ['t', 'n', 'p',\
    \ 'u', 'v'], // 19\n        ['u', 'n', 'p', 'u', 'v'], // 20\n        ['v', 'n',\
    \ 'p', 'u', 'v'], // 21\n    ];\n\n    $vowels_position_1 = [\n        ['a', 'k',\
    \ 'm', 'n', 'o', 'p'], // 0\n        ['b', 'l', 'n', 'p', 'q', 's'], // 1\n  \
    \      ['c', 'n', 'p', 'q', 'r', 's'], // 2\n        ['d', 'm', 'n', 'r', 's',\
    \ 't'], // 3\n        ['e', 'n', 'r', 's', 't', 'u'], // 4\n        ['f', 'm',\
    \ 'n', 's', 't', 'u'], // 5\n        ['g', 'm', 'n', 't', 'u', 'v'], // 6\n  \
    \      ['h', 'n', 'p', 'q', 'u', 'v'], // 7\n        ['i', 'n', 'p', 'q', 'r',\
    \ 'u', 'v'], // 8\n        ['j', 'n', 'p', 'r', 's', 'u', 'v'], // 9\n       \
    \ ['k', 'n', 'p', 's', 't', 'u', 'v'], // 10\n        ['l', 'n', 'p', 's', 'u',\
    \ 'v'], // 11\n        ['m', 'n', 'p', 't', 'u', 'v'], // 12\n        ['n', 'n',\
    \ 'p', 'u', 'v'], // 13\n        ['o', 'n', 'p', 'u', 'v'], // 14\n        ['p',\
    \ 'n', 'p', 'u', 'v'], // 15\n        ['q', 'n', 'p', 'r', 'u', 'v'], // 16\n\
    \        ['r', 'n', 'p', 's', 'u', 'v'], // 17\n        ['s', 'n', '", "    $vowels\
    \ = [\n        \"A\",\"a\",\"i\",\"o\",\"u\",\n        \"E\",\"e\",\"i\",\"o\"\
    ,\"u\",\n        \"I\",\"i\",\"o\",\"o\",\"u\",\n        \"O\",\"o\",\"o\",\"\
    o\",\"o\"\n    ];\n\n    $vowelsCount = array_count_values($vowels);\n\n    foreach($vowels\
    \ as $v){\n        if($v <= $word[$word->length-1]) {\n            $vowelsCount[$v]--;\n\
    \        }\n    }\n\n    $closest = [];\n    foreach($vowels as $v){\n       \
    \ if(!isset($closest[$v])) $closest[$v] = $v;\n        if($v <= $word[$word->length-1])\
    \ {\n            $closest[$v] = $v;\n        }\n    }\n\n    $len = count($closest);\n\
    \    if($len === 0) return \"\";\n    if($len === 1) return $closest[0];\n\n \
    \   $shortest = 0;\n    $shortest = abs($closest[array_keys($closest,$vowels[0])[1]]);\n\
    \n    foreach($vowels as $v){\n        if($closest[$v] < $shortest) {\n      \
    \      $shortest = $closest[$v];\n        }\n    }\n    return $closest[$shortest];\n\
    }", "    $vowels = \"aeiou\";\n    $vowel_length = strlen($vowels);\n    $vowel_positions\
    \ = str_split($vowels, 2);\n    $pos = strlen($word);\n    $closest_vowels = \"\
    \";\n    \n    $i = $word_pos = 0;\n    \n    for ($i; $i <= $pos; $i++) {\n \
    \       if (strncmp(substr($word, $i, 1), $vowels, 1) == 0) {\n            $word_pos\
    \ = $i;\n        }\n    }\n    \n    for ($i = $word_pos; $i < $pos; $i++) {\n\
    \        if (strncmp(substr($word, $i, 1), $vowels, 1) == 0) {\n            $closest_vowels\
    \ = substr($word, $word_pos, 1);\n            break;\n        }\n    }\n    \n\
    \    return $closest_vowels;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is\
    \ an excellent solution. However, it fails when the word is too long to fit in\
    \ memory. At least on my local machine it does not. On a larger dataset it fails\
    \ in php7.2\n<|/ c |>\n<| c |>\nI tested it on a 100k word dataset. I don't know\
    \ why it fails but I believe it has to do with the fact that substr and strncmp\
    \ are both relatively slow.\n<|/ c |>\n<| a tags=php |>\nAnother solution\n<code>",
  "    $vowels = ['a', 'e', 'i', 'o', 'u', 'Y', 'Y', 'G', 'R', 'I', 'K', 'S', 'T',\
    \ 'M', 'D', 'F', 'B', 'L', 'V', 'J', 'R', 'S', 'N', 'Q', 'K', 'U', 'W', 'O', 'X',\
    \ 'P', 'Z', 'J', 'W', 'H', 'Y', 'U', 'G', 'Z', 'W', 'O', 'W', 'S', 'V', 'I', 'L',\
    \ 'T', 'R', 'I', 'A', 'O', 'E', 'I', 'E', 'R', 'W', 'M', 'R', 'L', 'W', 'Z', 'S',\
    \ 'Q', 'W', 'I', 'P', 'E', 'Y', 'U', 'R', 'U', 'G', 'Z', 'U', 'I', 'L', 'H', 'S',\
    \ 'I', 'G', 'H', 'O', 'D', 'R', 'R', 'Z', 'Y', 'P', 'O', 'A', 'U', 'H', 'K', 'Z',\
    \ 'W', 'O', 'M', 'A', 'R', 'D', 'I', 'L', 'O', 'M', 'A', 'M', 'L', 'S', 'S', 'T',\
    \ 'U', 'T', 'M', 'I', 'U', 'Y', 'A', 'R', 'Y', 'M', 'R', 'F', 'I', 'S', 'K', 'Y',\
    \ 'K', 'Y', 'R', 'M', 'R', 'S', 'S', 'D', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\
    \ 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\
    \ 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\
    \ 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\
    \ 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\
    \ 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\
    \ 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\
    \ 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\
    \ 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\
    \ 'R', 'R', 'R', 'R', 'R', 'R', 'R", "    $vowels_array = array('a', 'e', 'i',\
    \ 'o', 'u');\n    $vowel_index = array_search(strrev($word[0]), $vowels_array);\n\
    \    $vowel_length = strlen($word[0]);\n    if ($vowel_index > 0) {\n        if\
    \ ($vowel_index < $vowel_length) {\n            $vowel_index = $vowel_index +\
    \ 1;\n        } else {\n            $vowel_index = $vowel_index - 1;\n       \
    \ }\n    }\n    if ($vowel_index < 0) {\n        return \"\";\n    }\n    $consonant_index\
    \ = array_search(strrev($word[$vowel_index]), $vowels_array);\n    $consonant_length\
    \ = strlen($word[$vowel_index]);\n    if ($consonant_index > 0) {\n        if\
    \ ($consonant_index < $consonant_length) {\n            $consonant_index = $consonant_index\
    \ + 1;\n        } else {\n            $consonant_index = $consonant_index - 1;\n\
    \        }\n    }\n    if ($consonant_index < 0) {\n        return \"\";\n   \
    \ }\n    if ($word[$vowel_index] === $word[$consonant_index]) {\n        return\
    \ $word[$vowel_index];\n    } else {\n        $consonant_index = $consonant_index\
    \ + 1;\n        if ($word[$vowel_index] === $word[$consonant_index]) {\n     \
    \       return $word[$vowel_index];\n        } else {\n            return \"\"\
    ;\n        }\n    }\n}\n$answer = \"yogurt\";\necho get_closest_vowel($answer);\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\nI wrote a solution using a combination of\
    \ array_search and array_filter. I hope this helps you.\n<code>", "    $vowels\
    \ = \"aeiouAEIOU\";\n    $count = strlen($word);\n    $count = 0;\n    for($i=0;$i<$count;$i++)\
    \ {\n        $str = $word[$i];\n        if (strpos($vowels, $str) !== false) {\n\
    \            $count = $i;\n            break;\n        }\n    }\n    return $word[$count];\n\
    }\n", "    for($i=strlen($word); $i > 0; $i--) {\n        $letter = substr($word,\
    \ $i, 1);\n        if(!is_vowel($letter)) {\n            return \"\";\n      \
    \  }\n    }\n    return substr($word, 0, 1);\n}\n", "    $word = strtolower($word);\n\
    \    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    foreach ($vowels as $letter) {\n\
    \        if (strpos($word, $letter) === false) {\n            continue;\n    \
    \    }\n        $vowel = substr($letter, 0, 1);\n        if ($vowel === $word[strlen($word)\
    \ - 1]) {\n            return $vowel;\n        }\n    }\n    return \"\";\n}\n",
  "    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"\
    O\", \"U\");\n    $result = \"\";\n    \n    $word = strtolower($word);\n    $length\
    \ = strlen($word);\n    \n    for ($i = $length - 1; $i >= 0; $i--) {\n      \
    \  if ($word[$i] === \"a\" || $word[$i] === \"e\" || $word[$i] === \"i\" || $word[$i]\
    \ === \"o\" || $word[$i] === \"u\" || $word[$i] === \"A\" || $word[$i] === \"\
    E\" || $word[$i] === \"I\" || $word[$i] === \"O\" || $word[$i] === \"U\") {\n\
    \            $result .= $word[$i];\n        }\n    }\n    \n    return $result;\n\
    }\n\n$tests = array(\n    \"yogurt\",\n    \"FULL\",\n    \"quick\",\n    \"ab\"\
    ,\n    \"abc\",\n    \"aBc\"\n);\n\nforeach ($tests as $test) {\n    echo \"Test\
    \ \\\"$test\\\"\\n\";\n    \n    echo get_closest_vowel($test) . \"\\n\";\n}\n\
    </code>\nOutputs:\n<code>\nTest \"yogurt\"\ny\nTest \"FULL\"\nU\nTest \"quick\"\
    \n\n\nTest \"ab\"\n\n\nTest \"abc\"\na\nTest \"aBc\"\na\n</code>\n<|/ a tags=algorithm,php\
    \ dscore=2 |>\n<| c |>\nThanks, that works perfectly and also answers some other\
    \ questions I had about this algorithm.\n<|/ c |>\n<| c |>\nYeah I just noticed\
    \ that and deleted the comment. Thanks again.\n<|/ c |>\n<| a tags=algorithm,php\
    \ |>\nYou can iterate through the characters and look for vowels based on your\
    \ criteria. For example:\n<code>\n$a = \"hello\";\n$b = \"quick\";\n", "    if\
    \ (strlen($word) < 2) return \"\";\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    $left = $right = 0;\n    for ($i = strlen($word) - 1; $i >= 0; $i--) {\n\
    \        if (in_array($word[$i], $vowels)) $left += 1;\n        else $right +=\
    \ 1;\n    }\n    sort($vowels);\n    sort($word);\n    \n    if ($left == $right)\
    \ {\n        return $vowels[$left - 1];\n    }\n    \n    // left\n    if ($left\
    \ == 0) {\n        $vowel = array_pop($vowels);\n        return $vowel;\n    }\n\
    \    \n    // right\n    if ($right == 0) {\n        $vowel = array_shift($vowels);\n\
    \        return $vowel;\n    }\n    \n    if ($left == $right) {\n        $vowel\
    \ = array_pop($vowels);\n        return $vowel;\n    }\n    \n    $vowel = array_shift($vowels);\n\
    \    return $vowel;\n}\n\n$str = 'yogurt';\n$str2 = get_closest_vowel($str);\n\
    echo '$str2 is: ' . $str2 . PHP_EOL;\necho PHP_EOL;\n\n$str = 'FULL';\n$str2 =\
    \ get_closest_vowel($str);\necho '$str2 is: ' . $str2 . PHP_EOL;\necho PHP_EOL;\n\
    \n$str = 'quick';\n$str2 = get_closest_vowel($str);\necho '$str2 is: ' . $str2\
    \ . PHP_EOL;\necho PHP_EOL;\n\n$str = 'ab';\n$str2 = get_closest_vowel($str);\n\
    echo '$str2 is: ' . $str2 . PHP_EOL;\necho PHP_EOL;\n</code>\nResult:\n<code>\n\
    $str2 is: u\ny\nFULL\nU\nquick\n\n$str2 is: U\nu\nU\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nThe complexity of this algorithm is O(N^2). O(N) would require a sorted\
    \ array and O(N^2) is too high. Also, you only return the closest vowel, which\
    \ is not what OP wants. Also, you assume the input contains only ASCII letters,\
    \ which is not true.\n<|/ c |>\n<| a dscore=3 tags=php,algorithm |>\nI have another\
    \ solution which involves no array sorting. It works by going through each character\
    \ of the word from right to left and comparing it to the previous character. If\
    \ it isn't a vowel, it means ", "\t$vowels = array(\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\", \"A\", \"E\", \"I\", \"O\", \"U\", \"Y\");\n\t$vowels_count =\
    \ count($vowels);\n\t$first_consonants = strripos($word, 'b');\n\tif ($first_consonants\
    \ !== FALSE) {\n\t\t$last_consonants = strrpos($word, 'B');\n\t} else {\n\t\t\
    $last_consonants = strripos($word, 'b');\n\t}\n\tif ($last_consonants === FALSE)\
    \ {\n\t\treturn '';\n\t}\n\t\n\t$first_vowels = substr($word, $first_consonants,\
    \ $last_consonants - $first_consonants);\n\t\n\t$first_vowels_count = strlen($first_vowels);\n\
    \t\n\tfor ($i = 0; $i < $vowels_count; $i++) {\n\t\t$last_vowels = substr($word,\
    \ $first_consonants, $first_vowels_count - $i);\n\t\t$last_vowels_count = strlen($last_vowels);\n\
    \t\t\n\t\tif ($first_vowels === $last_vowels) {\n\t\t\treturn $vowels[$i];\n\t\
    \t} else if ($first_vowels_count - $last_vowels_count === 1) {\n\t\t\treturn $vowels[$i];\n\
    \t\t} else if ($last_vowels_count - $first_vowels_count === 1) {\n\t\t\treturn\
    \ $vowels[$i];\n\t\t}\n\t}\n\t\n\treturn '';\n}\n", "    // Your code here\n \
    \   // return word;\n    $vowels = ['a','e','i','o','u','y','A','E','I','O','U','Y'];\n\
    \    $vowels_l = array_flip($vowels);\n    \n    \n    foreach ($vowels as $v)\
    \ {\n        if (strpos($word, $v) !== false && strrpos($word, $v) !== false &&\
    \ strpos($word, $v) !== false && strrpos($word, $v) !== false) {\n           \
    \ return $v;\n        }\n    }\n    \n    return '';\n}\n", "    $vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    $vowel_count = count($vowels);\n    \n    $vowel_position\
    \ = get_index_of_vowel($word);\n    \n    if ($vowel_position == false) return\
    \ \"\";\n    \n    $vowel_index = $vowel_position - 1;\n    \n    if ($vowel_index\
    \ >= $vowel_count || $vowel_index < 0) {\n        $vowel_index = 0;\n    }\n \
    \   \n    return $vowels[$vowel_index];\n}\n</code>\n<|/ a tags=algorithm,php\
    \ |>\n<| c |>\nI'm voting this as the correct answer because it's also the fastest\
    \ one, and it also has the advantage of being very simple, understandable, and\
    \ concise.\n<|/ c |>\n<| a dscore=2 |>\nTry this:\n<code>", "    $vowels = array(\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    for($i=$vowels_count\
    \ -1; $i >= 0; $i--) {\n        if(preg_match('/[' . $vowels[$i] . ']/', $word,\
    \ $matches)) {\n            return $vowels[$i];\n        }\n    }\n    return\
    \ \"\";\n}\n</code>\n<|/ a tags=php dscore=1 |>\n<| c |>\nThank you for your answer\
    \ but I was unable to get it work with the question I provided. Your code works\
    \ with your example, but not with the question I gave. I can only see 2 vowels\
    \ getting detected and my code returns an empty string in both cases no matter\
    \ what.\n<|/ c |>\n<| c |>\nThe question was \"You are given a word. Your task\
    \ is to find the closest vowel that stands between two consonants from the right\
    \ side of the word (case sensitive).\" I made a function that gets the vowel from\
    \ the right side of the word you gave and loops backwards if there are 2 or more\
    \ vowels. If you don't want the first vowel in the string to be returned as in\
    \ the original question, then just remove the `if($i > 0)` part of the code.\n\
    <|/ c |>\n<| a |>\n<code>", "    $vowels    = array('a', 'e', 'i', 'o', 'u');\n\
    \    $vowels_len = count($vowels);\n    $length    = strlen($word);\n    $min_pos\
    \   = -1;\n    $closest_v = \"\";\n\n    // loop through all the characters of\
    \ the word\n    for($i = 0; $i < $length; $i++) {\n        // get the current\
    \ character\n        $char = $word[$i];\n\n        // if the character is vowel\n\
    \        if(in_array($char, $vowels)) {\n            // if the next character\
    \ is also vowel\n            if($i < ($length - 1)) {\n                $next_char\
    \ = $word[$i + 1];\n                // if the next character is consonant\n  \
    \              if(in_array($next_char, $vowels)) {\n                    $min_pos\
    \ = $i;\n                    $closest_v = $char;\n                }\n        \
    \    }\n        }\n    }\n\n    return $closest_v;\n}\n</code>\n<|/ a dscore=1\
    \ tags=php,algorithm,string |>\n<| c |>\nIt does seem to work, but I haven't seen\
    \ this approach before.\n<|/ c |>\n<| c |>\nThis doesn't seem to be correct. My\
    \ output for \"ab\" should be an empty string but your code outputs \"b\" instead.\
    \ I've fixed it but I'd like to know how you got it to work.\n<|/ c |>\n<| c |>\n\
    I fixed it myself after a few tests.\n<|/ c |>\n<| a tags=php,algorithm,string\
    \ dscore=1 |>\nIn Python:\n<code>\ndef get_closest_vowel(word):\n    vowels =\
    \ ('a', 'e', 'i', 'o', 'u')\n    length = len(word)\n    closest_v = \"\"\n  \
    \  for i in range(length):\n        if word[i] in vowels:\n            if i+1\
    \ < length:\n                next_char = word[i+1]\n                if next_char\
    \ in vowels:\n                    min_pos = i\n                    closest_v =\
    \ word[i]\n    return closest_v\n</code>\n<|/ a |>\n<| c |>\nWhy do you think\
    \ this doesn't work?\n<|/ c |>\n<| a |>\nPHP:\n<code>", "    $vowels = [\n   \
    \     'a',\n        'e',\n        'i',\n        'o',\n        'u'\n    ];\n\n\
    \    $vowel_pairs = [\n        ['u', 'a'],\n        ['u', 'i'],\n        ['u',\
    \ 'e'],\n        ['u', 'o'],\n        ['u', 'a'],\n        ['i', 'a'],\n     \
    \   ['i', 'i'],\n        ['i', 'e'],\n        ['i', 'o'],\n        ['i', 'a'],\n\
    \        ['e', 'a'],\n        ['e', 'i'],\n        ['e', 'e'],\n        ['e',\
    \ 'o'],\n        ['e', 'a'],\n        ['o', 'a'],\n        ['o', 'i'],\n     \
    \   ['o', 'e'],\n        ['o', 'o'],\n        ['o', 'a']\n    ];\n    \n    $vowel_count\
    \ = array_count_values($vowels);\n    \n    $consonant_pairs = [\n        ['b',\
    \ 'b'],\n        ['c', 'c'],\n        ['d', 'd'],\n        ['f', 'f'],\n     \
    \   ['g', 'g'],\n        ['h', 'h'],\n        ['j', 'j'],\n        ['k', 'k'],\n\
    \        ['l', 'l'],\n        ['m', 'm'],\n        ['n', 'n'],\n        ['p',\
    \ 'p'],\n        ['q', 'q'],\n        ['r', 'r'],\n        ['s', 's'],\n     \
    \   ['t', 't'],\n        ['v', 'v'],\n        ['w', 'w'],\n        ['x', 'x'],\n\
    \        ['y', 'y'],\n        ['z', 'z']\n    ];\n    \n    $consonant_count =\
    \ array_count_values($consonant_pairs);\n    \n    foreach ($vowels as $key =>\
    \ $val) {\n        if ($val == substr($word, -$key)) {\n            return $val;\n\
    \        }\n    }\n    \n    $consonant_counter = 0;\n    \n    foreach ($consonant_pairs\
    \ as $key => $val) {\n        if ($val[0] == substr($word, $key)) {\n        \
    \    $consonant_counter++;\n        }\n    }\n    \n    if ($vowel_counter ==\
    \ $consonant_counter) {\n        return \"\";\n    }\n    \n    return $closest_vowel;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI agree with everyone saying\
    \ this is probably not the most efficient method, but it's definitely very straightforward\
    \ and easy to understand.  So I thought I'd share my solution as well:\n<code>",
  "    $vowels_array = array(\"a\",\"e\",\"i\",\"o\",\"u\");\n    $vowel_str = \"\"\
    ;\n    $consonants = str_split($word);\n    for ($i = strlen($consonants) - 1;\
    \ $i >= 0; $i--) {\n        if (in_array($consonants[$i], $vowels_array)) {\n\
    \            $vowel_str .= $consonants[$i];\n        }\n    }\n    return $vowel_str;\n\
    }", "    // your code here\n    $vowel = \"a\";\n    $vowelCount = 0;\n\n    for\
    \ ($i = strlen($word)-1; $i >= 0; $i--){\n        if ($word[$i] == $vowel){\n\
    \            $vowelCount++;\n        }\n        if ($vowelCount == 2){\n     \
    \       return $vowel;\n        }\n    }\n\n    return \"\";\n}\n</code>\n<|/\
    \ a tags=php dscore=1 |>\n<| c |>\nThis is not working for input string \"AB\"\
    \ it returns \"A\".\n<|/ c |>\n<| c |>\nThis returns \"u\" for `\"yogurt\"` and\
    \ \"U\" for `\"FULL\"`.\n<|/ c |>\n<| c |>\nPlease see my updated answer\n<|/\
    \ c |>\n<| a tags=php |>\n<code>\n<?php\n$str = \"ABBcccdef\";\n\n$vowel = strtoupper(\"\
    A\");\n\n$str2 = substr($str, strlen($str) - strlen($vowel));\n\n$a = preg_replace(\"\
    /\".$vowel.\"/\",\"\", $str2);\n\nif ($str != $a) {\n    echo \"Found\";\n} else\
    \ {\n    echo \"Not Found\";\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 tags=php\
    \ |>\nThis code will work for all vowels including vowel at the beginning and\
    \ end:\n<code>", "    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $new_word\
    \ = \"\";\n    for($i = count($word) - 2 ; $i >= 0 ; $i--) {\n        if(in_array($word[$i],\
    \ $vowels)) break;\n        else $new_word .= $word[$i];\n    }\n    return $new_word;\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| a |>\nIn Python I would just use re module\
    \ and use the following regex\n<code>\nre.findall(\"[aeiouAEIOU](?=[^aeiou]*[aeiou])\"\
    , text)\n</code>\nto find all vowels within a given string.  \n<code>\nre.findall(\"\
    [aeiouAEIOU](?=[^aeiou]*[aeiou])\", mystring)\n</code>\n<|/ a dscore=0 tags=php,regex\
    \ |>\n<| a tags=php,regex |>\nI tried to solve this question in my way :\n<code>\n\
    <?php", "  $vowels = array('a', 'A', 'i', 'I', 'u', 'U', 'e', 'E');\n  $len =\
    \ strlen($word);\n  if ($len == 0) {\n    return \"\";\n  }\n  $leftIndex = $len\
    \ - 1;\n  $rightIndex = $len - 2;\n  while ($leftIndex > 0 && $rightIndex > 0)\
    \ {\n    if ($word[$leftIndex] == $vowels[count($vowels) - 1] && $word[$rightIndex]\
    \ == $vowels[0]) {\n      return $vowels[count($vowels) - 1];\n    }\n    if ($word[$leftIndex]\
    \ == $vowels[0] && $word[$rightIndex] == $vowels[count($vowels) - 1]) {\n    \
    \  return $vowels[0];\n    }\n    if ($word[$leftIndex] == $vowels[count($vowels)\
    \ - 1] && $word[$rightIndex] == $vowels[0]) {\n      return $vowels[count($vowels)\
    \ - 1];\n    }\n    $leftIndex--;\n    $rightIndex--;\n  }\n  return \"\";\n}\n\
    </code>\nI didn't use array_search because I find it more readable in this case.\
    \ Besides, I used strlen to get the length of the given string because I guess\
    \ it's more efficient than counting every character with strpos and strlen. \n\
    The code runs pretty fast and even for small strings, it won't return an empty\
    \ string, it just stops.\n<|/ a dscore=0 |>\n<| c |>\nThis answer just doesn't\
    \ really answer the question, because this is still the wrong tool for the job.\
    \ For example, what if the word is \"abba\"? The correct answer is \"a\" but your\
    \ function returns \"b\".\n<|/ c |>\n<| c |>\nI appreciate all the answers here\
    \ but I think the solution offered here is what most of us would do (by checking\
    \ vowels backwards and forwards). My solution is different from the others, because\
    \ it is shorter and does not use any extra functions (other than counting characters)\
    \ in the loop. Of course, it may have drawbacks, but the benefit is that it is\
    \ shorter and does not require any extra function calls. Of course, my solution\
    \ does not give the right answer for every possible input string, it just gives\
    \ the right answer for my test cases.\n<|/ c |>\n<| a tags=php dscore=0 |>\n<code>",
  "    \n    // Get all vowels from right side\n    $vowels = array(\"a\", \"e\",\
    \ \"i\", \"o\", \"u\", \"y\");\n    \n    // Get all consonants from right side\n\
    \    $consonants = str_split(strrev($word));\n    \n    // Loop through each consonant\n\
    \    foreach ($consonants as $key => $consonant) {\n        \n        // If consonant\
    \ is between [a, z] or [z, A], return vowel at key $key from vowels array\n  \
    \      if ($consonant >= 'a' && $consonant <= 'z' \n            || $consonant\
    \ >= 'A' && $consonant <= 'Z') {\n            \n            return $vowels[$key];\n\
    \        }\n    }\n    \n    return \"\";\n}\n</code>\n<|/ a dscore=1 tags=substring,string,php,character\
    \ |>\n<| c |>\nYour answer would be better if you explained what your code does.\
    \ We all want to educate here, but we also want answers to be helpful to future\
    \ readers.\n<|/ c |>\n<| a |>\n<code>\n$vowels = \"aeiouAEIOU\";\n\n$word = \"\
    yogurt\";\n\n$search = 'e';\n\nif (strpos($word, $search) !== false) {\n\n   \
    \ $word = substr($word, strrpos($word, $search) + strlen($search));\n\n}\n\nif\
    \ (strpos($word, $search) !== false) {\n\n    $word = substr($word, strrpos($word,\
    \ $search) + strlen($search));\n\n}\n\necho $vowels[array_search($word, $vowels)];\n\
    </code>\n<|/ a tags=substring,string,php,character dscore=1 |>\n<| c |>\nThank\
    \ you for this code snippet, which may provide some immediate help.  A proper\
    \ explanation [would greatly improve](//meta.stackexchange.com/q/114762) its educational\
    \ value by showing *why* this is a good solution to the problem, and would make\
    \ it more useful to future readers with similar, but not identical, questions.\
    \  Please [edit] your answer to add explanation, and give an indication of what\
    \ limitations and assumptions apply.\n<|/ c |>\n<| a |>\nI prefer using strripos\
    \ and strrev to find the positions of vowel and consonant, and substr later to\
    \ get them from string.\n<code>\n<?php", "    // Write your code here\n    $vowel\
    \ = \"aeiou\";\n    for($i = strlen($word); $i > 0; $i--) {\n        if(in_array($word[$i-1],\
    \ $vowel)) {\n            if(in_array($word[$i], $vowel)) {\n                return\
    \ $word[$i-1];\n            }\n        }\n    }\n    return \"\";\n}\n", "  $vowels\
    \ = \"aeiouAEIOU\";\n  $index = strrpos($word, $vowels);\n  if ($index === false)\n\
    \    return \"\";\n  return $word[$index + 1];\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nYour solution works, but it's inefficient (O(n*2)). The O(n) solution\
    \ is described in my answer.\n<|/ c |>\n<| a |>\nThis is my solution using Regex:\n\
    <code>", "    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $right_cons = strrev($word);\n\
    \    $vowels_found = false;\n    $foundVowel = \"\";\n    for ($i = strlen($right_cons);\
    \ $i > 0; $i--) {\n        $right_cons = substr($right_cons, 0, $i).strrev($right_cons);\n\
    \        if (in_array($right_cons, $vowels)) {\n            $vowels_found = true;\n\
    \            $foundVowel = $right_cons;\n            break;\n        }\n    }\n\
    \    return $foundVowel;\n}\n", "    $vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    for($i = strlen($word) - 2; $i >= 0; $i--) {\n        $char = substr($word,\
    \ $i, 1);\n        if(in_array($char, $vowels)) {\n            return $char;\n\
    \        }\n    }\n    return \"\";\n}\n", "    $vowel_array = array('a', 'e',\
    \ 'i', 'o', 'u', 'y');\n    $consonant_array = array('b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z');\n\
    \    $vowel_count =    count($vowel_array);\n    $consonant_count = count($consonant_array);\n\
    \    $vowel_count = $vowel_count + 1;\n    $consonant_count = $consonant_count\
    \ + 1;\n\n    for($i=$consonant_count;$i>0;$i--){\n        for($j=0;$j<$consonant_count;$j++){\n\
    \            if ($word[$j] == $consonant_array[$j]){\n                $closest\
    \ = $consonant_array[$j];\n            }\n        }\n    }\n    for($i=$consonant_count;$i>0;$i--){\n\
    \        for($j=0;$j<$vowel_count;$j++){\n            if ($word[$j] == $vowel_array[$j]){\n\
    \                $closest = $vowel_array[$j];\n            }\n        }\n    }\n\
    \n    if ($closest==$word[0]){\n        $closest = $word[0];\n    }\n    return\
    \ $closest;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis solution does\
    \ not take into account that there is more than one vowel between the consonants.\n\
    <|/ c |>\n<| c |>\nThis does not work: get_closest_vowel(\"Yogurt\") returns \"\
    y\". But the correct answer should be \"y\".\n<|/ c |>\n<| a |>\nA solution without\
    \ using strrev or reversing and without using regex:\n<code>", "    // $word must\
    \ contain English letter only\n    // split into array of each character\n   \
    \ $vowel = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n    $word = strtolower($word);\n\
    \    $arr = str_split($word);\n    $len = count($arr);\n    for($i=0;$i<$len;$i++){\n\
    \        if($arr[$i] === 'a' || $arr[$i] === 'e' || $arr[$i] === 'i' || $arr[$i]\
    \ === 'o' || $arr[$i] === 'u' || $arr[$i] === 'y'){\n            // if current\
    \ char is vowel\n            // return its position\n            $result = $i;\n\
    \        }\n    }\n    for($i=0;$i<$len;$i++){\n        if($arr[$i] !== 'a' &&\
    \ $arr[$i] !== 'e' && $arr[$i] !== 'i' && $arr[$i] !== 'o' && $arr[$i] !== 'u'\
    \ && $arr[$i] !== 'y'){\n            // if current char is not vowel\n       \
    \     // return empty string\n            $result = '';\n        }\n    }\n  \
    \  return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is an interesting solution,\
    \ but I'm not sure why you thought of it this way - a regex would work just as\
    \ well for what OP seems to want and probably be more efficient.\n<|/ c |>\n<|\
    \ c |>\nI agree with you. But I thought to give the OP an idea to solve the problem.\
    \ I'm a noob in programming.\n<|/ c |>\n<| c |>\nYou don't need `explode` on `$arr`.\
    \ Just loop through the string and do `$arr[$i]`.\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\nYou can try this :\n<code>\n$str = \"The quick brown fox jumps over the\
    \ lazy dog\";\n$vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n$result\
    \ = \"\";\nforeach (str_split($str) as $c) {\n    if (in_array($c, $vowels)) {\n\
    \        $result = $c;\n        break;\n    }\n}\necho $result;\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThis is wrong, your are looking for the vowel after\
    \ the consonant.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$str = \"The quick brown\
    \ fox jumps over the lazy dog\";\n\n$vowels = array(\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\");\n\n$result = \"\";\n\n", "    if (strlen($word) < 3) return \"\
    \";\n    $vowels = [\"\", \"a\", \"e\", \"i\", \"o\", \"u\"];\n    for ($i = 0;\
    \ $i < strlen($word); $i++) {\n        if ($word[$i] >= 'A' && $word[$i] <= 'Z')\
    \ {\n            foreach ($vowels as $k) {\n                if (strrpos($word,\
    \ $k) === $i) {\n                    return $k;\n                }\n         \
    \   }\n        }\n    }\n}\n", "    $vowels = array(\"a\", \"e\", \"i\", \"o\"\
    , \"u\");\n    $consonants = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"y\", \"z\");\n    \n    $vowelsCount = count($vowels);\n    $consonantsCount\
    \ = count($consonants);\n    \n    for ($i=0; $i<$wordLength; $i++) {\n      \
    \  if ($word[$i] >= 'a' && $word[$i] <= 'z') {\n            \n            if ($i\
    \ < $vowelsCount) {\n                $closestVowel = $vowels[$i];\n          \
    \  } else {\n                $closestVowel = \"\";\n            }\n          \
    \  \n            if ($word[$i] >= 'a' && $word[$i] <= 'z') {\n               \
    \ \n                if ($word[$i] >= 'a' && $word[$i] <= 'z') {\n            \
    \        \n                    if ($i < $vowelsCount) {\n                    \
    \    $closestVowel = $vowels[$i];\n                    } else {\n            \
    \            $closestVowel = \"\";\n                    }\n                  \
    \  \n                    if ($word[$i] >= 'a' && $word[$i] <= 'z') {\n       \
    \                 \n                        if ($i < $vowelsCount) {\n       \
    \                     $closestVowel = $vowels[$i];\n                        }\
    \ else {\n                            $closestVowel = \"\";\n                \
    \        }\n                        \n                        if ($word[$i] >=\
    \ 'a' && $word[$i] <= 'z') {\n                            \n                 \
    \           if ($i < $vowelsCount) {\n                                $closestVowel\
    \ = $vowels[$i];\n                            } else {\n                     \
    \           $closestVowel = \"\";\n                            }\n           \
    \                 \n                            if ($word[$i] >= 'a' && $word[$i]\
    \ <= 'z') {\n                                \n                              \
    \  if ($i < $vowelsCount) {\n                                    $closestVowel\
    \ = $vowels[$i];\n                                } else {\n                 \
    \                   $closestVowel = \"\";\n                                }\n\
    \                                \n                                if ($word[$i]\
    \ >= 'a' && $word[$i] <= 'z') {\n                                    \n      \
    \                              if ($i < $vowelsCount) {\n                    \
    \                    $closestVowel = $vowels[$i];\n                          \
    \          } else {\n                                        $closestVowel = \"\
    \";\n                                    }\n                                 \
    \   \n                                    if ($word[$i] >= 'a' && $word[$i] <=\
    \ 'z') {\n                                        \n                         \
    \               if ($i < $vowelsCount) {\n                                   \
    \         $closestV", "    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\",\
    \ \n        \"A\", \"E\", \"I\", \"O\", \"U\");\n    $vowelsCount = count($vowels);\n\
    \    $vowelsLeft = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $vowelsRight\
    \ = array(\"A\", \"E\", \"I\", \"O\", \"U\");\n\n    $firstConsonant = strrpos($word,\
    \ \"a\") +1;\n    $firstConsonantLength = strlen($word) - strlen(substr($word,\
    \ $firstConsonant));\n    $lastConsonant = strlen($word) - 1;\n    $lastConsonantLength\
    \ = strlen($word) - strlen(substr($word, $lastConsonant));\n    $firstVowel =\
    \ ($firstConsonantLength - $firstConsonant)/$vowelsCount;\n    $firstVowelLength\
    \ = $firstVowel - 1;\n    $lastVowel = ($lastConsonantLength - $lastConsonant)/$vowelsCount;\n\
    \    $lastVowelLength = $lastVowel - 1;\n    $firstVowelIndex = array_search($firstVowel,\
    \ $vowelsLeft);\n    $lastVowelIndex = array_search($lastVowel, $vowelsRight);\n\
    \n    // Find closest vowel between first and last consonant\n    if($firstVowelIndex\
    \ == -1 || $lastVowelIndex == -1) {\n        return \"\";\n    } else {\n    \
    \    if($firstVowelIndex > $lastVowelIndex) {\n            $firstVowelIndex =\
    \ $lastVowelIndex;\n        }\n\n        $vowelsBetween = array();\n        $vowelsBetweenLength\
    \ = array();\n        for($i = 0; $i < $vowelsCount - 1; $i++) {\n           \
    \ $vowelsBetween[] = $vowels[$i + $firstVowelIndex];\n            $vowelsBetweenLength[]\
    \ = strlen($vowels[$i + $firstVowelIndex]);\n        }\n        for($i = $vowelsCount\
    \ - 1; $i >= 0; $i--) {\n            $vowelsBetween[] = $vowels[$i + $lastVowelIndex];\n\
    \            $vowelsBetweenLength[] = strlen($vowels[$i + $lastVowelIndex]);\n\
    \        }\n\n        $vowelsBetween = array_intersect($vowelsBetween, $vowels);\n\
    \        $vowelsBetweenLength = array_intersect($vowelsBetweenLength, $vowelsBetweenLength);\n\
    \n        if(count($vowelsBetween) > count($vowelsBetweenLength)) {\n        \
    \    ", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $first = array_slice($word,\
    \ 0, -1);\n    $last = array_slice($word, -2, -1);\n    $first = array_unique($first);\n\
    \    $last = array_unique($last);\n    $first = array_search('aeiou', $first);\n\
    \    $last = array_search('aeiou', $last);\n    if ($first===false && $last===false)\
    \ {\n        return '';\n    } elseif ($first===false && $last!==false) {\n  \
    \      return $last;\n    } elseif ($first!==false && $last===false) {\n     \
    \   return $first;\n    } elseif ($first!==false && $last!==false) {\n       \
    \ return $vowels[$first-1].$vowels[$last-1];\n    }\n}\n", "    $vowel_ranges\
    \ = [\n        0 => [\"a\", \"\u0101\", \"\xE2\", \"\xE1\", \"\u0103\", \"\u0227\
    \", \"\xC1\", \"\xC2\", \"\xC4\", \"\xC5\", \"\u0102\", \"\u0110\", \"\u010E\"\
    , \"\u0110\", \"\u011A\", \"\u0118\", \"\u0122\", \"\u011C\", \"\u0125\", \"\u0135\
    \", \"\u012B\", \"\u012F\", \"\u0137\", \"\u0141\", \"\u0142\", \"\u0144\", \"\
    \u0148\", \"\u0147\", \"\u014B\", \"\u014D\", \"\u014F\", \"\u0151\", \"\u0155\
    \", \"\u0159\", \"\u015B\", \"\u015D\", \"\u015F\", \"\u0165\", \"\u0163\", \"\
    \u0167\", \"\u016D\", \"\u016F\", \"\u0171\", \"\u016B\", \"\u0173\", \"\u016F\
    \", \"\u0173\", \"\u01E3\", \"\u01E5\", \"\u01E6\", \"\u01E7\", \"\u01EE\", \"\
    \u01E9\", \"\u01EC\", \"\u01EE\", \"\u01EF\", \"\u01F0\", \"\u01F1\", \"\u01F2\
    \", \"\u01F3\", \"\u01DC\", \"\u01FA\", \"\u01FB\", \"\u01FC\", \"\u01FD\", \"\
    \u01FE\", \"\u01FF\", \"\xBA\", \"\xC0\", \"\xC1\", \"\xC2\", \"\xC3\", \"\xC4\
    \", \"\xC5\", \"\xC6\", \"\xC7\", \"\xC8\", \"\xC9\", \"\xCA\", \"\xCB\", \"\xCC\
    \", \"\xCD\", \"\xCE\", \"\xCF\", \"\xD0\", \"\xD1\", \"\xD2\", \"\xD3\", \"\xD4\
    \", \"\xD5\", \"\xD6\", \"\xD8\", \"\xD9\", \"\xDA\", \"\xDB\", \"\xDC\", \"\u0150\
    \", \"\u0170\", \"\u015E\", \"\u016A\", \"\u0170\", \"\u016C\", \"\u016A\", \"\
    \u016B\", \"\u016D\", \"\u016F\", \"\u0171\", \"\u0173\", \"\u016F\", \"\u0173\
    \", \"\u01CD\", \"\u01CE\", \"\u01CF\", \"\u01D0\", \"\u01D1\", \"\u01D2\", \"\
    \u01D3\", \"\u01D4\", \"\u01D5\", \"\u01D6\", \"\u01D7\", \"\u01D8\", \"\u01D9\
    \", \"\u01DA\", \"\u01DB\", \"\u01DC\", \"\u01FA\", \"\u01FB\", \"\u01FC\", \"\
    \u01FD\", \"\u01FE\", \"\u01FF\", \"\u01FF\", \"\u0141\", \"\u0142\", \"\u0144\
    \", \"\u0148\", \"\u0147\", \"\u014B\", \"\u014D\", \"\u014F\", \"\u0151\", \"\
    \u0155\", \"\u0159\", \"\u015B\", \"\u015D\", \"\u015F\", \"\u0165\", \"\u0163\
    \", \"\u0167\", \"\u016D\", \"\u016F\", \"\u0171\", \"\u016B\", \"\u0173\", \"\
    \u016F\", \"\u0173\", \"\u01E3\", \"\u01E5\", \"\u01E6\", \"\u01E7\", \"\u01EE\
    \", \"\u01E9\", \"\u01EC\", \"\u01EE\", \"\u01EF\", \"\u01F0\", \"\u01F1\", \"\
    \u01F2\", \"\uFFFD", "    \n}\n</code>\n<|/ a |>\n<| c |>\nYou don't need an if\
    \ statement to check `$i == 0` and `$i == $len - 1`, you can just use `strpos($word,\
    \ $vowels, $i + 1)` (where `$vowels` is `\"aAyYeEoOuU\"`). Also, why not use `strstr()`?\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", "    $vowels = array(\"a\",\"e\",\"\
    i\",\"o\",\"u\");\n    $vowels_count = count($vowels);\n    $vowel_index = 1;\n\
    \    foreach ($vowels as $i => $vowel) {\n        if(strpos($word,$vowel) !==\
    \ FALSE && strpos($word,$vowel) !== FALSE) {\n            $vowel_index = $i;\n\
    \        }\n    }\n    return substr($word,0,-$vowels_count+$vowel_index);\n}\n\
    </code>\n<|/ a tags=php |>\n<| a tags=php |>\nYou can try this code:\n<code>\n\
    $word = 'quick';\n$vowels = array('a', 'e', 'i', 'o', 'u');\n\n$word = str_replace($vowels,\
    \ '', $word);\n\n$vowel = substr($word, -strlen($word) % 5);\n$vowel_pos = strpos($vowels,\
    \ $vowel);\nreturn $word . $vowels[$vowel_pos];\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 tags=php |>\n<code>\n<?php", "    $vowels = ['a','e','i','o','u','A','E','I','O','U'];\n\
    \    foreach($vowels as $v){\n        $pos = strrpos($word,$v);\n        if($pos!==false){\n\
    \            $last = $word[$pos-1];\n            $first = strtolower($word[0]);\n\
    \            if ($last == $v) {\n                return $v;\n            }\n \
    \       }\n    }\n    return '';\n}", "    \n    // your code here\n    $vowels\
    \ = \"aeiouAEIOU\";\n    $new_word = strrev($word);\n    foreach($new_word as\
    \ $value) {\n        if (strpos($vowels, $value) !== false) {\n            return\
    \ $value;\n        }\n    }\n    return \"\";\n}\n</code>\n<|/ a tags=php |>\n\
    <| a tags=php |>\nYou can use strpos() function on $new_word with strrev() function\n\
    <code>\n<?php", "    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n   \
    \ $vowel_count = array_count_values($vowels);\n    foreach ($vowel_count as $vowel_count\
    \ => $vowel_count) {\n        // Check if a vowel is right to the last character\n\
    \        if ($word[strlen($word) - 1] == $vowel) {\n            // Find out how\
    \ many consonant are on the right side\n            $consonant_count = count($word)\
    \ - strlen($word) - 1;\n            $consonant_count = min($consonant_count, count($vowels)\
    \ - 1);\n            // Get the vowel closet to consonant\n            $index\
    \ = array_search($vowel, $vowels);\n            if ($index >= 0) {\n         \
    \       $index++;\n                $closest_vowel = $vowels[$index];\n       \
    \         break;\n            }\n        }\n    }\n    return $closest_vowel;\n\
    }\n", "    $vowels = array('a','e','i','o','u');\n    $vowels_count = count($vowels);\n\
    \    \n    // start from the right side of the string\n    $start = strlen($word)\
    \ - 1;\n    $end = strlen($word);\n    \n    while($start >= 0 && $end >= 0) {\n\
    \        if(substr($word, $start, 1) === $vowels[0]) {\n            $start--;\n\
    \        }\n        else if(substr($word, $end, 1) === $vowels[$vowels_count -\
    \ 1]) {\n            $end--;\n        }\n        else {\n            // found\
    \ a vowel\n            return substr($word, $start + 1, 1);\n        }\n    }\n\
    \    return \"\";\n}\n", "    $pattern = '/[aeiou]/i';\n    \n    $words = explode(\"\
    \ \", $word);\n    \n    $end = $words[count($words) - 1];\n    $start = substr($end,\
    \ 1);\n    \n    $leftVowel = preg_match($pattern, $end, $matches) ? $matches[0]\
    \ : '';\n    $rightVowel = preg_match($pattern, $start, $matches) ? $matches[0]\
    \ : '';\n    \n    $vowel = preg_match($pattern, $words[count($words) - 2], $matches)\
    \ ? $matches[0] : '';\n    \n    return ($leftVowel === $rightVowel && $leftVowel\
    \ === $vowel) ? $leftVowel : \"\";\n}\n</code>\n<|/ a |>\n<| a tags=php,algorithm,string\
    \ |>\nHere is an easy way to find the closest vowel from the right side:\n<code>\n\
    $string = 'yogurt';\n$letters = str_split($string);\n$strings = array_filter($letters,\
    \ function($letter) {\n    return $letter == 'a' || $letter == 'e' || $letter\
    \ == 'i' || $letter == 'o' || $letter == 'u';\n});\n$strings = array_reverse($strings);\n\
    $index = array_search('y', $strings);\n$vowel = array_slice($strings, 0, $index);\n\
    $vowel = implode($vowel, '');\n$result = $vowel;\n</code>\nThis gives $result\
    \ as y. The next step is finding the closest vowel from the left side:\n<code>\n\
    $string = 'yogurt';\n$letters = str_split($string);\n$strings = array_filter($letters,\
    \ function($letter) {\n    return $letter == 'a' || $letter == 'e' || $letter\
    \ == 'i' || $letter == 'o' || $letter == 'u';\n});\n$strings = array_reverse($strings);\n\
    $index = array_search('y', $strings);\n$vowel = array_slice($strings, $index);\n\
    $vowel = implode($vowel, '');\n$result = $vowel;\n</code>\nThis gives $result\
    \ as g. Now the third step is finding the closest vowel from the other side:\n\
    <code>\n$string = 'yogurt';\n$letters = str_split($string);\n$strings = array_filter($letters,\
    \ function($letter) {\n    return $letter == 'a' || $letter == 'e' || $letter\
    \ == 'i' || $letter == 'o' || $letter == 'u';\n});\n$strings = array_reverse($",
  "    return $word;\n}", "    // Your code goes here\n    $vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    $wordArr = [];\n    $len = strlen($word);\n    $wordArr\
    \ = str_split($word);\n    sort($wordArr);\n    $flag = 0;\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        for ($j = 0; $j < 5; $j++) {\n            if ($j +\
    \ 1 > $len - 1) {\n                break;\n            }\n            if ($wordArr[$i]\
    \ == $vowels[$j]) {\n                $flag = 1;\n                if ($j == 0)\
    \ {\n                    return $vowels[$j];\n                }\n            \
    \    if ($j == 4) {\n                    return $vowels[$j];\n               \
    \ }\n            }\n        }\n    }\n    if ($flag == 0) {\n        return \"\
    \";\n    }\n}\n</code>\n<|/ a |>\n<| c |>\nOh sorry, I misunderstood your question\
    \ - I thought you wanted it to be case insensitive. I've edited the answer.\n\
    <|/ c |>\n<| c |>\nYeah, I figured out the problem, it's because of the for loop\
    \ in 'get_closest_vowel' function, the \"if ($j + 1 > $len - 1)\" condition needs\
    \ to be changed to \"if ($i + 1 > $len - 1)\".\n<|/ c |>\n<| a dscore=0 tags=php\
    \ |>\nAnother simple approach:\n<code>\n<?php\n\n$word = \"yogurt\";\n\n$vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\n$vowelIndex = array_search(strtolower($word[0]),\
    \ $vowels, true);\n\n$newVowel = $vowels[$vowelIndex];\n\necho $newVowel; // 'u'\n\
    </code>\nThe array_search function returns false if it doesn't find anything.\
    \ So I just get the index of the first vowel and use that to get the correct value\
    \ from the array. Then just echo the value.\n<|/ a |>\n<| a tags=php |>\nYou can\
    \ use the following code:\n<code>\n$word=\"yogurt\";\n$vowel=\"aeiou\";\n$vowel_length=strlen($vowel);\n\
    $new_word=substr($word,0,strrpos($word,$vowel));\n$index=0;\nforeach($vowel as\
    \ $value){\n    if($new_word[$index++]==$value){\n        break;\n    }\n}\necho\
    \ $vowel[$index-$vowel_length];\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=php\
    \ |>\nA simple solution:\n<code>\n$word = \"yogurt\";\n\n$vowel", "    if (empty($word))\
    \ return \"\";\n    $vowels = \"aeiou\";\n    $vowels_size = strlen($vowels);\n\
    \    $last_position = ($word[strlen($word) - 1] == 'a' ? 0 : strlen($word) - 1);\n\
    \    for ($i = 0; $i < $vowels_size; $i++) {\n        $letter = $word[$i];\n \
    \       if ($letter != 'a' && $letter != 'e' && $letter != 'i' && $letter != 'o'\
    \ && $letter != 'u') {\n            continue;\n        }\n        $last_position--;\n\
    \        for ($j = $i + 1; $j < $vowels_size; $j++) {\n            if ($word[$j]\
    \ == $letter) {\n                if ($j - $i > $last_position - $i) {\n      \
    \              return $vowels[$i];\n                }\n            }\n       \
    \ }\n    }\n    return \"\";\n}", "    $vowels = \"aeiou\";\n    $vowels_array\
    \ = str_split($vowels);\n    $vowels_array_count = count($vowels_array);\n   \
    \ for($i = count($word)-1; $i > 0; $i--) {\n        $char = strtolower($word[$i]);\n\
    \        for($j=0; $j < $vowels_array_count; $j++) {\n            if($char ==\
    \ $vowels_array[$j]) {\n                return $vowels_array[$j];\n          \
    \  }\n        }\n    }\n    return '';\n}\n", "  $vowels = ['a', 'e', 'i', 'o',\
    \ 'u', 'A', 'E', 'I', 'O', 'U'];\n  sort($vowels);\n  $right_side_consonants =\
    \ str_split(substr($word, -2));\n  $left_side_consonants = str_split(substr($word,\
    \ 2));\n  $right_side_consonants_length = count($right_side_consonants);\n  $left_side_consonants_length\
    \ = count($left_side_consonants);\n  $vowel_found = false;\n  $closest_vowel =\
    \ '';\n  foreach ($vowels as $key => $vowel) {\n    if ($key == 0) {\n      if\
    \ (in_array($vowel, $left_side_consonants)) {\n        $closest_vowel = $vowel;\n\
    \        $vowel_found = true;\n      }\n    } else if ($key == ($right_side_consonants_length\
    \ - 1)) {\n      if (in_array($vowel, $right_side_consonants)) {\n        $closest_vowel\
    \ = $vowel;\n        $vowel_found = true;\n      }\n    } else {\n      $left_consonant_length\
    \ = count($left_side_consonants);\n      if (in_array($vowel, $left_side_consonants)\
    \ && $key == ($left_side_consonants_length - $left_consonant_length)) {\n    \
    \    $closest_vowel = $vowel;\n        $vowel_found = true;\n      }\n      $right_consonant_length\
    \ = count($right_side_consonants);\n      if (in_array($vowel, $right_side_consonants)\
    \ && $key == ($right_side_consonants_length - $right_consonant_length)) {\n  \
    \      $closest_vowel = $vowel;\n        $vowel_found = true;\n      }\n    }\n\
    \  }\n  return $vowel_found ? $closest_vowel : '';\n}", "    $vowels = ['a','e','i','o','u'];\n\
    \    $vowels_count = count($vowels);\n    $consonants = preg_split('/[b-zB-Z]/',\
    \ $word);\n    $consonants_count = count($consonants);\n    if ($consonants_count\
    \ > 1) {\n        $last_consonant = array_pop($consonants);\n        $last_consonant_index\
    \ = array_search($last_consonant, $consonants);\n        $last_consonant_index\
    \ -= 1;\n        $last_consonant_index *= 2;\n        $last_consonant_index /=\
    \ 2;\n        $last_consonant_index = max($last_consonant_index, 0);\n       \
    \ if ($last_consonant_index >= $vowels_count) {\n            return \"\";\n  \
    \      }\n        $last_consonant_index += 1;\n        $last_consonant = $consonants[$last_consonant_index];\n\
    \    }\n    else {\n        return \"\";\n    }\n    $last_consonant_index +=\
    \ 1;\n    $last_consonant = $consonants[$last_consonant_index];\n    return array_search($last_consonant,\
    \ $vowels);\n}\n</code>\n<|/ a dscore=1 tags=php,algorithm |>\n<| a tags=php,algorithm\
    \ |>\nHere is my solution:\n<code>", "    $letters = str_split($word);\n    $vowels\
    \ = ['a','e','i','o','u'];\n    foreach($letters as $key => $letter) {\n     \
    \   if(in_array($letter, $vowels)) $letters[$key] = $letter;\n    }\n    return\
    \ array_pop($letters) ? $letters[count($letters) - 1] : '' . array_pop($letters)\
    \ . 'u';\n}\n</code>\n<|/ a |>\n<| c |>\nThank you, that was really helpful! I\
    \ did have to change my original function to use `$letters = str_split($word);`\
    \ instead of `str_split(' ' . $word . ' ');` to make it work with the original\
    \ example given.\n<|/ c |>\n<| c |>\nThe other issue with this function is that\
    \ it returns different results for different input strings. If you pass `a`, it\
    \ returns `a`. If you pass `aa`, it returns `u`. You get the idea. For any input\
    \ string, it returns `u` on the last letter and `u` on the first letter. If you\
    \ pass an empty string, it returns an empty string.\n<|/ c |>\n<| a dscore=1 |>\n\
    This can be done with a regex and lookarounds (assuming you know all of the vowels).\n\
    <code>", "    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n\
    \    $vowels_length = strlen($word);\n    $vowels_array = $vowels;\n\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_length = strlen($word);\n\n    $vowels_array = array_reverse($vowels_array);\n\
    \n    for ($i = 0; $i <= $vowels_count; $i++) {\n        if ($vowels_array[$i]\
    \ != $word[$vowels_length - ($vowels_length - 1)]) {\n            $vowels_array[$i]\
    \ = $word[$vowels_length - ($vowels_length - 1)];\n            $vowels_count--;\n\
    \        }\n    }\n    for ($i = 0; $i <= $vowels_count; $i++) {\n        if ($vowels_array[$i]\
    \ != $word[$vowels_length - $i]) {\n            $vowels_array[$i] = $word[$vowels_length\
    \ - $i];\n            $vowels_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ <= $vowels_count; $i++) {\n        if ($vowels_array[$i] != $word[$vowels_length\
    \ - $i - 1]) {\n            $vowels_array[$i] = $word[$vowels_length - $i - 1];\n\
    \            $vowels_count--;\n        }\n    }\n\n    return $vowels_array[array_search($word[strlen($word)\
    \ - 1], array_reverse($vowels_array))];\n}\n", "    $vowels = \"aeiouAEIOU\";\n\
    \    $leftCons = strrpos($word, \"a\");\n    $rightCons = strrpos($word, \"e\"\
    );\n    $leftVow = strpos($word, $vowels, $rightCons);\n    $rightVow = strpos($word,\
    \ $vowels, $leftCons);\n    return ($leftVow < $rightVow) ? $vowels[$leftVow]\
    \ : '';\n}\n</code>\n<|/ a dscore=0 tags=php |>\n<| a tags=php |>\nThis doesn't\
    \ involve any kind of string manipulation, just some basic PHP logic, it's also\
    \ case insensitive\n<code>", "    if ($word == '') return '';\n    $vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    \n    $ls = strlen($word);\n    \n    for\
    \ ($i=0; $i<$ls; $i++) {\n        $c = $word[$i];\n        if (in_array($c, $vowels))\
    \ continue;\n        for ($j=$i; $j<$ls; $j++) {\n            if ($word[$j] ===\
    \ $c) {\n                return $c;\n            }\n        }\n    }\n    return\
    \ '';\n}\n", "  global $vowels;\n  $vowelsCount = 0;\n  $vowelsCount2 = count($vowels);\n\
    \  foreach($vowels as $key => $val) {\n    $vowels[$key] = strtoupper($val);\n\
    \  }\n  foreach($vowels as $key => $val) {\n    if(substr($word,0,1) == $val)\
    \ {\n      $word1 = substr($word,1);\n      if($word1[strlen($word1) - 1] != $val)\
    \ {\n        $vowelsCount++;\n      }\n    }\n    if(substr($word,0,2) == $val)\
    \ {\n      $word2 = substr($word,2);\n      if($word2[strlen($word2) - 1] != $val)\
    \ {\n        $vowelsCount++;\n      }\n    }\n    if(substr($word,0,3) == $val)\
    \ {\n      $word3 = substr($word,3);\n      if($word3[strlen($word3) - 1] != $val)\
    \ {\n        $vowelsCount++;\n      }\n    }\n    if(substr($word,0,4) == $val)\
    \ {\n      $word4 = substr($word,4);\n      if($word4[strlen($word4) - 1] != $val)\
    \ {\n        $vowelsCount++;\n      }\n    }\n    if(substr($word,0,5) == $val)\
    \ {\n      $word5 = substr($word,5);\n      if($word5[strlen($word5) - 1] != $val)\
    \ {\n        $vowelsCount++;\n      }\n    }\n    if(substr($word,0,6) == $val)\
    \ {\n      $word6 = substr($word,6);\n      if($word6[strlen($word6) - 1] != $val)\
    \ {\n        $vowelsCount++;\n      }\n    }\n    if(substr($word,0,7) == $val)\
    \ {\n      $word7 = substr($word,7);\n      if($word7[strlen($word7) - 1] != $val)\
    \ {\n        $vowelsCount++;\n      }\n    }\n    if(substr($word,0,8) == $val)\
    \ {\n      $word8 = substr($word,8);\n      if($word8[strlen($word8) - 1] != $val)\
    \ {\n        $vowelsCount++;\n      }\n    }\n    if(substr($word,0,9) == $val)\
    \ {\n      $word9 = substr($word,9);\n      if($word9[strlen($word9) - 1] != $val)\
    \ {\n        $vowelsCount++;\n      }\n    }\n    if(substr($word,0,10) == $val)\
    \ {\n      $word10 = substr($word,10);\n      if($word10[strlen($word10) - 1]\
    \ != $val) {\n        $", "    $vowels = array('a','e','i','o','u','A','E','I','O','U');\n\
    \    $vowels_count = count($vowels);\n    \n    $vowels_end = 0;\n    $vowels_start\
    \ = 0;\n    \n    for($i=0;$i<strlen($word);$i++) {\n        if ($word[$i] ==\
    \ $vowels[$vowels_start]) {\n            $vowels_start++;\n        }\n       \
    \ \n        if ($word[$i] == $vowels[$vowels_end]) {\n            $vowels_end++;\n\
    \        }\n    }\n    \n    if ($vowels_start < $vowels_count) {\n        $vowels_start\
    \ += 1;\n    }\n    \n    if ($vowels_end > $vowels_count) {\n        $vowels_end\
    \ -= 1;\n    }\n    \n    if ($vowels_end < $vowels_start) {\n        return \"\
    \";\n    }\n    \n    return $vowels[$vowels_end - $vowels_start + 1];\n}\n",
  "    $vowel = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    foreach ($vowel as\
    \ $value) {\n        $pos = strrpos($word, $value);\n        if ($pos !== false)\
    \ {\n            return $value;\n        }\n    }\n    return \"\";\n}\n", " \
    \   $vowels = \"aeiou\";\n    $word_length = strlen($word);\n    $vowel_index\
    \ = -1;\n    $closest_vowel = -1;\n    $consonant_counter = 1;\n    \n    for\
    \ ($i = 0; $i < $word_length ; $i++) {\n        $char = substr($word, $i, 1);\n\
    \        if (in_array($char, $vowels)) {\n            if ($closest_vowel == -1\
    \ || $closest_vowel > $vowel_index) {\n                $closest_vowel = $vowel_index;\n\
    \            }\n            $vowel_index = -1;\n            $consonant_counter\
    \ = 1;\n            continue;\n        }\n        if ($consonant_counter == 1)\
    \ {\n            if ($char == $consonant_char) {\n                $vowel_index\
    \ = $i;\n                $consonant_counter++;\n                $consonant_char++;\n\
    \            } else {\n                $consonant_char = $char;\n            \
    \    $consonant_counter = 1;\n            }\n        } else {\n            if\
    \ ($char == $consonant_char) {\n                $consonant_counter++;\n      \
    \      } else {\n                break;\n            }\n        }\n    }\n   \
    \ \n    if ($closest_vowel == -1) {\n        return \"\";\n    } else {\n    \
    \    return substr($word, 0, $vowel_index + 1);\n    }\n}\n</code>\n<|/ a tags=function,php\
    \ |>\n<| a dscore=0 |>\nHere is a recursive version that finds a vowel in an arbitrary\
    \ string, it returns the location of the vowel if found and -1 if it is not found\n\
    <code>", "    // your code here\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n\
    \    for ($i=count($word)-1; $i >= 0; $i--) {\n        if (in_array($word[$i],\
    \ $vowels)) {\n            $pos = array_search($word[$i], $vowels);\n        \
    \    return $word[$i];\n        }\n    }\n    return \"\";\n}\n</code>\n<|/ a\
    \ |>\n<| a tags=php,words,arrays,search dscore=0 |>\nAs per my understanding here\
    \ is simple solution for your problem\n<code>", "    $vowels = \"aeiouAEIOU\"\
    ;\n    $str_length = strlen($word);\n    $vowels_count = count($vowels);\n   \
    \ for ($i=$str_length-1; $i>=0; $i--) {\n        $v = substr($word, $i, 1);\n\
    \        if (strpos($vowels, $v) !== FALSE) {\n            if ($i == $str_length-1)\
    \ {\n                return $v;\n            }\n            if ($i == 0) {\n \
    \               return \"\";\n            }\n            if ($i == $str_length-2)\
    \ {\n                $new_word = $word.substr(0, $i+1);\n                return\
    \ get_closest_vowel($new_word);\n            }\n        }\n    }\n    return \"\
    \";\n}\n</code>\n<|/ a |>\n<| c |>\nIf you're going to use `substr`, it would\
    \ be better to use the length from the start rather than the end as the limit.\
    \ Also, why not just use `strpos()` as the condition for the loop?\n<|/ c |>\n\
    <| c |>\nYeah, thanks for pointing that out, i just edited the answer while you\
    \ post your comment.\n<|/ c |>\n<| c |>\nI believe there could be a bug. if word\
    \ is \"ab\", the function should return an empty string. But, actually, it returns\
    \ \"a\" as expected.\n<|/ c |>\n<| c |>\nPlease try the updated answer that I\
    \ have tested.\n<|/ c |>\n<| c |>\nYour code is very good! It works on all test\
    \ cases and is clear. I learned a lot from this. Thanks.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    \n    if ($word==\"\" || $word==\" \") return \"\";\n    $vowels_begin=array(\"\
    a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\");\n    $vowels_end=array(\"\
    a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\",\"a\",\"e\",\"i\",\"\
    o\",\"u\");\n    $begin_pos=0;\n    $end_pos=0;\n    \n    for($i=0;$i<strlen($word);$i++)\
    \ {\n        $vowels_count=0;\n        \n        for($j=0;$j<5;$j++) {\n     \
    \       if (strpos($vowels_begin[$j],$word[$i])!==false || strpos($vowels_end[$j],$word[$i])!==false)\
    \ {\n                $vowels_count++;\n            }\n        }\n        if ($vowels_count<2)\
    \ return \"\";\n        if ($vowels_count==2) {\n            $begin_pos=$i;\n\
    \        }\n        if ($vowels_count==3) {\n            $end_pos=$i;\n      \
    \      break;\n        }\n    }\n    \n    if ($begin_pos==$end_pos) return \"\
    \";\n    \n    if ($end_pos>$begin_pos) $begin_pos=$end_pos;\n    \n    if ($begin_pos>strlen($word)-3\
    \ || $end_pos<0) return \"\";\n    \n    $vovel_count=0;\n    $vovel_count1=0;\n\
    \    \n    $consonants_count=0;\n    \n    for ($i=$begin_pos;$i<$end_pos;$i++)\
    \ {\n        $consonants_count++;\n        if ($word[$i]==\"a\" || $word[$i]==\"\
    e\" || $word[$i]==\"i\" || $word[$i]==\"o\" || $word[$i]==\"u\") {\n         \
    \   $vovel_count++;\n        }\n    }\n    \n    if ($vovel_count==0) {\n    \
    \    $vovel_count1=1;\n    }\n    \n    for ($i=$begin_pos;$i<strlen($word);$i++)\
    \ {\n        $consonants_count++;\n        if ($word[$i]==\"a\" || $word[$i]==\"\
    e\" || $word[$i]==\"i\" || $word[$i]==\"o\" || $word[$i]==\"u\") {\n         \
    \   $vovel_count1++;\n        }\n    }\n    \n    if ($vovel_count1==0) {\n  \
    \      return \"\";\n    }\n    \n    $vovel_count1--;\n    $vovel_count--;\n\
    \    \n    if ($vovel_count<$vovel_count1) {\n        return \"\";\n    }\n  \
    \  \n", "  $vowels = array('a','e','i','o','u');\n  $vowels_length = count($vowels);\n\
    \  \n  // if empty return empty string\n  if (strlen($word) <= 0 || strlen($word)\
    \ >= strlen($word)) {\n    return \"\";\n  }\n  // if not empty loop through each\
    \ letter and check against vowels\n  for ($i = 0; $i < strlen($word); $i++) {\n\
    \    $letter = $word[$i];\n    $lower_letter = strtolower($letter);\n    $lower_vowel\
    \ = strtolower($vowels[$i]);\n    // if letter doesn't exist return empty string\n\
    \    if ($lower_letter !== $lower_vowel) {\n      return \"\";\n    }\n  }\n\n\
    \  // if the last letter is not a consonant\n  if ($word[strlen($word) - 1] !==\
    \ 'a') {\n    return \"\";\n  }\n\n  // if the word is all caps\n  if ($word[0]\
    \ > 'z') {\n    return \"\";\n  }\n\n  // loop through each letter and find the\
    \ vowel that is closest\n  for ($i = 0; $i < strlen($word); $i++) {\n    $letter\
    \ = $word[$i];\n    $lower_letter = strtolower($letter);\n    $lower_vowel = strtolower($vowels[$i]);\n\
    \    // check if the letter is vowel\n    if ($lower_letter === $lower_vowel)\
    \ {\n      // find the difference between the vowel position and the consonant\
    \ position\n      $diff = abs(strlen($lower_vowel) - strlen($lower_letter));\n\
    \      // find minimum difference between consonant position and the vowel position\n\
    \      $min_index = min($i, $vowels_length - 1);\n      // return the vowel that\
    \ is closest to it\n      return $vowels[$min_index];\n    }\n  }\n}", "    $vowels\
    \ = [];\n    $vowels_count = array_count_values(str_split($word));\n    foreach\
    \ ($vowels_count as $i => $c) {\n        if (($c % 2) === 0) {\n            $vowels[]\
    \ = $i;\n        }\n    }\n    $vowels = array_reverse($vowels);\n    $closest_vowel\
    \ = array_shift($vowels);\n    return $closest_vowel;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nPlease elaborate on how your code works. As it stands, this answer\
    \ looks like a code dump.\n<|/ c |>\n<| c |>\nSorry I'm new to this site and am\
    \ not familiar with how the code should be formatted. Basically I took a different\
    \ approach because I wasn't sure what was meant by a 'vowel between two consonants'\
    \ in the original question. My guess is that it means 'a vowel between the letters\
    \ B and C, excluding the letters D and F', but I'm not sure. And since I wasn't\
    \ sure I tried to explain the process. Feel free to post your own answer if you'd\
    \ like.\n<|/ c |>\n<| a dscore=1 tags=php,string |>\nThe approach I've used is\
    \ basically to find the right number of vowels to match the number of letters\
    \ in the input string - which gives you the minimum number of vowels to match\
    \ from the right, like so:\n<code>\n<?php", "    $arr = str_split($word);\n  \
    \  $vowel = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $start = -1;\n    $end\
    \ = -1;\n    for($i = 0; $i < count($arr); $i++) {\n        $c = $arr[$i];\n \
    \       if($start == -1) {\n            $start = $i;\n        } else if($c ==\
    \ $vowel[$start] && ($i == count($arr)-1 || $arr[$i+1] != $vowel[$end])) {\n \
    \           $end = $i;\n        }\n    }\n    return ($end != -1) ? $vowel[$end]\
    \ : \"\";\n}\n", "    $arr1 = str_split($word); //create an array of individual\
    \ characters\n    $arr2 = str_split($word); //create another array of individual\
    \ characters\n    \n    $flag = 0; // Flag variable\n    \n    foreach ($arr1\
    \ as $key => $char) {\n        if($flag == 0) { // If no vowel found, set flag\
    \ and continue\n            foreach($arr2 as $char2) {\n                if($char2\
    \ == 'a') { // If first character of array is vowel\n                    $flag\
    \ = 1;\n                    break;\n                } elseif($char2 == 'e') {\
    \ // If second character of array is vowel\n                    $flag = 1;\n \
    \                   break;\n                } elseif($char2 == 'i') { // If third\
    \ character of array is vowel\n                    $flag = 1;\n              \
    \      break;\n                } elseif($char2 == 'o') { // If fourth character\
    \ of array is vowel\n                    $flag = 1;\n                    break;\n\
    \                } elseif($char2 == 'u') { // If fifth character of array is vowel\n\
    \                    $flag = 1;\n                    break;\n                }\
    \ elseif($char2 == 'A') { // If first character of array is vowel\n          \
    \          $flag = 1;\n                    break;\n                } elseif($char2\
    \ == 'E') { // If second character of array is vowel\n                    $flag\
    \ = 1;\n                    break;\n                } elseif($char2 == 'I') {\
    \ // If third character of array is vowel\n                    $flag = 1;\n  \
    \                  break;\n                } elseif($char2 == 'O') { // If fourth\
    \ character of array is vowel\n                    $flag = 1;\n              \
    \      break;\n                } elseif($char2 == 'U') { // If fifth character\
    \ of array is vowel\n                    $flag = 1;\n                    break;\n\
    \                }\n            }\n        }\n        if($flag == 1) { // If a\
    \ vowel found, set flag and continue\n            foreach($arr2 as $char2) {\n\
    \                if($char2 == 'a') { // If first character of array is vowel\n\
    \                    $flag = 2;\n                    break;\n                }\
    \ elseif($char2 == 'e') { // If second character of array is vowel\n         \
    \           $flag = 2;\n                    break;\n                } elseif($char2\
    \ == 'i') { // If third character of array is vowel\n                    $flag\
    \ = 2;\n                    break;\n                } elseif($char2 == 'o') {\
    \ // If fourth character of array is vowel\n                    $flag = 2;\n \
    \                   break;\n                } elseif($char2 == 'u') { // If fifth\
    \ character of array is vowel\n                    $flag = 2;\n              \
    \      break;\n                } elseif($char2 == 'A') { // If first character\
    \ of array is vowel\n                    $flag", "    $vowels = \"AEIOUaeiou\"\
    ;\n    $pos = strlen($word) - 1;\n    do {\n        $pos--;\n        if ($word[$pos]\
    \ === $vowels[$pos]) {\n            return $vowels[$pos];\n        }\n    } while\
    \ ($pos >= 0);\n    return \"\";\n}", "    if (empty($word)) {\n        return\
    \ '';\n    }\n    $arr = [];\n    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ];\n    $arr[\"0\"] = \"a\";\n    $arr[\"1\"] = \"e\";\n    $arr[\"2\"] = \"i\"\
    ;\n    $arr[\"3\"] = \"o\";\n    $arr[\"4\"] = \"u\";\n    $arr[\"5\"] = \"A\"\
    ;\n    $arr[\"6\"] = \"E\";\n    $arr[\"7\"] = \"I\";\n    $arr[\"8\"] = \"O\"\
    ;\n    $arr[\"9\"] = \"U\";\n    $arr[\"a\"] = \"A\";\n    $arr[\"e\"] = \"E\"\
    ;\n    $arr[\"i\"] = \"I\";\n    $arr[\"o\"] = \"O\";\n    $arr[\"u\"] = \"U\"\
    ;\n    $arr[\"A\"] = \"A\";\n    $arr[\"E\"] = \"E\";\n    $arr[\"I\"] = \"I\"\
    ;\n    $arr[\"O\"] = \"O\";\n    $arr[\"U\"] = \"U\";\n    $length = strlen($word);\n\
    \    $endPosition = strrpos($word, \"g\");\n    $startPosition = strrpos($word,\
    \ \"a\");\n    for ($i = 0; $i < $length; $i++) {\n        for ($j = $i + 1; $j\
    \ < $length; $j++) {\n            if ($word[$i] == $word[$j] && $j > 0) {\n  \
    \              if ($endPosition < $startPosition) {\n                    $startPosition\
    \ = $endPosition;\n                    $endPosition = $j;\n                }\n\
    \            }\n        }\n    }\n    for ($i = $endPosition; $i >= $startPosition;\
    \ $i--) {\n        $arr[$i] = $word[$i];\n    }\n    asort($arr);\n    for ($i\
    \ = 0; $i < 5; $i++) {\n        if ($arr[$i] != \"\") {\n            return $arr[$i];\n\
    \        }\n    }\n    return \"\";\n}\n</code>\n<|/ a tags=algorithm,php |>\n\
    <| c |>\nThanks a lot for the solution. I have one more query that what if word\
    \ is \"e\", then it will not return \"e\". It should return empty string because\
    \ it is not vowel. Can you please help for this\n<|/ c |>\n<| c |>\nUpdated the\
    \ code.\n<|/ c |>\n<| a dscore=2 tags=algorithm,php |>\nA short and simple algorithm\
    \ with two loops and single comparison (the worst case):\n<code>\n$vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n\n$string = 'full';\n$found = 0;\n$last = $string[0];\n\
    $pos = strrpo", "    $vowels = \"aeiouy\";\n    $vowel_length = strlen($vowels);\n\
    \    $vowel_found = false;\n    $previous_consonant = 'a';\n    for($i = 0; $i\
    \ < strlen($word); $i++) {\n        if($word[$i] == $previous_consonant) {\n \
    \           $vowel_found = true;\n        }\n        else {\n            if($vowel_found\
    \ == false) {\n                return '';\n            }\n            $previous_consonant\
    \ = $word[$i];\n        }\n    }\n    if($vowel_found == false) {\n        return\
    \ '';\n    }\n    $vowel_length -= 1;\n    for($i = strlen($word) - 1; $i >= 0;\
    \ $i--) {\n        if($word[$i] == $vowels[$vowel_length]) {\n            $vowel_length\
    \ += 1;\n        }\n        else {\n            return $vowels[$vowel_length];\n\
    \        }\n    }\n}\n", "    // Write your code here\n    $vowels = 'aeiou';\n\
    \    $vowels_array = explode($vowels,$word);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_last_index = count($vowels_array) - 1;\n    $vowels_last_value =\
    \ $vowels_array[$vowels_last_index];\n    for ($i = 0; $i < $vowels_count; $i++)\
    \ {\n        if ($vowels_array[$i] == $vowels_last_value) {\n            return\
    \ $vowels_array[$i+1];\n        }\n    }\n    return '';\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
