name: HumanEval_140_fix_spaces
language: php
prompt: "<?php\n// Given a string text, replace all spaces in it with underscores,\
  \ \n// and if a string has more than 2 consecutive spaces, \n// then replace all\
  \ consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n\
  // >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example\
  \ 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\n\
  function fix_spaces($text) {\n"
tests: "function candidate(...$args) {\n    return fix_spaces(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"Example\") !== \"Example\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"Mudasir Hanif \") !== \"Mudasir_Hanif_\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Yellow Yellow\
  \  Dirty  Fellow\") !== \"Yellow_Yellow__Dirty__Fellow\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"Exa   mple\") !== \"Exa-mple\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"   Exa 1 2 2 mple\") !==\
  \ \"-Exa_1_2_2_mple\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $text = preg_replace('/\\s+/', '_', $text);\n  $text = preg_replace('/(\\\
    s)\\1+/', '-', $text);\n  return $text;\n}\n", "  return preg_replace('/\\s+/',\
    \ '_', $text);\n}\n", "    $text = str_replace(' ', '_', $text);\n    $text =\
    \ preg_replace('/(\\s){2,}/', '_', $text);\n    return $text;\n}", "  return preg_replace('/\\\
    s+/', '_', $text);\n}", "  // Replace spaces with underscores\n  $text = preg_replace('/\\\
    s+/', '_', $text);\n\n  // If the string has more than 2 consecutive spaces, \n\
    \  // then replace all consecutive spaces with -\n  $text = preg_replace('/  +/',\
    \ '-', $text);\n\n  return $text;\n}\n", "    return preg_replace('/\\s/', '_',\
    \ $text);\n}", "    $text = preg_replace('/[\\s]+/', '_', $text);\n    return\
    \ preg_replace('/([^\\s])\\s/', '$1_', $text);\n}", "  return preg_replace('/\\\
    s+/', '_', $text);\n}", "    $text = preg_replace('/\\s/', '_', $text);\n    $text\
    \ = preg_replace('/  +/', '-', $text);\n    $text = trim($text, \"_-\");\n   \
    \ return $text;\n}", "    $text = preg_replace('/\\s+/', '_', $text);\n    if\
    \ (preg_match('/\\s/', $text)) {\n        $text = preg_replace('/\\s/', '-', $text);\n\
    \    }\n    return $text;\n}\n", "  return preg_replace('/\\s+/', '_', $text);\n\
    }\n", "  return preg_replace('/\\s+/', '_', $text);\n}\n", "    $text = preg_replace('/\\\
    s+/', '_', $text);\n    $text = preg_replace('/( {2,})/', '_', $text);\n    $text\
    \ = preg_replace('/_+/', '_', $text);\n    return $text;\n}\n", "    return preg_replace('/\\\
    s/', '_', $text);\n}", "  $text = str_replace(' ', '_', $text);\n  $text = preg_replace('/(\\\
    S+\\s+\\S+)(\\s+)(\\s+)/', \"_$1$3\", $text);\n  return $text;\n}", "    return\
    \ preg_replace(\"/[ ]+/\", \" \", preg_replace(\"/(?<=[a-z])[ ]+/\", \"-\", $text));\n\
    }\n", "    return preg_replace(\n        ' {2,}',\n        ' ',\n        preg_replace(\n\
    \            '/\\s+/',\n            '_',\n            preg_replace('/_+/', '_',\
    \ $text)\n        )\n    );\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis seems\
    \ a lot easier to me than anything I came up with, thanks.\n<|/ c |>\n<| c |>\n\
    I didn't actually try the code so I can't say for sure, but I believe it should\
    \ work just fine, if you have any questions about the code please let me know.\n\
    <|/ c |>\n<| a |>\nYou can use the function strtr (string transliteration) to\
    \ translate a string from one character set to another. \nThe following example\
    \ uses strtr to translate any whitespace (including newlines) from one character\
    \ set to another.\n<code>\n<?php\n\n$original = '  test  ';\n$replace = ' ';\n\
    \necho strtr($original, $replace);", "    return preg_replace_callback(\n    \
    \    '/\\s/',\n        function ($m) {\n            $i = strlen($m[0]);\n    \
    \        if ($i === 0) \n                return '_';\n            return $m[0].'-';\n\
    \        },\n        $text\n    );\n}\n", "    return preg_replace('/\\s/', '_',\
    \ $text);\n}\n", "    $text = preg_replace('/\\s+/', '_', $text);\n    return\
    \ preg_replace('/_{2,}/', '-', $text);\n}\n", "    return preg_replace('/[ ]+/',\
    \ '_', $text);\n}\n", "\t$text = preg_replace('/\\s+/', '_', $text);\n\treturn\
    \ preg_replace('/_{2,}/', '_', $text);\n}", "  return preg_replace_callback('/\\\
    s(?=(?: +|$))/', function($m) { return \"_\" . strtolower($m[0]); }, $text);\n\
    }\n", "    $text = preg_replace('/\\s+/', '_', $text);\n    return preg_replace('/\\\
    s/', '-', $text);\n}", "  $text = preg_replace('/\\s+/', '_', $text);\n  if (preg_match('/\
    \ ([^\\s])\\1+/', $text, $matches)) {\n    $text = preg_replace('/ ([^\\s])\\\
    1+/', '_$1', $text);\n  }\n  return $text;\n}", "\t$text = preg_replace('/\\s+/',\
    \ '_', $text);\n\treturn preg_replace('/(^\\s+|\\s+$)/', '', $text);\n}\n", " \
    \   $text = preg_replace('/[\\s]+/', '_', $text);\n    $text = preg_replace('/\\\
    s[\\s]+/', '-', $text);\n    return $text;\n}", "\treturn preg_replace('/\\s/',\
    \ '_', trim($text));\n}\n", "\treturn str_replace( \n\t\tarray( \n\t\t\t'  ',\
    \ ' ', '  ', ' ', '  ',\n\t\t\t'   ', '   ', '   ', '   ', '   ',\n\t\t\t'   \
    \  ', '     ', '     ', '     ', '     ', '     ',\n\t\t\t'     ', '     ', '\
    \     ', '     ', '     ', '     ',\n\t\t),\n\t\tarray(\n\t\t\t'_', '_-', '___',\
    \ '-__', '-_', '_-',\n\t\t\t'___-', '___-', '___-', '___-', '___-',\n\t\t),\n\t\
    \t$text\n\t);\n}\n\t", "    $text = str_replace(' ', '_', $text);\n    $text =\
    \ str_replace(' ', '-', $text);\n    return $text;\n}", "    return preg_replace('/\\\
    s+/', '_', trim($text));\n}", "  return preg_replace(\"/\\s/\",\"_\",preg_replace(\"\
    /\\s/\",\"-\",preg_replace(\"/\\s/\",\"-\",preg_replace(\"/\\s/\",\"-\",$text))));\n\
    }\n", "    $text = str_replace(' ', '_', $text);\n    return preg_replace('/([^_]{2})+/',\
    \ '-', $text);\n}", "  if ($text == \"\") return \"\";\n  $text = str_replace(\"\
    \ \", \"_\", $text);\n  if (strlen($text) > 2 && $text[1] == \" \") $text = substr($text,\
    \ 0, 1);\n  return $text;\n}\n", "    $spaces = preg_match_all(\"/\\s+/\", $text,\
    \ $matches);\n    if ($spaces <= 1) return $text;\n    return preg_replace(\"\
    /(.*) (.*)/\", '${1}_${2}', $text);\n}", "    return preg_replace('/\\s/', '_',\
    \ preg_replace('/  +/', '-', $text));\n}", "  $search = array(\n    \" \",\n \
    \   \"\\t\",\n    \"\\n\",\n    \"\\r\",\n    \"\\f\",\n    \"\\v\",\n    \"\\\
    0\",\n    \"\\1\"\n  );\n  $replace = array(\n    \"_\",\n    \"-\",\n    \"_\"\
    ,\n    \"_\",\n    \"_\",\n    \"-\",\n    \"-\"\n  );\n  $text = preg_replace(\"\
    /[ \\t\\n\\r\\f\\v\\0\\1]/\",\"\",$text);\n  $text = str_replace($search,$replace,$text);\n\
    \  return $text;\n}", "  // Remove extra whitespace\n  $text = preg_replace('/\
    \ +(?= )/ ', ' ', trim($text));\n  \n  // Replace consecutive spaces with dash\n\
    \  $text = preg_replace('/ {2,}/', '-', $text);\n  \n  return $text;\n}", "  \
    \  $text = str_replace(' ', '_', $text);\n    $text = preg_replace('/[ ]{2,}/',\
    \ '-', $text);\n    return $text;\n}\n", "  $text = str_replace(\" \", \"_\",\
    \ $text);\n  $text = preg_replace('/([-]{2,})/', '_$1', $text);\n  return $text;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nThis is probably an easier approach:\n\
    <code>\n<?php\n\n$string = '  asdasdasd  asdasdasdasdasdasdasdasd asdasdasd asdasdasd\
    \ asdasdasd';\n\n$string = preg_replace('/\\s{2,}/', '_', $string);\n\necho $string;\n",
  "    if (strlen($text) == 0) return $text;\n    $spaces = preg_split('/\\s+/', $text);\n\
    \    for ($i = 0; $i < count($spaces); $i++) {\n        if ($spaces[$i] == ' ')\
    \ {\n            $spaces[$i] = '_';\n        }\n    }\n    return implode('',\
    \ $spaces);\n}\n", "    $text = preg_replace('/\\s+/', '_', $text);\n    if (preg_match_all('/\\\
    s{2,}/', $text)) {\n        $text = preg_replace('/\\s{2,}/', '-', $text);\n \
    \   }\n    return $text;\n}\n", "    $spaces = preg_replace('/ +', '_', $text);\n\
    \    if (preg_match_all('/( )+/', $spaces, $matches))\n        $spaces = str_replace($matches[0],\
    \ '-', $spaces);\n    return $spaces;\n}\n</code>\n<|/ a tags=python,php,regex\
    \ |>\n<| c |>\nThis is almost exactly what I need, but I need some sort of function\
    \ I can pass in `$string` and `$count`. So if I passed in `Example 3` with 2 spaces,\
    \ it should give me `Example-3`.\n<|/ c |>\n<| c |>\nI just tried it, but it's\
    \ not giving me the correct result for 3 spaces. I gave it `Example 3` and it\
    \ returned `Example_3-3`. Am I missing something?\n<|/ c |>\n<| c |>\nI gave it\
    \ `Example 3` and it gave me `Example-3`. I also tested it with `Example 3 ` and\
    \ it gave me `Example_3`. Perhaps I'm missing something?\n<|/ c |>\n<| c |>\n\
    I tested `Example 3` again. Notice how it only replaces 2 spaces with `-`, not\
    \ 3. Could it be the fact that it's looking for the first space in each line and\
    \ ignoring the others? The `Example 3` should give `Example-3` because that first\
    \ space is `Example`.\n<|/ c |>\n<| c |>\nI just tested that and it works perfectly.\
    \ Thank you for helping me with this!\n<|/ c |>\n<| a dscore=2 tags=python,php,regex\
    \ |>\nHere's a quick script I wrote in PHP which you can use.  It uses a negative\
    \ look ahead to look for spaces after the 3rd character in the string and removes\
    \ them.\n<code>\n<?php\n\n$string = \"   Example 3   \";\n\n$result = preg_replace('/(?<!\\\
    s)(\\s){3}(?!\\s)/', '', $string);\n\necho \"$result\\n\";\n", "    $spaces =\
    \ preg_replace('/\\s+/', '_', $text);\n    return trim(preg_replace('/\\s/', '-',\
    \ $spaces));\n}\n", "    $text = str_replace(' ', '_', $text);\n    $text = preg_replace('/\
    \ ([^ ]+) ( +)(.+)/', '$1-$3', $text);\n    return preg_replace('/-+/', '_', $text);\n\
    }\n", "  return preg_replace('/\\s/u', '_', preg_replace('/ (\\s)+/u', '-', $text));\n\
    }\n", "    return preg_replace(\"/\\s/\", \"-\", preg_replace(\"/\\s/\", \"-\"\
    , $text));\n}", "  // Escape HTML special characters\n  $text = htmlentities($text,\
    \ ENT_QUOTES, 'UTF-8');\n\n  // Find any spaces that are not followed or preceded\
    \ by another space\n  $text = preg_replace('/^ +/m', '', $text);\n  $text = preg_replace('/(\
    \ +[^ ]+)$/m', '$1', $text);\n\n  // If a line has two spaces, then replace all\
    \ spaces with -\n  $text = preg_replace('/^( *) ([^ ]+) $/m', '$1$2', $text);\n\
    \n  // If a line has more than two spaces, replace all spaces with -\n  $text\
    \ = preg_replace('/( *)(.*[^ ])( +[^ ]+)?$/', '$1$2-$3$4', $text);\n\n  // If\
    \ an line has less than two spaces, replace all spaces with _\n  $text = preg_replace('/(\
    \ *)(.*[^ ])$/', '$1$2_', $text);\n\n  return $text;\n}", "    if (strpos($text,\
    \ ' ') === false) {\n        return $text;\n    }\n    $text = preg_replace('/[\
    \ ]+/', '_', $text);\n    $text = preg_replace('/( *)\\1{2,}/', '- ', $text);\n\
    \    return $text;\n}\n", "    return preg_replace('/\\s/', '-', $text);\n}\n",
  "    $text = preg_replace('/\\s/', '_', $text);\n    $text = preg_replace('/\\s+/',\
    \ '-', $text);\n    return $text;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nI have found this function in one of my projects, it works on my case:\n\
    <code>", "    return preg_replace(\"/\\s/\", \"-\", preg_replace(\"/(?<=\\s)\\\
    s/\", \"_\", $text));\n}\n", "\t$text = preg_replace(\"/\\s/\", \"_\", $text);\n\
    \t$text = preg_replace(\"/\\s/\", \"-\", $text);\n\treturn $text;\n}\n", "   \
    \ return preg_replace('/\\s+/', '_', $text);\n}", "    $text = preg_replace('/\\\
    s+/', '_', $text);\n    $text = preg_replace('/ (\\s)+/', '_', $text);\n    return\
    \ preg_replace('/_{2,}/', '_', $text);\n}", "    // replace all spaces with underscores\n\
    \    $text = preg_replace('/\\s+/', '_', $text);\n    // if more than 2 consecutive\
    \ spaces, \n    // then replace all consecutive spaces with \"-\"\n    if (preg_match_all('/\\\
    s(?=\\s)/', $text, $matches)) {\n        $text = preg_replace('/(?<=[\\s])\\s/',\
    \ '-', $text);\n    }\n    return $text;\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=php,preg-replace,regex |>\nYou can use the following regex to replace the\
    \ spaces with underscores but not with spaces followed by an underscore.\n<code>\n\
    $str = preg_replace('~(?<! _ )~', '_', $str);\n</code>\nThe (?<! _ )is a negative\
    \ lookbehind that fails the match if there is an underscore immediately preceded\
    \ with a space.\nSee the regex demo\n<|/ a dscore=2 |>\n<| c |>\n`'~(?<! _ )~'`\
    \ matches `___` also.\n<|/ c |>\n<| c |>\nThat is correct. I have updated the\
    \ solution with another solution that should work correctly in that scenario.\n\
    <|/ c |>\n<| a dscore=2 |>\nJust remove the spaces if its preceded by a _ character.\n\
    <code>\npreg_replace('/(?<!_) /', '_', $str);\n</code>\n<|/ a tags=php,preg-replace,regex\
    \ |>\n<| c |>\n`'~(?<! _ )~'` matches `___` also.\n<|/ c |>\n<| a dscore=0 |>\n\
    You might use strtr if you like to replace the spaces and underscores with hyphens:\n\
    <code>\n$str = 'abc   def  ghi     jkl    ';\necho strtr($str, array(\n    ' '\
    \ => '-',\n    '_' => '-'\n));\n</code>\nDemo\n<|/ a tags=php,preg-replace,regex\
    \ |>\n<| a tags=php,preg-replace,regex |>\nI used the code below to remove spaces\
    \ between _:\n<code>\n$string = preg_replace('~(?<!_)_+~', '_', $string);\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,preg-replace,regex |>\n<code>\n<?php\n$string\
    \ = 'abc_def ghi_jkl';\n", "  return preg_replace(\"/\\s+/\", \"_\", $text);\n\
    }", "    $text = preg_replace('/\\s/', '_', $text);\n    $text = preg_replace('/\\\
    s\\s/', '-', $text);\n    return $text;\n}", "    $text = str_replace(\" \", \"\
    _\", $text);\n    $text = preg_replace(\"/( ){2,}/\", \"_\", $text);\n    return\
    \ $text;\n}", "  $text = str_replace(' ', '_', $text);\n  $text = preg_replace('/(\
    \ {2,})/', '_', $text);\n  return $text;\n}", "  return preg_replace('/\\s/',\
    \ '_', preg_replace('/(\\s){2,}/', '-', $text));\n}\n", "  $text = preg_replace(\"\
    /[ \\t]+/\", \"_\", $text);\n  $text = preg_replace(\"/[\\s]{2,}/\", \"-\", $text);\n\
    \  return $text;\n}\n", "    $text = preg_replace('/\\s+/', '_', $text);\n   \
    \ $text = preg_replace('/\\s/', '_', $text);\n    $text = preg_replace('/_{2,}/',\
    \ '_', $text);\n    $text = trim($text);\n    return $text;\n}\n", "\t$text =\
    \ preg_replace(\"/\\s/\", \"_\", $text);\n\t$text = preg_replace(\"/\\s\\s/\"\
    , \"-\", $text);\n\treturn $text;\n}\n", "    $text = preg_replace('/\\s+/', '_',\
    \ $text);\n    $text = preg_replace('/\\s/', '-', $text);\n    return $text;\n\
    }", "  return preg_replace('/\\s+/', '_', $text);\n}\n", "    return preg_replace_callback('/(^\
    \ *|(?<=\\s)) +/', function($m) {\n        return str_replace(\" \", \"_\", $m[0]);\n\
    \    }, $text);\n}\n", "    $spaces1 = $spaces2 = $dashes = \"\";\n    $spaces\
    \ = \"  \"; // $spaces1 and $spaces2 are both space chars\n    $dashes = \"-\"\
    ; // $dashes is the dash char\n    $text = str_replace($spaces, $dashes, $text);\n\
    \    $spaces = \"  \"; // $spaces is the space char again\n    $len = strlen($text);\n\
    \    for ($n = 0; $n < $len; $n++) {\n        $c = substr($text, $n, 1);\n   \
    \     if ($spaces === $c) {\n            $spaces2++;\n        } else if ($dashes\
    \ === $c) {\n            $dashes++;\n        } else {\n            $spaces1++;\n\
    \            $spaces2 = $dashes = \"\";\n        }\n    }\n    return $spaces1\
    \ . \"_\" . $spaces2 . \"-\" . $dashes;\n}", "    $text = str_replace(array('\
    \ ', \"\\t\"), array('_', \"-\"), $text);\n    $text = preg_replace('/[ ]{2,}/',\
    \ '_', $text);\n    return $text;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nWorks\
    \ perfectly and without errors! Thank you!\n<|/ c |>\n<| c |>\nWorks perfectly.\
    \ Thank you!\n<|/ c |>\n<| c |>\nWhat if I need to fix spaces before a dot, for\
    \ example \".\" becomes \".\" how to make it?\n<|/ c |>\n<| c |>\n`$text = str_replace('.',\
    \ \".\", $text);`\n<|/ c |>\n<| c |>\nGreat! Thank you very much.\n<|/ c |>\n\
    <| a |>\nI made a little helper function that replaces multiple spaces by single\
    \ spaces and trims the string:\n<code>", "    return preg_replace('/\\s+/', '_',\
    \ $text);\n}", "\t$text = str_replace(' ', '_', $text);\n\t$text = preg_replace('/\
    \  +(?= )/', '_', $text);\n\treturn $text;\n}\n", "  $text = preg_replace('/\\\
    s+/', '_', $text);\n  $text = preg_replace('/([^ ]) +/', \"$1\", $text);\n  return\
    \ $text;\n}\n", "  $text = preg_replace('/\\s+/', '_', $text);\n  $text = preg_replace('/\
    \  +/', '-', $text);\n  return $text;\n}\n", "    return preg_replace('/\\s+/',\
    \ '_', trim($text));\n}", "  $spaces = preg_split('/ +/', $text);\n  if (count($spaces)\
    \ > 1) {\n    for ($i = 1; $i < count($spaces); $i++) {\n      if ($spaces[$i\
    \ - 1] != $spaces[$i]) {\n        $spaces[$i] = '-';\n      }\n    }\n    return\
    \ implode(' ', $spaces);\n  } else {\n    return $text;\n  }\n}", "    return\
    \ preg_replace('/\\s+/', '_', $text);\n}\n", "  $text = str_replace(\" \", \"\
    _\", $text);\n  $text = preg_replace(\"/([_]{2,})/\", \"_\", $text);\n  return\
    \ $text;\n}\n", "    $text = preg_replace('/ +/', '_', $text);\n    $text = preg_replace('/[\
    \ ]{2,}/', '-', $text);\n    return $text;\n}\n", "  \n    $text = str_replace('\
    \ ','_',$text);\n    $text = str_replace('  ','_',$text);\n    if (preg_match_all('/(\\\
    s)\\1{2,}/', $text, $matches)) {\n        foreach ($matches[0] as $match) {\n\
    \            $text = str_replace($match,'_',$text);\n        }\n    }\n\n    return\
    \ $text;\n}", "  return preg_replace('/\\s/', '_', $text);\n}\n", "    return\
    \ preg_replace('/\\s+/', '_', $text);\n}", "  $text = preg_replace(\"/[[:space:]]+/\"\
    , \"_\", $text);\n  if (strlen($text) > 2) {\n    $text = preg_replace(\"/[\\\
    s]+/\", \"-\", $text);\n  }\n  return $text;\n}\n", "   $text = preg_replace(\"\
    /\\s/\", \"_\", $text);\n   $text = preg_replace(\"/( )+/\", \"_\", $text);\n\
    \   return $text;\n}\n", "  global $sentence_delimiters;\n  if (count($sentence_delimiters)\
    \ == 0)\n    return $text;\n  $replaced = preg_replace(\n    '/(' . implode('|',\
    \ $sentence_delimiters) . ')/',\n    '_$1',\n    $text);\n  $replaced = preg_replace(\n\
    \    '/[ ]{2,}/',\n    '_',\n    $replaced);\n  return preg_replace(\n    '/[\
    \ ]+/',\n    '_',\n    $replaced);\n}", "    $text = preg_replace('/\\s+/', '_',\
    \ $text);\n    $text = preg_replace('/(\\s+)\\1/', '_$1', $text);\n    return\
    \ $text;\n}\n", "    $text = preg_replace('/(\\s\\s+)/', '_', $text);\n    $text\
    \ = preg_replace('/(\\s\\s)/', '_-', $text);\n    return $text;\n}\n", "    return\
    \ preg_replace('/\\s+/', '_', preg_replace('/  +/', '-', $text));\n}", "    return\
    \ preg_replace_callback('/(^| )( )([^ ]*)($| )/i', \n            create_function(\n\
    \                '$matches',\n                'return \"-\".$matches[2].\"_\"\
    .$matches[3];'\n            ), $text);\n}", "    $text = str_replace(' ', '_',\
    \ $text);\n    $text = preg_replace('/ ([^ ]+) /', \" $1\", $text);\n    $text\
    \ = preg_replace('/ ([^ ]+) /', \" _$1\", $text);\n    return $text;\n}\n", "\t\
    $text = preg_replace('~[ ]+~', '-', $text);\n\t$text = preg_replace('~[-]+~',\
    \ '-', $text);\n\treturn $text;\n}\n", "    $text = preg_replace('/\\s+/', '_',\
    \ $text);\n    $text = preg_replace('/( {2,})/', '_', $text);\n    return $text;\n\
    }\n", "    return preg_replace('/\\s+/', '_', $text);\n}\n", "    $search = array(\"\
    \ \");\n    $replace = array(\"_\");\n    return preg_replace($search, $replace,\
    \ $text);\n}", "    // Convert all spaces to _ (underscore) \n    $text = str_replace(\"\
    \ \", \"_\", $text);\n    \n    // If the text has more than 2 consecutive spaces,\
    \ \n    // then replace all consecutive spaces with - \n    $text = preg_replace(\"\
    /( ){2,}/\", \"_\", $text);\n    \n    return $text;\n}", "    $regex = '#[ \\\
    t]+#';\n    $text = preg_replace($regex, '_', $text);\n    $text = preg_replace($regex,\
    \ \"_\", $text);\n    if (strlen($text) > 2 && strpos($text, ' ') === false) {\n\
    \        $text = preg_replace($regex, \"-\", $text);\n    }\n    return $text;\n\
    }", "    return preg_replace('/\\s+/', '_', $text);\n}\n", "  $text = preg_replace('/\\\
    s/', '_', $text);\n  $text = preg_replace('/[\\s]{2,}/', '-', $text);\n  return\
    \ $text;\n}\n", "    return preg_replace('/\\s/', '_', $text);\n}\n", "    $fixed\
    \ = \"\";\n    $spaced = preg_replace('/\\s+/', '_', $text);\n    $split  = preg_split('/[\
    \ ]{2,}/', $spaced);\n    foreach ($split as $key => $value) {\n        $fixed\
    \ .= ucfirst($value) . \"_\";\n    }\n    return $fixed;\n}\n", "    $text = preg_replace('/(\\\
    s+)/', '_', $text);\n    $text = preg_replace('/(\\s+)(\\s)/', '_$1', $text);\n\
    \    return preg_replace('/(\\s+)(\\s)(\\s+)/', '_$1$2', $text);\n}", "    $text\
    \ = trim($text);\n    $text = preg_replace(\"/[ \\t]+/\", \"_\", $text);\n   \
    \ $text = preg_replace(\"/[ ]+/\", \"-\", $text);\n    return $text;\n}", "  if\
    \ (trim($text) == \"\") {\n    return $text;\n  }\n  return preg_replace('/\\\
    s+/', '_', $text);\n}\n", "  $text = preg_replace('/(^| )( )/', '$1_', $text);\n\
    \  $text = preg_replace('/( |$)/', '_', $text);\n  $text = preg_replace('/[ ]{2,}/',\
    \ '_', $text);\n  return $text;\n}", "  $text = preg_replace('/\\s/', '_', $text);\n\
    \  return preg_replace('/([^\\s])\\s/', '$1', $text);\n}\n", "  $spaces = explode(\"\
    \ \", $text);\n  $spaces = array_map('ucfirst', $spaces);\n  $spaces = implode(\"\
    \ \", $spaces);\n  return ($spaces !== $text) ? $spaces : '_';\n}\n", "    $text\
    \ = preg_replace('/\\s+/', '_', $text);\n    $text = preg_replace('/(_){2,}/',\
    \ '_', $text);\n    $text = preg_replace('/^(_)/', '', $text);\n    return $text;\n\
    }", "    $text = preg_replace(\"/\\s/\", \"_\", $text);\n    $text = preg_replace(\"\
    /(?<!\\s)\\s/\", \"-\", $text);\n    return $text;\n}\n", "    // Replace all\
    \ spaces with underscores\n    $text = str_replace(' ', '_', $text);\n\n    //\
    \ Replace consecutive spaces with -\n    $text = preg_replace('/  +/', '-', $text);\n\
    \n    return $text;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis is what I was\
    \ looking for, just because you made it clear and simple. Thanks\n<|/ c |>\n<|\
    \ c |>\nThis is perfect! Just what I needed! :)\n<|/ c |>\n<| c |>\nI used this\
    \ to replace all non-breaking spaces in the text to `-`: `preg_replace('/\\&nbsp\\\
    ;/', '-', $string);`\n<|/ c |>\n<| c |>\nThis answer works great! But how would\
    \ you convert \"Example\" to \"Example\"?\n<|/ c |>\n<| c |>\nThis answer works\
    \ great for me, but what if I want to convert \"Example 1\" or \"Example 2\" to\
    \ \"Example-1\" or \"Example-2\"?\n<|/ c |>\n<| a tags=html,php,regex |>\nI would\
    \ recommend using the Tidy HTML library for this.\nFor just this one particular\
    \ case, you could use it like this:\n<code>", "\treturn preg_replace(array('/\\\
    s+/', '/  +/'), array('_', '_'), $text);\n}", "    return preg_replace('/ +/',\
    \ '_', $text);\n}\n</code>\nI hope this helps.\n<|/ a dscore=2 tags=string,php,trim\
    \ |>\n<| a tags=string,php,trim |>\n<code>\n<?php\n$string = \"  My name  is \
    \ Abhishek Kumar\";\n$string2 = trim(preg_replace('/ +/', '-', \" $string\"));\n\
    echo $string2;", "    return preg_replace('/(?<=^|[\\n ])\\s+/', '_', $text);\n\
    }", "  return preg_replace('/\\s+/', '_', $text);\n}\n", "  $text = str_replace(\"\
    \ \", \"_\", $text);\n  $text = preg_replace('{[ ]{2,}}', '_', $text);\n  return\
    \ $text;\n}", "  return preg_replace('/\\s(?=\\s)/', '_', $text);\n}\n", "  $text\
    \ = str_replace(' ', '_', $text);\n  return preg_replace('/(_+)$/', '_', $text);\n\
    }", "    return preg_replace_callback(\n        '/\\s+/',\n        function ($m)\
    \ {\n            return str_repeat('_', $m[0]);\n        },\n        $text\n \
    \   );\n}\n", "  $text = preg_replace(\" {2,}\", \" _\", $text);\n  return preg_replace(\"\
    \  +\", \"_\", $text);\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis is perfect.\
    \ Thank you!\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$output = preg_replace(\n'/(^[^\\\
    s]+\\s+)/', \n'$1', \n$input\n);\n</code>\nThis regex will remove all spaces surrounding\
    \ any character other than a whitespace character.\n<|/ a tags=regex,php |>\n\
    <| c |>\nYour regex is missing the second argument, the replacement string. Plus,\
    \ it will fail to remove multiple spaces in a row that are consecutive.\n<|/ c\
    \ |>\n<| c |>\nAh yes, you are correct, I did not have time to test my code before\
    \ I answered the question.  I will update the answer, thank you.\n<|/ c |>\n<|\
    \ c |>\nIt would also fail to remove multiple spaces in a row that are NOT consecutive.\n\
    <|/ c |>\n<| a |>\n<code>\n$result = preg_replace('/\\s/', '_', $input);\n</code>\n\
    <|/ a dscore=2 tags=regex,php |>\n<| c |>\nThis will remove any number of spaces.\
    \ I guess that's a good thing, but it will not allow consecutive spaces.\n<|/\
    \ c |>\n<| a tags=regex,php |>\n<code>\n$output = preg_replace('/\\s/', '_', $input);\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=regex,php |>\nHere's my attempt:\n<code>\n\
    preg_replace(\" {2,}\", \" _\", $input);\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This won't allow consecutive spaces.\n<|/ c |>\n<| a |>\n<code>\n$new = preg_replace('/\\\
    s/', '_', $input);\n</code>\n<|/ a tags=regex,php dscore=2 |>\n<| a tags=regex,php\
    \ |>\n<code>\n<?php\n\n$newstring = preg_replace(\"/[\\s\\n\\r]+/\", ' ', $string);\n",
  "    $text = str_replace(' ', '_', $text);\n    if (strlen($text) > 2 && preg_match('/\
    \ ([^ ]*) /', $text, $match))\n        $text = $match[1];\n    return $text;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nYour fix for consecutive spaces was wrong.\
    \ I just posted an answer that correctly accounts for consecutive spaces.\n<|/\
    \ c |>\n<| a |>\nThis seems to work\n<code>\n<?php\n$string = \"   some string\"\
    ;\necho preg_replace('~^\\s*(\\S+)\\s*(\\S+)\\s*$~m', '$1_$2', $string);\n</code>\n\
    <|/ a tags=php,regex dscore=1 |>\n<| a |>\nTry this one:\n<code>\n<?php\n$string\
    \ = \" Example    1 Example 2\";\n\n$pattern = \"/^( *)(.+?)( *)(.+?)( *)(.+?)(\
    \ *)(.+?)( *)$/i\";\n$replacement = \"${1}$2$4$5$6$7$8\";\n\necho preg_replace($pattern,\
    \ $replacement, $string);\n</code>\n<|/ a tags=php,regex dscore=1 |>\n<| a dscore=1\
    \ |>\nA solution using preg_replace_callback and a callback that takes two groups\
    \ as input and replaces the first with _<space>, the second with $<space>:\n<code>",
  "  return preg_replace('/[\\s]+/', '_', $text);\n}\n", "  $text = trim($text);\n\
    \  $text = preg_replace('/\\s\\s+/', '_', $text);\n  if (strlen($text) > 2) {\n\
    \    $text = preg_replace('/\\s/', '-', $text);\n  }\n  return $text;\n}", " \
    \   $text = preg_replace('/\\s/', '_', $text);\n    $text = preg_replace('/  +/',\
    \ '-', $text);\n    return $text;\n}\n", "  $text = trim($text);\n  $text = str_replace('\
    \ ', '_', $text);\n  if (strlen($text) > 2 && preg_match('/\\s/', $text)) {\n\
    \    $text = preg_replace('/\\s/', '-', $text);\n  }\n  return $text;\n}\n", "\t\
    $text = str_replace(' ', '_', $text);\n\tif (preg_match('!\\s+!', $text)) {\n\t\
    \t$text = preg_replace('!\\s+!', '-', $text);\n\t}\n\treturn $text;\n}\n", " \
    \ $text = preg_replace('/\\s/', '_', $text);\n  $text = preg_replace('/\\s\\s/',\
    \ '-', $text);\n  return $text;\n}\n", "    $text = preg_replace('/\\s+/', '_',\
    \ $text);\n    $text = preg_replace('/(?<=^|\\s)\\s/', '_', $text);\n    return\
    \ $text;\n}", "    return preg_replace('/(^\\s*)|(\\s*$)/', '_', trim($text));\n\
    }\n", "    $text = preg_replace('/[ \\t]+/', '_', $text);\n    return preg_replace('/_{2,}/',\
    \ '_', $text);\n}\n", "    $text = trim($text);\n    $text = str_replace(' ',\
    \ '_', $text);\n    if (preg_match('/^(.+)( +)$/', $text, $matches)) {\n     \
    \   $text = preg_replace('/(^ +)|( +$)/', $matches[1] . '-' . $matches[2], $text);\n\
    \    }\n    return $text;\n}", "  \n  // Return null if the string is null or\
    \ empty\n  if ( ! $text) {\n    return null;\n  }\n  \n  // Replace all spaces\
    \ with underscores\n  $text = str_replace( ' ', '_', $text);\n  \n  // If the\
    \ string has more than two consecutive spaces, \n  // then replace all consecutive\
    \ spaces with -\n  $text = preg_replace( '/( +)( +)/', \"-\", $text);\n  \n  return\
    \ $text;\n}\n", "  $text = preg_replace('/ +/', '_', $text);\n  $text = preg_replace('/\
    \ ([^ ]+)( [^ ]+)/', '$1_$2', $text);\n  return preg_replace('/_+/', '_', $text);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis looks great! Thanks! I'll give it a try :)\n\
    <|/ c |>\n<| c |>\nWow, this was actually quite a lot simpler than I thought it\
    \ would be.\n<|/ c |>\n<| a dscore=2 tags=php,javascript,jquery,regex |>\n<code>\n\
    var input = \"  Hello  World!\";\nvar output = input.replace(/^[ ]+|[ ]+$|[ ]+/g,\
    \ \"_\");\n\nalert(output);</code>\n<|/ a |>\n<| a dscore=1 |>\nYou can use this\
    \ pattern:\n<code>\n/^[ ]+|[ ]+$/g\n</code>\nAnd replace it with:\n<code>\n_\n\
    </code>\nLive demo\n<|/ a tags=php,javascript,jquery,regex |>\n<| a |>\nYou can\
    \ use the following regex to replace the spaces with underscores:\n<code>\n /^[\
    \ ]+|[ ]+$|[ ]+/\n</code>\nAnd you can use the following replace with _:\n<code>\n\
    \ $1_$2_$3_$4_$5_$6_$7_$8_$9_$10_$11_$12_$13_$14_$15_$16_$17_$18_$19_$20_$21_$22_$23_$24_$25_$26_$27_$28_$29_$30_$31_$32_$33_$34_$35_$36_$37_$38_$39_$40_$41_$42_$43_$44_$45_$46_$47_$48_$49_$50_$51_$52_$53_$54_$55_$56_$57_$58_$59_$60_$61_$62_$63_$64_$65_$66_$67_$68_$69_$70_$71_$72_$73_$74_$75_$76_$77_$78_$79_$80_$81_$82_$83_$84_$85_$86_$87_$88_$89_$90_$91_$",
  "    // First replace all consecutive spaces with \"_\"\n    $text = preg_replace(\"\
    /[  ]+/\", \"_\", $text);\n    \n    // Then replace all spaces with \"_\"\n \
    \   $text = preg_replace(\"/[ ]+/\", \"_\", $text);\n    \n    return $text;\n\
    }", "    $text = preg_replace('/\\s/', '_', $text);\n    return preg_replace('/\\\
    s/', '-', $text);\n}\n", "    $text = preg_replace('/\\s+/', '_', $text);\n  \
    \  $text = preg_replace('/\\s+/', '_', $text);\n    if (strlen($text) > 2) {\n\
    \        $text = preg_replace('/_+/', '_', $text);\n    }\n    return $text;\n\
    }\n", "  $fixed_text = $text;\n  $space_count = substr_count($text, \" \");\n\
    \  if($space_count > 1) {\n    $fixed_text = preg_replace(\"/(\\s{2,})/\", \"\
    _\", $fixed_text);\n  }\n  return $fixed_text;\n}\n", "    $text = str_replace('\
    \ ', '_', $text);\n    $text = preg_replace('/  +/', \" \", $text);\n    $text\
    \ = str_replace('  ', '-', $text);\n    return $text;\n}", "    $result = $text;\n\
    \    $space_pos = strpos($result, ' ');\n    while ($space_pos > 0) {\n      \
    \  $result = substr($result, 0, $space_pos) . \n                  substr($result,\
    \ $space_pos + 1);\n        $space_pos = strpos($result, ' ');\n    }\n    if\
    \ (strlen($result) > 2) {\n        $result = substr($result, 0, -1) . \n     \
    \             substr($result, -1, 1);\n    }\n    return $result;\n}", "    $text\
    \ = str_replace(' ', '_', $text);\n    $text = preg_replace('/\\s{2,}/', '_',\
    \ $text);\n    return $text;\n}", "    return preg_replace('/\\s/', '_', $text);\n\
    }", "    $text = preg_replace(\"/([^\\\\s\\\\xa0]+)\\\\s{2,}/\", \"$1_\", $text);\n\
    \    $text = preg_replace(\"/\\\\s{2,}/\", \"_\", $text);\n    return $text;\n\
    }\n", "    $text = str_replace(' ', '_', $text);\n    if (preg_match_all(\"/^(\\\
    s)\\1*/\", $text, $matches)) {\n        $text = preg_replace(\"/\\s/\", \"-\"\
    , $text);\n        $text = preg_replace(\"/\\s/\", \"-\", $text);\n    }\n   \
    \ return $text;\n}\n", "    $text = preg_replace(\"/\\s+/\", \"_\", $text);\n\
    \    if (strlen($text) > 2 && substr_count($text, \" \") > 2) {\n        $text\
    \ = preg_replace(\"/\\s/\", \"-\", $text);\n    }\n    return $text;\n}", "\t\
    $text = preg_replace('/\\s/', '_', $text);\n\tif (strlen($text) > 2 && preg_match('/\\\
    s{2,}/', $text)) {\n\t\t$text = preg_replace('/\\s+/', '-', $text);\n\t}\n\treturn\
    \ $text;\n}\n", "  return preg_replace('/\\s/', '_', preg_replace('/\\s+/', '-',\
    \ $text));\n}", "    $spaces = preg_match_all('/\\s+/', $text, $spaces);\n   \
    \ if ($spaces) {\n        $text = preg_replace('/\\s+/', '_', $text);\n    }\n\
    \    \n    if (strlen($text) > 2) {\n        $text = preg_replace('/ (\\s)+/',\
    \ '_', $text);\n    }\n\n    return $text;\n}\n", "    $text = preg_replace(\"\
    /\\s+/\", \"_\", $text);\n    $text = preg_replace(\"/( {2,})/\", \"_\", $text);\n\
    \    return $text;\n}", "    $text = preg_replace('/\\s+/', '_', $text);\n   \
    \ $text = preg_replace('/\\s+/', '-', $text);\n    $text = trim($text);\n    return\
    \ $text;\n}\n", "  $text = str_replace(' ', '_', $text);\n  if (strpos($text,\
    \ ' ') > 1) {\n    $text = preg_replace('/([-]{2})/', '_', $text);\n  }\n  return\
    \ $text;\n}", "  $text = preg_replace('/\\s/', '_', $text);\n  $text = preg_replace('/\
    \  +/', '-', $text);\n  return $text;\n}", "    return preg_replace('/\\s/', '_',\
    \ $text);\n}\n", "  return preg_replace('/\\s/', '-', preg_replace('/\\s+/', '_',\
    \ $text));\n}\n", "  $text = preg_replace('/ +/', '_', $text);\n  $text = preg_replace('/_{2,}/',\
    \ '_', $text);\n  $text = trim($text, '_');\n  return $text;\n}\n</code>\n<|/\
    \ a tags=wordpress,php,css |>\n<| a |>\nI used the above answer, but found I had\
    \ to wrap it in a function as it was only working in some situations not others.\
    \ Here is my revised function:\n<code>", "    $text = preg_replace('/\\s+/', '_',\
    \ $text);\n    $text = preg_replace('/\\s/', '-', $text);\n    return $text;\n\
    }\n", "    $text = preg_replace('/\\s+/', '_', $text);\n    return preg_replace('/\\\
    s+/', '-', $text);\n}", "    $text = preg_replace('/\\s/', '_', $text);\n    $text\
    \ = preg_replace('/[ ]{2,}/', '-', $text);\n    return $text;\n}", "  return preg_replace(array('/^\\\
    s+/', '/\\s+$/'), array('_', '_'), $text);\n}\n", "  return preg_replace('/\\\
    s/', '_', $text);\n}\n", "  $text = preg_replace('/\\s/', '_', $text);\n  $text\
    \ = preg_replace('/\\s/', '-', $text);\n  if (strlen($text) > 2 && strpos($text,\
    \ '-') !== FALSE) {\n    $text = preg_replace('/-+/', '-', $text);\n  }\n  return\
    \ $text;\n}\n", "    $text = str_replace(\" \", \"_\", $text);\n    $text = preg_replace('/(\\\
    s)+/', \"-\", $text);\n    return $text;\n}\n", "  return preg_replace_callback('/(\\\
    s+)/', function() {\n    return preg_replace('/(\\s+)/', '-', str_repeat('-',\
    \ func_get_arg(0)));\n  }, $text);\n}", "  return preg_replace(\"/(^\\s+|\\s+$)/\"\
    , \"\", str_replace(\"\\n\", \" \", preg_replace(\"/(\\s)+/\", \"-\", $text)));\n\
    }", "\t$text = preg_replace('/\\s+/', '_', $text);\n\treturn preg_replace('/[\
    \ ]{2,}/', '_', $text);\n}\n", "  return preg_replace('/\\s/', '_', preg_replace('/(\
    \ {2,})/', '-', $text));\n}", "    $spaces = preg_replace('/\\s/', '-', $text);\n\
    \    return preg_replace('/(-{2,})/', '-', $spaces);\n}", "  $text = preg_replace('/\\\
    s+/', '_', $text);\n  $text = preg_replace('/\\s+/', '-', $text);\n  return $text;\n\
    }\n", "    $text = preg_replace(\"/\\s+/\", \"_\", $text);\n    $text = preg_replace(\"\
    /\\s/\", \"-\", $text);\n    return $text;\n}\n", "    $text = preg_replace('/[\\\
    s\\xa0]+/', '_', $text);\n    if (preg_match('/\\s{2,}/', $text)) {\n        $text\
    \ = preg_replace('/_+/', '-', $text);\n    }\n    return $text;\n}\n</code>\n\
    This would replace all spaces with a dash (-), if there are more than 2 consecutive\
    \ spaces.\n<|/ a tags=regex,preg-replace,preg-match,php |>\n<| c |>\nOkay, the\
    \ string could have multiple spaces between two words. I assume I could use [\\\
    s\\xC0]+ to capture all spaces. Would this regex do what I want if that is correct?\
    \ I updated my question to show an example\n<|/ c |>\n<| c |>\nIt could have 2\
    \ or more consecutive spaces **or** any number of spaces. I'll update my answer\
    \ to reflect this.\n<|/ c |>\n<| c |>\nOkay, I updated my answer again. This time,\
    \ I realized that there was a better solution.\n<|/ c |>\n<| c |>\nAwesome! I\
    \ wish I could give another +1 but I'm out of votes :P Thanks so much for your\
    \ help and explanation! I learned so much from this\n<|/ c |>\n<| c |>\nI updated\
    \ the answer, to reflect your new examples. I hope this helps! :)\n<|/ c |>\n\
    <| a |>\n<code>\npreg_replace('/\\s(?=[A-Z])/', \n              '_',\n       \
    \       ucwords(\n              str_replace(\n              array(\"\\n\", \"\\\
    t\", \"\\r\", \"\\0\", \"\\x0B\", \"\\x0C\", \"\\x0D\", \"\\x20\"),\n        \
    \      array(\"\\n\", \" \", \" \", \" \", \" \", \" \", \" \", \" \"), \n   \
    \           $row['content']\n              )\n              )\n             );\n\
    </code>\n<|/ a tags=regex,preg-replace,preg-match,php dscore=0 |>\n<| c |>\nCan\
    \ you explain what you changed here?\n<|/ c |>\n<| c |>\nIt will replace white\
    \ spaces if they are followed by capital letter.\n<|/ c |>\n<| a tags=regex,preg-replace,preg-match,php\
    \ |>\ntry this \n<code>\npreg_replace(\"/[^A-Za-z0-9]+/\", \"\", $row['content']);\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=regex,preg-replace,preg-match,php dscore=0\
    \ |>\n<code>", "  return preg_replace('/[\\s]+/', '_', preg_replace('/\\s+/',\
    \ '_', $text));\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,preg-replace,regex\
    \ |>\n<code>\n$text = \"Hello\";\n$text = preg_replace(\"/\\s(?=.*\\s)/\", \"\
    _\", $text);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,preg-replace,regex |>\n\
    You can use this regex to replace all spaces with underscore and if there are\
    \ more than 2 consecutive spaces, replace it with a dash:\n<code>\ns/\\s+|_+(?![^\\\
    n]*\\n[^\\n]*[^\\n]*\\n[^\\n]*)/_/g\n</code>\nor this with lookaheads:\n<code>\n\
    s/\\s+|_+(?=([^\\n]*\\n){2,})/-/g\n</code>\nThe [^\\n] is a negated character\
    \ class that matches any character but a newline character.\n<|/ a dscore=1 |>\n\
    <| c |>\nThis answer is incomplete. `\\s*` does not only remove multiple spaces\
    \ -- it also removes tabs and carriage returns as well as multiple spaces and\
    \ tabs.\n<|/ c |>\n<| c |>\nI missed that part, thanks for pointing that out,\
    \ I've updated the answer.\n<|/ c |>\n<| a tags=php,preg-replace,regex dscore=1\
    \ |>\nTo replace all whitespaces with underscores:\n<code>\n$result = preg_replace('/\\\
    s{2,}/', '_', $subject);\n</code>\nTo replace consecutive whitespaces with dashes:\n\
    <code>\n$result = preg_replace('/\\s+/', '-', $subject);\n</code>\n<|/ a |>\n\
    <| c |>\nYou don't need to use `\\s{2,}` as `\\s+` does just the same thing.\n\
    <|/ c |>\n<| a dscore=1 |>\nThis may be a bit different than what you are looking\
    \ for:\n<code>\n<?php\n\n$str=\"Hello\";\necho preg_replace('/\\s/i', '_', $str);\n\
    \n$str=\"Hello     World\";\necho preg_replace('/\\s/i', '_', $str);\n\n$str=\"\
    Hello   World\";\necho preg_replace('/\\s/i', '_', $str);\n\n$str=\"Hello  World\"\
    ;\necho preg_replace('/\\s/i', '_', $str);\n\n$str=\"Hello   World\";\necho preg_replace('/\\\
    s/i', '_', $str);\n\n$str=\"Hello   World\";\necho preg_", "    $text = preg_replace(\"\
    \ \", \"_\", $text);\n    if (preg_match_all(\"/\\s/\", $text, $matches)) {\n\
    \        $text = \"\";\n        for ($i = 0; $i < count($matches[0]); $i++) {\n\
    \            if ($i == 0) {\n                $text .= $matches[0][$i];\n     \
    \       } else {\n                $text .= \"-\".$matches[0][$i];\n          \
    \  }\n        }\n    }\n    return $text;\n}\n", "    return preg_replace(\" \"\
    , \"_\", preg_replace(\"/\\s/\", \"-\", preg_replace(\"/  +/\", \"_\", $text)));\n\
    }", "    $text = (string)$text;\n    $text = preg_replace('/\\s+/', '_', $text);\n\
    \    $text = preg_replace('/([^\\s]{2,})\\s/', '_$1', $text);\n    $text = preg_replace('/^_/',\
    \ '', $text);\n    return $text;\n}", "  $text = preg_replace(\n    array(\n \
    \     \"/[ ]+/\", \n      \"/[ ]{2,}/\", \n      \"/[ ]+/\", \n      \"/[ ]{2,}/\"\
    ,\n    ),\n    array(\n      \"_\", \n      \"_\", \n      \"_\", \n      \"_\"\
    ,\n    ),\n    $text\n  );\n  return $text;\n}", "  $text = preg_replace('/(\\\
    s\\s+)/', '_', $text);\n  if (strlen($text) > 2) {\n    $text = preg_replace('/(\\\
    s+)/', '-', $text);\n  }\n  return $text;\n}\n", "    $text = preg_replace('~\\\
    s~u', '_', $text);\n    $text = preg_replace('~(\\s){2,}~u', '-', $text);\n  \
    \  return $text;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$str\
    \ = \"The quick brown fox jumps over the lazy dog.\";\n$str = preg_replace('/\\\
    B (?=[A-Z])/', '_', $str);\n</code>\nThe pattern matches a space followed by an\
    \ uppercase letter and replaces it with an underscore.\n<|/ a tags=string,replace,php,regex,string\
    \ |>\n<| a dscore=1 |>\n<code>\n$string = 'Lorem ipsum dolor sit amet, consectetur\
    \ adipiscing elit. Integer eget nisi augue. Curabitur sollicitudin condimentum\
    \ lacus quis hendrerit. Praesent ultrices consequat leo, eget aliquam libero gravida\
    \ in. Fusce sed ultrices nisi. Nam non magna vel nisi accumsan ullamcorper et\
    \ vel arcu. Nullam eget magna non nulla mattis tempus et at arcu. Duis non condimentum\
    \ neque, id ullamcorper metus. Praesent tempus sapien nec leo tempor hendrerit.\
    \ Vivamus consequat sodales ex, vel sagittis justo egestas in. Vestibulum mollis\
    \ arcu et sapien efficitur bibendum. Nam eu felis ut risus tristique convallis\
    \ quis eu lorem. Etiam dictum lacinia nisi id viverra. Vivamus interdum nec tortor\
    \ sit amet imperdiet. Nulla sit amet arcu id dolor imperdiet tincidunt. Donec\
    \ a dui tincidunt, fringilla enim sed, aliquet libero. Vestibulum sollicitudin\
    \ porta neque ac dapibus. Donec id egestas nisi. Ut ac nibh ut elit ultricies\
    \ lobortis. Pellentesque sed lacus vehicula, pos", "    // Split into words (a\
    \ contiguous series of characters that are not spaces)\n    $words = preg_split('/[^\
    \ ]+/', $text);\n\n    // Find consecutive spaces\n    foreach ($words as $key\
    \ => $word) {\n        // If it's the first word, add a dash\n        if ($key\
    \ == 0) {\n            $words[$key] = \"-\";\n        }\n        // If it's the\
    \ last word, add a space\n        elseif ($key != count($words) - 1) {\n     \
    \       $words[$key] += \"_\";\n        }\n    }\n\n    // Join it all back together\
    \ with underscores\n    return implode('', $words);\n}\n", "    $search = array('\
    \  ', '   ', '   ', '   ', '   ', '   ', '   ', '  ', '  ', '  ', '  ', '  ',\
    \ ' ', ' ');\n    $replace = array('-', '_', '-', '_', '-', '_', '-', '_', '-',\
    \ '_', '-', '_', '-', '_', '-', '_', '-', '_', '-');\n    $text = str_replace($search,\
    \ $replace, $text);\n    $text = ucwords($text);\n    return $text;\n}\n", " \
    \ $text = preg_replace('/[\\x00-\\x1f]/', ' ', $text);\n  $text = preg_replace('/\\\
    s{2,}/', '-', $text);\n  return $text;\n}\n", "    return preg_replace('/(?<=^|[\
    \ ])( *)|( *)$|[ ]+/', '_', trim($text));\n}", "  return preg_replace('/\\s/',\
    \ '-', preg_replace('/(\\s){2,}/', '-', $text));\n}", "    $text = str_replace('\
    \ ', '_', $text);\n    $text = preg_replace('/  +/', '-', $text);\n    return\
    \ $text;\n}", "    return preg_replace('/[ ]+/', '_', $text);\n}", "  return preg_replace(\"\
    /\\s+/\", \"_\", preg_replace(\"/( ){2,}/\", \"-\", $text));\n}", "  $text = preg_replace(\"\
    /[ \\t]+/\", \"_\", $text);\n  $text = preg_replace(\"/[ ]+/\", \"_\", $text);\n\
    \  if ($text > 2) {\n    $text = preg_replace(\"/[ -]+/\", \"-\", $text);\n  }\n\
    \  return $text;\n}", "    // replace all spaces in it with underscores \n   \
    \ $text = str_replace(' ', '_', $text);\n    // if a string has more than 2 consecutive\
    \ spaces, \n    // then replace all consecutive spaces with - \n    if (strlen($text)\
    \ > 2) {\n        $text = preg_replace('/\\s+/', '-', $text);\n    }\n    return\
    \ $text;\n}\n", "    $text = preg_replace('/\\s+/', '_', $text);\n    if (strlen($text)\
    \ > 2) {\n        $text = preg_replace('/  +/', '-', $text);\n    }\n    return\
    \ $text;\n}\n", "    $text = preg_replace('/\\s/', '_', $text);\n    $text = preg_replace('/\\\
    s/', '-', $text);\n    return $text;\n}\n", "    $text = preg_replace('/\\s/',\
    \ '_', $text);\n    if (preg_match_all('/\\s(\\s)+/s', $text, $matches)) {\n \
    \       $text = preg_replace('/(\\s)+/s', '-', $text);\n        $text = preg_replace('/_{2,}/',\
    \ '_', $text);\n        $text = preg_replace('/_+/', '-', $text);\n    }\n   \
    \ return $text;\n}\n", "    $text = str_replace(\" \", \"_\", $text);\n    $text\
    \ = preg_replace('/ (?=\\s)/', '_', $text);\n    $text = trim($text, '_');\n \
    \   return $text;\n}\n", "  $text = preg_replace('/ +/', '_', $text);\n  $text\
    \ = preg_replace('/_+/', '-', $text);\n  return $text;\n}\n", "    return preg_replace(\"\
    /[\\s]+/\", \"-\", preg_replace(\"/\\s+/\", \"_\", $text));\n}\n", "    // Remove\
    \ extra spaces first\n    $text = preg_replace('/\\s+/', '_', $text);\n\n    //\
    \ If there are more than 2 consecutive spaces, replace all with _\n    $text =\
    \ preg_replace('/  +/', '_', $text);\n\n    return $text;\n}\n", "    $text =\
    \ preg_replace('/\\s+/', '_', $text);\n    if (strlen($text) > 2) {\n        $text\
    \ = preg_replace('/(\\s)+/', '-', $text);\n    }\n    return $text;\n}\n", " \
    \ if (strlen($text) > 2)\n  {\n    $text = preg_replace('/\\s+/', '_', $text);\n\
    \  }\n  return $text;\n}", "  $text = preg_replace('/\\s/', '_', $text);\n  $text\
    \ = preg_replace('/  +/', '_', $text);\n  $text = preg_replace('/_{2,}/', '_',\
    \ $text);\n  return $text;\n}\n", "    $text = preg_replace('/[ \\t]+/', '_',\
    \ $text);\n    $text = preg_replace('/[ ]{2,}/', '-', $text);\n    return $text;\n\
    }", "    $text = str_replace(array(\" \", \"  \"), array(\"_\", \"_\"), $text);\n\
    \    return preg_replace(\"/_{2,}/\", \"_\", $text);\n}\n", "  $text = str_replace('\
    \ ', '_', $text);\n  $text = preg_replace('/  +/', '_', $text);\n  if (strlen($text)\
    \ > 2) {\n    $text = preg_replace('/_+/', '-', $text);\n  }\n  return $text;\n\
    }\n", "\t$text = str_replace(' ', '_', $text);\n\t$text = preg_replace('/  +/',\
    \ '_', $text);\n\tif (strlen($text) > 2) {\n\t\t$text = preg_replace('/_+/', '_',\
    \ $text);\n\t}\n\treturn $text;\n}\n", "  $text = preg_replace(\"/\\s/\", \"_\"\
    , $text);\n  $text = preg_replace(\"/_{2,}/\", \"-\", $text);\n  return $text;\n\
    }\n", "  return preg_replace('/\\s/u', '_', $text);\n}\n", "    $text = str_replace(\"\
    \ \", \"_\", $text);\n    $text = preg_replace(\"/(^|_)(.+?)(\\s+)/e\", \"$1_$2\"\
    , $text);\n    return $text;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
