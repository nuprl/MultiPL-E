name: HumanEval_143_words_in_sentence
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a string representing a sentence,\n    // the\
  \ sentence contains some words separated by a space,\n    // and you have to return\
  \ a string that contains the words from the original sentence,\n    // whose lengths\
  \ are prime numbers,\n    // the order of the words in the new string should be\
  \ the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"\
  This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"\
  lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <=\
  \ len(sentence) <= 100\n    // * sentence contains only letters\n    public static\
  \ string WordsInSentence(string sentence) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
  This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
  \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
  there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
  Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
  go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\"\
  )).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
  is\")));\n    }\n\n}\n"
completions: ["        string result = \"\";\n        string words = sentence.Split('\
    \ ');\n        List<int> primes = new List<int>();\n        foreach (string word\
    \ in words) {\n            int n = Convert.ToInt32(word);\n            if (IsPrime(n))\
    \ {\n                primes.Add(n);\n            }\n        }\n        foreach\
    \ (int prime in primes) {\n            result += \" \" + words[prime];\n     \
    \   }\n        return result.Trim();", "        string result = \"\";\n      \
    \  List<int> primes = new List<int>();\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int n = Convert.ToInt32(word);\n            if (primes.Contains(n))\n\
    \            {\n                result += word;\n            }\n            else\n\
    \            {\n                primes.Add(n);\n            }\n        }\n   \
    \     return result;", "        string result = \"\";\n        char[] chars =\
    \ sentence.ToCharArray();\n        Array.Sort(chars);\n        foreach (char c\
    \ in chars) {\n            int n = Convert.ToInt32(c);\n            if (IsPrime(n))\
    \ {\n                result += \" \" + c;\n            }\n        }\n        return\
    \ result.Trim();", "        string result = \"\";\n        foreach (string word\
    \ in sentence.Split(' '))\n        {\n            int length = word.Length;\n\
    \            bool isPrime = true;\n            for (int i = 2; i <= Math.Sqrt(length);\
    \ i++)\n            {\n                if (length % i == 0)\n                {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime)\n            {\n           \
    \     result += word;\n            }\n        }\n        return result;", "  \
    \      string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        Array.Sort(charArray);\n        foreach (char c in charArray) {\n   \
    \         if (IsPrimeNumber(c)) {\n                result += \" \" + c;\n    \
    \        }\n        }\n        return result.Trim();", "        string result\
    \ = \"\";\n        char[] chars = sentence.ToCharArray();\n        Array.Sort(chars);\n\
    \        foreach (char c in chars) {\n            if (IsPrime(c)) {\n        \
    \        result += \" \" + c;\n            }\n        }\n        return result.Trim();",
  "        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> words = new HashSet<string>();\n        foreach (char\
    \ c in chars) {\n            if (char.IsLetter(c)) {\n                string word\
    \ = c.ToString();\n                words.Add(word);\n            }\n        }\n\
    \        foreach (string word in words) {\n            int length = word.Length;\n\
    \            if (length == 1) {\n                result += word;\n           \
    \ }\n            else if (length == 2 && word.StartsWith(\"a\") && word.EndsWith(\"\
    a\")) {\n                result += word;\n            }\n            else if (length\
    \ == 2 && word.StartsWith(\"a\") && word.EndsWith(\"e\")) {\n                result\
    \ += word;\n            }\n            else if (length == 2 && word.StartsWith(\"\
    e\") && word.EndsWith(\"a\")) {\n                result += word;\n           \
    \ }\n            else if (length == 2 && word.StartsWith(\"e\") && word.EndsWith(\"\
    e\")) {\n                result += word;\n            }\n            else if (length\
    \ == 3 && word.StartsWith(\"a\") && word.EndsWith(\"e\") && word.StartsWith(\"\
    i\") && word.EndsWith(\"i\")) {\n                result += word;\n           \
    \ }\n            else if (length == 3 && word.StartsWith(\"a\") && word.EndsWith(\"\
    e\") && word.StartsWith(\"o\") && word.EndsWith(\"o\")) {\n                result\
    \ += word;\n            }\n            else if (length == 3 && word.StartsWith(\"\
    a\") && word.EndsWith(\"e\") && word.StartsWith(\"u\") && word.EndsWith(\"u\"\
    )) {\n                result += word;\n            }\n            else if (length\
    \ == 3 && word.StartsWith(\"a\") && word.EndsWith(\"i\") && word.StartsWith(\"\
    i\") && word.EndsWith(\"o\")) {\n                result += word;\n           \
    \ }\n            else if (length == 3 && word.StartsWith(\"a\") && word.EndsWith(\"\
    i\") && word.StartsWith(\"o\") && word.EndsWith(\"o\")) {\n                result\
    \ += word;\n            }\n            else if (length == 3 && word.StartsWith(\"\
    a\") && word.EndsWith(\"o\") && word.StartsWith(\"u\") && word.EndsWith(\"u\"\
    )) {\n                result += word;\n            }\n            else if (length\
    \ == 3 && word.StartsWith(\"e\") && word.EndsWith(\"a\") && word.StartsWith(\"\
    i\") && word.EndsWith(\"i\")) {\n                result += word;\n           \
    \ }\n            else if (length == 3 && word.StartsWith(\"e\") && word.EndsWith(\"\
    a\") && word.StartsWith", "        string result = \"\";\n        char[] chars\
    \ = sentence.ToCharArray();\n        Array.Sort(chars);\n        bool isPrime\
    \ = true;\n        bool isPrime2 = true;\n        bool isPrime3 = true;\n    \
    \    bool isPrime4 = true;\n        bool isPrime5 = true;\n        bool isPrime6\
    \ = true;\n        bool isPrime7 = true;\n        bool isPrime8 = true;\n    \
    \    bool isPrime9 = true;\n        bool isPrime10 = true;\n        bool isPrime11\
    \ = true;\n        bool isPrime12 = true;\n        bool isPrime13 = true;\n  \
    \      bool isPrime14 = true;\n        bool isPrime15 = true;\n        bool isPrime16\
    \ = true;\n        bool isPrime17 = true;\n        bool isPrime18 = true;\n  \
    \      bool isPrime19 = true;\n        bool isPrime20 = true;\n        bool isPrime21\
    \ = true;\n        bool isPrime22 = true;\n        bool isPrime23 = true;\n  \
    \      bool isPrime24 = true;\n        bool isPrime25 = true;\n        bool isPrime26\
    \ = true;\n        bool isPrime27 = true;\n        bool isPrime28 = true;\n  \
    \      bool isPrime29 = true;\n        bool isPrime30 = true;\n        bool isPrime31\
    \ = true;\n        bool isPrime32 = true;\n        bool isPrime33 = true;\n  \
    \      bool isPrime34 = true;\n        bool isPrime35 = true;\n        bool isPrime36\
    \ = true;\n        bool isPrime37 = true;\n        bool isPrime38 = true;\n  \
    \      bool isPrime39 = true;\n        bool isPrime40 = true;\n        bool isPrime41\
    \ = true;\n        bool isPrime42 = true;\n        bool isPrime43 = true;\n  \
    \      bool isPrime44 = true;\n        bool isPrime45 = true;\n        bool isPrime46\
    \ = true;\n        bool isPrime47 = true;\n        bool isPrime48 = true;\n  \
    \      bool isPrime49 = true;\n        bool isPrime50 = true;\n        bool isPrime51\
    \ = true;\n        bool isPrime52 = true;\n        bool isPrime53 = true;\n  \
    \      bool isPrime54 = true;\n        bool isPrime55 = true;\n        bool isPrime56\
    \ = true;\n        bool isPrime57 = true;\n        bool isPrime58 = true;\n  \
    \      bool isPrime59 = true;\n        bool isPrime60 = true;\n", "        string\
    \ result = \"\";\n        char[] chars = sentence.ToCharArray();\n        HashSet<string>\
    \ words = new HashSet<string>();\n        foreach (char c in chars) {\n      \
    \      if (char.IsLetter(c)) {\n                string word = c.ToString();\n\
    \                words.Add(word);\n            }\n        }\n        foreach (string\
    \ word in words) {\n            int length = word.Length;\n            if (length\
    \ == 1) continue;\n            bool isPrime = true;\n            for (int i =\
    \ 2; i <= Math.Sqrt(length); i++) {\n                if (length % i == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                result +=\
    \ \" \" + word;\n            }\n        }\n        return result.Trim();", " \
    \       string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ if (IsPrime(c.ToString().Length)) {\n                result += \" \" + c;\n\
    \            }\n        }\n        return result.Trim();", "        string result\
    \ = \"\";\n        char[] chars = sentence.ToCharArray();\n        Array.Sort(chars);\n\
    \        bool isPrime = true;\n        for (int i = 0; i < chars.Length; i++)\
    \ {\n            int count = 0;\n            while (chars[i] == ' ') {\n     \
    \           count++;\n                i++;\n            }\n            if (count\
    \ % 2 == 0) {\n                isPrime = false;\n                break;\n    \
    \        }\n        }\n        if (isPrime) {\n            int length = chars.Length;\n\
    \            int index = 0;\n            while (index < length) {\n          \
    \      string temp = chars[index];\n                for (int i = index + 1; i\
    \ < length; i++) {\n                    if (chars[i] == ' ') {\n             \
    \           temp = temp + \" \" + chars[i];\n                        index++;\n\
    \                        break;\n                    }\n                }\n  \
    \              if (IsPrime(temp)) {\n                    result += temp + \" \"\
    ;\n                }\n                index++;\n            }\n        }\n   \
    \     return result;", "        string result = \"\";\n        char[] chars =\
    \ sentence.ToCharArray();\n        Array.Sort(chars);\n        foreach (char c\
    \ in chars) {\n            int count = 0;\n            while (c != ' ') {\n  \
    \              count++;\n                c = chars[count];\n            }\n  \
    \          if (IsPrime(count)) {\n                result += \" \" + c;\n     \
    \       }\n        }\n        return result.Trim();", "        string result =\
    \ \"\";\n        char[] charArray = sentence.ToCharArray();\n        HashSet<string>\
    \ words = new HashSet<string>();\n        foreach (char c in charArray) {\n  \
    \          if (char.IsLetter(c)) {\n                string word = c.ToString();\n\
    \                words.Add(word);\n            }\n        }\n        foreach (string\
    \ word in words) {\n            int length = word.Length;\n            bool isPrime\
    \ = true;\n            for (int i = 2; i <= Math.Sqrt(length); i++) {\n      \
    \          if (length % i == 0) {\n                    isPrime = false;\n    \
    \                break;\n                }\n            }\n            if (isPrime)\
    \ {\n                result += \" \" + word;\n            }\n        }\n     \
    \   return result.Trim();", "        string result = \"\";\n        char[] chars\
    \ = sentence.ToCharArray();\n        HashSet<string> words = new HashSet<string>();\n\
    \        foreach (char c in chars) {\n            if (char.IsLetter(c)) {\n  \
    \              string word = c.ToString();\n                words.Add(word);\n\
    \            }\n        }\n        foreach (string word in words) {\n        \
    \    int length = word.Length;\n            if (length == 1) {\n             \
    \   result += word;\n            } else {\n                for (int i = 2; i <=\
    \ Math.Sqrt(length); i++) {\n                    if (length % i == 0) {\n    \
    \                    int count = 0;\n                        for (int j = 0; j\
    \ < word.Length; j++) {\n                            if (word[j] == word[j]) {\n\
    \                                count++;\n                            }\n   \
    \                     }\n                        if (count == i) {\n         \
    \                   result += word;\n                            break;\n    \
    \                    }\n                    }\n                }\n           \
    \ }\n        }\n        return result;", "        string result = \"\";\n    \
    \    char[] charArray = sentence.ToCharArray();\n        List<int> primes = new\
    \ List<int>();\n        foreach (char c in charArray) {\n            int prime\
    \ = PrimeNumber(c);\n            if (prime > 1) {\n                primes.Add(prime);\n\
    \            }\n        }\n        primes.Sort();\n        foreach (int prime\
    \ in primes) {\n            result += \" \" + charArray[prime];\n        }\n \
    \       return result.Trim();", "        string result = \"\";\n        bool isPrime\
    \ = true;\n        string word = \"\";\n        foreach (char c in sentence) {\n\
    \            isPrime = true;\n            int n = Convert.ToInt32(c);\n      \
    \      for (int i = 2; i <= Math.Sqrt(n); i++) {\n                if (n % i ==\
    \ 0) {\n                    isPrime = false;\n                    break;\n   \
    \             }\n            }\n            if (isPrime) {\n                word\
    \ += c;\n            }\n        }\n        foreach (char c in word) {\n      \
    \      result += c;\n        }\n        return result;", "        string result\
    \ = \"\";\n        string word = \"\";\n        string temp = \"\";\n        bool\
    \ isPrime = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            }\n        }\n        char[] charArray\
    \ = word.ToCharArray();\n        Array.Sort(charArray);\n        foreach (char\
    \ c in charArray) {\n            temp = temp + c;\n        }\n        char[] charArray2\
    \ = temp.ToCharArray();\n        Array.Sort(charArray2);\n        foreach (char\
    \ c in charArray2) {\n            if (isPrime) {\n                if (c != ' ')\
    \ {\n                    isPrime = false;\n                }\n            }\n\
    \            else {\n                if (c != ' ') {\n                    isPrime\
    \ = true;\n                }\n            }\n        }\n        foreach (char\
    \ c in charArray2) {\n            if (isPrime) {\n                result += c;\n\
    \            }\n        }\n        return result;", "        string result = \"\
    \";\n        char[] chars = sentence.ToCharArray();\n        Array.Sort(chars);\n\
    \        foreach (char c in chars) {\n            if (IsPrime(c.ToString().Length))\
    \ {\n                result += c;\n            }\n        }\n        return result;",
  "        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                if (isPrime)\
    \ {\n                    isPrime = IsPrime(word.Length);\n                }\n\
    \                result += \" \" + word;\n                word = \"\";\n     \
    \       }\n        }\n        if (isPrime) {\n            result += \" \" + word;\n\
    \        }\n        return result.Trim();", "        string result = \"\";\n \
    \       string word = \"\";\n        bool isPrime = true;\n        int length\
    \ = sentence.Length;\n        for (int i = 0; i < length; i++) {\n           \
    \ word = sentence.Substring(i, 1);\n            isPrime = true;\n            int\
    \ j = 2;\n            while (j < length) {\n                if (j % i == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n                j++;\n            }\n            if (isPrime) {\n  \
    \              result += word;\n            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
