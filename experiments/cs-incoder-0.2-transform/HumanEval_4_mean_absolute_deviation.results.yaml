language: cs
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = 0;\n        foreach (float number in numbers) {\n  \
    \          mean += number;\n        }\n        mean /= numbers.Count;\n      \
    \  float sum = 0;\n        foreach (float number in numbers) {\n            sum\
    \ += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797526
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = 0;\n        float sum = 0;\n        foreach (float number\
    \ in numbers) {\n            sum += number;\n        }\n        mean = sum / numbers.Count;\n\
    \        float deviation = 0;\n        foreach (float number in numbers) {\n \
    \           deviation += Math.Abs(number - mean);\n        }\n        return deviation\
    \ / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797526
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0.0f;\n        float mean = numbers.Average();\n    \
    \    foreach (float number in numbers) {\n            sum += Math.Abs(number -\
    \ mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = 0;\n        foreach (float number in numbers) {\n  \
    \          mean += number;\n        }\n        mean /= numbers.Count;\n      \
    \  float deviation = 0;\n        foreach (float number in numbers) {\n       \
    \     deviation += Math.Abs(number - mean);\n        }\n        return deviation\
    \ / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797526
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = 0.0f;\n        float sum = 0.0f;\n        foreach (float\
    \ number in numbers) {\n            sum += Math.Abs(number);\n            mean\
    \ += Math.Abs(number);\n        }\n        mean /= numbers.Count;\n        float\
    \ deviation;\n        foreach (float number in numbers) {\n            deviation\
    \ = Math.Abs(number - mean);\n            if (deviation > 0.0f) {\n          \
    \      return deviation;\n            }\n        }\n        return 0.0f;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b052f0fc492b4f90b96625bc3e8b2056>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b052f0fc492b4f90b96625bc3e8b2056>:0 \n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        foreach (float number in numbers) {\n   \
    \         sum += Math.Abs(number - numbers.Average());\n        }\n        return\
    \ sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n\
    \    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797526
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = 0;\n        float sum = 0;\n        foreach (float number\
    \ in numbers) {\n            sum += number;\n        }\n        mean = sum / numbers.Count;\n\
    \        float deviation = 0;\n        foreach (float number in numbers) {\n \
    \           deviation += Math.Abs(number - mean);\n        }\n        return deviation\
    \ / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797526
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = 0;\n        float sum = 0;\n        foreach (float number\
    \ in numbers) {\n            sum += number;\n        }\n        mean = sum / numbers.Count;\n\
    \        float deviation = 0;\n        foreach (float number in numbers) {\n \
    \           deviation += Math.Abs(number - mean);\n        }\n        return deviation\
    \ / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797526
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = 0;\n        foreach (float number in numbers) {\n  \
    \          mean += number;\n        }\n        mean /= numbers.Count;\n      \
    \  float sum = 0;\n        foreach (float number in numbers) {\n            sum\
    \ += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797526
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
