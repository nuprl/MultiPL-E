name: HumanEval_114_minSubArraySum
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given an array of integers nums, find the minimum sum of any\
  \ non-empty sub-array\n    // of nums.\n    // Example\n    // >>> Minsubarraysum((new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))\n\
  \    // (1L)\n    // >>> Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L,\
  \ (long)-3L})))\n    // (-6L)\n    public static long Minsubarraysum(List<long>\
  \ nums) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))\
  \ == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,\
  \ (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new\
  \ long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n\
  \    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))\
  \ == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new\
  \ long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))\
  \ == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,\
  \ (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))\
  \ == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,\
  \ (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
completions: ["        long minSum = nums.Min();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            if (sum < minSum) {\n\
    \                minSum = sum;\n            }\n        }\n        return minSum;",
  "        long sum = 0;\n        long min = long.MaxValue;\n        foreach (var\
    \ num in nums) {\n            sum += num;\n            if (sum < min) {\n    \
    \            min = sum;\n            }\n        }\n        return min;", "   \
    \     long sum = 0;\n        long min = long.MaxValue;\n        foreach (var num\
    \ in nums) {\n            sum += num;\n            if (sum < min) {\n        \
    \        min = sum;\n            }\n        }\n        return min;", "       \
    \ long minSum = nums.Sum();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            if (sum < minSum) {\n     \
    \           minSum = sum;\n            }\n        }\n        return minSum;",
  "        long sum = 0;\n        long minSum = nums.Min();\n        foreach (long\
    \ n in nums) {\n            sum += n;\n            if (sum < minSum) {\n     \
    \           minSum = sum;\n            }\n        }\n        return minSum;",
  "        long minSum = nums.Min();\n        long sum = 0;\n        foreach (long\
    \ num in nums) {\n            sum += num;\n            if (sum < minSum) {\n \
    \               minSum = sum;\n            }\n        }\n        return minSum;",
  "        long minSum = nums.Min();\n        long minSum2 = nums.Min();\n       \
    \ long minSum3 = nums.Min();\n        long minSum4 = nums.Min();\n        long\
    \ minSum5 = nums.Min();\n        long minSum6 = nums.Min();\n        long minSum7\
    \ = nums.Min();\n        long minSum8 = nums.Min();\n        long minSum9 = nums.Min();\n\
    \        long minSum10 = nums.Min();\n        long minSum11 = nums.Min();\n  \
    \      long minSum12 = nums.Min();\n        long minSum13 = nums.Min();\n    \
    \    long minSum14 = nums.Min();\n        long minSum15 = nums.Min();\n      \
    \  long minSum16 = nums.Min();\n        long minSum17 = nums.Min();\n        long\
    \ minSum18 = nums.Min();\n        long minSum19 = nums.Min();\n        long minSum20\
    \ = nums.Min();\n        long minSum21 = nums.Min();\n        long minSum22 =\
    \ nums.Min();\n        long minSum23 = nums.Min();\n        long minSum24 = nums.Min();\n\
    \        long minSum25 = nums.Min();\n        long minSum26 = nums.Min();\n  \
    \      long minSum27 = nums.Min();\n        long minSum28 = nums.Min();\n    \
    \    long minSum29 = nums.Min();\n        long minSum30 = nums.Min();\n      \
    \  long minSum31 = nums.Min();\n        long minSum32 = nums.Min();\n        long\
    \ minSum33 = nums.Min();\n        long minSum34 = nums.Min();\n        long minSum35\
    \ = nums.Min();\n        long minSum36 = nums.Min();\n        long minSum37 =\
    \ nums.Min();\n        long minSum38 = nums.Min();\n        long minSum39 = nums.Min();\n\
    \        long minSum40 = nums.Min();\n        long minSum41 = nums.Min();\n  \
    \      long minSum42 = nums.Min();\n        long minSum43 = nums.Min();\n    \
    \    long minSum44 = nums.Min();\n        long minSum45 = nums.Min();\n      \
    \  long minSum46 = nums.Min();\n        long minSum47 = nums.Min();\n        long\
    \ minSum48 = num", "        long minSum = nums.Min();\n        long sum = 0;\n\
    \        foreach (long n in nums) {\n            sum += n;\n            if (sum\
    \ < minSum) {\n                minSum = sum;\n            }\n        }\n     \
    \   return minSum;", "        long minSum = nums.Min();\n        long sum = 0;\n\
    \        long sumOfSubarrays = 0;\n        foreach (long n in nums) {\n      \
    \      sum += n;\n            if (sumOfSubarrays < sum) {\n                sumOfSubarrays\
    \ = sum;\n            }\n        }\n        minSum = sumOfSubarrays;\n       \
    \ return minSum;", "        long sum = 0;\n        long min = long.MaxValue;\n\
    \        long max = 0;\n        long sum2 = 0;\n        long min2 = 0;\n     \
    \   foreach (long n in nums) {\n            sum += n;\n            if (sum < min)\
    \ {\n                min = sum;\n            }\n            if (sum > max) {\n\
    \                max = sum;\n            }\n            sum2 += n;\n         \
    \   if (sum2 < min2) {\n                min2 = sum2;\n            }\n        \
    \    if (sum2 > max2) {\n                max2 = sum2;\n            }\n       \
    \ }\n        return min + max;", "        long sum = 0;\n        long minSum =\
    \ nums.Min();\n        foreach (long num in nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;", "        long sum = 0;\n        long min\
    \ = long.MaxValue;\n        foreach (var n in nums) {\n            sum += n;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;", "        long min = nums.Min();\n        long max\
    \ = nums.Max();\n        long sum = 0;\n        long sum2 = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            sum2 += n * n;\n    \
    \    }\n        if (sum == 0)\n            return 0;\n        if (sum2 == 0)\n\
    \            return sum;\n        if (sum > sum2)\n            return sum;\n \
    \       return sum2;", "        long sum = 0;\n        long minSum = nums.Min();\n\
    \        foreach (long num in nums) {\n            sum += num;\n            if\
    \ (sum < minSum) {\n                minSum = sum;\n            }\n        }\n\
    \        return minSum;", "        long minSum = nums.Min();\n        long sum\
    \ = 0;\n        long sumOfSubarray = 0;\n        foreach (long num in nums) {\n\
    \            sum += num;\n            if (sumOfSubarray < sum) {\n           \
    \     sumOfSubarray = sum;\n            }\n        }\n        minSum = sumOfSubarray;\n\
    \        return minSum;", "        long min = nums.Sum();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            if\
    \ (sum < min) {\n                min = sum;\n            }\n        }\n      \
    \  return min;", "        long sum = 0;\n        long min = long.MaxValue;\n \
    \       long max = long.MinValue;\n        foreach (long n in nums) {\n      \
    \      sum += n;\n            if (n < min) min = n;\n            if (n > max)\
    \ max = n;\n        }\n        if (sum < min) min = sum;\n        if (sum > max)\
    \ max = sum;\n        return sum;", "        long sum = 0;\n        long minSum\
    \ = nums.Min();\n        long maxSum = nums.Max();\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            if (sum < minSum) {\n          \
    \      minSum = sum;\n            }\n            if (sum > maxSum) {\n       \
    \         maxSum = sum;\n            }\n        }\n        return minSum;", " \
    \       long min = nums.Min();\n        long max = nums.Max();\n        long sum\
    \ = 0;\n        long sum2 = 0;\n        foreach (long n in nums) {\n         \
    \   sum += n;\n            sum2 += n * n;\n        }\n        if (sum == 0) return\
    \ 0;\n        if (sum2 == 0) return sum;\n        if (sum > sum2) return sum;\n\
    \        if (sum < sum2) return sum2;\n        long mid = sum / 2;\n        long\
    \ mid2 = sum2 / 2;\n        long mid3 = mid * mid;\n        long mid4 = mid2 *\
    \ mid2;\n        long mid5 = mid * mid2;\n        long mid6 = mid2 * mid3;\n \
    \       long mid7 = mid * mid3;\n        long mid8 = mid * mid4;\n        long\
    \ mid9 = mid * mid5;\n        long mid10 = mid * mid6;\n        long mid11 = mid\
    \ * mid7;\n        long mid12 = mid * mid8;\n        long mid13 = mid * mid9;\n\
    \        long mid14 = mid * mid10;\n        long mid15 = mid * mid11;\n      \
    \  long mid16 = mid * mid12;\n        long mid17 = mid * mid13;\n        long\
    \ mid18 = mid * mid14;\n        long mid19 = mid * mid15;\n        long mid20\
    \ = mid * mid16;\n        long mid21 = mid * mid17;\n        long mid22 = mid\
    \ * mid18;\n        long mid23 = mid * mid19;\n        long mid24 = mid * mid20;\n\
    \        long mid25 = mid * mid21;\n        long mid26 = mid * mid22;\n      \
    \  long mid27 = mid * mid23;\n        long mid28 = mid * mid24;\n        long\
    \ mid29 = mid * mid25;\n        long mid30 = mid * mid26;\n        long mid31\
    \ = mid * mid27;\n        long mid32 = mid * mid28;\n        long mid33 = mid\
    \ * mid29;\n        long mid34 = mid * mid30;\n        long mid35 = mid * mid31;\n\
    \        long mid36 = mid * mid32;\n        long mid37 = mid * mid33;\n      \
    \  long mid38 = mid * mid34;\n        long mid39 = mid * mid35;\n        long\
    \ mid40 = mid * mid36;\n        long mid41 = mid * mid37;\n        long mid42\
    \ = mid ", "        long minSum = nums.Sum();\n        foreach (var n in nums.SkipWhile(x\
    \ => x == 0L).TakeWhile(x => x != 0L)) {\n            minSum -= n;\n        }\n\
    \        return minSum;"]
stop_tokens:
- "\n    }\n"
