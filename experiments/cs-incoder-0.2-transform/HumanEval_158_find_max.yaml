name: HumanEval_158_find_max
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that accepts a list of strings.\n    // The\
  \ list contains different words. Return the word with maximum number\n    // of\
  \ unique characters. If multiple strings have maximum number of unique\n    // characters,\
  \ return the one which comes first in lexicographical order.\n    // >>> FindMax((new\
  \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
  })))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"\
  name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new\
  \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
  })))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
  }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
  }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\"\
  , (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",\
  \ (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
  nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
  this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"\
  }))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
completions: ["        string maxWord = string.Empty;\n        int maxCharCount =\
    \ 0;\n        foreach (string word in words) {\n            int charCount = 0;\n\
    \            foreach (char c in word) {\n                charCount++;\n      \
    \      }\n            if (charCount > maxCharCount) {\n                maxCharCount\
    \ = charCount;\n                maxWord = word;\n            }\n        }\n  \
    \      return maxWord;", "        string maxWord = string.Empty;\n        int\
    \ maxCount = 0;\n        foreach (string word in words) {\n            int count\
    \ = word.Distinct().Count();\n            if (count > maxCount) {\n          \
    \      maxCount = count;\n                maxWord = word;\n            }\n   \
    \     }\n        return maxWord;", "        string maxWord = string.Empty;\n \
    \       int maxCount = 0;\n        foreach (string word in words) {\n        \
    \    int count = word.Distinct().Count();\n            if (count > maxCount) {\n\
    \                maxCount = count;\n                maxWord = word;\n        \
    \    }\n        }\n        return maxWord;", "        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        foreach (string word in words)\
    \ {\n            int maxCharCount = 0;\n            foreach (char c in word) {\n\
    \                maxCharCount = Math.Max(maxCharCount, word.Count(c => c == c));\n\
    \            }\n            if (maxCharCount > maxChars.Length) {\n          \
    \      maxChars = maxCharCount;\n                maxWord = word;\n           \
    \ }\n        }\n        return maxWord;", "        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;", "        List<string>\
    \ maxWords = new List<string>();\n        List<string> maxWordsCounts = new List<string>();\n\
    \        foreach (string word in words) {\n            int maxCount = 0;\n   \
    \         foreach (char c in word) {\n                if (maxCount < maxWordsCounts.Count(x\
    \ => x == c)) {\n                    maxCount = maxWordsCounts.Count(x => x ==\
    \ c);\n                }\n            }\n            maxWords.Add(word);\n   \
    \         maxWordsCounts.Add(maxCount.ToString());\n        }\n        if (maxWords.Count\
    \ > 1) {\n            string maxWord = maxWords.OrderByDescending(x => x.Length).First();\n\
    \            string maxWordCount = maxWordsCounts.OrderByDescending(x => x).First();\n\
    \            if (maxWordCount > maxWord.Length) {\n                return maxWord;\n\
    \            } else {\n                return maxWords[0];\n            }\n  \
    \      } else {\n            return maxWords[0];\n        }", "        string\
    \ maxWord = string.Empty;\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = word.ToCharArray().Distinct().Count();\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;",
  "        string maxWord = string.Empty;\n        int maxCount = 0;\n        foreach\
    \ (string word in words) {\n            int count = word.Distinct().Count();\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;",
  "        string maxWord = string.Empty;\n        int maxCount = 0;\n        foreach\
    \ (string word in words) {\n            int count = word.Distinct().Count();\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;",
  "        string maxWord = string.Empty;\n        int maxCount = 0;\n        foreach\
    \ (string word in words) {\n            int count = word.ToCharArray().Distinct().Count();\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;",
  "        string maxWord = \"\";\n        string maxChar = \"\";\n        string\
    \ maxCharCount = 0;\n        foreach (string word in words) {\n            char[]\
    \ chars = word.ToCharArray();\n            int maxCharCount = 0;\n           \
    \ foreach (char c in chars) {\n                if (chars.Contains(c)) {\n    \
    \                maxCharCount++;\n                }\n            }\n         \
    \   if (maxCharCount > maxChar.Length) {\n                maxChar = maxCharCount;\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;",
  "        string maxWord = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = word.ToCharArray().Distinct().Count();\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;",
  "        string maxWord = string.Empty;\n        int maxCharCount = 0;\n       \
    \ foreach (string word in words) {\n            int charCount = 0;\n         \
    \   foreach (char c in word) {\n                charCount++;\n            }\n\
    \            if (charCount > maxCharCount) {\n                maxCharCount = charCount;\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;",
  "        string maxWord = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (char.IsLetter(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > maxCount) {\n     \
    \           maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;", "        List<string> uniqueWords = new\
    \ List<string>();\n        foreach (string word in words) {\n            uniqueWords.Add(word);\n\
    \        }\n        string maxWord = uniqueWords.Max();\n        int maxCount\
    \ = uniqueWords.Count(w => w.Contains(maxWord));\n        if (maxCount > 1) {\n\
    \            string firstWord = uniqueWords.First();\n            int firstCount\
    \ = uniqueWords.Count(w => w.Contains(firstWord));\n            if (firstCount\
    \ > maxCount) {\n                return firstWord;\n            }\n        }\n\
    \        return maxWord;", "        // Write your code here.\n        string maxWord\
    \ = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n\
    \            int count = 0;\n            foreach (char c in word) {\n        \
    \        if (char.IsLetter(c)) {\n                    count++;\n             \
    \   }\n            }\n            if (count > maxCount) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  return maxWord;", "        string maxWord = \"\";\n        string maxCount\
    \ = \"\";\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount.Length) {\n                maxCount = count;\n     \
    \           maxWord = word;\n            }\n        }\n        if (maxCount.Length\
    \ > 0) {\n            return maxWord;\n        }\n        return maxWord;", " \
    \       string maxWord = string.Empty;\n        int maxCount = 0;\n        foreach\
    \ (string word in words) {\n            int count = word.ToCharArray().Distinct().Count();\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;",
  "        string maxWord = string.Empty;\n        int maxCount = 0;\n        foreach\
    \ (string word in words) {\n            int count = word.Distinct().Count();\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;",
  "        string maxWord = string.Empty;\n        int maxCount = 0;\n        foreach\
    \ (string word in words) {\n            int count = word.ToCharArray().Distinct().Count();\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;"]
stop_tokens:
- "\n    }\n"
