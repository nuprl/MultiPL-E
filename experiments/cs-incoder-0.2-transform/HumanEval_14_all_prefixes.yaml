name: HumanEval_14_all_prefixes
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return list of all prefixes from shortest to longest of the\
  \ input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
  \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
  \ List<string> AllPrefixes(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
  \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new\
  \ List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"\
  asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
  WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
  WWW\"}))));\n    }\n\n}\n"
completions: ["        List<string> prefixes = new List<string>();\n        prefixes.Add(\"\
    \");\n        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        prefixes.Add(\"\
    \");\n        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        string\
    \ prefix = \"\";\n        for (int i = 0; i < str.Length; i++) {\n           \
    \ prefix = prefix + str[i];\n            prefixes.Add(prefix);\n        }\n  \
    \      return prefixes;", "        List<string> result = new List<string>();\n\
    \        foreach (string s in AllPrefixesRec(str, new List<string>())) {\n   \
    \         result.Add(s);\n        }\n        return result;", "        List<string>\
    \ result = new List<string>();\n        string prefix = \"\";\n        foreach\
    \ (char c in str) {\n            prefix = prefix + c;\n            result.Add(prefix);\n\
    \        }\n        return result;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        if (str == null)\n        \
    \    throw new ArgumentNullException(\"str\");\n        if (str.Length == 0)\n\
    \            return new List<string>();\n        var prefixes = new List<string>();\n\
    \        var prefix = new StringBuilder(str.Length);\n        prefix.Append(str[0]);\n\
    \        prefixes.Add(prefix.ToString());\n        for (int i = 1; i < str.Length;\
    \ i++) {\n            prefix.Append(str[i]);\n            prefixes.Add(prefix.ToString());\n\
    \        }\n        return prefixes;", "        if (str == null || str.Length\
    \ == 0)\n            return new List<string>();\n        List<string> prefixes\
    \ = new List<string>();\n        prefixes.Add(str);\n        prefixes.AddRange(AllPrefixes(str.Substring(0,\
    \ str.Length - 1)));\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        string prefix = \"\";\n        for (int i = 0;\
    \ i < str.Length; i++) {\n            prefix = prefix + str[i];\n            prefixes.Add(prefix);\n\
    \        }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        string prefix = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            prefix = prefix + str[i];\n            prefixes.Add(prefix);\n  \
    \      }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.AddRange(str.TakeWhile(x => x != '.').Select(x => x.ToString()));\n\
    \        prefixes.AddRange(str.SkipWhile(x => x != '.').TakeWhile(x => x != '.').Select(x\
    \ => x.ToString()));\n        return prefixes;", "        var result = new List<string>();\n\
    \        foreach (var c in str) {\n            result.AddRange(AllPrefixes(new\
    \ string[] { c }));\n        }\n        return result;", "        var result =\
    \ new List<string>();\n        var prefix = new StringBuilder(str.Length);\n \
    \       prefix.Append(str);\n        do {\n            result.Add(prefix.ToString());\n\
    \            prefix.Remove(0, 1);\n        } while (prefix.Length > 0);\n    \
    \    return result;", "        List<string> prefixes = new List<string>();\n \
    \       prefixes.AddRange(str.TakeWhile(x => x != '.'));\n        prefixes.AddRange(str.SkipWhile(x\
    \ => x != '.').TakeWhile(x => x != '.'));\n        return prefixes;", "      \
    \  List<string> prefixes = new List<string>();\n        prefixes.Add(\"\");\n\
    \        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        prefixes.AddRange(str.TakeWhile(c\
    \ => c != '\\0').Select(c => c.ToString()));\n        prefixes.AddRange(str.TakeWhile(c\
    \ => c != '\\0').Reverse().Select(c => c.ToString()));\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        prefixes.Add(\"\"\
    );\n        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return\
    \ prefixes;", "        if (str == null || str.Length == 0)\n            return\
    \ new List<string>();\n        List<string> prefixes = new List<string>();\n \
    \       prefixes.Add(str);\n        prefixes.AddRange(AllPrefixes(str.Substring(0,\
    \ str.Length - 1)));\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        string prefix = \"\";\n        for (int i = 0;\
    \ i < str.Length; i++) {\n            prefix = prefix + str[i];\n            prefixes.Add(prefix);\n\
    \        }\n        return prefixes;", "        List<string> result = new List<string>();\n\
    \        foreach (char c in str) {\n            result.AddRange(AllPrefixes(new\
    \ string[]{c}));\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
