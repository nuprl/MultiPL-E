language: cs
name: HumanEval_158_find_max
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCharCount = 0;\n        foreach (string word in words) {\n   \
    \         int charCount = 0;\n            foreach (char c in word) {\n       \
    \         charCount++;\n            }\n            if (charCount > maxCharCount)\
    \ {\n                maxCharCount = charCount;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b19798383f04fd290a27c6d0067796b>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        foreach (string word in words)\
    \ {\n            int maxCharCount = 0;\n            foreach (char c in word) {\n\
    \                maxCharCount = Math.Max(maxCharCount, word.Count(c => c == c));\n\
    \            }\n            if (maxCharCount > maxChars.Length) {\n          \
    \      maxChars = maxCharCount;\n                maxWord = word;\n           \
    \ }\n        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd4htlvsk.cs(28,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmpd4htlvsk.cs(25,71): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659798697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        List<string> maxWords = new List<string>();\n\
    \        List<string> maxWordsCounts = new List<string>();\n        foreach (string\
    \ word in words) {\n            int maxCount = 0;\n            foreach (char c\
    \ in word) {\n                if (maxCount < maxWordsCounts.Count(x => x == c))\
    \ {\n                    maxCount = maxWordsCounts.Count(x => x == c);\n     \
    \           }\n            }\n            maxWords.Add(word);\n            maxWordsCounts.Add(maxCount.ToString());\n\
    \        }\n        if (maxWords.Count > 1) {\n            string maxWord = maxWords.OrderByDescending(x\
    \ => x.Length).First();\n            string maxWordCount = maxWordsCounts.OrderByDescending(x\
    \ => x).First();\n            if (maxWordCount > maxWord.Length) {\n         \
    \       return maxWord;\n            } else {\n                return maxWords[0];\n\
    \            }\n        } else {\n            return maxWords[0];\n        }\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp140_yo6f.cs(25,58): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmp140_yo6f.cs(26,58): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmp140_yo6f.cs(35,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''string'' and ''int''

    '
  timestamp: 1659798697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   string maxChar = \"\";\n        string maxCharCount = 0;\n        foreach\
    \ (string word in words) {\n            char[] chars = word.ToCharArray();\n \
    \           int maxCharCount = 0;\n            foreach (char c in chars) {\n \
    \               if (chars.Contains(c)) {\n                    maxCharCount++;\n\
    \                }\n            }\n            if (maxCharCount > maxChar.Length)\
    \ {\n                maxChar = maxCharCount;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb6hjcrg1.cs(22,31): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmpb6hjcrg1.cs(25,17): error CS0136: A local or parameter named ''maxCharCount''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpb6hjcrg1.cs(32,27): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.ToCharArray().Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <458acba049744000a631b29031c0102c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <458acba049744000a631b29031c0102c>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCharCount = 0;\n        foreach (string word in words) {\n   \
    \         int charCount = 0;\n            foreach (char c in word) {\n       \
    \         charCount++;\n            }\n            if (charCount > maxCharCount)\
    \ {\n                maxCharCount = charCount;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b19798383f04fd290a27c6d0067796b>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a624cb018226499485119f0384cee405>:0 \n"
  stdout: ''
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        List<string> uniqueWords = new\
    \ List<string>();\n        foreach (string word in words) {\n            uniqueWords.Add(word);\n\
    \        }\n        string maxWord = uniqueWords.Max();\n        int maxCount\
    \ = uniqueWords.Count(w => w.Contains(maxWord));\n        if (maxCount > 1) {\n\
    \            string firstWord = uniqueWords.First();\n            int firstCount\
    \ = uniqueWords.Count(w => w.Contains(firstWord));\n            if (firstCount\
    \ > maxCount) {\n                return firstWord;\n            }\n        }\n\
    \        return maxWord;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <389bd5fcc9da41f1a8bc87e006934142>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <389bd5fcc9da41f1a8bc87e006934142>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Write your code here.\n   \
    \     string maxWord = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (char.IsLetter(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > maxCount) {\n     \
    \           maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8bf3da1222a492daf2b661a11bd6ecd>:0 \n"
  stdout: ''
  timestamp: 1659798539
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   string maxCount = \"\";\n        foreach (string word in words) {\n      \
    \      int count = 0;\n            foreach (char c in word) {\n              \
    \  if (char.IsLetter(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > maxCount.Length) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  if (maxCount.Length > 0) {\n            return maxWord;\n        }\n      \
    \  return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm3grvd5n.cs(30,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
