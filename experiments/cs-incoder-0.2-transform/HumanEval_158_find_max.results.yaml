language: cs
name: HumanEval_158_find_max
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCharCount = 0;\n        foreach (string word in words) {\n   \
    \         int charCount = 0;\n            foreach (char c in word) {\n       \
    \         charCount++;\n            }\n            if (charCount > maxCharCount)\
    \ {\n                maxCharCount = charCount;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b19798383f04fd290a27c6d0067796b>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        foreach (string word in words)\
    \ {\n            int maxCharCount = 0;\n            foreach (char c in word) {\n\
    \                maxCharCount = Math.Max(maxCharCount, word.Count(c => c == c));\n\
    \            }\n            if (maxCharCount > maxChars.Length) {\n          \
    \      maxChars = maxCharCount;\n                maxWord = word;\n           \
    \ }\n        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd4htlvsk.cs(28,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmpd4htlvsk.cs(25,71): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659798697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        List<string> maxWords = new List<string>();\n\
    \        List<string> maxWordsCounts = new List<string>();\n        foreach (string\
    \ word in words) {\n            int maxCount = 0;\n            foreach (char c\
    \ in word) {\n                if (maxCount < maxWordsCounts.Count(x => x == c))\
    \ {\n                    maxCount = maxWordsCounts.Count(x => x == c);\n     \
    \           }\n            }\n            maxWords.Add(word);\n            maxWordsCounts.Add(maxCount.ToString());\n\
    \        }\n        if (maxWords.Count > 1) {\n            string maxWord = maxWords.OrderByDescending(x\
    \ => x.Length).First();\n            string maxWordCount = maxWordsCounts.OrderByDescending(x\
    \ => x).First();\n            if (maxWordCount > maxWord.Length) {\n         \
    \       return maxWord;\n            } else {\n                return maxWords[0];\n\
    \            }\n        } else {\n            return maxWords[0];\n        }\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp140_yo6f.cs(25,58): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmp140_yo6f.cs(26,58): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmp140_yo6f.cs(35,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''string'' and ''int''

    '
  timestamp: 1659798697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   string maxChar = \"\";\n        string maxCharCount = 0;\n        foreach\
    \ (string word in words) {\n            char[] chars = word.ToCharArray();\n \
    \           int maxCharCount = 0;\n            foreach (char c in chars) {\n \
    \               if (chars.Contains(c)) {\n                    maxCharCount++;\n\
    \                }\n            }\n            if (maxCharCount > maxChar.Length)\
    \ {\n                maxChar = maxCharCount;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb6hjcrg1.cs(22,31): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmpb6hjcrg1.cs(25,17): error CS0136: A local or parameter named ''maxCharCount''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpb6hjcrg1.cs(32,27): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.ToCharArray().Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <458acba049744000a631b29031c0102c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <458acba049744000a631b29031c0102c>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCharCount = 0;\n        foreach (string word in words) {\n   \
    \         int charCount = 0;\n            foreach (char c in word) {\n       \
    \         charCount++;\n            }\n            if (charCount > maxCharCount)\
    \ {\n                maxCharCount = charCount;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b19798383f04fd290a27c6d0067796b>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a624cb018226499485119f0384cee405>:0 \n"
  stdout: ''
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        List<string> uniqueWords = new\
    \ List<string>();\n        foreach (string word in words) {\n            uniqueWords.Add(word);\n\
    \        }\n        string maxWord = uniqueWords.Max();\n        int maxCount\
    \ = uniqueWords.Count(w => w.Contains(maxWord));\n        if (maxCount > 1) {\n\
    \            string firstWord = uniqueWords.First();\n            int firstCount\
    \ = uniqueWords.Count(w => w.Contains(firstWord));\n            if (firstCount\
    \ > maxCount) {\n                return firstWord;\n            }\n        }\n\
    \        return maxWord;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <389bd5fcc9da41f1a8bc87e006934142>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <389bd5fcc9da41f1a8bc87e006934142>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Write your code here.\n   \
    \     string maxWord = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (char.IsLetter(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > maxCount) {\n     \
    \           maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8bf3da1222a492daf2b661a11bd6ecd>:0 \n"
  stdout: ''
  timestamp: 1659798539
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   string maxCount = \"\";\n        foreach (string word in words) {\n      \
    \      int count = 0;\n            foreach (char c in word) {\n              \
    \  if (char.IsLetter(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > maxCount.Length) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  if (maxCount.Length > 0) {\n            return maxWord;\n        }\n      \
    \  return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm3grvd5n.cs(30,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Length;\n            if (count > maxCount) {\n        \
    \        maxCount = count;\n                maxWord = word;\n            }\n \
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea519f2ecd3640cd88814daba95ae4c6>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChar = string.Empty;\n        int maxCount = 0;\n        foreach\
    \ (string word in words) {\n            int count = 0;\n            foreach (char\
    \ c in word) {\n                if (char.IsLetter(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > maxCount) {\n     \
    \           maxCount = count;\n                maxWord = word;\n             \
    \   maxChar = string.Empty;\n            }\n        }\n        if (maxCount ==\
    \ 0) {\n            return maxWord;\n        }\n        foreach (string word in\
    \ words) {\n            int count = 0;\n            foreach (char c in word) {\n\
    \                if (char.IsLetter(c)) {\n                    count++;\n     \
    \           }\n            }\n            if (count > maxCount) {\n          \
    \      maxCount = count;\n                maxWord = word;\n                maxChar\
    \ = string.Empty;\n            }\n        }\n        if (maxCount == 0) {\n  \
    \          return maxWord;\n        }\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (char.IsLetter(c)) {\n                    count++;\n         \
    \       }\n            }\n            if (count > maxCount) {\n              \
    \  maxCount = count;\n                maxWord = word;\n                maxChar\
    \ = string.Empty;\n            }\n        }\n        if (maxCount == 0) {\n  \
    \          return maxWord;\n        }\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (char.IsLetter(c)) {\n                    count++;\n         \
    \       }\n            }\n            if (count > maxCount) {\n              \
    \  maxCount = count;\n                maxWord = word;\n                maxChar\
    \ = string.Empty;\n            }\n        }\n        if (maxCount == 0) {\n  \
    \          return maxWord;\n        }\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (char.IsLetter(c)) {\n                    count++;\n         \
    \       }\n            }\n            if (count > maxCount) {\n              \
    \  maxCount = count;\n                maxWord = word;\n                maxChar\
    \ = string.Empty;\n            }\n        }\n        if (maxCount == 0) {\n  \
    \          return maxWord;\n        }\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (char.IsLetter(c)) {\n                    count++;\n         \
    \       }\n            }\n            if (count > maxCount) {\n              \
    \  maxCount = count;\n                maxWord = word;\n                maxChar\
    \ = string.Empty;\n            }\n        }\n        if (maxCount == 0) {\n  \
    \          return maxWord;\n        }\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (char.\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbfg2mvmm.cs(122,26): error CS1001: Identifier expected

    /tmp/tmpbfg2mvmm.cs(122,26): error CS1026: ) expected

    /tmp/tmpbfg2mvmm.cs(122,26): error CS1525: Invalid expression term ''}''

    /tmp/tmpbfg2mvmm.cs(122,26): error CS1002: ; expected

    /tmp/tmpbfg2mvmm.cs(124,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpbfg2mvmm.cs(137,2): error CS1513: } expected

    '
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = -1;\n        foreach (string word in words) {\n      \
    \      int count = word.Length;\n            if (count > maxCount) {\n       \
    \         maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82b0b70322004790b9a20dcf73c9e649>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (char.IsLetter(c)) {\n                    count++;\n         \
    \       }\n            }\n            if (count > int.Parse(maxCount)) {\n   \
    \             maxWord = word;\n                maxCount = count.ToString();\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0005f]\
    \ in <4184f4bd746d441895145b21006ba408>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <4184f4bd746d441895145b21006ba408>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.FormatException: Input string was not in a correct format.\n\
    \  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String\
    \ overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0005f]\
    \ in <4184f4bd746d441895145b21006ba408>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <4184f4bd746d441895145b21006ba408>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        foreach (string word in words)\
    \ {\n            int charCount = 0;\n            foreach (char c in word) {\n\
    \                charCount++;\n            }\n            if (charCount > maxChars.Length)\
    \ {\n                maxChars = charCount.ToString();\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b69eff404e9b46db8e77f1c104f81e18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b69eff404e9b46db8e77f1c104f81e18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.Distinct().Count();\n            if (count > maxCount) {\n    \
    \            maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b9b474dc4f124b189131806ca2991282>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b9b474dc4f124b189131806ca2991282>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Write your code here\n    \
    \    string maxWord = string.Empty;\n        int maxCount = 0;\n        foreach\
    \ (string word in words) {\n            int count = word.ToCharArray().Distinct().Count();\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a2bf2781f1fc4839af444d77c993270a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a2bf2781f1fc4839af444d77c993270a>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord\
    \ = null;\n        foreach (string word in words) {\n            int uniqueChars\
    \ = word.Distinct().Count();\n            if (uniqueChars > max) {\n         \
    \       max = uniqueChars;\n                maxWord = word;\n            }\n \
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d6bbc3f6660c4a10b911f635ba6fd6e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d6bbc3f6660c4a10b911f635ba6fd6e8>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        string maxWord2 = string.Empty;\n\
    \        string maxChars2 = string.Empty;\n        foreach (string word in words)\
    \ {\n            char[] chars = word.ToCharArray();\n            int uniqueChars\
    \ = chars.Distinct().Count();\n            if (uniqueChars > maxChars.Length)\
    \ {\n                maxChars = uniqueChars.ToString();\n                maxWord\
    \ = word;\n            }\n            if (uniqueChars > maxChars2.Length) {\n\
    \                maxChars2 = uniqueChars.ToString();\n                maxWord2\
    \ = word;\n            }\n        }\n        if (maxWord.Length > maxWord2.Length)\
    \ {\n            return maxWord;\n        }\n        return maxWord2;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b12684a50dd24eb581fdee390c18d334>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b12684a50dd24eb581fdee390c18d334>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9720c7cab619412db6f2077916d49e63>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        char[] charArray = new char[words.Count];\n\
    \        int[] countArray = new int[words.Count];\n        foreach (string word\
    \ in words) {\n            char[] charArray2 = word.ToCharArray();\n         \
    \   foreach (char c in charArray2) {\n                countArray[charArray2.IndexOf(c)]\
    \ += 1;\n            }\n        }\n        string maxWord = string.Empty;\n  \
    \      int maxCount = 0;\n        foreach (char c in charArray) {\n          \
    \  if (countArray[charArray.IndexOf(c)] > maxCount) {\n                maxCount\
    \ = countArray[charArray.IndexOf(c)];\n                maxWord = words[charArray.IndexOf(c)];\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjbekg60u.cs(25,39): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmpjbekg60u.cs(31,38): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmpjbekg60u.cs(32,49): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmpjbekg60u.cs(33,43): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    '
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.ToCharArray().Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <458acba049744000a631b29031c0102c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <458acba049744000a631b29031c0102c>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.Distinct().Count();\n            if (count >\
    \ maxCount)\n            {\n                maxWord = word;\n                maxCount\
    \ = count;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsfd8hns1.cs(24,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmpsfd8hns1.cs(27,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord\
    \ = \"\";\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                count++;\n          \
    \  }\n            if (count > max) {\n                max = count;\n         \
    \       maxWord = word;\n            }\n        }\n        return maxWord;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7aa46856b384806b7e8e3a427f7abb0>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                count++;\n\
    \            }\n            if (count > maxCount) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <31d0a9c01d2c402eb877deabad606381>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string max = null;\n        int\
    \ maxCount = 0;\n        foreach (string word in words) {\n            int count\
    \ = 0;\n            foreach (char c in word) {\n                if (words.Contains(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                max = word;\n                maxCount\
    \ = count;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpav_porpa.cs(25,36): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord\
    \ = \"\";\n        foreach (string word in words) {\n            int uniqueChars\
    \ = word.Distinct().Count();\n            if (uniqueChars > max) {\n         \
    \       max = uniqueChars;\n                maxWord = word;\n            }\n \
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <07e58919fb6a4002a761eebe446aa58c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <07e58919fb6a4002a761eebe446aa58c>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        string currentWord = string.Empty;\n\
    \        string currentCount = string.Empty;\n        foreach (string word in\
    \ words) {\n            currentWord = word;\n            currentCount = word.Length;\n\
    \            foreach (char c in word) {\n                currentCount += 1;\n\
    \            }\n            if (currentCount > maxCount) {\n                maxCount\
    \ = currentCount;\n                maxWord = currentWord;\n            }\n   \
    \     }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr38a4oil.cs(26,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmpr38a4oil.cs(30,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659823905
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            count++;\n            }\n            if (count > int.Parse(maxCount))\
    \ {\n                maxCount = count.ToString();\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00050]\
    \ in <bb79b50dfa56442fa695c5b2312a7a00>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <bb79b50dfa56442fa695c5b2312a7a00>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.FormatException: Input string was not in a correct format.\n\
    \  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String\
    \ overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00050]\
    \ in <bb79b50dfa56442fa695c5b2312a7a00>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <bb79b50dfa56442fa695c5b2312a7a00>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.ToCharArray().Distinct().Count();\n        \
    \    if (count > int.Parse(maxCount)) {\n                maxWord = word;\n   \
    \             maxCount = count.ToString();\n            }\n        }\n       \
    \ return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00032]\
    \ in <ccdbc82eafc949fdb33b9eeadb8dbec9>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <ccdbc82eafc949fdb33b9eeadb8dbec9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.FormatException: Input string was not in a correct format.\n\
    \  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String\
    \ overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00032]\
    \ in <ccdbc82eafc949fdb33b9eeadb8dbec9>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <ccdbc82eafc949fdb33b9eeadb8dbec9>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int maxCount = 0;\n        string\
    \ maxWord = null;\n        foreach (string word in words) {\n            int count\
    \ = word.Distinct().Count();\n            if (count > maxCount) {\n          \
    \      maxCount = count;\n                maxWord = word;\n            }\n   \
    \     }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fed68c8cd0c461899cd40433d4b1c55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fed68c8cd0c461899cd40433d4b1c55>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCharCount = 0;\n        foreach (string word in words) {\n   \
    \         int charCount = 0;\n            foreach (char c in word) {\n       \
    \         charCount++;\n            }\n            if (charCount > maxCharCount)\
    \ {\n                maxCharCount = charCount;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b19798383f04fd290a27c6d0067796b>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        char[] charArray = words.Select(x\
    \ => x.ToCharArray()).ToArray();\n        Array.Sort(charArray);\n        string\
    \ result = \"\";\n        int maxCount = 0;\n        foreach (char c in charArray)\
    \ {\n            if (maxCount < charArray.Count(x => x == c)) {\n            \
    \    maxCount = charArray.Count(x => x == c);\n                result = charArray.First(x\
    \ => x == c).ToString();\n            }\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppbb2_p2s.cs(20,28): error CS0029: Cannot implicitly convert type ''char[][]''
    to ''char[]''

    '
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string max = null;\n        int\
    \ maxCount = 0;\n        foreach (string word in words) {\n            int count\
    \ = word.Distinct().Count();\n            if (count > maxCount) {\n          \
    \      max = word;\n                maxCount = count;\n            }\n       \
    \ }\n        return max;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <268a0dd9d1b343edb47f0a022e718501>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <268a0dd9d1b343edb47f0a022e718501>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.Distinct().Count();\n            if (count >\
    \ int.Parse(maxCount)) {\n                maxWord = word;\n                maxCount\
    \ = count;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2ukejpsa.cs(26,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9720c7cab619412db6f2077916d49e63>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        char[] chars = new char[words.Max(w\
    \ => w.Length)];\n        List<string> uniqueWords = new List<string>();\n   \
    \     foreach (string word in words) {\n            char[] wordChars = word.ToCharArray();\n\
    \            int uniqueChars = 0;\n            foreach (char c in wordChars) {\n\
    \                if (chars[c] == 0) {\n                    chars[c] = 1;\n   \
    \                 uniqueChars++;\n                }\n            }\n         \
    \   if (uniqueChars > uniqueWords.Count) {\n                uniqueWords.Add(word);\n\
    \            }\n        }\n        string maxWord = uniqueWords.OrderByDescending(w\
    \ => w.Length).First();\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxchrk65w.cs(27,32): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = 0;\n            foreach (char c in word) {\n               \
    \ if (char.IsLetter(c)) {\n                    count++;\n                }\n \
    \           }\n            if (count > maxCount) {\n                maxCount =\
    \ count;\n                maxWord = word;\n            }\n        }\n        return\
    \ maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e688bd86a1d949618333c1db1cf1a150>:0 \n"
  stdout: ''
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9720c7cab619412db6f2077916d49e63>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        foreach (string word in words)\
    \ {\n            int charCount = 0;\n            foreach (char c in word) {\n\
    \                charCount++;\n            }\n            if (charCount > maxChars.Length)\
    \ {\n                maxChars = charCount.ToString();\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b69eff404e9b46db8e77f1c104f81e18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b69eff404e9b46db8e77f1c104f81e18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        foreach (string word in words)\
    \ {\n            int max = 0;\n            int maxCharCount = 0;\n           \
    \ foreach (char c in word) {\n                if (char.IsLetter(c)) {\n      \
    \              int count = word.Count(c => c == c);\n                    if (count\
    \ > max) {\n                        max = count;\n                        maxCharCount\
    \ = 1;\n                    } else if (count == max) {\n                     \
    \   maxCharCount++;\n                    }\n                }\n            }\n\
    \            if (maxCharCount > maxChars.Length) {\n                maxChars =\
    \ maxCharCount;\n                maxWord = word;\n            }\n        }\n \
    \       return maxWord;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwvr1os2e.cs(37,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmpwvr1os2e.cs(27,49): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord\
    \ = \"\";\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > max) {\n                max = count;\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c696383535ad4f0f931fa09a3e5a4d0c>:0 \n"
  stdout: ''
  timestamp: 1659823906
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.Distinct().Count();\n            if (count >\
    \ maxCount) {\n                maxCount = count;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9den0gxs.cs(24,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmp9den0gxs.cs(25,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.ToCharArray().Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b952ca89b73d4692be2d185a317d0574>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b952ca89b73d4692be2d185a317d0574>:0 \n"
  stdout: ''
  timestamp: 1659823906
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        List<string> uniqueChars = new\
    \ List<string>();\n        foreach (string word in words) {\n            foreach\
    \ (char c in word) {\n                if (!uniqueChars.Contains(c)) {\n      \
    \              uniqueChars.Add(c);\n                }\n            }\n       \
    \ }\n        string maxWord = uniqueChars.OrderByDescending(c => c.Length).First();\n\
    \        return maxWord;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvvvuwua0.cs(23,43): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpvvvuwua0.cs(24,37): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659823906
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Write your code here\n    \
    \    string maxWord = string.Empty;\n        string maxChar = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = 0;\n            foreach (char c in word) {\n               \
    \ if (char.IsLetter(c)) {\n                    count++;\n                }\n \
    \           }\n            if (count > maxCount) {\n                maxCount =\
    \ count;\n                maxWord = word;\n                maxChar = string.Empty;\n\
    \            }\n        }\n        if (maxCount == 0) {\n            return maxWord;\n\
    \        }\n        foreach (string word in words) {\n            int count =\
    \ 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n                maxChar = string.Empty;\n            }\n\
    \        }\n        if (maxCount == 0) {\n            return maxWord;\n      \
    \  }\n        foreach (string word in words) {\n            int count = 0;\n \
    \           foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n                maxChar = string.Empty;\n            }\n\
    \        }\n        if (maxCount == 0) {\n            return maxWord;\n      \
    \  }\n        foreach (string word in words) {\n            int count = 0;\n \
    \           foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n                maxChar = string.Empty;\n            }\n\
    \        }\n        if (maxCount == 0) {\n            return maxWord;\n      \
    \  }\n        foreach (string word in words) {\n            int count = 0;\n \
    \           foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n                maxChar = string.Empty;\n            }\n\
    \        }\n        if (maxCount == 0) {\n            return maxWord;\n      \
    \  }\n        foreach (string word in words) {\n            int count = 0;\n \
    \           foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n                maxChar = string.Empty;\n            }\n\
    \        }\n        if (maxCount == 0) {\n            return maxWord;\n      \
    \  }\n        foreach (string word in words) {\n            int count = 0;\n \
    \           foreach (char c in word\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxfvywxaz.cs(122,36): error CS1026: ) expected

    /tmp/tmpxfvywxaz.cs(122,36): error CS1525: Invalid expression term ''}''

    /tmp/tmpxfvywxaz.cs(122,36): error CS1002: ; expected

    /tmp/tmpxfvywxaz.cs(124,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpxfvywxaz.cs(137,2): error CS1513: } expected

    '
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        foreach (string word in words)\
    \ {\n            int maxCharsCount = 0;\n            foreach (char c in word)\
    \ {\n                if (maxCharsCount < word.Count(x => x == c)) {\n        \
    \            maxCharsCount = word.Count(x => x == c);\n                    maxChars\
    \ = c;\n                }\n            }\n            if (maxCharsCount > maxWord.Count(x\
    \ => x == maxChars)) {\n                maxWord = word;\n            }\n     \
    \   }\n        return maxWord;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\"\
    , (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdzxgsddy.cs(27,32): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpdzxgsddy.cs(30,52): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659823906
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (char.IsLetter(c)) {\n                    count++;\n         \
    \       }\n            }\n            if (count > int.Parse(maxCount)) {\n   \
    \             maxWord = word;\n                maxCount = count.ToString();\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0005f]\
    \ in <4184f4bd746d441895145b21006ba408>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <4184f4bd746d441895145b21006ba408>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.FormatException: Input string was not in a correct format.\n\
    \  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String\
    \ overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0005f]\
    \ in <4184f4bd746d441895145b21006ba408>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <4184f4bd746d441895145b21006ba408>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Length;\n            if (count > maxCount) {\n        \
    \        maxCount = count;\n                maxWord = word;\n            }\n \
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea519f2ecd3640cd88814daba95ae4c6>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (char.IsLetter(c)) {\n                    count++;\n         \
    \       }\n            }\n            if (count > int.Parse(maxCount)) {\n   \
    \             maxWord = word;\n                maxCount = count.ToString();\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0005f]\
    \ in <4184f4bd746d441895145b21006ba408>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <4184f4bd746d441895145b21006ba408>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.FormatException: Input string was not in a correct format.\n\
    \  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String\
    \ overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0005f]\
    \ in <4184f4bd746d441895145b21006ba408>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <4184f4bd746d441895145b21006ba408>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.Length;\n            if (maxCount.Length > 0)\
    \ {\n                if (maxCount.Length < count) {\n                    maxCount\
    \ = maxCount;\n                    maxWord = word;\n                }\n      \
    \      }\n            else {\n                maxCount = count;\n            \
    \    maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuqul5epd.cs(31,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmpuqul5epd.cs(26,21): warning CS1717: Assignment made to same variable;
    did you mean to assign something else?

    '
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 1;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21c62a5d700f4c059ef983da8072c5be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21c62a5d700f4c059ef983da8072c5be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int maxCount = 0;\n        string\
    \ maxWord = \"\";\n        foreach (string word in words) {\n            int count\
    \ = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <22cc2748cbf14dc8a828427f1bee60b4>:0 \n"
  stdout: ''
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int maxCount = 0;\n        string\
    \ maxWord = null;\n        foreach (string word in words) {\n            int count\
    \ = word.ToCharArray().Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <017b855800464b1090c1b99a2c1114a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <017b855800464b1090c1b99a2c1114a0>:0 \n"
  stdout: ''
  timestamp: 1659823906
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChar = string.Empty;\n        int maxCount = 0;\n        foreach\
    \ (string word in words) {\n            int count = 0;\n            foreach (char\
    \ c in word) {\n                count++;\n            }\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n                maxChar = string.Empty;\n                foreach (char\
    \ c in word) {\n                    if (c != maxChar) {\n                    \
    \    maxChar = c;\n                    }\n                }\n            }\n \
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx2rjen8p.cs(33,25): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpx2rjen8p.cs(34,35): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = 0;\n            foreach (char c in word) {\n               \
    \ count++;\n            }\n            if (count > maxCount) {\n             \
    \   maxCount = count;\n                maxWord = word;\n            }\n      \
    \  }\n        return maxWord;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\"\
    , (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d95eac02a2514b16bdcfb3e107c4df6a>:0 \n"
  stdout: ''
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCharCount = 0;\n        foreach (string word in words) {\n   \
    \         int charCount = 0;\n            foreach (char c in word) {\n       \
    \         charCount++;\n            }\n            if (charCount > maxCharCount)\
    \ {\n                maxCharCount = charCount;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b19798383f04fd290a27c6d0067796b>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord\
    \ = null;\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > max) {\n                max = count;\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <809d8fced82a484dacd2d271ca3ce6a3>:0 \n"
  stdout: ''
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = -1;\n        foreach (string word in words) {\n      \
    \      int count = word.Length;\n            if (count > maxCount) {\n       \
    \         maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82b0b70322004790b9a20dcf73c9e649>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 1;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5dc2893e6ee4c558e9c7ac3c45f0cd2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5dc2893e6ee4c558e9c7ac3c45f0cd2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        char[] chars = new char[words.Count];\n\
    \        words.ForEach(w => w.ToCharArray().CopyTo(chars, 0));\n        Array.Sort(chars);\n\
    \        string result = \"\";\n        int maxCount = 0;\n        for (int i\
    \ = 0; i < chars.Length; i++) {\n            if (chars[i] == chars[maxCount])\
    \ {\n                maxCount++;\n            }\n            else {\n        \
    \        if (maxCount > 0) {\n                    result = chars[maxCount - 1];\n\
    \                    break;\n                }\n                else {\n     \
    \               maxCount = 1;\n                }\n            }\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdy3p917f.cs(31,30): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659823906
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        List<string> uniqueChars = new\
    \ List<string>();\n        foreach (string word in words) {\n            foreach\
    \ (char c in word) {\n                if (!uniqueChars.Contains(c)) {\n      \
    \              uniqueChars.Add(c);\n                }\n            }\n       \
    \ }\n        string maxWord = uniqueChars.OrderByDescending(c => c.Length).First();\n\
    \        return maxWord;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvvvuwua0.cs(23,43): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpvvvuwua0.cs(24,37): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659823906
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        string maxWord2 = string.Empty;\n\
    \        string maxChars2 = string.Empty;\n        foreach (string word in words)\
    \ {\n            int maxCharCount = 0;\n            int maxCharCount2 = 0;\n \
    \           foreach (char c in word) {\n                maxCharCount++;\n    \
    \            maxCharCount2 += c;\n            }\n            if (maxCharCount\
    \ > maxCharCount2) {\n                maxChars = maxCharCount;\n             \
    \   maxWord = word;\n            } else if (maxCharCount2 == maxCharCount) {\n\
    \                maxWord2 = word;\n            }\n        }\n        if (maxWord.Length\
    \ > maxWord2.Length) {\n            return maxWord;\n        } else {\n      \
    \      return maxWord2;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf8dnhxjz.cs(32,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.Distinct().Count();\n            if (count > maxCount) {\n    \
    \            maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa14ff39620b49d0aeac8c1bb1f4faee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa14ff39620b49d0aeac8c1bb1f4faee>:0 \n"
  stdout: ''
  timestamp: 1659823906
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        string maxWord2 = string.Empty;\n\
    \        string maxCount2 = string.Empty;\n        string maxWord3 = string.Empty;\n\
    \        string maxCount3 = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.ToCharArray().Distinct().Count();\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n            }\n            if (count > maxCount2) {\n  \
    \              maxCount2 = count;\n                maxWord2 = word;\n        \
    \    }\n            if (count > maxCount3) {\n                maxCount3 = count;\n\
    \                maxWord3 = word;\n            }\n        }\n        if (maxCount\
    \ > maxCount2 && maxCount > maxCount3) {\n            return maxWord;\n      \
    \  }\n        if (maxCount2 > maxCount3) {\n            return maxWord2;\n   \
    \     }\n        return maxWord3;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzihrp0zo.cs(28,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmpzihrp0zo.cs(29,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmpzihrp0zo.cs(32,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmpzihrp0zo.cs(33,29): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmpzihrp0zo.cs(36,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmpzihrp0zo.cs(37,29): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmpzihrp0zo.cs(41,13): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''string'' and ''string''

    /tmp/tmpzihrp0zo.cs(41,37): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''string'' and ''string''

    /tmp/tmpzihrp0zo.cs(44,13): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.ToCharArray().Distinct().Count();\n        \
    \    if (count > maxCount.Length) {\n                maxCount = count;\n     \
    \           maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_r2nf6yf.cs(25,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659823906
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        List<string> uniqueWords = new\
    \ List<string>();\n        foreach (string word in words) {\n            foreach\
    \ (char c in word) {\n                if (!uniqueWords.Contains(c)) {\n      \
    \              uniqueWords.Add(c);\n                }\n            }\n       \
    \ }\n        string maxWord = uniqueWords.Max();\n        string maxWord2 = uniqueWords.OrderBy(x\
    \ => x).First();\n        return maxWord.Equals(maxWord2) ? maxWord : maxWord2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2hmrzt20.cs(23,43): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp2hmrzt20.cs(24,37): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int maxCount = 0;\n        string\
    \ maxWord = \"\";\n        foreach (string word in words) {\n            int count\
    \ = word.Distinct().Count();\n            if (count > maxCount) {\n          \
    \      maxCount = count;\n                maxWord = word;\n            }\n   \
    \     }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <635049e94481483e9b38db153917049b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <635049e94481483e9b38db153917049b>:0 \n"
  stdout: ''
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Your code goes here\n     \
    \   string maxWord = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (char.IsLetter(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > maxCount) {\n     \
    \           maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b37b4a0ae704dfbbfad385d512cbe32>:0 \n"
  stdout: ''
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        foreach (string word in words)\
    \ {\n            int maxCharCount = 0;\n            foreach (char c in word) {\n\
    \                if (char.IsLetter(c)) {\n                    maxCharCount++;\n\
    \                }\n            }\n            if (maxCharCount > maxChars.Length)\
    \ {\n                maxChars = maxCharCount;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprsaittkk.cs(30,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        int maxCharCount = 0;\n    \
    \    foreach (string word in words) {\n            int charCount = 0;\n      \
    \      foreach (char c in word) {\n                charCount++;\n            }\n\
    \            if (charCount > maxCharCount) {\n                maxCharCount = charCount;\n\
    \                maxChars = word;\n            }\n        }\n        if (maxCharCount\
    \ > 1) {\n            maxWord = maxChars;\n        }\n        return maxWord;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1577fe2260c849f893da82617bd22d43>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1577fe2260c849f893da82617bd22d43>:0 \n"
  stdout: ''
  timestamp: 1659823907
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        char[] chars = new char[words.Max(w\
    \ => w.Length)];\n        foreach (string word in words) {\n            char[]\
    \ wchars = word.ToCharArray();\n            int count = 0;\n            foreach\
    \ (char c in wchars) {\n                if (chars[c] == 0) {\n               \
    \     chars[c] = 1;\n                    count++;\n                }\n       \
    \     }\n            if (count > words.Max(w => w.Count(c => c == c))) {\n   \
    \             return word;\n            }\n        }\n        return null;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppvpmp69y.cs(26,32): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmppvpmp69y.cs(30,53): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659823907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 1;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5dc2893e6ee4c558e9c7ac3c45f0cd2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5dc2893e6ee4c558e9c7ac3c45f0cd2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823906
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        char[] chars = new char[words.Max(w\
    \ => w.Length)];\n        List<string> unique = new List<string>();\n        foreach\
    \ (string word in words) {\n            int count = 0;\n            foreach (char\
    \ c in word) {\n                if (chars[c] == 0) {\n                    chars[c]\
    \ = 1;\n                    count++;\n                }\n            }\n     \
    \       if (count > unique.Count) {\n                unique.Add(word);\n     \
    \       }\n        }\n        string max = null;\n        foreach (string word\
    \ in unique) {\n            int count = 0;\n            foreach (char c in word)\
    \ {\n                if (chars[c] == 0) {\n                    chars[c] = 1;\n\
    \                    count++;\n                }\n            }\n            if\
    \ (count > max) {\n                max = word;\n            }\n        }\n   \
    \     if (max != null) {\n            char[] chars2 = new char[max.Length];\n\
    \            int count = 0;\n            foreach (char c in max) {\n         \
    \       if (chars[c] == 0) {\n                    chars[c] = 1;\n            \
    \        count++;\n                }\n            }\n            string max2 =\
    \ null;\n            foreach (string word in unique) {\n                int count\
    \ = 0;\n                foreach (char c in word) {\n                    if (chars[c]\
    \ == 0) {\n                        chars[c] = 1;\n                        count++;\n\
    \                    }\n                }\n                if (count > max2) {\n\
    \                    max2 = word;\n                }\n            }\n        \
    \    if (max2 != null) {\n                chars = chars.Concat(max2.ToCharArray()).ToArray();\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       foreach (char c in chars) {\n            sb.Append(c);\n        }\n  \
    \      return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\"\
    , (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6k9zjm1j.cs(26,32): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6k9zjm1j.cs(39,32): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6k9zjm1j.cs(43,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmp6k9zjm1j.cs(52,32): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6k9zjm1j.cs(58,21): error CS0136: A local or parameter named ''count''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp6k9zjm1j.cs(61,36): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6k9zjm1j.cs(65,21): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    '
  timestamp: 1659823907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        char[] chars = new char[words.Max(w\
    \ => w.Length)];\n        words.ForEach(w => w.ToCharArray().CopyTo(chars, 0));\n\
    \        Array.Sort(chars);\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in chars) {\n            if (sb.Length > 0) {\n     \
    \           sb.Append(' ');\n            }\n            sb.Append(c);\n      \
    \  }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfa3d88658054cbdaaa24daf01d91fd8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfa3d88658054cbdaaa24daf01d91fd8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int maxCount = 0;\n        string\
    \ maxWord = null;\n        foreach (string word in words) {\n            int count\
    \ = word.Distinct().Count();\n            if (count > maxCount) {\n          \
    \      maxCount = count;\n                maxWord = word;\n            }\n   \
    \     }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fed68c8cd0c461899cd40433d4b1c55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fed68c8cd0c461899cd40433d4b1c55>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   string maxCount = \"\";\n        foreach (string word in words) {\n      \
    \      int count = word.Distinct().Count();\n            if (count > maxCount.Length)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnagt07b2.cs(25,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659823907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a624cb018226499485119f0384cee405>:0 \n"
  stdout: ''
  timestamp: 1659798539
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   string maxCount = \"\";\n        foreach (string word in words) {\n      \
    \      int count = 0;\n            foreach (char c in word) {\n              \
    \  count++;\n            }\n            if (count > int.Parse(maxCount)) {\n \
    \               maxWord = word;\n                maxCount = count.ToString();\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00050]\
    \ in <1dc2b56840b6419b8a36718e98569708>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <1dc2b56840b6419b8a36718e98569708>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.FormatException: Input string was not in a correct format.\n\
    \  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String\
    \ overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00050]\
    \ in <1dc2b56840b6419b8a36718e98569708>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <1dc2b56840b6419b8a36718e98569708>:0 \n"
  stdout: ''
  timestamp: 1659823907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCharCount = 0;\n        foreach (string word in words) {\n   \
    \         int charCount = word.ToCharArray().Distinct().Count();\n           \
    \ if (charCount > maxCharCount) {\n                maxCharCount = charCount;\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e55afdef3dff40d1bb15e388765f141e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e55afdef3dff40d1bb15e388765f141e>:0 \n"
  stdout: ''
  timestamp: 1659823907
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (char.IsLetter(c)) {\n                    count++;\n         \
    \       }\n            }\n            if (count > int.Parse(maxCount)) {\n   \
    \             maxWord = word;\n                maxCount = count.ToString();\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0005f]\
    \ in <4184f4bd746d441895145b21006ba408>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <4184f4bd746d441895145b21006ba408>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.FormatException: Input string was not in a correct format.\n\
    \  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String\
    \ overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0005f]\
    \ in <4184f4bd746d441895145b21006ba408>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <4184f4bd746d441895145b21006ba408>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.ToCharArray().Distinct().Count();\n        \
    \    if (count > int.Parse(maxCount)) {\n                maxWord = word;\n   \
    \             maxCount = count.ToString();\n            }\n        }\n       \
    \ return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00032]\
    \ in <ccdbc82eafc949fdb33b9eeadb8dbec9>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <ccdbc82eafc949fdb33b9eeadb8dbec9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.FormatException: Input string was not in a correct format.\n\
    \  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String\
    \ overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00032]\
    \ in <ccdbc82eafc949fdb33b9eeadb8dbec9>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <ccdbc82eafc949fdb33b9eeadb8dbec9>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.Distinct().Count();\n            if (count > maxCount) {\n    \
    \            maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa14ff39620b49d0aeac8c1bb1f4faee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa14ff39620b49d0aeac8c1bb1f4faee>:0 \n"
  stdout: ''
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord\
    \ = null;\n        foreach (string word in words) {\n            int count = word.Distinct().Count();\n\
    \            if (count > max) {\n                max = count;\n              \
    \  maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af3e57ae1dca419f9c3673f15ca26622>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af3e57ae1dca419f9c3673f15ca26622>:0 \n"
  stdout: ''
  timestamp: 1659823907
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.ToCharArray().Distinct().Count();\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfh6v46l8.cs(24,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmpfh6v46l8.cs(25,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659823907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Length;\n            if (count > maxCount) {\n        \
    \        maxCount = count;\n                maxWord = word;\n            }\n \
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea519f2ecd3640cd88814daba95ae4c6>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.Distinct().Count();\n            if (count > maxCount) {\n    \
    \            maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b9b474dc4f124b189131806ca2991282>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b9b474dc4f124b189131806ca2991282>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = 0;\n            foreach (char c in word) {\n               \
    \ if (char.IsLetter(c)) {\n                    count++;\n                }\n \
    \           }\n            if (count > maxCount) {\n                maxCount =\
    \ count;\n                maxWord = word;\n            }\n        }\n        return\
    \ maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e688bd86a1d949618333c1db1cf1a150>:0 \n"
  stdout: ''
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.ToCharArray().Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b952ca89b73d4692be2d185a317d0574>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b952ca89b73d4692be2d185a317d0574>:0 \n"
  stdout: ''
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a624cb018226499485119f0384cee405>:0 \n"
  stdout: ''
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9720c7cab619412db6f2077916d49e63>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                count++;\n\
    \            }\n            if (count > maxCount) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <31d0a9c01d2c402eb877deabad606381>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 1;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5dc2893e6ee4c558e9c7ac3c45f0cd2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5dc2893e6ee4c558e9c7ac3c45f0cd2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Length;\n            if (count > maxCount) {\n        \
    \        maxCount = count;\n                maxWord = word;\n            }\n \
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea519f2ecd3640cd88814daba95ae4c6>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                count++;\n\
    \            }\n            if (count > maxCount) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <31d0a9c01d2c402eb877deabad606381>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int maxCount = 0;\n        string\
    \ maxWord = null;\n        foreach (string word in words) {\n            int count\
    \ = word.ToCharArray().Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <017b855800464b1090c1b99a2c1114a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <017b855800464b1090c1b99a2c1114a0>:0 \n"
  stdout: ''
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                count++;\n\
    \            }\n            if (count > maxCount) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <31d0a9c01d2c402eb877deabad606381>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.ToCharArray().Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <458acba049744000a631b29031c0102c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <458acba049744000a631b29031c0102c>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        List<string> uniqueChars = new\
    \ List<string>();\n        foreach (string word in words) {\n            foreach\
    \ (char c in word) {\n                if (!uniqueChars.Contains(c)) {\n      \
    \              uniqueChars.Add(c);\n                }\n            }\n       \
    \ }\n        string maxWord = uniqueChars.Max();\n        string maxWord2 = words.FirstOrDefault(w\
    \ => w.Count() == uniqueChars.Count()).FirstOrDefault();\n        if (maxWord2.Count()\
    \ > maxWord.Count()) {\n            return maxWord2;\n        } else {\n     \
    \       return maxWord;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg6ezxpud.cs(23,43): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpg6ezxpud.cs(24,37): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpg6ezxpud.cs(29,27): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659823907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Write your code here\n    \
    \    string maxWord = string.Empty;\n        int maxCount = 0;\n        foreach\
    \ (string word in words) {\n            int count = 0;\n            foreach (char\
    \ c in word) {\n                if (char.IsLetter(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > maxCount) {\n     \
    \           maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <964cd7117a8e4a02a12ef353ae0adeb4>:0 \n"
  stdout: ''
  timestamp: 1659823907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string max = null;\n        int\
    \ maxCount = 0;\n        foreach (string word in words) {\n            int count\
    \ = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                max = word;\n                maxCount\
    \ = count;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab66e11bf63d4b13b5a9713e40227226>:0 \n"
  stdout: ''
  timestamp: 1659823907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 1;\n        foreach (string word in words) {\n       \
    \     int count = word.Length;\n            if (count > maxCount) {\n        \
    \        maxCount = count;\n                maxWord = word;\n            }\n \
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d803e9dcf3324719a66fa9e773dc3445>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d803e9dcf3324719a66fa9e773dc3445>:0 \n"
  stdout: ''
  timestamp: 1659823907
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.Distinct().Count();\n            if (count >\
    \ maxCount) {\n                maxCount = count;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9den0gxs.cs(24,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmp9den0gxs.cs(25,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord\
    \ = \"\";\n        foreach (string word in words) {\n            int uniqueChars\
    \ = word.Distinct().Count();\n            if (uniqueChars > max) {\n         \
    \       max = uniqueChars;\n                maxWord = word;\n            }\n \
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <07e58919fb6a4002a761eebe446aa58c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <07e58919fb6a4002a761eebe446aa58c>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (char.IsLetter(c)) {\n                    count++;\n         \
    \       }\n            }\n            if (count > maxCount) {\n              \
    \  maxCount = count;\n                maxWord = word;\n            }\n       \
    \ }\n        return maxWord;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\"\
    , (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9rznquti.cs(29,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmp9rznquti.cs(30,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659823907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Your code here\n        string\
    \ maxWord = \"\";\n        int maxCount = 0;\n        foreach (string word in\
    \ words) {\n            int count = 0;\n            foreach (char c in word) {\n\
    \                if (char.IsLetter(c)) {\n                    count++;\n     \
    \           }\n            }\n            if (count > maxCount) {\n          \
    \      maxCount = count;\n                maxWord = word;\n            }\n   \
    \     }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fb012e7c07484e07aad2da488cfcb76e>:0 \n"
  stdout: ''
  timestamp: 1659823907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Write your code here\n    \
    \    string maxWord = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (char.IsLetter(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > maxCount) {\n     \
    \           maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <911631c3af16400b9633af9b2ab278bc>:0 \n"
  stdout: ''
  timestamp: 1659823907
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        char[] charArray = words.Select(x\
    \ => x.ToCharArray()).ToArray();\n        Array.Sort(charArray);\n        string\
    \ result = \"\";\n        int maxCount = 0;\n        foreach (char c in charArray)\
    \ {\n            if (maxCount < charArray.Count(x => x == c)) {\n            \
    \    maxCount = charArray.Count(x => x == c);\n                result = words[charArray.IndexOf(c)];\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggj_b80e.cs(20,28): error CS0029: Cannot implicitly convert type ''char[][]''
    to ''char[]''

    /tmp/tmpggj_b80e.cs(27,42): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    '
  timestamp: 1659823907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        foreach (string word in words)\
    \ {\n            int uniqueChars = word.Distinct().Count();\n            if (uniqueChars\
    \ > maxChars.Length) {\n                maxChars = uniqueChars.ToString();\n \
    \               maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66e1cf2dd7d34c4481dc9747e08310d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66e1cf2dd7d34c4481dc9747e08310d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                count++;\n\
    \            }\n            if (count > maxCount) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7828acf567ad41b9bf3c49d582fd26d7>:0 \n"
  stdout: ''
  timestamp: 1659823907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int maxCount = 0;\n        string\
    \ maxWord = null;\n        foreach (string word in words) {\n            int count\
    \ = word.ToCharArray().Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <017b855800464b1090c1b99a2c1114a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <017b855800464b1090c1b99a2c1114a0>:0 \n"
  stdout: ''
  timestamp: 1659823906
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (char.IsLetter(c)) {\n                    count++;\n         \
    \       }\n            }\n            if (count > int.Parse(maxCount)) {\n   \
    \             maxWord = word;\n                maxCount = count.ToString();\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0005f]\
    \ in <4184f4bd746d441895145b21006ba408>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <4184f4bd746d441895145b21006ba408>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.FormatException: Input string was not in a correct format.\n\
    \  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String\
    \ overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0005f]\
    \ in <4184f4bd746d441895145b21006ba408>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <4184f4bd746d441895145b21006ba408>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = 0;\n            foreach (char c in word) {\n               \
    \ count++;\n            }\n            if (count > maxCount) {\n             \
    \   maxCount = count;\n                maxWord = word;\n            }\n      \
    \  }\n        return maxWord;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\"\
    , (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d95eac02a2514b16bdcfb3e107c4df6a>:0 \n"
  stdout: ''
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = 0;\n            foreach (char c in word) {\n               \
    \ if (char.IsLetter(c)) {\n                    count++;\n                }\n \
    \           }\n            if (count > maxCount) {\n                maxCount =\
    \ count;\n                maxWord = word;\n            }\n        }\n        return\
    \ maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e688bd86a1d949618333c1db1cf1a150>:0 \n"
  stdout: ''
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Write your code here\n    \
    \    string maxWord = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (char.IsLetter(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > maxCount) {\n     \
    \           maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <911631c3af16400b9633af9b2ab278bc>:0 \n"
  stdout: ''
  timestamp: 1659823907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Write your code here\n    \
    \    string max = \"\";\n        int maxCount = 0;\n        foreach (string word\
    \ in words) {\n            int count = 0;\n            foreach (char c in word)\
    \ {\n                count++;\n            }\n            if (count > maxCount)\
    \ {\n                max = word;\n                maxCount = count;\n        \
    \    }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68fc1db96e1d432f963121a71add9e9e>:0 \n"
  stdout: ''
  timestamp: 1659823907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.Distinct().Count();\n            if (count > maxCount) {\n    \
    \            maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa14ff39620b49d0aeac8c1bb1f4faee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa14ff39620b49d0aeac8c1bb1f4faee>:0 \n"
  stdout: ''
  timestamp: 1659823906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Write your code here\n    \
    \    string maxWord = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (word.IndexOf(c) > -1) {\n                    count++;\n\
    \                }\n            }\n            if (count > maxCount) {\n     \
    \           maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0da8f9371bc14d9289d76a27b6bb4247>:0 \n"
  stdout: ''
  timestamp: 1659823907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (char.IsLetter(c)) {\n                    count++;\n         \
    \       }\n            }\n            if (count > int.Parse(maxCount)) {\n   \
    \             maxCount = count.ToString();\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0005f]\
    \ in <bd90d2ec5f7b4feca9053db8c5301101>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <bd90d2ec5f7b4feca9053db8c5301101>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.FormatException: Input string was not in a correct format.\n\
    \  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String\
    \ overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0005f]\
    \ in <bd90d2ec5f7b4feca9053db8c5301101>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <bd90d2ec5f7b4feca9053db8c5301101>:0 \n"
  stdout: ''
  timestamp: 1659823907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChar = string.Empty;\n        string maxCount = string.Empty;\n\
    \        foreach (string word in words) {\n            int charCount = word.ToCharArray().Distinct().Count();\n\
    \            if (charCount > maxCount.Length) {\n                maxCount = charCount.ToString();\n\
    \                maxWord = word;\n                maxChar = word.ToCharArray().Max().ToString();\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e5850ff01e6435ca118b98bf1186118>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e5850ff01e6435ca118b98bf1186118>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCharCount = 0;\n        foreach (string word in words) {\n   \
    \         int charCount = 0;\n            foreach (char c in word) {\n       \
    \         charCount++;\n            }\n            if (charCount > maxCharCount)\
    \ {\n                maxCharCount = charCount;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b19798383f04fd290a27c6d0067796b>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord\
    \ = \"\";\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                count++;\n          \
    \  }\n            if (count > max) {\n                max = count;\n         \
    \       maxWord = word;\n            }\n        }\n        return maxWord;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7aa46856b384806b7e8e3a427f7abb0>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.Distinct().Count();\n            if (count >\
    \ maxCount) {\n                maxWord = word;\n                maxCount = count;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf52i0a1_.cs(24,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmpf52i0a1_.cs(26,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659823907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string max = null;\n        int\
    \ maxCount = 0;\n        foreach (string word in words) {\n            int count\
    \ = word.Distinct().Count();\n            if (count > maxCount) {\n          \
    \      max = word;\n                maxCount = count;\n            }\n       \
    \ }\n        return max;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <268a0dd9d1b343edb47f0a022e718501>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <268a0dd9d1b343edb47f0a022e718501>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                count++;\n\
    \            }\n            if (count > maxCount) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <31d0a9c01d2c402eb877deabad606381>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCharCount = 0;\n        foreach (string word in words) {\n   \
    \         int charCount = word.ToCharArray().Distinct().Count();\n           \
    \ if (charCount > maxCharCount) {\n                maxCharCount = charCount;\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e55afdef3dff40d1bb15e388765f141e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e55afdef3dff40d1bb15e388765f141e>:0 \n"
  stdout: ''
  timestamp: 1659823907
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (char.IsLetter(c)) {\n                    count++;\n         \
    \       }\n            }\n            if (count > int.Parse(maxCount)) {\n   \
    \             maxWord = word;\n                maxCount = count.ToString();\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0005f]\
    \ in <4184f4bd746d441895145b21006ba408>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <4184f4bd746d441895145b21006ba408>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.FormatException: Input string was not in a correct format.\n\
    \  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String\
    \ overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0005f]\
    \ in <4184f4bd746d441895145b21006ba408>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <4184f4bd746d441895145b21006ba408>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9720c7cab619412db6f2077916d49e63>:0 \n"
  stdout: ''
  timestamp: 1659823905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
