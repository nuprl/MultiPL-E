language: cs
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f == (float)f)\n                sum += (float)f;\n      \
    \      else\n                sum += (long)Math.Pow(Math.Abs(f), 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpea1lev6p.cs(26,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpea1lev6p.cs(25,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659793270
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1b7yy9hj.cs(23,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            long num = Math.Abs(f);\n            if (num > 0) {\n       \
    \         sum += num * num;\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3s3c11iw.cs(25,24): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793270
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0) sum += Math.Pow(f, 2);\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprq4sijej.cs(23,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f > 0)\n                sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeapvej68.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \        {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n\
    \            sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsu2qi7hb.cs(28,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += Math.Pow(f, 2);\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx85i5fyc.cs(30,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793174
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0)\n                sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl1_fr742.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793174
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1b7yy9hj.cs(23,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \        {\n            if (f < 0f || f > 1f)\n                continue;\n   \
    \         sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx75k6nt7.cs(28,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793270
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            long n = Convert.ToInt64(f);\n            if (n != 0) {\n   \
    \             sum += n * n;\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ea9c6e8e8774addba611e6400f61fca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ea9c6e8e8774addba611e6400f61fca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793270
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            long n = Math.Abs(f);\n            if (n != 0L && n != 1L &&\
    \ n != -1L && n != -2L && n != -3L && n != -4L && n != -5L && n != -6L && n !=\
    \ -7L && n != -8L && n != -9L && n != -10L && n != -11L && n != -12L && n != -13L\
    \ && n != -14L && n != -15L && n != -16L && n != -17L && n != -18L && n != -19L\
    \ && n != -20L && n != -21L && n != -22L && n != -23L && n != -24L && n != -25L\
    \ && n != -26L && n != -27L && n != -28L && n != -29L && n != -30L && n != -31L\
    \ && n != -32L && n != -33L && n != -34L && n != -35L && n != -36L && n != -37L\
    \ && n != -38L && n != -39L && n != -40L && n != -41L && n != -42L && n != -43L\
    \ && n != -44L && n != -45L && n != -46L && n != -47L && n != -48L && n != -49L\
    \ && n != -50L && n != -51L && n != -52L && n != -53L && n != -54L && n != -55L\
    \ && n != -56L && n != -57L && n != -58L && n != -59L && n != -60L && n != -61L\
    \ && n != -62L && n != -63L && n != -64L && n != -65L && n != -66L && n != -67L\
    \ && n != -68L && n != -69L && n != -70L && n != -71L && n != -72L && n != -73L\
    \ && n != -74L && n != -75L && n != -76L && n != -77L && n != -78L && n != -79L\
    \ && n != -80L && n != -81L && n != -82L && \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_gw26nxr.cs(26,1095): error CS1525: Invalid expression term ''}''

    /tmp/tmp_gw26nxr.cs(26,1095): error CS1026: ) expected

    /tmp/tmp_gw26nxr.cs(26,1095): error CS1002: ; expected

    /tmp/tmp_gw26nxr.cs(28,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp_gw26nxr.cs(38,2): error CS1513: } expected

    '
  timestamp: 1659793269
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f == (float)f) {\n             \
    \   sum += (float)f;\n            }\n            else if (f != (float)f && f !=\
    \ (float)f - 1) {\n                sum += Math.Pow(f, 2);\n            }\n   \
    \     }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe6z94ln0.cs(24,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpe6z94ln0.cs(27,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpe6z94ln0.cs(23,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    /tmp/tmpe6z94ln0.cs(26,22): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659793270
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_thq1m49.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \        {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n\
    \            sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsu2qi7hb.cs(28,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                sum +=\
    \ Math.Abs(f);\n            } else {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprp0x7jg1.cs(24,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmprp0x7jg1.cs(26,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            long square = f * f;\n            if (square % 2 == 1) {\n\
    \                sum += square;\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3aii0ro_.cs(29,27): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0) sum += Math.Pow(f, 2);\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprq4sijej.cs(23,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f == (float)Math.Floor(f))\n                sum += (long)Math.Pow(f,\
    \ 2);\n            else\n                sum += (long)Math.Pow(f - Math.Floor(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fae83e1bf2354cf2b5e42b0a1fab7de9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fae83e1bf2354cf2b5e42b0a1fab7de9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f && f < 1.0f) {\n      \
    \          sum += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphn6il0z7.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1a0k6bv4.cs(25,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_thq1m49.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f && f < 1.0f) {\n      \
    \          sum += Math.Pow(f, 2.0f);\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp19znh4ua.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            long n = Convert.ToInt64(f);\n            if (n % 2 == 1) {\n\
    \                sum += n * n;\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \        {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n\
    \            sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsu2qi7hb.cs(28,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f == (float)f)\n                continue;\n            long\
    \ n = Math.Abs(f);\n            if (n < 1L)\n                continue;\n     \
    \       if (n % 2 == 0) {\n                sum += n * n;\n            }\n    \
    \    }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfxiuyu0y.cs(27,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpfxiuyu0y.cs(25,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f > 0)\n                sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeapvej68.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0) sum += Math.Pow(f, 2);\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprq4sijej.cs(23,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f != 0) {\n                sum +=\
    \ Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxwux_qcn.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            long d = Math.Abs(f);\n            if\
    \ (d % 2 == 1) {\n                sum += d * d;\n            }\n        }\n  \
    \      return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4oxhhcok.cs(23,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 1) {\n                sum += Math.Pow(f, 2);\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp22r7865m.cs(30,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += Math.Pow(f, 2);\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx85i5fyc.cs(30,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793174
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppvg0lxhj.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f > 0)\n                sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeapvej68.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                sum += Math.Pow(f, 2);\n\
    \            } else {\n                sum += (long)Math.Pow(f, 2);\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_55efrpz.cs(27,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0L || f > 1L)\n                continue;\n          \
    \  long n = Convert.ToInt64(f);\n            if (n % 2 == 1L)\n              \
    \  sum += n * n;\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a325419730a4a8786b842eeced93abc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a325419730a4a8786b842eeced93abc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f > 0.0f) {\n                sum += Math.Pow(f,\
    \ 2);\n            }\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu09bqc1f.cs(27,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_thq1m49.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            long n = Convert.ToInt64(f);\n\
    \            if (n % 2 == 1)\n                sum += n * n;\n        }\n     \
    \   return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppvg0lxhj.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppvg0lxhj.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            long square = f * f;\n            if (square % 2 == 1) {\n\
    \                sum += square;\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoh218vsc.cs(29,27): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \            if (f != 0.0f)\n                sum += Math.Pow(f, 2);\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1h4cu3ed.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f != 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe_h62oml.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppvg0lxhj.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                sum +=\
    \ Math.Abs(f);\n            } else {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprp0x7jg1.cs(24,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmprp0x7jg1.cs(26,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += f * f;\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmci1bqfb.cs(27,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0L;\n        long sum = 0L;\n        foreach (float f in lst)\
    \ {\n            if (f < 0L || f > 1L)\n                return 0L;\n         \
    \   sum += Math.Pow(f, 2L);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj008_mra.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f == 0) continue;\n            if\
    \ (f < 0) continue;\n            if (f % 2 == 1) sum += f * f;\n        }\n  \
    \      return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3rbyh8kv.cs(25,29): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                sum +=\
    \ Math.Abs(f);\n            } else {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprp0x7jg1.cs(24,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmprp0x7jg1.cs(26,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            long n = Math.Abs(f);\n            if\
    \ (n != 0) {\n                if (n % 2 == 1) {\n                    sum += n\
    \ * n;\n                }\n            }\n        }\n        return sum;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_t3tc7ns.cs(23,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0 || f % 1 != 0) {\n       \
    \         sum += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6nd_r0es.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0) sum += Math.Pow(f, 2);\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprq4sijej.cs(23,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0f || f % 1f != 0f) {\n    \
    \            sum += Math.Pow(f, 2f);\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpopu4sh8g.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            long d = Math.Abs(f);\n            if (d > 1L) {\n\
    \                sum += d * d;\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6zew9mvd.cs(26,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                throw new ArgumentException(\"Negative\
    \ numbers not allowed\");\n            if (f % 1 != 0)\n                throw\
    \ new ArgumentException(\"Non-integer numbers not allowed\");\n            sum\
    \ += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl61e18d3.cs(29,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \            if (f > 0)\n                sum += Math.Pow(f, 2);\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp67p7hdc5.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppvg0lxhj.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            sum += Math.Pow(f, 2);\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvxatlj4k.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += Math.Pow(f, 2);\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmputro163n.cs(30,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f > 0)\n                sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeapvej68.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \            if (f > 0)\n                sum += Math.Pow(f, 2);\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp67p7hdc5.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f > 0)\n                sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeapvej68.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f && f < 1.0f) {\n      \
    \          sum += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphn6il0z7.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f == (float)f)\n                sum += (float)f;\n      \
    \      else if (f < 0)\n                sum += Math.Abs(f);\n            else\n\
    \                sum += (long)Math.Pow(Math.Abs(f), 2);\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps9t3yc33.cs(26,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmps9t3yc33.cs(28,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmps9t3yc33.cs(25,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_thq1m49.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1b7yy9hj.cs(23,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            long n = Math.Abs(f);\n\
    \            if (n % 2 == 1)\n                sum += n * n;\n        }\n     \
    \   return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv2ujbmrp.cs(27,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1b7yy9hj.cs(23,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            long d = Math.Abs(f);\n            if (d % 2 == 1)\
    \ {\n                sum += d * d;\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc8asvkyb.cs(26,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1b7yy9hj.cs(23,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0L;\n        long sum = 0L;\n        foreach (float f in lst)\
    \ {\n            long d = Math.Abs(f);\n            if (d % 2 == 1) {\n      \
    \          sum += d * d;\n            }\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgr0nubin.cs(25,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            sum += Math.Pow(f, 2);\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuuronswv.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0) sum += Math.Pow(f, 2);\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprq4sijej.cs(23,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            long n = Math.Abs(f);\n            if (n % 2 == 1)\n        \
    \        sum += n * n;\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprg1ieogr.cs(25,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0L || f % 1L != 0L) {\n                continue;\n\
    \            }\n            sum += Math.Pow(f, 2L);\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp96hfp2z2.cs(29,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            if (f % 2\
    \ == 0)\n                sum += f * f;\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7wij2p0q.cs(28,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1b7yy9hj.cs(23,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0L;\n        long sum = 0L;\n        foreach (float f in lst)\n\
    \            if (f > 0.0f) {\n                sum += Math.Pow(f, 2);\n       \
    \     }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpro7getc4.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0L || f > 1L)\n                continue;\n          \
    \  long d = Math.Abs(f);\n            if (d % 2 == 1L)\n                sum +=\
    \ d * d;\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkmea_6fb.cs(27,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f > 0)\n                sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeapvej68.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f == 0.0f) {\n                continue;\n\
    \            }\n            long x = Math.Abs(f);\n            if (x % 2 == 0)\
    \ {\n                sum += x * x;\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp16mt9neq.cs(26,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                sum +=\
    \ Math.Pow(f, 2);\n            } else if (f % 2 == 0) {\n                sum +=\
    \ f;\n            }\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjr0zpi4q.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpjr0zpi4q.cs(26,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            if (f % 2\
    \ == 0)\n                sum += f * f;\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7wij2p0q.cs(28,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f == (float)f) {\n             \
    \   sum += (float)f;\n            } else if (f < 0) {\n                sum +=\
    \ Math.Pow((float)f, 2);\n            } else {\n                sum += Math.Pow((float)f,\
    \ 3);\n            }\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_wh3iivl.cs(24,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_wh3iivl.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_wh3iivl.cs(28,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_wh3iivl.cs(23,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            sum += Math.Pow(f, 2);\n        }\n        return sum;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp58wuqacb.cs(29,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_thq1m49.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += Math.Pow(f,\
    \ 2);\n            }\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvg92nbs2.cs(27,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0f || f % 1f != 0f) {\n    \
    \            sum += Math.Pow(f, 2f);\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpopu4sh8g.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f > 1f)\n                continue;\n          \
    \  sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqgkctehy.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f == (float)f) {\n             \
    \   sum += (float)f;\n            }\n            else if (f == (float)-(float)f)\
    \ {\n                sum -= (float)f;\n            }\n            else {\n   \
    \             sum += Math.Pow(f, 2);\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6kcks2q_.cs(24,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6kcks2q_.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6kcks2q_.cs(30,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6kcks2q_.cs(23,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_thq1m49.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f == (float)f && f != (float)f && f != (float)f && f != (float)f)\n\
    \                sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt_ihqddx.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpt_ihqddx.cs(25,68): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    /tmp/tmpt_ihqddx.cs(25,51): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    /tmp/tmpt_ihqddx.cs(25,34): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    /tmp/tmpt_ihqddx.cs(25,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f == (float)Math.Floor(f)) {\n \
    \               sum += Math.Pow(f, 2);\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp29tt51y0.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            if (f % 2\
    \ == 1)\n                sum += f * f;\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp_p3k4i1.cs(28,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppvg0lxhj.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f > 1f)\n                continue;\n          \
    \  sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqgkctehy.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            sum += Math.Pow(f, 2);\n        }\n        return sum;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqf9vh1_r.cs(29,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0L;\n        long sum = 0L;\n        foreach (float f in lst)\
    \ {\n            if (f < 0L || f % 1L != 0L)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq92159nb.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \            if (f > 0)\n                sum += Math.Pow(f, 2);\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp67p7hdc5.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            if (f % 2\
    \ == 1)\n                sum += Math.Pow(f, 2);\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ord74qa.cs(28,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0L || f > 1L)\n                return 0L;\n         \
    \   sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptdi1el8e.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 1) {\n                sum += Math.Pow(f, 2);\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp22r7865m.cs(30,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f && f < 1.0f) {\n      \
    \          sum += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphn6il0z7.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                sum += Math.Pow(f, 2);\n\
    \            } else {\n                sum += f;\n            }\n        }\n \
    \       return sum;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuh16bce7.cs(27,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpuh16bce7.cs(29,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f == (float)Math.Abs(f))\n                continue;\n   \
    \         if (f < 0)\n                f = f * -1;\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdm0mpb0p.cs(28,17): error CS1656: Cannot assign to ''f'' because it is
    a ''foreach iteration variable''

    /tmp/tmpdm0mpb0p.cs(29,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            sum += Math.Pow(f, 2);\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuuronswv.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \            if (f > 0)\n                sum += Math.Pow(f, 2);\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp67p7hdc5.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \            if (f > 0)\n                sum += Math.Pow(f, 2);\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp67p7hdc5.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                sum +=\
    \ Math.Pow(f, 2);\n            } else {\n                sum += Math.Pow(f - 1,\
    \ 2);\n            }\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplxr0v_cj.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplxr0v_cj.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        long squareSum\
    \ = 0L;\n        foreach (float f in lst) {\n            long x = Math.Abs(f);\n\
    \            if (x % 2 == 1) {\n                sum += x;\n                squareSum\
    \ += x * x;\n            }\n        }\n        if (sum == 0) {\n            return\
    \ 0L;\n        }\n        return squareSum - sum * sum / 2;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxvxrgmt5.cs(27,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \        {\n            if (f < 0)\n                continue;\n            if\
    \ (f % 2 == 0)\n                sum += f * f;\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp34w0jucc.cs(29,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f > 0)\n                sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeapvej68.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            long d = Math.Abs(f);\n            if (d > 1L) {\n\
    \                sum += d * d;\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6zew9mvd.cs(26,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_thq1m49.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            if (f % 2\
    \ == 0)\n                sum += Math.Pow(f, 2);\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzanme_i1.cs(28,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += f * f;\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmci1bqfb.cs(27,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            if (f % 2\
    \ == 0)\n                sum += f * f;\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7wij2p0q.cs(28,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            sum += Math.Pow(f, 2);\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuuronswv.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            if (f % 2\
    \ == 1)\n                sum += f * f;\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp_p3k4i1.cs(28,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            long square = f * f;\n            if (square % 2 == 1) {\n\
    \                sum += square;\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoh218vsc.cs(29,27): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1b7yy9hj.cs(23,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f > 1f)\n                continue;\n          \
    \  sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqgkctehy.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            sum += Math.Pow(f, 2);\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuuronswv.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1b7yy9hj.cs(23,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            long square = Convert.ToInt64(Math.Pow(f, 2));\n          \
    \  if (square % 2 == 1) {\n                sum += square;\n            }\n   \
    \     }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppvg0lxhj.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f > 1f)\n                continue;\n          \
    \  sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqgkctehy.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        long squareSum\
    \ = 0L;\n        foreach (float f in lst) {\n            long square = f * f;\n\
    \            if (square % 2 == 1) {\n                squareSum += square;\n  \
    \          }\n            if (square % 2 == 0) {\n                sum += square;\n\
    \            }\n        }\n        if (sum == squareSum) {\n            return\
    \ sum;\n        }\n        return sum - squareSum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxdtj_7re.cs(27,27): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1b7yy9hj.cs(23,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppvg0lxhj.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f > 0.0f) {\n                sum += Math.Pow(f,\
    \ 2);\n            }\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu09bqc1f.cs(27,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f == (float)f)\n                continue;\n            sum\
    \ += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp002vjubl.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp002vjubl.cs(25,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            long d = Math.Abs(f);\n            if (d % 2 == 1)\
    \ {\n                sum += d * d;\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc8asvkyb.cs(26,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f > 0)\n                sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeapvej68.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f > 0.0f) {\n                sum += Math.Pow(f,\
    \ 2);\n            }\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu09bqc1f.cs(27,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0f || f % 1f != 0f) {\n    \
    \            sum += Math.Pow(f, 2f);\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpopu4sh8g.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \            if (f > 0.0f && f < 1.0f)\n                sum += Math.Pow(f, 2);\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpredilmdl.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        long sumOfSquares\
    \ = 0L;\n        foreach (float f in lst) {\n            if (f < 0) {\n      \
    \          continue;\n            }\n            long square = f * f;\n      \
    \      if (square % 2 == 1) {\n                sum += square;\n              \
    \  sumOfSquares += square;\n            }\n        }\n        return sumOfSquares\
    \ - sum * sum / lst.Count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0caur72j.cs(30,27): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += Math.Pow(f, 2);\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmputro163n.cs(30,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                sum +=\
    \ Math.Pow(f, 2);\n            } else {\n                sum += f;\n         \
    \   }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxmf9v0m2.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxmf9v0m2.cs(26,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 1) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbv9i1rao.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0L || f > 1L)\n                return 0L;\n         \
    \   sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptdi1el8e.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823303
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_thq1m49.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0) sum += Math.Pow(f, 2);\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprq4sijej.cs(23,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
