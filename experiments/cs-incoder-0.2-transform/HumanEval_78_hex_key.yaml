name: HumanEval_78_hex_key
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You have been tasked to write a function that receives \n  \
  \  // a hexadecimal number as a string and counts the number of hexadecimal \n \
  \   // digits that are primes (prime number, or a prime, is a natural number \n\
  \    // greater than 1 that is not a product of two smaller natural numbers).\n\
  \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
  \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
  \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
  \ 13).\n    // Note: you may assume the input is always correct or empty string,\
  \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n   \
  \ // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n\
  \    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"\
  ))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long\
  \ HexKey(string num) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
  AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
  ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
  123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
  )) == (12L));\n    }\n\n}\n"
completions: ["        long ret = 0;\n        long temp = 0;\n        bool isPrime\
    \ = true;\n        foreach (char c in num) {\n            temp = Convert.ToInt64(c);\n\
    \            if (temp % 2 == 0) {\n                isPrime = false;\n        \
    \    }\n        }\n        if (isPrime) {\n            ret = num.Length;\n   \
    \     }\n        return ret;", "        long result = 0;\n        long digit =\
    \ 0;\n        long prime = 0;\n        long prime2 = 0;\n        long prime3 =\
    \ 0;\n        long prime4 = 0;\n        long prime5 = 0;\n        long prime6\
    \ = 0;\n        long prime7 = 0;\n        long prime8 = 0;\n        long prime9\
    \ = 0;\n        long prime10 = 0;\n        long prime11 = 0;\n        long prime12\
    \ = 0;\n        long prime13 = 0;\n        long prime14 = 0;\n        long prime15\
    \ = 0;\n        long prime16 = 0;\n        long prime17 = 0;\n        long prime18\
    \ = 0;\n        long prime19 = 0;\n        long prime20 = 0;\n        long prime21\
    \ = 0;\n        long prime22 = 0;\n        long prime23 = 0;\n        long prime24\
    \ = 0;\n        long prime25 = 0;\n        long prime26 = 0;\n        long prime27\
    \ = 0;\n        long prime28 = 0;\n        long prime29 = 0;\n        long prime30\
    \ = 0;\n        long prime31 = 0;\n        long prime32 = 0;\n        long prime33\
    \ = 0;\n        long prime34 = 0;\n        long prime35 = 0;\n        long prime36\
    \ = 0;\n        long prime37 = 0;\n        long prime38 = 0;\n        long prime39\
    \ = 0;\n        long prime40 = 0;\n        long prime41 = 0;\n        long prime42\
    \ = 0;\n        long prime43 = 0;\n        long prime44 = 0;\n        long prime45\
    \ = 0;\n        long prime46 = 0;\n        long prime47 = 0;\n        long prime48\
    \ = 0;\n        long prime49 = 0;\n        long prime50 = 0;\n        long prime51\
    \ = 0;\n        long prime52 = 0;\n        long prime53 = 0;\n        long prime54\
    \ = 0;\n        long prime55 = 0;\n        long prime56 = 0;\n        long prime57\
    \ = 0;\n        long prime58 = 0;\n        long prime59 = 0;\n        long prime60\
    \ = 0;\n        long prime61 = 0;\n        long prime62 = 0;\n        long prime63\
    \ = 0;\n        long prime64 = 0;\n        long prime65 = 0;\n        long prime66\
    \ = 0;\n        long prime67 = 0;\n        long prime68 = 0;\n        long prime69\
    \ = 0;\n        long prime70 = 0;\n        long prime71 = 0;\n        long prime72\
    \ = 0;\n        long prime73 = 0;\n        long prime74 = 0;\n        long prime75\
    \ = 0;\n        long prime76 = 0;\n        long prime77 = 0;\n        long prime78\
    \ = 0;\n        long prime79 = 0;\n        long prime80 = 0;\n        long prime81\
    \ = 0;\n        long prime82 = 0;\n        long prime83 = 0;\n        long prime84\
    \ = 0;\n        long prime", "        long ret = 0;\n        foreach (char c in\
    \ num) {\n            int d = (int)c;\n            if (d >= '0' && d <= '9') {\n\
    \                ret += d;\n            } else if (d >= 'A' && d <= 'F') {\n \
    \               ret += d + 10;\n            }\n        }\n        return ret;",
  "        long result = 0;\n        foreach (char c in num) {\n            int digit\
    \ = c - '0';\n            if (digit >= 2 && digit <= 9) {\n                result\
    \ += (digit * digit);\n            }\n        }\n        return result;", "  \
    \      long ret = 0;\n        foreach (char c in num) {\n            int digit\
    \ = c - '0';\n            if (digit < 0 || digit > 9) {\n                throw\
    \ new ArgumentException(\"Invalid hexadecimal digit: \" + c);\n            }\n\
    \            long power = 1;\n            for (int i = 0; i < digit; i++) {\n\
    \                power *= 16;\n            }\n            long num = Convert.ToInt64(Math.Pow(power,\
    \ digit));\n            ret += num;\n        }\n        return ret;", "      \
    \  long count = 0;\n        long digit = 0;\n        long prime = 0;\n       \
    \ long product = 1;\n        bool isPrime = true;\n        string hex = num.ToUpper();\n\
    \        foreach (char c in hex) {\n            digit = Convert.ToInt64(c);\n\
    \            product *= digit;\n        }\n        prime = Convert.ToInt64(Math.Pow(product,\
    \ 2));\n        foreach (char c in hex) {\n            digit = Convert.ToInt64(c);\n\
    \            if (digit == prime) {\n                count++;\n            }\n\
    \        }\n        return count;", "        long numDigits = num.Length;\n  \
    \      long numPrimes = 0;\n        long numPrimeDigits = 0;\n        long numPrimeDigits2\
    \ = 0;\n        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n\
    \        long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n      \
    \  long numPrimeDigits4 = 0;\n        long numPrimeDigits2 = 0;\n        long\
    \ numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long numPrimeDigits2\
    \ = 0;\n        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n\
    \        long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n      \
    \  long numPrimeDigits4 = 0;\n        long numPrimeDigits2 = 0;\n        long\
    \ numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long numPrimeDigits2\
    \ = 0;\n        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n\
    \        long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n      \
    \  long numPrimeDigits4 = 0;\n        long numPrimeDigits2 = 0;\n        long\
    \ numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long numPrimeDigits2\
    \ = 0;\n        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n\
    \        long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n      \
    \  long numPrimeDigits4 = 0;\n        long numPrimeDigits2 = 0;\n        long\
    \ numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long numPrimeDigits2\
    \ = 0;\n        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n\
    \        long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n      \
    \  long numPrimeDigits4 = 0;\n        long numPrimeDigits2 = 0;\n        long\
    \ numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long numPrimeDigits2\
    \ = 0;\n        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n\
    \        long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n      \
    \  long numPrimeDigits4 = 0;\n        long numPrimeDigits2 = 0;\n        long\
    \ numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        ", "      \
    \  long numDigits = 0;\n        long numPrimes = 0;\n        long numPrimes2 =\
    \ 0;\n        long numPrimes3 = 0;\n        long numPrimes4 = 0;\n        long\
    \ numPrimes5 = 0;\n        long numPrimes6 = 0;\n        long numPrimes7 = 0;\n\
    \        long numPrimes8 = 0;\n        long numPrimes9 = 0;\n        long numPrimes10\
    \ = 0;\n        long numPrimes11 = 0;\n        long numPrimes12 = 0;\n       \
    \ long numPrimes13 = 0;\n        long numPrimes14 = 0;\n        long numPrimes15\
    \ = 0;\n        long numPrimes16 = 0;\n        long numPrimes17 = 0;\n       \
    \ long numPrimes18 = 0;\n        long numPrimes19 = 0;\n        long numPrimes20\
    \ = 0;\n        long numPrimes21 = 0;\n        long numPrimes22 = 0;\n       \
    \ long numPrimes23 = 0;\n        long numPrimes24 = 0;\n        long numPrimes25\
    \ = 0;\n        long numPrimes26 = 0;\n        long numPrimes27 = 0;\n       \
    \ long numPrimes28 = 0;\n        long numPrimes29 = 0;\n        long numPrimes30\
    \ = 0;\n        long numPrimes31 = 0;\n        long numPrimes32 = 0;\n       \
    \ long numPrimes33 = 0;\n        long numPrimes34 = 0;\n        long numPrimes35\
    \ = 0;\n        long numPrimes36 = 0;\n        long numPrimes37 = 0;\n       \
    \ long numPrimes38 = 0;\n        long numPrimes39 = 0;\n        long numPrimes40\
    \ = 0;\n        long numPrimes41 = 0;\n        long numPrimes42 = 0;\n       \
    \ long numPrimes43 = 0;\n        long numPrimes44 = 0;\n        long numPrimes45\
    \ = 0;\n        long numPrimes46 = 0;\n        long numPrimes47 = 0;\n       \
    \ long numPrimes48 = 0;\n        long numPrimes49 = 0;\n        long numPrimes50\
    \ = 0;\n        long numPrimes51 = 0;\n        long numPrimes52 = 0;\n       \
    \ long numPrimes53 = 0;\n        long numPrimes54 = 0;\n        long numPrimes55\
    \ = 0;\n        long numPrimes56 = 0;\n        long numPrimes57 = 0;\n       \
    \ long numPrimes58 = 0;\n        long numPrimes59 = 0;\n        long numPrimes60\
    \ = 0;\n        long numPrimes61 = 0;\n        long numPrimes62 = 0;\n       \
    \ long numPrimes63 = 0;\n        long numPrimes64", "        long numDigits =\
    \ num.Length;\n        long numPrimes = 0;\n        long numPrimes2 = numPrimes;\n\
    \        long numPrimes3 = numPrimes;\n        long numPrimes4 = numPrimes;\n\
    \        long numPrimes5 = numPrimes;\n        long numPrimes6 = numPrimes;\n\
    \        long numPrimes7 = numPrimes;\n        long numPrimes8 = numPrimes;\n\
    \        long numPrimes9 = numPrimes;\n        long numPrimes10 = numPrimes;\n\
    \        long numPrimes11 = numPrimes;\n        long numPrimes12 = numPrimes;\n\
    \        long numPrimes13 = numPrimes;\n        long numPrimes14 = numPrimes;\n\
    \        long numPrimes15 = numPrimes;\n        long numPrimes16 = numPrimes;\n\
    \        long numPrimes17 = numPrimes;\n        long numPrimes18 = numPrimes;\n\
    \        long numPrimes19 = numPrimes;\n        long numPrimes20 = numPrimes;\n\
    \        long numPrimes21 = numPrimes;\n        long numPrimes22 = numPrimes;\n\
    \        long numPrimes23 = numPrimes;\n        long numPrimes24 = numPrimes;\n\
    \        long numPrimes25 = numPrimes;\n        long numPrimes26 = numPrimes;\n\
    \        long numPrimes27 = numPrimes;\n        long numPrimes28 = numPrimes;\n\
    \        long numPrimes29 = numPrimes;\n        long numPrimes30 = numPrimes;\n\
    \        long numPrimes31 = numPrimes;\n        long numPrimes32 = numPrimes;\n\
    \        long numPrimes33 = numPrimes;\n        long numPrimes34 = numPrimes;\n\
    \        long numPrimes35 = numPrimes;\n        long numPrimes36 = numPrimes;\n\
    \        long numPrimes37 = numPrimes;\n        long numPrimes38 = numPrimes;\n\
    \        long numPrimes39 = numPrimes;\n        long numPrimes40 = numPrimes;\n\
    \        long numPrimes41 = numPrimes;\n        long numPrimes42 = numPrimes;\n\
    \        long numPrimes43 = numPrimes;\n        long ", "        long ret = 0;\n\
    \        foreach (char c in num.ToUpper()) {\n            int d = (int)c;\n  \
    \          if (d >= 'A' && d <= 'F') {\n                d -= 'A' - '0';\n    \
    \        }\n            if (d >= '0' && d <= '9') {\n                d -= '0';\n\
    \            }\n            if (d >= '2' && d <= '5') {\n                d -=\
    \ '2' - '0';\n            }\n            if (d >= '7' && d <= 'B') {\n       \
    \         d -= '7' - '0';\n            }\n            if (d >= 'D' && d <= 'F')\
    \ {\n                d -= 'D' - '0';\n            }\n            ret += d;\n \
    \       }\n        return ret;", "        long result = 0;\n        foreach (char\
    \ c in num) {\n            int digit = c - '0';\n            if (digit >= 2 &&\
    \ digit <= 9) {\n                result += (digit * digit);\n            }\n \
    \       }\n        return result;", "        long result = 0;\n        foreach\
    \ (char c in num) {\n            int digit = c - '0';\n            if (digit >=\
    \ 2 && digit <= 9) {\n                result += digit * digit;\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (char c in num) {\n            int d = (int)c;\n            if (d >= '0' &&\
    \ d <= '9') {\n                result += (long)Math.Pow(16, (int)c - '0');\n \
    \           }\n            else if (d >= 'A' && d <= 'F') {\n                result\
    \ += (long)Math.Pow(16, (int)c - 'A' + 10);\n            }\n            else {\n\
    \                throw new Exception(\"Invalid input\");\n            }\n    \
    \    }\n        return result;", "        long ret = 0;\n        foreach (char\
    \ c in num.ToUpper()) {\n            int d = (int)c;\n            if (d >= 'A'\
    \ && d <= 'F') {\n                d -= 'A' - 10;\n            }\n            if\
    \ (d >= '0' && d <= '9') {\n                d -= '0';\n            }\n       \
    \     if (d >= '2' && d <= '5') {\n                d -= '2';\n            }\n\
    \            if (d >= '7' && d <= 'B') {\n                d -= '7';\n        \
    \    }\n            if (d >= 'D' && d <= 'E') {\n                d -= 'D';\n \
    \           }\n            ret += d;\n        }\n        return ret;", "     \
    \   long result = 0;\n        long power = 1;\n        foreach (char c in num)\
    \ {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9)\
    \ {\n                throw new ArgumentException(\"Invalid hexadecimal digit:\
    \ \" + c);\n            }\n            result += (digit * power);\n          \
    \  power *= 16;\n        }\n        return result;", "        long result = 0;\n\
    \        string hex = num.ToUpper();\n        foreach (char c in hex) {\n    \
    \        int digit = c - '0';\n            if (digit >= 2 && digit <= 9) {\n \
    \               result += (long)Math.Pow(16, digit);\n            }\n        }\n\
    \        return result;", "        long result = 0;\n        foreach (char c in\
    \ num.ToUpper()) {\n            int digit = Convert.ToInt32(c);\n            if\
    \ (digit < 'A' || digit > 'F') {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            result += (digit -\
    \ 'A') * Math.Pow(16, num.Length - 1);\n        }\n        return result;", " \
    \       long result = 0;\n        foreach (char c in num) {\n            int digit\
    \ = c - '0';\n            if (digit >= 2 && digit <= 9) {\n                result\
    \ += (digit * digit);\n            }\n        }\n        return result;", "  \
    \      long result = 0;\n        foreach (char c in num.ToUpper()) {\n       \
    \     int digit = Convert.ToInt32(c);\n            if (digit < 'A' || digit >\
    \ 'F') {\n                throw new ArgumentException(\"Invalid hexadecimal digit.\"\
    );\n            }\n            result += (digit - 'A') * Math.Pow(16, num.Length);\n\
    \        }\n        return result;", "        long ret = 0;\n        foreach (char\
    \ c in num.ToUpper()) {\n            int val = (int)c;\n            if (val <\
    \ 'A' || val > 'F') {\n                throw new ArgumentException(\"Invalid hexadecimal\
    \ digit.\");\n            }\n            if (val < '0' || val > '9') {\n     \
    \           throw new ArgumentException(\"Invalid hexadecimal digit.\");\n   \
    \         }\n            int digit = val - 'A';\n            if (digit < 2 ||\
    \ digit > 9) {\n                throw new ArgumentException(\"Invalid hexadecimal\
    \ digit.\");\n            }\n            int prime = digit * digit;\n        \
    \    if (prime > 9) {\n                throw new ArgumentException(\"Invalid hexadecimal\
    \ digit.\");\n            }\n            int prime2 = prime * prime;\n       \
    \     if (prime2 > 9) {\n                throw new ArgumentException(\"Invalid\
    \ hexadecimal digit.\");\n            }\n            int prime3 = prime2 * prime;\n\
    \            if (prime3 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime4 = prime3\
    \ * prime;\n            if (prime4 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime5 = prime4\
    \ * prime;\n            if (prime5 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime6 = prime5\
    \ * prime;\n            if (prime6 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime7 = prime6\
    \ * prime;\n            if (prime7 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime8 = prime7\
    \ * prime;\n            if (prime8 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime9 = prime8\
    \ * prime;\n            if (prime9 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime10 = prime9\
    \ * prime;\n            if (prime10 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime11 = prime10\
    \ * prime;\n            if (prime11 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime12 = prime11\
    \ * prime;\n            if (prime12 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime13 = prime12\
    \ * prime;\n            if (prime13 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime14 = prime13\
    \ * prime"]
stop_tokens:
- "\n    }\n"
