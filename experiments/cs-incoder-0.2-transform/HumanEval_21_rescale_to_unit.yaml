name: HumanEval_21_rescale_to_unit
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given list of numbers (of at least two elements), apply a linear\
  \ transform to that list,\n    // such that the smallest number will become 0 and\
  \ the largest will become 1\n    // >>> RescaleToUnit((new List<float>(new float[]{(float)1.0f,\
  \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f})))\n    // (new List<float>(new\
  \ float[]{(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))\n\
  \    public static List<float> RescaleToUnit(List<float> numbers) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RescaleToUnit((new\
  \ List<float>(new float[]{(float)2.0f, (float)49.9f}))).Equals((new List<float>(new\
  \ float[]{(float)0.0f, (float)1.0f}))));\n    Debug.Assert(RescaleToUnit((new List<float>(new\
  \ float[]{(float)100.0f, (float)49.9f}))).Equals((new List<float>(new float[]{(float)1.0f,\
  \ (float)0.0f}))));\n    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)1.0f,\
  \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))).Equals((new List<float>(new\
  \ float[]{(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))));\n\
  \    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)2.0f, (float)1.0f,\
  \ (float)5.0f, (float)3.0f, (float)4.0f}))).Equals((new List<float>(new float[]{(float)0.25f,\
  \ (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f}))));\n    Debug.Assert(RescaleToUnit((new\
  \ List<float>(new float[]{(float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
  \ (float)14.0f}))).Equals((new List<float>(new float[]{(float)0.25f, (float)0.0f,\
  \ (float)1.0f, (float)0.5f, (float)0.75f}))));\n    }\n\n}\n"
completions: ["        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float newMin = min - range * 0.5;\n\
    \        float newMax = max + range * 0.5;\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(newMin +\
    \ (newMax - newMin) * number);\n        }\n        return result;", "        if\
    \ (numbers.Count < 2) {\n            throw new ArgumentException(\"List must have\
    \ at least two elements\");\n        }\n        float min = numbers.Min();\n \
    \       float max = numbers.Max();\n        float range = max - min;\n       \
    \ if (range == 0) {\n            throw new ArgumentException(\"List must have\
    \ at least one element\");\n        }\n        float scale = 1.0f / range;\n \
    \       List<float> scaled = new List<float>(numbers);\n        for (int i = 0;\
    \ i < numbers.Count; i++) {\n            scaled[i] = numbers[i] * scale;\n   \
    \     }\n        return scaled;", "        if (numbers.Count < 2) return numbers;\n\
    \        float min = numbers.Min();\n        float max = numbers.Max();\n    \
    \    float scale = (max - min) / (float)numbers.Count;\n        List<float> result\
    \ = new List<float>(numbers);\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   float range = max - min;\n        float scale = (float)1.0 / range;\n    \
    \    List<float> scaled = new List<float>(numbers);\n        foreach (float number\
    \ in scaled) {\n            number = (number - min) * scale;\n        }\n    \
    \    return scaled;", "        if (numbers.Count < 2) return numbers;\n      \
    \  float min = numbers.Min();\n        float max = numbers.Max();\n        float\
    \ scale = (max - min) / (numbers.Count - 1);\n        List<float> result = new\
    \ List<float>(numbers.Count);\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            result.Add(numbers[i] * scale);\n        }\n        return result;",
  "        if (numbers.Count < 2) {\n            return numbers;\n        }\n    \
    \    var min = numbers.Min();\n        var max = numbers.Max();\n        var scale\
    \ = (max - min) / (numbers.Count - 1);\n        var result = new List<float>();\n\
    \        foreach (var number in numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        if (numbers.Count < 2) {\n     \
    \       return numbers;\n        }\n\n        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n\n        float scale = (max - min) / (float)numbers.Count;\n\
    \n        List<float> result = new List<float>(numbers.Count);\n\n        foreach\
    \ (float number in numbers) {\n            result.Add(number * scale);\n     \
    \   }\n\n        return result;", "        float min = numbers.Min();\n      \
    \  float max = numbers.Max();\n        float range = max - min;\n        float\
    \ scale = (float)1.0 / range;\n        numbers.ForEach(n => n *= scale);\n   \
    \     return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float range = max - min;\n        float scale = (float)1.0\
    \ / range;\n        List<float> result = new List<float>();\n        foreach (float\
    \ number in numbers) {\n            result.Add(number * scale);\n        }\n \
    \       return result;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = (max - min) / (float)numbers.Count;\n\
    \        List<float> result = new List<float>(numbers);\n        foreach (float\
    \ number in numbers) {\n            result.Add(number * scale);\n        }\n \
    \       return result;", "        if (numbers.Count < 2) {\n            return\
    \ numbers;\n        }\n        float min = numbers.Min();\n        float max =\
    \ numbers.Max();\n        float range = max - min;\n        float scale = 1.0f\
    \ / range;\n        List<float> result = new List<float>();\n        foreach (float\
    \ number in numbers) {\n            result.Add(number * scale);\n        }\n \
    \       return result;", "        if (numbers.Count < 2) {\n            return\
    \ numbers;\n        }\n        float min = numbers.Min();\n        float max =\
    \ numbers.Max();\n        float range = max - min;\n        float scale = (float)1\
    \ / range;\n        List<float> scaled = new List<float>(numbers.Count);\n   \
    \     foreach (float number in numbers) {\n            scaled.Add(number * scale);\n\
    \        }\n        return scaled;", "        if (numbers.Count < 2) {\n     \
    \       return numbers;\n        }\n        var min = numbers.Min();\n       \
    \ var max = numbers.Max();\n        var scale = (max - min) / (float)numbers.Count;\n\
    \        var result = new List<float>(numbers.Count);\n        for (int i = 0;\
    \ i < numbers.Count; i++) {\n            result[i] = numbers[i] * scale;\n   \
    \     }\n        return result;", "        Debug.Assert(numbers.Count >= 2);\n\
    \        float min = numbers.Min();\n        float max = numbers.Max();\n    \
    \    float range = max - min;\n        float scale = (float)1.0 / range;\n   \
    \     List<float> result = new List<float>(numbers);\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        if (numbers.Count < 2) return numbers;\n        float min\
    \ = numbers.Min();\n        float max = numbers.Max();\n        float scale =\
    \ (max - min) / (float)numbers.Count;\n        List<float> result = new List<float>(numbers.Count);\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = (float)1.0 / range;\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        numbers.ForEach(n => n *= scale);\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float range = max - min;\n        float scale = (float)1.0\
    \ / range;\n        List<float> scaled = new List<float>(numbers);\n        foreach\
    \ (float number in numbers) {\n            scaled.Add(number * scale);\n     \
    \   }\n        return scaled;", "        float min = numbers.Min();\n        float\
    \ max = numbers.Max();\n        float range = max - min;\n        float scale\
    \ = (float)1.0 / range;\n        List<float> result = new List<float>();\n   \
    \     foreach (float number in numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        float smallest = numbers.Min();\n\
    \        float largest = numbers.Max();\n        float scale = (largest - smallest)\
    \ / (float)numbers.Count;\n        List<float> result = new List<float>(numbers);\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
