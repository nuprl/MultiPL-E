language: cs
name: HumanEval_161_solve
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n  \
    \  // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static\
    \ string Solve(string s) {\n        string result = \"\";\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"\
    1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\"\
    )));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"\
    #AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"\
    2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"\
    #ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n  \
    \  // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static\
    \ string Solve(string s) {\n        string result = \"\";\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"\
    1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\"\
    )));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"\
    #AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"\
    2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"\
    #ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n  \
    \  // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static\
    \ string Solve(string s) {\n        char[] chars = s.ToCharArray();\n        char[]\
    \ reverse = new char[chars.Length];\n        bool flag = false;\n        for (int\
    \ i = 0; i < chars.Length; i++) {\n            if (chars[i] == '@') {\n      \
    \          flag = true;\n            }\n            if (flag) {\n            \
    \    reverse[i] = chars[i];\n            } else {\n                reverse[i]\
    \ = chars[i].ToString().ToUpper();\n            }\n        }\n        return new\
    \ string(reverse);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"\
    AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\"\
    )));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"\
    #a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"\
    #aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n   \
    \ Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"\
    #ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaviw8ff5.cs(32,30): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1659793961
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n  \
    \  // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static\
    \ string Solve(string s) {\n        string result = \"\";\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"\
    1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\"\
    )));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"\
    #AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"\
    2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"\
    #ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n  \
    \  // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static\
    \ string Solve(string s) {\n        string result = \"\";\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"\
    1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\"\
    )));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"\
    #AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"\
    2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"\
    #ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n  \
    \  // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static\
    \ string Solve(string s) {\n        string result = \"\";\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"\
    1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\"\
    )));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"\
    #AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"\
    2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"\
    #ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n  \
    \  // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static\
    \ string Solve(string s) {\n        string result = \"\";\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"\
    1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\"\
    )));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"\
    #AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"\
    2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"\
    #ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n  \
    \  // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static\
    \ string Solve(string s) {\n        string result = \"\";\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"\
    1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\"\
    )));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"\
    #AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"\
    2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"\
    #ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n  \
    \  // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static\
    \ string Solve(string s) {\n        string result = \"\";\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                string temp\
    \ = c;\n                temp = Char.ToUpper(c);\n                temp = Char.ToLower(c);\n\
    \                result += temp;\n            } else {\n                result\
    \ += c;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\"\
    )));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"\
    ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\"\
    )));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"\
    #6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"\
    #$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp073vwxhh.cs(25,31): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp073vwxhh.cs(26,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp073vwxhh.cs(27,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659793961
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n  \
    \  // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static\
    \ string Solve(string s) {\n        string result = \"\";\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"\
    1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\"\
    )));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"\
    #AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"\
    2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"\
    #ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n  \
    \  // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static\
    \ string Solve(string s) {\n        string result = \"\";\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"\
    1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\"\
    )));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"\
    #AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"\
    2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"\
    #ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n  \
    \  // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static\
    \ string Solve(string s) {\n        string result = \"\";\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                string temp\
    \ = c;\n                c = char.ToUpper(c);\n                result += temp;\n\
    \                c = char.ToLower(c);\n                result += temp;\n     \
    \       } else {\n                result += c;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"\
    1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\"\
    )));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"\
    #AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"\
    2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"\
    #ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp6bpy686.cs(25,31): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpp6bpy686.cs(26,17): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmpp6bpy686.cs(28,17): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659793827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n  \
    \  // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static\
    \ string Solve(string s) {\n        string result = \"\";\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                string temp\
    \ = char.ToUpper(c);\n                result += temp;\n            } else {\n\
    \                result += c;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"\
    AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\"\
    )));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"\
    #a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"\
    #aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n   \
    \ Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"\
    #ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7x2598e7.cs(25,31): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659793827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n  \
    \  // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static\
    \ string Solve(string s) {\n        char[] chars = s.ToCharArray();\n        char[]\
    \ reversed = new char[chars.Length];\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] == 'a' || chars[i] == 'A') {\n            \
    \    reversed[i] = (char)(char.ToUpper(chars[i]) - 64);\n            } else if\
    \ (chars[i] == 'b' || chars[i] == 'B') {\n                reversed[i] = (char)(char.ToUpper(chars[i])\
    \ - 96);\n            } else if (chars[i] == 'c' || chars[i] == 'C') {\n     \
    \           reversed[i] = (char)(char.ToUpper(chars[i]) - 127);\n            }\
    \ else {\n                reversed[i] = chars[i];\n            }\n        }\n\
    \        return new string(reversed);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"\
    1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\"\
    )));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"\
    #AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"\
    2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"\
    #ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36dd03f337cd45efafc38f242579355d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36dd03f337cd45efafc38f242579355d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793962
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n  \
    \  // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static\
    \ string Solve(string s) {\n        char[] chars = s.ToCharArray();\n        char[]\
    \ newChars = new char[chars.Length];\n        bool isLetter = false;\n       \
    \ bool isUpper = false;\n        bool isLower = false;\n        for (int i = 0;\
    \ i < chars.Length; i++) {\n            char c = chars[i];\n            if (char.IsLetter(c))\
    \ {\n                isLetter = true;\n                isUpper = char.IsUpper(c);\n\
    \                isLower = char.IsLower(c);\n            }\n            if (char.IsUpper(c))\
    \ {\n                isUpper = true;\n                isLetter = char.IsLetter(c);\n\
    \                isLower = char.IsLower(c);\n            }\n            if (char.IsLower(c))\
    \ {\n                isLower = true;\n                isLetter = char.IsLetter(c);\n\
    \                isUpper = char.IsUpper(c);\n            }\n            newChars[i]\
    \ = c;\n        }\n        if (isLetter) {\n            char[] newChars2 = new\
    \ char[newChars.Length];\n            for (int i = 0; i < newChars.Length; i++)\
    \ {\n                if (isUpper) {\n                    newChars2[i] = (char)(newChars[i]\
    \ - 32);\n                }\n                if (isLower) {\n                \
    \    newChars2[i] = (char)(newChars[i] + 32);\n                }\n           \
    \ }\n            return new string(newChars2);\n        }\n        else {\n  \
    \          return new string(newChars);\n        }\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n\
    \    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"\
    ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\"\
    )));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"\
    #6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"\
    #$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <479b66ab23c240899cc442d25a786915>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <479b66ab23c240899cc442d25a786915>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793962
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n  \
    \  // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static\
    \ string Solve(string s) {\n        string result = \"\";\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"\
    1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\"\
    )));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"\
    #AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"\
    2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"\
    #ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n  \
    \  // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static\
    \ string Solve(string s) {\n        char[] chars = s.ToCharArray();\n        string\
    \ result = \"\";\n        foreach (char c in chars) {\n            if (char.IsLetter(c))\
    \ {\n                result += (char.ToUpper(c));\n            } else {\n    \
    \            result += (char.ToLower(c));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"\
    AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\"\
    )));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"\
    #a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"\
    #aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n   \
    \ Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"\
    #ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <58c7a021629a442ea8dbc8839d8bf251>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <58c7a021629a442ea8dbc8839d8bf251>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n  \
    \  // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static\
    \ string Solve(string s) {\n        string result = \"\";\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"\
    1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\"\
    )));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"\
    #AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"\
    2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"\
    #ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n  \
    \  // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static\
    \ string Solve(string s) {\n        string result = \"\";\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"\
    1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\"\
    )));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"\
    #AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"\
    2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"\
    #ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n  \
    \  // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static\
    \ string Solve(string s) {\n        string result = \"\";\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"\
    1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\"\
    )));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"\
    #AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"\
    2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"\
    #ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abadcb0c07024f678c0d09c6f41f9865>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793827
