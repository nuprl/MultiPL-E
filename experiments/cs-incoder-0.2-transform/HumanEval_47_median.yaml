name: HumanEval_47_median
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
  \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n \
  \   // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
  \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public static\
  \ float Median(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
  \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L,\
  \ (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
  \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
completions: ["        long sum = 0;\n        foreach (var item in l) {\n        \
    \    sum += item;\n        }\n        float median = sum / l.Count;\n        return\
    \ median;", "        long median = 0;\n        long total = 0;\n        foreach\
    \ (long x in l) {\n            total += x;\n        }\n        if (total % 2 ==\
    \ 0) {\n            median = (long)((float)l.Sort((a, b) => b - a).Skip(l.Count\
    \ / 2).First() + l.Sort((a, b) => a - b).Skip(l.Count / 2).First()) / 2;\n   \
    \     } else {\n            median = (long)((float)l.Sort((a, b) => b - a).Skip(l.Count\
    \ / 2).Last() + l.Sort((a, b) => a - b).Skip(l.Count / 2).Last()) / 2;\n     \
    \   }\n        return (float)median;", "        float median;\n        long medianIndex;\n\
    \        long medianCount;\n        long medianCount2;\n        long medianCount3;\n\
    \        long medianCount4;\n        long medianCount5;\n        long medianCount6;\n\
    \        long medianCount7;\n        long medianCount8;\n        long medianCount9;\n\
    \        long medianCount10;\n        long medianCount11;\n        long medianCount12;\n\
    \        long medianCount13;\n        long medianCount14;\n        long medianCount15;\n\
    \        long medianCount16;\n        long medianCount17;\n        long medianCount18;\n\
    \        long medianCount19;\n        long medianCount20;\n        long medianCount21;\n\
    \        long medianCount22;\n        long medianCount23;\n        long medianCount24;\n\
    \        long medianCount25;\n        long medianCount26;\n        long medianCount27;\n\
    \        long medianCount28;\n        long medianCount29;\n        long medianCount30;\n\
    \        long medianCount31;\n        long medianCount32;\n        long medianCount33;\n\
    \        long medianCount34;\n        long medianCount35;\n        long medianCount36;\n\
    \        long medianCount37;\n        long medianCount38;\n        long medianCount39;\n\
    \        long medianCount40;\n        long medianCount41;\n        long medianCount42;\n\
    \        long medianCount43;\n        long medianCount44;\n        long medianCount45;\n\
    \        long medianCount46;\n        long medianCount47;\n        long medianCount48;\n\
    \        long medianCount49;\n        long medianCount50;\n        long medianCount51;\n\
    \        long medianCount52;\n        long medianCount53;\n        long medianCount54;\n\
    \        long medianCount55;\n        long medianCount56;\n        long medianCount57;\n\
    \        long medianCount58;\n        long medianCount59;\n        long medianCount60;\n\
    \        long medianCount61;\n        long medianCount62;\n        long medianCount63;\n\
    \        long medianCount64;\n        long medianCount65;\n        long medianCount66;\n\
    \        long medianCount67;\n        long medianCount68;\n        long medianCount69;\n\
    \        long medianCount70;\n        long medianCount71;\n        long medianCount72;\n\
    \        long medianCount73;\n        long medianCount74;\n        long medianCount",
  "        long sum = 0;\n        long count = 0;\n        foreach (long x in l) {\n\
    \            sum += x;\n            count++;\n        }\n        if (count ==\
    \ 0) {\n            return (float)0;\n        }\n        float median = (float)sum\
    \ / count;\n        return median;", "        long median = l.Count > 0 ? l.OrderBy(x\
    \ => x).Skip(l.Count / 2).Take(1).LastOrDefault() : 0L;\n        return median\
    \ == 0L ? 0f : median;", "        long sum = 0;\n        long count = 0;\n   \
    \     foreach (long x in l) {\n            sum += x;\n            count++;\n \
    \       }\n        if (count == 0) {\n            return (float)0.0;\n       \
    \ }\n        float median = (float)sum / count;\n        return median;", "  \
    \      if (l.Count == 0) return 0f;\n        long middle = l.Count / 2;\n    \
    \    float median = 0f;\n        long left = 0L;\n        long right = 0L;\n \
    \       foreach (long x in l) {\n            if (x < left) left = x;\n       \
    \     if (x > right) right = x;\n        }\n        if (left == right) return\
    \ 0f;\n        float leftMedian = Median(new List<long>(l.Take(middle)));\n  \
    \      float rightMedian = Median(new List<long>(l.Skip(middle).Take(middle)));\n\
    \        median = (left + right) / 2f;\n        if (leftMedian > rightMedian)\
    \ median = leftMedian;\n        return median;", "        long median = 0;\n \
    \       long count = 0;\n        foreach (long x in l) {\n            count +=\
    \ x;\n        }\n        if (count % 2 == 0) {\n            median = (long)((double)l.ElementAt(count\
    \ / 2) - l.ElementAt(count / 2 + 1));\n        } else {\n            median =\
    \ (long)((double)l.ElementAt(count / 2) + l.ElementAt(count / 2 + 1));\n     \
    \   }\n        return (float)median;", "        long sum = 0;\n        long count\
    \ = 0;\n        foreach (long x in l) {\n            sum += x;\n            count++;\n\
    \        }\n        if (count == 0) return (float)0;\n        float median = (float)sum\
    \ / count;\n        return median;", "        l.Sort();\n        float median;\n\
    \        if (l.Count % 2 == 0) {\n            median = (float)(l[l.Count / 2]\
    \ + l[l.Count / 2 - 1]) / 2;\n        } else {\n            median = l[l.Count\
    \ / 2];\n        }\n        return median;", "        float median = 0;\n    \
    \    long largest = l.Max();\n        long smallest = l.Min();\n        if (largest\
    \ == smallest) {\n            return (float)largest;\n        }\n        float\
    \ average = (float)((largest + smallest) / 2);\n        float difference = average\
    \ - l.Average();\n        if (difference < 0) {\n            difference = difference\
    \ * -1;\n        }\n        float difference2 = average - l.Sum() / l.Count;\n\
    \        if (difference2 < 0) {\n            difference2 = difference2 * -1;\n\
    \        }\n        float difference3 = average - l.Sum(x => x) / l.Count;\n \
    \       if (difference3 < 0) {\n            difference3 = difference3 * -1;\n\
    \        }\n        float difference4 = average - l.Sum(x => Math.Pow(x, 2)) /\
    \ l.Count;\n        if (difference4 < 0) {\n            difference4 = difference4\
    \ * -1;\n        }\n        float difference5 = average - l.Sum(x => Math.Pow(x,\
    \ 3)) / l.Count;\n        if (difference5 < 0) {\n            difference5 = difference5\
    \ * -1;\n        }\n        float difference6 = average - l.Sum(x => Math.Pow(x,\
    \ 4)) / l.Count;\n        if (difference6 < 0) {\n            difference6 = difference6\
    \ * -1;\n        }\n        float difference7 = average - l.Sum(x => Math.Pow(x,\
    \ 5)) / l.Count;\n        if (difference7 < 0) {\n            difference7 = difference7\
    \ * -1;\n        }\n        float difference8 = average - l.Sum(x => Math.Pow(x,\
    \ 6)) / l.Count;\n        if (difference8 < 0) {\n            difference8 = difference8\
    \ * -1;\n        }\n        float difference9 = average - l.Sum(x => Math.Pow(x,\
    \ 7)) / l.Count;\n        if (difference9 < 0) {\n            difference9 = difference9\
    \ * -1;\n        }\n        float difference10 = average - l.Sum(x => Math.Pow(x,\
    \ 8)) / l.Count;\n        if (difference10 < 0) {\n            difference10 =\
    \ difference10 * -1;\n        }\n        float difference11 = average - l.Sum(x\
    \ => Math.Pow(x, 9)) / l.Count;\n        if (difference11 < 0) {\n           \
    \ difference11 = difference11 * -1;\n        }\n        float difference12 = average\
    \ - l.Sum(x => Math.Pow(x, 10)) / l.Count;\n        if (difference12 < 0) {\n\
    \            difference12 = difference12 * -1;\n        }\n        float difference13\
    \ = average - l.Sum(x => Math.Pow(x, 11)) / l.Count;\n        if (difference13\
    \ < 0) {\n            difference13 = difference13 * -1;\n        }\n        float\
    \ difference14 = average - l.Sum(x => Math.Pow(x, 12)) / l.Count;\n        if\
    \ (difference14 < 0) {\n            difference14 = difference14", "        long\
    \ median = 0;\n        long count = 0;\n        foreach (long x in l) {\n    \
    \        count++;\n            if (count % 2 == 0) {\n                median =\
    \ (median + x) / 2;\n            } else {\n                median = x;\n     \
    \       }\n        }\n        return (float)median;", "        long n = l.Count;\n\
    \        if (n < 2) return 0f;\n        long mid = n / 2;\n        float median\
    \ = 0;\n        foreach (long x in l) {\n            if (x < mid) median += x;\n\
    \            else if (x > mid) median -= x;\n        }\n        return median\
    \ / n;", "        l.Sort();\n        float median;\n        if (l.Count % 2 ==\
    \ 0) {\n            median = (float)l.ElementAt(l.Count / 2);\n        } else\
    \ {\n            median = (float)l.ElementAt(l.Count / 2 - 1);\n        }\n  \
    \      return median;", "        float median;\n        if (l.Count % 2 == 0)\
    \ {\n            median = (float)l.GetValue(l.Count / 2);\n        } else {\n\
    \            median = (float)l.GetValue((l.Count - 1) / 2);\n        }\n     \
    \   return median;", "        long median = 0;\n        long count = 0;\n    \
    \    foreach (long i in l) {\n            count += 1;\n            if (count %\
    \ 2 == 0) {\n                median += i;\n            }\n        }\n        if\
    \ (count % 2 == 1) {\n            median += l.Last();\n        }\n        return\
    \ (float)median;", "        float median;\n        long medianIndex;\n       \
    \ long medianCount;\n        long min;\n        long max;\n        long sum;\n\
    \        long sumOfSquares;\n        long sumOfSquaresOfSquares;\n        long\
    \ count;\n        long countOfSquares;\n        long countOfSquaresOfSquares;\n\
    \        long countOfElements;\n        long countOfElementsOfSquares;\n     \
    \   long countOfElementsOfSquaresOfSquares;\n        long countOfElementsOfElements;\n\
    \        long countOfElementsOfElementsOfSquares;\n        long countOfElementsOfElementsOfSquaresOfSquares;\n\
    \        long countOfElementsOfElementsOfElements;\n        long countOfElementsOfElementsOfElementsOfSquares;\n\
    \        long countOfElementsOfElementsOfElementsOfSquaresOfSquares;\n       \
    \ long countOfElementsOfElementsOfElementsOfElements;\n        long countOfElementsOfElementsOfElementsOfElementsOfSquares;\n\
    \        long countOfElementsOfElementsOfElementsOfElementsOfSquaresOfSquares;\n\
    \        long countOfElementsOfElementsOfElementsOfElementsOfElements;\n     \
    \   long countOfElementsOfElementsOfElementsOfElementsOfElementsOfSquares;\n \
    \       long countOfElementsOfElementsOfElementsOfElementsOfElementsOfSquaresOfSquares;\n\
    \        long countOfElementsOfElementsOfElementsOfElementsOfElementsOfElements;\n\
    \        long countOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfSquares;\n\
    \        long countOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfSquaresOfSquares;\n\
    \        long countOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements;\n\
    \        long countOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfSquares;\n\
    \        long countOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfSquaresOfSquares;\n\
    \        long countOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElement",
  "        float median;\n        long medianIndex;\n        long medianCount;\n \
    \       long medianCount2;\n        long medianCount3;\n        long medianCount4;\n\
    \        long medianCount5;\n        long medianCount6;\n        long medianCount7;\n\
    \        long medianCount8;\n        long medianCount9;\n        long medianCount10;\n\
    \        long medianCount11;\n        long medianCount12;\n        long medianCount13;\n\
    \        long medianCount14;\n        long medianCount15;\n        long medianCount16;\n\
    \        long medianCount17;\n        long medianCount18;\n        long medianCount19;\n\
    \        long medianCount20;\n        long medianCount21;\n        long medianCount22;\n\
    \        long medianCount23;\n        long medianCount24;\n        long medianCount25;\n\
    \        long medianCount26;\n        long medianCount27;\n        long medianCount28;\n\
    \        long medianCount29;\n        long medianCount30;\n        long medianCount31;\n\
    \        long medianCount32;\n        long medianCount33;\n        long medianCount34;\n\
    \        long medianCount35;\n        long medianCount36;\n        long medianCount37;\n\
    \        long medianCount38;\n        long medianCount39;\n        long medianCount40;\n\
    \        long medianCount41;\n        long medianCount42;\n        long medianCount43;\n\
    \        long medianCount44;\n        long medianCount45;\n        long medianCount46;\n\
    \        long medianCount47;\n        long medianCount48;\n        long medianCount49;\n\
    \        long medianCount50;\n        long medianCount51;\n        long medianCount52;\n\
    \        long medianCount53;\n        long medianCount54;\n        long medianCount55;\n\
    \        long medianCount56;\n        long medianCount57;\n        long medianCount58;\n\
    \        long medianCount59;\n        long medianCount60;\n        long medianCount61;\n\
    \        long medianCount62;\n        long medianCount63;\n        long medianCount64;\n\
    \        long medianCount65;\n        long medianCount66;\n        long medianCount67;\n\
    \        long medianCount68;\n        long medianCount69;\n        long medianCount70;\n\
    \        long medianCount71;\n        long medianCount72;\n        long medianCount73;\n\
    \        long medianCount74;\n        long medianCount", "        float median;\n\
    \        if (l.Count % 2 == 0) {\n            median = (float)l.ElementAt(l.Count\
    \ / 2);\n        } else {\n            median = (float)l.ElementAt(l.Count / 2\
    \ + 1);\n        }\n        return median;", "        long median = 0;\n     \
    \   long count = 0;\n        foreach (long x in l) {\n            count += 1;\n\
    \            if (count % 2 == 0) {\n                median += x;\n           \
    \ }\n        }\n        if (count % 2 == 0) {\n            median /= 2;\n    \
    \    }\n        return (float)median;"]
stop_tokens:
- "\n    }\n"
