name: HumanEval_140_fix_spaces
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string text, replace all spaces in it with underscores,\
  \ \n    // and if a string has more than 2 consecutive spaces, \n    // then replace\
  \ all consecutive spaces with - \n    // >>> FixSpaces((\" Example\"))\n    // (\"\
  Example\")\n    // >>> FixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n   \
  \ // >>> FixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> FixSpaces((\"\
  \ Example 3\"))\n    // (\"_Example-3\")\n    public static string FixSpaces(string\
  \ text) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FixSpaces((\"\
  Example\")).Equals((\"Example\")));\n    Debug.Assert(FixSpaces((\"Mudasir Hanif\
  \ \")).Equals((\"Mudasir_Hanif_\")));\n    Debug.Assert(FixSpaces((\"Yellow Yellow\
  \  Dirty  Fellow\")).Equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    Debug.Assert(FixSpaces((\"\
  Exa   mple\")).Equals((\"Exa-mple\")));\n    Debug.Assert(FixSpaces((\"   Exa 1\
  \ 2 2 mple\")).Equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
completions: ["        string result = text;\n        if (result.Contains(\" \"))\
    \ {\n            result = result.Replace(\" \", \"_\");\n            int spaceCount\
    \ = result.Count(x => x == \" \");\n            if (spaceCount > 2) {\n      \
    \          result = result.Replace(\" \", \"-\");\n            }\n        }\n\
    \        return result;", "        string result = \"\";\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                result += \"_\";\n\
    \            }\n            else {\n                result += c;\n           \
    \ }\n        }\n        if (result.Length > 2) {\n            int i = 0;\n   \
    \         while (i < result.Length - 2) {\n                if (result[i] == '_'\
    \ && result[i + 1] == '_') {\n                    result += \" - \";\n       \
    \             i += 2;\n                }\n                else {\n           \
    \         i++;\n                }\n            }\n        }\n        return result;",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string newResult = \"\";\n            int i = 0;\n     \
    \       while (i < result.Length - 2) {\n                newResult += \"-\";\n\
    \                i++;\n            }\n            result += newResult;\n     \
    \   }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            int i = 0;\n           \
    \ while (i < result.Length - 2) {\n                if (result[i] == '_' && result[i\
    \ + 1] == '_') {\n                    result += result.Substring(i + 1, 2);\n\
    \                    i += 2;\n                } else {\n                    result\
    \ += result.Substring(i + 1, 1);\n                    i++;\n                }\n\
    \            }\n        }\n        return result;", '        return Regex.Replace(text,
    @"\s+", "_");', "        string result = \"\";\n        foreach (char c in text)\
    \ {\n            if (c == ' ') {\n                result += '_';\n           \
    \ } else {\n                result += c;\n            }\n        }\n        if\
    \ (result.Length > 2) {\n            string lastTwo = result.Substring(0, result.Length\
    \ - 2);\n            string rest = result.Substring(result.Length - 2);\n    \
    \        string newResult = lastTwo + \"-\" + rest;\n            return newResult;\n\
    \        } else {\n            return result;\n        }", '        return text.Replace("
    ", "_").Replace(" -", "_");', "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            string lastTwo = result.Substring(0,\
    \ result.Length - 2);\n            string rest = result.Substring(result.Length\
    \ - 2);\n            result += \"-\" + lastTwo;\n        }\n        return result;",
  "        if (text == null || text.Length == 0) return text;\n        var sb = new\
    \ StringBuilder();\n        var lastSpace = -1;\n        foreach (var c in text)\
    \ {\n            if (c == ' ') {\n                if (lastSpace == -1) {\n   \
    \                 sb.Append(c);\n                    lastSpace = c;\n        \
    \        } else if (lastSpace != c) {\n                    sb.Append('-');\n \
    \                   lastSpace = -1;\n                }\n            } else {\n\
    \                if (lastSpace != -1) {\n                    sb.Append('-');\n\
    \                    lastSpace = -1;\n                }\n                sb.Append(c);\n\
    \                lastSpace = c;\n            }\n        }\n        return sb.ToString();",
  '        return text.Replace(" ", "_").Replace(" -", "_");', "        // Replace\
    \ all spaces with underscores\n        text = text.Replace(\" \", \"_\");\n  \
    \      // If there are more than 2 consecutive spaces, replace all \n        //\
    \ consecutive spaces with -\n        if (text.Contains(\" \") && text.Contains(\"\
    \ \")) {\n            text = text.Replace(\" \", \"-\");\n        }\n        return\
    \ text;", "        // Replace all spaces with underscores\n        text = text.Replace(\"\
    \ \", \"_\");\n        // If there are more than 2 consecutive spaces, replace\
    \ all \n        // consecutive spaces with -\n        if (text.Contains(\" \"\
    ) && (text.IndexOf(\" \") + 1 == text.LastIndexOf(\" \")))\n            text =\
    \ text.Replace(\" \", \"-\");\n        return text;", '        return text.Replace("
    ", "_").Replace(" ", "-");', "        // Replace all spaces with underscores\n\
    \        text = text.Replace(\" \", \"_\");\n        // If text has more than\
    \ 2 consecutive spaces\n        if (text.Contains(\" \") && (text.IndexOf(\" \"\
    ) + 1).Equals(text.Length)) {\n            // Replace all consecutive spaces with\
    \ -\n            text = text.Replace(\" \", \"-\");\n        }\n        return\
    \ text;", "        // Replace all spaces with underscores\n        text = text.Replace(\"\
    \ \", \"_\");\n        // If there are more than 2 consecutive spaces, replace\
    \ all \n        // consecutive spaces with -\n        if (text.Contains(\" \"\
    ) && text.Contains(\" \")) {\n            text = text.Replace(\" \", \"-\");\n\
    \        }\n        return text;", "        if (text == null || text.Length ==\
    \ 0)\n            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool inSpace = false;\n        foreach (char c in text) {\n         \
    \   if (c == ' ') {\n                if (!inSpace) {\n                    inSpace\
    \ = true;\n                    sb.Append('_');\n                } else {\n   \
    \                 inSpace = false;\n                    sb.Append(c);\n      \
    \          }\n            } else {\n                sb.Append(c);\n          \
    \  }\n        }\n        return sb.ToString();", "        if (text == null ||\
    \ text.Length == 0)\n            return text;\n        StringBuilder sb = new\
    \ StringBuilder(text);\n        bool isFirst = true;\n        foreach (char c\
    \ in text) {\n            if (c == ' ') {\n                if (isFirst) {\n  \
    \                  isFirst = false;\n                } else {\n              \
    \      sb.Append('_');\n                }\n            } else {\n            \
    \    isFirst = true;\n            }\n        }\n        return sb.ToString();",
  "        if (text == null || text.Length == 0)\n            return text;\n     \
    \   StringBuilder sb = new StringBuilder(text);\n        bool spaceFound = false;\n\
    \        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '\
    \ ') {\n                spaceFound = true;\n                sb.Append('_');\n\
    \            } else {\n                if (spaceFound) {\n                   \
    \ spaceFound = false;\n                    sb.Append('-');\n                }\n\
    \                sb.Append(text[i]);\n            }\n        }\n        return\
    \ sb.ToString();", "        string result = \"\";\n        foreach (char c in\
    \ text) {\n            if (c == ' ') {\n                result += \"_\";\n   \
    \         } else {\n                result += c;\n            }\n        }\n \
    \       if (result.Length > 2) {\n            int lastSpace = result.LastIndexOf('\
    \ ');\n            int lastSpace2 = result.LastIndexOf(' ', lastSpace - 1);\n\
    \            if (lastSpace2 != -1) {\n                result = result.Substring(0,\
    \ lastSpace) + \"-\" + result.Substring(lastSpace2);\n            }\n        }\n\
    \        return result;", "        if (text == null || text.Length == 0)\n   \
    \         return text;\n        StringBuilder sb = new StringBuilder();\n    \
    \    bool isFirst = true;\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                if (isFirst) {\n                    isFirst =\
    \ false;\n                } else {\n                    sb.Append('_');\n    \
    \            }\n            } else {\n                sb.Append(c);\n        \
    \    }\n        }\n        return sb.ToString();"]
stop_tokens:
- "\n    }\n"
