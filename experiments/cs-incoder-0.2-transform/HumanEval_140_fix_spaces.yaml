name: HumanEval_140_fix_spaces
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string text, replace all spaces in it with underscores,\
  \ \n    // and if a string has more than 2 consecutive spaces, \n    // then replace\
  \ all consecutive spaces with - \n    // >>> FixSpaces((\" Example\"))\n    // (\"\
  Example\")\n    // >>> FixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n   \
  \ // >>> FixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> FixSpaces((\"\
  \ Example 3\"))\n    // (\"_Example-3\")\n    public static string FixSpaces(string\
  \ text) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FixSpaces((\"\
  Example\")).Equals((\"Example\")));\n    Debug.Assert(FixSpaces((\"Mudasir Hanif\
  \ \")).Equals((\"Mudasir_Hanif_\")));\n    Debug.Assert(FixSpaces((\"Yellow Yellow\
  \  Dirty  Fellow\")).Equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    Debug.Assert(FixSpaces((\"\
  Exa   mple\")).Equals((\"Exa-mple\")));\n    Debug.Assert(FixSpaces((\"   Exa 1\
  \ 2 2 mple\")).Equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
completions: ["        string result = text;\n        if (result.Contains(\" \"))\
    \ {\n            result = result.Replace(\" \", \"_\");\n            int spaceCount\
    \ = result.Count(x => x == \" \");\n            if (spaceCount > 2) {\n      \
    \          result = result.Replace(\" \", \"-\");\n            }\n        }\n\
    \        return result;", "        string result = \"\";\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                result += \"_\";\n\
    \            }\n            else {\n                result += c;\n           \
    \ }\n        }\n        if (result.Length > 2) {\n            int i = 0;\n   \
    \         while (i < result.Length - 2) {\n                if (result[i] == '_'\
    \ && result[i + 1] == '_') {\n                    result += \" - \";\n       \
    \             i += 2;\n                }\n                else {\n           \
    \         i++;\n                }\n            }\n        }\n        return result;",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string newResult = \"\";\n            int i = 0;\n     \
    \       while (i < result.Length - 2) {\n                newResult += \"-\";\n\
    \                i++;\n            }\n            result += newResult;\n     \
    \   }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            int i = 0;\n           \
    \ while (i < result.Length - 2) {\n                if (result[i] == '_' && result[i\
    \ + 1] == '_') {\n                    result += result.Substring(i + 1, 2);\n\
    \                    i += 2;\n                } else {\n                    result\
    \ += result.Substring(i + 1, 1);\n                    i++;\n                }\n\
    \            }\n        }\n        return result;", '        return Regex.Replace(text,
    @"\s+", "_");', "        string result = \"\";\n        foreach (char c in text)\
    \ {\n            if (c == ' ') {\n                result += '_';\n           \
    \ } else {\n                result += c;\n            }\n        }\n        if\
    \ (result.Length > 2) {\n            string lastTwo = result.Substring(0, result.Length\
    \ - 2);\n            string rest = result.Substring(result.Length - 2);\n    \
    \        string newResult = lastTwo + \"-\" + rest;\n            return newResult;\n\
    \        } else {\n            return result;\n        }", '        return text.Replace("
    ", "_").Replace(" -", "_");', "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            string lastTwo = result.Substring(0,\
    \ result.Length - 2);\n            string rest = result.Substring(result.Length\
    \ - 2);\n            result += \"-\" + lastTwo;\n        }\n        return result;",
  "        if (text == null || text.Length == 0) return text;\n        var sb = new\
    \ StringBuilder();\n        var lastSpace = -1;\n        foreach (var c in text)\
    \ {\n            if (c == ' ') {\n                if (lastSpace == -1) {\n   \
    \                 sb.Append(c);\n                    lastSpace = c;\n        \
    \        } else if (lastSpace != c) {\n                    sb.Append('-');\n \
    \                   lastSpace = -1;\n                }\n            } else {\n\
    \                if (lastSpace != -1) {\n                    sb.Append('-');\n\
    \                    lastSpace = -1;\n                }\n                sb.Append(c);\n\
    \                lastSpace = c;\n            }\n        }\n        return sb.ToString();",
  '        return text.Replace(" ", "_").Replace(" -", "_");', "        // Replace\
    \ all spaces with underscores\n        text = text.Replace(\" \", \"_\");\n  \
    \      // If there are more than 2 consecutive spaces, replace all \n        //\
    \ consecutive spaces with -\n        if (text.Contains(\" \") && text.Contains(\"\
    \ \")) {\n            text = text.Replace(\" \", \"-\");\n        }\n        return\
    \ text;", "        // Replace all spaces with underscores\n        text = text.Replace(\"\
    \ \", \"_\");\n        // If there are more than 2 consecutive spaces, replace\
    \ all \n        // consecutive spaces with -\n        if (text.Contains(\" \"\
    ) && (text.IndexOf(\" \") + 1 == text.LastIndexOf(\" \")))\n            text =\
    \ text.Replace(\" \", \"-\");\n        return text;", '        return text.Replace("
    ", "_").Replace(" ", "-");', "        // Replace all spaces with underscores\n\
    \        text = text.Replace(\" \", \"_\");\n        // If text has more than\
    \ 2 consecutive spaces\n        if (text.Contains(\" \") && (text.IndexOf(\" \"\
    ) + 1).Equals(text.Length)) {\n            // Replace all consecutive spaces with\
    \ -\n            text = text.Replace(\" \", \"-\");\n        }\n        return\
    \ text;", "        // Replace all spaces with underscores\n        text = text.Replace(\"\
    \ \", \"_\");\n        // If there are more than 2 consecutive spaces, replace\
    \ all \n        // consecutive spaces with -\n        if (text.Contains(\" \"\
    ) && text.Contains(\" \")) {\n            text = text.Replace(\" \", \"-\");\n\
    \        }\n        return text;", "        if (text == null || text.Length ==\
    \ 0)\n            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool inSpace = false;\n        foreach (char c in text) {\n         \
    \   if (c == ' ') {\n                if (!inSpace) {\n                    inSpace\
    \ = true;\n                    sb.Append('_');\n                } else {\n   \
    \                 inSpace = false;\n                    sb.Append(c);\n      \
    \          }\n            } else {\n                sb.Append(c);\n          \
    \  }\n        }\n        return sb.ToString();", "        if (text == null ||\
    \ text.Length == 0)\n            return text;\n        StringBuilder sb = new\
    \ StringBuilder(text);\n        bool isFirst = true;\n        foreach (char c\
    \ in text) {\n            if (c == ' ') {\n                if (isFirst) {\n  \
    \                  isFirst = false;\n                } else {\n              \
    \      sb.Append('_');\n                }\n            } else {\n            \
    \    isFirst = true;\n            }\n        }\n        return sb.ToString();",
  "        if (text == null || text.Length == 0)\n            return text;\n     \
    \   StringBuilder sb = new StringBuilder(text);\n        bool spaceFound = false;\n\
    \        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '\
    \ ') {\n                spaceFound = true;\n                sb.Append('_');\n\
    \            } else {\n                if (spaceFound) {\n                   \
    \ spaceFound = false;\n                    sb.Append('-');\n                }\n\
    \                sb.Append(text[i]);\n            }\n        }\n        return\
    \ sb.ToString();", "        string result = \"\";\n        foreach (char c in\
    \ text) {\n            if (c == ' ') {\n                result += \"_\";\n   \
    \         } else {\n                result += c;\n            }\n        }\n \
    \       if (result.Length > 2) {\n            int lastSpace = result.LastIndexOf('\
    \ ');\n            int lastSpace2 = result.LastIndexOf(' ', lastSpace - 1);\n\
    \            if (lastSpace2 != -1) {\n                result = result.Substring(0,\
    \ lastSpace) + \"-\" + result.Substring(lastSpace2);\n            }\n        }\n\
    \        return result;", "        if (text == null || text.Length == 0)\n   \
    \         return text;\n        StringBuilder sb = new StringBuilder();\n    \
    \    bool isFirst = true;\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                if (isFirst) {\n                    isFirst =\
    \ false;\n                } else {\n                    sb.Append('_');\n    \
    \            }\n            } else {\n                sb.Append(c);\n        \
    \    }\n        }\n        return sb.ToString();", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            int i\
    \ = 0;\n            while (i < result.Length - 2) {\n                if (result[i]\
    \ == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                \
    \    result += \"-\";\n                    i += 2;\n                } else {\n\
    \                    i++;\n                }\n            }\n        }\n     \
    \   return result;", "        string result = \"\";\n        foreach (char c in\
    \ text) {\n            if (c == ' ') {\n                result += \"_\";\n   \
    \         } else {\n                result += c;\n            }\n        }\n \
    \       if (result.Length > 2) {\n            int i = 0;\n            while (i\
    \ < result.Length - 2) {\n                if (result[i] == ' ' && result[i + 1]\
    \ == ' ' && result[i + 2] == ' ') {\n                    result += \"-\";\n  \
    \                  i += 2;\n                } else {\n                    result\
    \ += result[i];\n                    i++;\n                }\n            }\n\
    \        }\n        return result;", "        if (string.IsNullOrEmpty(text))\n\
    \            return text;\n        StringBuilder sb = new StringBuilder();\n \
    \       bool isFirst = true;\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                if (isFirst) {\n                    isFirst\
    \ = false;\n                } else {\n                    sb.Append('_');\n  \
    \              }\n            } else {\n                sb.Append(c);\n      \
    \      }\n        }\n        return sb.ToString();", "        if (string.IsNullOrEmpty(text))\n\
    \            return text;\n        var sb = new StringBuilder();\n        foreach\
    \ (var c in text)\n            if (c == ' ')\n                sb.Append('_');\n\
    \            else\n                sb.Append(c);\n        return sb.ToString();",
  "        // Replace all spaces with underscores\n        text = text.Replace(\"\
    \ \", \"_\");\n\n        // If there are more than 2 consecutive spaces, \n  \
    \      // then replace all consecutive spaces with -\n        if (text.Contains(\"\
    \ \") && text.Contains(\" \")) {\n            text = text.Replace(\" \", \"-\"\
    );\n        }\n\n        return text;", "        string result = \"\";\n     \
    \   foreach (char c in text) {\n            if (c == ' ') {\n                result\
    \ += \"_\";\n            } else {\n                result += c;\n            }\n\
    \        }\n        if (result.Length > 2) {\n            string lastTwo = result.Substring(0,\
    \ result.Length - 2);\n            string rest = result.Substring(result.Length\
    \ - 2);\n            result = lastTwo + \"-\" + rest;\n        }\n        return\
    \ result;", "        string result = \"\";\n        foreach (char c in text) {\n\
    \            if (c == ' ') {\n                result += \"_\";\n            }\
    \ else {\n                result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int i = 0;\n            int j = result.Length - 1;\n   \
    \         while (i <= j) {\n                if (result[i] == ' ' && result[i +\
    \ 1] == ' ') {\n                    result += result.Substring(i + 1, result.Length\
    \ - i - 1);\n                    i += 2;\n                } else if (result[i]\
    \ == ' ' && result[i + 1] != '_') {\n                    result += result.Substring(i\
    \ + 1, result.Length - i - 1);\n                    i += 2;\n                }\
    \ else if (result[i] != '_' && result[i + 1] == ' ') {\n                    result\
    \ += result.Substring(i + 1, result.Length - i - 1);\n                    i +=\
    \ 2;\n                } else if (result[i] != '_' && result[i + 1] != '_') {\n\
    \                    result += result.Substring(i + 1, result.Length - i - 1);\n\
    \                    i += 2;\n                } else {\n                    i\
    \ += 1;\n                }\n            }\n        }\n        return result;",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            }\n         \
    \   else if (c != ' ' && c != '_') {\n                result += c;\n         \
    \   }\n        }\n        if (result.Length > 2) {\n            string temp =\
    \ result;\n            int count = 0;\n            while (temp.Length > 2) {\n\
    \                if (temp.Substring(0, 2) == \"_ \") {\n                    temp\
    \ = temp.Substring(2);\n                    count++;\n                }\n    \
    \            else {\n                    temp = temp.Substring(1);\n         \
    \       }\n            }\n            if (count == 0) {\n                result\
    \ += \"-\";\n            }\n        }\n        return result;", '        return
    text.Replace(" ", "_").Replace(" ", "-");', "        if (text == null || text.Length\
    \ == 0)\n            return text;\n        StringBuilder sb = new StringBuilder(text);\n\
    \        bool space = false;\n        for (int i = 0; i < sb.Length; i++) {\n\
    \            if (sb[i] == ' ') {\n                space = true;\n            }\
    \ else {\n                if (space) {\n                    sb.Replace(\" \",\
    \ \"_\", i, 1);\n                    space = false;\n                }\n     \
    \       }\n        }\n        return sb.ToString();", "        if (text == null)\n\
    \            return null;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        foreach (char c in text) {\n            if (c == ' ')\n             \
    \   sb.Append('_');\n            else\n                sb.Append(c);\n       \
    \ }\n        return sb.ToString();", "        if (text == null || text.Length\
    \ == 0)\n            return text;\n        StringBuilder sb = new StringBuilder(text);\n\
    \        bool spaceFound = false;\n        for (int i = 0; i < text.Length; i++)\
    \ {\n            if (text[i] == ' ') {\n                spaceFound = true;\n \
    \               sb.Append('_');\n            }\n            else if (spaceFound)\
    \ {\n                sb.Append('-');\n                spaceFound = false;\n  \
    \          }\n            else {\n                sb.Append(text[i]);\n      \
    \      }\n        }\n        return sb.ToString();", "        string result =\
    \ \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n   \
    \             result += \"_\";\n            } else {\n                result +=\
    \ c;\n            }\n        }\n        if (result.Length > 2) {\n           \
    \ int i = 0;\n            while (i < result.Length - 2) {\n                if\
    \ (result[i] == '_' && result[i + 1] == '_' && result[i + 2] == '_') {\n     \
    \               result += \"-\";\n                    i += 2;\n              \
    \  } else {\n                    i++;\n                }\n            }\n    \
    \    }\n        return result;", "        if (text == null || text.Length == 0)\
    \ return text;\n        string result = text;\n        string spaces = \" \";\n\
    \        string dashes = \"-\";\n        int spaceIndex = 0;\n        int dashesIndex\
    \ = 0;\n        while (spaceIndex < result.Length) {\n            if (result[spaceIndex]\
    \ == spaces) {\n                result[spaceIndex] = dashes;\n               \
    \ spaceIndex++;\n                dashesIndex = 0;\n            }\n           \
    \ else if (result[spaceIndex] == dashes) {\n                spaceIndex++;\n  \
    \              dashesIndex++;\n            }\n            else {\n           \
    \     spaceIndex++;\n            }\n        }\n        return result;", "    \
    \    if (text == null || text.Length == 0) return text;\n        StringBuilder\
    \ sb = new StringBuilder(text.Length);\n        bool wasSpace = false;\n     \
    \   foreach (char c in text) {\n            if (c == ' ') {\n                if\
    \ (!wasSpace) {\n                    sb.Append('_');\n                    wasSpace\
    \ = true;\n                }\n            } else {\n                sb.Append(c);\n\
    \                wasSpace = false;\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            result = result.Replace(\" \", \"-\");\n        }\n    \
    \    return result;", "        string result = \"\";\n        foreach (char c\
    \ in text) {\n            if (c == ' ') {\n                result += \"_\";\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        if (result.Length > 2) {\n            int lastSpace = result.LastIndexOf('\
    \ ');\n            string before = result.Substring(0, lastSpace);\n         \
    \   string after = result.Substring(lastSpace + 1);\n            result = before\
    \ + \"-\" + after;\n        }\n        return result;", "        string result\
    \ = \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    string lastTwo = result.Substring(0, result.Length - 2);\n            string\
    \ rest = result.Substring(result.Length - 2);\n            result += lastTwo +\
    \ \"-\" + rest;\n        }\n        return result;", "        string result =\
    \ \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n   \
    \             result += \"_\";\n            } else {\n                result +=\
    \ c;\n            }\n        }\n        if (result.Length > 2) {\n           \
    \ int i = 0;\n            while (i < result.Length - 2) {\n                if\
    \ (result[i] == '_' && result[i + 1] == '_') {\n                    result +=\
    \ result.Substring(i + 1, 2);\n                    i += 2;\n                }\
    \ else {\n                    result += result.Substring(i + 1, 1);\n        \
    \            i++;\n                }\n            }\n        }\n        return\
    \ result;", "        if (text == null)\n            return null;\n        StringBuilder\
    \ sb = new StringBuilder(text.Length);\n        foreach (char c in text) {\n \
    \           if (c == ' ')\n                sb.Append('_');\n            else\n\
    \                sb.Append(c);\n        }\n        return sb.ToString();", " \
    \       string result = \"\";\n        foreach (char c in text) {\n          \
    \  if (c == ' ') {\n                result += \"_\";\n            } else {\n \
    \               result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int i = 0;\n            int j = 0;\n            while (i\
    \ < result.Length - 1 && j < result.Length - 1) {\n                if (result[i]\
    \ == ' ' && result[j] == ' ') {\n                    result += \"-\";\n      \
    \              i++;\n                    j++;\n                } else if (result[i]\
    \ == ' ' && result[j] != ' ') {\n                    result += \"-\";\n      \
    \              i++;\n                } else if (result[i] != ' ' && result[j]\
    \ == ' ') {\n                    result += \"-\";\n                    j++;\n\
    \                } else {\n                    i++;\n                    j++;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   if (text == null)\n            return null;\n        StringBuilder sb = new\
    \ StringBuilder(text.Length);\n        bool first = true;\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                if (first) {\n  \
    \                  first = false;\n                } else {\n                \
    \    sb.Append('_');\n                }\n            } else {\n              \
    \  sb.Append(c);\n            }\n        }\n        return sb.ToString();", '        return
    Regex.Replace(text, @"\s+", "_");', "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            string lastSpace = result.Substring(result.Length\
    \ - 1);\n            string nextSpace = result.Substring(0, result.Length - 1);\n\
    \            if (lastSpace == nextSpace) {\n                result = result.Replace(lastSpace,\
    \ \"-\");\n            }\n        }\n        return result;", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    int i = 0;\n            while (i < result.Length - 2) {\n               \
    \ if (result[i] == '_' && result[i + 1] == '_') {\n                    result\
    \ += \"-\";\n                    i += 2;\n                } else {\n         \
    \           i++;\n                }\n            }\n        }\n        return\
    \ result;", "        if (text == null || text.Length == 0) return text;\n    \
    \    StringBuilder sb = new StringBuilder(text.Length);\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                sb.Append('_');\n\
    \            } else {\n                sb.Append(c);\n            }\n        }\n\
    \        return sb.ToString();", "        if (text == null) return null;\n   \
    \     StringBuilder sb = new StringBuilder(text.Length);\n        bool isFirst\
    \ = true;\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               if (isFirst) {\n                    isFirst = false;\n       \
    \         } else {\n                    sb.Append('_');\n                }\n \
    \           } else {\n                sb.Append(c);\n            }\n        }\n\
    \        return sb.ToString();", "        // Replace all spaces with underscores\n\
    \        text = text.Replace(\" \", \"_\");\n\n        // If text has more than\
    \ 2 consecutive spaces, replace all consecutive spaces with -\n        if (text.Contains(\"\
    \ \") && (text.IndexOf(\" \") == text.LastIndexOf(\" \") + 1)) {\n           \
    \ text = text.Replace(\" \", \"-\");\n        }\n\n        return text;", "  \
    \      if (text == null)\n            return null;\n        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         if (result.Length > 0)\n                    result += \"_\";\n     \
    \           else\n                    result += \"-\";\n            } else {\n\
    \                result += c;\n            }\n        }\n        return result;",
  "        if (text == null || text.Length == 0) return text;\n        StringBuilder\
    \ sb = new StringBuilder(text.Length);\n        foreach (char c in text) {\n \
    \           if (c == ' ') {\n                sb.Append('_');\n            } else\
    \ {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int i = 0;\n            while (i < result.Length - 2) {\n\
    \                if (result[i] == '_' && result[i + 1] == '_') {\n           \
    \         result += \"-\";\n                    i += 2;\n                } else\
    \ {\n                    i++;\n                }\n            }\n        }\n \
    \       return result;", "        // Replace all spaces with underscores\n   \
    \     text = text.Replace(\" \", \"_\");\n\n        // If there are more than\
    \ 2 consecutive spaces\n        if (text.Contains(\" \") && (text.IndexOf(\" \"\
    ) + 1).Equals(text.Length)) {\n            // Replace all consecutive spaces with\
    \ -\n            text = text.Replace(\" \", \"-\");\n        }\n\n        return\
    \ text;", "        if (text == null || text.Length == 0)\n            return text;\n\
    \        if (text.Length == 1)\n            return text;\n        if (text.Length\
    \ > 2)\n            return text.Replace(\" \", \"-\");\n        return text;",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            result = result.Replace(\" \", \"-\");\n        }\n    \
    \    return result;", "        if (text == null)\n            return null;\n \
    \       string result = \"\";\n        foreach (char c in text) {\n          \
    \  if (c == ' ')\n                result += \"_\";\n            else\n       \
    \         result += c;\n        }\n        if (result.Length > 2)\n          \
    \  result = result.Replace(\" \", \"-\");\n        return result;", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    string lastSpace = result.Substring(result.Length - 1, 1);\n            string\
    \ nextSpace = result.Substring(result.Length - 2, 1);\n            if (lastSpace\
    \ == nextSpace) {\n                result = result.Replace(lastSpace, \"-\");\n\
    \            }\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            string\
    \ lastTwo = result.Substring(result.Length - 2);\n            string firstTwo\
    \ = result.Substring(0, result.Length - 2);\n            result = firstTwo + \"\
    _\" + lastTwo;\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            int lastSpace\
    \ = result.LastIndexOf(' ');\n            string lastTwo = result.Substring(lastSpace\
    \ + 1);\n            string newResult = result.Substring(0, lastSpace);\n    \
    \        newResult += \"-\";\n            newResult += lastTwo;\n            result\
    \ = newResult;\n        }\n        return result;", '        return Regex.Replace(text,
    @"\s+", "_");', "        string result = \"\";\n        foreach (char c in text)\
    \ {\n            if (c == ' ') {\n                result += \"_\";\n         \
    \   } else {\n                result += c;\n            }\n        }\n       \
    \ if (result.Length > 2) {\n            int lastSpace = result.LastIndexOf(' ');\n\
    \            int lastSpace2 = result.LastIndexOf(' ');\n            if (lastSpace\
    \ != lastSpace2) {\n                result = result.Replace(\" \", \"-\");\n \
    \           }\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            string\
    \ lastSpace = result.Substring(result.Length - 1);\n            string nextSpace\
    \ = result.Substring(0, result.Length - 1);\n            if (lastSpace == nextSpace)\
    \ {\n                result = result.Replace(lastSpace, \"-\");\n            }\n\
    \        }\n        return result;", "        if (text == null || text.Length\
    \ == 0)\n            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool first = true;\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                if (first) {\n                    first = false;\n\
    \                } else {\n                    sb.Append('_');\n             \
    \   }\n            } else {\n                sb.Append(c);\n            }\n  \
    \      }\n        return sb.ToString();", '        return Regex.Replace(text,
    @"\s+", "_");', "        if (text == null || text.Length == 0)\n            return\
    \ text;\n        if (text.Length > 2 && text.Contains(\" \"))\n            return\
    \ text.Replace(\" \", \"_\");\n        if (text.Length > 1 && text.Contains(\"\
    \ \"))\n            return text.Replace(\" \", \"-\");\n        return text;",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string temp = result;\n            result = \"\";\n    \
    \        int i = 0;\n            while (i < temp.Length) {\n                if\
    \ (temp[i] == ' ') {\n                    result += temp[++i];\n             \
    \   } else {\n                    result += temp[i];\n                }\n    \
    \        }\n        }\n        return result;", "        if (text == null)\n \
    \           return null;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        foreach (char c in text) {\n            if (c == ' ')\n             \
    \   sb.Append('_');\n            else\n                sb.Append(c);\n       \
    \ }\n        return sb.ToString();", '        return Regex.Replace(text, @"\s+",
    "_");', "        if (text == null || text.Length == 0) return text;\n        StringBuilder\
    \ sb = new StringBuilder(text);\n        bool hasSpace = false;\n        for (int\
    \ i = 0; i < sb.Length; i++) {\n            if (sb[i] == ' ') {\n            \
    \    hasSpace = true;\n                sb.Replace(sb[i], \"_\");\n           \
    \ }\n        }\n        if (hasSpace) {\n            int lastSpace = -1;\n   \
    \         for (int i = 0; i < sb.Length; i++) {\n                if (sb[i] ==\
    \ ' ') {\n                    lastSpace = i;\n                }\n            }\n\
    \            if (lastSpace != -1) {\n                for (int i = lastSpace +\
    \ 1; i < sb.Length; i++) {\n                    if (sb[i] == ' ') {\n        \
    \                sb.Replace(sb[i], \"-\");\n                    }\n          \
    \      }\n            }\n        }\n        return sb.ToString();", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    string lastTwo = result.Substring(0, result.Length - 2);\n            string\
    \ rest = result.Substring(result.Length - 2);\n            result += \"-\" + lastTwo;\n\
    \            result += rest;\n        }\n        return result;", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    int i = 0;\n            while (i < result.Length - 2) {\n               \
    \ if (result[i] == '_' && result[i + 1] == '_') {\n                    result\
    \ = result.Remove(i, 2);\n                } else {\n                    i++;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   // Replace all spaces with underscores\n        text = text.Replace(\" \"\
    , \"_\");\n        // If text has more than 2 consecutive spaces, replace all\
    \ \n        // consecutive spaces with -\n        if (text.Contains(\" \") &&\
    \ (text.IndexOf(\" \") + 1 == text.LastIndexOf(\" \")))\n            text = text.Replace(\"\
    \ \", \"-\");\n        return text;", "        string result = \"\";\n       \
    \ foreach (char c in text) {\n            if (c == ' ') {\n                result\
    \ += \"_\";\n            } else {\n                result += c;\n            }\n\
    \        }\n        if (result.Length > 2) {\n            string lastSpace = result.Substring(result.Length\
    \ - 1);\n            string nextSpace = result.Substring(0, result.Length - 1);\n\
    \            if (lastSpace == nextSpace) {\n                result = result.Replace(lastSpace,\
    \ \"-\");\n            }\n        }\n        return result;", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    int i = 0;\n            while (i < result.Length - 2) {\n               \
    \ if (result[i] == '_' && result[i + 1] == '_') {\n                    result\
    \ += \"-\";\n                } else {\n                    result += result[i];\n\
    \                }\n                i++;\n            }\n        }\n        return\
    \ result;", "        if (text == null || text.Length == 0)\n            return\
    \ text;\n        StringBuilder sb = new StringBuilder(text);\n        bool isFirst\
    \ = true;\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               if (isFirst) {\n                    isFirst = false;\n       \
    \         } else {\n                    sb.Append('_');\n                }\n \
    \           } else {\n                isFirst = true;\n            }\n       \
    \ }\n        return sb.ToString();", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            string temp = result;\n\
    \            result = \"\";\n            int i = 0;\n            while (i < temp.Length\
    \ - 1) {\n                if (temp[i] == ' ' && temp[i + 1] == ' ') {\n      \
    \              result += temp[i];\n                    i += 2;\n             \
    \   } else {\n                    result += temp[i];\n                    i++;\n\
    \                }\n            }\n        }\n        return result;", '        return
    Regex.Replace(text, @"\s+", "_");', "        // Replace all spaces with underscores\n\
    \        text = text.Replace(\" \", \"_\");\n        // If there are more than\
    \ 2 consecutive spaces, replace all consecutive spaces with -\n        if (text.Contains(\"\
    \ \") && text.IndexOf(\" \", text.IndexOf(\" \") + 1) > text.IndexOf(\" \", text.IndexOf(\"\
    \ \") - 1)) {\n            text = text.Replace(\" \", \"-\");\n        }\n   \
    \     return text;", "        string result = text;\n        string spaceReplacement\
    \ = \"_\";\n        int spaceCount = 1;\n        bool consecutiveSpaces = false;\n\
    \        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '\
    \ ') {\n                spaceCount++;\n                if (spaceCount == 2) {\n\
    \                    consecutiveSpaces = true;\n                }\n          \
    \  } else {\n                if (consecutiveSpaces) {\n                    result\
    \ = result.Replace(\" \", spaceReplacement);\n                    spaceCount =\
    \ 1;\n                    consecutiveSpaces = false;\n                } else {\n\
    \                    result = result.Replace(\" \", spaceReplacement);\n     \
    \           }\n            }\n        }\n        return result;", "        if\
    \ (string.IsNullOrEmpty(text))\n            return text;\n        StringBuilder\
    \ sb = new StringBuilder(text);\n        bool spaceFound = false;\n        bool\
    \ consecutiveSpaceFound = false;\n        for (int i = 0; i < sb.Length; i++)\
    \ {\n            char c = sb[i];\n            if (c == ' ') {\n              \
    \  if (!spaceFound) {\n                    spaceFound = true;\n              \
    \  } else {\n                    consecutiveSpaceFound = true;\n             \
    \   }\n            } else {\n                spaceFound = false;\n           \
    \     consecutiveSpaceFound = false;\n            }\n            if (consecutiveSpaceFound)\
    \ {\n                sb.Replace(\" \", \"-\");\n                consecutiveSpaceFound\
    \ = false;\n            }\n        }\n        return sb.ToString();", "      \
    \  string result = \"\";\n        foreach (char c in text) {\n            if (c\
    \ == ' ') {\n                result += \"_\";\n            } else {\n        \
    \        result += c;\n            }\n        }\n        if (result.Length > 2)\
    \ {\n            result = result.Replace(\" \", \"-\");\n        }\n        return\
    \ result;", "        if (text == null || text.Length == 0)\n            return\
    \ text;\n        StringBuilder sb = new StringBuilder(text.Length);\n        bool\
    \ inSpace = false;\n        bool inDoubleSpace = false;\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                if (inSpace) {\n\
    \                    inDoubleSpace = true;\n                } else {\n       \
    \             inSpace = true;\n                }\n            } else {\n     \
    \           if (inDoubleSpace) {\n                    inDoubleSpace = false;\n\
    \                    inSpace = true;\n                } else {\n             \
    \       inSpace = false;\n                }\n            }\n            sb.Append(c);\n\
    \        }\n        return sb.ToString();", "        if (text == null)\n     \
    \       return null;\n        StringBuilder sb = new StringBuilder();\n      \
    \  foreach (char c in text) {\n            if (c == ' ')\n                sb.Append('_');\n\
    \            else\n                sb.Append(c);\n        }\n        return sb.ToString();",
  '        return text.Replace(" ", "_").Replace(" -", "_");', "        string result\
    \ = \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        return result;", "        // Replace\
    \ all spaces with underscores\n        text = text.Replace(\" \", \"_\");\n  \
    \      // If text has more than 2 consecutive spaces, replace all consecutive\
    \ spaces with -\n        if (text.Contains(\" \") && (text.IndexOf(\" \", text.IndexOf(\"\
    \ \") + 1) != text.LastIndexOf(\" \")))\n            text = text.Replace(\" \"\
    , \"-\");\n        return text;", "        if (text == null || text.Length ==\
    \ 0)\n            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool space = false;\n        for (int i = 0; i < text.Length; i++) {\n\
    \            if (text[i] == ' ') {\n                if (!space) {\n          \
    \          space = true;\n                    sb.Append('_');\n              \
    \  } else {\n                    space = false;\n                    sb.Append('\
    \ ');\n                }\n            } else {\n                sb.Append(text[i]);\n\
    \            }\n        }\n        return sb.ToString();", "        if (text ==\
    \ null || text.Length == 0)\n            return text;\n        StringBuilder sb\
    \ = new StringBuilder(text.Length);\n        bool space = false;\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                if (space)\
    \ {\n                    sb.Append('-');\n                    space = false;\n\
    \                } else {\n                    sb.Append('_');\n             \
    \       space = true;\n                }\n            } else {\n             \
    \   sb.Append(c);\n            }\n        }\n        return sb.ToString();", " \
    \       // Replace all spaces with underscores\n        text = text.Replace(\"\
    \ \", \"_\");\n        // If there are more than 2 consecutive spaces, \n    \
    \    // then replace all consecutive spaces with -\n        if (text.Contains(\"\
    \ \") && (text.IndexOf(\" \") + 1).Equals(text.Length)) {\n            text =\
    \ text.Replace(\" \", \"-\");\n        }\n        return text;", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    int i = 0;\n            int j = 1;\n            while (j < result.Length)\
    \ {\n                if (result[j] == ' ') {\n                    result += result[j\
    \ + 1];\n                    i++;\n                    j++;\n                }\
    \ else {\n                    result += result[j];\n                    j++;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   string result = \"\";\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                result += \"_\";\n            } else {\n     \
    \           result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            result = result.Replace(\" \", \"-\");\n        }\n    \
    \    return result;", "        string result = \"\";\n        foreach (char c\
    \ in text) {\n            if (c == ' ') {\n                result += \"_\";\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        if (result.Length > 2) {\n            string lastTwo = result.Substring(result.Length\
    \ - 2);\n            string firstTwo = result.Substring(0, result.Length - 2);\n\
    \            result = firstTwo + \"-\" + lastTwo;\n        }\n        return result;",
  "        if (text == null || text.Length == 0)\n            return text;\n     \
    \   StringBuilder sb = new StringBuilder();\n        bool isFirst = true;\n  \
    \      foreach (char c in text) {\n            if (c == ' ') {\n             \
    \   if (isFirst) {\n                    isFirst = false;\n                } else\
    \ {\n                    sb.Append('-');\n                }\n            } else\
    \ {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  '        return Regex.Replace(text, @"\s+", "_");', "        if (string.IsNullOrEmpty(text))\n\
    \            return string.Empty;\n        var result = new StringBuilder();\n\
    \        var currentChar = ' ';\n        var previousChar = ' ';\n        var\
    \ isConsecutiveSpace = false;\n        foreach (var c in text) {\n           \
    \ if (c == currentChar) {\n                isConsecutiveSpace = true;\n      \
    \      }\n            else {\n                if (isConsecutiveSpace) {\n    \
    \                result.Append('-');\n                    isConsecutiveSpace =\
    \ false;\n                }\n                else {\n                    result.Append(c);\n\
    \                }\n            }\n            previousChar = currentChar;\n \
    \           currentChar = c;\n        }\n        return result.ToString();", " \
    \       string result = \"\";\n        foreach (char c in text) {\n          \
    \  if (c == ' ') {\n                result += \"_\";\n            } else {\n \
    \               result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int i = 0;\n            while (i < result.Length - 2) {\n\
    \                if (result[i] == '_' && result[i + 1] == '_') {\n           \
    \         result += \"-\";\n                    i += 2;\n                } else\
    \ {\n                    i++;\n                }\n            }\n        }\n \
    \       return result;", "        string result = text;\n        string temp =\
    \ \"\";\n        bool space = false;\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            if (text[i] == ' ') {\n                if (!space) {\n \
    \                   space = true;\n                    temp = text[i];\n     \
    \           } else {\n                    space = false;\n                   \
    \ result = result.Replace(temp, \"_\");\n                    temp = \"\";\n  \
    \              }\n            } else {\n                if (space) {\n       \
    \             result = result.Replace(temp, \"_\");\n                    temp\
    \ = \"\";\n                }\n                result += text[i];\n           \
    \ }\n        }\n        if (temp != \"\") {\n            result = result.Replace(temp,\
    \ \"_\");\n        }\n        return result;", "        if (text == null || text.Length\
    \ == 0) return text;\n        var sb = new StringBuilder();\n        foreach (var\
    \ c in text) {\n            if (c == ' ') {\n                sb.Append('_');\n\
    \            } else {\n                sb.Append(c);\n            }\n        }\n\
    \        return sb.ToString();", "        if (text == null || text.Length == 0)\n\
    \            return text;\n        var sb = new StringBuilder();\n        foreach\
    \ (var c in text) {\n            if (c == ' ')\n                sb.Append('_');\n\
    \            else\n                sb.Append(c);\n        }\n        return sb.ToString();",
  "        if (text == null || text.Length == 0) return text;\n        StringBuilder\
    \ sb = new StringBuilder(text);\n        bool space = false;\n        for (int\
    \ i = 0; i < sb.Length; i++) {\n            if (space) {\n                sb.Replace(\"\
    \ \", \"_\", i, 1);\n                space = false;\n            }\n         \
    \   if (sb[i] == '\\t') {\n                space = true;\n            }\n    \
    \    }\n        return sb.ToString();", "        if (text == null || text.Length\
    \ == 0) return text;\n        var sb = new StringBuilder();\n        foreach (var\
    \ c in text) {\n            if (c == ' ') {\n                if (sb.Length > 0)\
    \ {\n                    sb.Append('_');\n                }\n                sb.Append(c);\n\
    \            } else {\n                sb.Append(c);\n            }\n        }\n\
    \        return sb.ToString();", "        if (text == null || text.Length == 0)\n\
    \            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool wasSpace = false;\n        foreach (char c in text) {\n        \
    \    if (c == ' ') {\n                wasSpace = true;\n                sb.Append('_');\n\
    \            } else {\n                if (wasSpace) {\n                    sb.Append(c);\n\
    \                    wasSpace = false;\n                } else {\n           \
    \         sb.Append('_');\n                }\n            }\n        }\n     \
    \   return sb.ToString();", '        return text.Replace(" ", "_").Replace(" -",
    "_");', "        if (text == null)\n            return null;\n        StringBuilder\
    \ sb = new StringBuilder();\n        bool space = false;\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                space = true;\n \
    \               sb.Append('_');\n            }\n            else if (space) {\n\
    \                space = false;\n                sb.Append('-');\n           \
    \ }\n            else {\n                sb.Append(c);\n            }\n      \
    \  }\n        return sb.ToString();", "        string result = \"\";\n       \
    \ foreach (char c in text) {\n            if (c == ' ') {\n                result\
    \ += \"_\";\n            } else {\n                result += c;\n            }\n\
    \        }\n        return result;", "        if (string.IsNullOrEmpty(text))\n\
    \            return text;\n        var sb = new StringBuilder();\n        foreach\
    \ (char c in text) {\n            if (c == ' ')\n                sb.Append('_');\n\
    \            else\n                sb.Append(c);\n        }\n        return sb.ToString();",
  '        return Regex.Replace(text, @"\s+", "_");', "        if (text == null)\n\
    \            return null;\n        StringBuilder sb = new StringBuilder();\n \
    \       bool space = false;\n        for (int i = 0; i < text.Length; i++) {\n\
    \            if (text[i] == ' ') {\n                if (space) {\n           \
    \         sb.Append('-');\n                    space = false;\n              \
    \  } else {\n                    space = true;\n                }\n          \
    \  } else {\n                space = false;\n            }\n            sb.Append(text[i]);\n\
    \        }\n        return sb.ToString();", "        string result = \"\";\n \
    \       foreach (char c in text) {\n            if (c == ' ') {\n            \
    \    result += \"_\";\n            } else {\n                result += c;\n  \
    \          }\n        }\n        if (result.Length > 2) {\n            string\
    \ lastSpace = result.Substring(result.Length - 1, 1);\n            string nextSpace\
    \ = result.Substring(0, result.Length - 1);\n            if (lastSpace == nextSpace)\
    \ {\n                result = result.Replace(lastSpace, \"-\");\n            }\n\
    \        }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            }\n            else {\n                result += c;\n      \
    \      }\n        }\n        if (result.Length > 2) {\n            int i = 0;\n\
    \            while (i < result.Length - 2) {\n                if (result[i] ==\
    \ ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                   \
    \ result += result.Substring(i + 1, 3);\n                    i += 2;\n       \
    \         }\n                else {\n                    result += result.Substring(i\
    \ + 1, 1);\n                    i++;\n                }\n            }\n     \
    \   }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            string temp = \"\";\n  \
    \          int i = 0;\n            while (i < result.Length - 2) {\n         \
    \       if (result[i] == '_' && result[i + 1] == '_') {\n                    temp\
    \ += \"-\";\n                    i += 2;\n                } else {\n         \
    \           temp += result[i];\n                    i++;\n                }\n\
    \            }\n            result = temp;\n        }\n        return result;",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            result = result.Replace(\" \", \"-\");\n        }\n    \
    \    return result;", "        string result = \"\";\n        foreach (char c\
    \ in text) {\n            if (c == ' ') {\n                result += \"_\";\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        if (result.Length > 2) {\n            int i = 0;\n            while (i\
    \ < result.Length - 2) {\n                if (result[i] == '_' && result[i + 1]\
    \ == '_') {\n                    result += result.Substring(i + 1, 3);\n     \
    \               i += 3;\n                } else {\n                    result\
    \ += result.Substring(i + 1, result.Length - i - 1);\n                    i +=\
    \ result.Length - i - 1;\n                }\n            }\n        }\n      \
    \  return result;", "        if (text == null)\n            return null;\n   \
    \     StringBuilder sb = new StringBuilder(text.Length);\n        bool inSpace\
    \ = false;\n        for (int i = 0; i < text.Length; i++) {\n            if (text[i]\
    \ == ' ') {\n                if (!inSpace) {\n                    inSpace = true;\n\
    \                    sb.Append('_');\n                } else {\n             \
    \       inSpace = false;\n                    sb.Append(text[i]);\n          \
    \      }\n            } else {\n                sb.Append(text[i]);\n        \
    \    }\n        }\n        return sb.ToString();", "        if (text == null ||\
    \ text.Length == 0)\n            return text;\n        var sb = new StringBuilder(text.Length);\n\
    \        foreach (var c in text) {\n            if (c == ' ') {\n            \
    \    sb.Append('_');\n            } else {\n                sb.Append(c);\n  \
    \          }\n        }\n        return sb.ToString();", "        string result\
    \ = \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    string lastTwo = result.Substring(0, result.Length - 2);\n            string\
    \ rest = result.Substring(result.Length - 2);\n            result += \"-\" + lastTwo;\n\
    \        }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            string lastSpace = result.Substring(result.Length\
    \ - 1, 1);\n            string nextSpace = result.Substring(0, result.Length -\
    \ 1);\n            if (lastSpace == nextSpace) {\n                result += \"\
    -\";\n            }\n        }\n        return result;", "        // Replace all\
    \ spaces with underscores\n        text = text.Replace(\" \", \"_\");\n      \
    \  // If there are more than 2 consecutive spaces, replace all consecutive spaces\
    \ with -\n        if (text.Contains(\" \") && (text.IndexOf(\" \") + 1 == text.LastIndexOf(\"\
    \ \")))\n        {\n            text = text.Replace(\" \", \"-\");\n        }\n\
    \        return text;", "        string result = \"\";\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                result += c.ToString();\n\
    \            } else {\n                result += c.ToString().Replace(\" \", \"\
    _\");\n            }\n        }\n        if (result.Length > 2) {\n          \
    \  string lastSpace = result.Substring(result.Length - 1, 1);\n            string\
    \ firstSpace = result.Substring(0, result.Length - 1);\n            string newResult\
    \ = firstSpace + \"_\" + lastSpace;\n            result = newResult;\n       \
    \ }\n        return result;", "        // Replace all spaces with underscores\n\
    \        text = text.Replace(\" \", \"_\");\n        // If there are more than\
    \ 2 consecutive spaces, replace all \n        // consecutive spaces with -\n \
    \       if (text.Contains(\" \") && (text.IndexOf(\" \", text.IndexOf(\" \") +\
    \ 1) > text.IndexOf(\" \", text.IndexOf(\" \") - 1))) {\n            text = text.Replace(\"\
    \ \", \"-\");\n        }\n        return text;", "        string result = \"\"\
    ;\n        foreach (char c in text) {\n            if (c == ' ') {\n         \
    \       result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            string\
    \ lastTwo = result.Substring(result.Length - 2);\n            string firstTwo\
    \ = result.Substring(0, result.Length - 2);\n            result = firstTwo + \"\
    -\" + lastTwo;\n        }\n        return result;", "        if (text == null)\
    \ {\n            return null;\n        }\n        string result = \"\";\n    \
    \    foreach (char c in text) {\n            if (c == ' ') {\n               \
    \ result += \"_\";\n            } else {\n                result += c;\n     \
    \       }\n        }\n        if (result.Length > 2) {\n            int i = 0;\n\
    \            while (i < result.Length - 2) {\n                if (result[i] ==\
    \ ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                   \
    \ result += \"-\";\n                    i += 2;\n                } else {\n  \
    \                  i++;\n                }\n            }\n        }\n       \
    \ return result;", "        string result = \"\";\n        foreach (char c in\
    \ text) {\n            if (c == ' ') {\n                result += \"_\";\n   \
    \         } else {\n                result += c;\n            }\n        }\n \
    \       if (result.Length > 2) {\n            int i = 0;\n            while (i\
    \ < result.Length - 2) {\n                if (result[i] == ' ' && result[i + 1]\
    \ == ' ' && result[i + 2] == ' ') {\n                    result += \"-\";\n  \
    \                  i += 2;\n                } else {\n                    i++;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   string result = \"\";\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                result += \"_\";\n            } else {\n     \
    \           result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int count = 0;\n            int start = 0;\n           \
    \ int end = 0;\n            while (end < result.Length) {\n                end\
    \ = result.IndexOf(' ', start);\n                if (end == -1) {\n          \
    \          end = result.Length;\n                }\n                result +=\
    \ result.Substring(start, end - start);\n                start = end + 1;\n  \
    \              count++;\n            }\n            result += result.Substring(start);\n\
    \        }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            int i = 0;\n           \
    \ while (i < result.Length - 2) {\n                if (result[i] == '_' && result[i\
    \ + 1] == '_') {\n                    result += \" - \";\n                   \
    \ i += 2;\n                } else {\n                    i++;\n              \
    \  }\n            }\n        }\n        return result;", "        // Replace all\
    \ spaces with underscores\n        text = text.Replace(\" \", \"_\");\n      \
    \  // If there are more than 2 consecutive spaces\n        if (text.Contains(\"\
    \ \") && text.Contains(\" \")) {\n            // Replace all consecutive spaces\
    \ with -\n            text = text.Replace(\" \", \"-\");\n        }\n        return\
    \ text;", "        if (text == null) {\n            return null;\n        }\n\
    \        StringBuilder sb = new StringBuilder(text.Length);\n        bool first\
    \ = true;\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               if (first) {\n                    first = false;\n           \
    \     } else {\n                    sb.Append('_');\n                }\n     \
    \       } else {\n                sb.Append(c);\n            }\n        }\n  \
    \      return sb.ToString();", "        if (text == null || text.Length == 0)\
    \ return text;\n        StringBuilder sb = new StringBuilder();\n        bool\
    \ first = true;\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                if (first) {\n                    first = false;\n      \
    \          } else {\n                    sb.Append('_');\n                }\n\
    \            } else {\n                sb.Append(c);\n            }\n        }\n\
    \        return sb.ToString();", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            string lastSpace = result.Substring(result.Length\
    \ - 2);\n            string firstSpace = result.Substring(0, result.Length - 2);\n\
    \            result = firstSpace + \"_\" + lastSpace;\n        }\n        return\
    \ result;", "        string result = \"\";\n        foreach (char c in text) {\n\
    \            if (c == ' ') {\n                result += \"_\";\n            }\
    \ else {\n                result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int i = 0;\n            while (i < result.Length - 2) {\n\
    \                if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2]\
    \ == ' ') {\n                    result += \"-\";\n                    i += 2;\n\
    \                } else {\n                    result += result[i];\n        \
    \            i++;\n                }\n            }\n        }\n        return\
    \ result;", "        if (text == null || text.Length == 0) return text;\n    \
    \    StringBuilder sb = new StringBuilder(text);\n        bool spaceFound = false;\n\
    \        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '\
    \ ') {\n                spaceFound = true;\n                sb.Append('_');\n\
    \            } else {\n                if (spaceFound) {\n                   \
    \ spaceFound = false;\n                    sb.Append('-');\n                }\n\
    \                sb.Append(text[i]);\n            }\n        }\n        return\
    \ sb.ToString();", "        string result = \"\";\n        foreach (char c in\
    \ text) {\n            if (c == ' ') {\n                result += \"_\";\n   \
    \         } else {\n                result += c;\n            }\n        }\n \
    \       if (result.Contains(\"_\") && result.Contains(\"-\")) {\n            int\
    \ index = result.IndexOf(\"_\");\n            string before = result.Substring(0,\
    \ index);\n            string after = result.Substring(index + 1);\n         \
    \   result = before + \"-\" + after;\n        }\n        return result;", "  \
    \      if (text == null || text.Length == 0)\n            return text;\n     \
    \   StringBuilder sb = new StringBuilder(text.Length);\n        bool first = true;\n\
    \        foreach (char c in text) {\n            if (c == ' ') {\n           \
    \     if (first) {\n                    first = false;\n                } else\
    \ {\n                    sb.Append('_');\n                }\n            } else\
    \ {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string lastSpace = result.Substring(result.Length - 1, 1);\n\
    \            string nextSpace = result.Substring(0, result.Length - 1);\n    \
    \        if (lastSpace == nextSpace) {\n                result = result.Replace(lastSpace,\
    \ \"-\");\n            }\n        }\n        return result;", '        return
    Regex.Replace(text, @"\s+", "_");', "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += c.ToString();\n\
    \            }\n            else {\n                result += c.ToString() + \"\
    _\";\n            }\n        }\n        if (result.Length > 2) {\n           \
    \ result = result.Substring(0, result.Length - 2);\n        }\n        return\
    \ result;", "        string result = \"\";\n        foreach (char c in text) {\n\
    \            if (c == ' ') {\n                result += '_';\n            } else\
    \ {\n                result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string lastTwo = result.Substring(0, result.Length - 2);\n\
    \            string rest = result.Substring(result.Length - 2);\n            result\
    \ = lastTwo + \"-\" + rest;\n        }\n        return result;", '        return
    Regex.Replace(text, @"\s+", "_");', "        if (string.IsNullOrEmpty(text))\n\
    \            return text;\n        if (text.Contains(\" \"))\n            return\
    \ text.Replace(\" \", \"_\");\n        if (text.Contains(\" \"))\n           \
    \ return text.Replace(\" \", \"-\");\n        return text;", "        string result\
    \ = \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    int i = 0;\n            while (i < result.Length - 2) {\n               \
    \ if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n  \
    \                  result += \"-\";\n                    i += 2;\n           \
    \     } else {\n                    result += result[i];\n                   \
    \ i++;\n                }\n            }\n        }\n        return result;",
  "        if (text == null || text.Length == 0)\n            return text;\n     \
    \   StringBuilder sb = new StringBuilder(text.Length);\n        bool space = false;\n\
    \        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '\
    \ ') {\n                space = true;\n                sb.Append('_');\n     \
    \       } else {\n                space = false;\n                sb.Append(text[i]);\n\
    \            }\n        }\n        if (space)\n            sb.Append('_');\n \
    \       return sb.ToString();", "        if (text == null || text.Length == 0)\n\
    \            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool first = true;\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                if (!first)\n                    sb.Append('_');\n\
    \                first = false;\n            }\n            else\n           \
    \     sb.Append(c);\n        }\n        return sb.ToString();", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    result = result.Replace(\" \", \"-\");\n        }\n        return result;",
  "        if (text == null || text.Length == 0)\n            return text;\n     \
    \   StringBuilder sb = new StringBuilder(text.Length);\n        bool isSpace =\
    \ false;\n        foreach (char c in text) {\n            if (c == '_') {\n  \
    \              isSpace = true;\n            }\n            if (isSpace) {\n  \
    \              sb.Append('_');\n                isSpace = false;\n           \
    \ } else {\n                sb.Append(c);\n            }\n        }\n        return\
    \ sb.ToString();", "        string result = \"\";\n        foreach (char c in\
    \ text) {\n            if (c == ' ') {\n                result += c.ToString();\n\
    \            } else {\n                result += c.ToString() + \"_\";\n     \
    \       }\n        }\n        if (result.Length > 2) {\n            int lastSpace\
    \ = result.LastIndexOf(' ');\n            string firstSpace = result.Substring(0,\
    \ lastSpace);\n            string secondSpace = result.Substring(lastSpace + 1);\n\
    \            result = firstSpace + \"_\" + secondSpace;\n        }\n        return\
    \ result;", "        if (text == null)\n            return null;\n        StringBuilder\
    \ sb = new StringBuilder(text.Length);\n        foreach (char c in text) {\n \
    \           if (c == ' ')\n                sb.Append('_');\n            else\n\
    \                sb.Append(c);\n        }\n        return sb.ToString();", '        return
    Regex.Replace(text, @"\s+", "_");', "        if (string.IsNullOrEmpty(text))\n\
    \            return text;\n        var sb = new StringBuilder();\n        foreach\
    \ (var c in text) {\n            if (c == ' ')\n                sb.Append('_');\n\
    \            else\n                sb.Append(c);\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int count = 0;\n            int lastSpace = -1;\n      \
    \      int lastSpaceIndex = -1;\n            int lastSpaceCount = 1;\n       \
    \     int lastSpaceCountIndex = 0;\n            foreach (char c in result) {\n\
    \                if (c == ' ') {\n                    lastSpace = c;\n       \
    \             lastSpaceIndex = lastSpaceCountIndex;\n                    lastSpaceCount\
    \ = lastSpaceCount;\n                } else {\n                    if (lastSpaceCount\
    \ > 1) {\n                        lastSpaceCount--;\n                        lastSpaceCountIndex\
    \ = lastSpaceIndex;\n                    }\n                    result += lastSpace;\n\
    \                    lastSpace = c;\n                    lastSpaceIndex = lastSpaceCountIndex;\n\
    \                    lastSpaceCount = lastSpaceCount;\n                }\n   \
    \         }\n        }\n        return result;", "        if (text == null) {\n\
    \            return null;\n        }\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool spaceFound = false;\n        for (int i = 0; i < text.Length; i++)\
    \ {\n            if (text[i] == ' ') {\n                spaceFound = true;\n \
    \               sb.Append('_');\n            } else {\n                spaceFound\
    \ = false;\n                sb.Append(text[i]);\n            }\n        }\n  \
    \      if (spaceFound) {\n            int lastSpace = sb.Length - 1;\n       \
    \     while (lastSpace > 0 && sb[lastSpace] == ' ') {\n                lastSpace--;\n\
    \            }\n            if (lastSpace > 1) {\n                for (int i =\
    \ lastSpace; i > 0; i--) {\n                    sb[i] = '-';\n               \
    \ }\n            }\n        }\n        return sb.ToString();", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    string lastSpace = result.Substring(result.Length - 1, 1);\n            string\
    \ nextSpace = result.Substring(0, result.Length - 1);\n            if (lastSpace\
    \ == nextSpace) {\n                result = result.Replace(lastSpace, \"-\");\n\
    \            }\n        }\n        return result;", "        if (text == null\
    \ || text.Length <= 2)\n            return text;\n        var sb = new StringBuilder();\n\
    \        var lastSpace = -1;\n        var lastChar = ' ';\n        foreach (var\
    \ c in text) {\n            if (c == ' ') {\n                if (lastSpace ==\
    \ -1)\n                    lastSpace = lastChar;\n                else\n     \
    \               lastChar = c;\n            } else {\n                if (lastSpace\
    \ != -1) {\n                    if (lastSpace == lastChar)\n                 \
    \       sb.Append('-');\n                    else\n                        sb.Append(lastChar);\n\
    \                    lastSpace = -1;\n                }\n                sb.Append(c);\n\
    \            }\n        }\n        return sb.ToString();", "        // Replace\
    \ all spaces with underscores\n        text = text.Replace(\" \", \"_\");\n  \
    \      // If text has more than 2 consecutive spaces, \n        // then replace\
    \ all consecutive spaces with -\n        if (text.Contains(\" \") && (text.IndexOf(\"\
    \ \") == text.LastIndexOf(\" \") + 1)) {\n            text = text.Replace(\" \"\
    , \"-\");\n        }\n        return text;", "        if (text == null)\n    \
    \        return null;\n        var result = new StringBuilder();\n        foreach\
    \ (var c in text) {\n            if (c == ' ') {\n                if (result.Length\
    \ > 0)\n                    result.Append('_');\n            } else {\n      \
    \          result.Append(c);\n            }\n        }\n        return result.ToString();",
  '        return text.Replace(" ", "_").Replace(" ", "-");', '        return Regex.Replace(text,
    @"\s+", "_");', "        string result = \"\";\n        foreach (char c in text)\
    \ {\n            if (c == ' ') {\n                result += \"_\";\n         \
    \   } else {\n                result += c;\n            }\n        }\n       \
    \ if (result.Length > 2) {\n            int i = 0;\n            while (i < result.Length\
    \ - 2) {\n                if (result[i] == '_' && result[i + 1] == '_') {\n  \
    \                  result = result.Remove(i, 2);\n                } else {\n \
    \                   i++;\n                }\n            }\n        }\n      \
    \  return result;", "        if (text == null)\n            throw new ArgumentNullException(\"\
    text\");\n        StringBuilder sb = new StringBuilder(text.Length);\n       \
    \ foreach (char c in text) {\n            if (c == ' ')\n                sb.Append('_');\n\
    \            else\n                sb.Append(c);\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string lastTwo = result.Substring(0, result.Length - 2);\n\
    \            string rest = result.Substring(result.Length - 2);\n            result\
    \ = lastTwo + \"-\" + rest;\n        }\n        return result;", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    int i = 0;\n            while (i < result.Length - 2) {\n               \
    \ if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n  \
    \                  result += \"-\";\n                    i += 2;\n           \
    \     } else {\n                    i++;\n                }\n            }\n \
    \       }\n        return result;", "        if (text == null || text.Length ==\
    \ 0)\n            return text;\n        if (text.Length == 1)\n            return\
    \ text;\n        if (text.Length > 2)\n            return text.Replace(\" \",\
    \ \"-\");\n        return text;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            int i = 0;\n           \
    \ while (i < result.Length - 2) {\n                if (result[i] == '_' && result[i\
    \ + 1] == '_') {\n                    result += \" - \";\n                   \
    \ i += 2;\n                } else {\n                    i++;\n              \
    \  }\n            }\n        }\n        return result;", "        string result\
    \ = text;\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               result = result.Replace(\" \", \"_\");\n            }\n      \
    \  }\n        if (result.Length > 2) {\n            result = result.Replace(\"\
    \ \", \"-\");\n        }\n        return result;", "        // Replace all spaces\
    \ with underscores\n        text = text.Replace(\" \", \"_\");\n        // If\
    \ there are more than 2 consecutive spaces\n        if (text.Contains(\" \") &&\
    \ text.Contains(\" \")) {\n            // Replace all consecutive spaces with\
    \ -\n            text = text.Replace(\" \", \"-\");\n        }\n        return\
    \ text;", "        if (text == null)\n            return null;\n        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\n\
    \                result += \"_\";\n            else\n                result +=\
    \ c;\n        }\n        if (result.Length > 2)\n            return result.Replace(\"\
    \ \", \"-\");\n        else\n            return result;", '        return Regex.Replace(text,
    @"\s+", "_");', "        // Replace all spaces with underscores\n        text\
    \ = text.Replace(\" \", \"_\");\n        // If there are more than 2 consecutive\
    \ spaces, replace all \n        // consecutive spaces with -\n        if (text.Contains(\"\
    \ \") && (text.IndexOf(\" \") + 1) < text.Length) {\n            text = text.Replace(\"\
    \ \", \"-\");\n        }\n        return text;", "        string result = \"\"\
    ;\n        foreach (char c in text) {\n            if (c == ' ') {\n         \
    \       result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            string\
    \ newResult = \"\";\n            int i = 0;\n            while (i < result.Length\
    \ - 2) {\n                newResult += \"-\";\n                i++;\n        \
    \    }\n            newResult += result.Substring(result.Length - 2);\n      \
    \      result = newResult;\n        }\n        return result;", "        // Replace\
    \ all spaces with underscores\n        text = text.Replace(\" \", \"_\");\n  \
    \      // If there are more than 2 consecutive spaces, \n        // then replace\
    \ all consecutive spaces with -\n        if (text.Contains(\" \") && text.Contains(\"\
    \ \")) {\n            text = text.Replace(\" \", \"-\");\n        }\n        return\
    \ text;", "        if (text == null || text.Length == 0)\n            return text;\n\
    \        StringBuilder sb = new StringBuilder(text.Length);\n        foreach (char\
    \ c in text) {\n            if (c == ' ')\n                sb.Append('_');\n \
    \           else\n                sb.Append(c);\n        }\n        return sb.ToString();",
  "        if (text == null)\n            return null;\n        StringBuilder sb =\
    \ new StringBuilder(text.Length);\n        foreach (char c in text) {\n      \
    \      if (c == ' ')\n                sb.Append('_');\n            else\n    \
    \            sb.Append(c);\n        }\n        return sb.ToString();", "     \
    \   if (text == null)\n            return null;\n        StringBuilder sb = new\
    \ StringBuilder(text.Length);\n        bool isSpace = true;\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                isSpace = true;\n\
    \                sb.Append('_');\n            } else {\n                isSpace\
    \ = false;\n                sb.Append(c);\n            }\n        }\n        if\
    \ (sb.Length > 2 && isSpace) {\n            int lastSpace = sb.Length - 1;\n \
    \           int lastSpaceIndex = sb.Length - 1;\n            int lastSpaceIndex2\
    \ = sb.Length - 1;\n            while (lastSpaceIndex > 0 && sb[lastSpaceIndex]\
    \ == ' ') {\n                lastSpaceIndex--;\n            }\n            while\
    \ (lastSpaceIndex2 > 0 && sb[lastSpaceIndex2] == ' ') {\n                lastSpaceIndex2--;\n\
    \            }\n            while (lastSpaceIndex > 0 && lastSpaceIndex2 > 0 &&\
    \ sb[lastSpaceIndex] == ' ' && sb[lastSpaceIndex2] == ' ') {\n               \
    \ lastSpaceIndex--;\n                lastSpaceIndex2--;\n            }\n     \
    \       while (lastSpaceIndex > 0 && lastSpaceIndex2 > 0 && sb[lastSpaceIndex]\
    \ == ' ' && sb[lastSpaceIndex2] != ' ') {\n                lastSpaceIndex--;\n\
    \                lastSpaceIndex2--;\n            }\n            while (lastSpaceIndex\
    \ > 0 && lastSpaceIndex2 > 0 && sb[lastSpaceIndex] != ' ' && sb[lastSpaceIndex2]\
    \ == ' ') {\n                lastSpaceIndex--;\n                lastSpaceIndex2--;\n\
    \            }\n            while (lastSpaceIndex > 0 && lastSpaceIndex2 > 0 &&\
    \ sb[lastSpaceIndex] != ' ' && sb[lastSpaceIndex2] != ' ') {\n               \
    \ lastSpaceIndex--;\n                lastSpaceIndex2--;\n            }\n     \
    \       while (lastSpaceIndex > 0 && lastSpaceIndex2 > 0 && sb[lastSpaceIndex]\
    \ == ' ' && sb[lastSpaceIndex2] != ' ') {\n                lastSpaceIndex--;\n\
    \                lastSpaceIndex2--;\n            }\n            while (lastSpaceIndex\
    \ > 0 && lastSpaceIndex2 > 0 && sb[lastSpaceIndex] != ' ' && sb[lastSpaceIndex2]\
    \ != ' ') {\n                lastSpaceIndex--;\n                lastSpaceIndex2--;\n\
    \            }\n            while (lastSpaceIndex > 0 && lastSpaceIndex2 > 0 &&\
    \ sb[lastSpaceIndex] == ' ' && sb[lastSpaceIndex2] != ' ') {\n               \
    \ lastSpaceIndex--;\n                lastSpaceIndex2--;\n            }\n     \
    \       while (lastSpaceIndex > 0 && lastSpaceIndex2 > 0 && sb[lastSpaceIndex]\
    \ != ' ' && sb[lastSpaceIndex2] != ' ", '        return Regex.Replace(text, @"\s+",
    "_");', "        string result = \"\";\n        foreach (char c in text) {\n \
    \           if (c == ' ') {\n                result += \"_\";\n            } else\
    \ {\n                result += c;\n            }\n        }\n        if (result.Contains(\"\
    _\")) {\n            result = result.Replace(\"_\", \"-\");\n        }\n     \
    \   return result;", "        string result = \"\";\n        foreach (char c in\
    \ text) {\n            if (c == ' ') {\n                result += \"_\";\n   \
    \         } else {\n                result += c;\n            }\n        }\n \
    \       if (result.Length > 2) {\n            int i = 0;\n            while (i\
    \ < result.Length - 2) {\n                if (result[i] == '_' && result[i + 1]\
    \ == '_') {\n                    result += result.Substring(i + 1, result.Length\
    \ - i - 1);\n                    i = result.Length - 1;\n                } else\
    \ {\n                    i++;\n                }\n            }\n        }\n \
    \       return result;", "        if (text == null || text.Length <= 0)\n    \
    \        return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool first = true;\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                if (first) {\n                    first = false;\n\
    \                } else {\n                    sb.Append('_');\n             \
    \   }\n            } else {\n                sb.Append(c);\n            }\n  \
    \      }\n        return sb.ToString();", "        string result = \"\";\n   \
    \     foreach (char c in text) {\n            if (c == ' ') {\n              \
    \  result += \"_\";\n            } else {\n                result += c;\n    \
    \        }\n        }\n        if (result.Length > 2) {\n            int lastSpace\
    \ = result.LastIndexOf(' ');\n            int lastSpace2 = result.LastIndexOf('\
    \ ');\n            int lastSpace3 = result.LastIndexOf(' ');\n            int\
    \ lastSpace4 = result.LastIndexOf(' ');\n            int lastSpace5 = result.LastIndexOf('\
    \ ');\n            int lastSpace6 = result.LastIndexOf(' ');\n            int\
    \ lastSpace7 = result.LastIndexOf(' ');\n            int lastSpace8 = result.LastIndexOf('\
    \ ');\n            int lastSpace9 = result.LastIndexOf(' ');\n            int\
    \ lastSpace10 = result.LastIndexOf(' ');\n            int lastSpace11 = result.LastIndexOf('\
    \ ');\n            int lastSpace12 = result.LastIndexOf(' ');\n            int\
    \ lastSpace13 = result.LastIndexOf(' ');\n            int lastSpace14 = result.LastIndexOf('\
    \ ');\n            int lastSpace15 = result.LastIndexOf(' ');\n            int\
    \ lastSpace16 = result.LastIndexOf(' ');\n            int lastSpace17 = result.LastIndexOf('\
    \ ');\n            int lastSpace18 = result.LastIndexOf(' ');\n            int\
    \ lastSpace19 = result.LastIndexOf(' ');\n            int lastSpace20 = result.LastIndexOf('\
    \ ');\n            int lastSpace21 = result.LastIndexOf(' ');\n            int\
    \ lastSpace22 = result.LastIndexOf(' ');\n            int lastSpace23 = result.LastIndexOf('\
    \ ');\n            int lastSpace24 = result.LastIndexOf(' ');\n            int\
    \ lastSpace25 = result.LastIndexOf(' ');\n            int lastSpace26 = result.LastIndexOf('\
    \ ');\n            int lastSpace27 = result.LastIndexOf(' ');\n            int\
    \ lastSpace28 = result.LastIndexOf(' ');\n            int lastSpace29 = result.LastIndexOf('\
    \ ');\n            int lastSpace30 = result.LastIndexOf(' ');\n            int\
    \ lastSpace31 = result.LastIndexOf(' ');\n            int lastSpace32 = result.LastIndexOf('\
    \ ');\n            int lastSpace33 = result.LastIndexOf(' ');\n            int\
    \ lastSpace34 = result.LastIndexOf(' ');\n            int lastSpace35 = result.LastIndexOf",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int lastSpace = result.LastIndexOf(' ');\n            int\
    \ lastSpace2 = result.LastIndexOf(' ');\n            int lastSpace3 = result.LastIndexOf('\
    \ ');\n            int lastSpace4 = result.LastIndexOf(' ');\n            int\
    \ lastSpace5 = result.LastIndexOf(' ');\n            int lastSpace6 = result.LastIndexOf('\
    \ ');\n            int lastSpace7 = result.LastIndexOf(' ');\n            int\
    \ lastSpace8 = result.LastIndexOf(' ');\n            int lastSpace9 = result.LastIndexOf('\
    \ ');\n            int lastSpace10 = result.LastIndexOf(' ');\n            int\
    \ lastSpace11 = result.LastIndexOf(' ');\n            int lastSpace12 = result.LastIndexOf('\
    \ ');\n            int lastSpace13 = result.LastIndexOf(' ');\n            int\
    \ lastSpace14 = result.LastIndexOf(' ');\n            int lastSpace15 = result.LastIndexOf('\
    \ ');\n            int lastSpace16 = result.LastIndexOf(' ');\n            int\
    \ lastSpace17 = result.LastIndexOf(' ');\n            int lastSpace18 = result.LastIndexOf('\
    \ ');\n            int lastSpace19 = result.LastIndexOf(' ');\n            int\
    \ lastSpace20 = result.LastIndexOf(' ');\n            int lastSpace21 = result.LastIndexOf('\
    \ ');\n            int lastSpace22 = result.LastIndexOf(' ');\n            int\
    \ lastSpace23 = result.LastIndexOf(' ');\n            int lastSpace24 = result.LastIndexOf('\
    \ ');\n            int lastSpace25 = result.LastIndexOf(' ');\n            int\
    \ lastSpace26 = result.LastIndexOf(' ');\n            int lastSpace27 = result.LastIndexOf('\
    \ ');\n            int lastSpace28 = result.LastIndexOf(' ');\n            int\
    \ lastSpace29 = result.LastIndexOf(' ');\n            int lastSpace30 = result.LastIndexOf('\
    \ ');\n            int lastSpace31 = result.LastIndexOf(' ');\n            int\
    \ lastSpace32 = result.LastIndexOf(' ');\n            int lastSpace33 = result.LastIndexOf('\
    \ ');\n            int lastSpace34 = result.LastIndexOf(' ');\n            int\
    \ lastSpace35 = result.LastIndex", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += '_';\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        if (result.Length > 2) {\n            string lastSpace = result.Substring(result.Length\
    \ - 1, 1);\n            string nextSpace = result.Substring(0, result.Length -\
    \ 1);\n            while (lastSpace == nextSpace) {\n                result +=\
    \ \"-\";\n                lastSpace = result.Substring(result.Length - 1, 1);\n\
    \                nextSpace = result.Substring(0, result.Length - 1);\n       \
    \     }\n        }\n        return result;", "        if (text == null)\n    \
    \        return null;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool isFirst = true;\n        foreach (char c in text) {\n          \
    \  if (c == ' ')\n                isFirst = true;\n            else\n        \
    \        isFirst = false;\n            if (isFirst)\n                sb.Append(c);\n\
    \            else\n                sb.Append('_');\n        }\n        return\
    \ sb.ToString();", "        if (text == null || text.Length == 0) return text;\n\
    \        StringBuilder sb = new StringBuilder(text.Length);\n        bool inSpace\
    \ = false;\n        bool inDoubleSpace = false;\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            char c = text[i];\n            if (c == '_') {\n       \
    \         if (inSpace) {\n                    inDoubleSpace = true;\n        \
    \        } else {\n                    inSpace = true;\n                }\n  \
    \          } else if (c == '-') {\n                if (inDoubleSpace) {\n    \
    \                inDoubleSpace = false;\n                } else {\n          \
    \          inSpace = true;\n                }\n            } else if (c == ' ')\
    \ {\n                if (inDoubleSpace) {\n                    inDoubleSpace =\
    \ false;\n                } else {\n                    inSpace = true;\n    \
    \            }\n            } else {\n                inDoubleSpace = false;\n\
    \                inSpace = false;\n            }\n            sb.Append(c);\n\
    \        }\n        return sb.ToString();", "        // Replace all spaces with\
    \ underscores\n        text = text.Replace(\" \", \"_\");\n        // If there\
    \ are more than 2 consecutive spaces, replace all \n        // consecutive spaces\
    \ with -\n        if (text.Contains(\" \") && (text.IndexOf(\" \") == text.LastIndexOf(\"\
    \ \") + 1)) {\n            text = text.Replace(\" \", \"-\");\n        }\n   \
    \     return text;", '        return Regex.Replace(text, @"\s+", "_");', "   \
    \     if (string.IsNullOrEmpty(text))\n            return text;\n        if (text.Length\
    \ == 0)\n            return text;\n        if (text.Length == 1)\n           \
    \ return text;\n        if (text.Length == 2)\n            return text;\n    \
    \    if (text.Length > 2 && text.Substring(0, 2) == \" \") {\n            string\
    \ result = text.Substring(0, 2);\n            result += text.Substring(2, text.Length\
    \ - 2);\n            return result;\n        }\n        StringBuilder result =\
    \ new StringBuilder();\n        bool first = true;\n        foreach (char c in\
    \ text) {\n            if (c == ' ') {\n                if (!first)\n        \
    \            result.Append('-');\n                else\n                    result.Append('_');\n\
    \                first = false;\n            }\n            else\n           \
    \     result.Append(c);\n        }\n        return result.ToString();", "    \
    \    // Replace all spaces with underscores\n        text = text.Replace(\" \"\
    , \"_\");\n        // If there are more than 2 consecutive spaces\n        if\
    \ (text.Contains(\" \") && text.Contains(\" \")) {\n            // Replace all\
    \ consecutive spaces with -\n            text = text.Replace(\" \", \"-\");\n\
    \        }\n        return text;", "        if (text == null) return null;\n \
    \       StringBuilder sb = new StringBuilder(text.Length);\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                sb.Append('_');\n\
    \            } else {\n                sb.Append(c);\n            }\n        }\n\
    \        return sb.ToString();", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            string lastTwo = result.Substring(result.Length\
    \ - 2);\n            string firstTwo = result.Substring(0, result.Length - 2);\n\
    \            result = firstTwo + \"-\" + lastTwo;\n        }\n        return result;",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int lastSpace = result.LastIndexOf(' ');\n            int\
    \ lastSpace2 = result.LastIndexOf(' ');\n            if (lastSpace == lastSpace2)\
    \ {\n                result = result.Substring(0, lastSpace) + \"-\";\n      \
    \      }\n        }\n        return result;", "        if (text == null) {\n \
    \           return null;\n        }\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        foreach (char c in text) {\n            if (c == ' ') {\n           \
    \     sb.Append('_');\n            } else {\n                sb.Append(c);\n \
    \           }\n        }\n        return sb.ToString();", "        if (string.IsNullOrEmpty(text))\n\
    \            return text;\n        var sb = new StringBuilder();\n        foreach\
    \ (var c in text)\n        {\n            if (c == ' ')\n            {\n     \
    \           if (sb.Length > 0)\n                    sb.Append('_');\n        \
    \        sb.Append(c);\n            }\n            else\n            {\n     \
    \           sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        if (string.IsNullOrEmpty(text))\n            return text;\n        var\
    \ sb = new StringBuilder();\n        foreach (var c in text) {\n            if\
    \ (c == ' ')\n                sb.Append('_');\n            else\n            \
    \    sb.Append(c);\n        }\n        return sb.ToString();", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    result = result.Replace(\" \", \"-\");\n        }\n        return result;",
  "        if (text == null) return null;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        foreach (char c in text) {\n            if (c == ' ') {\n           \
    \     sb.Append('_');\n            } else {\n                sb.Append(c);\n \
    \           }\n        }\n        return sb.ToString();", "        if (text ==\
    \ null)\n            throw new ArgumentNullException(\"text\");\n        StringBuilder\
    \ sb = new StringBuilder(text.Length);\n        foreach (char c in text) {\n \
    \           if (c == ' ')\n                sb.Append('_');\n            else\n\
    \                sb.Append(c);\n        }\n        return sb.ToString();", " \
    \       if (string.IsNullOrEmpty(text))\n            return text;\n        StringBuilder\
    \ sb = new StringBuilder(text);\n        bool space = false;\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                space = true;\n\
    \            } else {\n                if (space) {\n                    sb.Append('-');\n\
    \                    space = false;\n                }\n                sb.Append(c);\n\
    \            }\n        }\n        return sb.ToString();", "        string result\
    \ = \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    string lastSpace = result.Substring(result.Length - 1);\n            string\
    \ nextSpace = result.Substring(0, result.Length - 1);\n            if (lastSpace\
    \ == nextSpace) {\n                result = result.Replace(lastSpace, \"-\");\n\
    \            }\n        }\n        return result;", "        if (text == null\
    \ || text.Length == 0)\n            return text;\n        StringBuilder sb = new\
    \ StringBuilder(text);\n        bool hasSpace = false;\n        bool hasDoubleSpace\
    \ = false;\n        for (int i = 0; i < sb.Length; i++) {\n            if (sb[i]\
    \ == ' ') {\n                hasSpace = true;\n            }\n            if (sb[i]\
    \ == ' ' && hasSpace) {\n                hasDoubleSpace = true;\n            }\n\
    \            if (hasDoubleSpace) {\n                sb.Replace(\" \", \"-\");\n\
    \                hasDoubleSpace = false;\n            }\n        }\n        return\
    \ sb.ToString();", "        if (text == null || text.Length == 0)\n          \
    \  return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool isFirst = true;\n        foreach (char c in text) {\n          \
    \  if (c == ' ') {\n                if (isFirst) {\n                    isFirst\
    \ = false;\n                } else {\n                    sb.Append('_');\n  \
    \              }\n            } else {\n                sb.Append(c);\n      \
    \      }\n        }\n        return sb.ToString();", "        if (text == null)\
    \ return null;\n        StringBuilder sb = new StringBuilder(text.Length);\n \
    \       foreach (char c in text) {\n            if (c == ' ') {\n            \
    \    sb.Append('_');\n            } else {\n                sb.Append(c);\n  \
    \          }\n        }\n        return sb.ToString();", "        // Replace all\
    \ spaces with underscores\n        text = text.Replace(\" \", \"_\");\n      \
    \  // If there are more than 2 consecutive spaces, replace all \n        // consecutive\
    \ spaces with -\n        if (text.Contains(\" \") && text.Contains(\" \")) {\n\
    \            text = text.Replace(\" \", \"-\");\n        }\n        return text;"]
stop_tokens:
- "\n    }\n"
