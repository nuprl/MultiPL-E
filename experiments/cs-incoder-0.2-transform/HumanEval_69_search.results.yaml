language: cs
name: HumanEval_69_search
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq >= max) {\n            return max;\n\
    \        }\n        long max2 = 0;\n        long freq2 = 0;\n        foreach (long\
    \ i in lst) {\n            freq2++;\n            if (freq2 >= freq) {\n      \
    \          max2 = i;\n            }\n        }\n        return max2;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7d16a06a97741fa8976bc6011971bd3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7d16a06a97741fa8976bc6011971bd3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq > 0) {\n            long m = freq;\n\
    \            foreach (long i in lst) {\n                if (i == m) {\n      \
    \              m--;\n                }\n            }\n            if (m > max)\
    \ {\n                max = m;\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7da7d71bc4344855b7ca0811a9bf9203>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7da7d71bc4344855b7ca0811a9bf9203>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794793
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            freq++;\n            if (item > max) {\n                max =\
    \ item;\n            }\n        }\n        if (freq >= max) {\n            return\
    \ -1;\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <62b62672e0c143ce8c3764e803d333e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <62b62672e0c143ce8c3764e803d333e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (i > 0) freq++;\n            if (freq > max) max = freq;\n\
    \        }\n        return max > 0 ? max : -1;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a693c760a9748408eeadc7e3d017d3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a693c760a9748408eeadc7e3d017d3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            long freq = lst.Count(x => x == val);\n         \
    \   if (freq >= maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0b8f68f60c7409da31ecd65242279dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0b8f68f60c7409da31ecd65242279dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq >= max) {\n            return -1;\n\
    \        }\n        return max;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a04227a418e4757b50be32b71bb1ecb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a04227a418e4757b50be32b71bb1ecb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            if (item > 0 && item == freq) {\n                max = Math.Max(max,\
    \ item);\n            }\n            freq++;\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <576a84879c1f404eb7d08409e6fa1016>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <576a84879c1f404eb7d08409e6fa1016>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq >= max) {\n            return max;\n\
    \        }\n        long max2 = 0;\n        long freq2 = 0;\n        foreach (long\
    \ i in lst) {\n            freq2++;\n            if (freq2 >= freq) {\n      \
    \          max2 = i;\n            }\n        }\n        return max2;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7d16a06a97741fa8976bc6011971bd3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7d16a06a97741fa8976bc6011971bd3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (var item\
    \ in lst) {\n            if (item == 0) continue;\n            long freq = lst.Count(x\
    \ => x == item);\n            if (freq > maxFreq) {\n                maxFreq =\
    \ freq;\n                maxVal = item;\n            }\n        }\n        return\
    \ maxVal;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65e6a25355f446829394aa3584903392>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65e6a25355f446829394aa3584903392>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794793
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            freq++;\n            if (item > max) {\n                max =\
    \ item;\n            }\n        }\n        if (freq > 0) {\n            max =\
    \ Math.Max(max, freq);\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7f7c00d6e57a4fa2bc26ac07ba7aab8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7f7c00d6e57a4fa2bc26ac07ba7aab8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq > 0) {\n            max = Math.Max(max,\
    \ lst[freq - 1]);\n        }\n        return max;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppjj08c68.cs(30,37): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659794487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            if (val > 0) {\n                long freq = lst.Count(x\
    \ => x == val);\n                if (freq >= maxFreq) {\n                    maxFreq\
    \ = freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq > 0) {\n            max = Math.Max(max,\
    \ freq);\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04b3c6df711a42a5945b45c6bd61183d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04b3c6df711a42a5945b45c6bd61183d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > i) {\n                freq =\
    \ i;\n            }\n            if (freq > max) {\n                max = freq;\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b16010a262d04960a35b991ac7192c83>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b16010a262d04960a35b991ac7192c83>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794793
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            if (val > 0) {\n                long freq = lst.Count(x\
    \ => x == val);\n                if (freq >= maxFreq) {\n                    maxFreq\
    \ = freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long maxFreq = 0;\n        foreach (long i in\
    \ lst) {\n            if (i > max) {\n                max = i;\n             \
    \   maxFreq = lst.Count(x => x == i);\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <452352ee4b6e4501a967c62c44a63ead>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <452352ee4b6e4501a967c62c44a63ead>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794793
