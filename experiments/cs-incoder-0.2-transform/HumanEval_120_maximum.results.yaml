language: cs
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long maxIndex = 0;\n        long maxValue = arr[0];\n
    \       long maxValueIndex = -1;\n        for (int i = 0; i < arr.Count; i++)
    {\n            if (arr[i] > maxValue) {\n                maxValue = arr[i];\n
    \               maxIndex = i;\n            }\n        }\n        long currentValue
    = maxValue;\n        long currentIndex = maxIndex;\n        while (currentIndex
    < arr.Count - 1) {\n            currentValue = arr[currentIndex + 1];\n            if
    (currentValue > maxValue) {\n                maxValue = currentValue;\n                maxIndex
    = currentIndex + 1;\n            }\n            currentIndex++;\n        }\n        result.Add(maxValue);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxbmq81op.cs(39,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxbmq81op.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpxbmq81op.cs(29,14): warning CS0219: The variable ''maxValueIndex'' is
    assigned but its value is never used

    '
  timestamp: 1659793738
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = arr.Min();\n        long mid = 0;\n
    \       long midMax = 0;\n        long midMin = 0;\n        long midMid = 0;\n
    \       long midMidMax = 0;\n        long midMidMin = 0;\n        long midMidMid
    = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin = 0;\n        long
    midMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin
    = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long
    midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax
    = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long
    midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid
    = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long
    midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin
    = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long
    midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax
    = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long
    midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid
    = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long
    midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin
    = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long
    midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax
    = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long
    midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid
    = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long
    midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin
    = 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpipr4bb7r.cs(41,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(42,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(43,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(44,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(45,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(46,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(47,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(48,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(49,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(50,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(51,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(52,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(53,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(54,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(55,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /'
  timestamp: 1659793738
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long temp = 0;\n        long sum = 0;\n        foreach
    (long i in arr) {\n            sum += i;\n            if (sum > max) {\n                max
    = sum;\n            }\n        }\n        temp = k - max;\n        if (temp <
    0) {\n            temp = temp * -1;\n        }\n        temp = temp / arr.Count;\n
    \       foreach (long i in arr) {\n            sum += i;\n            if (sum
    > max) {\n                max = sum;\n            }\n        }\n        temp =
    k - max;\n        if (temp < 0) {\n            temp = temp * -1;\n        }\n
    \       temp = temp / arr.Count;\n        foreach (long i in arr) {\n            sum
    += i;\n            if (sum > max) {\n                max = sum;\n            }\n
    \       }\n        temp = k - max;\n        if (temp < 0) {\n            temp
    = temp * -1;\n        }\n        temp = temp / arr.Count;\n        foreach (long
    i in arr) {\n            sum += i;\n            if (sum > max) {\n                max
    = sum;\n            }\n        }\n        temp = k - max;\n        if (temp <
    0) {\n            temp = temp * -1;\n        }\n        temp = temp / arr.Count;\n
    \       foreach (long i in arr) {\n            sum += i;\n            if (sum
    > max) {\n                max = sum;\n            }\n        }\n        temp =
    k - max;\n        if (temp < 0) {\n            temp = temp * -1;\n        }\n
    \       temp = temp / arr.Count;\n        foreach (long i in arr) {\n            sum
    += i;\n            if (sum > max) {\n                max = sum;\n            }\n
    \       }\n        temp = k - max;\n        if (temp < 0) {\n            temp
    = temp * -1;\n        }\n        temp = temp / arr.Count;\n        foreach (long
    i in arr) {\n            sum += i;\n            if (sum > max) {\n                max
    = sum;\n            }\n        }\n        temp = k - max;\n        if (temp <
    0) {\n            temp = temp * -1;\n        }\n        temp = temp / arr.Count;\n
    \       foreach (long i in arr) {\n            sum += i;\n            if (sum
    > max) {\n                max = sum;\n            }\n        }\n        temp =
    k - max;\n        if (temp < 0) {\n            temp = temp * -1;\n        }\n
    \       temp = temp / arr.Count;\n        foreach (long i in arr) {\n            sum
    += i;\n            if (sum > max) {\n                max = sum;\n            }\n
    \       }\n        temp = k - max;\n        if (temp < 0) {\n            temp
    = temp * -1;\n        }\n        temp = temp / arr.Count;\n        foreach (long
    i in arr) {\n            sum += i;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkutut3wa.cs(131,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpkutut3wa.cs(145,2): error CS1513: } expected

    '
  timestamp: 1659793737
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = arr[0];\n        List<long>
    result = new List<long>();\n        for (int i = 1; i < arr.Count; i++) {\n            if
    (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        if
    (k == max) {\n            return arr;\n        }\n        List<long> maxList =
    new List<long>();\n        List<long> minList = new List<long>();\n        long
    minValue = max;\n        long maxValue = max;\n        for (int i = 0; i < arr.Count;
    i++) {\n            if (arr[i] > maxValue) {\n                maxValue = arr[i];\n
    \           }\n            if (arr[i] < minValue) {\n                minValue
    = arr[i];\n            }\n        }\n        long midValue = maxValue + minValue
    / 2;\n        long mid = midValue / 2;\n        long maxMidValue = mid;\n        long
    minMidValue = mid;\n        long maxMid = maxValue + minValue / 2;\n        long
    minMid = minValue + maxValue / 2;\n        long maxMidValue = maxMid;\n        long
    minMidValue = minMid;\n        long maxMid = maxValue + minValue / 2;\n        long
    minMid = minValue + maxValue / 2;\n        long maxMidValue = maxMid;\n        long
    minMidValue = minMid;\n        long maxMid = maxValue + minValue / 2;\n        long
    minMid = minValue + maxValue / 2;\n        long maxMidValue = maxMid;\n        long
    minMidValue = minMid;\n        long maxMid = maxValue + minValue / 2;\n        long
    minMid = minValue + maxValue / 2;\n        long maxMidValue = maxMid;\n        long
    minMidValue = minMid;\n        long maxMid = maxValue + minValue / 2;\n        long
    minMid = minValue + maxValue / 2;\n        long maxMidValue = maxMid;\n        long
    minMidValue = minMid;\n        long maxMid = maxValue + minValue / 2;\n        long
    minMid = minValue + maxValue / 2;\n        long maxMidValue = maxMid;\n        long
    minMidValue = minMid;\n        long maxMid = maxValue + minValue / 2;\n        long
    minMid = minValue + maxValue / 2;\n        long maxMidValue = maxMid;\n        long
    minMidValue = minMid;\n        long maxMid = maxValue + minValue / 2;\n        long
    minMid = minValue + maxValue / 2;\n        long maxMidValue = maxMid;\n        long
    minMid\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6kns0938.cs(82,20): error CS1002: ; expected

    '
  timestamp: 1659793737
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        foreach (long i in arr)
    {\n            if (max < i) {\n                max = i;\n            }\n            if
    (min > i) {\n                min = i;\n            }\n        }\n        long
    mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3
    = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long
    mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n
    \       long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11
    = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n
    \       long mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long
    mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17
    / 2;\n        long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long
    mid21 = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22
    / 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n        long
    mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28 = mid27
    / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long
    mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32
    / 2;\n        long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long
    mid36 = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37
    / 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long
    mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42
    / 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n        long
    mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5qg6mi85.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659793738
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long> result
    = new List<long>();\n        foreach (long i in arr) {\n            if (max <
    i) {\n                max = i;\n            }\n        }\n        long len = arr.Count;\n
    \       if (k > len) {\n            k = len;\n        }\n        long mid = len
    / 2;\n        long midMax = arr[mid];\n        long midMaxIndex = 0;\n        long
    midMaxIndex2 = 0;\n        long midMaxIndex3 = 0;\n        long midMaxIndex4 =
    0;\n        long midMaxIndex5 = 0;\n        long midMaxIndex6 = 0;\n        long
    midMaxIndex7 = 0;\n        long midMaxIndex8 = 0;\n        long midMaxIndex9 =
    0;\n        long midMaxIndex10 = 0;\n        long midMaxIndex11 = 0;\n        long
    midMaxIndex12 = 0;\n        long midMaxIndex13 = 0;\n        long midMaxIndex14
    = 0;\n        long midMaxIndex15 = 0;\n        long midMaxIndex16 = 0;\n        long
    midMaxIndex17 = 0;\n        long midMaxIndex18 = 0;\n        long midMaxIndex19
    = 0;\n        long midMaxIndex20 = 0;\n        long midMaxIndex21 = 0;\n        long
    midMaxIndex22 = 0;\n        long midMaxIndex23 = 0;\n        long midMaxIndex24
    = 0;\n        long midMaxIndex25 = 0;\n        long midMaxIndex26 = 0;\n        long
    midMaxIndex27 = 0;\n        long midMaxIndex28 = 0;\n        long midMaxIndex29
    = 0;\n        long midMaxIndex30 = 0;\n        long midMaxIndex31 = 0;\n        long
    midMaxIndex32 = 0;\n        long midMaxIndex33 = 0;\n        long midMaxIndex34
    = 0;\n        long midMaxIndex35 = 0;\n        long midMaxIndex36 = 0;\n        long
    midMaxIndex37 = 0;\n        long midMaxIndex38 = 0;\n        long midMaxIndex39
    = 0;\n        long midMaxIndex40 = 0;\n        long midMaxIndex41 = 0;\n        long
    midMaxIndex42 = 0;\n        long midMaxIndex43 = 0;\n        long midMaxIndex44
    = 0;\n        long midMaxIndex45 = 0;\n        long midMaxIndex46 = 0;\n        long
    midMaxIndex47 = 0;\n        long midMaxIndex48 = 0;\n        long midMaxIndex49
    = 0;\n        long midMaxIndex50 = 0;\n        long midMaxIndex51 = 0;\n        long
    midMaxIndex52 = 0;\n        long midMaxIndex53 = 0;\n        long midMaxIndex54
    = 0;\n        long midMaxIndex55 = 0;\n        long midMaxIndex56\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpame3_9ts.cs(93,27): error CS1002: ; expected

    '
  timestamp: 1659793737
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 1000;\n        foreach (long i in arr)
    {\n            if (max < i) {\n                max = i;\n            }\n            if
    (min > i) {\n                min = i;\n            }\n        }\n        long
    mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3
    = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long
    mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n
    \       long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11
    = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n
    \       long mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long
    mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17
    / 2;\n        long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long
    mid21 = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22
    / 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n        long
    mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28 = mid27
    / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long
    mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32
    / 2;\n        long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long
    mid36 = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37
    / 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long
    mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42
    / 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n        long
    mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfjtux4mt.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659793738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        foreach (long i in arr)
    {\n            if (max < i) {\n                max = i;\n                cur =
    i;\n            }\n            if (cur > k) {\n                result.Add(max);\n
    \               max = cur;\n                cur = i;\n            }\n        }\n
    \       result.Add(max);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <152bf8de29124d309d61be3c89215396>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <152bf8de29124d309d61be3c89215396>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793738
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = arr.Max();\n        long min = arr.Min();\n        long mid
    = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid2
    / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long
    mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n
    \       long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11
    = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n
    \       long mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long
    mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17
    / 2;\n        long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long
    mid21 = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22
    / 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n        long
    mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28 = mid27
    / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long
    mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32
    / 2;\n        long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long
    mid36 = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37
    / 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long
    mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42
    / 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n        long
    mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48 = mid47
    / 2;\n        long mid49 = mid48 / 2;\n        long mid50 = mid49 / \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6fxlo8n2.cs(77,29): error CS1525: Invalid expression term ''}''

    /tmp/tmp6fxlo8n2.cs(77,29): error CS1002: ; expected

    '
  timestamp: 1659793737
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        long max2 = 0;\n        long
    cur2 = 0;\n        long max3 = 0;\n        long cur3 = 0;\n        long max4 =
    0;\n        long cur4 = 0;\n        long max5 = 0;\n        long cur5 = 0;\n        long
    max6 = 0;\n        long cur6 = 0;\n        long max7 = 0;\n        long cur7 =
    0;\n        long max8 = 0;\n        long cur8 = 0;\n        long max9 = 0;\n        long
    cur9 = 0;\n        long max10 = 0;\n        long cur10 = 0;\n        long max11
    = 0;\n        long cur11 = 0;\n        long max12 = 0;\n        long cur12 = 0;\n
    \       long max13 = 0;\n        long cur13 = 0;\n        long max14 = 0;\n        long
    cur14 = 0;\n        long max15 = 0;\n        long cur15 = 0;\n        long max16
    = 0;\n        long cur16 = 0;\n        long max17 = 0;\n        long cur17 = 0;\n
    \       long max18 = 0;\n        long cur18 = 0;\n        long max19 = 0;\n        long
    cur19 = 0;\n        long max20 = 0;\n        long cur20 = 0;\n        long max21
    = 0;\n        long cur21 = 0;\n        long max22 = 0;\n        long cur22 = 0;\n
    \       long max23 = 0;\n        long cur23 = 0;\n        long max24 = 0;\n        long
    cur24 = 0;\n        long max25 = 0;\n        long cur25 = 0;\n        long max26
    = 0;\n        long cur26 = 0;\n        long max27 = 0;\n        long cur27 = 0;\n
    \       long max28 = 0;\n        long cur28 = 0;\n        long max29 = 0;\n        long
    cur29 = 0;\n        long max30 = 0;\n        long cur30 = 0;\n        long max31
    = 0;\n        long cur31 = 0;\n        long max32 = 0;\n        long cur32 = 0;\n
    \       long max33 = 0;\n        long cur33 = 0;\n        long max34 = 0;\n        long
    cur34 = 0;\n        long max35 = 0;\n        long cur35 = 0;\n        long max36
    = 0;\n        long cur36 = 0;\n        long max37 = 0;\n        long cur37 = 0;\n
    \       long max38 = 0;\n        long cur38 = 0;\n        long max39 = 0;\n        long
    cur39 = 0;\n        long max40 = 0;\n        long cur40 = 0;\n        long max41
    = 0;\n        long cur41 = 0;\n        long max42 = 0;\n        long cur42 = 0;\n
    \       long max43 = 0;\n        long \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2cx6ywts.cs(111,13): error CS1001: Identifier expected

    /tmp/tmp2cx6ywts.cs(111,13): error CS1002: ; expected

    '
  timestamp: 1659793737
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        long max = 0;\n        long maxIndex = 0;\n
    \       long maxValue = arr[0];\n        long maxValueIndex = -1;\n        foreach
    (long i in arr) {\n            if (i == maxValue) {\n                maxValueIndex
    = arr.IndexOf(i);\n            }\n            if (i > maxValue) {\n                max
    = i;\n                maxValue = maxValue;\n                maxValueIndex = maxValueIndex;\n
    \           }\n        }\n        if (maxValueIndex == -1) {\n            result.Add(maxValue);\n
    \       } else {\n            result.Add(arr[maxValueIndex]);\n        }\n        for
    (int i = 1; i < k; i++) {\n            long maxValueIndex = -1;\n            long
    maxValue = arr[0];\n            long maxIndex = 0;\n            foreach (long
    i in arr) {\n                if (i == maxValue) {\n                    maxValueIndex
    = arr.IndexOf(i);\n                }\n                if (i > maxValue) {\n                    max
    = i;\n                    maxValue = maxValue;\n                    maxValueIndex
    = maxValueIndex;\n                }\n            }\n            if (maxValueIndex
    == -1) {\n                result.Add(maxValue);\n            } else {\n                result.Add(arr[maxValueIndex]);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3nfppc0o.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp3nfppc0o.cs(44,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp3nfppc0o.cs(47,18): error CS0136: A local or parameter named ''maxValueIndex''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp3nfppc0o.cs(48,18): error CS0136: A local or parameter named ''maxValue''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp3nfppc0o.cs(49,18): error CS0136: A local or parameter named ''maxIndex''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp3nfppc0o.cs(50,27): error CS0136: A local or parameter named ''i'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp3nfppc0o.cs(63,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp3nfppc0o.cs(37,17): warning CS1717: Assignment made to same variable;
    did you mean to assign something else?

    /tmp/tmp3nfppc0o.cs(38,17): warning CS1717: Assignment made to same variable;
    did you mean to assign something else?

    /tmp/tmp3nfppc0o.cs(56,21): warning CS1717: Assignment made to same variable;
    did you mean to assign something else?

    /tmp/tmp3nfppc0o.cs(57,21): warning CS1717: Assignment made to same variable;
    did you mean to assign something else?

    /tmp/tmp3nfppc0o.cs(49,18): warning CS0219: The variable ''maxIndex'' is assigned
    but its value is never used

    /tmp/tmp3nfppc0o.cs(28,14): warning CS0219: The variable ''maxIndex'' is assigned
    but its value is never used

    '
  timestamp: 1659793738
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count <= k) {\n            return
    arr;\n        }\n        List<long> res = new List<long>();\n        long max
    = 0;\n        long maxIndex = 0;\n        long maxValue = arr[0];\n        for
    (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n                maxValue
    = arr[i];\n                maxIndex = i;\n            }\n        }\n        max
    = maxValue;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]
    == max) {\n                res.Add(max);\n                maxIndex++;\n            }\n
    \       }\n        if (maxIndex < k) {\n            List<long> newArr = new List<long>();\n
    \           for (int i = 0; i < k - maxIndex; i++) {\n                newArr.Add(0);\n
    \           }\n            newArr.AddRange(arr.Skip(maxIndex));\n            res
    = Maximum(newArr, k);\n        }\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp908oy6y4.cs(50,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793738
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long> result
    = new List<long>();\n        foreach (long i in arr) {\n            if (i > max)
    {\n                max = i;\n            }\n        }\n        long start = 0;\n
    \       long end = arr.Count - 1;\n        while (start <= end) {\n            long
    mid = (start + end) / 2;\n            if (arr[mid] > max) {\n                end
    = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n
    \       }\n        long mid = start;\n        while (arr[mid] < k) {\n            mid
    += 1;\n        }\n        result.AddRange(arr.GetRange(mid, arr.Count - mid));\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1gzriw2z.cs(35,18): error CS0136: A local or parameter named ''mid'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp1gzriw2z.cs(36,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp1gzriw2z.cs(43,20): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp1gzriw2z.cs(46,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp1gzriw2z.cs(46,43): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793738
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long maxIndex = 0;\n        long maxValue = arr[0];\n
    \       long maxValueIndex = 0;\n        foreach (long i in arr) {\n            if
    (i > maxValue) {\n                maxValue = i;\n                maxValueIndex
    = i;\n            }\n            if (i == maxValue) {\n                maxIndex++;\n
    \           }\n        }\n        long temp = 0;\n        long tempIndex = 0;\n
    \       long tempValue = arr[0];\n        long tempValueIndex = 0;\n        long
    tempMax = 0;\n        long tempMaxIndex = 0;\n        foreach (long i in arr)
    {\n            if (i > tempMax) {\n                tempMax = i;\n                tempMaxIndex
    = i;\n            }\n            if (i == tempMax) {\n                tempIndex++;\n
    \           }\n        }\n        long tempMaxValue = arr[0];\n        long tempMaxValueIndex
    = 0;\n        long tempMaxIndex = arr[0];\n        long tempMaxValue = arr[0];\n
    \       long tempMaxValueIndex = 0;\n        foreach (long i in arr) {\n            if
    (i > tempMaxValue) {\n                tempMaxValue = i;\n                tempMaxValueIndex
    = i;\n            }\n            if (i == tempMaxValue) {\n                tempMaxIndex++;\n
    \           }\n        }\n        long tempMaxValue2 = arr[0];\n        long tempMaxValueIndex2
    = 0;\n        long tempMaxIndex2 = arr[0];\n        long tempMaxValue2 = arr[0];\n
    \       long tempMaxValueIndex2 = 0;\n        foreach (long i in arr) {\n            if
    (i > tempMaxValue2) {\n                tempMaxValue2 = i;\n                tempMaxValueIndex2
    = i;\n            }\n            if (i == tempMaxValue2) {\n                tempMaxIndex2++;\n
    \           }\n        }\n        long tempMaxValue3 = arr[0];\n        long tempMaxValueIndex3
    = 0;\n        long tempMaxIndex3 = arr[0];\n        long tempMaxValue3 = arr[0];\n
    \       long tempMaxValueIndex3 = 0;\n        foreach (long i in arr) {\n            if
    (i > tempMaxValue3) {\n                tempMaxValue3 = i;\n                tempMaxValueIndex3
    = i;\n            }\n            if (i == tempMaxValue3) {\n                tempMaxIndex3++;\n
    \           }\n        }\n        long tempMaxValue4 = arr[0];\n        long tempMaxValueIndex4
    = 0;\n        long tempMaxIndex4 = arr[0];\n        long tempMaxValue4 = arr[0];\n
    \       long tempMaxValueIndex4 = 0;\n        foreach (long i in arr) {\n            if
    (i > tempMaxValue4) {\n                tempMaxValue4 = i;\n                tempMaxValueIndex4
    = i;\n            }\n            if (i == tempMaxValue4) {\n                tempMaxIndex4++;\n\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgqwsx0u3.cs(110,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpgqwsx0u3.cs(124,2): error CS1513: } expected

    '
  timestamp: 1659793737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxValue = arr[0];\n        long minValue = arr[0];\n
    \       long maxIndexValue = arr[0];\n        long minIndexValue = arr[0];\n        bool
    flag = false;\n        foreach (long i in arr) {\n            if (flag) {\n                if
    (i > maxValue) {\n                    maxValue = i;\n                    maxIndex
    = i;\n                    maxIndexValue = i;\n                }\n                if
    (i < minValue) {\n                    minValue = i;\n                    minIndex
    = i;\n                    minIndexValue = i;\n                }\n                if
    (maxIndexValue < minIndexValue) {\n                    maxIndexValue = minIndexValue;\n
    \                   maxIndex = minIndex;\n                    maxValue = minValue;\n
    \               }\n                if (minIndexValue > maxIndexValue) {\n                    minIndexValue
    = maxIndexValue;\n                    minIndex = maxIndex;\n                    minValue
    = maxValue;\n                }\n                if (maxIndexValue > minIndexValue)
    {\n                    maxIndexValue = minIndexValue;\n                    maxIndex
    = minIndex;\n                    maxValue = minValue;\n                }\n                if
    (minIndexValue < maxIndexValue) {\n                    minIndexValue = maxIndexValue;\n
    \                   minIndex = maxIndex;\n                    minValue = maxValue;\n
    \               }\n            }\n            if (i == k) {\n                flag
    = true;\n                result.Add(maxValue);\n                result.Add(maxIndex);\n
    \               result.Add(maxIndexValue);\n                result.Add(minValue);\n
    \               result.Add(minIndex);\n                result.Add(minIndexValue);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a07981aa76342249a86d5c77da5dc99>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a07981aa76342249a86d5c77da5dc99>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793738
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        long sum2 = 0;\n        long sum3 = 0;\n        long sum4
    = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n        long sum7 = 0;\n
    \       long sum8 = 0;\n        long sum9 = 0;\n        long sum10 = 0;\n        long
    sum11 = 0;\n        long sum12 = 0;\n        long sum13 = 0;\n        long sum14
    = 0;\n        long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n
    \       long sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long
    sum21 = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24
    = 0;\n        long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n
    \       long sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long
    sum31 = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n        long sum34
    = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n
    \       long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n        long
    sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n        long sum44
    = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n        long sum47 = 0;\n
    \       long sum48 = 0;\n        long sum49 = 0;\n        long sum50 = 0;\n        long
    sum51 = 0;\n        long sum52 = 0;\n        long sum53 = 0;\n        long sum54
    = 0;\n        long sum55 = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n
    \       long sum58 = 0;\n        long sum59 = 0;\n        long sum60 = 0;\n        long
    sum61 = 0;\n        long sum62 = 0;\n        long sum63 = 0;\n        long sum64
    = 0;\n        long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n
    \       long sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n        long
    sum71 = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n        long sum74
    = 0;\n        long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n
    \       long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n        long
    sum81 = 0;\n        long sum82 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr8pj50ot.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpr8pj50ot.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmpr8pj50ot.cs(28,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpr8pj50ot.cs(29,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(30,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(31,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(32,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(33,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(34,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(35,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(36,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(37,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(38,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(39,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(40,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(41,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(42,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(43,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(44,14): warning CS0219: T'
  timestamp: 1659793738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       if (k == 0) return arr;\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long maxIndex = -1;\n        long maxValue = arr[0];\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > maxValue)
    {\n                maxValue = arr[i];\n                maxIndex = i;\n            }\n
    \       }\n        if (maxValue > k) {\n            max = maxValue;\n            maxIndex
    = maxIndex;\n        }\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] == maxValue) {\n                result.Add(arr[i]);\n            }\n        }\n
    \       if (result.Count > k) {\n            List<long> newResult = new List<long>();\n
    \           for (int i = 0; i < result.Count - k + 1; i++) {\n                newResult.Add(result[i]);\n
    \           }\n            return newResult;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ee08b63ebc24d0c93dbdb7b5047bd78>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ee08b63ebc24d0c93dbdb7b5047bd78>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793738
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long
    temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6
    = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n
    \       long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n
    \       long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n
    \       long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n
    \       long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n
    \       long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n
    \       long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n
    \       long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n
    \       long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n
    \       long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n
    \       long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n
    \       long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n
    \       long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n
    \       long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n
    \       long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n
    \       long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n
    \       long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n
    \       long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n
    \       long temp61 = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n
    \       long temp64 = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n
    \       long temp67 = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n
    \       long temp70 = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n
    \       long temp73 = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n
    \       long temp76 = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n
    \       long temp79 = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n
    \       long temp82 = 0;\n        long temp83 = 0;\n        long temp84\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeubn4iuh.cs(110,20): error CS1002: ; expected

    '
  timestamp: 1659793737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       List<long> res = new List<long>();\n        long max = 0;\n        long
    cur = 0;\n        foreach (long i in arr) {\n            if (i > cur) {\n                max
    = i;\n                cur = i;\n            }\n            if (i == cur) {\n                cur++;\n
    \           }\n            if (cur > k) {\n                res.Add(max);\n                cur
    = max;\n                max = 0;\n            }\n        }\n        if (max >
    0) res.Add(max);\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1df48d4d348c4c9bb6da66161ba72787>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1df48d4d348c4c9bb6da66161ba72787>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793738
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > max) {\n                max = sum;\n            }\n            if (sum
    < min) {\n                min = sum;\n            }\n            if (sum == max)
    {\n                res.Add(max);\n                count++;\n            }\n        }\n
    \       if (count > k) {\n            k = count;\n        }\n        if (k ==
    0) {\n            return res;\n        }\n        long mid = max / 2;\n        long
    mid2 = min / 2;\n        long mid3 = sum / 2;\n        List<long> left = new List<long>();\n
    \       List<long> right = new List<long>();\n        List<long> left2 = new List<long>();\n
    \       List<long> right2 = new List<long>();\n        List<long> left3 = new
    List<long>();\n        List<long> right3 = new List<long>();\n        List<long>
    left4 = new List<long>();\n        List<long> right4 = new List<long>();\n        List<long>
    left5 = new List<long>();\n        List<long> right5 = new List<long>();\n        List<long>
    left6 = new List<long>();\n        List<long> right6 = new List<long>();\n        List<long>
    left7 = new List<long>();\n        List<long> right7 = new List<long>();\n        List<long>
    left8 = new List<long>();\n        List<long> right8 = new List<long>();\n        List<long>
    left9 = new List<long>();\n        List<long> right9 = new List<long>();\n        List<long>
    left10 = new List<long>();\n        List<long> right10 = new List<long>();\n        List<long>
    left11 = new List<long>();\n        List<long> right11 = new List<long>();\n        List<long>
    left12 = new List<long>();\n        List<long> right12 = new List<long>();\n        List<long>
    left13 = new List<long>();\n        List<long> right13 = new List<long>();\n        List<long>
    left14 = new List<long>();\n        List<long> right14 = new List<long>();\n        List<long>
    left15 = new List<long>();\n        List<long> right15 = new List<long>();\n        List<long>
    left16 = new List<long>();\n        List<long> right16 = new List<long>();\n        List<long>
    left17 = new List<long>();\n        List<long> right17 = new List<long>();\n        List<long>
    left18 = new List<long\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ula5l9l.cs(86,42): error CS1003: Syntax error, ''>'' expected

    /tmp/tmp_ula5l9l.cs(86,42): error CS1526: A new expression requires (), [], or
    {} after type

    /tmp/tmp_ula5l9l.cs(86,42): error CS1002: ; expected

    '
  timestamp: 1659793737
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count < k) {\n            return
    arr;\n        }\n        List<long> result = new List<long>();\n        long maxValue
    = arr[0];\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count;
    i++) {\n            if (arr[i] > maxValue) {\n                maxValue = arr[i];\n
    \               maxIndex = i;\n            }\n        }\n        result.Add(maxValue);\n
    \       for (int i = maxIndex + 1; i < arr.Count; i++) {\n            if (arr[i]
    > maxValue) {\n                maxValue = arr[i];\n                maxIndex =
    i;\n            }\n        }\n        result.Add(maxValue);\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp85iurite.cs(38,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        long max = 0;\n        long maxIndex = 0;\n
    \       long maxValue = 0;\n        long current = 0;\n        long currentIndex
    = 0;\n        long currentValue = 0;\n        long currentMax = 0;\n        long
    currentMaxIndex = 0;\n        long currentMaxValue = 0;\n        long currentCurrent
    = 0;\n        long currentCurrentIndex = 0;\n        long currentCurrentValue
    = 0;\n        long currentCurrentMax = 0;\n        long currentCurrentMaxIndex
    = 0;\n        long currentCurrentMaxValue = 0;\n        long currentCurrentCurrent
    = 0;\n        long currentCurrentCurrentIndex = 0;\n        long currentCurrentCurrentValue
    = 0;\n        long currentCurrentCurrentMax = 0;\n        long currentCurrentCurrentMaxIndex
    = 0;\n        long currentCurrentCurrentMaxValue = 0;\n        long currentCurrentCurrentCurrent
    = 0;\n        long currentCurrentCurrentCurrentIndex = 0;\n        long currentCurrentCurrentCurrentValue
    = 0;\n        long currentCurrentCurrentCurrentMax = 0;\n        long currentCurrentCurrentCurrentMaxIndex
    = 0;\n        long currentCurrentCurrentCurrentMaxValue = 0;\n        long currentCurrentCurrentCurrentCurrent
    = 0;\n        long currentCurrentCurrentCurrentCurrentIndex = 0;\n        long
    currentCurrentCurrentCurrentCurrentValue = 0;\n        long currentCurrentCurrentCurrentCurrentMax
    = 0;\n        long currentCurrentCurrentCurrentCurrentMaxIndex = 0;\n        long
    currentCurrentCurrentCurrentCurrentMaxValue = 0;\n        long currentCurrentCurrentCurrentCurrentCurrent
    = 0;\n        long currentCurrentCurrentCurrentCurrentCurrentIndex = 0;\n        long
    currentCurrentCurrentCurrentCurrentCurrentValue = 0;\n        long currentCurrentCurrentCurrentCurrentCurrentMax
    = 0;\n        long currentCurrentCurrentCurrentCurrentCurrentMaxIndex = 0;\n        long
    currentCurrentCurrentCurrentCurrentCurrentMaxValue = 0;\n        long currentCurrentCurrentCurrentCurrentCurrentCurrent
    = 0;\n        long currentCurrentCurrentCurrentCurrentCurrentIndex = 0;\n        long
    currentCurrentCurrentCurrentCurrentCurrentValue = 0;\n        long currentCurrentCurrentCurrentCurrentCurrentMax
    = 0;\n        long currentCurrentCurrentCurrentCurrentCurrentMaxIndex = 0;\n        long
    currentCurrentCurrentCurrentCurrentCurrentMaxValue = 0;\n        long currentCurrentCurrentCurrentCurrentCurrentCurrent
    = 0;\n        long currentCurrentCurrentCurrentCurrentCurrentIndex = 0;\n        long
    currentCurrentCurrentCurrentCurrentCurrentValue = 0;\n        long currentCurrentCurrentCurrentCurrentCurrentMax
    = 0;\n        long currentCurrentCurrentCurrentCurrentCurrentMaxIndex = 0;\n        long
    currentCurrentCurrentCurrentCurrentCurrentMaxValue = 0;\n        long currentCurrentCurrentCurrentCurrentCurrentCurrent
    = 0;\n        long currentCurrentCurrentCurrentCurrentCurrentIndex = 0;\n        long
    currentCurrentCurrentCurrentCurrentCurrent\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpai1h6nrw.cs(80,56): error CS1002: ; expected

    '
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > k) {\n                max = sum;\n                min = i;\n                count
    = 1;\n            } else if (sum < k) {\n                max = sum;\n                min
    = i;\n                count = 1;\n            } else {\n                max =
    Math.Max(max, sum);\n                min = Math.Min(min, sum);\n                count++;\n
    \           }\n        }\n        long maxSum = max * count;\n        long minSum
    = min * count;\n        long maxCount = count;\n        long minCount = count;\n
    \       long maxSumCount = maxSum * maxCount;\n        long minSumCount = minSum
    * minCount;\n        long maxSumCountMinCount = maxSumCount * minCount;\n        long
    minSumCountMaxCount = minSumCount * maxCount;\n        long maxSumCountMinCountMaxSum
    = maxSumCountMinCount * maxSum;\n        long minSumCountMaxCountMaxSum = minSumCountMaxCount
    * maxSum;\n        long maxSumCountMinCountMaxSumMinCount = maxSumCountMinCountMaxSum
    * minCount;\n        long minSumCountMaxCountMaxSumMinCountMaxSum = minSumCountMaxCountMaxSumMinCount
    * maxSum;\n        long maxSumCountMinCountMaxSumMinCountMaxSumMinCountMaxSum
    = maxSumCountMinCountMaxSumMinCountMaxSumMinCount * maxSum;\n        long maxSumCountMinCountMaxSumMinCountMaxSumMinCountMaxSumMinCount
    = maxSumCountMinCountMaxSumMinCountMaxSumMinCountMaxSum * minCount;\n        long
    minSumCountMaxCountMaxSumMinCountMaxSumMinCountMaxSumMinCountMaxSum = minSumCountMaxCountMaxSumMinCountMaxSumMinCountMaxSum
    * maxSum;\n        long maxSumCountMinCountMaxSumMinCountMaxSumMinCountMaxSumMinCountMaxSumMinCountMaxSum
    = maxSumCountMinCountMaxSumMinCountMaxSumMinCountMaxSumMinCountMaxSum * maxSum;\n
    \       long maxSumCountMinCountMaxSumMinCountMaxSumMinCountMaxSumMinCountMaxSumMinCountMaxSumMinCountMaxSum
    = maxSumCountMinCountMaxSumMinCountMaxSumMinCountMaxSumMinCountMaxSum * maxSum;\n
    \       long maxSumCountMinCountMaxSumMin\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt4z4he2k.cs(63,42): error CS1002: ; expected

    '
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = 0;\n        long maxIndex
    = 0;\n        List<long> result = new List<long>();\n        foreach (long i in
    arr) {\n            if (max < i) {\n                max = i;\n                maxIndex
    = i;\n            }\n        }\n        long maxValue = max;\n        long maxIndex
    = maxIndex;\n        List<long> temp = new List<long>();\n        foreach (long
    i in arr) {\n            if (i == maxValue) {\n                temp.Add(maxIndex);\n
    \           }\n        }\n        result.AddRange(temp);\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbrm3z4d1.cs(35,14): error CS0128: A local variable or function named ''maxIndex''
    is already defined in this scope

    '
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        foreach
    (long i in arr) {\n            sum += i;\n            if (sum > max) {\n                max
    = sum;\n            }\n            if (sum < min) {\n                min = sum;\n
    \           }\n        }\n        if (k > max) {\n            k = max;\n        }\n
    \       if (k < min) {\n            k = min;\n        }\n        long mid = max
    / 2;\n        long mid2 = min / 2;\n        long mid3 = mid / 2;\n        long
    mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n
    \       long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9
    = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n
    \       long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long
    mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15
    / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n        long
    mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21 = mid20
    / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long
    mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25
    / 2;\n        long mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long
    mid29 = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30
    / 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long
    mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35
    / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n        long
    mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41 = mid40
    / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long
    mid44 = mid4\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphza0xqu5.cs(87,26): error CS1002: ; expected

    '
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > k) {\n                max = sum;\n                min = i;\n                count
    = 1;\n            } else if (sum == k) {\n                max = sum;\n                min
    = i;\n                count = 1;\n            } else if (sum < k) {\n                max
    = sum;\n                min = i;\n                count = 1;\n            }\n
    \       }\n        if (count > 1) {\n            while (count > 1) {\n                result.Add(min);\n
    \               count--;\n            }\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf6295811b2c42ffb51ad20d594f3739>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf6295811b2c42ffb51ad20d594f3739>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0csqayx9.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmp0csqayx9.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmp0csqayx9.cs(28,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmp0csqayx9.cs(29,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(30,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(31,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(32,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(33,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(34,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(35,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(36,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(37,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(38,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(39,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(40,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(41,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(42,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(43,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(44,14): warning CS0219: T'
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       long max = 0;\n        long maxIndex = 0;\n        long maxValue = arr[0];\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > maxValue)
    {\n                maxValue = arr[i];\n                maxIndex = i;\n            }\n
    \       }\n        max = maxValue;\n        for (int i = 0; i < arr.Count; i++)
    {\n            if (arr[i] == max) {\n                res.Add(maxIndex);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acb99d314bed4488b15b62191df6f914>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acb99d314bed4488b15b62191df6f914>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823363
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > k) {\n                max = sum;\n                min = i;\n                count
    = 1;\n            } else if (sum == k) {\n                if (i > k) {\n                    max
    = i;\n                    min = sum;\n                    count = 1;\n                }
    else {\n                    max = sum;\n                    min = i;\n                    count
    = 1;\n                }\n            }\n        }\n        if (count > 1) {\n
    \           while (count > 1) {\n                result.Add(max);\n                result.Add(min);\n
    \               count--;\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bbfc4253d1ec450fae03e7d4bc9266c3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bbfc4253d1ec450fae03e7d4bc9266c3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long> result
    = new List<long>();\n        foreach (long i in arr) {\n            if (i > max)
    {\n                max = i;\n            }\n        }\n        long temp = 0;\n
    \       long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long
    temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8
    = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 =
    0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 =
    0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 =
    0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 =
    0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 =
    0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 =
    0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 =
    0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 =
    0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 =
    0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 =
    0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 =
    0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 =
    0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 =
    0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 =
    0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 =
    0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 =
    0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 =
    0;\n        long temp60 = 0;\n        long temp61 = 0;\n        long temp62 =
    0;\n        long temp63 = 0;\n        long temp64 = 0;\n        long temp65 =
    0;\n        long temp66 = 0;\n        long temp67 = 0;\n        long temp68 =
    0;\n        long temp69 = 0;\n        long temp70 = 0;\n        long temp71 =
    0;\n        long temp72 = 0;\n        long temp73 = 0;\n        long temp74 =
    0;\n        long temp75 = 0;\n        long temp76 = 0;\n        long temp77 =
    0;\n        long temp78 = 0;\n        long temp79 = 0;\n        long temp80 =
    0;\n        long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk8qj0e9g.cs(112,13): error CS1001: Identifier expected

    /tmp/tmpk8qj0e9g.cs(112,13): error CS1002: ; expected

    '
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long> result
    = new List<long>();\n        foreach (long i in arr) {\n            if (i > max)
    {\n                max = i;\n            }\n        }\n        long curMax = max;\n
    \       long curMaxIndex = 0;\n        long curMaxValue = max;\n        long curMaxIndexValue
    = 0;\n        long curMaxIndexValue2 = 0;\n        long curMaxIndexValue3 = 0;\n
    \       long curMaxIndexValue4 = 0;\n        long curMaxIndexValue5 = 0;\n        long
    curMaxIndexValue6 = 0;\n        long curMaxIndexValue7 = 0;\n        long curMaxIndexValue8
    = 0;\n        long curMaxIndexValue9 = 0;\n        long curMaxIndexValue10 = 0;\n
    \       long curMaxIndexValue11 = 0;\n        long curMaxIndexValue12 = 0;\n        long
    curMaxIndexValue13 = 0;\n        long curMaxIndexValue14 = 0;\n        long curMaxIndexValue15
    = 0;\n        long curMaxIndexValue16 = 0;\n        long curMaxIndexValue17 =
    0;\n        long curMaxIndexValue18 = 0;\n        long curMaxIndexValue19 = 0;\n
    \       long curMaxIndexValue20 = 0;\n        long curMaxIndexValue21 = 0;\n        long
    curMaxIndexValue22 = 0;\n        long curMaxIndexValue23 = 0;\n        long curMaxIndexValue24
    = 0;\n        long curMaxIndexValue25 = 0;\n        long curMaxIndexValue26 =
    0;\n        long curMaxIndexValue27 = 0;\n        long curMaxIndexValue28 = 0;\n
    \       long curMaxIndexValue29 = 0;\n        long curMaxIndexValue30 = 0;\n        long
    curMaxIndexValue31 = 0;\n        long curMaxIndexValue32 = 0;\n        long curMaxIndexValue33
    = 0;\n        long curMaxIndexValue34 = 0;\n        long curMaxIndexValue35 =
    0;\n        long curMaxIndexValue36 = 0;\n        long curMaxIndexValue37 = 0;\n
    \       long curMaxIndexValue38 = 0;\n        long curMaxIndexValue39 = 0;\n        long
    curMaxIndexValue40 = 0;\n        long curMaxIndexValue41 = 0;\n        long curMaxIndexValue42
    = 0;\n        long curMaxIndexValue43 = 0;\n        long curMaxIndexValue44 =
    0;\n        long curMaxIndexValue45 = 0;\n        long curMaxIndexValue46 = 0;\n
    \       long curMaxIndexValue47 = 0;\n        long curMaxIndexValue48 = 0;\n        long
    curMaxIndexValue49 = 0;\n        long curMaxIndexValue50 = 0;\n        long curMaxIndexValue51
    = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3esxqa52.cs(33,14): warning CS0219: The variable ''curMaxIndex'' is assigned
    but its value is never used

    /tmp/tmp3esxqa52.cs(35,14): warning CS0219: The variable ''curMaxIndexValue''
    is assigned but its value is never used

    /tmp/tmp3esxqa52.cs(36,14): warning CS0219: The variable ''curMaxIndexValue2''
    is assigned but its value is never used

    /tmp/tmp3esxqa52.cs(37,14): warning CS0219: The variable ''curMaxIndexValue3''
    is assigned but its value is never used

    /tmp/tmp3esxqa52.cs(38,14): warning CS0219: The variable ''curMaxIndexValue4''
    is assigned but its value is never used

    /tmp/tmp3esxqa52.cs(39,14): warning CS0219: The variable ''curMaxIndexValue5''
    is assigned but its value is never used

    /tmp/tmp3esxqa52.cs(40,14): warning CS0219: The variable ''curMaxIndexValue6''
    is assigned but its value is never used

    /tmp/tmp3esxqa52.cs(41,14): warning CS0219: The variable ''curMaxIndexValue7''
    is assigned but its value is never used

    /tmp/tmp3esxqa52.cs(42,14): warning CS0219: The variable ''curMaxIndexValue8''
    is assigned but its value is never used

    /tmp/tmp3esxqa52.cs(43,14): warning CS0219: The variable ''curMaxIndexValue9''
    is assigned but its value is never used

    /tmp/tmp3esxqa52.cs(44,14): warning CS0219: The variable ''curMaxIndexValue10''
    is assigned but its value is never used

    /tmp/tmp3esxqa52.cs(45,14): warning CS0219: The variable ''curMaxIndexValue11''
    is assigned but its value is never used

    /tmp/tmp3esxqa52.cs(46,14): warning CS0219: The variable ''curMaxIndexValue12''
    is assigned but its value is never used

    /tmp/tmp3esxqa52.cs(47,14): warning CS0219: The variable ''curMaxIndexValue13''
    is assigned but its value is never used

    /tmp/tmp3esxqa52.cs(48,14): warning CS0219: The variable ''curMaxIndexValue14''
    is assigned but its value is never used

    /tmp/tmp3esxqa52.cs(49,14): warning CS0219: The variable ''curMaxIndexValue15''
    is assigned but its value is never used

    /tmp/tmp3esxqa52.cs(50,14): warning CS0219: The va'
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        long sum2 = 0;\n        long sum3 = 0;\n        long sum4
    = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n        long sum7 = 0;\n
    \       long sum8 = 0;\n        long sum9 = 0;\n        long sum10 = 0;\n        long
    sum11 = 0;\n        long sum12 = 0;\n        long sum13 = 0;\n        long sum14
    = 0;\n        long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n
    \       long sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long
    sum21 = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24
    = 0;\n        long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n
    \       long sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long
    sum31 = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n        long sum34
    = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n
    \       long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n        long
    sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n        long sum44
    = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n        long sum47 = 0;\n
    \       long sum48 = 0;\n        long sum49 = 0;\n        long sum50 = 0;\n        long
    sum51 = 0;\n        long sum52 = 0;\n        long sum53 = 0;\n        long sum54
    = 0;\n        long sum55 = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n
    \       long sum58 = 0;\n        long sum59 = 0;\n        long sum60 = 0;\n        long
    sum61 = 0;\n        long sum62 = 0;\n        long sum63 = 0;\n        long sum64
    = 0;\n        long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n
    \       long sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n        long
    sum71 = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n        long sum74
    = 0;\n        long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n
    \       long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n        long
    sum81 = 0;\n        long sum82 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr8pj50ot.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpr8pj50ot.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmpr8pj50ot.cs(28,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpr8pj50ot.cs(29,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(30,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(31,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(32,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(33,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(34,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(35,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(36,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(37,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(38,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(39,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(40,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(41,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(42,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(43,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(44,14): warning CS0219: T'
  timestamp: 1659793738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > k) {\n                max = sum;\n                min = i;\n                count
    = 1;\n            } else if (sum == k) {\n                if (count > 1) {\n                    max
    = sum;\n                    min = i;\n                    count = 1;\n                }
    else {\n                    max = sum;\n                    min = i;\n                }\n
    \           } else {\n                max = Math.Max(max, sum);\n                min
    = Math.Min(min, sum);\n                count++;\n            }\n        }\n        result.Add(max);\n
    \       result.Add(min);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eff3017096e94743a90f7a4dc47d99e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eff3017096e94743a90f7a4dc47d99e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long> res
    = new List<long>();\n        foreach (long i in arr) {\n            if (i > max)
    {\n                max = i;\n            }\n        }\n        long temp = 0;\n
    \       long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long
    temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8
    = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 =
    0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 =
    0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 =
    0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 =
    0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 =
    0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 =
    0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 =
    0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 =
    0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 =
    0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 =
    0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 =
    0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 =
    0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 =
    0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 =
    0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 =
    0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 =
    0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 =
    0;\n        long temp60 = 0;\n        long temp61 = 0;\n        long temp62 =
    0;\n        long temp63 = 0;\n        long temp64 = 0;\n        long temp65 =
    0;\n        long temp66 = 0;\n        long temp67 = 0;\n        long temp68 =
    0;\n        long temp69 = 0;\n        long temp70 = 0;\n        long temp71 =
    0;\n        long temp72 = 0;\n        long temp73 = 0;\n        long temp74 =
    0;\n        long temp75 = 0;\n        long temp76 = 0;\n        long temp77 =
    0;\n        long temp78 = 0;\n        long temp79 = 0;\n        long temp80 =
    0;\n        long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaag7ozl4.cs(112,13): error CS1001: Identifier expected

    /tmp/tmpaag7ozl4.cs(112,13): error CS1002: ; expected

    '
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       List<long> result = new List<long>();\n        long max = 0;\n        long
    min = 0;\n        long max2 = 0;\n        long min2 = 0;\n        long max3 =
    0;\n        long min3 = 0;\n        long max4 = 0;\n        long min4 = 0;\n        long
    max5 = 0;\n        long min5 = 0;\n        long max6 = 0;\n        long min6 =
    0;\n        long max7 = 0;\n        long min7 = 0;\n        long max8 = 0;\n        long
    min8 = 0;\n        long max9 = 0;\n        long min9 = 0;\n        long max10
    = 0;\n        long min10 = 0;\n        long max11 = 0;\n        long min11 = 0;\n
    \       long max12 = 0;\n        long min12 = 0;\n        long max13 = 0;\n        long
    min13 = 0;\n        long max14 = 0;\n        long min14 = 0;\n        long max15
    = 0;\n        long min15 = 0;\n        long max16 = 0;\n        long min16 = 0;\n
    \       long max17 = 0;\n        long min17 = 0;\n        long max18 = 0;\n        long
    min18 = 0;\n        long max19 = 0;\n        long min19 = 0;\n        long max20
    = 0;\n        long min20 = 0;\n        long max21 = 0;\n        long min21 = 0;\n
    \       long max22 = 0;\n        long min22 = 0;\n        long max23 = 0;\n        long
    min23 = 0;\n        long max24 = 0;\n        long min24 = 0;\n        long max25
    = 0;\n        long min25 = 0;\n        long max26 = 0;\n        long min26 = 0;\n
    \       long max27 = 0;\n        long min27 = 0;\n        long max28 = 0;\n        long
    min28 = 0;\n        long max29 = 0;\n        long min29 = 0;\n        long max30
    = 0;\n        long min30 = 0;\n        long max31 = 0;\n        long min31 = 0;\n
    \       long max32 = 0;\n        long min32 = 0;\n        long max33 = 0;\n        long
    min33 = 0;\n        long max34 = 0;\n        long min34 = 0;\n        long max35
    = 0;\n        long min35 = 0;\n        long max36 = 0;\n        long min36 = 0;\n
    \       long max37 = 0;\n        long min37 = 0;\n        long max38 = 0;\n        long
    min38 = 0;\n        long max39 = 0;\n        long min39 = 0;\n        long max40
    = 0;\n        long min40 = 0;\n        long max41 = 0;\n        long min41 = 0;\n
    \       long max42 = 0;\n        long min\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaytl138p.cs(110,17): error CS1002: ; expected

    '
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long> res
    = new List<long>();\n        foreach (long i in arr) {\n            if (max <
    i) {\n                max = i;\n            }\n        }\n        if (k > max)
    {\n            k = max;\n        }\n        long cur = 0;\n        long curMax
    = 0;\n        foreach (long i in arr) {\n            if (curMax < i) {\n                curMax
    = i;\n            }\n            if (curMax < k) {\n                res.Add(cur);\n
    \               cur = i;\n                curMax = i;\n            }\n        }\n
    \       if (curMax < k) {\n            res.Add(cur);\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a09bc1d16264478a7bab39a9382a63d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a09bc1d16264478a7bab39a9382a63d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       List<long> result = new List<long>();\n        long max = arr.First();\n
    \       long maxCount = 0;\n        long maxCountIndex = 0;\n        for (int
    i = 0; i < arr.Count; i++) {\n            if (arr[i] > max) {\n                max
    = arr[i];\n                maxCount = 1;\n                maxCountIndex = i;\n
    \           } else if (arr[i] == max) {\n                maxCount++;\n            }\n
    \       }\n        if (maxCount > k) {\n            while (maxCount > k) {\n                result.Add(arr[maxCountIndex]);\n
    \               maxCount--;\n                maxCountIndex++;\n            }\n
    \       } else {\n            while (maxCount < k) {\n                result.Add(arr[maxCountIndex]);\n
    \               maxCount++;\n                maxCountIndex++;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmparlic7a7.cs(41,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmparlic7a7.cs(47,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       List<long> res = new List<long>();\n        long max = 0;\n        long
    maxIndex = 0;\n        long maxValue = arr[0];\n        for (int i = 0; i < arr.Count;
    i++) {\n            if (arr[i] > maxValue) {\n                maxValue = arr[i];\n
    \               maxIndex = i;\n            }\n        }\n        if (maxValue
    > k) maxValue = k;\n        long start = 0;\n        long end = arr.Count - 1;\n
    \       while (start <= end) {\n            long mid = (start + end) / 2;\n            if
    (arr[mid] > maxValue) {\n                end = mid - 1;\n            } else {\n
    \               start = mid + 1;\n            }\n        }\n        long maxIndex
    = start;\n        long maxValue = arr[start];\n        for (int i = start; i <
    arr.Count; i++) {\n            if (arr[i] > maxValue) {\n                maxValue
    = arr[i];\n                maxIndex = i;\n            }\n        }\n        res.Add(maxValue);\n
    \       res.Add(arr[maxIndex]);\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdhtcvdva.cs(41,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpdhtcvdva.cs(47,14): error CS0128: A local variable or function named ''maxIndex''
    is already defined in this scope

    /tmp/tmpdhtcvdva.cs(48,14): error CS0128: A local variable or function named ''maxValue''
    is already defined in this scope

    /tmp/tmpdhtcvdva.cs(48,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpdhtcvdva.cs(49,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpdhtcvdva.cs(56,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpdhtcvdva.cs(27,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 1000;\n        long sum = 0;\n        foreach
    (long i in arr) {\n            sum += i;\n            if (sum > max) {\n                max
    = sum;\n            }\n            if (sum < min) {\n                min = sum;\n
    \           }\n        }\n        long mid = min + (max - min) / 2;\n        long
    mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n
    \       long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7
    = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long
    mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11
    / 2;\n        long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long
    mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16
    / 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long
    mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21
    / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n        long
    mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27 = mid26
    / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long
    mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31
    / 2;\n        long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long
    mid35 = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36
    / 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n        long
    mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42 = mid41
    / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 / 2;\n        long
    mid45 = mid44 / 2;\n        long mid46 = mid45\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr7pf87na.cs(83,27): error CS1002: ; expected

    '
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        if (arr.Count > k) {\n            k = arr.Count;\n
    \       }\n        long max = 0;\n        for (int i = 0; i < k; i++) {\n            if
    (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        result.Add(max);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp37zig22r.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       Array.Sort(arr);\n        long max = 0;\n        long maxIndex = 0;\n
    \       long maxValue = 0;\n        long maxValueIndex = 0;\n        long maxValueIndex2
    = 0;\n        long maxValueIndex3 = 0;\n        long maxValueIndex4 = 0;\n        long
    maxValueIndex5 = 0;\n        long maxValueIndex6 = 0;\n        long maxValueIndex7
    = 0;\n        long maxValueIndex8 = 0;\n        long maxValueIndex9 = 0;\n        long
    maxValueIndex10 = 0;\n        long maxValueIndex11 = 0;\n        long maxValueIndex12
    = 0;\n        long maxValueIndex13 = 0;\n        long maxValueIndex14 = 0;\n        long
    maxValueIndex15 = 0;\n        long maxValueIndex16 = 0;\n        long maxValueIndex17
    = 0;\n        long maxValueIndex18 = 0;\n        long maxValueIndex19 = 0;\n        long
    maxValueIndex20 = 0;\n        long maxValueIndex21 = 0;\n        long maxValueIndex22
    = 0;\n        long maxValueIndex23 = 0;\n        long maxValueIndex24 = 0;\n        long
    maxValueIndex25 = 0;\n        long maxValueIndex26 = 0;\n        long maxValueIndex27
    = 0;\n        long maxValueIndex28 = 0;\n        long maxValueIndex29 = 0;\n        long
    maxValueIndex30 = 0;\n        long maxValueIndex31 = 0;\n        long maxValueIndex32
    = 0;\n        long maxValueIndex33 = 0;\n        long maxValueIndex34 = 0;\n        long
    maxValueIndex35 = 0;\n        long maxValueIndex36 = 0;\n        long maxValueIndex37
    = 0;\n        long maxValueIndex38 = 0;\n        long maxValueIndex39 = 0;\n        long
    maxValueIndex40 = 0;\n        long maxValueIndex41 = 0;\n        long maxValueIndex42
    = 0;\n        long maxValueIndex43 = 0;\n        long maxValueIndex44 = 0;\n        long
    maxValueIndex45 = 0;\n        long maxValueIndex46 = 0;\n        long maxValueIndex47
    = 0;\n        long maxValueIndex48 = 0;\n        long maxValueIndex49 = 0;\n        long
    maxValueIndex50 = 0;\n        long maxValueIndex51 = 0;\n        long maxValueIndex52
    = 0;\n        long maxValueIndex53 = 0;\n        long maxValueIndex54 = 0;\n        long
    maxValueIndex55 = 0;\n        long maxValueIndex56 = 0;\n        long maxValueIndex57
    = 0;\n        long maxValueIndex58 = 0;\n        long maxValueIndex59 = 0;\n        long
    maxValueIndex60 = 0;\n        long max\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp81gww3w8.cs(90,17): error CS1002: ; expected

    '
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxValue = 0;\n        long minValue = 0;\n        long
    maxValueIndex = 0;\n        long minValueIndex = 0;\n        long maxValueValue
    = 0;\n        long minValueValue = 0;\n        long maxValueValueIndex = 0;\n
    \       long minValueValueIndex = 0;\n        long maxValueValueValue = 0;\n        long
    minValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueIndex = 0;\n        long maxValueValueValueValue = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    minValueValueValueValue = 0;\n        long maxValueValueValueIndex = 0;\n        long
    min\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqhml_mjv.cs(85,17): error CS1002: ; expected

    '
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count < k) {\n            return
    arr;\n        }\n        List<long> result = new List<long>();\n        long max
    = 0;\n        long min = arr.Min();\n        long mid = 0;\n        long midMax
    = 0;\n        long midMin = 0;\n        long midMax2 = 0;\n        long midMin2
    = 0;\n        long midMax3 = 0;\n        long midMin3 = 0;\n        long midMax4
    = 0;\n        long midMin4 = 0;\n        long midMax5 = 0;\n        long midMin5
    = 0;\n        long midMax6 = 0;\n        long midMin6 = 0;\n        long midMax7
    = 0;\n        long midMin7 = 0;\n        long midMax8 = 0;\n        long midMin8
    = 0;\n        long midMax9 = 0;\n        long midMin9 = 0;\n        long midMax10
    = 0;\n        long midMin10 = 0;\n        long midMax11 = 0;\n        long midMin11
    = 0;\n        long midMax12 = 0;\n        long midMin12 = 0;\n        long midMax13
    = 0;\n        long midMin13 = 0;\n        long midMax14 = 0;\n        long midMin14
    = 0;\n        long midMax15 = 0;\n        long midMin15 = 0;\n        long midMax16
    = 0;\n        long midMin16 = 0;\n        long midMax17 = 0;\n        long midMin17
    = 0;\n        long midMax18 = 0;\n        long midMin18 = 0;\n        long midMax19
    = 0;\n        long midMin19 = 0;\n        long midMax20 = 0;\n        long midMin20
    = 0;\n        long midMax21 = 0;\n        long midMin21 = 0;\n        long midMax22
    = 0;\n        long midMin22 = 0;\n        long midMax23 = 0;\n        long midMin23
    = 0;\n        long midMax24 = 0;\n        long midMin24 = 0;\n        long midMax25
    = 0;\n        long midMin25 = 0;\n        long midMax26 = 0;\n        long midMin26
    = 0;\n        long midMax27 = 0;\n        long midMin27 = 0;\n        long midMax28
    = 0;\n        long midMin28 = 0;\n        long midMax29 = 0;\n        long midMin29
    = 0;\n        long midMax30 = 0;\n        long midMin30 = 0;\n        long midMax31
    = 0;\n        long midMin31 = 0;\n        long midMax32 = 0;\n        long midMin32
    = 0;\n        long midMax33 = 0;\n        long midMin33 = 0;\n        long midMax34
    = 0;\n        long midMin34 = 0;\n        long midMax35 = 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp25pkex29.cs(29,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmp25pkex29.cs(31,14): warning CS0219: The variable ''mid'' is assigned but
    its value is never used

    /tmp/tmp25pkex29.cs(32,14): warning CS0219: The variable ''midMax'' is assigned
    but its value is never used

    /tmp/tmp25pkex29.cs(33,14): warning CS0219: The variable ''midMin'' is assigned
    but its value is never used

    /tmp/tmp25pkex29.cs(34,14): warning CS0219: The variable ''midMax2'' is assigned
    but its value is never used

    /tmp/tmp25pkex29.cs(35,14): warning CS0219: The variable ''midMin2'' is assigned
    but its value is never used

    /tmp/tmp25pkex29.cs(36,14): warning CS0219: The variable ''midMax3'' is assigned
    but its value is never used

    /tmp/tmp25pkex29.cs(37,14): warning CS0219: The variable ''midMin3'' is assigned
    but its value is never used

    /tmp/tmp25pkex29.cs(38,14): warning CS0219: The variable ''midMax4'' is assigned
    but its value is never used

    /tmp/tmp25pkex29.cs(39,14): warning CS0219: The variable ''midMin4'' is assigned
    but its value is never used

    /tmp/tmp25pkex29.cs(40,14): warning CS0219: The variable ''midMax5'' is assigned
    but its value is never used

    /tmp/tmp25pkex29.cs(41,14): warning CS0219: The variable ''midMin5'' is assigned
    but its value is never used

    /tmp/tmp25pkex29.cs(42,14): warning CS0219: The variable ''midMax6'' is assigned
    but its value is never used

    /tmp/tmp25pkex29.cs(43,14): warning CS0219: The variable ''midMin6'' is assigned
    but its value is never used

    /tmp/tmp25pkex29.cs(44,14): warning CS0219: The variable ''midMax7'' is assigned
    but its value is never used

    /tmp/tmp25pkex29.cs(45,14): warning CS0219: The variable ''midMin7'' is assigned
    but its value is never used

    /tmp/tmp25pkex29.cs(46,14): warning CS0219: The variable ''midMax8'' is assigned
    but its value is never used

    /tmp/tmp25pkex29.cs(47,14): warning CS0219: The variable ''midMin8'' is assigned
    but its value is never used

    /tmp/'
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        foreach (long i in arr)
    {\n            if (max < i) {\n                max = i;\n                cur =
    i;\n            }\n            if (cur > k) {\n                break;\n            }\n
    \           result.Add(cur);\n            cur++;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e175c35a400b445594d7a563453902bf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e175c35a400b445594d7a563453902bf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        foreach
    (long i in arr) {\n            sum += i;\n            if (sum > max) {\n                max
    = sum;\n            }\n            if (sum < min) {\n                min = sum;\n
    \           }\n        }\n        if (k > max) {\n            k = max;\n        }\n
    \       if (k < min) {\n            k = min;\n        }\n        long temp = 0;\n
    \       long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long
    temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8
    = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 =
    0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 =
    0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 =
    0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 =
    0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 =
    0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 =
    0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 =
    0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 =
    0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 =
    0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 =
    0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 =
    0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 =
    0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 =
    0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 =
    0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 =
    0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 =
    0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 =
    0;\n        long temp60 = 0;\n        long temp61 = 0;\n        long temp62 =
    0;\n        long temp63 = 0;\n        long temp64 = 0;\n        long temp65 =
    0;\n        long temp66 = 0;\n        long temp67 = 0;\n        long temp68 =
    0;\n        long temp69 = 0;\n        long temp70 = 0;\n        long temp71 =
    0;\n        long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf43yziqw.cs(115,13): error CS1001: Identifier expected

    /tmp/tmpf43yziqw.cs(115,13): error CS1002: ; expected

    '
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    maxSum = 0;\n        long minSum = 0;\n        long sumOfSquares = 0;\n        long
    maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n        long maxSumOfSquares
    = 0;\n        long minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n        long
    minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n        long minSumOfSquares
    = 0;\n        long maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n        long
    maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n        long maxSumOfSquares
    = 0;\n        long minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n        long
    minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n        long minSumOfSquares
    = 0;\n        long maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n        long
    maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n        long maxSumOfSquares
    = 0;\n        long minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n        long
    minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n        long minSumOfSquares
    = 0;\n        long maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n        long
    maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n        long maxSumOfSquares
    = 0;\n        long minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n        long
    minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n        long minSumOfSquares
    = 0;\n        long maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n        long
    maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n        long maxSumOfSquares
    = 0;\n        long minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n        long
    minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n        long minSumOfSquares
    = 0;\n        long maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n        long
    maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n        long maxSumOfSquares
    = 0;\n        long minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n        long
    minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n        long minSumOfSquares
    = 0;\n        long maxSum\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj42xuzdy.cs(90,20): error CS1002: ; expected

    '
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        foreach
    (long i in arr) {\n            sum += i;\n            if (sum > max) {\n                max
    = sum;\n            }\n            if (sum < min) {\n                min = sum;\n
    \           }\n        }\n        if (k > max) {\n            k = max;\n        }\n
    \       if (k < min) {\n            k = min;\n        }\n        long mid = max
    / 2;\n        long mid2 = min / 2;\n        long mid3 = mid / 2;\n        long
    mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n
    \       long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9
    = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n
    \       long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long
    mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15
    / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n        long
    mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21 = mid20
    / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long
    mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25
    / 2;\n        long mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long
    mid29 = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30
    / 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long
    mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35
    / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n        long
    mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41 = mid40
    / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long
    mid44 = mid4\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphza0xqu5.cs(87,26): error CS1002: ; expected

    '
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > k) {\n                max = i;\n                count++;\n            }
    else if (sum < k) {\n                min = i;\n                count++;\n            }\n
    \       }\n        if (count > k) {\n            max = sum;\n        }\n        if
    (count < k) {\n            min = sum;\n        }\n        if (count > k) {\n            max
    = arr.Max();\n        }\n        if (count < k) {\n            min = arr.Min();\n
    \       }\n        result.Add(max);\n        result.Add(min);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f369800873494a6f8fcdf829cf7c421d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f369800873494a6f8fcdf829cf7c421d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxCount = 0;\n        long minCount = 0;\n        long
    maxCountIndex = 0;\n        long minCountIndex = 0;\n        long maxCountCount
    = 0;\n        long minCountCount = 0;\n        long maxCountCountIndex = 0;\n
    \       long minCountCountIndex = 0;\n        long maxCountMinCount = 0;\n        long
    minCountMinCount = 0;\n        long maxCountMinCountIndex = 0;\n        long minCountMinCountIndex
    = 0;\n        long maxCountMaxCount = 0;\n        long minCountMaxCount = 0;\n
    \       long maxCountMaxCountIndex = 0;\n        long minCountMaxCountIndex =
    0;\n        long maxCountMinMinCount = 0;\n        long minCountMinMinCount =
    0;\n        long maxCountMinMinCountIndex = 0;\n        long minCountMinMinCountIndex
    = 0;\n        long maxCountMaxMinCount = 0;\n        long minCountMaxMinCount
    = 0;\n        long maxCountMaxMinCountIndex = 0;\n        long minCountMaxMinCountIndex
    = 0;\n        long maxCountMaxMinMinCount = 0;\n        long minCountMaxMinMinCountIndex
    = 0;\n        long maxCountMaxMinMinCountIndex = 0;\n        long minCountMaxMinMinCountIndex
    = 0;\n        long maxCountMaxMinMinCountIndex = 0;\n        long minCountMaxMinMinCountIndex
    = 0;\n        long maxCountMaxMinMinCountIndex = 0;\n        long minCountMaxMinMinCountIndex
    = 0;\n        long maxCountMaxMinMinCountIndex = 0;\n        long minCountMaxMinMinCountIndex
    = 0;\n        long maxCountMaxMinMinCountIndex = 0;\n        long minCountMaxMinMinCountIndex
    = 0;\n        long maxCountMaxMinMinCountIndex = 0;\n        long minCountMaxMinMinCountIndex
    = 0;\n        long maxCountMaxMinMinCountIndex = 0;\n        long minCountMaxMinMinCountIndex
    = 0;\n        long maxCountMaxMinMinCountIndex = 0;\n        long minCountMaxMinMinCountIndex
    = 0;\n        long maxCountMaxMinMinCountIndex = 0;\n        long minCountMaxMinMinCountIndex
    = 0;\n        long maxCountMaxMinMinCountIndex = 0;\n        long minCountMaxMinMinCountIndex
    = 0;\n        long maxCountMaxMinMinCountIndex = 0;\n        long minCountMaxMinMinCountIndex
    = 0;\n        long maxCountMaxMinMinCountIndex = 0;\n        long minCountMaxMin\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz2dosj8c.cs(79,28): error CS1002: ; expected

    '
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > k) {\n                max = sum;\n                min = i;\n                count
    = 1;\n            } else if (sum == k) {\n                if (i > k) {\n                    max
    = i;\n                    min = sum;\n                    count = 1;\n                }
    else {\n                    max = sum;\n                    min = i;\n                    count
    = 1;\n                }\n            } else {\n                if (sum < k) {\n
    \                   max = sum;\n                    min = i;\n                    count
    = 1;\n                } else {\n                    max = sum;\n                    min
    = i;\n                    count = 1;\n                }\n            }\n            sum
    -= max;\n            sum -= min;\n        }\n        long maxSum = sum;\n        long
    maxCount = count;\n        foreach (long i in arr) {\n            sum += i;\n
    \           if (sum > k) {\n                max = sum;\n                min =
    i;\n                count = 1;\n            } else if (sum == k) {\n                if
    (i > k) {\n                    max = i;\n                    min = sum;\n                    count
    = 1;\n                } else {\n                    max = sum;\n                    min
    = i;\n                    count = 1;\n                }\n            } else {\n
    \               if (sum < k) {\n                    max = sum;\n                    min
    = i;\n                    count = 1;\n                } else {\n                    max
    = sum;\n                    min = i;\n                    count = 1;\n                }\n
    \           }\n            sum -= max;\n            sum -= min;\n            if
    (sum > maxSum) {\n                maxSum = sum;\n                maxCount = count;\n
    \           }\n        }\n        result.Add(max);\n        result.Add(maxCount);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1fb816a2586145bf8700cd709a490e10>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1fb816a2586145bf8700cd709a490e10>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = arr[0];\n        List<long>
    result = new List<long>();\n        foreach (long i in arr) {\n            if
    (i > max) {\n                max = i;\n            }\n        }\n        long
    cur = max;\n        long curMax = max;\n        long curMaxIndex = 0;\n        long
    curMaxIndex2 = 0;\n        long curMaxIndex3 = 0;\n        long curMaxIndex4 =
    0;\n        long curMaxIndex5 = 0;\n        long curMaxIndex6 = 0;\n        long
    curMaxIndex7 = 0;\n        long curMaxIndex8 = 0;\n        long curMaxIndex9 =
    0;\n        long curMaxIndex10 = 0;\n        long curMaxIndex11 = 0;\n        long
    curMaxIndex12 = 0;\n        long curMaxIndex13 = 0;\n        long curMaxIndex14
    = 0;\n        long curMaxIndex15 = 0;\n        long curMaxIndex16 = 0;\n        long
    curMaxIndex17 = 0;\n        long curMaxIndex18 = 0;\n        long curMaxIndex19
    = 0;\n        long curMaxIndex20 = 0;\n        long curMaxIndex21 = 0;\n        long
    curMaxIndex22 = 0;\n        long curMaxIndex23 = 0;\n        long curMaxIndex24
    = 0;\n        long curMaxIndex25 = 0;\n        long curMaxIndex26 = 0;\n        long
    curMaxIndex27 = 0;\n        long curMaxIndex28 = 0;\n        long curMaxIndex29
    = 0;\n        long curMaxIndex30 = 0;\n        long curMaxIndex31 = 0;\n        long
    curMaxIndex32 = 0;\n        long curMaxIndex33 = 0;\n        long curMaxIndex34
    = 0;\n        long curMaxIndex35 = 0;\n        long curMaxIndex36 = 0;\n        long
    curMaxIndex37 = 0;\n        long curMaxIndex38 = 0;\n        long curMaxIndex39
    = 0;\n        long curMaxIndex40 = 0;\n        long curMaxIndex41 = 0;\n        long
    curMaxIndex42 = 0;\n        long curMaxIndex43 = 0;\n        long curMaxIndex44
    = 0;\n        long curMaxIndex45 = 0;\n        long curMaxIndex46 = 0;\n        long
    curMaxIndex47 = 0;\n        long curMaxIndex48 = 0;\n        long curMaxIndex49
    = 0;\n        long curMaxIndex50 = 0;\n        long curMaxIndex51 = 0;\n        long
    curMaxIndex52 = 0;\n        long curMaxIndex53 = 0;\n        long curMaxIndex54
    = 0;\n        long curMaxIndex55 = 0;\n        long curMaxIndex56 = 0;\n        long
    curMaxIndex57 = 0;\n        long curMaxIndex58 = 0;\n        long \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyceikaq_.cs(92,13): error CS1001: Identifier expected

    /tmp/tmpyceikaq_.cs(92,13): error CS1002: ; expected

    '
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long> result
    = new List<long>();\n        foreach (long i in arr) {\n            if (i > max)
    {\n                max = i;\n            }\n        }\n        long cur = 0;\n
    \       long max2 = max;\n        long max3 = max;\n        long max4 = max;\n
    \       long max5 = max;\n        long max6 = max;\n        long max7 = max;\n
    \       long max8 = max;\n        long max9 = max;\n        long max10 = max;\n
    \       long max11 = max;\n        long max12 = max;\n        long max13 = max;\n
    \       long max14 = max;\n        long max15 = max;\n        long max16 = max;\n
    \       long max17 = max;\n        long max18 = max;\n        long max19 = max;\n
    \       long max20 = max;\n        long max21 = max;\n        long max22 = max;\n
    \       long max23 = max;\n        long max24 = max;\n        long max25 = max;\n
    \       long max26 = max;\n        long max27 = max;\n        long max28 = max;\n
    \       long max29 = max;\n        long max30 = max;\n        long max31 = max;\n
    \       long max32 = max;\n        long max33 = max;\n        long max34 = max;\n
    \       long max35 = max;\n        long max36 = max;\n        long max37 = max;\n
    \       long max38 = max;\n        long max39 = max;\n        long max40 = max;\n
    \       long max41 = max;\n        long max42 = max;\n        long max43 = max;\n
    \       long max44 = max;\n        long max45 = max;\n        long max46 = max;\n
    \       long max47 = max;\n        long max48 = max;\n        long max49 = max;\n
    \       long max50 = max;\n        long max51 = max;\n        long max52 = max;\n
    \       long max53 = max;\n        long max54 = max;\n        long max55 = max;\n
    \       long max56 = max;\n        long max57 = max;\n        long max58 = max;\n
    \       long max59 = max;\n        long max60 = max;\n        long max61 = max;\n
    \       long max\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmsdu8o9p.cs(93,17): error CS1002: ; expected

    '
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        long max = 0;\n        long maxIndex = 0;\n
    \       long maxValue = arr[0];\n        long maxValueIndex = -1;\n        for
    (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n                maxValue
    = arr[i];\n                maxIndex = i;\n            }\n        }\n        result.Add(maxValue);\n
    \       if (k > maxIndex) {\n            k = maxIndex;\n        }\n        if
    (k > 0) {\n            for (int i = maxIndex + 1; i < arr.Count; i++) {\n                if
    (arr[i] > maxValue) {\n                    maxValue = arr[i];\n                    maxValueIndex
    = i;\n                }\n            }\n            result.Add(maxValue);\n            if
    (k > maxValueIndex) {\n                k = maxValueIndex;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt_gbhd8h.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpt_gbhd8h.cs(42,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpt_gbhd8h.cs(27,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        long max = 0;\n        long temp = 0;\n        long
    temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5
    = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n
    \       long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n
    \       long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n
    \       long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n
    \       long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n
    \       long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n
    \       long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n
    \       long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n
    \       long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n
    \       long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n
    \       long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n
    \       long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n
    \       long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n
    \       long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n
    \       long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n
    \       long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n
    \       long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n
    \       long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n
    \       long temp60 = 0;\n        long temp61 = 0;\n        long temp62 = 0;\n
    \       long temp63 = 0;\n        long temp64 = 0;\n        long temp65 = 0;\n
    \       long temp66 = 0;\n        long temp67 = 0;\n        long temp68 = 0;\n
    \       long temp69 = 0;\n        long temp70 = 0;\n        long temp71 = 0;\n
    \       long temp72 = 0;\n        long temp73 = 0;\n        long temp74 = 0;\n
    \       long temp75 = 0;\n        long temp76 = 0;\n        long temp77 = 0;\n
    \       long temp78 = 0;\n        long temp79 = 0;\n        long temp80 = 0;\n
    \       long temp81 = 0;\n        long temp82 = 0;\n        long temp\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfw0fk7w1.cs(110,18): error CS1002: ; expected

    '
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        long max = 0;\n        long maxIndex = 0;\n
    \       long maxValue = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] > maxValue) {\n                max = arr[i];\n                maxIndex
    = i;\n                maxValue = max;\n            }\n        }\n        result.Add(max);\n
    \       if (result.Count > k) {\n            List<long> newResult = new List<long>();\n
    \           for (int i = 0; i < k; i++) {\n                newResult.Add(result[i]);\n
    \           }\n            return newResult;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfd6d3cq_.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > max) {\n                max = sum;\n            }\n            if (sum
    < min) {\n                min = sum;\n            }\n            count++;\n        }\n
    \       long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long
    mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n
    \       long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8
    = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long
    mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long mid13 = mid12
    / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long
    mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17
    / 2;\n        long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long
    mid21 = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22
    / 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n        long
    mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28 = mid27
    / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long
    mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32
    / 2;\n        long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long
    mid36 = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37
    / 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long
    mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42
    / 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdljw2px5.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxValue = arr[0];\n        long minValue = arr[0];\n
    \       foreach (long i in arr) {\n            if (i > maxValue) {\n                maxValue
    = i;\n                maxIndex = i;\n            }\n            if (i < minValue)
    {\n                minValue = i;\n                minIndex = i;\n            }\n
    \           if (i == maxValue) {\n                max = maxIndex;\n                maxIndex
    = i;\n            }\n            if (i == minValue) {\n                min = minIndex;\n
    \               minIndex = i;\n            }\n        }\n        long mid = maxIndex
    - minIndex;\n        if (k > mid) {\n            k = mid + 1;\n        }\n        if
    (k == mid) {\n            result.Add(maxIndex);\n            result.Add(minIndex);\n
    \       }\n        if (k > mid) {\n            k = mid + 1;\n        }\n        if
    (k == mid) {\n            result.Add(maxIndex);\n        }\n        if (k > mid)
    {\n            k = mid + 1;\n        }\n        if (k == mid) {\n            result.Add(minIndex);\n
    \       }\n        if (k > mid) {\n            k = mid + 1;\n        }\n        if
    (k == mid) {\n            result.Add(minIndex);\n        }\n        if (k > mid)
    {\n            k = mid + 1;\n        }\n        if (k == mid) {\n            result.Add(maxIndex);\n
    \           result.Add(minIndex);\n        }\n        if (k > mid) {\n            k
    = mid + 1;\n        }\n        if (k == mid) {\n            result.Add(maxIndex);\n
    \       }\n        if (k > mid) {\n            k = mid + 1;\n        }\n        if
    (k == mid) {\n            result.Add(minIndex);\n        }\n        if (k > mid)
    {\n            k = mid + 1;\n        }\n        if (k == mid) {\n            result.Add(minIndex);\n
    \       }\n        if (k > mid) {\n            k = mid + 1;\n        }\n        if
    (k == mid) {\n            result.Add(maxIndex);\n            result.Add(minIndex);\n
    \       }\n        if (k > mid) {\n            k = mid + 1;\n        }\n        if
    (k == mid) {\n            result.Add(maxIndex);\n        }\n        if (k > mid)
    {\n            k = mid + 1;\n        }\n        if (k == mid) {\n            result.Add(minIndex);\n
    \       }\n        if (k > mid) {\n            k = mid + 1;\n        }\n        if
    (k == mid) {\n            result.Add(minIndex);\n        }\n        if (k > mid)
    {\n            k = mid + 1;\n        }\n        if (k == mid) {\n            result.Add(maxIndex);\n
    \           result.Add(minIndex);\n        }\n        if (k > mid) {\n            k
    = \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzi70vkww.cs(134,16): error CS1525: Invalid expression term ''}''

    /tmp/tmpzi70vkww.cs(134,16): error CS1002: ; expected

    /tmp/tmpzi70vkww.cs(136,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpzi70vkww.cs(150,2): error CS1513: } expected

    '
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long> result
    = new List<long>();\n        foreach (long i in arr) {\n            if (max <
    i) {\n                max = i;\n            }\n        }\n        if (max < k)
    {\n            max = k;\n        }\n        long start = 0;\n        long end
    = arr.Count - 1;\n        while (start < end) {\n            long mid = (start
    + end) / 2;\n            if (arr[mid] > max) {\n                end = mid - 1;\n
    \           } else {\n                start = mid + 1;\n            }\n        }\n
    \       long mid = start;\n        while (arr[mid] < k) {\n            mid +=
    1;\n        }\n        result.AddRange(arr.GetRange(start, mid - start + 1));\n
    \       result.AddRange(arr.GetRange(mid + 1, end));\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkc9dvra4.cs(38,18): error CS0136: A local or parameter named ''mid'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpkc9dvra4.cs(39,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpkc9dvra4.cs(46,20): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpkc9dvra4.cs(49,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpkc9dvra4.cs(49,45): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpkc9dvra4.cs(50,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpkc9dvra4.cs(50,47): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            count++;\n
    \           if (sum > max) {\n                max = sum;\n            }\n            if
    (sum < min) {\n                min = sum;\n            }\n        }\n        if
    (count > k) {\n            k = count;\n        }\n        if (k == 0) {\n            result.Add(max);\n
    \           return result;\n        }\n        long mid = min + (k - 1) / 2;\n
    \       long midSum = sum / k;\n        long midMax = max / k;\n        long midMin
    = min / k;\n        List<long> left = new List<long>();\n        List<long> right
    = new List<long>();\n        long leftSum = 0;\n        long rightSum = 0;\n        long
    leftCount = 0;\n        long rightCount = 0;\n        foreach (long i in arr)
    {\n            leftSum += i;\n            leftCount++;\n            if (leftSum
    > midMax) {\n                left.Add(i);\n            }\n            if (leftSum
    < midMin) {\n                left.Add(i);\n            }\n        }\n        foreach
    (long i in arr) {\n            rightSum += i;\n            rightCount++;\n            if
    (rightSum > midMax) {\n                right.Add(i);\n            }\n            if
    (rightSum < midMin) {\n                right.Add(i);\n            }\n        }\n
    \       left.Sort();\n        right.Sort();\n        List<long> leftResult = Maximum(left,
    k);\n        List<long> rightResult = Maximum(right, k);\n        List<long> result
    = new List<long>();\n        result.AddRange(leftResult);\n        result.AddRange(rightResult);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe724mu54.cs(81,20): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    '
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxValue = 0;\n        long minValue = 0;\n        long
    maxIndex2 = 0;\n        long minIndex2 = 0;\n        long maxValue2 = 0;\n        long
    minValue2 = 0;\n        long maxIndex3 = 0;\n        long minIndex3 = 0;\n        long
    maxValue3 = 0;\n        long minValue3 = 0;\n        long maxIndex4 = 0;\n        long
    minIndex4 = 0;\n        long maxValue4 = 0;\n        long minValue4 = 0;\n        long
    maxIndex5 = 0;\n        long minIndex5 = 0;\n        long maxValue5 = 0;\n        long
    minValue5 = 0;\n        long maxIndex6 = 0;\n        long minIndex6 = 0;\n        long
    maxValue6 = 0;\n        long minValue6 = 0;\n        long maxIndex7 = 0;\n        long
    minIndex7 = 0;\n        long maxValue7 = 0;\n        long minValue7 = 0;\n        long
    maxIndex8 = 0;\n        long minIndex8 = 0;\n        long maxValue8 = 0;\n        long
    minValue8 = 0;\n        long maxIndex9 = 0;\n        long minIndex9 = 0;\n        long
    maxValue9 = 0;\n        long minValue9 = 0;\n        long maxIndex10 = 0;\n        long
    minIndex10 = 0;\n        long maxValue10 = 0;\n        long minValue10 = 0;\n
    \       long maxIndex11 = 0;\n        long minIndex11 = 0;\n        long maxValue11
    = 0;\n        long minValue11 = 0;\n        long maxIndex12 = 0;\n        long
    minIndex12 = 0;\n        long maxValue12 = 0;\n        long minValue12 = 0;\n
    \       long maxIndex13 = 0;\n        long minIndex13 = 0;\n        long maxValue13
    = 0;\n        long minValue13 = 0;\n        long maxIndex14 = 0;\n        long
    minIndex14 = 0;\n        long maxValue14 = 0;\n        long minValue14 = 0;\n
    \       long maxIndex15 = 0;\n        long minIndex15 = 0;\n        long maxValue15
    = 0;\n        long minValue15 = 0;\n        long maxIndex16 = 0;\n        long
    minIndex16 = 0;\n        long maxValue16 = 0;\n        long minValue16 = 0;\n
    \       long maxIndex17 = 0;\n        long minIndex17 = 0;\n        long maxValue17
    = 0;\n        long minValue17 = 0;\n        long maxIndex18 = 0;\n        long
    minIndex18 = 0;\n        long maxValue18 = 0;\n        long minValue18 = 0;\n
    \       long maxIndex19 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnf934l_q.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpnf934l_q.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmpnf934l_q.cs(28,14): warning CS0219: The variable ''maxIndex'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(29,14): warning CS0219: The variable ''minIndex'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(30,14): warning CS0219: The variable ''maxValue'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(31,14): warning CS0219: The variable ''minValue'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(32,14): warning CS0219: The variable ''maxIndex2'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(33,14): warning CS0219: The variable ''minIndex2'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(34,14): warning CS0219: The variable ''maxValue2'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(35,14): warning CS0219: The variable ''minValue2'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(36,14): warning CS0219: The variable ''maxIndex3'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(37,14): warning CS0219: The variable ''minIndex3'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(38,14): warning CS0219: The variable ''maxValue3'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(39,14): warning CS0219: The variable ''minValue3'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(40,14): warning CS0219: The variable ''maxIndex4'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(41,14): warning CS0219: The variable ''minIndex4'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(42,14): warning CS0219: The variable ''maxValue4'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(43,14): warning CS0219: The variable ''minValue4'' is assigned
    but'
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        if (arr.Count > k) {\n            k = arr.Count;\n
    \       }\n        for (int i = 0; i < k; i++) {\n            result.Add(arr[i]);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdexl_9ne.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        foreach
    (long i in arr) {\n            sum += i;\n            if (sum > max) {\n                max
    = sum;\n            }\n            if (sum < min) {\n                min = sum;\n
    \           }\n        }\n        long mid = min + (max - min) / 2;\n        long
    mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n
    \       long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7
    = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long
    mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11
    / 2;\n        long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long
    mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16
    / 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long
    mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21
    / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n        long
    mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27 = mid26
    / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long
    mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31
    / 2;\n        long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long
    mid35 = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36
    / 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n        long
    mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42 = mid41
    / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 / 2;\n        long
    mid45 = mid44 / 2;\n        long mid46 = mid45 / \n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphwndxasa.cs(83,29): error CS1525: Invalid expression term ''}''

    /tmp/tmphwndxasa.cs(83,29): error CS1002: ; expected

    '
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = arr[0];\n        List<long>
    result = new List<long>();\n        foreach (long i in arr) {\n            if
    (i > max) {\n                max = i;\n            }\n        }\n        if (k
    == max) {\n            return arr;\n        }\n        long mid = max / 2;\n        List<long>
    left = Maximum(arr.Where(i => i <= mid), k - 1);\n        List<long> right = Maximum(arr.Where(i
    => i >= mid), k - 1);\n        List<long> result = left.Concat(right).ToList();\n
    \       if (result.Count > k) {\n            List<long> temp = result.Take(k).ToList();\n
    \           temp.AddRange(result.Skip(k));\n            return temp;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphyqzh7df.cs(36,35): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmphyqzh7df.cs(37,36): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmphyqzh7df.cs(38,20): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    /tmp/tmphyqzh7df.cs(40,43): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmphyqzh7df.cs(41,39): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = arr[0];\n        List<long>
    result = new List<long>();\n        foreach (long i in arr) {\n            if
    (i > max) {\n                max = i;\n            }\n        }\n        long
    start = 0;\n        long end = arr.Count - 1;\n        while (start <= end) {\n
    \           long mid = (start + end) / 2;\n            if (arr[mid] > max) {\n
    \               end = mid - 1;\n            } else {\n                start =
    mid + 1;\n            }\n        }\n        result.AddRange(arr.Skip(start).Take(end
    - start + 1));\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphu7l_x11.cs(36,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmphu7l_x11.cs(42,34): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxVal = 0;\n        long minVal = 0;\n        long
    maxIndex2 = 0;\n        long minIndex2 = 0;\n        long maxVal2 = 0;\n        long
    minVal2 = 0;\n        long maxIndex3 = 0;\n        long minIndex3 = 0;\n        long
    maxVal3 = 0;\n        long minVal3 = 0;\n        long maxIndex4 = 0;\n        long
    minIndex4 = 0;\n        long maxVal4 = 0;\n        long minVal4 = 0;\n        long
    maxIndex5 = 0;\n        long minIndex5 = 0;\n        long maxVal5 = 0;\n        long
    minVal5 = 0;\n        long maxIndex6 = 0;\n        long minIndex6 = 0;\n        long
    maxVal6 = 0;\n        long minVal6 = 0;\n        long maxIndex7 = 0;\n        long
    minIndex7 = 0;\n        long maxVal7 = 0;\n        long minVal7 = 0;\n        long
    maxIndex8 = 0;\n        long minIndex8 = 0;\n        long maxVal8 = 0;\n        long
    minVal8 = 0;\n        long maxIndex9 = 0;\n        long minIndex9 = 0;\n        long
    maxVal9 = 0;\n        long minVal9 = 0;\n        long maxIndex10 = 0;\n        long
    minIndex10 = 0;\n        long maxVal10 = 0;\n        long minVal10 = 0;\n        long
    maxIndex11 = 0;\n        long minIndex11 = 0;\n        long maxVal11 = 0;\n        long
    minVal11 = 0;\n        long maxIndex12 = 0;\n        long minIndex12 = 0;\n        long
    maxVal12 = 0;\n        long minVal12 = 0;\n        long maxIndex13 = 0;\n        long
    minIndex13 = 0;\n        long maxVal13 = 0;\n        long minVal13 = 0;\n        long
    maxIndex14 = 0;\n        long minIndex14 = 0;\n        long maxVal14 = 0;\n        long
    minVal14 = 0;\n        long maxIndex15 = 0;\n        long minIndex15 = 0;\n        long
    maxVal15 = 0;\n        long minVal15 = 0;\n        long maxIndex16 = 0;\n        long
    minIndex16 = 0;\n        long maxVal16 = 0;\n        long minVal16 = 0;\n        long
    maxIndex17 = 0;\n        long minIndex17 = 0;\n        long maxVal17 = 0;\n        long
    minVal17 = 0;\n        long maxIndex18 = 0;\n        long minIndex18 = 0;\n        long
    maxVal18 = 0;\n        long minVal18 = 0;\n        long maxIndex19 = 0;\n        \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptg8a52a8.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmptg8a52a8.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmptg8a52a8.cs(28,14): warning CS0219: The variable ''maxIndex'' is assigned
    but its value is never used

    /tmp/tmptg8a52a8.cs(29,14): warning CS0219: The variable ''minIndex'' is assigned
    but its value is never used

    /tmp/tmptg8a52a8.cs(30,14): warning CS0219: The variable ''maxVal'' is assigned
    but its value is never used

    /tmp/tmptg8a52a8.cs(31,14): warning CS0219: The variable ''minVal'' is assigned
    but its value is never used

    /tmp/tmptg8a52a8.cs(32,14): warning CS0219: The variable ''maxIndex2'' is assigned
    but its value is never used

    /tmp/tmptg8a52a8.cs(33,14): warning CS0219: The variable ''minIndex2'' is assigned
    but its value is never used

    /tmp/tmptg8a52a8.cs(34,14): warning CS0219: The variable ''maxVal2'' is assigned
    but its value is never used

    /tmp/tmptg8a52a8.cs(35,14): warning CS0219: The variable ''minVal2'' is assigned
    but its value is never used

    /tmp/tmptg8a52a8.cs(36,14): warning CS0219: The variable ''maxIndex3'' is assigned
    but its value is never used

    /tmp/tmptg8a52a8.cs(37,14): warning CS0219: The variable ''minIndex3'' is assigned
    but its value is never used

    /tmp/tmptg8a52a8.cs(38,14): warning CS0219: The variable ''maxVal3'' is assigned
    but its value is never used

    /tmp/tmptg8a52a8.cs(39,14): warning CS0219: The variable ''minVal3'' is assigned
    but its value is never used

    /tmp/tmptg8a52a8.cs(40,14): warning CS0219: The variable ''maxIndex4'' is assigned
    but its value is never used

    /tmp/tmptg8a52a8.cs(41,14): warning CS0219: The variable ''minIndex4'' is assigned
    but its value is never used

    /tmp/tmptg8a52a8.cs(42,14): warning CS0219: The variable ''maxVal4'' is assigned
    but its value is never used

    /tmp/tmptg8a52a8.cs(43,14): warning CS0219: The variable ''minVal4'' is assigned
    but its value is ne'
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        long max2 = 0;\n        long
    cur2 = 0;\n        long max3 = 0;\n        long cur3 = 0;\n        long max4 =
    0;\n        long cur4 = 0;\n        long max5 = 0;\n        long cur5 = 0;\n        long
    max6 = 0;\n        long cur6 = 0;\n        long max7 = 0;\n        long cur7 =
    0;\n        long max8 = 0;\n        long cur8 = 0;\n        long max9 = 0;\n        long
    cur9 = 0;\n        long max10 = 0;\n        long cur10 = 0;\n        long max11
    = 0;\n        long cur11 = 0;\n        long max12 = 0;\n        long cur12 = 0;\n
    \       long max13 = 0;\n        long cur13 = 0;\n        long max14 = 0;\n        long
    cur14 = 0;\n        long max15 = 0;\n        long cur15 = 0;\n        long max16
    = 0;\n        long cur16 = 0;\n        long max17 = 0;\n        long cur17 = 0;\n
    \       long max18 = 0;\n        long cur18 = 0;\n        long max19 = 0;\n        long
    cur19 = 0;\n        long max20 = 0;\n        long cur20 = 0;\n        long max21
    = 0;\n        long cur21 = 0;\n        long max22 = 0;\n        long cur22 = 0;\n
    \       long max23 = 0;\n        long cur23 = 0;\n        long max24 = 0;\n        long
    cur24 = 0;\n        long max25 = 0;\n        long cur25 = 0;\n        long max26
    = 0;\n        long cur26 = 0;\n        long max27 = 0;\n        long cur27 = 0;\n
    \       long max28 = 0;\n        long cur28 = 0;\n        long max29 = 0;\n        long
    cur29 = 0;\n        long max30 = 0;\n        long cur30 = 0;\n        long max31
    = 0;\n        long cur31 = 0;\n        long max32 = 0;\n        long cur32 = 0;\n
    \       long max33 = 0;\n        long cur33 = 0;\n        long max34 = 0;\n        long
    cur34 = 0;\n        long max35 = 0;\n        long cur35 = 0;\n        long max36
    = 0;\n        long cur36 = 0;\n        long max37 = 0;\n        long cur37 = 0;\n
    \       long max38 = 0;\n        long cur38 = 0;\n        long max39 = 0;\n        long
    cur39 = 0;\n        long max40 = 0;\n        long cur40 = 0;\n        long max41
    = 0;\n        long cur41 = 0;\n        long max42 = 0;\n        long cur42 = 0;\n
    \       long max43 = 0;\n        long \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2cx6ywts.cs(111,13): error CS1001: Identifier expected

    /tmp/tmp2cx6ywts.cs(111,13): error CS1002: ; expected

    '
  timestamp: 1659793737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > k) {\n                max = sum - k;\n                result.Add(max);\n
    \               sum = 0;\n                count++;\n            } else if (sum
    < k) {\n                min = sum + k;\n                result.Add(min);\n                sum
    = 0;\n                count++;\n            }\n        }\n        if (count >
    0) {\n            max = sum - k;\n            result.Add(max);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3b0aacce43c94c02947b408132746579>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3b0aacce43c94c02947b408132746579>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long> result
    = new List<long>();\n        foreach (long i in arr) {\n            if (i > max)
    {\n                max = i;\n            }\n        }\n        if (k > max) {\n
    \           k = max;\n        }\n        long temp = 0;\n        long temp2 =
    0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n
    \       long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long
    temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12
    = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15
    = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18
    = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21
    = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24
    = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27
    = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30
    = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33
    = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36
    = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39
    = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42
    = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45
    = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48
    = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51
    = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54
    = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57
    = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n        long temp60
    = 0;\n        long temp61 = 0;\n        long temp62 = 0;\n        long temp63
    = 0;\n        long temp64 = 0;\n        long temp65 = 0;\n        long temp66
    = 0;\n        long temp67 = 0;\n        long temp68 = 0;\n        long temp69
    = 0;\n        long temp70 = 0;\n        long temp71 = 0;\n        long temp72
    = 0;\n        long temp73 = 0;\n        long temp74 = 0;\n        long temp75
    = 0;\n        long temp76 = 0;\n        long temp77 = 0;\n        long temp78
    = 0;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl322fvr4.cs(35,14): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(36,14): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(37,14): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(38,14): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(39,14): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(40,14): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(41,14): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(42,14): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(43,14): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(44,14): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(45,14): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(46,14): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(47,14): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(48,14): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(49,14): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(50,14): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(51,14): warning CS0219: The variable ''temp17'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(52,14): warning CS0219: The variable ''temp18'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(53,'
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            count++;\n
    \           if (sum > max) {\n                max = sum;\n            }\n            if
    (sum < min) {\n                min = sum;\n            }\n        }\n        if
    (count > k) {\n            k = count;\n        }\n        if (k == 0) {\n            result.Add(max);\n
    \           return result;\n        }\n        long mid = min + (k - 1) / 2;\n
    \       long midSum = sum / k;\n        long midMax = max;\n        long midMin
    = min;\n        long midCount = 0;\n        foreach (long i in arr) {\n            midCount
    += 1;\n            midSum += i;\n            if (midSum > midMax) {\n                midMax
    = midSum;\n            }\n            if (midSum < midMin) {\n                midMin
    = midSum;\n            }\n        }\n        if (midCount > k) {\n            k
    = midCount;\n        }\n        if (k == 0) {\n            result.Add(midMax);\n
    \           return result;\n        }\n        long leftSum = sum - (mid * k);\n
    \       long rightSum = sum - (mid * (k + 1));\n        long leftMax = max;\n
    \       long leftMin = min;\n        long leftCount = 0;\n        long rightMax
    = max;\n        long rightMin = min;\n        long rightCount = 0;\n        foreach
    (long i in arr) {\n            leftCount += 1;\n            leftSum += i;\n            if
    (leftSum > leftMax) {\n                leftMax = leftSum;\n            }\n            if
    (leftSum < leftMin) {\n                leftMin = leftSum;\n            }\n            rightCount
    += 1;\n            rightSum += i;\n            if (rightSum > rightMax) {\n                rightMax
    = rightSum;\n            }\n            if (rightSum < rightMin) {\n                rightMin
    = rightSum;\n            }\n        }\n        if (leftCount > k) {\n            k
    = leftCount;\n        }\n        if (k == 0) {\n            result.Add(leftMax);\n
    \           return result;\n        }\n        long rightMidSum = sum - (mid *
    (k + 1));\n        long leftMidSum = sum - (mid * k);\n        long leftMidMax
    = midMax;\n        long leftMidMin = midMin;\n        long leftMidCount = 0;\n
    \       long rightMidMax = midMax;\n        long rightMidMin = midMin;\n\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppyfnxw2f.cs(106,14): warning CS0219: The variable ''leftMidCount'' is
    assigned but its value is never used

    /tmp/tmppyfnxw2f.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long max2 = 0;\n        long
    min2 = 0;\n        long max3 = 0;\n        long min3 = 0;\n        long max4 =
    0;\n        long min4 = 0;\n        long max5 = 0;\n        long min5 = 0;\n        long
    max6 = 0;\n        long min6 = 0;\n        long max7 = 0;\n        long min7 =
    0;\n        long max8 = 0;\n        long min8 = 0;\n        long max9 = 0;\n        long
    min9 = 0;\n        long max10 = 0;\n        long min10 = 0;\n        long max11
    = 0;\n        long min11 = 0;\n        long max12 = 0;\n        long min12 = 0;\n
    \       long max13 = 0;\n        long min13 = 0;\n        long max14 = 0;\n        long
    min14 = 0;\n        long max15 = 0;\n        long min15 = 0;\n        long max16
    = 0;\n        long min16 = 0;\n        long max17 = 0;\n        long min17 = 0;\n
    \       long max18 = 0;\n        long min18 = 0;\n        long max19 = 0;\n        long
    min19 = 0;\n        long max20 = 0;\n        long min20 = 0;\n        long max21
    = 0;\n        long min21 = 0;\n        long max22 = 0;\n        long min22 = 0;\n
    \       long max23 = 0;\n        long min23 = 0;\n        long max24 = 0;\n        long
    min24 = 0;\n        long max25 = 0;\n        long min25 = 0;\n        long max26
    = 0;\n        long min26 = 0;\n        long max27 = 0;\n        long min27 = 0;\n
    \       long max28 = 0;\n        long min28 = 0;\n        long max29 = 0;\n        long
    min29 = 0;\n        long max30 = 0;\n        long min30 = 0;\n        long max31
    = 0;\n        long min31 = 0;\n        long max32 = 0;\n        long min32 = 0;\n
    \       long max33 = 0;\n        long min33 = 0;\n        long max34 = 0;\n        long
    min34 = 0;\n        long max35 = 0;\n        long min35 = 0;\n        long max36
    = 0;\n        long min36 = 0;\n        long max37 = 0;\n        long min37 = 0;\n
    \       long max38 = 0;\n        long min38 = 0;\n        long max39 = 0;\n        long
    min39 = 0;\n        long max40 = 0;\n        long min40 = 0;\n        long max41
    = 0;\n        long min41 = 0;\n        long max42 = 0;\n        long min42 = 0;\n
    \       long max43 = 0;\n        long \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdkwa3v6v.cs(111,13): error CS1001: Identifier expected

    /tmp/tmpdkwa3v6v.cs(111,13): error CS1002: ; expected

    '
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        long sum2 = 0;\n        long sum3 = 0;\n        long sum4
    = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n        long sum7 = 0;\n
    \       long sum8 = 0;\n        long sum9 = 0;\n        long sum10 = 0;\n        long
    sum11 = 0;\n        long sum12 = 0;\n        long sum13 = 0;\n        long sum14
    = 0;\n        long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n
    \       long sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long
    sum21 = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24
    = 0;\n        long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n
    \       long sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long
    sum31 = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n        long sum34
    = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n
    \       long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n        long
    sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n        long sum44
    = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n        long sum47 = 0;\n
    \       long sum48 = 0;\n        long sum49 = 0;\n        long sum50 = 0;\n        long
    sum51 = 0;\n        long sum52 = 0;\n        long sum53 = 0;\n        long sum54
    = 0;\n        long sum55 = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n
    \       long sum58 = 0;\n        long sum59 = 0;\n        long sum60 = 0;\n        long
    sum61 = 0;\n        long sum62 = 0;\n        long sum63 = 0;\n        long sum64
    = 0;\n        long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n
    \       long sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n        long
    sum71 = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n        long sum74
    = 0;\n        long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n
    \       long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n        long
    sum81 = 0;\n        long sum82 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgiv9h5wu.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpgiv9h5wu.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmpgiv9h5wu.cs(28,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpgiv9h5wu.cs(29,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    /tmp/tmpgiv9h5wu.cs(30,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpgiv9h5wu.cs(31,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpgiv9h5wu.cs(32,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpgiv9h5wu.cs(33,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpgiv9h5wu.cs(34,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpgiv9h5wu.cs(35,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpgiv9h5wu.cs(36,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpgiv9h5wu.cs(37,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpgiv9h5wu.cs(38,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpgiv9h5wu.cs(39,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpgiv9h5wu.cs(40,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpgiv9h5wu.cs(41,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpgiv9h5wu.cs(42,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpgiv9h5wu.cs(43,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpgiv9h5wu.cs(44,14): warning CS0219: T'
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = arr.Min();\n        long mid = min +
    (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n
    \       long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6
    = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long
    mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 /
    2;\n        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long
    mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15
    / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n        long
    mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21 = mid20
    / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long
    mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25
    / 2;\n        long mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long
    mid29 = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30
    / 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long
    mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35
    / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n        long
    mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41 = mid40
    / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long
    mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n        long mid46 = mid45
    / 2;\n        long mid47 = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long
    mid49 = mid48 / 2;\n        long mid50 = mid49 / 2;\n\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1xl3xf2l.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659823363
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long> res
    = new List<long>();\n        foreach (long i in arr) {\n            if (i > max)
    {\n                max = i;\n            }\n        }\n        if (k > max) {\n
    \           k = max;\n        }\n        long cur = max;\n        while (k !=
    0) {\n            long next = 0;\n            foreach (long i in arr) {\n                if
    (i > cur) {\n                    next = i;\n                }\n            }\n
    \           if (next > cur) {\n                res.Add(cur);\n                cur
    = next;\n            }\n            k--;\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c08fedd074940d9a5eb07921f4730e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c08fedd074940d9a5eb07921f4730e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxValue = arr[0];\n        long minValue = arr[0];\n
    \       long maxCount = 0;\n        long minCount = 0;\n        long maxCountIndex
    = 0;\n        long minCountIndex = 0;\n        bool isMax = true;\n        bool
    isMin = true;\n        bool isMaxIndex = true;\n        bool isMinIndex = true;\n
    \       bool isMaxValue = true;\n        bool isMinValue = true;\n        bool
    isMaxCount = true;\n        bool isMinCount = true;\n        bool isMaxCountIndex
    = true;\n        bool isMinCountIndex = true;\n        bool isMaxIndexValue =
    true;\n        bool isMinIndexValue = true;\n        bool isMaxIndexCount = true;\n
    \       bool isMinIndexCount = true;\n        bool isMaxValueCount = true;\n        bool
    isMinValueCount = true;\n        bool isMaxCountIndexValue = true;\n        bool
    isMinCountIndexValue = true;\n        bool isMaxIndexCountValue = true;\n        bool
    isMinIndexCountValue = true;\n        bool isMaxValueCountValue = true;\n        bool
    isMinValueCountValue = true;\n        bool isMaxCountIndexValueValue = true;\n
    \       bool isMinCountIndexValueValue = true;\n        bool isMaxIndexCountValueValue
    = true;\n        bool isMinCountIndexValueValue = true;\n        bool isMaxValueCountValueValue
    = true;\n        bool isMinValueCountValueValue = true;\n        bool isMaxCountIndexValueCountValue
    = true;\n        bool isMinCountIndexValueCountValue = true;\n        bool isMaxIndexCountValueCountValue
    = true;\n        bool isMinCountIndexValueCountValue = true;\n        bool isMaxValueCountValueCountValue
    = true;\n        bool isMinValueCountValueCountValue = true;\n        bool isMaxCountIndexValueCountValue
    = true;\n        bool isMinCountIndexValueCountValue = true;\n        bool isMaxValueCountValueCountValue
    = true;\n        bool isMinValueCountValueCountValue = true;\n        bool isMaxCountIndexValueCountValue
    = true;\n        bool isMinCountIndexValueCountValue = true;\n        bool isMaxValueCountValueCountValue
    = true;\n        bool isMinValueCountValueCountValue = true;\n        bool isMaxCountIndexValueCountValue
    = true;\n        bool isMinCountIndexValueCountValue = true;\n        bool isMaxValueCountValueCountValue
    = true;\n        bool isMinValueCountValueCountValue = true;\n        bool isMaxCountIndexValueCountValue
    = true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8mjr3guh.cs(61,14): error CS0128: A local variable or function named ''isMinCountIndexValueValue''
    is already defined in this scope

    /tmp/tmp8mjr3guh.cs(67,14): error CS0128: A local variable or function named ''isMinCountIndexValueCountValue''
    is already defined in this scope

    /tmp/tmp8mjr3guh.cs(70,14): error CS0128: A local variable or function named ''isMaxCountIndexValueCountValue''
    is already defined in this scope

    /tmp/tmp8mjr3guh.cs(71,14): error CS0128: A local variable or function named ''isMinCountIndexValueCountValue''
    is already defined in this scope

    /tmp/tmp8mjr3guh.cs(72,14): error CS0128: A local variable or function named ''isMaxValueCountValueCountValue''
    is already defined in this scope

    /tmp/tmp8mjr3guh.cs(73,14): error CS0128: A local variable or function named ''isMinValueCountValueCountValue''
    is already defined in this scope

    /tmp/tmp8mjr3guh.cs(74,14): error CS0128: A local variable or function named ''isMaxCountIndexValueCountValue''
    is already defined in this scope

    /tmp/tmp8mjr3guh.cs(75,14): error CS0128: A local variable or function named ''isMinCountIndexValueCountValue''
    is already defined in this scope

    /tmp/tmp8mjr3guh.cs(76,14): error CS0128: A local variable or function named ''isMaxValueCountValueCountValue''
    is already defined in this scope

    /tmp/tmp8mjr3guh.cs(77,14): error CS0128: A local variable or function named ''isMinValueCountValueCountValue''
    is already defined in this scope

    /tmp/tmp8mjr3guh.cs(78,14): error CS0128: A local variable or function named ''isMaxCountIndexValueCountValue''
    is already defined in this scope

    /tmp/tmp8mjr3guh.cs(79,14): error CS0128: A local variable or function named ''isMinCountIndexValueCountValue''
    is already defined in this scope

    /tmp/tmp8mjr3guh.cs(80,14): error CS0128: A local variable or function named ''isMaxValueCountValueCountValue''
    is already defined in this scope

    /tmp/tmp8mjr3guh.cs(81,14): error CS0128: A local variable or funct'
  timestamp: 1659823363
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        foreach (long i in arr)
    {\n            if (i > max) {\n                max = i;\n                cur =
    i;\n            }\n            if (i == cur) {\n                cur++;\n            }\n
    \           if (cur > k) {\n                break;\n            }\n            result.Add(cur);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c310b849d93745adad59ffbe7c8ba1c3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c310b849d93745adad59ffbe7c8ba1c3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823364
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        foreach (long i in arr)
    {\n            if (max < i) {\n                max = i;\n            }\n        }\n
    \       long curMax = 0;\n        long curMaxIndex = 0;\n        long curMaxValue
    = max;\n        foreach (long i in arr) {\n            if (i == max) {\n                res.Add(max);\n
    \               curMax = max;\n                curMaxIndex = i;\n                curMaxValue
    = max;\n            } else {\n                if (curMaxValue < i) {\n                    curMaxValue
    = i;\n                    curMaxIndex = i;\n                }\n            }\n
    \       }\n        if (curMaxIndex == k) {\n            res.Add(max);\n        }\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <055e5de4e36947869051c6b257339926>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <055e5de4e36947869051c6b257339926>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823364
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = arr[0];\n        long maxIndex = 0;\n        long maxCount
    = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >
    max) {\n                max = arr[i];\n                maxIndex = i;\n                maxCount
    = 1;\n            } else if (arr[i] == max) {\n                maxCount++;\n            }\n
    \       }\n        long maxCountIndex = 0;\n        long maxCountCount = 0;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == max)
    {\n                maxCountIndex++;\n                maxCountCount++;\n            }\n
    \       }\n        if (maxCountIndex == maxCountCount) {\n            result.Add(max);\n
    \       } else {\n            for (int i = 0; i < arr.Count; i++) {\n                if
    (arr[i] > max) {\n                    result.Add(arr[i]);\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81fa379556d44bbaeded80192a9d9b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81fa379556d44bbaeded80192a9d9b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = arr.Min();\n        long mid = 0;\n
    \       long mid2 = 0;\n        long mid3 = 0;\n        long mid4 = 0;\n        long
    mid5 = 0;\n        long mid6 = 0;\n        long mid7 = 0;\n        long mid8 =
    0;\n        long mid9 = 0;\n        long mid10 = 0;\n        long mid11 = 0;\n
    \       long mid12 = 0;\n        long mid13 = 0;\n        long mid14 = 0;\n        long
    mid15 = 0;\n        long mid16 = 0;\n        long mid17 = 0;\n        long mid18
    = 0;\n        long mid19 = 0;\n        long mid20 = 0;\n        long mid21 = 0;\n
    \       long mid22 = 0;\n        long mid23 = 0;\n        long mid24 = 0;\n        long
    mid25 = 0;\n        long mid26 = 0;\n        long mid27 = 0;\n        long mid28
    = 0;\n        long mid29 = 0;\n        long mid30 = 0;\n        long mid31 = 0;\n
    \       long mid32 = 0;\n        long mid33 = 0;\n        long mid34 = 0;\n        long
    mid35 = 0;\n        long mid36 = 0;\n        long mid37 = 0;\n        long mid38
    = 0;\n        long mid39 = 0;\n        long mid40 = 0;\n        long mid41 = 0;\n
    \       long mid42 = 0;\n        long mid43 = 0;\n        long mid44 = 0;\n        long
    mid45 = 0;\n        long mid46 = 0;\n        long mid47 = 0;\n        long mid48
    = 0;\n        long mid49 = 0;\n        long mid50 = 0;\n        long mid51 = 0;\n
    \       long mid52 = 0;\n        long mid53 = 0;\n        long mid54 = 0;\n        long
    mid55 = 0;\n        long mid56 = 0;\n        long mid57 = 0;\n        long mid58
    = 0;\n        long mid59 = 0;\n        long mid60 = 0;\n        long mid61 = 0;\n
    \       long mid62 = 0;\n        long mid63 = 0;\n        long mid64 = 0;\n        long
    mid65 = 0;\n        long mid66 = 0;\n        long mid67 = 0;\n        long mid68
    = 0;\n        long mid69 = 0;\n        long mid70 = 0;\n        long mid71 = 0;\n
    \       long mid72 = 0;\n        long mid73 = 0;\n        long mid74 = 0;\n        long
    mid75 = 0;\n        long mid76 = 0;\n        long mid77 = 0;\n        long mid78
    = 0;\n        long mid79 = 0;\n        long mid80 = 0;\n        long mid81 = 0;\n
    \       long mid82 = 0;\n        long mid\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgb2tivm5.cs(110,17): error CS1002: ; expected

    '
  timestamp: 1659823363
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long maxIndex = 0;\n        long maxValue = arr[0];\n
    \       long maxValueIndex = -1;\n        bool isMax = true;\n        for (int
    i = 0; i < arr.Count; i++) {\n            long value = arr[i];\n            if
    (isMax) {\n                if (value > maxValue) {\n                    maxValue
    = value;\n                    maxValueIndex = i;\n                }\n            }
    else {\n                if (value < maxValue) {\n                    maxValue
    = value;\n                    maxValueIndex = i;\n                }\n            }\n
    \           if (value == maxValue) {\n                isMax = true;\n            }
    else {\n                isMax = false;\n            }\n        }\n        max
    = maxValue;\n        maxIndex = maxValueIndex;\n        for (int i = 0; i < arr.Count;
    i++) {\n            long value = arr[i];\n            if (value == maxValue) {\n
    \               result.Add(value);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f960ce947fd4865802eff308fbb0f3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f960ce947fd4865802eff308fbb0f3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823364
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = arr[0];\n        long maxIndex = 0;\n        long maxCount
    = 0;\n        foreach (long i in arr) {\n            if (i == max) {\n                maxCount++;\n
    \           } else {\n                if (maxCount > k) {\n                    result.Add(max);\n
    \                   maxCount = 1;\n                }\n                max = i;\n
    \               maxIndex = i;\n                maxCount = 1;\n            }\n
    \       }\n        if (maxCount > k) {\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa3837e894bb44fba378866a4b53f876>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa3837e894bb44fba378866a4b53f876>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long temp = 0;\n        long sum = 0;\n        foreach
    (var item in arr) {\n            sum += item;\n            if (sum > max) {\n
    \               max = sum;\n            }\n        }\n        temp = k - max;\n
    \       if (temp > 0) {\n            foreach (var item in arr) {\n                sum
    += item;\n                if (sum > max) {\n                    max = sum;\n                }\n
    \           }\n        }\n        temp = k - max;\n        if (temp > 0) {\n            foreach
    (var item in arr) {\n                sum += item;\n                if (sum > max)
    {\n                    max = sum;\n                }\n            }\n        }\n
    \       temp = k - max;\n        if (temp > 0) {\n            foreach (var item
    in arr) {\n                sum += item;\n                if (sum > max) {\n                    max
    = sum;\n                }\n            }\n        }\n        temp = k - max;\n
    \       if (temp > 0) {\n            foreach (var item in arr) {\n                sum
    += item;\n                if (sum > max) {\n                    max = sum;\n                }\n
    \           }\n        }\n        temp = k - max;\n        if (temp > 0) {\n            foreach
    (var item in arr) {\n                sum += item;\n                if (sum > max)
    {\n                    max = sum;\n                }\n            }\n        }\n
    \       temp = k - max;\n        if (temp > 0) {\n            foreach (var item
    in arr) {\n                sum += item;\n                if (sum > max) {\n                    max
    = sum;\n                }\n            }\n        }\n        temp = k - max;\n
    \       if (temp > 0) {\n            foreach (var item in arr) {\n                sum
    += item;\n                if (sum > max) {\n                    max = sum;\n                }\n
    \           }\n        }\n        temp = k - max;\n        if (temp > 0) {\n            foreach
    (var item in arr) {\n                sum += item;\n                if (sum > max)
    {\n                    max = sum;\n                }\n            }\n        }\n
    \       temp = k - max;\n        if (temp > 0) {\n            foreach (var item
    in arr) {\n                sum += item;\n                if (sum > max) {\n                    max
    = sum;\n                }\n            }\n        }\n        temp = k - max;\n
    \       if (temp > 0) {\n            foreach (var item in arr) {\n                sum
    += item;\n                if (sum > max) {\n                    max = sum;\n                }\n
    \           }\n        }\n        temp = k - max;\n        if (temp > 0) {\n            foreach
    (var item in arr) {\n                sum += item;\n                if (sum > max)
    {\n                    max = sum;\n                }\n            }\n        }\n
    \       temp = k - max;\n        if (temp\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5pndwn97.cs(135,17): error CS1026: ) expected

    /tmp/tmp5pndwn97.cs(135,17): error CS1525: Invalid expression term ''}''

    /tmp/tmp5pndwn97.cs(135,17): error CS1002: ; expected

    '
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        long max2 = 0;\n        long
    cur2 = 0;\n        foreach (long i in arr) {\n            if (max < i) {\n                max
    = i;\n                cur = i;\n            }\n            if (max2 < i) {\n                max2
    = i;\n                cur2 = i;\n            }\n        }\n        if (k > max)
    {\n            k = max;\n        }\n        if (k > max2) {\n            k = max2;\n
    \       }\n        long max3 = k;\n        long cur3 = 0;\n        long max4 =
    0;\n        long cur4 = 0;\n        foreach (long i in arr) {\n            if
    (cur3 > i) {\n                cur3 = i;\n            }\n            if (cur4 >
    i) {\n                cur4 = i;\n            }\n        }\n        if (k > cur3)
    {\n            k = cur3;\n        }\n        if (k > cur4) {\n            k =
    cur4;\n        }\n        long max5 = k;\n        long cur5 = 0;\n        long
    max6 = 0;\n        long cur6 = 0;\n        foreach (long i in arr) {\n            if
    (cur5 > i) {\n                cur5 = i;\n            }\n            if (cur6 >
    i) {\n                cur6 = i;\n            }\n        }\n        if (k > cur5)
    {\n            k = cur5;\n        }\n        if (k > cur6) {\n            k =
    cur6;\n        }\n        long max7 = k;\n        long cur7 = 0;\n        long
    max8 = 0;\n        long cur8 = 0;\n        foreach (long i in arr) {\n            if
    (cur7 > i) {\n                cur7 = i;\n            }\n            if (cur8 >
    i) {\n                cur8 = i;\n            }\n        }\n        if (k > cur7)
    {\n            k = cur7;\n        }\n        if (k > cur8) {\n            k =
    cur8;\n        }\n        long max9 = k;\n        long cur9 = 0;\n        long
    max10 = 0;\n        long cur10 = 0;\n        foreach (long i in arr) {\n            if
    (cur9 > i) {\n                cur9 = i;\n            }\n            if (cur10
    > i) {\n                cur10 = i;\n            }\n        }\n        if (k >
    cur9) {\n            k = cur9;\n        }\n        if (k > cur10) {\n            k
    = cur10;\n        }\n        long max11 = k;\n        long cur11 = 0;\n        long
    max12 = 0;\n        long cur12 = 0;\n        foreach (long i in arr) {\n            if
    (cur11 > i) {\n                cur11 = i;\n            }\n            if (cur12
    > i) {\n                cur12 = i;\n            }\n        }\n        if (k >
    cur11) {\n            k = cur11;\n\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphwy_qmmx.cs(134,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmphwy_qmmx.cs(148,2): error CS1513: } expected

    '
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        long sum2 = 0;\n        long sum3 = 0;\n        long sum4
    = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n        long sum7 = 0;\n
    \       long sum8 = 0;\n        long sum9 = 0;\n        long sum10 = 0;\n        long
    sum11 = 0;\n        long sum12 = 0;\n        long sum13 = 0;\n        long sum14
    = 0;\n        long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n
    \       long sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long
    sum21 = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24
    = 0;\n        long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n
    \       long sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long
    sum31 = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n        long sum34
    = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n
    \       long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n        long
    sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n        long sum44
    = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n        long sum47 = 0;\n
    \       long sum48 = 0;\n        long sum49 = 0;\n        long sum50 = 0;\n        long
    sum51 = 0;\n        long sum52 = 0;\n        long sum53 = 0;\n        long sum54
    = 0;\n        long sum55 = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n
    \       long sum58 = 0;\n        long sum59 = 0;\n        long sum60 = 0;\n        long
    sum61 = 0;\n        long sum62 = 0;\n        long sum63 = 0;\n        long sum64
    = 0;\n        long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n
    \       long sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n        long
    sum71 = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n        long sum74
    = 0;\n        long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n
    \       long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n        long
    sum81 = 0;\n        long sum82 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr8pj50ot.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpr8pj50ot.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmpr8pj50ot.cs(28,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpr8pj50ot.cs(29,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(30,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(31,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(32,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(33,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(34,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(35,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(36,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(37,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(38,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(39,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(40,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(41,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(42,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(43,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(44,14): warning CS0219: T'
  timestamp: 1659793738
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       long max = 0;\n        List<long> result = new List<long>();\n        foreach
    (long i in arr) {\n            if (i > max) {\n                max = i;\n            }\n
    \       }\n        long start = 0;\n        long end = arr.Count - 1;\n        while
    (start < end) {\n            long mid = (start + end) / 2;\n            if (arr[mid]
    > max) {\n                end = mid - 1;\n            } else {\n                start
    = mid + 1;\n            }\n        }\n        List<long> newArr = new List<long>();\n
    \       for (int i = start; i <= end; i++) {\n            newArr.Add(arr[i]);\n
    \       }\n        return newArr;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps2_hmndu.cs(37,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmps2_hmndu.cs(44,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long temp = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > max) {\n                max = sum;\n                temp = i;\n            }\n
    \       }\n        long count = 0;\n        foreach (long i in arr) {\n            if
    (i == temp) {\n                count++;\n            }\n        }\n        if
    (count > k) {\n            k = count;\n        }\n        long max2 = 0;\n        long
    temp2 = 0;\n        long sum2 = 0;\n        long count2 = 0;\n        foreach
    (long i in arr) {\n            sum2 += i;\n            if (sum2 > max2) {\n                max2
    = sum2;\n                temp2 = i;\n            }\n        }\n        long count3
    = 0;\n        foreach (long i in arr) {\n            if (i == temp2) {\n                count3++;\n
    \           }\n        }\n        if (count3 > k) {\n            k = count3;\n
    \       }\n        long max3 = 0;\n        long temp3 = 0;\n        long sum3
    = 0;\n        long count4 = 0;\n        foreach (long i in arr) {\n            sum3
    += i;\n            if (sum3 > max3) {\n                max3 = sum3;\n                temp3
    = i;\n            }\n        }\n        long count5 = 0;\n        foreach (long
    i in arr) {\n            if (i == temp3) {\n                count5++;\n            }\n
    \       }\n        if (count5 > k) {\n            k = count5;\n        }\n        long
    max4 = 0;\n        long temp4 = 0;\n        long sum4 = 0;\n        long count6
    = 0;\n        foreach (long i in arr) {\n            sum4 += i;\n            if
    (sum4 > max4) {\n                max4 = sum4;\n                temp4 = i;\n            }\n
    \       }\n        long count7 = 0;\n        foreach (long i in arr) {\n            if
    (i == temp4) {\n                count7++;\n            }\n        }\n        if
    (count7 > k) {\n            k = count7;\n        }\n        long max5 = 0;\n        long
    temp5 = 0;\n        long sum5 = 0;\n        long count8 = 0;\n        foreach
    (long i in arr) {\n            sum5 += i;\n            if (sum5 > max5) {\n                max5
    = sum5;\n                temp5 = i;\n            }\n        }\n        long count9
    = 0;\n        foreach (long i in arr) {\n            if (i == temp5) {\n                count9++;\n
    \           }\n        }\n        if (count9 > k) {\n            k = count9;\n
    \       }\n        long max6 = 0;\n        long temp6 = 0;\n        long sum6
    = 0;\n        long count10 = 0;\n        foreach (long i in arr\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl7hvgumj.cs(130,31): error CS1026: ) expected

    /tmp/tmpl7hvgumj.cs(130,31): error CS1525: Invalid expression term ''}''

    /tmp/tmpl7hvgumj.cs(130,31): error CS1002: ; expected

    '
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       List<long> result = new List<long>();\n        long max = 0;\n        long
    min = 0;\n        long maxIndex = 0;\n        long minIndex = 0;\n        long
    maxValue = arr[0];\n        long minValue = arr[0];\n        long maxIndexValue
    = arr[0];\n        long minIndexValue = arr[0];\n        long maxValue2 = arr[0];\n
    \       long minValue2 = arr[0];\n        long maxIndexValue2 = arr[0];\n        long
    minIndexValue2 = arr[0];\n        long maxValue3 = arr[0];\n        long minValue3
    = arr[0];\n        long maxIndexValue3 = arr[0];\n        long minIndexValue3
    = arr[0];\n        long maxValue4 = arr[0];\n        long minValue4 = arr[0];\n
    \       long maxIndexValue4 = arr[0];\n        long minIndexValue4 = arr[0];\n
    \       long maxValue5 = arr[0];\n        long minValue5 = arr[0];\n        long
    maxIndexValue5 = arr[0];\n        long minIndexValue5 = arr[0];\n        long
    maxValue6 = arr[0];\n        long minValue6 = arr[0];\n        long maxIndexValue6
    = arr[0];\n        long minIndexValue6 = arr[0];\n        long maxValue7 = arr[0];\n
    \       long minValue7 = arr[0];\n        long maxIndexValue7 = arr[0];\n        long
    minIndexValue7 = arr[0];\n        long maxValue8 = arr[0];\n        long minValue8
    = arr[0];\n        long maxIndexValue8 = arr[0];\n        long minIndexValue8
    = arr[0];\n        long maxValue9 = arr[0];\n        long minValue9 = arr[0];\n
    \       long maxIndexValue9 = arr[0];\n        long minIndexValue9 = arr[0];\n
    \       long maxValue10 = arr[0];\n        long minValue10 = arr[0];\n        long
    maxIndexValue10 = arr[0];\n        long minIndexValue10 = arr[0];\n        long
    maxValue11 = arr[0];\n        long minValue11 = arr[0];\n        long maxIndexValue11
    = arr[0];\n        long minIndexValue11 = arr[0];\n        long maxValue12 = arr[0];\n
    \       long minValue12 = arr[0];\n        long maxIndexValue12 = arr[0];\n        long
    minIndexValue12 = arr[0];\n        long maxValue13 = arr[0];\n        long minValue13
    = arr[0];\n        long maxIndexValue13 = arr[0];\n        long minIndexValue13
    = arr[0];\n        long maxValue14 = arr[0];\n        long minValue14 = arr[0];\n
    \       long maxIndexValue14 = arr[0];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph9qifggv.cs(27,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmph9qifggv.cs(28,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmph9qifggv.cs(29,14): warning CS0219: The variable ''maxIndex'' is assigned
    but its value is never used

    /tmp/tmph9qifggv.cs(30,14): warning CS0219: The variable ''minIndex'' is assigned
    but its value is never used

    /tmp/tmph9qifggv.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        long max = 0;\n        long maxIndex = 0;\n
    \       long maxValue = 0;\n        long maxValueIndex = 0;\n        long maxValueIndex2
    = 0;\n        long maxValueIndex3 = 0;\n        long maxValueIndex4 = 0;\n        long
    maxValueIndex5 = 0;\n        long maxValueIndex6 = 0;\n        long maxValueIndex7
    = 0;\n        long maxValueIndex8 = 0;\n        long maxValueIndex9 = 0;\n        long
    maxValueIndex10 = 0;\n        long maxValueIndex11 = 0;\n        long maxValueIndex12
    = 0;\n        long maxValueIndex13 = 0;\n        long maxValueIndex14 = 0;\n        long
    maxValueIndex15 = 0;\n        long maxValueIndex16 = 0;\n        long maxValueIndex17
    = 0;\n        long maxValueIndex18 = 0;\n        long maxValueIndex19 = 0;\n        long
    maxValueIndex20 = 0;\n        long maxValueIndex21 = 0;\n        long maxValueIndex22
    = 0;\n        long maxValueIndex23 = 0;\n        long maxValueIndex24 = 0;\n        long
    maxValueIndex25 = 0;\n        long maxValueIndex26 = 0;\n        long maxValueIndex27
    = 0;\n        long maxValueIndex28 = 0;\n        long maxValueIndex29 = 0;\n        long
    maxValueIndex30 = 0;\n        long maxValueIndex31 = 0;\n        long maxValueIndex32
    = 0;\n        long maxValueIndex33 = 0;\n        long maxValueIndex34 = 0;\n        long
    maxValueIndex35 = 0;\n        long maxValueIndex36 = 0;\n        long maxValueIndex37
    = 0;\n        long maxValueIndex38 = 0;\n        long maxValueIndex39 = 0;\n        long
    maxValueIndex40 = 0;\n        long maxValueIndex41 = 0;\n        long maxValueIndex42
    = 0;\n        long maxValueIndex43 = 0;\n        long maxValueIndex44 = 0;\n        long
    maxValueIndex45 = 0;\n        long maxValueIndex46 = 0;\n        long maxValueIndex47
    = 0;\n        long maxValueIndex48 = 0;\n        long maxValueIndex49 = 0;\n        long
    maxValueIndex50 = 0;\n        long maxValueIndex51 = 0;\n        long maxValueIndex52
    = 0;\n        long maxValueIndex53 = 0;\n        long maxValueIndex54 = 0;\n        long
    maxValueIndex55 = 0;\n        long maxValueIndex56 = 0;\n        long maxValueIndex57
    = 0;\n        long maxValueIndex58 = 0;\n        long maxValueIndex59 = 0;\n        long
    maxValueIndex60 = 0;\n        long max\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpku9xitcd.cs(90,17): error CS1002: ; expected

    '
  timestamp: 1659823363
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        foreach
    (long i in arr) {\n            sum += i;\n            if (sum > k) {\n                max
    = sum;\n                min = i;\n            }\n            if (sum < k) {\n
    \               max = sum;\n                min = i;\n            }\n        }\n
    \       foreach (long i in arr) {\n            if (sum == k) {\n                result.Add(i);\n
    \           }\n            if (sum < k) {\n                result.Add(i);\n            }\n
    \           if (sum > k) {\n                result.Add(i);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4de4f4cc1a874361b3b255cf13380561>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4de4f4cc1a874361b3b255cf13380561>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    temp = 0;\n        long count = 0;\n        long sum2 = 0;\n        long temp2
    = 0;\n        long count2 = 0;\n        foreach (long i in arr) {\n            sum
    += i;\n        }\n        max = sum / k;\n        min = arr.Min();\n        sum
    = 0;\n        foreach (long i in arr) {\n            sum += i;\n        }\n        temp
    = sum / k;\n        count = 0;\n        sum2 = 0;\n        temp2 = 0;\n        count2
    = 0;\n        foreach (long i in arr) {\n            if (i == max) {\n                result.Add(max);\n
    \               count++;\n            }\n            if (i == min) {\n                result.Add(min);\n
    \               count++;\n            }\n            if (i == temp) {\n                result.Add(temp);\n
    \               count++;\n            }\n            if (i == sum) {\n                result.Add(sum);\n
    \               count++;\n            }\n            if (i == sum2) {\n                result.Add(sum2);\n
    \               count++;\n            }\n            if (i == temp2) {\n                result.Add(temp2);\n
    \               count++;\n            }\n            if (i == count2) {\n                result.Add(count2);\n
    \               count++;\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <998e226c0e19469784f50257ebfa6459>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <998e226c0e19469784f50257ebfa6459>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > k) {\n                max = sum;\n                min = i;\n                count
    = 1;\n            } else if (sum == k) {\n                max = sum;\n                min
    = i;\n                count = 1;\n            } else if (sum < k) {\n                max
    = sum;\n                min = i;\n                count = 1;\n            }\n
    \       }\n        long temp = 0;\n        long temp2 = 0;\n        long temp3
    = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n
    \       long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long
    temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long
    temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long
    temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long
    temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long
    temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long
    temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long
    temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long
    temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long
    temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long
    temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long
    temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long
    temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long
    temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long
    temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long
    temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long
    temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long
    temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long
    temp61 = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long
    temp64 = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long
    temp67 = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpabqq88jl.cs(115,13): error CS1001: Identifier expected

    /tmp/tmpabqq88jl.cs(115,13): error CS1002: ; expected

    '
  timestamp: 1659823363
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    temp = 0;\n        long count = 0;\n        foreach (long i in arr) {\n            sum
    += i;\n            if (sum > k) {\n                max = sum;\n                temp
    = i;\n            }\n            if (sum < k) {\n                min = sum;\n
    \               temp = i;\n            }\n            if (sum == k) {\n                result.Add(temp);\n
    \               count++;\n            }\n        }\n        if (count == 0) {\n
    \           result.Add(temp);\n        }\n        if (count > 1) {\n            while
    (count > 1) {\n                result.Add(temp);\n                count--;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9967211e1bf745488131bc2d3df386bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9967211e1bf745488131bc2d3df386bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxVal = 0;\n        long minVal = 0;\n        long
    maxIndex2 = 0;\n        long minIndex2 = 0;\n        long maxVal2 = 0;\n        long
    minVal2 = 0;\n        long maxIndex3 = 0;\n        long minIndex3 = 0;\n        long
    maxVal3 = 0;\n        long minVal3 = 0;\n        long maxIndex4 = 0;\n        long
    minIndex4 = 0;\n        long maxVal4 = 0;\n        long minVal4 = 0;\n        long
    maxIndex5 = 0;\n        long minIndex5 = 0;\n        long maxVal5 = 0;\n        long
    minVal5 = 0;\n        long maxIndex6 = 0;\n        long minIndex6 = 0;\n        long
    maxVal6 = 0;\n        long minVal6 = 0;\n        long maxIndex7 = 0;\n        long
    minIndex7 = 0;\n        long maxVal7 = 0;\n        long minVal7 = 0;\n        long
    maxIndex8 = 0;\n        long minIndex8 = 0;\n        long maxVal8 = 0;\n        long
    minVal8 = 0;\n        long maxIndex9 = 0;\n        long minIndex9 = 0;\n        long
    maxVal9 = 0;\n        long minVal9 = 0;\n        long maxIndex10 = 0;\n        long
    minIndex10 = 0;\n        long maxVal10 = 0;\n        long minVal10 = 0;\n        long
    maxIndex11 = 0;\n        long minIndex11 = 0;\n        long maxVal11 = 0;\n        long
    minVal11 = 0;\n        long maxIndex12 = 0;\n        long minIndex12 = 0;\n        long
    maxVal12 = 0;\n        long minVal12 = 0;\n        long maxIndex13 = 0;\n        long
    minIndex13 = 0;\n        long maxVal13 = 0;\n        long minVal13 = 0;\n        long
    maxIndex14 = 0;\n        long minIndex14 = 0;\n        long maxVal14 = 0;\n        long
    minVal14 = 0;\n        long maxIndex15 = 0;\n        long minIndex15 = 0;\n        long
    maxVal15 = 0;\n        long minVal15 = 0;\n        long maxIndex16 = 0;\n        long
    minIndex16 = 0;\n        long maxVal16 = 0;\n        long minVal16 = 0;\n        long
    maxIndex17 = 0;\n        long minIndex17 = 0;\n        long maxVal17 = 0;\n        long
    minVal17 = 0;\n        long maxIndex18 = 0;\n        long minIndex18 = 0;\n        long
    maxVal18 = 0;\n        long minVal18 = 0;\n        long maxIndex19 = 0;\n        \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcc08g2kp.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpcc08g2kp.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmpcc08g2kp.cs(28,14): warning CS0219: The variable ''maxIndex'' is assigned
    but its value is never used

    /tmp/tmpcc08g2kp.cs(29,14): warning CS0219: The variable ''minIndex'' is assigned
    but its value is never used

    /tmp/tmpcc08g2kp.cs(30,14): warning CS0219: The variable ''maxVal'' is assigned
    but its value is never used

    /tmp/tmpcc08g2kp.cs(31,14): warning CS0219: The variable ''minVal'' is assigned
    but its value is never used

    /tmp/tmpcc08g2kp.cs(32,14): warning CS0219: The variable ''maxIndex2'' is assigned
    but its value is never used

    /tmp/tmpcc08g2kp.cs(33,14): warning CS0219: The variable ''minIndex2'' is assigned
    but its value is never used

    /tmp/tmpcc08g2kp.cs(34,14): warning CS0219: The variable ''maxVal2'' is assigned
    but its value is never used

    /tmp/tmpcc08g2kp.cs(35,14): warning CS0219: The variable ''minVal2'' is assigned
    but its value is never used

    /tmp/tmpcc08g2kp.cs(36,14): warning CS0219: The variable ''maxIndex3'' is assigned
    but its value is never used

    /tmp/tmpcc08g2kp.cs(37,14): warning CS0219: The variable ''minIndex3'' is assigned
    but its value is never used

    /tmp/tmpcc08g2kp.cs(38,14): warning CS0219: The variable ''maxVal3'' is assigned
    but its value is never used

    /tmp/tmpcc08g2kp.cs(39,14): warning CS0219: The variable ''minVal3'' is assigned
    but its value is never used

    /tmp/tmpcc08g2kp.cs(40,14): warning CS0219: The variable ''maxIndex4'' is assigned
    but its value is never used

    /tmp/tmpcc08g2kp.cs(41,14): warning CS0219: The variable ''minIndex4'' is assigned
    but its value is never used

    /tmp/tmpcc08g2kp.cs(42,14): warning CS0219: The variable ''maxVal4'' is assigned
    but its value is never used

    /tmp/tmpcc08g2kp.cs(43,14): warning CS0219: The variable ''minVal4'' is assigned
    but its value is ne'
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = arr[0];\n        long maxIndex = 0;\n        for (int i = 0;
    i < arr.Count; i++) {\n            if (arr[i] > max) {\n                max =
    arr[i];\n                maxIndex = i;\n            }\n        }\n        result.Add(max);\n
    \       if (maxIndex < k) {\n            List<long> newArr = new List<long>();\n
    \           for (int i = maxIndex; i < k; i++) {\n                newArr.Add(arr[i]);\n
    \           }\n            result = Maximum(newArr, k);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4jh34jct.cs(37,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823364
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long maxIndex = 0;\n        long maxValue = arr[0];\n
    \       long maxValueIndex = -1;\n        foreach (long i in arr) {\n            if
    (i > maxValue) {\n                maxValue = i;\n                maxValueIndex
    = i;\n            }\n            if (i == maxValue) {\n                maxIndex++;\n
    \           }\n            if (maxIndex == k) {\n                result.Add(maxValue);\n
    \               maxIndex = 0;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3698532934734aa2a51b96d87cb9f875>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3698532934734aa2a51b96d87cb9f875>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxValue = 0;\n        long minValue = 0;\n        long
    maxIndex2 = 0;\n        long minIndex2 = 0;\n        long maxValue2 = 0;\n        long
    minValue2 = 0;\n        long maxIndex3 = 0;\n        long minIndex3 = 0;\n        long
    maxValue3 = 0;\n        long minValue3 = 0;\n        long maxIndex4 = 0;\n        long
    minIndex4 = 0;\n        long maxValue4 = 0;\n        long minValue4 = 0;\n        long
    maxIndex5 = 0;\n        long minIndex5 = 0;\n        long maxValue5 = 0;\n        long
    minValue5 = 0;\n        long maxIndex6 = 0;\n        long minIndex6 = 0;\n        long
    maxValue6 = 0;\n        long minValue6 = 0;\n        long maxIndex7 = 0;\n        long
    minIndex7 = 0;\n        long maxValue7 = 0;\n        long minValue7 = 0;\n        long
    maxIndex8 = 0;\n        long minIndex8 = 0;\n        long maxValue8 = 0;\n        long
    minValue8 = 0;\n        long maxIndex9 = 0;\n        long minIndex9 = 0;\n        long
    maxValue9 = 0;\n        long minValue9 = 0;\n        long maxIndex10 = 0;\n        long
    minIndex10 = 0;\n        long maxValue10 = 0;\n        long minValue10 = 0;\n
    \       long maxIndex11 = 0;\n        long minIndex11 = 0;\n        long maxValue11
    = 0;\n        long minValue11 = 0;\n        long maxIndex12 = 0;\n        long
    minIndex12 = 0;\n        long maxValue12 = 0;\n        long minValue12 = 0;\n
    \       long maxIndex13 = 0;\n        long minIndex13 = 0;\n        long maxValue13
    = 0;\n        long minValue13 = 0;\n        long maxIndex14 = 0;\n        long
    minIndex14 = 0;\n        long maxValue14 = 0;\n        long minValue14 = 0;\n
    \       long maxIndex15 = 0;\n        long minIndex15 = 0;\n        long maxValue15
    = 0;\n        long minValue15 = 0;\n        long maxIndex16 = 0;\n        long
    minIndex16 = 0;\n        long maxValue16 = 0;\n        long minValue16 = 0;\n
    \       long maxIndex17 = 0;\n        long minIndex17 = 0;\n        long maxValue17
    = 0;\n        long minValue17 = 0;\n        long maxIndex18 = 0;\n        long
    minIndex18 = 0;\n        long maxValue18 = 0;\n        long minValue18 = 0;\n
    \       long maxIndex19 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnf934l_q.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpnf934l_q.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmpnf934l_q.cs(28,14): warning CS0219: The variable ''maxIndex'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(29,14): warning CS0219: The variable ''minIndex'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(30,14): warning CS0219: The variable ''maxValue'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(31,14): warning CS0219: The variable ''minValue'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(32,14): warning CS0219: The variable ''maxIndex2'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(33,14): warning CS0219: The variable ''minIndex2'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(34,14): warning CS0219: The variable ''maxValue2'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(35,14): warning CS0219: The variable ''minValue2'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(36,14): warning CS0219: The variable ''maxIndex3'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(37,14): warning CS0219: The variable ''minIndex3'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(38,14): warning CS0219: The variable ''maxValue3'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(39,14): warning CS0219: The variable ''minValue3'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(40,14): warning CS0219: The variable ''maxIndex4'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(41,14): warning CS0219: The variable ''minIndex4'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(42,14): warning CS0219: The variable ''maxValue4'' is assigned
    but its value is never used

    /tmp/tmpnf934l_q.cs(43,14): warning CS0219: The variable ''minValue4'' is assigned
    but'
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            count++;\n
    \           if (sum > max) {\n                max = sum;\n            }\n            if
    (sum < min) {\n                min = sum;\n            }\n        }\n        if
    (count > k) {\n            k = count;\n        }\n        if (k == 0) {\n            result.Add(max);\n
    \           return result;\n        }\n        long mid = min + (k - 1) / 2;\n
    \       long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4
    = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long
    mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n
    \       long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long
    mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long mid14 = mid13
    / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long
    mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18
    / 2;\n        long mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long
    mid22 = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23
    / 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long
    mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28
    / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n        long
    mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34 = mid33
    / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long
    mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38
    / 2;\n        long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long
    mid42 = mid41 / 2;\n        long mid43 = \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp76jbr_wl.cs(89,21): error CS1525: Invalid expression term ''}''

    /tmp/tmp76jbr_wl.cs(89,21): error CS1002: ; expected

    '
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       List<long> result = new List<long>();\n        long max = 0;\n        long
    min = 0;\n        long maxIndex = 0;\n        long minIndex = 0;\n        long
    maxValue = arr[0];\n        long minValue = arr[0];\n        long maxIndex = arr[0];\n
    \       long minIndex = arr[0];\n        foreach (long i in arr) {\n            if
    (i > maxValue) {\n                maxValue = i;\n                maxIndex = i;\n
    \           }\n            if (i < minValue) {\n                minValue = i;\n
    \               minIndex = i;\n            }\n            if (i == maxValue) {\n
    \               maxIndex++;\n            }\n            if (i == minValue) {\n
    \               minIndex++;\n            }\n            if (maxIndex > k) {\n
    \               result.Add(maxValue);\n                maxIndex--;\n                maxValue
    = arr[0];\n                maxIndex = arr[0];\n            }\n            if (minIndex
    > k) {\n                result.Add(minValue);\n                minIndex--;\n                minValue
    = arr[0];\n                minIndex = arr[0];\n            }\n            if (maxIndex
    < k) {\n                maxIndex++;\n            }\n            if (minIndex <
    k) {\n                minIndex++;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgmsp04ku.cs(33,14): error CS0128: A local variable or function named ''maxIndex''
    is already defined in this scope

    /tmp/tmpgmsp04ku.cs(34,14): error CS0128: A local variable or function named ''minIndex''
    is already defined in this scope

    /tmp/tmpgmsp04ku.cs(27,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpgmsp04ku.cs(28,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    '
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long max2 = 0;\n        long
    min2 = 0;\n        long max3 = 0;\n        long min3 = 0;\n        long max4 =
    0;\n        long min4 = 0;\n        long max5 = 0;\n        long min5 = 0;\n        long
    max6 = 0;\n        long min6 = 0;\n        long max7 = 0;\n        long min7 =
    0;\n        long max8 = 0;\n        long min8 = 0;\n        long max9 = 0;\n        long
    min9 = 0;\n        long max10 = 0;\n        long min10 = 0;\n        long max11
    = 0;\n        long min11 = 0;\n        long max12 = 0;\n        long min12 = 0;\n
    \       long max13 = 0;\n        long min13 = 0;\n        long max14 = 0;\n        long
    min14 = 0;\n        long max15 = 0;\n        long min15 = 0;\n        long max16
    = 0;\n        long min16 = 0;\n        long max17 = 0;\n        long min17 = 0;\n
    \       long max18 = 0;\n        long min18 = 0;\n        long max19 = 0;\n        long
    min19 = 0;\n        long max20 = 0;\n        long min20 = 0;\n        long max21
    = 0;\n        long min21 = 0;\n        long max22 = 0;\n        long min22 = 0;\n
    \       long max23 = 0;\n        long min23 = 0;\n        long max24 = 0;\n        long
    min24 = 0;\n        long max25 = 0;\n        long min25 = 0;\n        long max26
    = 0;\n        long min26 = 0;\n        long max27 = 0;\n        long min27 = 0;\n
    \       long max28 = 0;\n        long min28 = 0;\n        long max29 = 0;\n        long
    min29 = 0;\n        long max30 = 0;\n        long min30 = 0;\n        long max31
    = 0;\n        long min31 = 0;\n        long max32 = 0;\n        long min32 = 0;\n
    \       long max33 = 0;\n        long min33 = 0;\n        long max34 = 0;\n        long
    min34 = 0;\n        long max35 = 0;\n        long min35 = 0;\n        long max36
    = 0;\n        long min36 = 0;\n        long max37 = 0;\n        long min37 = 0;\n
    \       long max38 = 0;\n        long min38 = 0;\n        long max39 = 0;\n        long
    min39 = 0;\n        long max40 = 0;\n        long min40 = 0;\n        long max41
    = 0;\n        long min41 = 0;\n        long max42 = 0;\n        long min42 = 0;\n
    \       long max43 = 0;\n        long \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdkwa3v6v.cs(111,13): error CS1001: Identifier expected

    /tmp/tmpdkwa3v6v.cs(111,13): error CS1002: ; expected

    '
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = arr[0];\n        List<long>
    result = new List<long>();\n        foreach (long i in arr) {\n            if
    (i > max) {\n                max = i;\n            }\n        }\n        long
    curMax = max;\n        long curMaxIndex = 0;\n        long curMaxValue = max;\n
    \       long curMaxIndexValue = max;\n        long curMaxIndexValue2 = max;\n
    \       long curMaxIndexValue3 = max;\n        long curMaxIndexValue4 = max;\n
    \       long curMaxIndexValue5 = max;\n        long curMaxIndexValue6 = max;\n
    \       long curMaxIndexValue7 = max;\n        long curMaxIndexValue8 = max;\n
    \       long curMaxIndexValue9 = max;\n        long curMaxIndexValue10 = max;\n
    \       long curMaxIndexValue11 = max;\n        long curMaxIndexValue12 = max;\n
    \       long curMaxIndexValue13 = max;\n        long curMaxIndexValue14 = max;\n
    \       long curMaxIndexValue15 = max;\n        long curMaxIndexValue16 = max;\n
    \       long curMaxIndexValue17 = max;\n        long curMaxIndexValue18 = max;\n
    \       long curMaxIndexValue19 = max;\n        long curMaxIndexValue20 = max;\n
    \       long curMaxIndexValue21 = max;\n        long curMaxIndexValue22 = max;\n
    \       long curMaxIndexValue23 = max;\n        long curMaxIndexValue24 = max;\n
    \       long curMaxIndexValue25 = max;\n        long curMaxIndexValue26 = max;\n
    \       long curMaxIndexValue27 = max;\n        long curMaxIndexValue28 = max;\n
    \       long curMaxIndexValue29 = max;\n        long curMaxIndexValue30 = max;\n
    \       long curMaxIndexValue31 = max;\n        long curMaxIndexValue32 = max;\n
    \       long curMaxIndexValue33 = max;\n        long curMaxIndexValue34 = max;\n
    \       long curMaxIndexValue35 = max;\n        long curMaxIndexValue36 = max;\n
    \       long curMaxIndexValue37 = max;\n        long curMaxIndexValue38 = max;\n
    \       long curMaxIndexValue39 = max;\n        long curMaxIndexValue40 = max;\n
    \       long curMaxIndexValue41 = max;\n        long curMaxIndexValue42 = max;\n
    \       long curMax\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiuoo2bnq.cs(77,20): error CS1002: ; expected

    '
  timestamp: 1659823364
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        foreach
    (long i in arr) {\n            sum += i;\n            if (sum > max) {\n                max
    = sum;\n            }\n            if (sum < min) {\n                min = sum;\n
    \           }\n        }\n        long mid = min + (max - min) / 2;\n        long
    sum2 = 0;\n        foreach (long i in arr) {\n            sum2 += i;\n            if
    (sum2 > mid) {\n                result.Add(i);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad399f59d8034252b48b778e730de08c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad399f59d8034252b48b778e730de08c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long> result
    = new List<long>();\n        foreach (long i in arr) {\n            if (i > max)
    {\n                max = i;\n            }\n        }\n        if (k > max) {\n
    \           k = max;\n        }\n        long temp = 0;\n        long temp2 =
    0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n
    \       long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long
    temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12
    = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15
    = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18
    = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21
    = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24
    = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27
    = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30
    = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33
    = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36
    = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39
    = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42
    = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45
    = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48
    = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51
    = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54
    = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57
    = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n        long temp60
    = 0;\n        long temp61 = 0;\n        long temp62 = 0;\n        long temp63
    = 0;\n        long temp64 = 0;\n        long temp65 = 0;\n        long temp66
    = 0;\n        long temp67 = 0;\n        long temp68 = 0;\n        long temp69
    = 0;\n        long temp70 = 0;\n        long temp71 = 0;\n        long temp72
    = 0;\n        long temp73 = 0;\n        long temp74 = 0;\n        long temp75
    = 0;\n        long temp76 = 0;\n        long temp77 = 0;\n        long temp78
    = 0;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl322fvr4.cs(35,14): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(36,14): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(37,14): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(38,14): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(39,14): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(40,14): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(41,14): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(42,14): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(43,14): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(44,14): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(45,14): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(46,14): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(47,14): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(48,14): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(49,14): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(50,14): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(51,14): warning CS0219: The variable ''temp17'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(52,14): warning CS0219: The variable ''temp18'' is assigned
    but its value is never used

    /tmp/tmpl322fvr4.cs(53,'
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        long maxIndex = 0;\n        foreach
    (long i in arr) {\n            if (i == cur) {\n                max++;\n            }
    else {\n                if (max > k) {\n                    maxIndex = max;\n
    \               }\n                max = 1;\n                cur = i;\n            }\n
    \       }\n        if (max > k) {\n            maxIndex = max;\n        }\n        result.Add(arr[maxIndex]);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzy_ezhe2.cs(43,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxVal = 0;\n        long minVal = 0;\n        long
    maxCount = 0;\n        long minCount = 0;\n        long maxCount2 = 0;\n        long
    minCount2 = 0;\n        long maxCount3 = 0;\n        long minCount3 = 0;\n        long
    maxCount4 = 0;\n        long minCount4 = 0;\n        long maxCount5 = 0;\n        long
    minCount5 = 0;\n        long maxCount6 = 0;\n        long minCount6 = 0;\n        long
    maxCount7 = 0;\n        long minCount7 = 0;\n        long maxCount8 = 0;\n        long
    minCount8 = 0;\n        long maxCount9 = 0;\n        long minCount9 = 0;\n        long
    maxCount10 = 0;\n        long minCount10 = 0;\n        long maxCount11 = 0;\n
    \       long minCount11 = 0;\n        long maxCount12 = 0;\n        long minCount12
    = 0;\n        long maxCount13 = 0;\n        long minCount13 = 0;\n        long
    maxCount14 = 0;\n        long minCount14 = 0;\n        long maxCount15 = 0;\n
    \       long minCount15 = 0;\n        long maxCount16 = 0;\n        long minCount16
    = 0;\n        long maxCount17 = 0;\n        long minCount17 = 0;\n        long
    maxCount18 = 0;\n        long minCount18 = 0;\n        long maxCount19 = 0;\n
    \       long minCount19 = 0;\n        long maxCount20 = 0;\n        long minCount20
    = 0;\n        long maxCount21 = 0;\n        long minCount21 = 0;\n        long
    maxCount22 = 0;\n        long minCount22 = 0;\n        long maxCount23 = 0;\n
    \       long minCount23 = 0;\n        long maxCount24 = 0;\n        long minCount24
    = 0;\n        long maxCount25 = 0;\n        long minCount25 = 0;\n        long
    maxCount26 = 0;\n        long minCount26 = 0;\n        long maxCount27 = 0;\n
    \       long minCount27 = 0;\n        long maxCount28 = 0;\n        long minCount28
    = 0;\n        long maxCount29 = 0;\n        long minCount29 = 0;\n        long
    maxCount30 = 0;\n        long minCount30 = 0;\n        long maxCount31 = 0;\n
    \       long minCount31 = 0;\n        long maxCount32 = 0;\n        long minCount32
    = 0;\n        long maxCount33 = 0;\n        long minCount33 = 0;\n        long
    maxCount34 = 0;\n        long minCount34 = 0;\n        long \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuu8p3r_7.cs(100,13): error CS1001: Identifier expected

    /tmp/tmpuu8p3r_7.cs(100,13): error CS1002: ; expected

    '
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long> result
    = new List<long>();\n        foreach (long i in arr) {\n            if (max <
    i) {\n                max = i;\n            }\n        }\n        if (max < k)
    {\n            max = k;\n        }\n        long cur = 0;\n        long curMax
    = 0;\n        long curMaxIndex = 0;\n        long curMaxIndex2 = 0;\n        long
    curMaxIndex3 = 0;\n        long curMaxIndex4 = 0;\n        long curMaxIndex5 =
    0;\n        long curMaxIndex6 = 0;\n        long curMaxIndex7 = 0;\n        long
    curMaxIndex8 = 0;\n        long curMaxIndex9 = 0;\n        long curMaxIndex10
    = 0;\n        long curMaxIndex11 = 0;\n        long curMaxIndex12 = 0;\n        long
    curMaxIndex13 = 0;\n        long curMaxIndex14 = 0;\n        long curMaxIndex15
    = 0;\n        long curMaxIndex16 = 0;\n        long curMaxIndex17 = 0;\n        long
    curMaxIndex18 = 0;\n        long curMaxIndex19 = 0;\n        long curMaxIndex20
    = 0;\n        long curMaxIndex21 = 0;\n        long curMaxIndex22 = 0;\n        long
    curMaxIndex23 = 0;\n        long curMaxIndex24 = 0;\n        long curMaxIndex25
    = 0;\n        long curMaxIndex26 = 0;\n        long curMaxIndex27 = 0;\n        long
    curMaxIndex28 = 0;\n        long curMaxIndex29 = 0;\n        long curMaxIndex30
    = 0;\n        long curMaxIndex31 = 0;\n        long curMaxIndex32 = 0;\n        long
    curMaxIndex33 = 0;\n        long curMaxIndex34 = 0;\n        long curMaxIndex35
    = 0;\n        long curMaxIndex36 = 0;\n        long curMaxIndex37 = 0;\n        long
    curMaxIndex38 = 0;\n        long curMaxIndex39 = 0;\n        long curMaxIndex40
    = 0;\n        long curMaxIndex41 = 0;\n        long curMaxIndex42 = 0;\n        long
    curMaxIndex43 = 0;\n        long curMaxIndex44 = 0;\n        long curMaxIndex45
    = 0;\n        long curMaxIndex46 = 0;\n        long curMaxIndex47 = 0;\n        long
    curMaxIndex48 = 0;\n        long curMaxIndex49 = 0;\n        long curMaxIndex50
    = 0;\n        long curMaxIndex51 = 0;\n        long curMaxIndex52 = 0;\n        long
    curMaxIndex53 = 0;\n        long curMaxIndex54 = 0;\n        long curMaxIndex55
    = 0;\n        long curMaxIndex56 = 0;\n        long curMaxIndex57 = 0;\n        long
    cur\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt7d2a4qn.cs(94,17): error CS1002: ; expected

    '
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count < k) {\n            return
    arr;\n        }\n        List<long> res = new List<long>();\n        long max
    = 0;\n        long min = 0;\n        long max2 = 0;\n        long min2 = 0;\n
    \       long max3 = 0;\n        long min3 = 0;\n        long max4 = 0;\n        long
    min4 = 0;\n        long max5 = 0;\n        long min5 = 0;\n        long max6 =
    0;\n        long min6 = 0;\n        long max7 = 0;\n        long min7 = 0;\n        long
    max8 = 0;\n        long min8 = 0;\n        long max9 = 0;\n        long min9 =
    0;\n        long max10 = 0;\n        long min10 = 0;\n        long max11 = 0;\n
    \       long min11 = 0;\n        long max12 = 0;\n        long min12 = 0;\n        long
    max13 = 0;\n        long min13 = 0;\n        long max14 = 0;\n        long min14
    = 0;\n        long max15 = 0;\n        long min15 = 0;\n        long max16 = 0;\n
    \       long min16 = 0;\n        long max17 = 0;\n        long min17 = 0;\n        long
    max18 = 0;\n        long min18 = 0;\n        long max19 = 0;\n        long min19
    = 0;\n        long max20 = 0;\n        long min20 = 0;\n        long max21 = 0;\n
    \       long min21 = 0;\n        long max22 = 0;\n        long min22 = 0;\n        long
    max23 = 0;\n        long min23 = 0;\n        long max24 = 0;\n        long min24
    = 0;\n        long max25 = 0;\n        long min25 = 0;\n        long max26 = 0;\n
    \       long min26 = 0;\n        long max27 = 0;\n        long min27 = 0;\n        long
    max28 = 0;\n        long min28 = 0;\n        long max29 = 0;\n        long min29
    = 0;\n        long max30 = 0;\n        long min30 = 0;\n        long max31 = 0;\n
    \       long min31 = 0;\n        long max32 = 0;\n        long min32 = 0;\n        long
    max33 = 0;\n        long min33 = 0;\n        long max34 = 0;\n        long min34
    = 0;\n        long max35 = 0;\n        long min35 = 0;\n        long max36 = 0;\n
    \       long min36 = 0;\n        long max37 = 0;\n        long min37 = 0;\n        long
    max38 = 0;\n        long min38 = 0;\n        long max39 = 0;\n        long min39
    = 0;\n        long max40 = 0;\n        long min40 = 0;\n        long max41 = 0;\n
    \       long min41 = 0;\n        long max42 = 0;\n        \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp43k7vmdr.cs(29,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmp43k7vmdr.cs(30,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmp43k7vmdr.cs(31,14): warning CS0219: The variable ''max2'' is assigned
    but its value is never used

    /tmp/tmp43k7vmdr.cs(32,14): warning CS0219: The variable ''min2'' is assigned
    but its value is never used

    /tmp/tmp43k7vmdr.cs(33,14): warning CS0219: The variable ''max3'' is assigned
    but its value is never used

    /tmp/tmp43k7vmdr.cs(34,14): warning CS0219: The variable ''min3'' is assigned
    but its value is never used

    /tmp/tmp43k7vmdr.cs(35,14): warning CS0219: The variable ''max4'' is assigned
    but its value is never used

    /tmp/tmp43k7vmdr.cs(36,14): warning CS0219: The variable ''min4'' is assigned
    but its value is never used

    /tmp/tmp43k7vmdr.cs(37,14): warning CS0219: The variable ''max5'' is assigned
    but its value is never used

    /tmp/tmp43k7vmdr.cs(38,14): warning CS0219: The variable ''min5'' is assigned
    but its value is never used

    /tmp/tmp43k7vmdr.cs(39,14): warning CS0219: The variable ''max6'' is assigned
    but its value is never used

    /tmp/tmp43k7vmdr.cs(40,14): warning CS0219: The variable ''min6'' is assigned
    but its value is never used

    /tmp/tmp43k7vmdr.cs(41,14): warning CS0219: The variable ''max7'' is assigned
    but its value is never used

    /tmp/tmp43k7vmdr.cs(42,14): warning CS0219: The variable ''min7'' is assigned
    but its value is never used

    /tmp/tmp43k7vmdr.cs(43,14): warning CS0219: The variable ''max8'' is assigned
    but its value is never used

    /tmp/tmp43k7vmdr.cs(44,14): warning CS0219: The variable ''min8'' is assigned
    but its value is never used

    /tmp/tmp43k7vmdr.cs(45,14): warning CS0219: The variable ''max9'' is assigned
    but its value is never used

    /tmp/tmp43k7vmdr.cs(46,14): warning CS0219: The variable ''min9'' is assigned
    but its value is never used

    /tmp/tmp43k7vmdr.cs(47,14): warning CS0219: The var'
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long maxIndex = 0;\n        long maxValue = arr[0];\n
    \       long maxValueIndex = -1;\n        foreach (long i in arr) {\n            if
    (i > maxValue) {\n                maxValue = i;\n                maxValueIndex
    = i;\n            }\n            if (i == maxValue) {\n                maxIndex++;\n
    \           }\n        }\n        long currentMax = maxValue;\n        long currentMaxIndex
    = maxValueIndex;\n        long currentMaxValue = maxValue;\n        long currentMaxValueIndex
    = maxValueIndex;\n        long currentMaxIndex = maxValueIndex;\n        long
    currentMaxValue = maxValue;\n        long currentMaxValueIndex = maxValueIndex;\n
    \       long currentMaxIndex = maxValueIndex;\n        long currentMaxValue =
    maxValue;\n        long currentMaxValueIndex = maxValueIndex;\n        long currentMaxIndex
    = maxValueIndex;\n        long currentMaxValue = maxValue;\n        long currentMaxValueIndex
    = maxValueIndex;\n        long currentMaxIndex = maxValueIndex;\n        long
    currentMaxValue = maxValue;\n        long currentMaxValueIndex = maxValueIndex;\n
    \       long currentMaxIndex = maxValueIndex;\n        long currentMaxValue =
    maxValue;\n        long currentMaxValueIndex = maxValueIndex;\n        long currentMaxIndex
    = maxValueIndex;\n        long currentMaxValue = maxValue;\n        long currentMaxValueIndex
    = maxValueIndex;\n        long currentMaxIndex = maxValueIndex;\n        long
    currentMaxValue = maxValue;\n        long currentMaxValueIndex = maxValueIndex;\n
    \       long currentMaxIndex = maxValueIndex;\n        long currentMaxValue =
    maxValue;\n        long currentMaxValueIndex = maxValueIndex;\n        long currentMaxIndex
    = maxValueIndex;\n        long currentMaxValue = maxValue;\n        long currentMaxValueIndex
    = maxValueIndex;\n        long currentMaxIndex = maxValueIndex;\n        long
    currentMaxValue = maxValue;\n        long currentMaxValueIndex = maxValueIndex;\n
    \       long currentMaxIndex = maxValueIndex;\n        long currentMaxValue =
    maxValue;\n        long currentMaxValueIndex = maxValueIndex;\n        long currentMaxIndex
    = maxValueIndex;\n        long currentMaxValue = maxValue;\n        long currentMaxValueIndex
    = maxValueIndex;\n        long currentMaxIndex = maxValueIndex;\n        long
    currentMaxValue = maxValue;\n        long currentMaxValueIndex = maxValueIndex;\n
    \       long currentMaxIndex = maxValueIndex;\n        long currentMaxValue =
    maxValue;\n        long currentMaxValueIndex = maxValueIndex;\n        long currentMaxIndex
    = maxValueIndex;\n        long currentMaxValue = maxValue;\n        long currentMaxValueIndex
    = maxValue\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsltcfuh5.cs(87,45): error CS1002: ; expected

    '
  timestamp: 1659823364
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count < k) {\n            throw
    new ArgumentOutOfRangeException(\"k\");\n        }\n        List<long> res = new
    List<long>();\n        long max = 0;\n        long min = 0;\n        long sum
    = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > max) {\n                max = sum;\n            }\n            if (sum
    < min) {\n                min = sum;\n            }\n        }\n        long mid
    = min + (max - min) / 2;\n        long sum2 = 0;\n        foreach (long i in arr)
    {\n            sum2 += i;\n            if (sum2 > mid) {\n                res.Add(i);\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fdeeea45f2ed445aaa9a8effe9b500dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fdeeea45f2ed445aaa9a8effe9b500dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = arr[0];\n        List<long>
    result = new List<long>();\n        foreach (long i in arr) {\n            if
    (i > max) {\n                max = i;\n            }\n        }\n        if (k
    > max) {\n            k = max;\n        }\n        long maxIndex = 0;\n        long
    maxValue = max;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] > maxValue) {\n                maxValue = arr[i];\n                maxIndex
    = i;\n            }\n        }\n        result.Add(maxValue);\n        for (int
    i = maxIndex + 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n
    \               result.Add(arr[i]);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprfmsi1nj.cs(44,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823364
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        foreach (long i in arr)
    {\n            if (max < i) {\n                max = i;\n                cur =
    i;\n            }\n            if (cur == k) {\n                result.Add(max);\n
    \               max = 0;\n                cur = 0;\n            }\n        }\n
    \       if (max != 0) {\n            result.Add(max);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9066239d92e49c8888dcf8d81e95c0b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9066239d92e49c8888dcf8d81e95c0b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        long max = 0;\n        long temp = 0;\n        long
    temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5
    = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n
    \       long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n
    \       long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n
    \       long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n
    \       long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n
    \       long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n
    \       long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n
    \       long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n
    \       long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n
    \       long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n
    \       long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n
    \       long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n
    \       long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n
    \       long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n
    \       long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n
    \       long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n
    \       long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n
    \       long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n
    \       long temp60 = 0;\n        long temp61 = 0;\n        long temp62 = 0;\n
    \       long temp63 = 0;\n        long temp64 = 0;\n        long temp65 = 0;\n
    \       long temp66 = 0;\n        long temp67 = 0;\n        long temp68 = 0;\n
    \       long temp69 = 0;\n        long temp70 = 0;\n        long temp71 = 0;\n
    \       long temp72 = 0;\n        long temp73 = 0;\n        long temp74 = 0;\n
    \       long temp75 = 0;\n        long temp76 = 0;\n        long temp77 = 0;\n
    \       long temp78 = 0;\n        long temp79 = 0;\n        long temp80 = 0;\n
    \       long temp81 = 0;\n        long temp82 = 0;\n        long temp\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfw0fk7w1.cs(110,18): error CS1002: ; expected

    '
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > k) {\n                max = sum;\n                min = i;\n                count
    = 1;\n            } else if (sum < k) {\n                max = sum;\n                min
    = i;\n                count = 1;\n            } else {\n                count++;\n
    \           }\n        }\n        if (count > k) {\n            max = sum;\n            min
    = arr.Max();\n            count = 1;\n        }\n        if (count < k) {\n            max
    = arr.Max();\n            min = sum;\n            count = 1;\n        }\n        if
    (count > k) {\n            max = arr.Max();\n            min = sum;\n            count
    = 1;\n        }\n        if (count < k) {\n            max = arr.Max();\n            min
    = sum;\n            count = 1;\n        }\n        if (count > k) {\n            max
    = arr.Max();\n            min = sum;\n            count = 1;\n        }\n        if
    (count < k) {\n            max = arr.Max();\n            min = sum;\n            count
    = 1;\n        }\n        if (count > k) {\n            max = arr.Max();\n            min
    = sum;\n            count = 1;\n        }\n        if (count < k) {\n            max
    = arr.Max();\n            min = sum;\n            count = 1;\n        }\n        if
    (count > k) {\n            max = arr.Max();\n            min = sum;\n            count
    = 1;\n        }\n        if (count < k) {\n            max = arr.Max();\n            min
    = sum;\n            count = 1;\n        }\n        if (count > k) {\n            max
    = arr.Max();\n            min = sum;\n            count = 1;\n        }\n        if
    (count < k) {\n            max = arr.Max();\n            min = sum;\n            count
    = 1;\n        }\n        if (count > k) {\n            max = arr.Max();\n            min
    = sum;\n            count = 1;\n        }\n        if (count < k) {\n            max
    = arr.Max();\n            min = sum;\n            count = 1;\n        }\n        if
    (count > k) {\n            max = arr.Max();\n            min = sum;\n            count
    = 1;\n        }\n        if (count < k) {\n            max = arr.Max();\n            min
    = sum;\n            count = 1;\n        }\n        if (count > k) {\n            max
    = arr.Max();\n            min = sum;\n            count = 1;\n        }\n        if
    (count < k) {\n            max = arr.Max();\n            min = sum;\n            count
    = 1;\n        }\n        if (count > k) {\n            max = arr.Max\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn3ral1ku.cs(135,26): error CS1002: ; expected

    /tmp/tmpn3ral1ku.cs(137,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpn3ral1ku.cs(151,2): error CS1513: } expected

    '
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 1000;\n        long maxIndex = 0;\n
    \       long minIndex = 0;\n        long sum = 0;\n        long count = 0;\n        long
    temp = 0;\n        bool flag = false;\n        foreach (long i in arr) {\n            sum
    += i;\n            if (sum > k) {\n                flag = true;\n                break;\n
    \           }\n        }\n        if (flag) {\n            max = sum;\n            maxIndex
    = arr.IndexOf(max);\n            min = arr.IndexOf(min);\n            foreach
    (long i in arr) {\n                if (i == max) {\n                    maxIndex
    = arr.IndexOf(i);\n                }\n                if (i == min) {\n                    minIndex
    = arr.IndexOf(i);\n                }\n            }\n            foreach (long
    i in arr) {\n                if (i == max) {\n                    temp = maxIndex;\n
    \               }\n                if (i == min) {\n                    temp =
    minIndex;\n                }\n                result.Add(i);\n            }\n
    \           foreach (long i in arr) {\n                if (i == max) {\n                    result.RemoveAt(temp);\n
    \               }\n                if (i == min) {\n                    result.RemoveAt(temp);\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp766x9wvt.cs(64,37): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp766x9wvt.cs(67,37): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp766x9wvt.cs(31,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    '
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxValue = 0;\n        long minValue = 0;\n        long
    maxIndexValue = 0;\n        long minIndexValue = 0;\n        long maxValue2 =
    0;\n        long minValue2 = 0;\n        long maxIndexValue2 = 0;\n        long
    minIndexValue2 = 0;\n        long maxValue3 = 0;\n        long minValue3 = 0;\n
    \       long maxIndexValue3 = 0;\n        long minIndexValue3 = 0;\n        long
    maxValue4 = 0;\n        long minValue4 = 0;\n        long maxIndexValue4 = 0;\n
    \       long minIndexValue4 = 0;\n        long maxValue5 = 0;\n        long minValue5
    = 0;\n        long maxIndexValue5 = 0;\n        long minIndexValue5 = 0;\n        long
    maxValue6 = 0;\n        long minValue6 = 0;\n        long maxIndexValue6 = 0;\n
    \       long minIndexValue6 = 0;\n        long maxValue7 = 0;\n        long minValue7
    = 0;\n        long maxIndexValue7 = 0;\n        long minIndexValue7 = 0;\n        long
    maxValue8 = 0;\n        long minValue8 = 0;\n        long maxIndexValue8 = 0;\n
    \       long minIndexValue8 = 0;\n        long maxValue9 = 0;\n        long minValue9
    = 0;\n        long maxIndexValue9 = 0;\n        long minIndexValue9 = 0;\n        long
    maxValue10 = 0;\n        long minValue10 = 0;\n        long maxIndexValue10 =
    0;\n        long minIndexValue10 = 0;\n        long maxValue11 = 0;\n        long
    minValue11 = 0;\n        long maxIndexValue11 = 0;\n        long minIndexValue11
    = 0;\n        long maxValue12 = 0;\n        long minValue12 = 0;\n        long
    maxIndexValue12 = 0;\n        long minIndexValue12 = 0;\n        long maxValue13
    = 0;\n        long minValue13 = 0;\n        long maxIndexValue13 = 0;\n        long
    minIndexValue13 = 0;\n        long maxValue14 = 0;\n        long minValue14 =
    0;\n        long maxIndexValue14 = 0;\n        long minIndexValue14 = 0;\n        long
    maxValue15 = 0;\n        long minValue15 = 0;\n        long maxIndexValue15 =
    0;\n        long minIndexValue15 = 0;\n        long maxValue16 = 0;\n        long
    minValue16 = 0;\n        long maxIndexValue16 = 0;\n        long minIndexValue16
    = 0;\n        long maxValue17 = 0;\n        long minValue17 = 0;\n        long
    maxIndexValue17\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz3y92ugv.cs(96,29): error CS1002: ; expected

    '
  timestamp: 1659823364
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long maxIndex = 0;\n        long maxValue = 0;\n
    \       foreach (long i in arr) {\n            if (i > maxValue) {\n                maxValue
    = i;\n                maxIndex = i;\n            }\n            if (i == maxValue)
    {\n                maxIndex++;\n            }\n            if (maxIndex > k) {\n
    \               break;\n            }\n        }\n        result.Add(maxValue);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc01c084582b432183c40399294056ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc01c084582b432183c40399294056ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823365
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        foreach (long i in arr)
    {\n            if (max < i) {\n                max = i;\n                cur =
    i;\n            }\n            if (cur == k) {\n                res.Add(max);\n
    \               max = 0;\n                cur = 0;\n            }\n        }\n
    \       if (max > 0) {\n            res.Add(max);\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17acfb95ddca4b099224c2f51b865a18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17acfb95ddca4b099224c2f51b865a18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823365
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > k) {\n                max = sum;\n                min = i;\n                count
    = 1;\n            } else if (sum < k) {\n                max = sum;\n                min
    = i;\n                count = 1;\n            } else if (sum == k) {\n                if
    (count < k) {\n                    max = sum;\n                    min = i;\n
    \                   count++;\n                } else {\n                    result.Add(max);\n
    \                   max = sum;\n                    min = i;\n                    count
    = 1;\n                }\n            }\n        }\n        result.Add(max);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74d4991f3d4d43efab5cae9d8d881183>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74d4991f3d4d43efab5cae9d8d881183>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        long max2 = 0;\n        long
    cur2 = 0;\n        long max3 = 0;\n        long cur3 = 0;\n        long max4 =
    0;\n        long cur4 = 0;\n        long max5 = 0;\n        long cur5 = 0;\n        long
    max6 = 0;\n        long cur6 = 0;\n        long max7 = 0;\n        long cur7 =
    0;\n        long max8 = 0;\n        long cur8 = 0;\n        long max9 = 0;\n        long
    cur9 = 0;\n        long max10 = 0;\n        long cur10 = 0;\n        long max11
    = 0;\n        long cur11 = 0;\n        long max12 = 0;\n        long cur12 = 0;\n
    \       long max13 = 0;\n        long cur13 = 0;\n        long max14 = 0;\n        long
    cur14 = 0;\n        long max15 = 0;\n        long cur15 = 0;\n        long max16
    = 0;\n        long cur16 = 0;\n        long max17 = 0;\n        long cur17 = 0;\n
    \       long max18 = 0;\n        long cur18 = 0;\n        long max19 = 0;\n        long
    cur19 = 0;\n        long max20 = 0;\n        long cur20 = 0;\n        long max21
    = 0;\n        long cur21 = 0;\n        long max22 = 0;\n        long cur22 = 0;\n
    \       long max23 = 0;\n        long cur23 = 0;\n        long max24 = 0;\n        long
    cur24 = 0;\n        long max25 = 0;\n        long cur25 = 0;\n        long max26
    = 0;\n        long cur26 = 0;\n        long max27 = 0;\n        long cur27 = 0;\n
    \       long max28 = 0;\n        long cur28 = 0;\n        long max29 = 0;\n        long
    cur29 = 0;\n        long max30 = 0;\n        long cur30 = 0;\n        long max31
    = 0;\n        long cur31 = 0;\n        long max32 = 0;\n        long cur32 = 0;\n
    \       long max33 = 0;\n        long cur33 = 0;\n        long max34 = 0;\n        long
    cur34 = 0;\n        long max35 = 0;\n        long cur35 = 0;\n        long max36
    = 0;\n        long cur36 = 0;\n        long max37 = 0;\n        long cur37 = 0;\n
    \       long max38 = 0;\n        long cur38 = 0;\n        long max39 = 0;\n        long
    cur39 = 0;\n        long max40 = 0;\n        long cur40 = 0;\n        long max41
    = 0;\n        long cur41 = 0;\n        long max42 = 0;\n        long cur42 = 0;\n
    \       long max43 = 0;\n        long \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2cx6ywts.cs(111,13): error CS1001: Identifier expected

    /tmp/tmp2cx6ywts.cs(111,13): error CS1002: ; expected

    '
  timestamp: 1659793737
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        long max2 = 0;\n        long
    cur2 = 0;\n        long max3 = 0;\n        long cur3 = 0;\n        foreach (long
    i in arr) {\n            if (max < i) {\n                max = i;\n                cur
    = i;\n            }\n            if (max2 < i) {\n                max2 = i;\n
    \               cur2 = i;\n            }\n            if (max3 < i) {\n                max3
    = i;\n                cur3 = i;\n            }\n        }\n        if (k == 1)
    {\n            res.Add(max);\n            return res;\n        }\n        if (k
    == 2) {\n            res.Add(max2);\n            return res;\n        }\n        if
    (k == 3) {\n            res.Add(max3);\n            return res;\n        }\n        long
    max4 = 0;\n        long cur4 = 0;\n        long max5 = 0;\n        long cur5 =
    0;\n        long max6 = 0;\n        long cur6 = 0;\n        long max7 = 0;\n        long
    cur7 = 0;\n        long max8 = 0;\n        long cur8 = 0;\n        long max9 =
    0;\n        long cur9 = 0;\n        long max10 = 0;\n        long cur10 = 0;\n
    \       long max11 = 0;\n        long cur11 = 0;\n        long max12 = 0;\n        long
    cur12 = 0;\n        long max13 = 0;\n        long cur13 = 0;\n        long max14
    = 0;\n        long cur14 = 0;\n        long max15 = 0;\n        long cur15 = 0;\n
    \       long max16 = 0;\n        long cur16 = 0;\n        long max17 = 0;\n        long
    cur17 = 0;\n        long max18 = 0;\n        long cur18 = 0;\n        long max19
    = 0;\n        long cur19 = 0;\n        long max20 = 0;\n        long cur20 = 0;\n
    \       long max21 = 0;\n        long cur21 = 0;\n        long max22 = 0;\n        long
    cur22 = 0;\n        long max23 = 0;\n        long cur23 = 0;\n        long max24
    = 0;\n        long cur24 = 0;\n        long max25 = 0;\n        long cur25 = 0;\n
    \       long max26 = 0;\n        long cur26 = 0;\n        long max27 = 0;\n        long
    cur27 = 0;\n        long max28 = 0;\n        long cur28 = 0;\n        long max29
    = 0;\n        long cur29 = 0;\n        long max30 = 0;\n        long cur30 = 0;\n
    \       long max31 = 0;\n        long cur31 = 0;\n        long max32 = 0;\n        long
    cur32 = 0;\n        long max33 = 0;\n        long cur33 = 0;\n        long max34
    = 0;\n        long cur\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptonphvq8.cs(119,17): error CS1002: ; expected

    '
  timestamp: 1659823364
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > k) {\n                max = sum;\n                min = i;\n                count
    = 1;\n            } else if (sum == k) {\n                if (i > k) {\n                    max
    = i;\n                    min = sum;\n                    count = 1;\n                }
    else {\n                    max = sum;\n                    min = i;\n                    count
    = 1;\n                }\n            }\n        }\n        if (count > 1) {\n
    \           List<long> temp = new List<long>();\n            while (count > 1)
    {\n                temp.Add(min);\n                count--;\n            }\n            temp.Add(max);\n
    \           foreach (long i in temp) {\n                res.Add(i);\n            }\n
    \       } else {\n            res.Add(max);\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b02d70f052104f6d9ef319b56cb99222>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b02d70f052104f6d9ef319b56cb99222>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxValue = arr[0];\n        long minValue = arr[0];\n
    \       long maxIndexValue = 0;\n        long minIndexValue = 0;\n        bool
    isMax = true;\n        bool isMin = true;\n        bool isMaxIndex = true;\n        bool
    isMinIndex = true;\n        bool isMaxValue = true;\n        bool isMinValue =
    true;\n        bool isMaxIndexValue = true;\n        bool isMinIndexValue = true;\n
    \       bool isMaxIndexMin = true;\n        bool isMinIndexMin = true;\n        bool
    isMaxIndexMax = true;\n        bool isMinIndexMax = true;\n        bool isMaxIndexMinIndex
    = true;\n        bool isMinIndexMinIndex = true;\n        bool isMaxIndexMaxIndex
    = true;\n        bool isMinIndexMaxIndex = true;\n        bool isMaxIndexMinIndexValue
    = true;\n        bool isMinIndexMinIndexValue = true;\n        bool isMaxIndexMaxIndexValue
    = true;\n        bool isMinIndexMaxIndexValue = true;\n        bool isMaxIndexMinIndexMin
    = true;\n        bool isMinIndexMinIndexMin = true;\n        bool isMaxIndexMaxIndexMin
    = true;\n        bool isMinIndexMaxIndexMin = true;\n        bool isMaxIndexMinIndexMax
    = true;\n        bool isMinIndexMinIndexMax = true;\n        bool isMaxIndexMaxIndexMax
    = true;\n        bool isMinIndexMinIndexMax = true;\n        bool isMaxIndexMinIndexMin
    = true;\n        bool isMinIndexMaxIndexMin = true;\n        bool isMaxIndexMaxIndexMax
    = true;\n        bool isMinIndexMinIndexMax = true;\n        bool isMaxIndexMaxIndexMin
    = true;\n        bool isMinIndexMaxIndexMin = true;\n        bool isMaxIndexMinIndexMin
    = true;\n        bool isMaxIndexMaxIndexMin = true;\n        bool isMinIndexMinIndexMin
    = true;\n        bool isMaxIndexMaxIndexMin = true;\n        bool isMinIndexMinIndexMin
    = true;\n        bool isMaxIndexMaxIndexMin = true;\n        bool isMinIndexMinIndexMin
    = true;\n        bool isMaxIndexMaxIndexMin = true;\n        bool isMinIndexMinIndexMin
    = true;\n        bool isMaxIndexMaxIndexMin = true;\n        bool isMinIndexMinIndexMin
    = true;\n        bool isMaxIndexMaxIndexMin = true;\n        bool isMinIndexMinIndexMin
    = true;\n        bool isMaxIndexMaxIndexMin = true;\n        bool isMinIndexMinIndexMin\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptzrzx22n.cs(82,35): error CS1002: ; expected

    '
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       if (k == 0) return arr;\n        List<long> res = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxVal = arr[0];\n        long minVal = arr[0];\n
    \       long maxCount = 0;\n        long minCount = 0;\n        long maxCountVal
    = 0;\n        long minCountVal = 0;\n        long maxCountIndex = 0;\n        long
    minCountIndex = 0;\n        foreach (long i in arr) {\n            if (i > maxVal)
    {\n                maxVal = i;\n                maxCount++;\n                maxCountVal
    = maxVal;\n                maxCountIndex = i;\n            }\n            if (i
    < minVal) {\n                minVal = i;\n                minCount++;\n                minCountVal
    = minVal;\n                minCountIndex = i;\n            }\n            if (maxCount
    > k) {\n                maxCount--;\n                maxCountVal = maxCountVal
    * maxCount;\n                maxCountIndex = maxCountIndex * maxCount;\n            }\n
    \           if (minCount > k) {\n                minCount--;\n                minCountVal
    = minCountVal * minCount;\n                minCountIndex = minCountIndex * minCount;\n
    \           }\n            if (maxCount > k) {\n                maxCount--;\n
    \               maxCountVal = maxCountVal * maxCount;\n                maxCountIndex
    = maxCountIndex * maxCount;\n            }\n            if (minCount > k) {\n
    \               minCount--;\n                minCountVal = minCountVal * minCount;\n
    \               minCountIndex = minCountIndex * minCount;\n            }\n            if
    (maxCount > k) {\n                maxCount--;\n                maxCountVal = maxCountVal
    * maxCount;\n                maxCountIndex = maxCountIndex * maxCount;\n            }\n
    \           if (minCount > k) {\n                minCount--;\n                minCountVal
    = minCountVal * minCount;\n                minCountIndex = minCountIndex * minCount;\n
    \           }\n            if (maxCount > k) {\n                maxCount--;\n
    \               maxCountVal = maxCountVal * maxCount;\n                maxCountIndex
    = maxCountIndex * maxCount;\n            }\n            if (minCount > k) {\n
    \               minCount--;\n                minCountVal = minCountVal * minCount;\n
    \               minCountIndex = minCountIndex * minCount;\n            }\n            if
    (maxCount > k) {\n                maxCount--;\n                maxCountVal = max\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl3dauzoj.cs(95,34): error CS1002: ; expected

    /tmp/tmpl3dauzoj.cs(97,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpl3dauzoj.cs(111,2): error CS1513: } expected

    '
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long temp = 0;\n        foreach (long i in arr)
    {\n            if (i > max) {\n                max = i;\n            }\n        }\n
    \       long tempMax = max;\n        long tempMaxIndex = 0;\n        long tempMaxIndex2
    = 0;\n        long tempMaxIndex3 = 0;\n        long tempMaxIndex4 = 0;\n        long
    tempMaxIndex5 = 0;\n        long tempMaxIndex6 = 0;\n        long tempMaxIndex7
    = 0;\n        long tempMaxIndex8 = 0;\n        long tempMaxIndex9 = 0;\n        long
    tempMaxIndex10 = 0;\n        long tempMaxIndex11 = 0;\n        long tempMaxIndex12
    = 0;\n        long tempMaxIndex13 = 0;\n        long tempMaxIndex14 = 0;\n        long
    tempMaxIndex15 = 0;\n        long tempMaxIndex16 = 0;\n        long tempMaxIndex17
    = 0;\n        long tempMaxIndex18 = 0;\n        long tempMaxIndex19 = 0;\n        long
    tempMaxIndex20 = 0;\n        long tempMaxIndex21 = 0;\n        long tempMaxIndex22
    = 0;\n        long tempMaxIndex23 = 0;\n        long tempMaxIndex24 = 0;\n        long
    tempMaxIndex25 = 0;\n        long tempMaxIndex26 = 0;\n        long tempMaxIndex27
    = 0;\n        long tempMaxIndex28 = 0;\n        long tempMaxIndex29 = 0;\n        long
    tempMaxIndex30 = 0;\n        long tempMaxIndex31 = 0;\n        long tempMaxIndex32
    = 0;\n        long tempMaxIndex33 = 0;\n        long tempMaxIndex34 = 0;\n        long
    tempMaxIndex35 = 0;\n        long tempMaxIndex36 = 0;\n        long tempMaxIndex37
    = 0;\n        long tempMaxIndex38 = 0;\n        long tempMaxIndex39 = 0;\n        long
    tempMaxIndex40 = 0;\n        long tempMaxIndex41 = 0;\n        long tempMaxIndex42
    = 0;\n        long tempMaxIndex43 = 0;\n        long tempMaxIndex44 = 0;\n        long
    tempMaxIndex45 = 0;\n        long tempMaxIndex46 = 0;\n        long tempMaxIndex47
    = 0;\n        long tempMaxIndex48 = 0;\n        long tempMaxIndex49 = 0;\n        long
    tempMaxIndex50 = 0;\n        long tempMaxIndex51 = 0;\n        long tempMaxIndex52
    = 0;\n        long tempMaxIndex53 = 0;\n        long tempMaxIndex54 = 0;\n        long
    tempMaxIndex55 = 0;\n        long tempMaxIndex56 = 0;\n        long tempMaxIndex57
    = 0;\n        long tempMaxIndex58 = 0;\n        long tempMaxIndex\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjvhyj7uu.cs(92,26): error CS1002: ; expected

    '
  timestamp: 1659823364
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        foreach
    (long i in arr) {\n            sum += i;\n            if (sum > k) {\n                max
    = sum;\n            }\n            if (sum < k) {\n                min = sum;\n
    \           }\n        }\n        if (min == max) {\n            max = sum;\n
    \       }\n        long mid = (min + max) / 2;\n        foreach (long i in arr)
    {\n            if (i == mid) {\n                result.Add(mid);\n            }\n
    \           else {\n                result.Add(i);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9edfd22784c24291bc842447cdbe4090>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9edfd22784c24291bc842447cdbe4090>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long temp = 0;\n        foreach (var item in arr)
    {\n            if (item > max) {\n                max = item;\n            }\n
    \       }\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4
    = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n
    \       long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long
    temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long
    temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long
    temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long
    temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long
    temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long
    temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long
    temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long
    temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long
    temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long
    temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long
    temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long
    temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long
    temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long
    temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long
    temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long
    temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long
    temp59 = 0;\n        long temp60 = 0;\n        long temp61 = 0;\n        long
    temp62 = 0;\n        long temp63 = 0;\n        long temp64 = 0;\n        long
    temp65 = 0;\n        long temp66 = 0;\n        long temp67 = 0;\n        long
    temp68 = 0;\n        long temp69 = 0;\n        long temp70 = 0;\n        long
    temp71 = 0;\n        long temp72 = 0;\n        long temp73 = 0;\n        long
    temp74 = 0;\n        long temp75 = 0;\n        long temp76 = 0;\n        long
    temp77 = 0;\n        long temp78 = 0;\n        long temp79 = 0;\n        long
    temp80 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbpcu2ry8.cs(27,14): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpbpcu2ry8.cs(33,14): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpbpcu2ry8.cs(34,14): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpbpcu2ry8.cs(35,14): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpbpcu2ry8.cs(36,14): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpbpcu2ry8.cs(37,14): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpbpcu2ry8.cs(38,14): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpbpcu2ry8.cs(39,14): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpbpcu2ry8.cs(40,14): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpbpcu2ry8.cs(41,14): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpbpcu2ry8.cs(42,14): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpbpcu2ry8.cs(43,14): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpbpcu2ry8.cs(44,14): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpbpcu2ry8.cs(45,14): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpbpcu2ry8.cs(46,14): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpbpcu2ry8.cs(47,14): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmpbpcu2ry8.cs(48,14): warning CS0219: The variable ''temp17'' is assigned
    but its value is never used

    /tmp/tmpbpcu2ry8.cs(49,14): warning CS0219: The variable ''temp18'' is assigned
    but its value is never used

    /tmp/tmpbpcu2ry8.cs(50,'
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        long max = 0;\n        long maxIndex = 0;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > max) {\n
    \               max = arr[i];\n                maxIndex = i;\n            }\n
    \       }\n        result.Add(arr[maxIndex]);\n        if (arr.Count > k) {\n
    \           List<long> newArr = new List<long>(k);\n            for (int i = 0;
    i < k; i++) {\n                newArr.Add(arr[i]);\n            }\n            result
    = Maximum(newArr, k);\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2j_l5xz4.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp2j_l5xz4.cs(35,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp2j_l5xz4.cs(37,48): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = arr[0];\n        long maxIndex = 0;\n        for (int i = 0;
    i < arr.Count; i++) {\n            if (arr[i] > max) {\n                max =
    arr[i];\n                maxIndex = i;\n            }\n        }\n        result.Add(max);\n
    \       for (int i = maxIndex + 1; i < arr.Count; i++) {\n            if (arr[i]
    > max) {\n                result.Add(arr[i]);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_v0joifo.cs(35,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxValue = arr[0];\n        long minValue = arr[0];\n
    \       long maxIndexValue = arr[0];\n        long minIndexValue = arr[0];\n        bool
    isMax = true;\n        bool isMin = true;\n        bool isMaxIndex = true;\n        bool
    isMinIndex = true;\n        bool isMaxValue = true;\n        bool isMinValue =
    true;\n        bool isMaxIndexValue = true;\n        bool isMinIndexValue = true;\n
    \       bool isMaxIndexValue = true;\n        bool isMinIndexValue = true;\n        bool
    isMaxIndexValue = true;\n        bool isMinIndexValue = true;\n        bool isMaxIndexValue
    = true;\n        bool isMinIndexValue = true;\n        bool isMaxIndexValue =
    true;\n        bool isMinIndexValue = true;\n        bool isMaxIndexValue = true;\n
    \       bool isMinIndexValue = true;\n        bool isMaxIndexValue = true;\n        bool
    isMinIndexValue = true;\n        bool isMaxIndexValue = true;\n        bool isMinIndexValue
    = true;\n        bool isMaxIndexValue = true;\n        bool isMinIndexValue =
    true;\n        bool isMaxIndexValue = true;\n        bool isMinIndexValue = true;\n
    \       bool isMaxIndexValue = true;\n        bool isMinIndexValue = true;\n        bool
    isMaxIndexValue = true;\n        bool isMinIndexValue = true;\n        bool isMaxIndexValue
    = true;\n        bool isMinIndexValue = true;\n        bool isMaxIndexValue =
    true;\n        bool isMinIndexValue = true;\n        bool isMaxIndexValue = true;\n
    \       bool isMinIndexValue = true;\n        bool isMaxIndexValue = true;\n        bool
    isMinIndexValue = true;\n        bool isMaxIndexValue = true;\n        bool isMinIndexValue
    = true;\n        bool isMaxIndexValue = true;\n        bool isMinIndexValue =
    true;\n        bool isMaxIndexValue = true;\n        bool isMinIndexValue = true;\n
    \       bool isMaxIndexValue = true;\n        bool isMinIndexValue = true;\n        bool
    isMaxIndexValue = true;\n        bool isMinIndexValue = true;\n        bool isMaxIndexValue
    = true;\n        bool isMinIndexValue = true;\n        bool isMaxIndexValue =
    true;\n        bool isMinIndexValue = true;\n        bool isMaxIndexValue = true;\n
    \       bool isMinIndexValue = true;\n        bool isMaxIndexValue = true;\n        bool
    isMinIndexValue = true;\n        bool isMaxIndexValue = true;\n        bool \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjg5rswu4.cs(91,13): error CS1001: Identifier expected

    /tmp/tmpjg5rswu4.cs(91,13): error CS1002: ; expected

    '
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       List<long> res = new List<long>();\n        long max = 0;\n        long
    min = 0;\n        foreach (long i in arr) {\n            if (i > max) {\n                max
    = i;\n            }\n            if (i < min) {\n                min = i;\n            }\n
    \       }\n        long mid = min + (max - min) / 2;\n        long mid2 = mid
    / 2;\n        long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long
    mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n
    \       long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10
    = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n
    \       long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long
    mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16
    / 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long
    mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21
    / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n        long
    mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27 = mid26
    / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long
    mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31
    / 2;\n        long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long
    mid35 = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36
    / 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n        long
    mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42 = mid41
    / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 / 2;\n        long
    mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb20ld43a.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxCount = 0;\n        long minCount = 0;\n        long
    maxCountIndex = 0;\n        long minCountIndex = 0;\n        long maxCountCount
    = 0;\n        long minCountCount = 0;\n        long maxCountIndex2 = 0;\n        long
    minCountIndex2 = 0;\n        long maxCountCount2 = 0;\n        long minCountCount2
    = 0;\n        long maxCountIndex3 = 0;\n        long minCountIndex3 = 0;\n        long
    maxCountCount3 = 0;\n        long minCountCount3 = 0;\n        long maxCountIndex4
    = 0;\n        long minCountIndex4 = 0;\n        long maxCountCount4 = 0;\n        long
    minCountCount4 = 0;\n        long maxCountIndex5 = 0;\n        long minCountIndex5
    = 0;\n        long maxCountCount5 = 0;\n        long minCountCount5 = 0;\n        long
    maxCountIndex6 = 0;\n        long minCountIndex6 = 0;\n        long maxCountCount6
    = 0;\n        long minCountCount6 = 0;\n        long maxCountIndex7 = 0;\n        long
    minCountIndex7 = 0;\n        long maxCountCount7 = 0;\n        long minCountCount7
    = 0;\n        long maxCountIndex8 = 0;\n        long minCountIndex8 = 0;\n        long
    maxCountCount8 = 0;\n        long minCountCount8 = 0;\n        long maxCountIndex9
    = 0;\n        long minCountIndex9 = 0;\n        long maxCountCount9 = 0;\n        long
    minCountCount9 = 0;\n        long maxCountIndex10 = 0;\n        long minCountIndex10
    = 0;\n        long maxCountCount10 = 0;\n        long minCountCount10 = 0;\n        long
    maxCountIndex11 = 0;\n        long minCountIndex11 = 0;\n        long maxCountCount11
    = 0;\n        long minCountCount11 = 0;\n        long maxCountIndex12 = 0;\n        long
    minCountIndex12 = 0;\n        long maxCountCount12 = 0;\n        long minCountCount12
    = 0;\n        long maxCountIndex13 = 0;\n        long minCountIndex13 = 0;\n        long
    maxCountCount13 = 0;\n        long minCountCount13 = 0;\n        long maxCountIndex14
    = 0;\n        long minCountIndex14 = 0;\n        long maxCountCount14 = 0;\n        long
    minCountCount14 = 0;\n        long maxCountIndex15 = 0;\n        long minCountIndex15
    = 0;\n        long maxCountCount15 = 0;\n        long minCountCount15 = 0;\n        long
    maxCountIndex16 = 0;\n\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp247r4xnh.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmp247r4xnh.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmp247r4xnh.cs(28,14): warning CS0219: The variable ''maxIndex'' is assigned
    but its value is never used

    /tmp/tmp247r4xnh.cs(29,14): warning CS0219: The variable ''minIndex'' is assigned
    but its value is never used

    /tmp/tmp247r4xnh.cs(30,14): warning CS0219: The variable ''maxCount'' is assigned
    but its value is never used

    /tmp/tmp247r4xnh.cs(31,14): warning CS0219: The variable ''minCount'' is assigned
    but its value is never used

    /tmp/tmp247r4xnh.cs(32,14): warning CS0219: The variable ''maxCountIndex'' is
    assigned but its value is never used

    /tmp/tmp247r4xnh.cs(33,14): warning CS0219: The variable ''minCountIndex'' is
    assigned but its value is never used

    /tmp/tmp247r4xnh.cs(34,14): warning CS0219: The variable ''maxCountCount'' is
    assigned but its value is never used

    /tmp/tmp247r4xnh.cs(35,14): warning CS0219: The variable ''minCountCount'' is
    assigned but its value is never used

    /tmp/tmp247r4xnh.cs(36,14): warning CS0219: The variable ''maxCountIndex2'' is
    assigned but its value is never used

    /tmp/tmp247r4xnh.cs(37,14): warning CS0219: The variable ''minCountIndex2'' is
    assigned but its value is never used

    /tmp/tmp247r4xnh.cs(38,14): warning CS0219: The variable ''maxCountCount2'' is
    assigned but its value is never used

    /tmp/tmp247r4xnh.cs(39,14): warning CS0219: The variable ''minCountCount2'' is
    assigned but its value is never used

    /tmp/tmp247r4xnh.cs(40,14): warning CS0219: The variable ''maxCountIndex3'' is
    assigned but its value is never used

    /tmp/tmp247r4xnh.cs(41,14): warning CS0219: The variable ''minCountIndex3'' is
    assigned but its value is never used

    /tmp/tmp247r4xnh.cs(42,14): warning CS0219: The variable ''maxCountCount3'' is
    assigned but its value is never used

    /tmp/tmp247r4xnh.cs(43,14): warni'
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = arr[0];\n        List<long>
    result = new List<long>();\n        foreach (long i in arr) {\n            if
    (i > max) {\n                max = i;\n            }\n        }\n        long
    curMax = max;\n        long curMaxIndex = -1;\n        long curMaxValue = max;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > curMax)
    {\n                curMax = arr[i];\n                curMaxIndex = i;\n                curMaxValue
    = arr[i];\n            }\n        }\n        if (curMaxIndex == -1) {\n            result.Add(curMaxValue);\n
    \           return result;\n        }\n        List<long> left = new List<long>();\n
    \       List<long> right = new List<long>();\n        left.Add(curMaxValue);\n
    \       right.Add(curMaxValue);\n        long leftMax = curMaxValue;\n        long
    leftMaxIndex = curMaxIndex;\n        long leftMaxValue = curMaxValue;\n        for
    (int i = curMaxIndex + 1; i < arr.Count; i++) {\n            if (arr[i] > leftMax)
    {\n                leftMax = arr[i];\n                leftMaxIndex = i;\n                leftMaxValue
    = arr[i];\n            }\n        }\n        left.Add(leftMaxValue);\n        right.Add(leftMaxValue);\n
    \       long rightMax = leftMaxValue;\n        long rightMaxIndex = leftMaxIndex;\n
    \       long rightMaxValue = leftMaxValue;\n        for (int i = leftMaxIndex
    + 1; i < arr.Count; i++) {\n            if (arr[i] > rightMax) {\n                rightMax
    = arr[i];\n                rightMaxIndex = i;\n                rightMaxValue =
    arr[i];\n            }\n        }\n        right.Add(rightMaxValue);\n        List<long>
    leftResult = Maximum(left, k - 1);\n        List<long> rightResult = Maximum(right,
    k - 1);\n        List<long> result = new List<long>();\n        result.AddRange(leftResult);\n
    \       result.AddRange(rightResult);\n        result.Add(curMaxValue);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpatqr6nju.cs(53,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpatqr6nju.cs(65,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpatqr6nju.cs(75,20): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) {\n            throw
    new ArgumentOutOfRangeException(\"k\");\n        }\n        List<long> result
    = new List<long>();\n        long maxValue = arr.Max();\n        long minValue
    = arr.Min();\n        long maxIndex = arr.FindIndex(x => x == maxValue);\n        long
    minIndex = arr.FindIndex(x => x == minValue);\n        long maxCount = 0;\n        long
    minCount = 0;\n        long maxCountIndex = 0;\n        long minCountIndex = 0;\n
    \       bool isMax = true;\n        bool isMin = true;\n        bool isMaxIndex
    = true;\n        bool isMinIndex = true;\n        long maxCountValue = 0;\n        long
    minCountValue = 0;\n        long maxCountIndexValue = 0;\n        long minCountIndexValue
    = 0;\n        long maxCountValueIndex = 0;\n        long minCountValueIndex =
    0;\n        long maxCountValueValue = 0;\n        long minCountValueValue = 0;\n
    \       long maxCountValueIndexValue = 0;\n        long minCountValueIndexValue
    = 0;\n        long maxCountValueValueIndex = 0;\n        long minCountValueValueIndex
    = 0;\n        long maxCountValueValueValue = 0;\n        long minCountValueValueValue
    = 0;\n        long maxCountValueValueIndexValue = 0;\n        long minCountValueValueIndexValue
    = 0;\n        long maxCountValueValueValueIndex = 0;\n        long minCountValueValueValueIndex
    = 0;\n        long maxCountValueValueValueIndex = 0;\n        long minCountValueValueValueIndexValue
    = 0;\n        long maxCountValueValueValueIndexValue = 0;\n        long minCountValueValueValueIndexValue
    = 0;\n        long maxCountValueValueValueIndexValue = 0;\n        long minCountValueValueValueIndexValue
    = 0;\n        long maxCountValueValueValueIndexValue = 0;\n        long minCountValueValueValueIndexValue
    = 0;\n        long maxCountValueValueValueIndexValue = 0;\n        long minCountValueValueValueIndexValue
    = 0;\n        long maxCountValueValueValueIndexValue = 0;\n        long minCountValueValueValueIndexValue
    = 0;\n        long maxCountValueValueValueIndexValue = 0;\n        long minCountValueValueValueIndexValue
    = 0;\n        long maxCountValueValueValueIndexValue = 0;\n        long minCountValueValueValueIndexValue
    = 0;\n        long maxCountValueValueValueIndexValue = 0;\n        long minCountValueValueValueIndexValue
    = 0;\n        long maxCountValueValueValueIndexValue = 0;\n        long minCountValueValueValueIndexValue
    = 0;\n        long maxCountValueValueValueIndexValue = 0;\n        long min\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpso_kixny.cs(80,17): error CS1002: ; expected

    '
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long maxIndex = 0;\n        long maxValue = 0;\n
    \       long currentValue = 0;\n        long currentIndex = 0;\n        bool isMax
    = true;\n        foreach (long i in arr) {\n            currentValue = i;\n            currentIndex
    = 0;\n            while (currentIndex < arr.Count && currentValue > arr[currentIndex])
    {\n                currentIndex++;\n            }\n            if (currentIndex
    == arr.Count) {\n                isMax = false;\n                break;\n            }\n
    \           if (isMax) {\n                max = Math.Max(max, currentValue);\n
    \               maxIndex = currentIndex;\n                maxValue = currentValue;\n
    \           } else {\n                max = Math.Max(max, currentValue);\n                maxIndex
    = currentIndex;\n                maxValue = currentValue;\n            }\n        }\n
    \       result.Add(max);\n        result.Add(arr[maxIndex]);\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplc1jk93m.cs(35,67): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmplc1jk93m.cs(53,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxValue = arr[0];\n        long minValue = arr[0];\n
    \       long maxIndexValue = arr[0];\n        long minIndexValue = arr[0];\n        foreach
    (long i in arr) {\n            if (i > maxValue) {\n                maxValue =
    i;\n                maxIndex = i;\n                maxIndexValue = i;\n            }\n
    \           if (i < minValue) {\n                minValue = i;\n                minIndex
    = i;\n                minIndexValue = i;\n            }\n            if (maxIndexValue
    < minIndexValue) {\n                maxIndexValue = minIndexValue;\n                maxIndex
    = minIndex;\n            }\n            if (maxIndexValue > minIndexValue) {\n
    \               minIndexValue = maxIndexValue;\n                minIndex = maxIndex;\n
    \           }\n        }\n        long temp;\n        if (k == 1) {\n            result.Add(maxIndex);\n
    \           return result;\n        }\n        if (k == 2) {\n            result.Add(maxIndex);\n
    \           result.Add(minIndex);\n            return result;\n        }\n        if
    (k == 3) {\n            result.Add(maxIndex);\n            result.Add(minIndex);\n
    \           result.Add(maxValue);\n            return result;\n        }\n        if
    (k == 4) {\n            result.Add(maxIndex);\n            result.Add(minIndex);\n
    \           result.Add(maxValue);\n            result.Add(minValue);\n            return
    result;\n        }\n        if (k == 5) {\n            result.Add(maxIndex);\n
    \           result.Add(minIndex);\n            result.Add(maxValue);\n            result.Add(minValue);\n
    \           result.Add(maxIndexValue);\n            return result;\n        }\n
    \       if (k == 6) {\n            result.Add(maxIndex);\n            result.Add(minIndex);\n
    \           result.Add(maxValue);\n            result.Add(minValue);\n            result.Add(maxIndexValue);\n
    \           result.Add(minIndexValue);\n            return result;\n        }\n
    \       if (k == 7) {\n            result.Add(maxIndex);\n            result.Add(minIndex);\n
    \           result.Add(maxValue);\n            result.Add(minValue);\n            result.Add(maxIndexValue);\n
    \           result.Add(minIndexValue);\n            result.Add(maxValue);\n            result.Add(minIndex);\n
    \           return result;\n        }\n        if (k == 8) {\n            result.Add(maxIndex);\n
    \           result.Add(minIndex);\n            result.Add(maxValue);\n            result.Add(minValue);\n
    \           result.Add(maxIndexValue);\n            result.Add(minIndexValue);\n
    \           result.Add(maxValue);\n            result.Add(minIndex);\n            result.Add(maxIndexValue);\n
    \           return result;\n        }\n        if (k == 9) {\n            result.Add(maxIndex);\n
    \           result.Add(minIndex);\n            result.Add(maxValue);\n            result.Add(minValue);\n
    \           result.Add(maxIndexValue);\n            result.Add(minIndexValue);\n
    \           result.Add(maxValue);\n            result.Add(minIndex);\n            result.Add(maxIndexValue);\n
    \           result.Add(minIndexValue);\n            return result;\n\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppaktyse5.cs(131,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmppaktyse5.cs(145,2): error CS1513: } expected

    '
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        long max = 0;\n        long maxIndex = 0;\n
    \       long maxValue = arr[0];\n        foreach (long i in arr) {\n            if
    (i > maxValue) {\n                maxValue = i;\n                maxIndex = i;\n
    \           }\n            if (i == maxValue) {\n                maxIndex++;\n
    \           }\n            if (maxIndex == k) {\n                result.Add(maxValue);\n
    \               break;\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqmrzrz6n.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpqmrzrz6n.cs(27,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxValue = arr[0];\n        long minValue = arr[0];\n
    \       long maxIndexValue = 0;\n        long minIndexValue = 0;\n        long
    maxValueIndex = 0;\n        long minValueIndex = 0;\n        long maxValueIndexValue
    = 0;\n        long minValueIndexValue = 0;\n        long maxIndexValueIndex =
    0;\n        long minIndexValueIndex = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        long minIndexValueIndexValue = 0;\n        long maxIndexValueIndexValue
    = 0;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpayefrjdx.cs(42,14): error CS0128: A local variable or function named ''maxIndexValueIndexValue''
    is already defined in this scope

    /tmp/tmpayefrjdx.cs(43,14): error CS0128: A local variable or function named ''minIndexValueIndexValue''
    is already defined in this scope

    /tmp/tmpayefrjdx.cs(44,14): error CS0128: A local variable or function named ''maxIndexValueIndexValue''
    is already defined in this scope

    /tmp/tmpayefrjdx.cs(45,14): error CS0128: A local variable or function named ''minIndexValueIndexValue''
    is already defined in this scope

    /tmp/tmpayefrjdx.cs(46,14): error CS0128: A local variable or function named ''maxIndexValueIndexValue''
    is already defined in this scope

    /tmp/tmpayefrjdx.cs(47,14): error CS0128: A local variable or function named ''minIndexValueIndexValue''
    is already defined in this scope

    /tmp/tmpayefrjdx.cs(48,14): error CS0128: A local variable or function named ''maxIndexValueIndexValue''
    is already defined in this scope

    /tmp/tmpayefrjdx.cs(49,14): error CS0128: A local variable or function named ''minIndexValueIndexValue''
    is already defined in this scope

    /tmp/tmpayefrjdx.cs(50,14): error CS0128: A local variable or function named ''maxIndexValueIndexValue''
    is already defined in this scope

    /tmp/tmpayefrjdx.cs(51,14): error CS0128: A local variable or function named ''minIndexValueIndexValue''
    is already defined in this scope

    /tmp/tmpayefrjdx.cs(52,14): error CS0128: A local variable or function named ''maxIndexValueIndexValue''
    is already defined in this scope

    /tmp/tmpayefrjdx.cs(53,14): error CS0128: A local variable or function named ''minIndexValueIndexValue''
    is already defined in this scope

    /tmp/tmpayefrjdx.cs(54,14): error CS0128: A local variable or function named ''maxIndexValueIndexValue''
    is already defined in this scope

    /tmp/tmpayefrjdx.cs(55,14): error CS0128: A local variable or function named ''minIndexValueIndexValue''
    is already defined in this scope

    /tmp/tmpayefrjdx.'
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = 0;\n        long temp =
    0;\n        List<long> result = new List<long>();\n        foreach (long i in
    arr) {\n            if (i > temp) {\n                temp = i;\n            }\n
    \           if (i > max) {\n                max = i;\n            }\n        }\n
    \       if (max <= k) {\n            result.Add(max);\n            return result;\n
    \       }\n        long start = 0;\n        long end = 0;\n        long mid =
    0;\n        long mid2 = 0;\n        long mid3 = 0;\n        long mid4 = 0;\n        long
    mid5 = 0;\n        long mid6 = 0;\n        long mid7 = 0;\n        long mid8 =
    0;\n        long mid9 = 0;\n        long mid10 = 0;\n        long mid11 = 0;\n
    \       long mid12 = 0;\n        long mid13 = 0;\n        long mid14 = 0;\n        long
    mid15 = 0;\n        long mid16 = 0;\n        long mid17 = 0;\n        long mid18
    = 0;\n        long mid19 = 0;\n        long mid20 = 0;\n        long mid21 = 0;\n
    \       long mid22 = 0;\n        long mid23 = 0;\n        long mid24 = 0;\n        long
    mid25 = 0;\n        long mid26 = 0;\n        long mid27 = 0;\n        long mid28
    = 0;\n        long mid29 = 0;\n        long mid30 = 0;\n        long mid31 = 0;\n
    \       long mid32 = 0;\n        long mid33 = 0;\n        long mid34 = 0;\n        long
    mid35 = 0;\n        long mid36 = 0;\n        long mid37 = 0;\n        long mid38
    = 0;\n        long mid39 = 0;\n        long mid40 = 0;\n        long mid41 = 0;\n
    \       long mid42 = 0;\n        long mid43 = 0;\n        long mid44 = 0;\n        long
    mid45 = 0;\n        long mid46 = 0;\n        long mid47 = 0;\n        long mid48
    = 0;\n        long mid49 = 0;\n        long mid50 = 0;\n        long mid51 = 0;\n
    \       long mid52 = 0;\n        long mid53 = 0;\n        long mid54 = 0;\n        long
    mid55 = 0;\n        long mid56 = 0;\n        long mid57 = 0;\n        long mid58
    = 0;\n        long mid59 = 0;\n        long mid60 = 0;\n        long mid61 = 0;\n
    \       long mid62 = 0;\n        long mid63 = 0;\n        long mid64 = 0;\n        long
    mid65 = 0;\n        long mid66 = 0;\n        long mid67 = 0;\n        long mid68
    = 0;\n        long mid69 = 0;\n        long mid70 = 0;\n        long mid71 = 0;\n
    \       long mid72 = 0;\n        long mid73 = 0;\n        long \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvup0n0ge.cs(115,13): error CS1001: Identifier expected

    /tmp/tmpvup0n0ge.cs(115,13): error CS1002: ; expected

    '
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > k) {\n                max = sum;\n                min = i;\n                count
    = 1;\n            } else if (sum < k) {\n                max = sum;\n                min
    = i;\n                count = 1;\n            } else {\n                max =
    sum;\n                min = i;\n                count++;\n            }\n        }\n
    \       if (count > k) {\n            count = k;\n        }\n        if (count
    < k) {\n            count = k;\n        }\n        long temp = 0;\n        long
    temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5
    = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n
    \       long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n
    \       long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n
    \       long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n
    \       long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n
    \       long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n
    \       long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n
    \       long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n
    \       long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n
    \       long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n
    \       long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n
    \       long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n
    \       long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n
    \       long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n
    \       long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n
    \       long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n
    \       long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n
    \       long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n
    \       long temp60 = 0;\n        long temp61 = 0;\n        long temp62 = 0;\n
    \       long temp63 = 0;\n        long temp64 = 0;\n        long temp65 = 0;\n
    \       long temp66 = 0;\n\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp781e0uq3.cs(52,14): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmp781e0uq3.cs(53,14): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmp781e0uq3.cs(54,14): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmp781e0uq3.cs(55,14): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmp781e0uq3.cs(56,14): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmp781e0uq3.cs(57,14): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmp781e0uq3.cs(58,14): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmp781e0uq3.cs(59,14): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmp781e0uq3.cs(60,14): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmp781e0uq3.cs(61,14): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmp781e0uq3.cs(62,14): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmp781e0uq3.cs(63,14): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmp781e0uq3.cs(64,14): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmp781e0uq3.cs(65,14): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmp781e0uq3.cs(66,14): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmp781e0uq3.cs(67,14): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmp781e0uq3.cs(68,14): warning CS0219: The variable ''temp17'' is assigned
    but its value is never used

    /tmp/tmp781e0uq3.cs(69,14): warning CS0219: The variable ''temp18'' is assigned
    but its value is never used

    /tmp/tmp781e0uq3.cs(70,'
  timestamp: 1659823365
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       List<long> result = new List<long>();\n        long max = arr[0];\n        for
    (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        long maxCount = 0;\n        for (int
    i = 0; i < arr.Count; i++) {\n            if (arr[i] == max) {\n                maxCount++;\n
    \           }\n        }\n        if (maxCount > k) {\n            max = -max;\n
    \       }\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]
    == max) {\n                result.Add(arr[i]);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e86619884b22407e82724cc10ffca231>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e86619884b22407e82724cc10ffca231>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) {\n            throw
    new ArgumentOutOfRangeException(\"k\");\n        }\n        List<long> result
    = new List<long>();\n        long maxValue = arr.Max();\n        long minValue
    = arr.Min();\n        long maxIndex = arr.FindIndex(x => x == maxValue);\n        long
    minIndex = arr.FindIndex(x => x == minValue);\n        long midValue = maxIndex
    + minIndex / 2;\n        long midIndex = arr.FindIndex(x => x == midValue);\n
    \       long maxCount = 0;\n        long minCount = 0;\n        long midCount
    = 0;\n        bool isMax = true;\n        bool isMin = true;\n        bool isMid
    = true;\n        while (maxIndex < arr.Count && minIndex < arr.Count) {\n            if
    (isMax) {\n                if (arr[maxIndex] < arr[midIndex]) {\n                    maxCount++;\n
    \               }\n                else {\n                    maxCount--;\n                }\n
    \               isMax = !isMax;\n            }\n            if (isMin) {\n                if
    (arr[minIndex] > arr[midIndex]) {\n                    minCount++;\n                }\n
    \               else {\n                    minCount--;\n                }\n                isMin
    = !isMin;\n            }\n            if (isMid) {\n                if (arr[maxIndex]
    < arr[minIndex]) {\n                    midCount++;\n                }\n                else
    {\n                    midCount--;\n                }\n                isMid =
    !isMid;\n            }\n            if (maxCount > minCount && maxCount > midCount)
    {\n                result.Add(arr[maxIndex]);\n                maxIndex++;\n            }\n
    \           else if (minCount > midCount && minCount > maxCount) {\n                result.Add(arr[minIndex]);\n
    \               minIndex++;\n            }\n            else if (midCount > maxCount
    && midCount > minCount) {\n                result.Add(arr[midIndex]);\n                midIndex++;\n
    \           }\n            else {\n                maxIndex++;\n                minIndex++;\n
    \               midIndex++;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2gp15stn.cs(43,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp2gp15stn.cs(43,41): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp2gp15stn.cs(52,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp2gp15stn.cs(52,41): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp2gp15stn.cs(61,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp2gp15stn.cs(61,41): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp2gp15stn.cs(70,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp2gp15stn.cs(74,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp2gp15stn.cs(78,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        long max = 0;\n        long maxIndex = 0;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > max) {\n
    \               max = arr[i];\n                maxIndex = i;\n            }\n
    \       }\n        long currentMax = max;\n        long currentMaxIndex = maxIndex;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == currentMax)
    {\n                result.Add(arr[currentMaxIndex]);\n                currentMaxIndex++;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8s64yiyl.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp8s64yiyl.cs(39,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            count++;\n
    \           if (sum > max) {\n                max = sum;\n            }\n            if
    (sum < min) {\n                min = sum;\n            }\n        }\n        if
    (count > k) {\n            k = count;\n        }\n        long temp = 0;\n        long
    temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5
    = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n
    \       long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n
    \       long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n
    \       long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n
    \       long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n
    \       long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n
    \       long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n
    \       long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n
    \       long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n
    \       long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n
    \       long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n
    \       long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n
    \       long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n
    \       long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n
    \       long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n
    \       long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n
    \       long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n
    \       long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n
    \       long temp60 = 0;\n        long temp61 = 0;\n        long temp62 = 0;\n
    \       long temp63 = 0;\n        long temp64 = 0;\n        long temp65 = 0;\n
    \       long temp66 = 0;\n        long temp67 = 0;\n        long temp68 = 0;\n
    \       long temp69 = 0;\n        long temp70 = 0;\n        long temp71 = 0;\n
    \       long temp72 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzu1blujt.cs(43,14): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpzu1blujt.cs(44,14): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpzu1blujt.cs(45,14): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpzu1blujt.cs(46,14): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpzu1blujt.cs(47,14): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpzu1blujt.cs(48,14): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpzu1blujt.cs(49,14): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpzu1blujt.cs(50,14): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpzu1blujt.cs(51,14): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpzu1blujt.cs(52,14): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpzu1blujt.cs(53,14): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpzu1blujt.cs(54,14): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpzu1blujt.cs(55,14): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpzu1blujt.cs(56,14): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpzu1blujt.cs(57,14): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpzu1blujt.cs(58,14): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmpzu1blujt.cs(59,14): warning CS0219: The variable ''temp17'' is assigned
    but its value is never used

    /tmp/tmpzu1blujt.cs(60,14): warning CS0219: The variable ''temp18'' is assigned
    but its value is never used

    /tmp/tmpzu1blujt.cs(61,'
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        foreach
    (long i in arr) {\n            sum += i;\n            if (sum > max) {\n                max
    = sum;\n            }\n            if (sum < min) {\n                min = sum;\n
    \           }\n        }\n        if (k == 1) {\n            result.Add(max);\n
    \           return result;\n        }\n        long mid = max / 2;\n        long
    mid2 = min / 2;\n        long mid3 = mid / 2;\n        long mid4 = mid3 / 2;\n
    \       long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7
    = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long
    mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11
    / 2;\n        long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long
    mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16
    / 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long
    mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21
    / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n        long
    mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27 = mid26
    / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long
    mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31
    / 2;\n        long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long
    mid35 = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36
    / 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n        long
    mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42 = mid41
    / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 / 2;\n        long
    mid45 = mid\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe3znnp9c.cs(86,25): error CS1002: ; expected

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       if (k == 0) return arr;\n        List<long> res = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long mid = 0;\n        long
    sum = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > max) {\n                max = sum;\n                mid = i;\n            }\n
    \           if (sum < min) {\n                min = sum;\n                mid
    = i;\n            }\n        }\n        long midSum = 0;\n        long midMax
    = 0;\n        long midMin = 0;\n        foreach (long i in arr) {\n            midSum
    += i;\n            if (midSum > midMax) {\n                midMax = midSum;\n
    \               mid = i;\n            }\n            if (midSum < midMin) {\n
    \               midMin = midSum;\n                mid = i;\n            }\n        }\n
    \       long midMidSum = 0;\n        long midMidMax = 0;\n        long midMidMin
    = 0;\n        foreach (long i in arr) {\n            midMidSum += i;\n            if
    (midMidSum > midMidMax) {\n                midMidMax = midMidSum;\n                midMid
    = i;\n            }\n            if (midMidSum < midMidMin) {\n                midMidMin
    = midMidSum;\n                midMid = i;\n            }\n        }\n        long
    midMaxSum = 0;\n        long midMaxMax = 0;\n        long midMaxMin = 0;\n        long
    midMinSum = 0;\n        long midMinMax = 0;\n        long midMinMin = 0;\n        foreach
    (long i in arr) {\n            midMaxSum += i;\n            if (midMaxSum > midMaxMax)
    {\n                midMaxMax = midMaxSum;\n                midMax = i;\n            }\n
    \           if (midMaxSum < midMaxMin) {\n                midMaxMin = midMaxSum;\n
    \               midMax = i;\n            }\n            midMinSum += i;\n            if
    (midMinSum > midMinMax) {\n                midMinMax = midMinSum;\n                midMin
    = i;\n            }\n            if (midMinSum < midMinMin) {\n                midMinMin
    = midMinSum;\n                midMin = i;\n            }\n        }\n        long
    midMaxMidSum = 0;\n        long midMaxMidMax = 0;\n        long midMaxMidMin =
    0;\n        long midMidMaxSum = 0;\n        long midMidMaxMax = 0;\n        long
    midMidMaxMin = 0;\n        long midMidMinSum = 0;\n        long midMidMin\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdaa0fmbr.cs(104,23): error CS1002: ; expected

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long maxIndex = 0;\n        long maxValue = arr[0];\n
    \       for (int i = 0; i < arr.Count; i++) {\n            long value = arr[i];\n
    \           if (value > maxValue) {\n                maxValue = value;\n                maxIndex
    = i;\n            }\n            if (value > max) {\n                max = value;\n
    \               maxIndex = i;\n            }\n        }\n        if (maxValue
    == 0) {\n            result.Add(0);\n            return result;\n        }\n        long
    maxIndex2 = maxIndex;\n        long maxValue2 = maxValue;\n        long maxIndex3
    = maxIndex;\n        long maxValue3 = maxValue;\n        long maxIndex4 = maxIndex;\n
    \       long maxValue4 = maxValue;\n        long maxIndex5 = maxIndex;\n        long
    maxValue5 = maxValue;\n        long maxIndex6 = maxIndex;\n        long maxValue6
    = maxValue;\n        long maxIndex7 = maxIndex;\n        long maxValue7 = maxValue;\n
    \       long maxIndex8 = maxIndex;\n        long maxValue8 = maxValue;\n        long
    maxIndex9 = maxIndex;\n        long maxValue9 = maxValue;\n        long maxIndex10
    = maxIndex;\n        long maxValue10 = maxValue;\n        long maxIndex11 = maxIndex;\n
    \       long maxValue11 = maxValue;\n        long maxIndex12 = maxIndex;\n        long
    maxValue12 = maxValue;\n        long maxIndex13 = maxIndex;\n        long maxValue13
    = maxValue;\n        long maxIndex14 = maxIndex;\n        long maxValue14 = maxValue;\n
    \       long maxIndex15 = maxIndex;\n        long maxValue15 = maxValue;\n        long
    maxIndex16 = maxIndex;\n        long maxValue16 = maxValue;\n        long maxIndex17
    = maxIndex;\n        long maxValue17 = maxValue;\n        long maxIndex18 = maxIndex;\n
    \       long maxValue18 = maxValue;\n        long maxIndex19 = maxIndex;\n        long
    maxValue19 = maxValue;\n        long maxIndex20 = maxIndex;\n        long maxValue20
    = maxValue;\n        long maxIndex21 = maxIndex;\n        long maxValue21 = maxValue;\n
    \       long maxIndex22 = maxIndex;\n        long maxValue22 = maxValue;\n        long
    maxIndex23 = maxIndex;\n        long maxValue23 = maxValue;\n        long maxIndex24
    = maxIndex;\n        long maxValue24 = maxValue;\n        long maxIndex25 = maxIndex;\n
    \       long maxValue25 = maxValue;\n        long maxIndex26 = maxIndex;\n        long
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphye0eqer.cs(93,13): error CS1001: Identifier expected

    /tmp/tmphye0eqer.cs(93,13): error CS1002: ; expected

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0csqayx9.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmp0csqayx9.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmp0csqayx9.cs(28,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmp0csqayx9.cs(29,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(30,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(31,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(32,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(33,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(34,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(35,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(36,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(37,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(38,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(39,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(40,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(41,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(42,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(43,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmp0csqayx9.cs(44,14): warning CS0219: T'
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        long sum2 = 0;\n        long sum3 = 0;\n        long sum4
    = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n        long sum7 = 0;\n
    \       long sum8 = 0;\n        long sum9 = 0;\n        long sum10 = 0;\n        long
    sum11 = 0;\n        long sum12 = 0;\n        long sum13 = 0;\n        long sum14
    = 0;\n        long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n
    \       long sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long
    sum21 = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24
    = 0;\n        long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n
    \       long sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long
    sum31 = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n        long sum34
    = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n
    \       long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n        long
    sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n        long sum44
    = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n        long sum47 = 0;\n
    \       long sum48 = 0;\n        long sum49 = 0;\n        long sum50 = 0;\n        long
    sum51 = 0;\n        long sum52 = 0;\n        long sum53 = 0;\n        long sum54
    = 0;\n        long sum55 = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n
    \       long sum58 = 0;\n        long sum59 = 0;\n        long sum60 = 0;\n        long
    sum61 = 0;\n        long sum62 = 0;\n        long sum63 = 0;\n        long sum64
    = 0;\n        long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n
    \       long sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n        long
    sum71 = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n        long sum74
    = 0;\n        long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n
    \       long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n        long
    sum81 = 0;\n        long sum82 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr8pj50ot.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpr8pj50ot.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmpr8pj50ot.cs(28,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpr8pj50ot.cs(29,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(30,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(31,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(32,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(33,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(34,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(35,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(36,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(37,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(38,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(39,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(40,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(41,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(42,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(43,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(44,14): warning CS0219: T'
  timestamp: 1659793738
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = arr.Min();\n        long mid = 0;\n
    \       long midMax = 0;\n        long midMin = 0;\n        long midMid = 0;\n
    \       long midMidMax = 0;\n        long midMidMin = 0;\n        long midMidMid
    = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin = 0;\n        long
    midMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin
    = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long
    midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax
    = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long
    midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid
    = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long
    midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin
    = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long
    midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax
    = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long
    midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid
    = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long
    midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin
    = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long
    midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax
    = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long
    midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid
    = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long
    midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin
    = 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpipr4bb7r.cs(41,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(42,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(43,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(44,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(45,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(46,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(47,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(48,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(49,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(50,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(51,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(52,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(53,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(54,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(55,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /'
  timestamp: 1659793738
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxValue = arr[0];\n        long minValue = arr[0];\n
    \       long maxCount = 0;\n        long minCount = 0;\n        long maxCount2
    = 0;\n        long minCount2 = 0;\n        long maxCount3 = 0;\n        long minCount3
    = 0;\n        long maxCount4 = 0;\n        long minCount4 = 0;\n        long maxCount5
    = 0;\n        long minCount5 = 0;\n        long maxCount6 = 0;\n        long minCount6
    = 0;\n        long maxCount7 = 0;\n        long minCount7 = 0;\n        long maxCount8
    = 0;\n        long minCount8 = 0;\n        long maxCount9 = 0;\n        long minCount9
    = 0;\n        long maxCount10 = 0;\n        long minCount10 = 0;\n        long
    maxCount11 = 0;\n        long minCount11 = 0;\n        long maxCount12 = 0;\n
    \       long minCount12 = 0;\n        long maxCount13 = 0;\n        long minCount13
    = 0;\n        long maxCount14 = 0;\n        long minCount14 = 0;\n        long
    maxCount15 = 0;\n        long minCount15 = 0;\n        long maxCount16 = 0;\n
    \       long minCount16 = 0;\n        long maxCount17 = 0;\n        long minCount17
    = 0;\n        long maxCount18 = 0;\n        long minCount18 = 0;\n        long
    maxCount19 = 0;\n        long minCount19 = 0;\n        long maxCount20 = 0;\n
    \       long minCount20 = 0;\n        long maxCount21 = 0;\n        long minCount21
    = 0;\n        long maxCount22 = 0;\n        long minCount22 = 0;\n        long
    maxCount23 = 0;\n        long minCount23 = 0;\n        long maxCount24 = 0;\n
    \       long minCount24 = 0;\n        long maxCount25 = 0;\n        long minCount25
    = 0;\n        long maxCount26 = 0;\n        long minCount26 = 0;\n        long
    maxCount27 = 0;\n        long minCount27 = 0;\n        long maxCount28 = 0;\n
    \       long minCount28 = 0;\n        long maxCount29 = 0;\n        long minCount29
    = 0;\n        long maxCount30 = 0;\n        long minCount30 = 0;\n        long
    maxCount31 = 0;\n        long minCount31 = 0;\n        long maxCount32 = 0;\n
    \       long minCount32 = 0;\n        long maxCount33 = 0;\n        long minCount33
    = 0;\n        long maxCount34 = 0;\n        long minCount34 = 0;\n\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp66f65ryk.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmp66f65ryk.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmp66f65ryk.cs(28,14): warning CS0219: The variable ''maxIndex'' is assigned
    but its value is never used

    /tmp/tmp66f65ryk.cs(29,14): warning CS0219: The variable ''minIndex'' is assigned
    but its value is never used

    /tmp/tmp66f65ryk.cs(32,14): warning CS0219: The variable ''maxCount'' is assigned
    but its value is never used

    /tmp/tmp66f65ryk.cs(33,14): warning CS0219: The variable ''minCount'' is assigned
    but its value is never used

    /tmp/tmp66f65ryk.cs(34,14): warning CS0219: The variable ''maxCount2'' is assigned
    but its value is never used

    /tmp/tmp66f65ryk.cs(35,14): warning CS0219: The variable ''minCount2'' is assigned
    but its value is never used

    /tmp/tmp66f65ryk.cs(36,14): warning CS0219: The variable ''maxCount3'' is assigned
    but its value is never used

    /tmp/tmp66f65ryk.cs(37,14): warning CS0219: The variable ''minCount3'' is assigned
    but its value is never used

    /tmp/tmp66f65ryk.cs(38,14): warning CS0219: The variable ''maxCount4'' is assigned
    but its value is never used

    /tmp/tmp66f65ryk.cs(39,14): warning CS0219: The variable ''minCount4'' is assigned
    but its value is never used

    /tmp/tmp66f65ryk.cs(40,14): warning CS0219: The variable ''maxCount5'' is assigned
    but its value is never used

    /tmp/tmp66f65ryk.cs(41,14): warning CS0219: The variable ''minCount5'' is assigned
    but its value is never used

    /tmp/tmp66f65ryk.cs(42,14): warning CS0219: The variable ''maxCount6'' is assigned
    but its value is never used

    /tmp/tmp66f65ryk.cs(43,14): warning CS0219: The variable ''minCount6'' is assigned
    but its value is never used

    /tmp/tmp66f65ryk.cs(44,14): warning CS0219: The variable ''maxCount7'' is assigned
    but its value is never used

    /tmp/tmp66f65ryk.cs(45,14): warning CS0219: The variable ''minCount7'' is assigned
    but'
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       List<long> result = new List<long>();\n        long max = 0;\n        long
    min = 1000000000000L;\n        long maxIndex = 0;\n        foreach (long i in
    arr) {\n            if (i > max) {\n                max = i;\n                maxIndex
    = i;\n            }\n            if (i < min) {\n                min = i;\n            }\n
    \       }\n        if (k == maxIndex) return result;\n        long mid = (maxIndex
    + min) / 2;\n        List<long> left = new List<long>();\n        List<long> right
    = new List<long>();\n        long midMax = 0;\n        long midMin = 1000000000000L;\n
    \       long midMaxIndex = 0;\n        foreach (long i in arr) {\n            if
    (i > midMax) {\n                midMax = i;\n                midMaxIndex = i;\n
    \           }\n            if (i < midMin) {\n                midMin = i;\n            }\n
    \       }\n        if (k == midMaxIndex) return Maximum(left, k).Union(Maximum(right,
    k)).ToList();\n        long midMid = (midMaxIndex + midMin) / 2;\n        left
    = Maximum(left, k - 1).Union(Maximum(arr, k - 1)).ToList();\n        right = Maximum(right,
    k - 1).Union(Maximum(arr, k - 1)).ToList();\n        List<long> leftMax = Maximum(left,
    k).ToList();\n        List<long> rightMax = Maximum(right, k).ToList();\n        List<long>
    leftMaxIndex = leftMax.FindIndex(i => i == max);\n        List<long> rightMaxIndex
    = rightMax.FindIndex(i => i == max);\n        List<long> leftMin = Maximum(left,
    k - 1).ToList();\n        List<long> rightMin = Maximum(right, k - 1).ToList();\n
    \       List<long> leftMinIndex = leftMin.FindIndex(i => i == min);\n        List<long>
    rightMinIndex = rightMin.FindIndex(i => i == min);\n        List<long> leftMidMax
    = Maximum(left, k - 1).ToList();\n        List<long> rightMidMax = Maximum(right,
    k - 1).ToList();\n        List<long> leftMidMaxIndex = leftMidMax.FindIndex(i
    => i == midMax);\n        List<long> rightMidMaxIndex = rightMidMax.FindIndex(i
    => i == midMax);\n        List<long> leftMidMin = Maximum(left, k).ToList();\n
    \       List<long> rightMidMin = Maximum(right, k).ToList();\n        \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprcxs3pkt.cs(61,35): error CS0029: Cannot implicitly convert type ''int''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmprcxs3pkt.cs(62,36): error CS0029: Cannot implicitly convert type ''int''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmprcxs3pkt.cs(65,35): error CS0029: Cannot implicitly convert type ''int''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmprcxs3pkt.cs(66,36): error CS0029: Cannot implicitly convert type ''int''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmprcxs3pkt.cs(69,38): error CS0029: Cannot implicitly convert type ''int''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmprcxs3pkt.cs(70,39): error CS0029: Cannot implicitly convert type ''int''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmprcxs3pkt.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        long max = 0;\n        for (int i = 0; i < arr.Count;
    i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n
    \       }\n        if (max <= k) {\n            result.AddRange(arr.Take(max));\n
    \       } else {\n            long max2 = 0;\n            for (int i = 0; i <
    arr.Count; i++) {\n                if (arr[i] > max2) {\n                    max2
    = arr[i];\n                }\n            }\n            long max3 = 0;\n            for
    (int i = 0; i < arr.Count; i++) {\n                if (arr[i] > max3) {\n                    max3
    = arr[i];\n                }\n            }\n            long max4 = 0;\n            for
    (int i = 0; i < arr.Count; i++) {\n                if (arr[i] > max4) {\n                    max4
    = arr[i];\n                }\n            }\n            long max5 = 0;\n            for
    (int i = 0; i < arr.Count; i++) {\n                if (arr[i] > max5) {\n                    max5
    = arr[i];\n                }\n            }\n            long max6 = 0;\n            for
    (int i = 0; i < arr.Count; i++) {\n                if (arr[i] > max6) {\n                    max6
    = arr[i];\n                }\n            }\n            long max7 = 0;\n            for
    (int i = 0; i < arr.Count; i++) {\n                if (arr[i] > max7) {\n                    max7
    = arr[i];\n                }\n            }\n            long max8 = 0;\n            for
    (int i = 0; i < arr.Count; i++) {\n                if (arr[i] > max8) {\n                    max8
    = arr[i];\n                }\n            }\n            long max9 = 0;\n            for
    (int i = 0; i < arr.Count; i++) {\n                if (arr[i] > max9) {\n                    max9
    = arr[i];\n                }\n            }\n            long max10 = 0;\n            for
    (int i = 0; i < arr.Count; i++) {\n                if (arr[i] > max10) {\n                    max10
    = arr[i];\n                }\n            }\n            long max11 = 0;\n            for
    (int i = 0; i < arr.Count; i++) {\n                if (arr[i] > max11) {\n                    max11
    = arr[i];\n                }\n            }\n            long max12 = 0;\n            for
    (int i = 0; i < arr.Count; i++) {\n                if (arr[i] > max12) {\n                    max12
    = arr[i];\n                }\n            }\n            long max13 = 0;\n            for
    (int i = 0; i < arr.Count; i++) {\n                if (arr[i] > max13) {\n                    max13
    = arr[i];\n                }\n            }\n            long max14 = 0;\n            for
    (int i = 0; i < arr.Count; i++) {\n                if (arr[i] > max14) {\n                    max14
    = arr[i];\n                }\n            }\n            long max15 = 0;\n            for
    (int i = 0; i < arr.Count; i++) {\n                if (arr[i] > max15) {\n                    max15
    = arr[i];\n                }\n            }\n            long max16 = 0;\n            for
    (int i = 0; i < arr.Count; i++) {\n                if (arr[i] > max16) {\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfk7pesxv.cs(124,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpfk7pesxv.cs(138,2): error CS1513: } expected

    '
  timestamp: 1659823365
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        long max2 = 0;\n        long
    cur2 = 0;\n        foreach (long i in arr) {\n            if (max < i) {\n                max
    = i;\n                cur = i;\n            }\n            if (max2 < i) {\n                max2
    = i;\n                cur2 = i;\n            }\n        }\n        if (k == 1)
    {\n            result.Add(max);\n            return result;\n        }\n        if
    (k == 2) {\n            result.Add(max);\n            result.Add(max2);\n            return
    result;\n        }\n        if (k > 2) {\n            while (k > 1) {\n                result.Add(max);\n
    \               result.Add(max2);\n                k--;\n            }\n        }\n
    \       while (cur < max) {\n            result.Add(cur);\n            cur++;\n
    \       }\n        while (cur2 < max2) {\n            result.Add(cur2);\n            cur2++;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49345d116e9b40bc94e661fc18505153>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49345d116e9b40bc94e661fc18505153>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = arr.Min();\n        long mid = 0;\n
    \       long midMax = 0;\n        long midMin = 0;\n        long midMid = 0;\n
    \       long midMidMax = 0;\n        long midMidMin = 0;\n        long midMidMid
    = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin = 0;\n        long
    midMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin
    = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long
    midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax
    = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long
    midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid
    = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long
    midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin
    = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long
    midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax
    = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long
    midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid
    = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long
    midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin
    = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long
    midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax
    = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long
    midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid
    = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long
    midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin
    = 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpipr4bb7r.cs(41,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(42,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(43,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(44,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(45,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(46,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(47,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(48,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(49,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(50,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(51,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(52,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(53,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(54,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpipr4bb7r.cs(55,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /'
  timestamp: 1659793738
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count < k) {\n            throw
    new ArgumentOutOfRangeException(\"k\");\n        }\n        List<long> res = new
    List<long>();\n        long max = 0;\n        long maxIndex = 0;\n        for
    (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > max) {\n                max
    = arr[i];\n                maxIndex = i;\n            }\n        }\n        for
    (int i = 0; i < k; i++) {\n            res.Add(arr[maxIndex]);\n            maxIndex++;\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjo7aet6h.cs(38,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       long max = arr[0];\n        long maxIndex = 0;\n        for (int i = 0;
    i < arr.Count; i++) {\n            if (arr[i] > max) {\n                max =
    arr[i];\n                maxIndex = i;\n            }\n        }\n        if (k
    == maxIndex) {\n            return res;\n        }\n        List<long> left =
    new List<long>();\n        List<long> right = new List<long>();\n        for (int
    i = 0; i < arr.Count; i++) {\n            if (i == maxIndex) {\n                left.Add(arr[i]);\n
    \           } else {\n                right.Add(arr[i]);\n            }\n        }\n
    \       List<long> leftMax = Maximum(left, k - 1);\n        List<long> rightMax
    = Maximum(right, k - 1);\n        List<long> maxList = new List<long>();\n        maxList.AddRange(leftMax);\n
    \       maxList.AddRange(rightMax);\n        maxList.Add(max);\n        return
    maxList;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x00007] in <9b5cb4ac8ba649198ede6d663e455783>:0
    \n  at Problem.Maximum (System.Collections.Generic.List`1[T] arr, System.Int64
    k) [0x000c9] in <9b5cb4ac8ba649198ede6d663e455783>:0 \n  at Problem.Maximum (System.Collections.Generic.List`1[T]
    arr, System.Int64 k) [0x000bd] in <9b5cb4ac8ba649198ede6d663e455783>:0 \n  at
    Problem.Maximum (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x000bd]
    in <9b5cb4ac8ba649198ede6d663e455783>:0 \n  at Problem.Main (System.String[] args)
    [0x00017] in <9b5cb4ac8ba649198ede6d663e455783>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative
    and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item
    (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at
    Problem.Maximum (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x00007]
    in <9b5cb4ac8ba649198ede6d663e455783>:0 \n  at Problem.Maximum (System.Collections.Generic.List`1[T]
    arr, System.Int64 k) [0x000c9] in <9b5cb4ac8ba649198ede6d663e455783>:0 \n  at
    Problem.Maximum (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x000bd]
    in <9b5cb4ac8ba649198ede6d663e455783>:0 \n  at Problem.Maximum (System.Collections.Generic.List`1[T]
    arr, System.Int64 k) [0x000bd] in <9b5cb4ac8ba649198ede6d663e455783>:0 \n  at
    Problem.Main (System.String[] args) [0x00017] in <9b5cb4ac8ba649198ede6d663e455783>:0
    \n"
  stdout: ''
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        long max = 0;\n        for (int i = 0; i < arr.Count;
    i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n
    \       }\n        if (k == max) {\n            return arr;\n        }\n        long
    maxCount = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]
    == max) {\n                maxCount++;\n            }\n        }\n        if (maxCount
    > k) {\n            return arr;\n        }\n        List<long> newArr = new List<long>();\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > max) {\n
    \               newArr.Add(arr[i]);\n            }\n        }\n        Array.Sort(newArr);\n
    \       return newArr;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgy5umj2a.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpgy5umj2a.cs(51,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = arr[0];\n        long maxIndex = 0;\n        foreach (long
    i in arr) {\n            if (i > max) {\n                max = i;\n                maxIndex
    = i;\n            }\n        }\n        long maxCount = 0;\n        long maxCountIndex
    = 0;\n        long maxCountValue = 0;\n        foreach (long i in arr) {\n            if
    (i == max) {\n                maxCount++;\n                maxCountIndex = i;\n
    \               maxCountValue = i;\n            }\n        }\n        long maxCountValueIndex
    = 0;\n        long maxCountValueValue = 0;\n        foreach (long i in arr) {\n
    \           if (i == max) {\n                if (maxCountValue > maxCountValueValue)
    {\n                    maxCountValue = maxCountValue;\n                    maxCountValueIndex
    = maxCountIndex;\n                    maxCountValueValue = maxCountValue;\n                }\n
    \           }\n        }\n        long maxCountValueIndexValue = 0;\n        long
    maxCountValueValueValue = 0;\n        foreach (long i in arr) {\n            if
    (i == max) {\n                if (maxCountValue == maxCountValueValue) {\n                    if
    (maxCountValueIndex > maxCountValueIndexValue) {\n                        maxCountValueIndex
    = maxCountValueIndex;\n                        maxCountValueValueIndex = maxCountValueIndex;\n
    \                   }\n                }\n            }\n        }\n        long
    maxCountValueIndexValueValue = 0;\n        long maxCountValueValueValueValue =
    0;\n        foreach (long i in arr) {\n            if (i == max) {\n                if
    (maxCountValue == maxCountValueValue) {\n                    if (maxCountValueIndex
    == maxCountValueIndexValue) {\n                        if (maxCountValueIndexValue
    > maxCountValueIndexValueValue) {\n                            maxCountValueIndexValue
    = maxCountValueIndexValue;\n                            maxCountValueValueIndexValue
    = maxCountValueIndexValue;\n                        }\n                    }\n
    \               }\n            }\n        }\n        long maxCountValueIndexValueValue
    = 0;\n        long maxCountValueValueValueValue = 0;\n        foreach (long i
    in arr) {\n            if (i == max) {\n                if (maxCountValue == maxCountValueValue)
    {\n                    if (maxCountValueIndex == maxCountValueIndexValue) {\n
    \                       if (maxCountValueIndexValue == maxCountValueIndexValueValue)
    {\n                            if (maxCountValueIndexValueValue > maxCountValueIndexValueValue)
    {\n                                maxCountValueIndexValueValue = maxCountValueIndexValueValue;\n
    \                               maxCountValueValueIndexValueValue = maxCountValueIndexValueValue;\n
    \                           }\n                        }\n                    }\n
    \               }\n            }\n        }\n        long maxCountValueIndexValueValue
    = 0;\n        long maxCountValueValueValueValue = 0;\n        foreach (long i
    in arr) {\n            if (i == max) {\n                if (\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1rf6ingt.cs(101,21): error CS1525: Invalid expression term ''}''

    /tmp/tmp1rf6ingt.cs(101,21): error CS1026: ) expected

    /tmp/tmp1rf6ingt.cs(101,21): error CS1002: ; expected

    /tmp/tmp1rf6ingt.cs(103,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp1rf6ingt.cs(117,2): error CS1513: } expected

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       List<long> result = new List<long>();\n        long maxValue = arr[0];\n
    \       long maxIndex = -1;\n        for (int i = 1; i < arr.Count; i++) {\n            if
    (arr[i] > maxValue) {\n                maxValue = arr[i];\n                maxIndex
    = i;\n            }\n        }\n        result.Add(maxValue);\n        if (maxIndex
    < k - 1) {\n            List<long> newArr = new List<long>();\n            for
    (int i = maxIndex + 1; i < arr.Count; i++) {\n                newArr.Add(arr[i]);\n
    \           }\n            result = Maximum(newArr, k - 1);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkat1pjju.cs(38,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823365
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        foreach (long i in arr)
    {\n            if (i > max) {\n                max = i;\n                cur =
    i;\n            }\n            if (i == cur) {\n                cur++;\n            }\n
    \           if (cur > k) {\n                break;\n            }\n            result.Add(cur);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c310b849d93745adad59ffbe7c8ba1c3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c310b849d93745adad59ffbe7c8ba1c3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823364
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > k) {\n                max = sum;\n                min = i;\n                count
    = 1;\n            } else if (sum < k) {\n                max = sum;\n                min
    = i;\n                count = 1;\n            } else {\n                max =
    Math.Max(max, sum);\n                min = Math.Min(min, i);\n                count++;\n
    \           }\n        }\n        long temp;\n        if (count > 1) {\n            temp
    = max - min;\n            while (count > 1) {\n                result.Add(min
    + (temp / count));\n                count -= 1;\n                temp = temp /
    count;\n            }\n            result.Add(min);\n        } else {\n            result.Add(min);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ed3b1ba7b804c6daf73f551b77a1aff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ed3b1ba7b804c6daf73f551b77a1aff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        long max = 0;\n        long maxIndex = 0;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > max) {\n
    \               max = arr[i];\n                maxIndex = i;\n            }\n
    \       }\n        if (maxIndex == arr.Count - 1) {\n            result.Add(max);\n
    \       } else {\n            result.Add(arr[maxIndex + 1]);\n        }\n        if
    (result.Count > k) {\n            result.RemoveAt(result.Count - 1);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp4rql6zu.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpp4rql6zu.cs(38,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823365
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        foreach
    (long i in arr) {\n            sum += i;\n            if (sum > max) {\n                max
    = sum;\n            }\n            if (sum < min) {\n                min = sum;\n
    \           }\n        }\n        long mid = min + (max - min) / 2;\n        long
    sum2 = 0;\n        foreach (long i in arr) {\n            sum2 += i;\n            if
    (sum2 > mid) {\n                result.Add(i);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad399f59d8034252b48b778e730de08c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad399f59d8034252b48b778e730de08c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        if (arr.Count > k) {\n            k = arr.Count;\n
    \       }\n        long max = 0;\n        long maxIndex = 0;\n        for (int
    i = 0; i < k; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n
    \               maxIndex = i;\n            }\n        }\n        result.Add(max);\n
    \       for (int i = k; i < arr.Count; i++) {\n            if (arr[i] > max) {\n
    \               max = arr[i];\n                maxIndex = i;\n            }\n
    \       }\n        result.Add(max);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6hb9m5m4.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp6hb9m5m4.cs(39,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        if (arr.Count < k) {\n            return result;\n
    \       }\n        long max = 0;\n        long maxIndex = 0;\n        long maxValue
    = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]
    > maxValue) {\n                maxValue = arr[i];\n                maxIndex =
    i;\n            }\n        }\n        result.Add(maxValue);\n        result.Add(arr[maxIndex]);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplkjfd23n.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmplkjfd23n.cs(40,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmplkjfd23n.cs(30,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long maxIndex = 0;\n        long min = 0;\n        long
    minIndex = 0;\n        long sum = 0;\n        long sumIndex = 0;\n        long
    count = 0;\n        long countIndex = 0;\n        foreach (long i in arr) {\n
    \           sum += i;\n            if (sum > max) {\n                max = sum;\n
    \               maxIndex = count;\n            }\n            sum += i;\n            if
    (sum < min) {\n                min = sum;\n                minIndex = count;\n
    \           }\n            count++;\n        }\n        sum = 0;\n        sumIndex
    = 0;\n        count = 0;\n        countIndex = 0;\n        foreach (long i in
    arr) {\n            sum += i;\n            if (sum > max) {\n                max
    = sum;\n                maxIndex = count;\n            }\n            sum += i;\n
    \           if (sum < min) {\n                min = sum;\n                minIndex
    = count;\n            }\n            count++;\n            if (count == k) {\n
    \               result.Add(arr[maxIndex]);\n                countIndex++;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw8t88f5c.cs(64,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpw8t88f5c.cs(31,14): warning CS0219: The variable ''sumIndex'' is assigned
    but its value is never used

    '
  timestamp: 1659823365
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > k) {\n                max = sum;\n                result.Add(max);\n                sum
    = 0;\n            } else if (sum < k) {\n                min = sum;\n                result.Add(min);\n
    \               sum = 0;\n            }\n            count++;\n        }\n        if
    (count > 0) {\n            max = sum;\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6743931cf4694b008bf522fefabffabd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6743931cf4694b008bf522fefabffabd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > k) {\n                max = sum;\n                min = i;\n                count
    = 1;\n            } else if (sum == k) {\n                if (i > k) {\n                    max
    = i;\n                    min = sum;\n                    count = 1;\n                }
    else {\n                    max = sum;\n                    min = i;\n                    count
    = 1;\n                }\n            }\n        }\n        long temp;\n        temp
    = max;\n        max = min;\n        min = temp;\n        temp = sum;\n        sum
    = count;\n        count = temp;\n        temp = min;\n        min = sum;\n        sum
    = temp;\n        temp = count;\n        count = temp;\n        temp = k;\n        k
    = temp;\n        temp = k;\n        k = temp;\n        temp = k;\n        k =
    temp;\n        temp = k;\n        k = temp;\n        temp = k;\n        k = temp;\n
    \       temp = k;\n        k = temp;\n        temp = k;\n        k = temp;\n        temp
    = k;\n        k = temp;\n        k = temp;\n        temp = k;\n        k = temp;\n
    \       k = temp;\n        k = temp;\n        k = temp;\n        k = temp;\n        k
    = temp;\n        k = temp;\n        k = temp;\n        k = temp;\n        k =
    temp;\n        k = temp;\n        k = temp;\n        k = temp;\n        k = temp;\n
    \       k = temp;\n        k = temp;\n        k = temp;\n        k = temp;\n        k
    = temp;\n        k = temp;\n        k = temp;\n        k = temp;\n        k =
    temp;\n        k = temp;\n        k = temp;\n        k = temp;\n        k = temp;\n
    \       k = temp;\n        k = temp;\n        k = temp;\n        k = temp;\n        k
    = temp;\n        k = temp;\n        k = temp;\n        k = temp;\n        k =
    temp;\n        k = temp;\n        k = temp;\n        k = temp;\n        k = temp;\n
    \       k = temp;\n        k = temp;\n        k = temp;\n        k = temp;\n        k
    = temp;\n        k = temp;\n        k = temp;\n        k = temp;\n        k =
    temp;\n        k = temp;\n        k = temp;\n        k = temp;\n        k = temp;\n
    \       k = temp;\n        k = temp;\n        k = temp;\n        k = temp;\n        k
    = temp;\n        k = temp;\n        k = temp;\n        k = temp;\n        k =
    temp;\n        k = temp;\n        k = temp;\n        k = temp;\n        k = temp;\n
    \       k = temp;\n        k = temp;\n        k = temp;\n        k = temp\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_etovsp6.cs(147,17): error CS1002: ; expected

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxValue = 0;\n        long minValue = 0;\n        long
    maxIndexValue = 0;\n        long minIndexValue = 0;\n        long maxValue2 =
    0;\n        long minValue2 = 0;\n        long maxIndexValue2 = 0;\n        long
    minIndexValue2 = 0;\n        long maxValue3 = 0;\n        long minValue3 = 0;\n
    \       long maxIndexValue3 = 0;\n        long minIndexValue3 = 0;\n        long
    maxValue4 = 0;\n        long minValue4 = 0;\n        long maxIndexValue4 = 0;\n
    \       long minIndexValue4 = 0;\n        long maxValue5 = 0;\n        long minValue5
    = 0;\n        long maxIndexValue5 = 0;\n        long minIndexValue5 = 0;\n        long
    maxValue6 = 0;\n        long minValue6 = 0;\n        long maxIndexValue6 = 0;\n
    \       long minIndexValue6 = 0;\n        long maxValue7 = 0;\n        long minValue7
    = 0;\n        long maxIndexValue7 = 0;\n        long minIndexValue7 = 0;\n        long
    maxValue8 = 0;\n        long minValue8 = 0;\n        long maxIndexValue8 = 0;\n
    \       long minIndexValue8 = 0;\n        long maxValue9 = 0;\n        long minValue9
    = 0;\n        long maxIndexValue9 = 0;\n        long minIndexValue9 = 0;\n        long
    maxValue10 = 0;\n        long minValue10 = 0;\n        long maxIndexValue10 =
    0;\n        long minIndexValue10 = 0;\n        long maxValue11 = 0;\n        long
    minValue11 = 0;\n        long maxIndexValue11 = 0;\n        long minIndexValue11
    = 0;\n        long maxValue12 = 0;\n        long minValue12 = 0;\n        long
    maxIndexValue12 = 0;\n        long minIndexValue12 = 0;\n        long maxValue13
    = 0;\n        long minValue13 = 0;\n        long maxIndexValue13 = 0;\n        long
    minIndexValue13 = 0;\n        long maxValue14 = 0;\n        long minValue14 =
    0;\n        long maxIndexValue14 = 0;\n        long minIndexValue14 = 0;\n        long
    maxValue15 = 0;\n        long minValue15 = 0;\n        long maxIndexValue15 =
    0;\n        long minIndexValue15 = 0;\n        long maxValue16 = 0;\n        long
    minValue16 = 0;\n        long maxIndexValue16 = 0;\n        long minIndexValue16
    = 0;\n        long maxValue17 = 0;\n        long minValue17 = 0;\n        long
    maxIndexValue17\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz3y92ugv.cs(96,29): error CS1002: ; expected

    '
  timestamp: 1659823364
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long> result
    = new List<long>();\n        foreach (long i in arr) {\n            if (i > max)
    {\n                max = i;\n            }\n        }\n        long len = arr.Count;\n
    \       long start = 0;\n        long end = len - k;\n        while (start < end)
    {\n            long mid = (start + end) / 2;\n            if (arr[mid] > max)
    {\n                end = mid;\n            } else {\n                start = mid
    + 1;\n            }\n        }\n        long mid = start + (end - start) / 2;\n
    \       while (arr[mid] > max) {\n            result.Add(arr[mid]);\n            mid
    += 1;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqfjiewtv.cs(36,18): error CS0136: A local or parameter named ''mid'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpqfjiewtv.cs(37,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpqfjiewtv.cs(44,20): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpqfjiewtv.cs(45,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = arr[0];\n        long maxCount = 0;\n        long currentCount
    = 0;\n        long currentMax = 0;\n        foreach (long i in arr) {\n            if
    (currentCount < k) {\n                if (currentCount > maxCount) {\n                    maxCount
    = currentCount;\n                    currentMax = currentCount;\n                }\n
    \               currentCount++;\n            }\n            if (currentCount ==
    k) {\n                if (currentCount > maxCount) {\n                    maxCount
    = currentCount;\n                    currentMax = currentCount;\n                }\n
    \               currentCount = 0;\n            }\n            if (currentCount
    > maxCount) {\n                maxCount = currentCount;\n                currentMax
    = currentCount;\n            }\n            if (currentCount < k) {\n                currentCount
    = 0;\n            }\n            if (currentCount > maxCount) {\n                maxCount
    = currentCount;\n                currentMax = currentCount;\n            }\n            if
    (currentCount > maxCount) {\n                maxCount = currentCount;\n                currentMax
    = currentCount;\n            }\n            if (currentCount > maxCount) {\n                maxCount
    = currentCount;\n                currentMax = currentCount;\n            }\n            if
    (currentCount > maxCount) {\n                maxCount = currentCount;\n                currentMax
    = currentCount;\n            }\n            if (currentCount > maxCount) {\n                maxCount
    = currentCount;\n                currentMax = currentCount;\n            }\n            if
    (currentCount > maxCount) {\n                maxCount = currentCount;\n                currentMax
    = currentCount;\n            }\n            if (currentCount > maxCount) {\n                maxCount
    = currentCount;\n                currentMax = currentCount;\n            }\n            if
    (currentCount > maxCount) {\n                maxCount = currentCount;\n                currentMax
    = currentCount;\n            }\n            if (currentCount > maxCount) {\n                maxCount
    = currentCount;\n                currentMax = currentCount;\n            }\n            if
    (currentCount > maxCount) {\n                maxCount = currentCount;\n                currentMax
    = currentCount;\n            }\n            if (currentCount > maxCount) {\n                maxCount
    = currentCount;\n                currentMax = currentCount;\n            }\n            if
    (currentCount > maxCount) {\n                maxCount = currentCount;\n                currentMax
    = currentCount;\n            }\n            if (currentCount > maxCount) {\n                maxCount
    = currentCount;\n                currentMax = currentCount;\n            }\n            if
    (currentCount > maxCount) {\n                maxCount = currentCount;\n                currentMax
    = currentCount;\n            }\n            if (currentCount > \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe3ay5_zl.cs(108,31): error CS1525: Invalid expression term ''}''

    /tmp/tmpe3ay5_zl.cs(108,31): error CS1026: ) expected

    /tmp/tmpe3ay5_zl.cs(108,31): error CS1002: ; expected

    /tmp/tmpe3ay5_zl.cs(110,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpe3ay5_zl.cs(124,2): error CS1513: } expected

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long maxIndex = 0;\n        long min = 0;\n        long
    minIndex = 0;\n        long sum = 0;\n        long sumIndex = 0;\n        bool
    isMax = true;\n        bool isMin = true;\n        bool isSum = true;\n        bool
    isMaxIndex = true;\n        bool isMinIndex = true;\n        bool isSumIndex =
    true;\n        bool isMaxIndexSum = true;\n        bool isMinIndexSum = true;\n
    \       bool isMaxIndexMin = true;\n        bool isMinIndexMin = true;\n        bool
    isSumIndexMin = true;\n        bool isMaxIndexSumMin = true;\n        bool isMinIndexSumMin
    = true;\n        bool isMaxIndexMinSum = true;\n        bool isMinIndexMinSum
    = true;\n        bool isMaxIndexSumMin = true;\n        bool isMinIndexSumMin
    = true;\n        bool isMaxIndexMinSumMin = true;\n        bool isMinIndexMinSumMin
    = true;\n        bool isMaxIndexSumMin = true;\n        bool isMinIndexSumMin
    = true;\n        bool isMaxIndexMinSumMin = true;\n        bool isMinIndexMinSumMin
    = true;\n        bool isMaxIndexSumMin = true;\n        bool isMinIndexSumMin
    = true;\n        bool isMaxIndexMinSumMin = true;\n        bool isMinIndexMinSumMin
    = true;\n        bool isMaxIndexSumMin = true;\n        bool isMinIndexSumMin
    = true;\n        bool isMaxIndexMinSumMin = true;\n        bool isMinIndexMinSumMin
    = true;\n        bool isMaxIndexSumMin = true;\n        bool isMinIndexSumMin
    = true;\n        bool isMaxIndexMinSumMin = true;\n        bool isMinIndexMinSumMin
    = true;\n        bool isMaxIndexSumMin = true;\n        bool isMinIndexSumMin
    = true;\n        bool isMaxIndexMinSumMin = true;\n        bool isMinIndexMinSumMin
    = true;\n        bool isMaxIndexSumMin = true;\n        bool isMinIndexSumMin
    = true;\n        bool isMaxIndexMinSumMin = true;\n        bool isMinIndexMinSumMin
    = true;\n        bool isMaxIndexSumMin = true;\n        bool isMinIndexSumMin
    = true;\n        bool isMaxIndexMinSumMin = true;\n        bool isMinIndexMinSumMin
    = true;\n        bool isMaxIndexSumMin = true;\n        bool isMinIndexSumMin
    = true;\n        bool isMaxIndexMinSumMin = true;\n        bool isMinIndexMinSumMin
    = true;\n        bool isMaxIndexSumMin = true;\n        bool is\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdvowahzl.cs(84,14): error CS1001: Identifier expected

    /tmp/tmpdvowahzl.cs(84,14): error CS1002: ; expected

    /tmp/tmpdvowahzl.cs(84,14): error CS1525: Invalid expression term ''is''

    /tmp/tmpdvowahzl.cs(84,16): error CS1031: Type expected

    /tmp/tmpdvowahzl.cs(84,16): error CS1002: ; expected

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        long max = 0;\n        long maxIndex = 0;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > max) {\n
    \               max = arr[i];\n                maxIndex = i;\n            }\n
    \       }\n        result.Add(arr[maxIndex]);\n        for (int i = 0; i < arr.Count
    - k + 1; i++) {\n            long tempMax = arr[maxIndex];\n            long tempMaxIndex
    = maxIndex;\n            for (int j = maxIndex + 1; j < arr.Count; j++) {\n                if
    (arr[j] > tempMax) {\n                    tempMax = arr[j];\n                    tempMaxIndex
    = j;\n                }\n            }\n            result.Add(arr[tempMaxIndex]);\n
    \           maxIndex = tempMaxIndex;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq8m7wn6l.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpq8m7wn6l.cs(35,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpq8m7wn6l.cs(37,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpq8m7wn6l.cs(39,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq8m7wn6l.cs(45,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long
    temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6
    = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n
    \       long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n
    \       long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n
    \       long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n
    \       long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n
    \       long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n
    \       long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n
    \       long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n
    \       long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n
    \       long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n
    \       long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n
    \       long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n
    \       long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n
    \       long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n
    \       long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n
    \       long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n
    \       long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n
    \       long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n
    \       long temp61 = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n
    \       long temp64 = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n
    \       long temp67 = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n
    \       long temp70 = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n
    \       long temp73 = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n
    \       long temp76 = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n
    \       long temp79 = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n
    \       long temp82 = 0;\n        long temp83 = 0;\n        long temp84\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeubn4iuh.cs(110,20): error CS1002: ; expected

    '
  timestamp: 1659793737
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > max) {\n                max = sum;\n            }\n            if (sum
    < min) {\n                min = sum;\n            }\n            count++;\n        }\n
    \       long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long
    mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n
    \       long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8
    = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long
    mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long mid13 = mid12
    / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long
    mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17
    / 2;\n        long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long
    mid21 = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22
    / 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n        long
    mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28 = mid27
    / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long
    mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32
    / 2;\n        long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long
    mid36 = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37
    / 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long
    mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42
    / 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdljw2px5.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = arr[0];\n        List<long>
    result = new List<long>();\n        foreach (long i in arr) {\n            if
    (i > max) {\n                max = i;\n            }\n        }\n        long
    maxCount = 0;\n        long maxCountIndex = 0;\n        long maxCountValue = max;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == maxCountValue)
    {\n                maxCount++;\n                if (maxCount > k) {\n                    break;\n
    \               }\n            }\n        }\n        if (maxCount > k) {\n            throw
    new ArgumentException(\"k is too large\");\n        }\n        for (int i = 0;
    i < arr.Count; i++) {\n            if (arr[i] == maxCountValue) {\n                result.Add(arr[i]);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ec1f4c4d1d647a88759fc2ca1353cea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ec1f4c4d1d647a88759fc2ca1353cea>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: k is too large\n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x000a6] in <8ec1f4c4d1d647a88759fc2ca1353cea>:0
    \n  at Problem.Main (System.String[] args) [0x00092] in <8ec1f4c4d1d647a88759fc2ca1353cea>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentExceptio"
  stdout: ''
  timestamp: 1659823366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        if (arr.Count > k) {\n            k = arr.Count;\n
    \       }\n        long max = 0;\n        long maxIndex = 0;\n        for (int
    i = 0; i < k; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n
    \               maxIndex = i;\n            }\n        }\n        result.Add(max);\n
    \       for (int i = k; i < arr.Count; i++) {\n            if (arr[i] > max) {\n
    \               max = arr[i];\n                maxIndex = i;\n            }\n
    \       }\n        result.Add(max);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6hb9m5m4.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp6hb9m5m4.cs(39,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long max2 = 0;\n        long
    min2 = 0;\n        long max3 = 0;\n        long min3 = 0;\n        long max4 =
    0;\n        long min4 = 0;\n        long max5 = 0;\n        long min5 = 0;\n        long
    max6 = 0;\n        long min6 = 0;\n        long max7 = 0;\n        long min7 =
    0;\n        long max8 = 0;\n        long min8 = 0;\n        long max9 = 0;\n        long
    min9 = 0;\n        long max10 = 0;\n        long min10 = 0;\n        long max11
    = 0;\n        long min11 = 0;\n        long max12 = 0;\n        long min12 = 0;\n
    \       long max13 = 0;\n        long min13 = 0;\n        long max14 = 0;\n        long
    min14 = 0;\n        long max15 = 0;\n        long min15 = 0;\n        long max16
    = 0;\n        long min16 = 0;\n        long max17 = 0;\n        long min17 = 0;\n
    \       long max18 = 0;\n        long min18 = 0;\n        long max19 = 0;\n        long
    min19 = 0;\n        long max20 = 0;\n        long min20 = 0;\n        long max21
    = 0;\n        long min21 = 0;\n        long max22 = 0;\n        long min22 = 0;\n
    \       long max23 = 0;\n        long min23 = 0;\n        long max24 = 0;\n        long
    min24 = 0;\n        long max25 = 0;\n        long min25 = 0;\n        long max26
    = 0;\n        long min26 = 0;\n        long max27 = 0;\n        long min27 = 0;\n
    \       long max28 = 0;\n        long min28 = 0;\n        long max29 = 0;\n        long
    min29 = 0;\n        long max30 = 0;\n        long min30 = 0;\n        long max31
    = 0;\n        long min31 = 0;\n        long max32 = 0;\n        long min32 = 0;\n
    \       long max33 = 0;\n        long min33 = 0;\n        long max34 = 0;\n        long
    min34 = 0;\n        long max35 = 0;\n        long min35 = 0;\n        long max36
    = 0;\n        long min36 = 0;\n        long max37 = 0;\n        long min37 = 0;\n
    \       long max38 = 0;\n        long min38 = 0;\n        long max39 = 0;\n        long
    min39 = 0;\n        long max40 = 0;\n        long min40 = 0;\n        long max41
    = 0;\n        long min41 = 0;\n        long max42 = 0;\n        long min42 = 0;\n
    \       long max43 = 0;\n        long \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdkwa3v6v.cs(111,13): error CS1001: Identifier expected

    /tmp/tmpdkwa3v6v.cs(111,13): error CS1002: ; expected

    '
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) {\n            throw
    new ArgumentOutOfRangeException(\"k\");\n        }\n        List<long> result
    = new List<long>();\n        long max = 0;\n        long maxIndex = 0;\n        long
    maxValue = arr[0];\n        foreach (long i in arr) {\n            if (i > maxValue)
    {\n                maxValue = i;\n                maxIndex = i;\n            }\n
    \           if (i == maxValue) {\n                maxIndex++;\n            }\n
    \       }\n        max = maxIndex;\n        while (max < k) {\n            result.Add(arr[max]);\n
    \           max++;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmxr0caqu.cs(43,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count < 1 || k < 0 || k > arr.Count)
    {\n            throw new ArgumentOutOfRangeException(\"arr\", \"The length of
    arr must be in the range of [1, 1000]\");\n        }\n        List<long> result
    = new List<long>();\n        long max = 0;\n        long min = 0;\n        long
    maxIndex = 0;\n        long minIndex = 0;\n        long maxValue = arr[0];\n        long
    minValue = arr[0];\n        long maxCount = 0;\n        long minCount = 0;\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n                maxValue
    = arr[i];\n                maxIndex = i;\n                maxCount = 1;\n            }\n
    \           else if (arr[i] == maxValue) {\n                maxCount++;\n            }\n
    \           if (arr[i] < minValue) {\n                minValue = arr[i];\n                minIndex
    = i;\n                minCount = 1;\n            }\n            else if (arr[i]
    == minValue) {\n                minCount++;\n            }\n            if (maxCount
    > minCount) {\n                max = maxValue;\n                maxIndex = maxIndex;\n
    \               maxCount = maxCount;\n                min = minValue;\n                minIndex
    = minIndex;\n                minCount = minCount;\n            }\n        }\n
    \       if (maxCount > minCount) {\n            max = maxValue;\n            maxIndex
    = maxIndex;\n            maxCount = maxCount;\n            min = minValue;\n            minIndex
    = minIndex;\n            minCount = minCount;\n        }\n        if (maxCount
    > k) {\n            max = maxValue;\n            maxIndex = maxIndex;\n            maxCount
    = maxCount;\n            min = minValue;\n            minIndex = minIndex;\n            minCount
    = minCount;\n        }\n        if (minCount > k) {\n            min = minValue;\n
    \           minIndex = minIndex;\n            minCount = minCount;\n        }\n
    \       if (maxCount > k) {\n            max = maxValue;\n            maxIndex
    = maxIndex;\n            maxCount = maxCount;\n            min = minValue;\n            minIndex
    = minIndex;\n            minCount = minCount;\n        }\n        if (minCount
    > k) {\n            min = minValue;\n            minIndex = minIndex;\n            minCount
    = minCount;\n        }\n        if (maxCount > k) {\n            max = maxValue;\n
    \           maxIndex = maxIndex;\n            maxCount = maxCount;\n            min
    = minValue;\n            minIndex = minIndex;\n            minCount = minCount;\n
    \       }\n        if (minCount > k) {\n            min = minValue;\n            minIndex
    = minIndex;\n            minCount = minCount;\n        }\n        if (maxCount
    > k) {\n            max = maxValue;\n            maxIndex = maxIndex;\n            maxCount
    = maxCount;\n            min = minValue;\n            \n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpocfk4le7.cs(117,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpocfk4le7.cs(131,2): error CS1513: } expected

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    temp = 0;\n        long count = 0;\n        long sum2 = 0;\n        long sum3
    = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n
    \       long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n        long
    sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n        long sum13
    = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n        long sum16 = 0;\n
    \       long sum17 = 0;\n        long sum18 = 0;\n        long sum19 = 0;\n        long
    sum20 = 0;\n        long sum21 = 0;\n        long sum22 = 0;\n        long sum23
    = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n        long sum26 = 0;\n
    \       long sum27 = 0;\n        long sum28 = 0;\n        long sum29 = 0;\n        long
    sum30 = 0;\n        long sum31 = 0;\n        long sum32 = 0;\n        long sum33
    = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n
    \       long sum37 = 0;\n        long sum38 = 0;\n        long sum39 = 0;\n        long
    sum40 = 0;\n        long sum41 = 0;\n        long sum42 = 0;\n        long sum43
    = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n
    \       long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n        long
    sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n        long sum53
    = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long sum56 = 0;\n
    \       long sum57 = 0;\n        long sum58 = 0;\n        long sum59 = 0;\n        long
    sum60 = 0;\n        long sum61 = 0;\n        long sum62 = 0;\n        long sum63
    = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n        long sum66 = 0;\n
    \       long sum67 = 0;\n        long sum68 = 0;\n        long sum69 = 0;\n        long
    sum70 = 0;\n        long sum71 = 0;\n        long sum72 = 0;\n        long sum73
    = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n        long sum76 = 0;\n
    \       long sum77 = 0;\n        long sum78 = 0;\n        long sum79 = 0;\n        long
    sum80 = 0;\n        long sum81 = 0;\n        long \n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfjp47hrz.cs(111,13): error CS1001: Identifier expected

    /tmp/tmpfjp47hrz.cs(111,13): error CS1002: ; expected

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = arr.Min();\n        long mid = min +
    (max - min) / 2;\n        long mid2 = mid + (max - min) / 2;\n        long mid3
    = mid2 + (max - min) / 2;\n        long mid4 = mid3 + (max - min) / 2;\n        long
    mid5 = mid4 + (max - min) / 2;\n        long mid6 = mid5 + (max - min) / 2;\n
    \       long mid7 = mid6 + (max - min) / 2;\n        long mid8 = mid7 + (max -
    min) / 2;\n        long mid9 = mid8 + (max - min) / 2;\n        long mid10 = mid9
    + (max - min) / 2;\n        long mid11 = mid10 + (max - min) / 2;\n        long
    mid12 = mid11 + (max - min) / 2;\n        long mid13 = mid12 + (max - min) / 2;\n
    \       long mid14 = mid13 + (max - min) / 2;\n        long mid15 = mid14 + (max
    - min) / 2;\n        long mid16 = mid15 + (max - min) / 2;\n        long mid17
    = mid16 + (max - min) / 2;\n        long mid18 = mid17 + (max - min) / 2;\n        long
    mid19 = mid18 + (max - min) / 2;\n        long mid20 = mid19 + (max - min) / 2;\n
    \       long mid21 = mid20 + (max - min) / 2;\n        long mid22 = mid21 + (max
    - min) / 2;\n        long mid23 = mid22 + (max - min) / 2;\n        long mid24
    = mid23 + (max - min) / 2;\n        long mid25 = mid24 + (max - min) / 2;\n        long
    mid26 = mid25 + (max - min) / 2;\n        long mid27 = mid26 + (max - min) / 2;\n
    \       long mid28 = mid27 + (max - min) / 2;\n        long mid29 = mid28 + (max
    - min) / 2;\n        long mid30 = mid29 + (max - min) / 2;\n        long mid31
    = mid30 + (max - min) / 2;\n        long mid32 = mid31 + (max - min) / 2;\n        long
    mid33 = mid32 + (max - min) / 2;\n        long mid34 = mid33 + (max - min) / 2;\n
    \       long mid35 = mid34 + (max - min) / 2;\n        long mid36 = mid35 + (max
    - min) / 2;\n        long mid37 = mid36 + (max - min) / 2;\n        long mid38
    = mid37 + (max - min) / 2;\n        long mid39 = mid38 + (max - min\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpms51trvw.cs(66,40): error CS1026: ) expected

    /tmp/tmpms51trvw.cs(66,40): error CS1002: ; expected

    '
  timestamp: 1659823365
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        long max = 0;\n        long maxIndex = 0;\n
    \       long maxValue = arr[0];\n        for (int i = 0; i < arr.Count; i++) {\n
    \           if (arr[i] > maxValue) {\n                max = arr[i];\n                maxIndex
    = i;\n            }\n        }\n        if (k == maxIndex) {\n            result.Add(max);\n
    \       } else {\n            for (int i = 0; i < arr.Count; i++) {\n                if
    (i == maxIndex) {\n                    result.Add(max);\n                } else
    {\n                    if (arr[i] > max) {\n                        max = arr[i];\n
    \                       maxIndex = i;\n                    }\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaa72qly9.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659823366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       List<long> result = new List<long>();\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        long maxIndex = -1;\n        for
    (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == max) {\n                maxIndex
    = i;\n            }\n        }\n        result.Add(max);\n        if (maxIndex
    + 1 < k) {\n            result.AddRange(Maximum(arr.Skip(maxIndex + 1).ToList(),
    k - maxIndex));\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmqbvcix6.cs(41,46): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxValue = arr[0];\n        long minValue = arr[0];\n
    \       long maxIndex = arr[0];\n        long minIndex = arr[0];\n        foreach
    (long i in arr) {\n            if (i > maxValue) {\n                maxValue =
    i;\n                maxIndex = i;\n            }\n            if (i < minValue)
    {\n                minValue = i;\n                minIndex = i;\n            }\n
    \           if (i == maxValue) {\n                max = maxIndex;\n                maxIndex
    = maxIndex;\n            }\n            if (i == minValue) {\n                min
    = minIndex;\n                minIndex = minIndex;\n            }\n        }\n
    \       long mid = (maxIndex + minIndex) / 2;\n        if (k > mid) {\n            k
    = mid + 1;\n        }\n        if (k > arr.Count) {\n            k = arr.Count;\n
    \       }\n        if (k == 1) {\n            res.Add(maxIndex);\n            return
    res;\n        }\n        long midValue = arr[mid];\n        long midIndex = arr[mid];\n
    \       long midMax = arr[mid];\n        long midMin = arr[mid];\n        long
    midMaxIndex = arr[mid];\n        long midMinIndex = arr[mid];\n        long midMaxValue
    = arr[mid];\n        long midMinValue = arr[mid];\n        long midMaxIndex =
    arr[mid];\n        long midMinIndex = arr[mid];\n        foreach (long i in arr)
    {\n            if (i == midValue) {\n                midValue = i;\n                midIndex
    = i;\n                midMax = i;\n                midMin = i;\n                midMaxIndex
    = i;\n                midMinIndex = i;\n                midMaxValue = i;\n                midMinValue
    = i;\n                midMaxIndex = i;\n                midMinIndex = i;\n            }\n
    \           if (i > midValue) {\n                midValue = i;\n                midIndex
    = i;\n                midMax = i;\n                midMin = i;\n                midMaxIndex
    = i;\n                midMinIndex = i;\n                midMaxValue = i;\n                midMinValue
    = i;\n                midMaxIndex = i;\n                midMinIndex = i;\n            }\n
    \           if (i == midMaxValue) {\n                midMax = i;\n                midMaxIndex
    = i;\n            }\n            if (i == midMinValue) {\n                midMin
    = i;\n                midMinIndex = i;\n            }\n        }\n        long
    midMid = (midMaxIndex + midMinIndex) / 2;\n        if (k > midMid) {\n            k
    = midMid + 1;\n        }\n        if (k > arr.Count) {\n            k = arr.Count;\n
    \       }\n        if (k == \n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw0_79zhw.cs(114,17): error CS1525: Invalid expression term ''}''

    /tmp/tmpw0_79zhw.cs(114,17): error CS1026: ) expected

    /tmp/tmpw0_79zhw.cs(114,17): error CS1002: ; expected

    '
  timestamp: 1659823366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        long maxValue = arr[0];\n        long minValue = arr[0];\n
    \       long maxIndexValue = 0;\n        long minIndexValue = 0;\n        bool
    isMax = true;\n        bool isMin = true;\n        bool isMaxIndex = true;\n        bool
    isMinIndex = true;\n        bool isMaxValue = true;\n        bool isMinValue =
    true;\n        bool isMaxIndexValue = true;\n        bool isMinIndexValue = true;\n
    \       bool isMaxIndexValue = true;\n        bool isMinIndexValue = true;\n        bool
    isMaxIndexValue = true;\n        bool isMinIndexValue = true;\n        bool isMaxIndexValue
    = true;\n        bool isMinIndexValue = true;\n        bool isMaxIndexValue =
    true;\n        bool isMinIndexValue = true;\n        bool isMaxIndexValue = true;\n
    \       bool isMinIndexValue = true;\n        bool isMaxIndexValue = true;\n        bool
    isMinIndexValue = true;\n        bool isMaxIndexValue = true;\n        bool isMinIndexValue
    = true;\n        bool isMaxIndexValue = true;\n        bool isMinIndexValue =
    true;\n        bool isMaxIndexValue = true;\n        bool isMinIndexValue = true;\n
    \       bool isMaxIndexValue = true;\n        bool isMinIndexValue = true;\n        bool
    isMaxIndexValue = true;\n        bool isMinIndexValue = true;\n        bool isMaxIndexValue
    = true;\n        bool isMinIndexValue = true;\n        bool isMaxIndexValue =
    true;\n        bool isMinIndexValue = true;\n        bool isMaxIndexValue = true;\n
    \       bool isMinIndexValue = true;\n        bool isMaxIndexValue = true;\n        bool
    isMinIndexValue = true;\n        bool isMaxIndexValue = true;\n        bool isMinIndexValue
    = true;\n        bool isMaxIndexValue = true;\n        bool isMinIndexValue =
    true;\n        bool isMaxIndexValue = true;\n        bool isMinIndexValue = true;\n
    \       bool isMaxIndexValue = true;\n        bool isMinIndexValue = true;\n        bool
    isMaxIndexValue = true;\n        bool isMinIndexValue = true;\n        bool isMaxIndexValue
    = true;\n        bool isMinIndexValue = true;\n        bool isMaxIndexValue =
    true;\n        bool isMinIndexValue = true;\n        bool isMaxIndexValue = true;\n
    \       bool isMinIndexValue = true;\n        bool isMaxIndexValue = true;\n        bool
    isMinIndexValue = true;\n        bool isMaxIndexValue = true;\n        bool isMin\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6s3ziwo7.cs(91,19): error CS1002: ; expected

    '
  timestamp: 1659823366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long> result
    = new List<long>();\n        foreach (long i in arr) {\n            if (max <
    i) {\n                max = i;\n            }\n        }\n        if (max > k)
    {\n            max = k;\n        }\n        long cur = max;\n        long curMax
    = max;\n        while (curMax < k) {\n            result.Add(cur);\n            curMax++;\n
    \           cur++;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <999d9d72951c462f9644ffd950e7d0d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <999d9d72951c462f9644ffd950e7d0d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (long i in arr) {\n            sum += i;\n            if
    (sum > max) {\n                max = sum;\n            }\n            if (sum
    < min) {\n                min = sum;\n            }\n            if (sum == max)
    {\n                result.Add(i);\n                count++;\n            }\n        }\n
    \       if (count > k) {\n            k = count;\n        }\n        if (k ==
    1) {\n            result.Add(max);\n        }\n        else {\n            List<long>
    temp = new List<long>();\n            while (result.Count > 0) {\n                temp.Add(result.Remove(0));\n
    \           }\n            result = temp;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6ic42r9n.cs(52,26): error CS1503: Argument 1: cannot convert from ''bool''
    to ''long''

    '
  timestamp: 1659823366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count < k) {\n            return
    arr;\n        }\n        List<long> result = new List<long>();\n        long max
    = 0;\n        long min = 0;\n        long max2 = 0;\n        long min2 = 0;\n
    \       long max3 = 0;\n        long min3 = 0;\n        long max4 = 0;\n        long
    min4 = 0;\n        long max5 = 0;\n        long min5 = 0;\n        long max6 =
    0;\n        long min6 = 0;\n        long max7 = 0;\n        long min7 = 0;\n        long
    max8 = 0;\n        long min8 = 0;\n        long max9 = 0;\n        long min9 =
    0;\n        long max10 = 0;\n        long min10 = 0;\n        long max11 = 0;\n
    \       long min11 = 0;\n        long max12 = 0;\n        long min12 = 0;\n        long
    max13 = 0;\n        long min13 = 0;\n        long max14 = 0;\n        long min14
    = 0;\n        long max15 = 0;\n        long min15 = 0;\n        long max16 = 0;\n
    \       long min16 = 0;\n        long max17 = 0;\n        long min17 = 0;\n        long
    max18 = 0;\n        long min18 = 0;\n        long max19 = 0;\n        long min19
    = 0;\n        long max20 = 0;\n        long min20 = 0;\n        long max21 = 0;\n
    \       long min21 = 0;\n        long max22 = 0;\n        long min22 = 0;\n        long
    max23 = 0;\n        long min23 = 0;\n        long max24 = 0;\n        long min24
    = 0;\n        long max25 = 0;\n        long min25 = 0;\n        long max26 = 0;\n
    \       long min26 = 0;\n        long max27 = 0;\n        long min27 = 0;\n        long
    max28 = 0;\n        long min28 = 0;\n        long max29 = 0;\n        long min29
    = 0;\n        long max30 = 0;\n        long min30 = 0;\n        long max31 = 0;\n
    \       long min31 = 0;\n        long max32 = 0;\n        long min32 = 0;\n        long
    max33 = 0;\n        long min33 = 0;\n        long max34 = 0;\n        long min34
    = 0;\n        long max35 = 0;\n        long min35 = 0;\n        long max36 = 0;\n
    \       long min36 = 0;\n        long max37 = 0;\n        long min37 = 0;\n        long
    max38 = 0;\n        long min38 = 0;\n        long max39 = 0;\n        long min39
    = 0;\n        long max40 = 0;\n        long min40 = 0;\n        long max41 = 0;\n
    \       long min41 = 0;\n        long max42 = 0;\n        \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt4kmr78t.cs(29,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpt4kmr78t.cs(30,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmpt4kmr78t.cs(31,14): warning CS0219: The variable ''max2'' is assigned
    but its value is never used

    /tmp/tmpt4kmr78t.cs(32,14): warning CS0219: The variable ''min2'' is assigned
    but its value is never used

    /tmp/tmpt4kmr78t.cs(33,14): warning CS0219: The variable ''max3'' is assigned
    but its value is never used

    /tmp/tmpt4kmr78t.cs(34,14): warning CS0219: The variable ''min3'' is assigned
    but its value is never used

    /tmp/tmpt4kmr78t.cs(35,14): warning CS0219: The variable ''max4'' is assigned
    but its value is never used

    /tmp/tmpt4kmr78t.cs(36,14): warning CS0219: The variable ''min4'' is assigned
    but its value is never used

    /tmp/tmpt4kmr78t.cs(37,14): warning CS0219: The variable ''max5'' is assigned
    but its value is never used

    /tmp/tmpt4kmr78t.cs(38,14): warning CS0219: The variable ''min5'' is assigned
    but its value is never used

    /tmp/tmpt4kmr78t.cs(39,14): warning CS0219: The variable ''max6'' is assigned
    but its value is never used

    /tmp/tmpt4kmr78t.cs(40,14): warning CS0219: The variable ''min6'' is assigned
    but its value is never used

    /tmp/tmpt4kmr78t.cs(41,14): warning CS0219: The variable ''max7'' is assigned
    but its value is never used

    /tmp/tmpt4kmr78t.cs(42,14): warning CS0219: The variable ''min7'' is assigned
    but its value is never used

    /tmp/tmpt4kmr78t.cs(43,14): warning CS0219: The variable ''max8'' is assigned
    but its value is never used

    /tmp/tmpt4kmr78t.cs(44,14): warning CS0219: The variable ''min8'' is assigned
    but its value is never used

    /tmp/tmpt4kmr78t.cs(45,14): warning CS0219: The variable ''max9'' is assigned
    but its value is never used

    /tmp/tmpt4kmr78t.cs(46,14): warning CS0219: The variable ''min9'' is assigned
    but its value is never used

    /tmp/tmpt4kmr78t.cs(47,14): warning CS0219: The var'
  timestamp: 1659823366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       List<long> res = new List<long>();\n        long max = 0;\n        long
    min = 0;\n        long maxIndex = 0;\n        long minIndex = 0;\n        long
    maxValue = arr[0];\n        long minValue = arr[0];\n        long maxCount = 0;\n
    \       long minCount = 0;\n        long maxCountIndex = 0;\n        long minCountIndex
    = 0;\n        long maxCountValue = arr[0];\n        long minCountValue = arr[0];\n
    \       long maxCountValueIndex = 0;\n        long minCountValueIndex = 0;\n        long
    maxCountValueValue = arr[0];\n        long minCountValueValue = arr[0];\n        long
    maxCountValueValueIndex = 0;\n        long minCountValueValueIndex = 0;\n        long
    maxCountValueValueValue = arr[0];\n        long minCountValueValueValue = arr[0];\n
    \       long maxCountValueValueValueIndex = 0;\n        long minCountValueValueValueIndex
    = 0;\n        long maxCountValueValueValueValue = arr[0];\n        long minCountValueValueValueValue
    = arr[0];\n        long maxCountValueValueValueIndex = 0;\n        long minCountValueValueValueIndex
    = 0;\n        long maxCountValueValueValueValue = arr[0];\n        long minCountValueValueValueValue
    = arr[0];\n        long maxCountValueValueValueIndex = 0;\n        long minCountValueValueValueIndex
    = 0;\n        long maxCountValueValueValueValue = arr[0];\n        long minCountValueValueValueValue
    = arr[0];\n        long maxCountValueValueValueIndex = 0;\n        long minCountValueValueValueIndex
    = 0;\n        long maxCountValueValueValueValue = arr[0];\n        long minCountValueValueValueValue
    = arr[0];\n        long maxCountValueValueValueIndex = 0;\n        long minCountValueValueValueIndex
    = 0;\n        long maxCountValueValueValueValue = arr[0];\n        long minCountValueValueValueValue
    = arr[0];\n        long maxCountValueValueValueIndex = 0;\n        long minCountValueValueValueIndex
    = 0;\n        long maxCountValueValueValueValue = arr[0];\n        long minCountValueValueValueValue
    = arr[0];\n        long maxCountValueValueValueIndex = 0;\n        long minCountValueValueValueIndex
    = 0;\n        long maxCountValueValueValueValue = arr[0];\n        long minCountValueValueValueValue
    = arr[0];\n        long maxCountValueValueValueIndex = 0;\n        long minCountValueValueValueIndex
    = 0;\n        long maxCountValueValueValueValue = arr[0];\n        long minCountValueValueValueValue
    = arr[0];\n        long maxCountValue\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpazmb6kxi.cs(79,27): error CS1002: ; expected

    '
  timestamp: 1659823366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = arr[0];\n        List<long>
    result = new List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        long
    maxIndex = arr.IndexOf(max);\n        if (maxIndex < k) {\n            k = maxIndex;\n
    \       }\n        for (int i = 0; i < k; i++) {\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2195e7ac29bb46c68f57715738a6196b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2195e7ac29bb46c68f57715738a6196b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        foreach (long i in arr)
    {\n            cur = i;\n            if (max < cur) {\n                max = cur;\n
    \           }\n        }\n        if (max < k) {\n            max = k;\n        }\n
    \       long curMax = 0;\n        long curMaxIndex = 0;\n        long curMaxValue
    = 0;\n        foreach (long i in arr) {\n            cur = i;\n            if
    (cur > curMaxValue) {\n                curMaxValue = cur;\n                curMaxIndex
    = i;\n            }\n        }\n        result.Add(curMaxValue);\n        result.Add(arr[curMaxIndex]);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplbmtrl0e.cs(48,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmplbmtrl0e.cs(37,14): warning CS0219: The variable ''curMax'' is assigned
    but its value is never used

    '
  timestamp: 1659823366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        foreach (long i in arr)
    {\n            if (cur < i) {\n                max = i;\n                cur =
    i;\n            }\n            if (cur > k) {\n                result.Add(max);\n
    \               max = cur;\n                cur = i;\n            }\n        }\n
    \       result.Add(max);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ded9b0dc2cc463bb5b28d613e230259>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ded9b0dc2cc463bb5b28d613e230259>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long sum = 0;\n        long
    count = 0;\n        long sum2 = 0;\n        long sum3 = 0;\n        long sum4
    = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n        long sum7 = 0;\n
    \       long sum8 = 0;\n        long sum9 = 0;\n        long sum10 = 0;\n        long
    sum11 = 0;\n        long sum12 = 0;\n        long sum13 = 0;\n        long sum14
    = 0;\n        long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n
    \       long sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long
    sum21 = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24
    = 0;\n        long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n
    \       long sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long
    sum31 = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n        long sum34
    = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n
    \       long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n        long
    sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n        long sum44
    = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n        long sum47 = 0;\n
    \       long sum48 = 0;\n        long sum49 = 0;\n        long sum50 = 0;\n        long
    sum51 = 0;\n        long sum52 = 0;\n        long sum53 = 0;\n        long sum54
    = 0;\n        long sum55 = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n
    \       long sum58 = 0;\n        long sum59 = 0;\n        long sum60 = 0;\n        long
    sum61 = 0;\n        long sum62 = 0;\n        long sum63 = 0;\n        long sum64
    = 0;\n        long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n
    \       long sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n        long
    sum71 = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n        long sum74
    = 0;\n        long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n
    \       long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n        long
    sum81 = 0;\n        long sum82 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr8pj50ot.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpr8pj50ot.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmpr8pj50ot.cs(28,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpr8pj50ot.cs(29,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(30,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(31,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(32,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(33,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(34,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(35,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(36,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(37,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(38,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(39,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(40,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(41,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(42,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(43,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpr8pj50ot.cs(44,14): warning CS0219: T'
  timestamp: 1659793738
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = arr.Min();\n        long mid = arr.Count
    / 2;\n        long midMax = arr.Count / 2;\n        long midMin = arr.Count /
    2;\n        long midMaxMin = arr.Count / 2;\n        long midMaxMinMin = arr.Count
    / 2;\n        long midMaxMinMinMax = arr.Count / 2;\n        long midMaxMinMinMaxMax
    = arr.Count / 2;\n        long midMaxMinMinMaxMaxMax = arr.Count / 2;\n        long
    midMaxMinMinMaxMaxMax = arr.Count / 2;\n        long midMaxMinMinMaxMaxMaxMax
    = arr.Count / 2;\n        long midMaxMinMinMaxMaxMaxMaxMax = arr.Count / 2;\n
    \       long midMaxMinMinMaxMaxMaxMaxMaxMax = arr.Count / 2;\n        long midMaxMinMinMaxMaxMaxMaxMaxMaxMax
    = arr.Count / 2;\n        long midMaxMinMinMaxMaxMaxMaxMaxMaxMaxMax = arr.Count
    / 2;\n        long midMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMax = arr.Count / 2;\n
    \       long midMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = arr.Count / 2;\n        long
    midMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = arr.Count / 2;\n        long midMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax
    = arr.Count / 2;\n        long midMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax =
    arr.Count / 2;\n        long midMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax
    = arr.Count / 2;\n        long midMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax
    = arr.Count / 2;\n        long midMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax
    = arr.Count / 2;\n        long midMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax
    = arr.Count / 2;\n        long midMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax
    = arr.Count / 2;\n        long midMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax
    = arr.Count / 2;\n        long midMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax
    = arr.Count / 2;\n        long \n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvuwp857z.cs(54,13): error CS1001: Identifier expected

    /tmp/tmpvuwp857z.cs(54,13): error CS1002: ; expected

    '
  timestamp: 1659823366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long> result
    = new List<long>();\n        foreach (long i in arr) {\n            if (max <
    i) {\n                max = i;\n            }\n        }\n        long mid = max
    / 2;\n        long leftMax = max - mid;\n        long rightMax = max - mid;\n
    \       long leftMaxMax = max;\n        long rightMaxMax = max;\n        long
    leftMaxMaxMax = max;\n        long rightMaxMaxMax = max;\n        long leftMaxMaxMaxMax
    = max;\n        long rightMaxMaxMaxMax = max;\n        long leftMaxMaxMaxMaxMax
    = max;\n        long rightMaxMaxMaxMaxMax = max;\n        long leftMaxMaxMaxMaxMaxMax
    = max;\n        long rightMaxMaxMaxMaxMaxMax = max;\n        long leftMaxMaxMaxMaxMaxMaxMax
    = max;\n        long rightMaxMaxMaxMaxMaxMaxMax = max;\n        long leftMaxMaxMaxMaxMaxMaxMaxMax
    = max;\n        long rightMaxMaxMaxMaxMaxMaxMaxMax = max;\n        long leftMaxMaxMaxMaxMaxMaxMaxMaxMax
    = max;\n        long rightMaxMaxMaxMaxMaxMaxMaxMaxMax = max;\n        long leftMaxMaxMaxMaxMaxMaxMaxMaxMax
    = max;\n        long rightMaxMaxMaxMaxMaxMaxMaxMaxMax = max;\n        long leftMaxMaxMaxMaxMaxMaxMaxMaxMaxMax
    = max;\n        long rightMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = max;\n        long
    leftMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = max;\n        long rightMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax
    = max;\n        long leftMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = max;\n        long
    rightMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = max;\n        long leftMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax
    = max;\n        long rightMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = max;\n        long
    leftMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = max;\n        long rightMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax
    = max;\n        long leftMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = max;\n        long
    rightMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw5ltt5kn.cs(64,49): error CS1002: ; expected

    '
  timestamp: 1659823366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n        long
    minIndex = 0;\n        bool isMax = true;\n        bool isMin = true;\n        long
    maxValue = arr[0];\n        long minValue = arr[0];\n        long maxIndexValue
    = arr[0];\n        long minIndexValue = arr[0];\n        bool isMaxValue = true;\n
    \       bool isMinValue = true;\n        long maxIndexValue2 = arr[0];\n        long
    minIndexValue2 = arr[0];\n        bool isMaxValue2 = true;\n        bool isMinValue2
    = true;\n        long maxValue2 = arr[0];\n        long minValue2 = arr[0];\n
    \       long maxIndexValue3 = arr[0];\n        long minIndexValue3 = arr[0];\n
    \       bool isMaxValue3 = true;\n        bool isMinValue3 = true;\n        long
    maxValue3 = arr[0];\n        long minValue3 = arr[0];\n        long maxIndexValue4
    = arr[0];\n        long minIndexValue4 = arr[0];\n        bool isMaxValue4 = true;\n
    \       bool isMinValue4 = true;\n        long maxValue4 = arr[0];\n        long
    minValue4 = arr[0];\n        long maxIndexValue5 = arr[0];\n        long minIndexValue5
    = arr[0];\n        bool isMaxValue5 = true;\n        bool isMinValue5 = true;\n
    \       long maxValue5 = arr[0];\n        long minValue5 = arr[0];\n        long
    maxIndexValue6 = arr[0];\n        long minIndexValue6 = arr[0];\n        bool
    isMaxValue6 = true;\n        bool isMinValue6 = true;\n        long maxValue6
    = arr[0];\n        long minValue6 = arr[0];\n        long maxIndexValue7 = arr[0];\n
    \       long minIndexValue7 = arr[0];\n        bool isMaxValue7 = true;\n        bool
    isMinValue7 = true;\n        long maxValue7 = arr[0];\n        long minValue7
    = arr[0];\n        long maxIndexValue8 = arr[0];\n        long minIndexValue8
    = arr[0];\n        bool isMaxValue8 = true;\n        bool isMinValue8 = true;\n
    \       long maxValue8 = arr[0];\n        long minValue8 = arr[0];\n        long
    maxIndexValue9 = arr[0];\n        long minIndexValue9 = arr[0];\n        bool
    isMaxValue9 = true;\n        bool isMinValue9 = true;\n        long maxValue9
    = arr[0];\n        long minValue9 = arr[0];\n        long maxIndexValue10 = arr[0];\n
    \       long minIndexValue10 = arr[0];\n        bool isMaxValue10\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ouxby28.cs(88,26): error CS1002: ; expected

    '
  timestamp: 1659823366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 0;\n        foreach (long i in arr)
    {\n            max = Math.Max(max, i);\n            min = Math.Min(min, i);\n
    \       }\n        long mid = min + (max - min) / 2;\n        long mid2 = mid
    / 2;\n        long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long
    mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n
    \       long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10
    = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n
    \       long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long
    mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16
    / 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long
    mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21
    / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n        long
    mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27 = mid26
    / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long
    mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31
    / 2;\n        long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long
    mid35 = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36
    / 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n        long
    mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42 = mid41
    / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 / 2;\n        long
    mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n        long mid47 = mid46
    / 2;\n        long mid48 = mid47\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8agwy7hc.cs(79,27): error CS1002: ; expected

    '
  timestamp: 1659823366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       List<long> res = new List<long>();\n        long max = 0;\n        long
    min = 0;\n        long max2 = 0;\n        long min2 = 0;\n        long max3 =
    0;\n        long min3 = 0;\n        long max4 = 0;\n        long min4 = 0;\n        long
    max5 = 0;\n        long min5 = 0;\n        long max6 = 0;\n        long min6 =
    0;\n        long max7 = 0;\n        long min7 = 0;\n        long max8 = 0;\n        long
    min8 = 0;\n        long max9 = 0;\n        long min9 = 0;\n        long max10
    = 0;\n        long min10 = 0;\n        long max11 = 0;\n        long min11 = 0;\n
    \       long max12 = 0;\n        long min12 = 0;\n        long max13 = 0;\n        long
    min13 = 0;\n        long max14 = 0;\n        long min14 = 0;\n        long max15
    = 0;\n        long min15 = 0;\n        long max16 = 0;\n        long min16 = 0;\n
    \       long max17 = 0;\n        long min17 = 0;\n        long max18 = 0;\n        long
    min18 = 0;\n        long max19 = 0;\n        long min19 = 0;\n        long max20
    = 0;\n        long min20 = 0;\n        long max21 = 0;\n        long min21 = 0;\n
    \       long max22 = 0;\n        long min22 = 0;\n        long max23 = 0;\n        long
    min23 = 0;\n        long max24 = 0;\n        long min24 = 0;\n        long max25
    = 0;\n        long min25 = 0;\n        long max26 = 0;\n        long min26 = 0;\n
    \       long max27 = 0;\n        long min27 = 0;\n        long max28 = 0;\n        long
    min28 = 0;\n        long max29 = 0;\n        long min29 = 0;\n        long max30
    = 0;\n        long min30 = 0;\n        long max31 = 0;\n        long min31 = 0;\n
    \       long max32 = 0;\n        long min32 = 0;\n        long max33 = 0;\n        long
    min33 = 0;\n        long max34 = 0;\n        long min34 = 0;\n        long max35
    = 0;\n        long min35 = 0;\n        long max36 = 0;\n        long min36 = 0;\n
    \       long max37 = 0;\n        long min37 = 0;\n        long max38 = 0;\n        long
    min38 = 0;\n        long max39 = 0;\n        long min39 = 0;\n        long max40
    = 0;\n        long min40 = 0;\n        long max41 = 0;\n        long min41 = 0;\n
    \       long max42 = 0;\n        long min\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmoost8ne.cs(110,17): error CS1002: ; expected

    '
  timestamp: 1659823366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       List<long> res = new List<long>();\n        long max = 0;\n        long
    min = arr.Min();\n        long mid = 0;\n        long mid2 = 0;\n        long
    mid3 = 0;\n        long mid4 = 0;\n        long mid5 = 0;\n        long mid6 =
    0;\n        long mid7 = 0;\n        long mid8 = 0;\n        long mid9 = 0;\n        long
    mid10 = 0;\n        long mid11 = 0;\n        long mid12 = 0;\n        long mid13
    = 0;\n        long mid14 = 0;\n        long mid15 = 0;\n        long mid16 = 0;\n
    \       long mid17 = 0;\n        long mid18 = 0;\n        long mid19 = 0;\n        long
    mid20 = 0;\n        long mid21 = 0;\n        long mid22 = 0;\n        long mid23
    = 0;\n        long mid24 = 0;\n        long mid25 = 0;\n        long mid26 = 0;\n
    \       long mid27 = 0;\n        long mid28 = 0;\n        long mid29 = 0;\n        long
    mid30 = 0;\n        long mid31 = 0;\n        long mid32 = 0;\n        long mid33
    = 0;\n        long mid34 = 0;\n        long mid35 = 0;\n        long mid36 = 0;\n
    \       long mid37 = 0;\n        long mid38 = 0;\n        long mid39 = 0;\n        long
    mid40 = 0;\n        long mid41 = 0;\n        long mid42 = 0;\n        long mid43
    = 0;\n        long mid44 = 0;\n        long mid45 = 0;\n        long mid46 = 0;\n
    \       long mid47 = 0;\n        long mid48 = 0;\n        long mid49 = 0;\n        long
    mid50 = 0;\n        long mid51 = 0;\n        long mid52 = 0;\n        long mid53
    = 0;\n        long mid54 = 0;\n        long mid55 = 0;\n        long mid56 = 0;\n
    \       long mid57 = 0;\n        long mid58 = 0;\n        long mid59 = 0;\n        long
    mid60 = 0;\n        long mid61 = 0;\n        long mid62 = 0;\n        long mid63
    = 0;\n        long mid64 = 0;\n        long mid65 = 0;\n        long mid66 = 0;\n
    \       long mid67 = 0;\n        long mid68 = 0;\n        long mid69 = 0;\n        long
    mid70 = 0;\n        long mid71 = 0;\n        long mid72 = 0;\n        long mid73
    = 0;\n        long mid74 = 0;\n        long mid75 = 0;\n        long mid76 = 0;\n
    \       long mid77 = 0;\n        long mid78 = 0;\n        long mid79 = 0;\n        long
    mid80 = 0;\n        long mid81\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgt0he4_v.cs(109,19): error CS1002: ; expected

    '
  timestamp: 1659823366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       List<long> result = new List<long>();\n        long maxValue = arr.Max();\n
    \       long minValue = arr.Min();\n        long maxIndex = 0;\n        long minIndex
    = 0;\n        bool isMax = true;\n        bool isMin = true;\n        long maxCount
    = 0;\n        long minCount = 0;\n        long maxCount2 = 0;\n        long minCount2
    = 0;\n        long maxCount3 = 0;\n        long minCount3 = 0;\n        long maxCount4
    = 0;\n        long minCount4 = 0;\n        long maxCount5 = 0;\n        long minCount5
    = 0;\n        long maxCount6 = 0;\n        long minCount6 = 0;\n        long maxCount7
    = 0;\n        long minCount7 = 0;\n        long maxCount8 = 0;\n        long minCount8
    = 0;\n        long maxCount9 = 0;\n        long minCount9 = 0;\n        long maxCount10
    = 0;\n        long minCount10 = 0;\n        long maxCount11 = 0;\n        long
    minCount11 = 0;\n        long maxCount12 = 0;\n        long minCount12 = 0;\n
    \       long maxCount13 = 0;\n        long minCount13 = 0;\n        long maxCount14
    = 0;\n        long minCount14 = 0;\n        long maxCount15 = 0;\n        long
    minCount15 = 0;\n        long maxCount16 = 0;\n        long minCount16 = 0;\n
    \       long maxCount17 = 0;\n        long minCount17 = 0;\n        long maxCount18
    = 0;\n        long minCount18 = 0;\n        long maxCount19 = 0;\n        long
    minCount19 = 0;\n        long maxCount20 = 0;\n        long minCount20 = 0;\n
    \       long maxCount21 = 0;\n        long minCount21 = 0;\n        long maxCount22
    = 0;\n        long minCount22 = 0;\n        long maxCount23 = 0;\n        long
    minCount23 = 0;\n        long maxCount24 = 0;\n        long minCount24 = 0;\n
    \       long maxCount25 = 0;\n        long minCount25 = 0;\n        long maxCount26
    = 0;\n        long minCount26 = 0;\n        long maxCount27 = 0;\n        long
    minCount27 = 0;\n        long maxCount28 = 0;\n        long minCount28 = 0;\n
    \       long maxCount29 = 0;\n        long minCount29 = 0;\n        long maxCount30
    = 0;\n        long minCount30 = 0;\n        long maxCount31 = 0;\n        long
    minCount31 = 0;\n        long maxCount32 = 0;\n        long minCount32 = 0;\n
    \       long maxCount33 = 0;\n        long minCount33 = 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplhgeryha.cs(29,14): warning CS0219: The variable ''maxIndex'' is assigned
    but its value is never used

    /tmp/tmplhgeryha.cs(30,14): warning CS0219: The variable ''minIndex'' is assigned
    but its value is never used

    /tmp/tmplhgeryha.cs(31,14): warning CS0219: The variable ''isMax'' is assigned
    but its value is never used

    /tmp/tmplhgeryha.cs(32,14): warning CS0219: The variable ''isMin'' is assigned
    but its value is never used

    /tmp/tmplhgeryha.cs(33,14): warning CS0219: The variable ''maxCount'' is assigned
    but its value is never used

    /tmp/tmplhgeryha.cs(34,14): warning CS0219: The variable ''minCount'' is assigned
    but its value is never used

    /tmp/tmplhgeryha.cs(35,14): warning CS0219: The variable ''maxCount2'' is assigned
    but its value is never used

    /tmp/tmplhgeryha.cs(36,14): warning CS0219: The variable ''minCount2'' is assigned
    but its value is never used

    /tmp/tmplhgeryha.cs(37,14): warning CS0219: The variable ''maxCount3'' is assigned
    but its value is never used

    /tmp/tmplhgeryha.cs(38,14): warning CS0219: The variable ''minCount3'' is assigned
    but its value is never used

    /tmp/tmplhgeryha.cs(39,14): warning CS0219: The variable ''maxCount4'' is assigned
    but its value is never used

    /tmp/tmplhgeryha.cs(40,14): warning CS0219: The variable ''minCount4'' is assigned
    but its value is never used

    /tmp/tmplhgeryha.cs(41,14): warning CS0219: The variable ''maxCount5'' is assigned
    but its value is never used

    /tmp/tmplhgeryha.cs(42,14): warning CS0219: The variable ''minCount5'' is assigned
    but its value is never used

    /tmp/tmplhgeryha.cs(43,14): warning CS0219: The variable ''maxCount6'' is assigned
    but its value is never used

    /tmp/tmplhgeryha.cs(44,14): warning CS0219: The variable ''minCount6'' is assigned
    but its value is never used

    /tmp/tmplhgeryha.cs(45,14): warning CS0219: The variable ''maxCount7'' is assigned
    but its value is never used

    /tmp/tmplhgeryha.cs(46,14): warning CS0219: The variable ''minCount7'' is assigned'
  timestamp: 1659823366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) {\n            return
    new List<long>();\n        }\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long min = 1000;\n        long sum = 0;\n        foreach
    (long i in arr) {\n            sum += i;\n            if (sum > max) {\n                max
    = sum;\n            }\n            if (sum < min) {\n                min = sum;\n
    \           }\n        }\n        long mid = min + (max - min) / 2;\n        List<long>
    left = new List<long>();\n        List<long> right = new List<long>();\n        foreach
    (long i in arr) {\n            if (i < mid) {\n                left.Add(i);\n
    \           } else {\n                right.Add(i);\n            }\n        }\n
    \       left.Sort();\n        right.Sort();\n        List<long> result = new List<long>();\n
    \       result.AddRange(left);\n        result.AddRange(right);\n        result.Sort();\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjsj7p39m.cs(53,20): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    '
  timestamp: 1659823366
