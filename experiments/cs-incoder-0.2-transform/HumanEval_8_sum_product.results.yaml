language: cs
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return Tuple.Create(0L,\
    \ 1L);\n        long sum = 0L;\n        long product = 1L;\n        foreach (long\
    \ number in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804124
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        var sum = 0L;\n        var product\
    \ = 1L;\n        foreach (var number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long product = 1L;\n        long sum = 0L;\n       \
    \ foreach (long number in numbers)\n            sum += number;\n        foreach\
    \ (long number in numbers)\n            product *= number;\n        return new\
    \ Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804124
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804124
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        var sum = numbers.Sum();\n        var product = numbers.Aggregate((a,\
    \ b) => a * b); // This line is different from SumProduct\n        return new\
    \ Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804124
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return Tuple.Create(0L,\
    \ 1L);\n        long sum = 0L;\n        long product = 1L;\n        foreach (long\
    \ n in numbers)\n            sum += n;\n        foreach (long n in numbers)\n\
    \            product *= n;\n        return Tuple.Create(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804124
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        var sum = numbers.Sum();\n        var product = numbers.Aggregate((x,\
    \ y) => x * y);\n        return new Tuple<long, long>(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0)\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        long sum = 0;\n        long product = 1;\n        foreach (long\
    \ number in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        var sum = 0L;\n        var product = 1L;\n        foreach\
    \ (var number in numbers) {\n            sum += number;\n            product *=\
    \ number;\n        }\n        return new Tuple<long, long>(sum, product);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        var sum = numbers.Sum();\n        var product = numbers.Aggregate((x,\
    \ y) => x * y);\n        return new Tuple<long, long>(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
