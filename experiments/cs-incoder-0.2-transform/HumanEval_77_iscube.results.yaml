language: cs
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp18cnasok.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 0;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn5cb9xxt.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpn5cb9xxt.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpn5cb9xxt.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpn5cb9xxt.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpn5cb9xxt.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpn5cb9xxt.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpn5cb9xxt.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpn5cb9xxt.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpn5cb9xxt.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpn5cb9xxt.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpn5cb9xxt.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpn5cb9xxt.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpn5cb9xxt.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpn5cb9xxt.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpn5cb9xxt.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpn5cb9xxt.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpn5cb9xxt.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpn5cb9xxt.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmpn5cb9xxt.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long AAA = a;\n        long\
    \ AAB = a;\n        long AAC = a;\n        long AAD = a;\n        long AAE = a;\n\
    \        long AAF = a;\n        long AAG = a;\n        long AAH = a;\n       \
    \ long AAI = a;\n        long AAJ = a;\n        long AAK = a;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5rc1ooy3.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long aa = a;\n        long bb = a;\n        long cc = a;\n   \
    \     long dd = a;\n        long ee = a;\n        long ff = a;\n        long gg\
    \ = a;\n        long hh = a;\n        long ii = a;\n        long jj = a;\n   \
    \     long kk = a;\n        long ll = a;\n        long mm = a;\n        long nn\
    \ = a;\n        long oo = a;\n        long pp = a;\n        long qq = a;\n   \
    \     long rr = a;\n        long ss = a;\n        long tt = a;\n        long uu\
    \ = a;\n        long vv = a;\n        long ww = a;\n        long xx = a;\n   \
    \     long yy = a;\n        long zz = a;\n        long aaa = a;\n        long\
    \ bbb = a;\n        long ccc = a;\n        long ddd = a;\n        long eee = a;\n\
    \        long fff = a;\n        long ggg = a;\n        long hhh = a;\n       \
    \ long iii = a;\n        long jjj = a;\n        long kkk = a;\n        long lll\
    \ = a;\n        long mmm = a;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2lixjdwb.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        if (cube == a)\n   \
    \         return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp51mrvk3d.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8_y19229.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long cube = 1;\n        while\
    \ (n > 1) {\n            cube = cube * n;\n            n = n / 3;\n        }\n\
    \        if (cube == a)\n            return true;\n        else\n            return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <429326279f6b477c9c60cb5da2c85a7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <429326279f6b477c9c60cb5da2c85a7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3L));\n  \
    \      return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <552187fd98ad490c883878d10b5398d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <552187fd98ad490c883878d10b5398d5>:0 \n"
  stdout: ''
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long A = b;\n        long B = b;\n        long C = b;\n        long D\
    \ = b;\n        long E = b;\n        long F = b;\n        long G = b;\n      \
    \  long H = b;\n        long I = b;\n        long J = b;\n        long K = b;\n\
    \        long L = b;\n        long M = b;\n        long N = b;\n        long O\
    \ = b;\n        long P = b;\n        long Q = b;\n        long R = b;\n      \
    \  long S = b;\n        long T = b;\n        long U = b;\n        long V = b;\n\
    \        long W = b;\n        long X = b;\n        long Y = b;\n        long Z\
    \ = b;\n        long a = b;\n        long b = b;\n        long c = b;\n      \
    \  long d = b;\n        long e = b;\n        long f = b;\n        long g = b;\n\
    \        long h = b;\n        long i = b;\n        long j = b;\n        long k\
    \ = b;\n        long l = b;\n        long m = b;\n        long n = b;\n      \
    \  long o = b;\n        long p = b;\n        long q = b;\n        long r = b;\n\
    \        long s = b;\n        long t = b;\n        long u = b;\n        long v\
    \ = b;\n        long w = b;\n        long x = b;\n        long y = b;\n      \
    \  long z = b;\n        long A = b;\n        long B = b;\n        long C = b;\n\
    \        long D = b;\n        long E = b;\n        long F = b;\n        long G\
    \ = b;\n        long H = b;\n        long I = b;\n        long J = b;\n      \
    \  long K = b;\n        long L = b;\n        long M = b;\n        long N = b;\n\
    \        long O = b;\n        long P = b;\n        long Q = b;\n        long R\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6bn71tiv.cs(120,15): error CS1002: ; expected

    '
  timestamp: 1659794966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        if (cube == a)\n   \
    \         return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp51mrvk3d.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a == 0) return true;\n        if (a < 0) return\
    \ false;\n        if (a % 3 == 0) return false;\n        if (a % 5 == 0) return\
    \ false;\n        if (a % 7 == 0) return false;\n        if (a % 11 == 0) return\
    \ false;\n        if (a % 13 == 0) return false;\n        if (a % 17 == 0) return\
    \ false;\n        if (a % 19 == 0) return false;\n        if (a % 23 == 0) return\
    \ false;\n        if (a % 29 == 0) return false;\n        if (a % 31 == 0) return\
    \ false;\n        if (a % 37 == 0) return false;\n        if (a % 41 == 0) return\
    \ false;\n        if (a % 43 == 0) return false;\n        if (a % 47 == 0) return\
    \ false;\n        if (a % 49 == 0) return false;\n        if (a % 53 == 0) return\
    \ false;\n        if (a % 57 == 0) return false;\n        if (a % 61 == 0) return\
    \ false;\n        if (a % 67 == 0) return false;\n        if (a % 71 == 0) return\
    \ false;\n        if (a % 73 == 0) return false;\n        if (a % 79 == 0) return\
    \ false;\n        if (a % 83 == 0) return false;\n        if (a % 89 == 0) return\
    \ false;\n        if (a % 97 == 0) return false;\n        if (a % 103 == 0) return\
    \ false;\n        if (a % 107 == 0) return false;\n        if (a % 111 == 0) return\
    \ false;\n        if (a % 115 == 0) return false;\n        if (a % 119 == 0) return\
    \ false;\n        if (a % 123 == 0) return false;\n        if (a % 127 == 0) return\
    \ false;\n        if (a % 131 == 0) return false;\n        if (a % 135 == 0) return\
    \ false;\n        if (a % 139 == 0) return false;\n        if (a % 143 == 0) return\
    \ false;\n        if (a % 147 == 0) return false;\n        if (a % 151 == 0) return\
    \ false;\n        if (a % 157 == 0) return false;\n        if (a % 161 == 0) return\
    \ false;\n        if (a % 165 == 0) return false;\n        if (a % 169 == 0) return\
    \ false;\n        if (a % 173 == 0) return false;\n        if (a % 177 == 0) return\
    \ false;\n        if (a % 181 == 0) return false;\n        if (a % 185 == 0) return\
    \ false;\n        if (a % 189 == 0) return false;\n        if (a % 193 == 0) return\
    \ false;\n        if (a % 197 == 0) return false;\n        if (a % 201 == 0) return\
    \ false;\n        if (a % 205 == 0) return false;\n        if (a % 209 == 0) return\
    \ false;\n        if (a % 213 == 0) return false;\n        if (a % 217 == 0) return\
    \ false;\n        if (a % 221 == 0) return false;\n        if (a % 225 == \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqa1xj6ii.cs(83,23): error CS1525: Invalid expression term ''}''

    /tmp/tmpqa1xj6ii.cs(83,23): error CS1026: ) expected

    /tmp/tmpqa1xj6ii.cs(83,23): error CS1002: ; expected

    '
  timestamp: 1659794966
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \n"
  stdout: ''
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long a = b;\n        long b = b;\n        long c = b;\n        long d\
    \ = b;\n        long e = b;\n        long f = b;\n        long g = b;\n      \
    \  long h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n\
    \        long l = b;\n        long m = b;\n        long n = b;\n        long o\
    \ = b;\n        long p = b;\n        long q = b;\n        long r = b;\n      \
    \  long s = b;\n        long t = b;\n        long u = b;\n        long v = b;\n\
    \        long w = b;\n        long x = b;\n        long y = b;\n        long z\
    \ = b;\n        long a = b;\n        long b = b;\n        long c = b;\n      \
    \  long d = b;\n        long e = b;\n        long f = b;\n        long g = b;\n\
    \        long h = b;\n        long i = b;\n        long j = b;\n        long k\
    \ = b;\n        long l = b;\n        long m = b;\n        long n = b;\n      \
    \  long o = b;\n        long p = b;\n        long q = b;\n        long r = b;\n\
    \        long s = b;\n        long t = b;\n        long u = b;\n        long v\
    \ = b;\n        long w = b;\n        long x = b;\n        long y = b;\n      \
    \  long z = b;\n        long a = b;\n        long b = b;\n        long c = b;\n\
    \        long d = b;\n        long e = b;\n        long f = b;\n        long g\
    \ = b;\n        long h = b;\n        long i = b;\n        long j = b;\n      \
    \  long k = b;\n        long l = b;\n        long m = b;\n        long n = b;\n\
    \        long o = b;\n        long p = b;\n        long q = b;\n        long r\
    \ = b;\n        long s = b;\n        long t = b;\n        long u = b;\n      \
    \  long v = b;\n        long w = b;\n        long x = b;\n        long y = \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr32gahi7.cs(127,17): error CS1525: Invalid expression term ''}''

    /tmp/tmpr32gahi7.cs(127,17): error CS1002: ; expected

    '
  timestamp: 1659794966
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long d = 1;\n        while (n\
    \ > 1) {\n            d *= n;\n            n--;\n        }\n        return d ==\
    \ a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6c65a0e8fbb424e84973b00d5aa433b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6c65a0e8fbb424e84973b00d5aa433b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        if\
    \ (a > 180)\n            return false;\n        if (a == 0)\n            return\
    \ true;\n        if (a % 3 == 0)\n            return true;\n        if (a % 5\
    \ == 0)\n            return true;\n        if (a % 7 == 0)\n            return\
    \ true;\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1e17d013f6e4709a09bc1b1b49d8eb6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1e17d013f6e4709a09bc1b1b49d8eb6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \n"
  stdout: ''
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long d = 1;\n        long r =\
    \ 1;\n        long p = 0;\n        long q = 0;\n        long s = 0;\n        long\
    \ t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n    \
    \    long x = 0;\n        long y = 0;\n        long z = 0;\n        long aa =\
    \ 0;\n        long bb = 0;\n        long cc = 0;\n        long dd = 0;\n     \
    \   long ee = 0;\n        long ff = 0;\n        long gg = 0;\n        long hh\
    \ = 0;\n        long ii = 0;\n        long jj = 0;\n        long kk = 0;\n   \
    \     long ll = 0;\n        long mm = 0;\n        long nn = 0;\n        long oo\
    \ = 0;\n        long pp = 0;\n        long qq = 0;\n        long rr = 0;\n   \
    \     long ss;\n        long tt;\n        long uu;\n        long vv;\n       \
    \ long ww;\n        long xx;\n        long yy;\n        long zz;\n        long\
    \ aaa;\n        long bbb;\n        long ccc;\n        long ddd;\n        long\
    \ eee;\n        long fff;\n        long ggg;\n        long hhh;\n        long\
    \ iii;\n        long jjj;\n        long kkk;\n        long lll;\n        long\
    \ mmm;\n        long nnn;\n        long ooo;\n        long ppp;\n        long\
    \ qqq;\n        long rrr;\n        long sss;\n        long ttt;\n        long\
    \ uuu;\n        long vvv;\n        long www;\n        long xxx;\n        long\
    \ yyy;\n        long zzz;\n        long aaaa;\n        long bbbb;\n        long\
    \ cccc;\n        long dddd;\n        long eeee;\n        long ffff;\n        long\
    \ gggg;\n        long hhhh;\n        long iiii;\n        long jjjj;\n        long\
    \ kkkk;\n        long llll;\n        long mmmm;\n        long nnnn;\n        long\
    \ oooo;\n        long pppp;\n        long qqqq;\n        long rrrr;\n        long\
    \ ssss;\n        long tttt;\n        long uuuu;\n        long vvvv;\n        long\
    \ wwww;\n        long xxxx;\n        long yyyy;\n        long zzzz;\n        long\
    \ aaaaa;\n        long bbbbb;\n        long ccccc;\n        long ddddd;\n    \
    \    long eeeee;\n        long fffff;\n        long ggggg;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3_i6a4ew.cs(27,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp3_i6a4ew.cs(28,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp3_i6a4ew.cs(29,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp3_i6a4ew.cs(30,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp3_i6a4ew.cs(31,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp3_i6a4ew.cs(32,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmp3_i6a4ew.cs(33,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /tmp/tmp3_i6a4ew.cs(34,14): warning CS0219: The variable ''v'' is assigned but
    its value is never used

    /tmp/tmp3_i6a4ew.cs(35,14): warning CS0219: The variable ''w'' is assigned but
    its value is never used

    /tmp/tmp3_i6a4ew.cs(36,14): warning CS0219: The variable ''x'' is assigned but
    its value is never used

    /tmp/tmp3_i6a4ew.cs(37,14): warning CS0219: The variable ''y'' is assigned but
    its value is never used

    /tmp/tmp3_i6a4ew.cs(38,14): warning CS0219: The variable ''z'' is assigned but
    its value is never used

    /tmp/tmp3_i6a4ew.cs(39,14): warning CS0219: The variable ''aa'' is assigned but
    its value is never used

    /tmp/tmp3_i6a4ew.cs(40,14): warning CS0219: The variable ''bb'' is assigned but
    its value is never used

    /tmp/tmp3_i6a4ew.cs(41,14): warning CS0219: The variable ''cc'' is assigned but
    its value is never used

    /tmp/tmp3_i6a4ew.cs(42,14): warning CS0219: The variable ''dd'' is assigned but
    its value is never used

    /tmp/tmp3_i6a4ew.cs(43,14): warning CS0219: The variable ''ee'' is assigned but
    its value is never used

    /tmp/tmp3_i6a4ew.cs(44,14): warning CS0219: The variable ''ff'' is assigned but
    its value is never used

    /tmp/tmp3_i6a4ew.cs(45,14): warning CS0219: The variable ''gg'' is assigned but
    its value is never '
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        if (cube == a)\n   \
    \         return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp51mrvk3d.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        return ((a % 3) == 0);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b400c54f8b5445dfaf4180e9d668e104>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b400c54f8b5445dfaf4180e9d668e104>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        if\
    \ (a < 3L)\n            return true;\n        long b = a;\n        long c = a;\n\
    \        long d = a;\n        long e = a;\n        long f = a;\n        long g\
    \ = a;\n        long h = a;\n        long i = a;\n        long j = a;\n      \
    \  long k = a;\n        long l = a;\n        long m = a;\n        long n = a;\n\
    \        long o = a;\n        long p = a;\n        long q = a;\n        long r\
    \ = a;\n        long s = a;\n        long t = a;\n        long u = a;\n      \
    \  long v = a;\n        long w = a;\n        long x = a;\n        long y = a;\n\
    \        long z = a;\n        long aa = a;\n        long ab = a;\n        long\
    \ ac = a;\n        long ad = a;\n        long ae = a;\n        long af = a;\n\
    \        long ag = a;\n        long ah = a;\n        long ai = a;\n        long\
    \ aj = a;\n        long ak = a;\n        long al = a;\n        long am = a;\n\
    \        long an = a;\n        long ao = a;\n        long ap = a;\n        long\
    \ aq = a;\n        long ar = a;\n        long as = a;\n        long at = a;\n\
    \        long au = a;\n        long av = a;\n        long aw = a;\n        long\
    \ ax = a;\n        long ay = a;\n        long az = a;\n        long ba = a;\n\
    \        long bb = a;\n        long bc = a;\n        long bd = a;\n        long\
    \ be = a;\n        long bf = a;\n        long bg = a;\n        long bh = a;\n\
    \        long bi = a;\n        long bj = a;\n        long bk = a;\n        long\
    \ bl = a;\n        long bm = a;\n        long bn = a;\n        long bo = a;\n\
    \        long bp = a;\n        long bq = a;\n        long br = a;\n        long\
    \ bs = a;\n        long bt = a;\n        long bu = a;\n        long bv = a;\n\
    \        long bw = a;\n        long bx = a;\n        long by = a;\n        long\
    \ bz = a;\n        long ca = a;\n        long cb = a;\n        long cc = a;\n\
    \        long cd = a;\n        long ce = a;\n        long cf = a;\n        long\
    \ cg = a;\n        long ch = a;\n        long ci = a;\n        long cj = \n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw09kesjd.cs(73,14): error CS1001: Identifier expected

    /tmp/tmpw09kesjd.cs(73,14): error CS1002: ; expected

    /tmp/tmpw09kesjd.cs(73,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpw09kesjd.cs(73,17): error CS1031: Type expected

    /tmp/tmpw09kesjd.cs(116,18): error CS1525: Invalid expression term ''}''

    /tmp/tmpw09kesjd.cs(116,18): error CS1002: ; expected

    '
  timestamp: 1659794966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long d = 1;\n        long r =\
    \ 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n        long\
    \ w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n    \
    \    long A = 1;\n        long B = 1;\n        long C = 1;\n        long D = 1;\n\
    \        long E = 1;\n        long F = 1;\n        long G = 1;\n        long H\
    \ = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n      \
    \  long L = 1;\n        long M = 1;\n        long N = 1;\n        long O = 1;\n\
    \        long P = 1;\n        long Q = 1;\n        long R = 1;\n        long S\
    \ = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n      \
    \  long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z = 1;\n\
    \        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n        long\
    \ AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG = 1;\n\
    \        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n        long\
    \ AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN = 1;\n\
    \        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n        long\
    \ AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU = 1;\n\
    \        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n        long\
    \ AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB = 1;\n\
    \        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n        long\
    \ BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI = 1;\n\
    \        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n        long\
    \ BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP = 1;\n\
    \        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n        long\
    \ BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW = 1;\n\
    \        long BX = 1;\n        long BY = 1;\n        long BZ = 1;\n        long\
    \ CA = 1;\n        long CB = 1;\n        long CC = 1;\n        long CD = 1;\n\
    \        long CE = 1;\n        long CF = 1;\n        long CG = 1;\n        long\
    \ CH = 1;\n        long CI = 1;\n        long CJ = 1;\n        long CK = 1;\n\
    \        long CL = 1;\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb17wgifm.cs(126,13): error CS1001: Identifier expected

    /tmp/tmpb17wgifm.cs(126,13): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long ao = a;\n        long ap = a;\n        long aq = a;\n   \
    \     long ar = a;\n        long as = a;\n        long at = a;\n        long au\
    \ = a;\n        long av = a;\n        long aw = a;\n        long ax = a;\n   \
    \     long ay = a;\n        long az = a;\n        long AAA = a;\n        long\
    \ AAB = a;\n        long AAC = a;\n        long AAD = a;\n        long AAE = a;\n\
    \        long AAF = a;\n        long AAG = a;\n        long AAH = a;\n       \
    \ long AAI = a;\n        long AAJ = a;\n        long AAK = a;\n\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3t1batg.cs(95,14): error CS1001: Identifier expected

    /tmp/tmpu3t1batg.cs(95,14): error CS1002: ; expected

    /tmp/tmpu3t1batg.cs(95,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpu3t1batg.cs(95,17): error CS1031: Type expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        if\
    \ (a == 0)\n            return true;\n        if (a > 180)\n            return\
    \ false;\n        long b = 1;\n        long c = 1;\n        long d = 1;\n    \
    \    long e = 1;\n        long f = 1;\n        long g = 1;\n        long h = 1;\n\
    \        long i = 1;\n        long j = 1;\n        long k = 1;\n        long l\
    \ = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n      \
    \  long p = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n\
    \        long t = 1;\n        long u = 1;\n        long v = 1;\n        long w\
    \ = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n      \
    \  long aa = 1;\n        long ab = 1;\n        long ac = 1;\n        long ad =\
    \ 1;\n        long ae = 1;\n        long af = 1;\n        long ag = 1;\n     \
    \   long ah = 1;\n        long ai = 1;\n        long aj = 1;\n        long ak\
    \ = 1;\n        long al = 1;\n        long am = 1;\n        long an = 1;\n   \
    \     long ao = 1;\n        long ap = 1;\n        long aq = 1;\n        long ar\
    \ = 1;\n        long as = 1;\n        long at = 1;\n        long au = 1;\n   \
    \     long av = 1;\n        long aw = 1;\n        long ax = 1;\n        long ay\
    \ = 1;\n        long az = 1;\n        long ba = 1;\n        long bb = 1;\n   \
    \     long bc = 1;\n        long bd = 1;\n        long be = 1;\n        long bf\
    \ = 1;\n        long bg = 1;\n        long bh = 1;\n        long bi = 1;\n   \
    \     long bj = 1;\n        long bk = 1;\n        long bl = 1;\n        long bm\
    \ = 1;\n        long bn = 1;\n        long bo = 1;\n        long bp = 1;\n   \
    \     long bq = 1;\n        long br = 1;\n        long bs = 1;\n        long bt\
    \ = 1;\n        long bu = 1;\n        long bv = 1;\n        long bw = 1;\n   \
    \     long bx = 1;\n        long by = 1;\n        long bz = 1;\n        long ca\
    \ = 1;\n        long cb = 1;\n        long cc = 1;\n        long cd = 1;\n   \
    \     long ce = 1;\n        long cf = 1;\n        long cg = 1;\n        long ch\
    \ = 1;\n        long ci = 1;\n        long cj = 1;\n        long ck = 1;\n   \
    \     long cl = 1;\n        long cm = 1;\n        long cn = 1;\n        long co\
    \ = 1;\n        long cp = 1;\n        long cq = 1;\n        long cr = 1;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcevh4cum.cs(75,14): error CS1001: Identifier expected

    /tmp/tmpcevh4cum.cs(75,14): error CS1002: ; expected

    /tmp/tmpcevh4cum.cs(75,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpcevh4cum.cs(75,17): error CS1031: Type expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 0;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 0;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpff_hs2ta.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpff_hs2ta.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpff_hs2ta.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpff_hs2ta.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpff_hs2ta.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpff_hs2ta.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpff_hs2ta.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpff_hs2ta.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpff_hs2ta.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpff_hs2ta.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpff_hs2ta.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpff_hs2ta.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpff_hs2ta.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpff_hs2ta.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpff_hs2ta.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpff_hs2ta.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpff_hs2ta.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpff_hs2ta.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmpff_hs2ta.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659823603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3L));\n  \
    \      return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <552187fd98ad490c883878d10b5398d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <552187fd98ad490c883878d10b5398d5>:0 \n"
  stdout: ''
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long d = n;\n        long r =\
    \ n;\n        long s = n;\n        long t = n;\n        long u = n;\n        long\
    \ v = n;\n        long w = n;\n        long x = n;\n        long y = n;\n    \
    \    long z = n;\n        long a = n;\n        long b = n;\n        long c = n;\n\
    \        long d = n;\n        long e = n;\n        long f = n;\n        long g\
    \ = n;\n        long h = n;\n        long i = n;\n        long j = n;\n      \
    \  long k = n;\n        long l = n;\n        long m = n;\n        long n = n;\n\
    \        long o = n;\n        long p = n;\n        long q = n;\n        long r\
    \ = n;\n        long s = n;\n        long t = n;\n        long u = n;\n      \
    \  long v = n;\n        long w = n;\n        long x = n;\n        long y = n;\n\
    \        long z = n;\n        long a = n;\n        long b = n;\n        long c\
    \ = n;\n        long d = n;\n        long e = n;\n        long f = n;\n      \
    \  long g = n;\n        long h = n;\n        long i = n;\n        long j = n;\n\
    \        long k = n;\n        long l = n;\n        long m = n;\n        long n\
    \ = n;\n        long o = n;\n        long p = n;\n        long q = n;\n      \
    \  long r = n;\n        long s = n;\n        long t = n;\n        long u = n;\n\
    \        long v = n;\n        long w = n;\n        long x = n;\n        long y\
    \ = n;\n        long z = n;\n        long a = n;\n        long b = n;\n      \
    \  long c = n;\n        long d = n;\n        long e = n;\n        long f = n;\n\
    \        long g = n;\n        long h = n;\n        long i = n;\n        long j\
    \ = n;\n        long k = n;\n        long l = n;\n        long m = n;\n      \
    \  long n = n;\n        long o = n;\n        long p = n;\n        long q = n;\n\
    \        long r = n;\n        long s = n;\n        long t = n;\n        long u\
    \ = n;\n        long v = n;\n        long w = n;\n        long x = n;\n      \
    \  long y = n;\n        long z = n;\n        long a = n;\n        long b = n;\n\
    \        long c = n;\n        long d = n;\n        long e = n;\n        long f\
    \ = n;\n        long g = n;\n        long h = n;\n        long i = n;\n      \
    \  long j = n;\n        long k = n;\n        long l = n;\n        long m = n;\n\
    \        long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjfftggqc.cs(128,13): error CS1001: Identifier expected

    /tmp/tmpjfftggqc.cs(128,13): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long sq = n * n;\n        long\
    \ cube = n * n * n;\n        long cube2 = n * n * n * n;\n        long cube3 =\
    \ n * n * n * n * n;\n        long cube4 = n * n * n * n * n * n;\n        long\
    \ cube5 = n * n * n * n * n * n * n;\n        long cube6 = n * n * n * n * n *\
    \ n * n * n;\n        long cube7 = n * n * n * n * n * n * n * n * n * n;\n  \
    \      long cube8 = n * n * n * n * n * n * n * n * n * n * n;\n        long cube9\
    \ = n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube10 = n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube11 = n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube12 = n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube13\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long\
    \ cube14 = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n\
    \        long cube15 = n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n;\n        long cube16 = n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n;\n        long cube17 = n * n * n * n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube18\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n\
    \        long cube19 = n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n;\n        long cube20 = n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube21 = n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n\
    \        long cube22 = n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n * n;\n        long cube23 = n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube24\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n;\n        long cube25 = n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n;\n        \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0pwgw8k1.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long aa = 1;\n        long ab = 1;\n        long ac = 1;\n        long\
    \ ad = 1;\n        long ae = 1;\n        long af = 1;\n        long ag = 1;\n\
    \        long ah = 1;\n        long ai = 1;\n        long aj = 1;\n        long\
    \ ak = 1;\n        long al = 1;\n        long am = 1;\n        long an = 1;\n\
    \        long ao = 1;\n        long ap = 1;\n        long aq = 1;\n        long\
    \ ar = 1;\n        long as = 1;\n        long at = 1;\n        long au = 1;\n\
    \        long av = 1;\n        long aw = 1;\n        long ax = 1;\n        long\
    \ ay = 1;\n        long az = 1;\n        long aaa = 1;\n        long aab = 1;\n\
    \        long aac = 1;\n        long aad = 1;\n        long aae = 1;\n       \
    \ long aaf = 1;\n        long aag = 1;\n        long aah = 1;\n        long aai\
    \ = 1;\n        long aaj = 1;\n        long aak = 1;\n        long aal = 1;\n\
    \        long aam = 1;\n        long aan = 1;\n        long aoa = 1;\n       \
    \ long aap = 1;\n        long aqa = 1;\n        long aar = 1;\n        long asa\
    \ = 1;\n        long ata = 1;\n        long aua = 1;\n        long ava = 1;\n\
    \        long awa = 1;\n        long axa = 1;\n        long aya = 1;\n       \
    \ long aza = 1;\n        long aaa1 = 1;\n        long aab1 = 1;\n        long\
    \ aac1 = 1;\n        long aad1 = 1;\n        long aae1 = 1;\n        long aaf1\
    \ = 1;\n        long aag1 = 1;\n        long aah1 = 1;\n        long aai1 = 1;\n\
    \        long aaj1 = 1;\n        long aak1 = 1;\n        long aal1 = 1;\n    \
    \    long aam1 = 1;\n        long aan1 = 1;\n        long aoa1 = 1;\n\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx0e8c9vv.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpx0e8c9vv.cs(69,14): error CS1002: ; expected

    /tmp/tmpx0e8c9vv.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpx0e8c9vv.cs(69,17): error CS1031: Type expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8_y19229.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long A = b;\n        long B = b;\n        long C = b;\n        long D\
    \ = b;\n        long E = b;\n        long F = b;\n        long G = b;\n      \
    \  long H = b;\n        long I = b;\n        long J = b;\n        long K = b;\n\
    \        long L = b;\n        long M = b;\n        long N = b;\n        long O\
    \ = b;\n        long P = b;\n        long Q = b;\n        long R = b;\n      \
    \  long S = b;\n        long T = b;\n        long U = b;\n        long V = b;\n\
    \        long W = b;\n        long X = b;\n        long Y = b;\n        long Z\
    \ = b;\n        long a = b;\n        long b = b;\n        long c = b;\n      \
    \  long d = b;\n        long e = b;\n        long f = b;\n        long g = b;\n\
    \        long h = b;\n        long i = b;\n        long j = b;\n        long k\
    \ = b;\n        long l = b;\n        long m = b;\n        long n = b;\n      \
    \  long o = b;\n        long p = b;\n        long q = b;\n        long r = b;\n\
    \        long s = b;\n        long t = b;\n        long u = b;\n        long v\
    \ = b;\n        long w = b;\n        long x = b;\n        long y = b;\n      \
    \  long z = b;\n        long A = b;\n        long B = b;\n        long C = b;\n\
    \        long D = b;\n        long E = b;\n        long F = b;\n        long G\
    \ = b;\n        long H = b;\n        long I = b;\n        long J = b;\n      \
    \  long K = b;\n        long L = b;\n        long M = b;\n        long N = b;\n\
    \        long O = b;\n        long P = b;\n        long Q = b;\n        long R\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6bn71tiv.cs(120,15): error CS1002: ; expected

    '
  timestamp: 1659794966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw181mo3.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8_y19229.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long A = b;\n        long B = b;\n        long C = b;\n        long D\
    \ = b;\n        long E = b;\n        long F = b;\n        long G = b;\n      \
    \  long H = b;\n        long I = b;\n        long J = b;\n        long K = b;\n\
    \        long L = b;\n        long M = b;\n        long N = b;\n        long O\
    \ = b;\n        long P = b;\n        long Q = b;\n        long R = b;\n      \
    \  long S = b;\n        long T = b;\n        long U = b;\n        long V = b;\n\
    \        long W = b;\n        long X = b;\n        long Y = b;\n        long Z\
    \ = b;\n        long a = b;\n        long b = b;\n        long c = b;\n      \
    \  long d = b;\n        long e = b;\n        long f = b;\n        long g = b;\n\
    \        long h = b;\n        long i = b;\n        long j = b;\n        long k\
    \ = b;\n        long l = b;\n        long m = b;\n        long n = b;\n      \
    \  long o = b;\n        long p = b;\n        long q = b;\n        long r = b;\n\
    \        long s = b;\n        long t = b;\n        long u = b;\n        long v\
    \ = b;\n        long w = b;\n        long x = b;\n        long y = b;\n      \
    \  long z = b;\n        long A = b;\n        long B = b;\n        long C = b;\n\
    \        long D = b;\n        long E = b;\n        long F = b;\n        long G\
    \ = b;\n        long H = b;\n        long I = b;\n        long J = b;\n      \
    \  long K = b;\n        long L = b;\n        long M = b;\n        long N = b;\n\
    \        long O = b;\n        long P = b;\n        long Q = b;\n        long R\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6bn71tiv.cs(120,15): error CS1002: ; expected

    '
  timestamp: 1659794966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8_y19229.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8_y19229.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long A = b;\n        long B = b;\n        long C = b;\n        long D\
    \ = b;\n        long E = b;\n        long F = b;\n        long G = b;\n      \
    \  long H = b;\n        long I = b;\n        long J = b;\n        long K = b;\n\
    \        long L = b;\n        long M = b;\n        long N = b;\n        long O\
    \ = b;\n        long P = b;\n        long Q = b;\n        long R = b;\n      \
    \  long S = b;\n        long T = b;\n        long U = b;\n        long V = b;\n\
    \        long W = b;\n        long X = b;\n        long Y = b;\n        long Z\
    \ = b;\n        long a = b;\n        long b = b;\n        long c = b;\n      \
    \  long d = b;\n        long e = b;\n        long f = b;\n        long g = b;\n\
    \        long h = b;\n        long i = b;\n        long j = b;\n        long k\
    \ = b;\n        long l = b;\n        long m = b;\n        long n = b;\n      \
    \  long o = b;\n        long p = b;\n        long q = b;\n        long r = b;\n\
    \        long s = b;\n        long t = b;\n        long u = b;\n        long v\
    \ = b;\n        long w = b;\n        long x = b;\n        long y = b;\n      \
    \  long z = b;\n        long A = b;\n        long B = b;\n        long C = b;\n\
    \        long D = b;\n        long E = b;\n        long F = b;\n        long G\
    \ = b;\n        long H = b;\n        long I = b;\n        long J = b;\n      \
    \  long K = b;\n        long L = b;\n        long M = b;\n        long N = b;\n\
    \        long O = b;\n        long P = b;\n        long Q = b;\n        \n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7vrc5p2l.cs(26,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7vrc5p2l.cs(77,14): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp7vrc5p2l.cs(78,14): error CS0128: A local variable or function named ''b''
    is already defined in this scope

    /tmp/tmp7vrc5p2l.cs(79,14): error CS0128: A local variable or function named ''c''
    is already defined in this scope

    /tmp/tmp7vrc5p2l.cs(80,14): error CS0128: A local variable or function named ''d''
    is already defined in this scope

    /tmp/tmp7vrc5p2l.cs(81,14): error CS0128: A local variable or function named ''e''
    is already defined in this scope

    /tmp/tmp7vrc5p2l.cs(82,14): error CS0128: A local variable or function named ''f''
    is already defined in this scope

    /tmp/tmp7vrc5p2l.cs(83,14): error CS0128: A local variable or function named ''g''
    is already defined in this scope

    /tmp/tmp7vrc5p2l.cs(84,14): error CS0128: A local variable or function named ''h''
    is already defined in this scope

    /tmp/tmp7vrc5p2l.cs(85,14): error CS0128: A local variable or function named ''i''
    is already defined in this scope

    /tmp/tmp7vrc5p2l.cs(86,14): error CS0128: A local variable or function named ''j''
    is already defined in this scope

    /tmp/tmp7vrc5p2l.cs(87,14): error CS0128: A local variable or function named ''k''
    is already defined in this scope

    /tmp/tmp7vrc5p2l.cs(88,14): error CS0128: A local variable or function named ''l''
    is already defined in this scope

    /tmp/tmp7vrc5p2l.cs(89,14): error CS0128: A local variable or function named ''m''
    is already defined in this scope

    /tmp/tmp7vrc5p2l.cs(90,14): error CS0128: A local variable or function named ''n''
    is already defined in this scope

    /tmp/tmp7vrc5p2l.cs(91,14): error CS0128: A local variable or function named ''o''
    is already defined in this scope

    /tmp/tmp7vrc5p2l.cs(92,14): error CS0128'
  timestamp: 1659823603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \n"
  stdout: ''
  timestamp: 1659794967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \n"
  stdout: ''
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw181mo3.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long aa = a;\n        long ab = a;\n        long ac = a;\n   \
    \     long ad = a;\n        long ae = a;\n        long af = a;\n        long ag\
    \ = a;\n        long ah = a;\n        long ai = a;\n        long aj = a;\n   \
    \     long ak = a;\n        long al = a;\n        long am = a;\n        long an\
    \ = a;\n        long ao = a;\n        long ap = a;\n        long aq = a;\n   \
    \     long ar = a;\n        long as = a;\n        long at = a;\n        long au\
    \ = a;\n        long av = a;\n        long aw = a;\n        long ax = a;\n   \
    \     long ay = a;\n        long az = a;\n        long ba = a;\n        long bb\
    \ = a;\n        long bc = a;\n        long bd = a;\n        long be = a;\n   \
    \     long bf = a;\n        long bg = a;\n        long bh = a;\n        long bi\
    \ = a;\n        long bj = a;\n        long bk = a;\n        long bl = a;\n   \
    \     long bm = a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7hwbd_kk.cs(95,14): error CS1001: Identifier expected

    /tmp/tmp7hwbd_kk.cs(95,14): error CS1002: ; expected

    /tmp/tmp7hwbd_kk.cs(95,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp7hwbd_kk.cs(95,17): error CS1031: Type expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long cube = 1;\n        while\
    \ (n > 1) {\n            cube = cube * n;\n            n = n / 3;\n        }\n\
    \        return cube == a;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e98e57e8047644338aab393bd22f2c73>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e98e57e8047644338aab393bd22f2c73>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8_y19229.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long A = b;\n        long B = b;\n        long C = b;\n        long D\
    \ = b;\n        long E = b;\n        long F = b;\n        long G = b;\n      \
    \  long H = b;\n        long I = b;\n        long J = b;\n        long K = b;\n\
    \        long L = b;\n        long M = b;\n        long N = b;\n        long O\
    \ = b;\n        long P = b;\n        long Q = b;\n        long R = b;\n      \
    \  long S = b;\n        long T = b;\n        long U = b;\n        long V = b;\n\
    \        long W = b;\n        long X = b;\n        long Y = b;\n        long Z\
    \ = b;\n        long AA = b;\n        long AB = b;\n        long AC = b;\n   \
    \     long AD = b;\n        long AE = b;\n        long AF = b;\n        long AG\
    \ = b;\n        long AH = b;\n        long AI = b;\n        long AJ = b;\n   \
    \     long AK = b;\n        long AL = b;\n        long AM = b;\n        long AN\
    \ = b;\n        long AO = b;\n        long AP = b;\n        long AQ = b;\n   \
    \     long AR = b;\n        long AS = b;\n        long AT = b;\n        long AU\
    \ = b;\n        long AV = b;\n        long AW = b;\n        long AX = b;\n   \
    \     long AY = b;\n        long AZ = b;\n        long AAA = b;\n        long\
    \ AAB = b;\n        long AAC = b;\n        long AAD = b;\n        long AAE = b;\n\
    \        long AAF = b;\n        long AAG = b;\n        long AAH = b;\n       \
    \ long AAI = b;\n        long AAJ = b;\n        long AAK = b;\n        \n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzuvbe26s.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        if (cube == a)\n   \
    \         return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp51mrvk3d.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        return Math.Pow(a, 3) == a;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e067ce74917a418abf49ca33842cff5c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e067ce74917a418abf49ca33842cff5c>:0 \n"
  stdout: ''
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        if\
    \ (a == 0)\n            return true;\n        if (a > 0)\n            return false;\n\
    \        long b = 1;\n        long c = 1;\n        long d = 1;\n        long e\
    \ = 1;\n        long f = 1;\n        long g = 1;\n        long h = 1;\n      \
    \  long i = 1;\n        long j = 1;\n        long k = 1;\n        long l = 1;\n\
    \        long m = 1;\n        long n = 1;\n        long o = 1;\n        long p\
    \ = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n      \
    \  long t = 1;\n        long u = 1;\n        long v = 1;\n        long w = 1;\n\
    \        long x = 1;\n        long y = 1;\n        long z = 1;\n        long A\
    \ = 1;\n        long B = 1;\n        long C = 1;\n        long D = 1;\n      \
    \  long E = 1;\n        long F = 1;\n        long G = 1;\n        long H = 1;\n\
    \        long I = 1;\n        long J = 1;\n        long K = 1;\n        long L\
    \ = 1;\n        long M = 1;\n        long N = 1;\n        long O = 1;\n      \
    \  long P = 1;\n        long Q = 1;\n        long R = 1;\n        long S = 1;\n\
    \        long T = 1;\n        long U = 1;\n        long V = 1;\n        long W\
    \ = 1;\n        long X = 1;\n        long Y = 1;\n        long Z = 1;\n      \
    \  long AA = 1;\n        long AB = 1;\n        long AC = 1;\n        long AD =\
    \ 1;\n        long AE = 1;\n        long AF = 1;\n        long AG = 1;\n     \
    \   long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n        long AK\
    \ = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN = 1;\n   \
    \     long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n        long AR\
    \ = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU = 1;\n   \
    \     long AV = 1;\n        long AW = 1;\n        long AX = 1;\n        long AY\
    \ = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB = 1;\n   \
    \     long BC = 1;\n        long BD = 1;\n        long BE = 1;\n        long BF\
    \ = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI = 1;\n   \
    \     long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n        long BM\
    \ = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP = 1;\n   \
    \     long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n        long BT\
    \ = 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpygmvx6oh.cs(32,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmpygmvx6oh.cs(33,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpygmvx6oh.cs(34,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpygmvx6oh.cs(35,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpygmvx6oh.cs(36,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpygmvx6oh.cs(37,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpygmvx6oh.cs(38,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpygmvx6oh.cs(39,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpygmvx6oh.cs(40,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpygmvx6oh.cs(41,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpygmvx6oh.cs(42,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpygmvx6oh.cs(43,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpygmvx6oh.cs(44,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpygmvx6oh.cs(45,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpygmvx6oh.cs(46,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpygmvx6oh.cs(47,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpygmvx6oh.cs(48,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpygmvx6oh.cs(49,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpygmvx6oh.cs(50,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp18cnasok.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8_y19229.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        return ((a % 3) == 0);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b400c54f8b5445dfaf4180e9d668e104>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b400c54f8b5445dfaf4180e9d668e104>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        return ((a % 3) == 0 && (a % 5) == 0 && (a % 7) ==\
    \ 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d71b3a6c23c54408ab4c5fb14f1ed02a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d71b3a6c23c54408ab4c5fb14f1ed02a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        if\
    \ (a > 180)\n            return false;\n        if (a == 0)\n            return\
    \ true;\n        if (a % 3 == 0)\n            return true;\n        if (a % 5\
    \ == 0)\n            return true;\n        if (a % 7 == 0)\n            return\
    \ true;\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1e17d013f6e4709a09bc1b1b49d8eb6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1e17d013f6e4709a09bc1b1b49d8eb6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long _a = a;\n        long _b = a;\n        long _c = a;\n   \
    \     long _d = a;\n        long _e = a;\n        long _f = a;\n        long _g\
    \ = a;\n        long _h = a;\n        long _i = a;\n        long _j = a;\n   \
    \     long _k = a;\n        long _l = a;\n        long _m = a;\n        long _n\
    \ = a;\n        long _o = a;\n        long _p = a;\n        long _q = a;\n   \
    \     long _r = a;\n        long _s = a;\n        long _t = a;\n        long _u\
    \ = a;\n        long _v = a;\n        long _w = a;\n        long _x = a;\n   \
    \     long _y = a;\n        long _z = a;\n        long _A = a;\n        long _B\
    \ = a;\n        long _C = a;\n        long _D = a;\n        long _E = a;\n   \
    \     long _F = a;\n        long _G = a;\n        long _H = a;\n        long _I\
    \ = a;\n        long _J = a;\n        long _K = a;\n        long _L\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf9iotlb2.cs(114,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        if\
    \ (a > 180)\n            return false;\n        if (a == 0)\n            return\
    \ true;\n        if (a > Math.Pow(Math.Sqrt(3), 2))\n            return false;\n\
    \        if (a > Math.Pow(Math.Sqrt(3), 3))\n            return false;\n     \
    \   if (a > Math.Pow(Math.Sqrt(3), 4))\n            return false;\n        if\
    \ (a > Math.Pow(Math.Sqrt(3), 5))\n            return false;\n        if (a >\
    \ Math.Pow(Math.Sqrt(3), 6))\n            return false;\n        if (a > Math.Pow(Math.Sqrt(3),\
    \ 7))\n            return false;\n        if (a > Math.Pow(Math.Sqrt(3), 8))\n\
    \            return false;\n        if (a > Math.Pow(Math.Sqrt(3), 9))\n     \
    \       return false;\n        if (a > Math.Pow(Math.Sqrt(3), 10))\n         \
    \   return false;\n        if (a > Math.Pow(Math.Sqrt(3), 11))\n            return\
    \ false;\n        if (a > Math.Pow(Math.Sqrt(3), 12))\n            return false;\n\
    \        if (a > Math.Pow(Math.Sqrt(3), 13))\n            return false;\n    \
    \    if (a > Math.Pow(Math.Sqrt(3), 14))\n            return false;\n        if\
    \ (a > Math.Pow(Math.Sqrt(3), 15))\n            return false;\n        if (a >\
    \ Math.Pow(Math.Sqrt(3), 16))\n            return false;\n        if (a > Math.Pow(Math.Sqrt(3),\
    \ 17))\n            return false;\n        if (a > Math.Pow(Math.Sqrt(3), 18))\n\
    \            return false;\n        if (a > Math.Pow(Math.Sqrt(3), 19))\n    \
    \        return false;\n        if (a > Math.Pow(Math.Sqrt(3), 20))\n        \
    \    return false;\n        if (a > Math.Pow(Math.Sqrt(3), 21))\n            return\
    \ false;\n        if (a > Math.Pow(Math.Sqrt(3), 22))\n            return false;\n\
    \        if (a > Math.Pow(Math.Sqrt(3), 23))\n            return false;\n    \
    \    if (a > Math.Pow(Math.Sqrt(3), 24))\n            return false;\n        if\
    \ (a > Math.Pow(Math.Sqrt(3), 25))\n            return false;\n        if (a >\
    \ Math.Pow(Math.Sqrt(3), 26))\n            return false;\n        if (a > Math.Pow(Math.Sqrt(3),\
    \ 27))\n            return false;\n        if (a > Math.Pow(Math.Sqrt(3), 28))\n\
    \            return false;\n        if (a > Math.Pow(Math.Sqrt(3), 29))\n    \
    \        return false;\n        if (a > Math.Pow(Math.Sqrt(3), 30))\n        \
    \    return false;\n        if (a > Math.Pow\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplfvwq385.cs(90,25): error CS1026: ) expected

    /tmp/tmplfvwq385.cs(90,25): error CS1525: Invalid expression term ''}''

    /tmp/tmplfvwq385.cs(90,25): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long d = 1;\n        while (n\
    \ > 1) {\n            d *= n;\n            n--;\n        }\n        return d ==\
    \ a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6c65a0e8fbb424e84973b00d5aa433b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6c65a0e8fbb424e84973b00d5aa433b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \n"
  stdout: ''
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw181mo3.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long a = a;\n        long b = a;\n        long c = a;\n        long d\
    \ = a;\n        long e = a;\n        long f = a;\n        long g = a;\n      \
    \  long h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n\
    \        long l = a;\n        long m = a;\n        long n = a;\n        long o\
    \ = a;\n        long p = a;\n        long q = a;\n        long r = a;\n      \
    \  long s = a;\n        long t = a;\n        long u = a;\n        long v = a;\n\
    \        long w = a;\n        long x = a;\n        long y = a;\n        long z\
    \ = a;\n        long a = a;\n        long b = a;\n        long c = a;\n      \
    \  long d = a;\n        long e = a;\n        long f = a;\n        long g = a;\n\
    \        long h = a;\n        long i = a;\n        long j = a;\n        long k\
    \ = a;\n        long l = a;\n        long m = a;\n        long n = a;\n      \
    \  long o = a;\n        long p = a;\n        long q = a;\n        long r = a;\n\
    \        long s = a;\n        long t = a;\n        long u = a;\n        long v\
    \ = a;\n        long w = a;\n        long x = a;\n        long y = a;\n      \
    \  long z = a;\n        long a = a;\n        long b = a;\n        long c = a;\n\
    \        long d = a;\n        long e = a;\n        long f = a;\n        long g\
    \ = a;\n        long h = a;\n        long i = a;\n        long j = a;\n      \
    \  long k = a;\n        long l = a;\n        long m = a;\n        long n = a;\n\
    \        long o = a;\n        long p = a;\n        long q = a;\n        long r\
    \ = a;\n        long s = a;\n        long t = a;\n        long u = a;\n      \
    \  long v = a;\n        long w = a;\n        long x = a;\n        long y = \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl4_8yasu.cs(127,17): error CS1525: Invalid expression term ''}''

    /tmp/tmpl4_8yasu.cs(127,17): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp18cnasok.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        if (cube == a)\n   \
    \         return true;\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb_zpw0ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp18cnasok.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long aa = 1;\n        long ab = 1;\n        long ac = 1;\n   \
    \     long ad = 1;\n        long ae = 1;\n        long af = 1;\n        long ag\
    \ = 1;\n        long ah = 1;\n        long ai = 1;\n        long aj = 1;\n   \
    \     long ak = 1;\n        long al = 1;\n        long am = 1;\n        long an\
    \ = 1;\n        long ao = 1;\n        long ap = 1;\n        long aq = 1;\n   \
    \     long ar = 1;\n        long as = 1;\n        long at = 1;\n        long au\
    \ = 1;\n        long av = 1;\n        long aw = 1;\n        long ax = 1;\n   \
    \     long ay = 1;\n        long az = 1;\n        long aaa = 1;\n        long\
    \ aab = 1;\n        long aac = 1;\n        long aad = 1;\n        long aae = 1;\n\
    \        long aaf = 1;\n        long aag = 1;\n        long aah = 1;\n       \
    \ long aai = 1;\n        long aaj = 1;\n        long aak = 1;\n        long aal\
    \ = 1;\n        long aam = 1;\n        long aan = 1;\n        long aoa = 1;\n\
    \        long aap = 1;\n        long aqa = 1;\n        long aar = 1;\n       \
    \ long asa = 1;\n        long ata = 1;\n        long aua = 1;\n        long ava\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw8aptqr8.cs(95,14): error CS1001: Identifier expected

    /tmp/tmpw8aptqr8.cs(95,14): error CS1002: ; expected

    /tmp/tmpw8aptqr8.cs(95,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpw8aptqr8.cs(95,17): error CS1031: Type expected

    /tmp/tmpw8aptqr8.cs(124,17): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw181mo3.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long m = n;\n        long r =\
    \ n;\n        long s = n;\n        long t = n;\n        long u = n;\n        long\
    \ v = n;\n        long w = n;\n        long x = n;\n        long y = n;\n    \
    \    long z = n;\n        long aa = n;\n        long bb = n;\n        long cc\
    \ = n;\n        long dd = n;\n        long ee = n;\n        long ff = n;\n   \
    \     long gg = n;\n        long hh = n;\n        long ii = n;\n        long jj\
    \ = n;\n        long kk = n;\n        long ll = n;\n        long mm = n;\n   \
    \     long nn = n;\n        long oo = n;\n        long pp = n;\n        long qq\
    \ = n;\n        long rr = n;\n        long ss = n;\n        long tt = n;\n   \
    \     long uu = n;\n        long vv = n;\n        long ww = n;\n        long xx\
    \ = n;\n        long yy = n;\n        long zz = n;\n        long aaa = n;\n  \
    \      long bbb = n;\n        long ccc = n;\n        long dd = n;\n        long\
    \ eee = n;\n        long fff = n;\n        long ggg = n;\n        long hhh = n;\n\
    \        long iii = n;\n        long jjj = n;\n        long kkk = n;\n       \
    \ long lll = n;\n        long mmm = n;\n        long nnn = n;\n        long ooo\
    \ = n;\n        long ppp = n;\n        long qq = n;\n        long rr = n;\n  \
    \      long ss = n;\n        long tt = n;\n        long uuu = n;\n        long\
    \ vv = n;\n        long ww = n;\n        long xx = n;\n        long yy = n;\n\
    \        long zz = n;\n        long aaa = n;\n        long bbb = n;\n        long\
    \ ccc = n;\n        long dd = n;\n        long eee = n;\n        long fff = n;\n\
    \        long ggg = n;\n        long hhh = n;\n        long iii = n;\n       \
    \ long jjj = n;\n        long kkk = n;\n        long lll = n;\n        long mmm\
    \ = n;\n        long nnn = n;\n        long ooo = n;\n        long ppp = n;\n\
    \        long qq = n;\n        long rr = n;\n        long ss = n;\n        long\
    \ tt = n;\n        long uuu = n;\n        long vv = n;\n        long ww = n;\n\
    \        long xx = n;\n        long yy = \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwrmgw83u.cs(113,18): error CS1525: Invalid expression term ''}''

    /tmp/tmpwrmgw83u.cs(113,18): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long A = b;\n        long B = b;\n        long C = b;\n        long D\
    \ = b;\n        long E = b;\n        long F = b;\n        long G = b;\n      \
    \  long H = b;\n        long I = b;\n        long J = b;\n        long K = b;\n\
    \        long L = b;\n        long M = b;\n        long N = b;\n        long O\
    \ = b;\n        long P = b;\n        long Q = b;\n        long R = b;\n      \
    \  long S = b;\n        long T = b;\n        long U = b;\n        long V = b;\n\
    \        long W = b;\n        long X = b;\n        long Y = b;\n        long Z\
    \ = b;\n        long _1 = b;\n        long _2 = b;\n        long _3 = b;\n   \
    \     long _4 = b;\n        long _5 = b;\n        long _6 = b;\n        long _7\
    \ = b;\n        long _8 = b;\n        long _9 = b;\n        long _10 = b;\n  \
    \      long _11 = b;\n        long _12 = b;\n        long _13 = b;\n        long\
    \ _14 = b;\n        long _15 = b;\n        long _16 = b;\n        long _17 = b;\n\
    \        long _18 = b;\n        long _19 = b;\n        long _20 = b;\n       \
    \ long _21 = b;\n        long _22 = b;\n        long _23 = b;\n        long _24\
    \ = b;\n        long _25 = b;\n        long _26 = b;\n        long _27 = b;\n\
    \        long _28 = b;\n        long _29 = b;\n        long _30 = b;\n       \
    \ long _31 = b;\n        long _32 = b;\n        long _33 = b;\n        long _34\
    \ = b;\n        long _35 = b\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdq6n0n4r.cs(111,21): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long A = b;\n        long B = b;\n        long C = b;\n        long D\
    \ = b;\n        long E = b;\n        long F = b;\n        long G = b;\n      \
    \  long H = b;\n        long I = b;\n        long J = b;\n        long K = b;\n\
    \        long L = b;\n        long M = b;\n        long N = b;\n        long O\
    \ = b;\n        long P = b;\n        long Q = b;\n        long R = b;\n      \
    \  long S = b;\n        long T = b;\n        long U = b;\n        long V = b;\n\
    \        long W = b;\n        long X = b;\n        long Y = b;\n        long Z\
    \ = b;\n        long AA = b;\n        long AB = b;\n        long AC = b;\n   \
    \     long AD = b;\n        long AE = b;\n        long AF = b;\n        long AG\
    \ = b;\n        long AH = b;\n        long AI = b;\n        long AJ = b;\n   \
    \     long AK = b;\n        long AL = b;\n        long AM = b;\n        long AN\
    \ = b;\n        long AO = b;\n        long AP = b;\n        long AQ = b;\n   \
    \     long AR = b;\n        long AS = b;\n        long AT = b;\n        long AU\
    \ = b;\n        long AV = b;\n        long AW = b;\n        long AX = b;\n   \
    \     long AY = b;\n        long AZ = b;\n        long AAA = b;\n        long\
    \ AAB = b;\n        long AAC = b;\n        long AAD = b;\n        long AAE = b;\n\
    \        long AAF = b;\n        long AAG = b;\n        long AAH = b;\n       \
    \ long AAI = b;\n        long AAJ = b;\n        long AAK = b;\n\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi8tqflcy.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659823603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        return ((a % 3) == 0 && (a % 5) == 0 && (a % 7) ==\
    \ 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d71b3a6c23c54408ab4c5fb14f1ed02a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d71b3a6c23c54408ab4c5fb14f1ed02a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long a = b;\n        long b = b;\n        long c = b;\n        long d\
    \ = b;\n        long e = b;\n        long f = b;\n        long g = b;\n      \
    \  long h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n\
    \        long l = b;\n        long m = b;\n        long n = b;\n        long o\
    \ = b;\n        long p = b;\n        long q = b;\n        long r = b;\n      \
    \  long s = b;\n        long t = b;\n        long u = b;\n        long v = b;\n\
    \        long w = b;\n        long x = b;\n        long y = b;\n        long z\
    \ = b;\n        long a = b;\n        long b = b;\n        long c = b;\n      \
    \  long d = b;\n        long e = b;\n        long f = b;\n        long g = b;\n\
    \        long h = b;\n        long i = b;\n        long j = b;\n        long k\
    \ = b;\n        long l = b;\n        long m = b;\n        long n = b;\n      \
    \  long o = b;\n        long p = b;\n        long q = b;\n        long r = b;\n\
    \        long s = b;\n        long t = b;\n        long u = b;\n        long v\
    \ = b;\n        long w = b;\n        long x = b;\n        long y = b;\n      \
    \  long z = b;\n        long a = b;\n        long b = b;\n        long c = b;\n\
    \        long d = b;\n        long e = b;\n        long f = b;\n        long g\
    \ = b;\n        long h = b;\n        long i = b;\n        long j = b;\n      \
    \  long k = b;\n        long l = b;\n        long m = b;\n        long n = b;\n\
    \        long o = b;\n        long p = b;\n        long q = b;\n        long r\
    \ = b;\n        long s = b;\n        long t = b;\n        long u = b;\n      \
    \  long v = b;\n        long w = b;\n        long x = b;\n        long y = b;\n\
    \        long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx3jjvm02.cs(128,13): error CS1001: Identifier expected

    /tmp/tmpx3jjvm02.cs(128,13): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        return a % 1 == 0 && a % 3 == 0 && a % 5 == 0 && a\
    \ % 7 == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4cbc47649a364eb69b19ace3d0d64c64>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4cbc47649a364eb69b19ace3d0d64c64>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823604
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long cube = n * n * n;\n    \
    \    long cube2 = n * n * n * n;\n        long cube3 = n * n * n * n * n;\n  \
    \      long cube4 = n * n * n * n * n * n;\n        long cube5 = n * n * n * n\
    \ * n * n * n;\n        long cube6 = n * n * n * n * n * n * n * n;\n        long\
    \ cube7 = n * n * n * n * n * n * n * n * n;\n        long cube8 = n * n * n *\
    \ n * n * n * n * n * n * n;\n        long cube9 = n * n * n * n * n * n * n *\
    \ n * n * n * n;\n        long cube10 = n * n * n * n * n * n * n * n * n * n\
    \ * n * n;\n        long cube11 = n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n;\n        long cube12 = n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n;\n        long cube13 = n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n;\n        long cube14 = n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n;\n        long cube15 = n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n * n * n * n * n;\n        long cube16 = n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube17\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n \
    \       long cube18 = n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n;\n        long cube19 = n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n;\n        long cube20 = n * n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n       \
    \ long cube21 = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n;\n        long cube22 = n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n * n * n * n;\n        long cube23 = n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube24\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n;\n        long cube25 = n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n * n * n * n;\n        long cube26 = n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa019l37j.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long A = b;\n        long B = b;\n        long C = b;\n        long D\
    \ = b;\n        long E = b;\n        long F = b;\n        long G = b;\n      \
    \  long H = b;\n        long I = b;\n        long J = b;\n        long K = b;\n\
    \        long L = b;\n        long M = b;\n        long N = b;\n        long O\
    \ = b;\n        long P = b;\n        long Q = b;\n        long R = b;\n      \
    \  long S = b;\n        long T = b;\n        long U = b;\n        long V = b;\n\
    \        long W = b;\n        long X = b;\n        long Y = b;\n        long Z\
    \ = b;\n        long a = b;\n        long b = b;\n        long c = b;\n      \
    \  long d = b;\n        long e = b;\n        long f = b;\n        long g = b;\n\
    \        long h = b;\n        long i = b;\n        long j = b;\n        long k\
    \ = b;\n        long l = b;\n        long m = b;\n        long n = b;\n      \
    \  long o = b;\n        long p = b;\n        long q = b;\n        long r = b;\n\
    \        long s = b;\n        long t = b;\n        long u = b;\n        long v\
    \ = b;\n        long w = b;\n        long x = b;\n        long y = b;\n      \
    \  long z = b;\n        long A = b;\n        long B = b;\n        long C = b;\n\
    \        long D = b;\n        long E = b;\n        long F = b;\n        long G\
    \ = b;\n        long H = b;\n        long I = b;\n        long J = b;\n      \
    \  long K = b;\n        long L = b;\n        long M = b;\n        long N = b;\n\
    \        long O = b;\n        long P = b;\n        long Q = b;\n        long R\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6bn71tiv.cs(120,15): error CS1002: ; expected

    '
  timestamp: 1659794966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8_y19229.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        if\
    \ (a == 0)\n            return true;\n        if (a > Math.Pow(3,4))\n       \
    \     return false;\n        long b = a;\n        long c = 1;\n        long d\
    \ = 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n      \
    \  long h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n\
    \        long l = 1;\n        long m = 1;\n        long n = 1;\n        long o\
    \ = 1;\n        long p = 1;\n        long q = 1;\n        long r = 1;\n      \
    \  long s = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n\
    \        long w = 1;\n        long x = 1;\n        long y = 1;\n        long z\
    \ = 1;\n        long aa = 1;\n        long ab = 1;\n        long ac = 1;\n   \
    \     long ad = 1;\n        long ae = 1;\n        long af = 1;\n        long ag\
    \ = 1;\n        long ah = 1;\n        long ai = 1;\n        long aj = 1;\n   \
    \     long ak = 1;\n        long al = 1;\n        long am = 1;\n        long an\
    \ = 1;\n        long ao = 1;\n        long ap = 1;\n        long aq = 1;\n   \
    \     long ar = 1;\n        long as = 1;\n        long at = 1;\n        long au\
    \ = 1;\n        long av = 1;\n        long aw = 1;\n        long ax = 1;\n   \
    \     long ay = 1;\n        long az = 1;\n        long ba = 1;\n        long bb\
    \ = 1;\n        long bc = 1;\n        long bd = 1;\n        long be = 1;\n   \
    \     long bf = 1;\n        long bg = 1;\n        long bh = 1;\n        long bi\
    \ = 1;\n        long bj = 1;\n        long bk = 1;\n        long bl = 1;\n   \
    \     long bm = 1;\n        long bn = 1;\n        long bo = 1;\n        long bp\
    \ = 1;\n        long bq = 1;\n        long br = 1;\n        long bs = 1;\n   \
    \     long bt = 1;\n        long bu = 1;\n        long bv = 1;\n        long bw\
    \ = 1;\n        long bx = 1;\n        long by = 1;\n        long bz = 1;\n   \
    \     long ca = 1;\n        long cb = 1;\n        long cc = 1;\n        long cd\
    \ = 1;\n        long ce = 1;\n        long cf = 1;\n        long cg = 1;\n   \
    \     long ch = 1;\n        long ci = 1;\n        long cj = 1;\n        long ck\
    \ = 1;\n        long cl = 1;\n        long cm = 1;\n        long cn = 1;\n   \
    \     long co = 1;\n        long cp = 1;\n        long cq = 1;\n        long \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkheo214s.cs(75,14): error CS1001: Identifier expected

    /tmp/tmpkheo214s.cs(75,14): error CS1002: ; expected

    /tmp/tmpkheo214s.cs(75,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpkheo214s.cs(75,17): error CS1031: Type expected

    /tmp/tmpkheo214s.cs(126,13): error CS1001: Identifier expected

    /tmp/tmpkheo214s.cs(126,13): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long A = b;\n        long B = b;\n        long C = b;\n        long D\
    \ = b;\n        long E = b;\n        long F = b;\n        long G = b;\n      \
    \  long H = b;\n        long I = b;\n        long J = b;\n        long K = b;\n\
    \        long L = b;\n        long M = b;\n        long N = b;\n        long O\
    \ = b;\n        long P = b;\n        long Q = b;\n        long R = b;\n      \
    \  long S = b;\n        long T = b;\n        long U = b;\n        long V = b;\n\
    \        long W = b;\n        long X = b;\n        long Y = b;\n        long Z\
    \ = b;\n        long a = b;\n        long b = b;\n        long c = b;\n      \
    \  long d = b;\n        long e = b;\n        long f = b;\n        long g = b;\n\
    \        long h = b;\n        long i = b;\n        long j = b;\n        long k\
    \ = b;\n        long l = b;\n        long m = b;\n        long n = b;\n      \
    \  long o = b;\n        long p = b;\n        long q = b;\n        long r = b;\n\
    \        long s = b;\n        long t = b;\n        long u = b;\n        long v\
    \ = b;\n        long w = b;\n        long x = b;\n        long y = b;\n      \
    \  long z = b;\n        long A = b;\n        long B = b;\n        long C = b;\n\
    \        long D = b;\n        long E = b;\n        long F = b;\n        long G\
    \ = b;\n        long H = b;\n        long I = b;\n        long J = b;\n      \
    \  long K = b;\n        long L = b;\n        long M = b;\n        long N = b;\n\
    \        long O = b;\n        long P = b;\n        long Q = b;\n        long R\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6bn71tiv.cs(120,15): error CS1002: ; expected

    '
  timestamp: 1659794966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        long\
    \ b = 1;\n        long c = 1;\n        long d = 1;\n        long e = 1;\n    \
    \    long f = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n\
    \        long j = 1;\n        long k = 1;\n        long l = 1;\n        long m\
    \ = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n      \
    \  long q = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n\
    \        long u = 1;\n        long v = 1;\n        long w = 1;\n        long x\
    \ = 1;\n        long y = 1;\n        long z = 1;\n        long aa = 1;\n     \
    \   long ab = 1;\n        long ac = 1;\n        long ad = 1;\n        long ae\
    \ = 1;\n        long af = 1;\n        long ag = 1;\n        long ah = 1;\n   \
    \     long ai = 1;\n        long aj = 1;\n        long ak = 1;\n        long al\
    \ = 1;\n        long am = 1;\n        long an = 1;\n        long ao = 1;\n   \
    \     long ap = 1;\n        long aq = 1;\n        long ar = 1;\n        long as\
    \ = 1;\n        long at = 1;\n        long au = 1;\n        long av = 1;\n   \
    \     long aw = 1;\n        long ax = 1;\n        long ay = 1;\n        long az\
    \ = 1;\n        long ba = 1;\n        long bb = 1;\n        long bc = 1;\n   \
    \     long bd = 1;\n        long be = 1;\n        long bf = 1;\n        long bg\
    \ = 1;\n        long bh = 1;\n        long bi = 1;\n        long bj = 1;\n   \
    \     long bk = 1;\n        long bl = 1;\n        long bm = 1;\n        long bn\
    \ = 1;\n        long bo = 1;\n        long bp = 1;\n        long bq = 1;\n   \
    \     long br = 1;\n        long bs = 1;\n        long bt1 = 1;\n        long\
    \ bt2 = 1;\n        long bt3 = 1;\n        long bt4 = 1;\n        long bt5 = 1;\n\
    \        long bt6 = 1;\n        long bt7 = 1;\n        long bt8 = 1;\n       \
    \ long bt9 = 1;\n        long bt10 = 1;\n        long bt11 = 1;\n        long\
    \ bt12 = 1;\n        long bt13 = 1;\n        long bt14 = 1;\n        long bt15\
    \ = 1;\n        long bt16 = 1;\n        long bt17 = 1;\n        long bt18 = 1;\n\
    \        long bt19 = 1;\n        long bt20 = 1;\n        long bt21 = 1;\n    \
    \    long bt22 = 1;\n        long bt23 = 1;\n        long bt24 = 1;\n        long\
    \ bt25 = 1;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpie0bii4m.cs(71,14): error CS1001: Identifier expected

    /tmp/tmpie0bii4m.cs(71,14): error CS1002: ; expected

    /tmp/tmpie0bii4m.cs(71,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpie0bii4m.cs(71,17): error CS1031: Type expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        if (cube == a)\n   \
    \         return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp51mrvk3d.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw181mo3.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        if (cube == a)\n   \
    \         return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp51mrvk3d.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw181mo3.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long aa = a;\n        long bb = a;\n        long cc = a;\n   \
    \     long dd = a;\n        long ee = a;\n        long ff = a;\n        long gg\
    \ = a;\n        long hh = a;\n        long ii = a;\n        long jj = a;\n   \
    \     long kk = a;\n        long ll = a;\n        long mm = a;\n        long nn\
    \ = a;\n        long oo = a;\n        long pp = a;\n        long qq = a;\n   \
    \     long rr = a;\n        long ss = a;\n        long tt = a;\n        long uu\
    \ = a;\n        long vv = a;\n        long ww = a;\n        long xx = a;\n   \
    \     long yy = a;\n        long zz = a;\n        long aaa = a;\n        long\
    \ bbb = a;\n        long ccc = a;\n        long ddd = a;\n        long eee = a;\n\
    \        long fff = a;\n        long ggg = a;\n        long hhh = a;\n       \
    \ long iii = a;\n        long jjj = a;\n        long kkk = a;\n        long lll\
    \ = a;\n        long mmm = a;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppcab_2z8.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659823604
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long m = n;\n        long r =\
    \ n;\n        long s = n;\n        long t = n;\n        long u = 1;\n        long\
    \ v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n    \
    \    long z = 1;\n        long a = 1;\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long a = 1;\n        long b = 1;\n        long c\
    \ = 1;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n      \
    \  long g = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n\
    \        long k = 1;\n        long l = 1;\n        long m = 1;\n        long n\
    \ = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n      \
    \  long r = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n\
    \        long v = 1;\n        long w = 1;\n        long x = 1;\n        long y\
    \ = 1;\n        long z = 1;\n        long a = 1;\n        long b = 1;\n      \
    \  long c = 1;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n\
    \        long g = 1;\n        long h = 1;\n        long i = 1;\n        long j\
    \ = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n      \
    \  long n = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n\
    \        long r = 1;\n        long s = 1;\n        long t = 1;\n        long u\
    \ = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n      \
    \  long y = 1;\n        long z = 1;\n        long a = 1;\n        long b = 1;\n\
    \        long c = 1;\n        long d = 1;\n        long e = 1;\n        long f\
    \ = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n      \
    \  long j = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n\
    \        long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxi10p6he.cs(128,13): error CS1001: Identifier expected

    /tmp/tmpxi10p6he.cs(128,13): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        return ((a % 3) == 0);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b400c54f8b5445dfaf4180e9d668e104>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b400c54f8b5445dfaf4180e9d668e104>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp18cnasok.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        if\
    \ (a == 0)\n            return true;\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp76_70e2y.cs(128,13): error CS1001: Identifier expected

    /tmp/tmp76_70e2y.cs(128,13): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        long\
    \ b = 1;\n        long c = 1;\n        long d = 1;\n        long e = 1;\n    \
    \    long f = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n\
    \        long j = 1;\n        long k = 1;\n        long l = 1;\n        long m\
    \ = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n      \
    \  long q = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n\
    \        long u = 1;\n        long v = 1;\n        long w = 1;\n        long x\
    \ = 1;\n        long y = 1;\n        long z = 1;\n        long A = 1;\n      \
    \  long B = 1;\n        long C = 1;\n        long D = 1;\n        long E = 1;\n\
    \        long F = 1;\n        long G = 1;\n        long H = 1;\n        long I\
    \ = 1;\n        long J = 1;\n        long K = 1;\n        long L = 1;\n      \
    \  long M = 1;\n        long N = 1;\n        long O = 1;\n        long P = 1;\n\
    \        long Q = 1;\n        long R = 1;\n        long S = 1;\n        long T\
    \ = 1;\n        long U = 1;\n        long V = 1;\n        long W = 1;\n      \
    \  long X = 1;\n        long Y = 1;\n        long Z = 1;\n        long AA = 1;\n\
    \        long AB = 1;\n        long AC = 1;\n        long AD = 1;\n        long\
    \ AE = 1;\n        long AF = 1;\n        long AG = 1;\n        long AH = 1;\n\
    \        long AI = 1;\n        long AJ = 1;\n        long AK = 1;\n        long\
    \ AL = 1;\n        long AM = 1;\n        long AN = 1;\n        long AO = 1;\n\
    \        long AP = 1;\n        long AQ = 1;\n        long AR = 1;\n        long\
    \ AS = 1;\n        long AT = 1;\n        long AU = 1;\n        long AV = 1;\n\
    \        long AW = 1;\n        long AX = 1;\n        long AY = 1;\n        long\
    \ AZ = 1;\n        long BA = 1;\n        long BB = 1;\n        long BC = 1;\n\
    \        long BD = 1;\n        long BE = 1;\n        long BF = 1;\n        long\
    \ BG = 1;\n        long BH = 1;\n        long BI = 1;\n        long BJ = 1;\n\
    \        long BK = 1;\n        long BL = 1;\n        long BM = 1;\n        long\
    \ BN = 1;\n        long BO = 1;\n        long BP = 1;\n        long BQ = 1;\n\
    \        long BR = 1;\n        long BS = 1;\n        long BT = 1;\n        long\
    \ BU = 1;\n        long BV = 1;\n        long B\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf4umjyrj.cs(127,15): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3L));\n  \
    \      return cube == a || cube == a * a || cube == a * a * a;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9cdba1a161fe4469a78bb16f0161a276>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9cdba1a161fe4469a78bb16f0161a276>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823604
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp18cnasok.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2egrn4g9.cs(51,14): warning CS0219: The variable ''A'' is assigned but
    its value is never used

    /tmp/tmp2egrn4g9.cs(52,14): warning CS0219: The variable ''B'' is assigned but
    its value is never used

    /tmp/tmp2egrn4g9.cs(53,14): warning CS0219: The variable ''C'' is assigned but
    its value is never used

    /tmp/tmp2egrn4g9.cs(54,14): warning CS0219: The variable ''D'' is assigned but
    its value is never used

    /tmp/tmp2egrn4g9.cs(55,14): warning CS0219: The variable ''E'' is assigned but
    its value is never used

    /tmp/tmp2egrn4g9.cs(56,14): warning CS0219: The variable ''F'' is assigned but
    its value is never used

    /tmp/tmp2egrn4g9.cs(57,14): warning CS0219: The variable ''G'' is assigned but
    its value is never used

    /tmp/tmp2egrn4g9.cs(58,14): warning CS0219: The variable ''H'' is assigned but
    its value is never used

    /tmp/tmp2egrn4g9.cs(59,14): warning CS0219: The variable ''I'' is assigned but
    its value is never used

    /tmp/tmp2egrn4g9.cs(60,14): warning CS0219: The variable ''J'' is assigned but
    its value is never used

    /tmp/tmp2egrn4g9.cs(61,14): warning CS0219: The variable ''K'' is assigned but
    its value is never used

    /tmp/tmp2egrn4g9.cs(62,14): warning CS0219: The variable ''L'' is assigned but
    its value is never used

    /tmp/tmp2egrn4g9.cs(63,14): warning CS0219: The variable ''M'' is assigned but
    its value is never used

    /tmp/tmp2egrn4g9.cs(64,14): warning CS0219: The variable ''N'' is assigned but
    its value is never used

    /tmp/tmp2egrn4g9.cs(65,14): warning CS0219: The variable ''O'' is assigned but
    its value is never used

    /tmp/tmp2egrn4g9.cs(66,14): warning CS0219: The variable ''P'' is assigned but
    its value is never used

    /tmp/tmp2egrn4g9.cs(67,14): warning CS0219: The variable ''Q'' is assigned but
    its value is never used

    /tmp/tmp2egrn4g9.cs(68,14): warning CS0219: The variable ''R'' is assigned but
    its value is never used

    /tmp/tmp2egrn4g9.cs(69,14): warning CS0219: The variable ''S'' is assigned but
    its value is never used

    /t'
  timestamp: 1659823604
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        if (cube == a)\n   \
    \         return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp51mrvk3d.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \n"
  stdout: ''
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long A = b;\n        long B = b;\n        long C = b;\n        long D\
    \ = b;\n        long E = b;\n        long F = b;\n        long G = b;\n      \
    \  long H = b;\n        long I = b;\n        long J = b;\n        long K = b;\n\
    \        long L = b;\n        long M = b;\n        long N = b;\n        long O\
    \ = b;\n        long P = b;\n        long Q = b;\n        long R = b;\n      \
    \  long S = b;\n        long T = b;\n        long U = b;\n        long V = b;\n\
    \        long W = b;\n        long X = b;\n        long Y = b;\n        long Z\
    \ = b;\n        long _1 = b;\n        long _2 = b;\n        long _3 = b;\n   \
    \     long _4 = b;\n        long _5 = b;\n        long _6 = b;\n        long _7\
    \ = b;\n        long _8 = b;\n        long _9 = b;\n        long _10 = b;\n  \
    \      long _11 = b;\n        long _12 = b;\n        long _13 = b;\n        long\
    \ _14 = b;\n        long _15 = b;\n        long _16 = b;\n        long _17 = b;\n\
    \        long _18 = b;\n        long _19 = b;\n        long _20 = b;\n       \
    \ long _21 = b;\n        long _22 = b;\n        long _23 = b;\n        long _24\
    \ = b;\n        long _25 = b;\n        long _26 = b;\n        long _27 = b;\n\
    \        long _28 = b;\n        long _29 = b;\n        long _30 = b;\n       \
    \ long _31 = b;\n        long _32 = b;\n        long _33 = b;\n        long _34\
    \ = b;\n        long _35\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph2lmkknf.cs(111,17): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long cube = n * n * n;\n    \
    \    return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b9229cdb68c4ff0ac48e3d4dc48993f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b9229cdb68c4ff0ac48e3d4dc48993f>:0 \n"
  stdout: ''
  timestamp: 1659823604
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        if (cube == a)\n   \
    \         return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp51mrvk3d.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long cube = 1;\n        while\
    \ (n > 1) {\n            cube = cube * n;\n            n = n / 3;\n        }\n\
    \        return cube == a;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e98e57e8047644338aab393bd22f2c73>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e98e57e8047644338aab393bd22f2c73>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long cube = n * n * n;\n    \
    \    if (cube == a)\n            return true;\n        else\n            return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47d25712d3ac42d2bd0802621ce4edd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47d25712d3ac42d2bd0802621ce4edd4>:0 \n"
  stdout: ''
  timestamp: 1659823604
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \n"
  stdout: ''
  timestamp: 1659794967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     if (cube == a)\n            return true;\n        else\n            return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a9d67a7fde74884ab5f4d86a12a10a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a9d67a7fde74884ab5f4d86a12a10a2>:0 \n"
  stdout: ''
  timestamp: 1659823604
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     if (cube == a)\n            return true;\n        else\n            return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a9d67a7fde74884ab5f4d86a12a10a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a9d67a7fde74884ab5f4d86a12a10a2>:0 \n"
  stdout: ''
  timestamp: 1659823604
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long d = 1;\n        long cube\
    \ = 1;\n        long square = 1;\n        long cubeRoot = 0;\n        long squareRoot\
    \ = 0;\n        long cubePower = 0;\n        long squarePower = 0;\n        long\
    \ cubePowerPower = 0;\n        long squarePowerPower = 0;\n        long cubePowerPowerPower\
    \ = 0;\n        long squarePowerPowerPower = 0;\n        long cubePowerPowerPowerPower\
    \ = 0;\n        long squarePowerPowerPowerPower = 0;\n        long cubePowerPowerPowerPowerPower\
    \ = 0;\n        long squarePowerPowerPowerPowerPower = 0;\n        long cubePowerPowerPowerPowerPowerPower\
    \ = 0;\n        long squarePowerPowerPowerPowerPowerPower = 0;\n        long cubePowerPowerPowerPowerPowerPowerPower\
    \ = 0;\n        long squarePowerPowerPowerPowerPowerPowerPower = 0;\n        long\
    \ cubePowerPowerPowerPowerPowerPowerPowerPower = 0;\n        long squarePowerPowerPowerPowerPowerPowerPowerPower\
    \ = 0;\n        long cubePowerPowerPowerPowerPowerPowerPowerPowerPower = 0;\n\
    \        long squarePowerPowerPowerPowerPowerPowerPowerPowerPower = 0;\n     \
    \   long cubePowerPowerPowerPowerPowerPowerPowerPowerPowerPower = 0;\n       \
    \ long squarePowerPowerPowerPowerPowerPowerPowerPowerPowerPower = 0;\n       \
    \ long cubePowerPowerPowerPowerPowerPowerPowerPowerPowerPower = 0;\n        long\
    \ squarePowerPowerPowerPowerPowerPowerPowerPowerPowerPower = 0;\n        long\
    \ cubePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower = 0;\n        long\
    \ squarePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower = 0;\n       \
    \ long cubePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower = 0;\n    \
    \    long squarePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower =\
    \ 0;\n        long cubePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower\
    \ = 0;\n        long squarePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower\
    \ = 0;\n        long cubePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower\
    \ = 0;\n        long squarePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower\
    \ = 0;\n        long cubePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower\
    \ = 0;\n        long squarePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower\
    \ = 0;\n        long cubePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower\
    \ = 0;\n        long squarePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower\
    \ = 0;\n        long cubePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower\
    \ = 0;\n        long squarePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower\
    \ = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9_z5z14v.cs(52,14): error CS0128: A local variable or function named ''cubePowerPowerPowerPowerPowerPowerPowerPowerPowerPower''
    is already defined in this scope

    /tmp/tmp9_z5z14v.cs(53,14): error CS0128: A local variable or function named ''squarePowerPowerPowerPowerPowerPowerPowerPowerPowerPower''
    is already defined in this scope

    /tmp/tmp9_z5z14v.cs(56,14): error CS0128: A local variable or function named ''cubePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower''
    is already defined in this scope

    /tmp/tmp9_z5z14v.cs(59,14): error CS0128: A local variable or function named ''squarePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower''
    is already defined in this scope

    /tmp/tmp9_z5z14v.cs(60,14): error CS0128: A local variable or function named ''cubePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower''
    is already defined in this scope

    /tmp/tmp9_z5z14v.cs(61,14): error CS0128: A local variable or function named ''squarePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower''
    is already defined in this scope

    /tmp/tmp9_z5z14v.cs(63,14): error CS0128: A local variable or function named ''squarePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower''
    is already defined in this scope

    /tmp/tmp9_z5z14v.cs(64,14): error CS0128: A local variable or function named ''cubePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower''
    is already defined in this scope

    /tmp/tmp9_z5z14v.cs(67,14): error CS0128: A local variable or function named ''squarePowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPowerPower''
    is already defined in this scope

    /tmp/tmp9_z5z14v.cs(27,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp9_z5z14v.cs(28,14): warning CS0219: The variable ''cube'' is assigned
    but its value is never used

    /tmp/tmp9_z5z14v.cs(29,14): warning CS0219: The variable ''square'' is assigned
    but its value is never used

    /tmp/tmp9_z5z14v.cs(30,14):'
  timestamp: 1659823604
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp18cnasok.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long aa = a;\n        long ab = a;\n        long ac = a;\n   \
    \     long ad = a;\n        long ae = a;\n        long af = a;\n        long ag\
    \ = a;\n        long ah = a;\n        long ai = a;\n        long aj = a;\n   \
    \     long ak = a;\n        long al = a;\n        long am = a;\n        long an\
    \ = a;\n        long ao = a;\n        long ap = a;\n        long aq = a;\n   \
    \     long ar = a;\n        long as = a;\n        long at = a;\n        long au\
    \ = a;\n        long av = a;\n        long aw = a;\n        long ax = a;\n   \
    \     long ay = a;\n        long az = a;\n        long ba = a;\n        long bb\
    \ = a;\n        long bc = a;\n        long bd = a;\n        long be = a;\n   \
    \     long bf = a;\n        long bg = a;\n        long bh = a;\n        long bi\
    \ = a;\n        long bj = a;\n        long bk = a;\n        long bl = a;\n   \
    \     long bm = a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7hwbd_kk.cs(95,14): error CS1001: Identifier expected

    /tmp/tmp7hwbd_kk.cs(95,14): error CS1002: ; expected

    /tmp/tmp7hwbd_kk.cs(95,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp7hwbd_kk.cs(95,17): error CS1031: Type expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8_y19229.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        if (cube == a)\n   \
    \         return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp51mrvk3d.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \n"
  stdout: ''
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a == 0) return true;\n        if (a > 0 && a <\
    \ 64) return true;\n        if (a > 64 && a < 128) return true;\n        if (a\
    \ > 128 && a < 256) return true;\n        if (a > 256 && a < 512) return true;\n\
    \        if (a > 512 && a < 1024) return true;\n        if (a > 1024 && a < 2048)\
    \ return true;\n        if (a > 2048 && a < 4096) return true;\n        if (a\
    \ > 4096 && a < 8192) return true;\n        if (a > 8192 && a < 16384) return\
    \ true;\n        if (a > 16384 && a < 32768) return true;\n        if (a > 32768\
    \ && a < 65536) return true;\n        if (a > 65536 && a < 131072) return true;\n\
    \        if (a > 131072 && a < 262144) return true;\n        if (a > 262144 &&\
    \ a < 524288) return true;\n        if (a > 524288 && a < 1048576) return true;\n\
    \        if (a > 1048576 && a < 2097152) return true;\n        if (a > 2097152\
    \ && a < 4194304) return true;\n        if (a > 4194304 && a < 8388608) return\
    \ true;\n        if (a > 8388608 && a < 16777216) return true;\n        if (a\
    \ > 16777216 && a < 33554432) return true;\n        if (a > 33554432 && a < 67108864)\
    \ return true;\n        if (a > 67108864 && a < 134217728) return true;\n    \
    \    if (a > 134217728 && a < 268435456) return true;\n        if (a > 268435456\
    \ && a < 536870912) return true;\n        if (a > 536870912 && a < 1073741824)\
    \ return true;\n        if (a > 1073741824 && a < 2147483648) return true;\n \
    \       if (a > 2147483648 && a < 4294967296) return true;\n        if (a > 4294967296\
    \ && a < 8589934592) return true;\n        if (a > 8589934592 && a < 17179869184)\
    \ return true;\n        if (a > 17179869184 && a < 34359738368) return true;\n\
    \        if (a > 34359738368 && a < 68719476736) return true;\n        if (a >\
    \ 68719476736 && a < 137438953472) return true;\n        if (a > 137438953472\
    \ && a < 274877906944) return true;\n        if (a > 27487\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxn8ja23m.cs(60,22): error CS1026: ) expected

    /tmp/tmpxn8ja23m.cs(60,22): error CS1525: Invalid expression term ''}''

    /tmp/tmpxn8ja23m.cs(60,22): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long aa = 1;\n        long ab = 1;\n        long ac = 1;\n        long\
    \ ad = 1;\n        long ae = 1;\n        long af = 1;\n        long ag = 1;\n\
    \        long ah = 1;\n        long ai = 1;\n        long aj = 1;\n        long\
    \ ak = 1;\n        long al = 1;\n        long am = 1;\n        long an = 1;\n\
    \        long ao = 1;\n        long ap = 1;\n        long aq = 1;\n        long\
    \ ar = 1;\n        long as = 1;\n        long at = 1;\n        long au = 1;\n\
    \        long av = 1;\n        long aw = 1;\n        long ax = 1;\n        long\
    \ ay = 1;\n        long az = 1;\n        long ba = 1;\n        long bb = 1;\n\
    \        long bc = 1;\n        long bd = 1;\n        long be = 1;\n        long\
    \ bf = 1;\n        long bg = 1;\n        long bh = 1;\n        long bi = 1;\n\
    \        long bj = 1;\n        long bk = 1;\n        long bl = 1;\n        long\
    \ bm = 1;\n        long bn = 1;\n        long bo = 1;\n        long bp = 1;\n\
    \        long bq = 1;\n        long br = 1;\n        long bs = 1;\n        long\
    \ bt1 = 1;\n        long bt2 = 1;\n        long bt3 = 1;\n        long bt4 = 1;\n\
    \        long bt5 = 1;\n        long bt6 = 1;\n        long bt7 = 1;\n       \
    \ long bt8 = 1;\n        long bt9 = 1;\n        long bt10 = 1;\n        long bt11\
    \ = 1;\n        long bt12 = 1;\n        long bt13 = 1;\n        long bt14 = 1;\n\
    \        long bt15 = 1;\n        long bt16 = 1;\n        long bt17 = 1;\n    \
    \    long bt18 = 1;\n        long bt19 = 1;\n        long bt20 = 1;\n        long\
    \ bt21 = 1;\n        long bt22 = 1;\n        long bt23 = 1;\n        long bt24\
    \ = 1;\n        long bt25 = 1;\n        long bt26 = 1;\n        \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnzn_szdh.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpnzn_szdh.cs(69,14): error CS1002: ; expected

    /tmp/tmpnzn_szdh.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpnzn_szdh.cs(69,17): error CS1031: Type expected

    '
  timestamp: 1659823603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long d = 1;\n        while (n\
    \ > 1) {\n            d *= n;\n            n--;\n        }\n        return d ==\
    \ a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6c65a0e8fbb424e84973b00d5aa433b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6c65a0e8fbb424e84973b00d5aa433b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \n"
  stdout: ''
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 0;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 0;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long aa = 1;\n        long ab = 1;\n        long ac = 1;\n   \
    \     long ad = 1;\n        long ae = 1;\n        long af = 1;\n        long ag\
    \ = 1;\n        long ah = 1;\n        long ai = 1;\n        long aj = 1;\n   \
    \     long ak = 1;\n        long al = 1;\n        long am = 1;\n        long an\
    \ = 1;\n        long ao = 1;\n        long ap = 1;\n        long aq = 1;\n   \
    \     long ar = 1;\n        long as = 1;\n        long at = 1;\n        long au\
    \ = 1;\n        long av = 1;\n        long aw = 1;\n        long ax = 1;\n   \
    \     long ay = 1;\n        long az = 1;\n        long aaa = 1;\n        long\
    \ aab = 1;\n        long aac = 1;\n        long aad = 1;\n        long aae = 1;\n\
    \        long aaf = 1;\n        long aag = 1;\n        long aah = 1;\n       \
    \ long aai = 1;\n        long aaj = 1;\n        long aak = 1;\n        long aal\
    \ = 1;\n        long aam = 1;\n        long aan = 1;\n        long aoa = 1;\n\
    \        long aap = 1;\n        long aqa = 1;\n        long aar = 1;\n       \
    \ long aas = 1;\n        long ata = 1;\n        long atb = 1;\n        long atc\
    \ = \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppwprmk1f.cs(95,14): error CS1001: Identifier expected

    /tmp/tmppwprmk1f.cs(95,14): error CS1002: ; expected

    /tmp/tmppwprmk1f.cs(95,14): error CS1525: Invalid expression term ''as''

    /tmp/tmppwprmk1f.cs(95,17): error CS1031: Type expected

    /tmp/tmppwprmk1f.cs(124,19): error CS1525: Invalid expression term ''}''

    /tmp/tmppwprmk1f.cs(124,19): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw181mo3.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        if\
    \ (a == 0)\n            return true;\n        if (a > 180)\n            return\
    \ false;\n        long b = 1;\n        long c = 1;\n        long d = 1;\n    \
    \    long e = 1;\n        long f = 1;\n        long g = 1;\n        long h = 1;\n\
    \        long i = 1;\n        long j = 1;\n        long k = 1;\n        long l\
    \ = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n      \
    \  long p = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n\
    \        long t = 1;\n        long u = 1;\n        long v = 1;\n        long w\
    \ = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n      \
    \  long A = 1;\n        long B = 1;\n        long C = 1;\n        long D = 1;\n\
    \        long E = 1;\n        long F = 1;\n        long G = 1;\n        long H\
    \ = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n      \
    \  long L = 1;\n        long M = 1;\n        long N = 1;\n        long O = 1;\n\
    \        long P = 1;\n        long Q = 1;\n        long R = 1;\n        long S\
    \ = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n      \
    \  long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z = 1;\n\
    \        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n        long\
    \ AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG = 1;\n\
    \        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n        long\
    \ AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN = 1;\n\
    \        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n        long\
    \ AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU = 1;\n\
    \        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n        long\
    \ AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB = 1;\n\
    \        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n        long\
    \ BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI = 1;\n\
    \        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n        long\
    \ BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP = 1;\n\
    \        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n        long\
    \ BT\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0e2_6yx1.cs(128,16): error CS1002: ; expected

    '
  timestamp: 1659823604
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        if\
    \ (a > 180)\n            return false;\n        if (a == 0)\n            return\
    \ true;\n        if (a < 3)\n            return false;\n        if (a % 3 == 0)\n\
    \            return true;\n        if (a % 3 == 1)\n            return false;\n\
    \        if (a % 3 == 2)\n            return true;\n        if (a % 3 == 3)\n\
    \            return false;\n        if (a % 3 == 4)\n            return true;\n\
    \        if (a % 3 == 5)\n            return false;\n        if (a % 3 == 6)\n\
    \            return true;\n        if (a % 3 == 7)\n            return false;\n\
    \        if (a % 3 == 8)\n            return true;\n        if (a % 3 == 9)\n\
    \            return false;\n        if (a % 3 == 10)\n            return true;\n\
    \        if (a % 3 == 11)\n            return false;\n        if (a % 3 == 12)\n\
    \            return true;\n        if (a % 3 == 13)\n            return false;\n\
    \        if (a % 3 == 14)\n            return true;\n        if (a % 3 == 15)\n\
    \            return false;\n        if (a % 3 == 16)\n            return true;\n\
    \        if (a % 3 == 17)\n            return false;\n        if (a % 3 == 18)\n\
    \            return true;\n        if (a % 3 == 19)\n            return false;\n\
    \        if (a % 3 == 20)\n            return true;\n        if (a % 3 == 21)\n\
    \            return false;\n        if (a % 3 == 22)\n            return true;\n\
    \        if (a % 3 == 23)\n            return false;\n        if (a % 3 == 24)\n\
    \            return true;\n        if (a % 3 == 25)\n            return false;\n\
    \        if (a % 3 == 26)\n            return true;\n        if (a % 3 == 27)\n\
    \            return false;\n        if (a % 3 == 28)\n            return true;\n\
    \        if (a % 3 == 29)\n            return false;\n        if (a % 3 == 30)\n\
    \            return true;\n        if (a % 3 == 31)\n            return false;\n\
    \        if (a % 3 == 32)\n            return true;\n        if (a % 3 == 33)\n\
    \            return false;\n        if (a % 3 == 34)\n            return true;\n\
    \        if (a % 3 == 35)\n            return false;\n        if (a % 3 == 36)\n\
    \            return true;\n        if (a % 3 == 37)\n            return false;\n\
    \        if (a % 3 == 38)\n            return true;\n        if (a % 3 == 39)\n\
    \            return false;\n        if (a % 3 == 40)\n            return true;\n\
    \        if (a % 3 == 41)\n            return false;\n        if (a % 3 == 42)\n\
    \            return true;\n        if (a % 3 == 43)\n            return false;\n\
    \        if (a % 3 == 44)\n            return true;\n        if (a % 3 == 45)\n\
    \            return false;\n        if (a % 3 == 46)\n            return true;\n\
    \        if (a % 3 == 47)\n            return false;\n        if (a % 3 == 48)\n\
    \            return true;\n        if (a % 3 == 49)\n            return false;\n\
    \        if (a % 3 == 50)\n\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7zizgxbd.cs(134,25): error CS1525: Invalid expression term ''}''

    /tmp/tmp7zizgxbd.cs(134,25): error CS1002: ; expected

    '
  timestamp: 1659823604
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long ao = a;\n        long ap = a;\n        long aq = a;\n   \
    \     long ar = a;\n        long as = a;\n        long at = a;\n        long au\
    \ = a;\n        long av = a;\n        long aw = a;\n        long ax = a;\n   \
    \     long ay = a;\n        long az = a;\n        long ba = a;\n        long bb\
    \ = a;\n        long bc = a;\n        long bd = a;\n        long be = a;\n   \
    \     long bf = a;\n        long bg = a;\n        long bh = a;\n        long bi\
    \ = a;\n        long bj = a;\n        long bk = a;\n        long bl = a;\n   \
    \     long bm = \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphzpj_79w.cs(95,14): error CS1001: Identifier expected

    /tmp/tmphzpj_79w.cs(95,14): error CS1002: ; expected

    /tmp/tmphzpj_79w.cs(95,14): error CS1525: Invalid expression term ''as''

    /tmp/tmphzpj_79w.cs(95,17): error CS1031: Type expected

    /tmp/tmphzpj_79w.cs(115,18): error CS1525: Invalid expression term ''}''

    /tmp/tmphzpj_79w.cs(115,18): error CS1002: ; expected

    '
  timestamp: 1659823604
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp18cnasok.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp18cnasok.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long cube = n * n * n;\n    \
    \    if (cube == a)\n            return true;\n        else\n            return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47d25712d3ac42d2bd0802621ce4edd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47d25712d3ac42d2bd0802621ce4edd4>:0 \n"
  stdout: ''
  timestamp: 1659823604
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw181mo3.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8_y19229.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long m = n;\n        long r =\
    \ n;\n        long s = n;\n        long t = n;\n        long u = n;\n        long\
    \ v = n;\n        long w = n;\n        long x = n;\n        long y = n;\n    \
    \    long z = n;\n        long aa = n;\n        long bb = n;\n        long cc\
    \ = n;\n        long dd = n;\n        long ee = n;\n        long ff = n;\n   \
    \     long gg = n;\n        long hh = n;\n        long ii = n;\n        long jj\
    \ = n;\n        long kk = n;\n        long ll = n;\n        long mm = n;\n   \
    \     long nn = n;\n        long oo = n;\n        long pp = n;\n        long qq\
    \ = n;\n        long rr = n;\n        long ss = n;\n        long tt = n;\n   \
    \     long uu = n;\n        long vv = n;\n        long ww = n;\n        long xx\
    \ = n;\n        long yy = n;\n        long zz = n;\n        long aaa = n;\n  \
    \      long bbb = n;\n        long ccc = n;\n        long dd = n;\n        long\
    \ eee = n;\n        long fff = n;\n        long ggg = n;\n        long hhh = n;\n\
    \        long iii = n;\n        long jjj = n;\n        long kkk = n;\n       \
    \ long lll = n;\n        long mmm = n;\n        long nnn = n;\n        long ooo\
    \ = n;\n        long ppp = n;\n        long qqq = n;\n        long rr = n;\n \
    \       long ss = n;\n        long tt = n;\n        long uuu = n;\n        long\
    \ vv = n;\n        long ww = n;\n        long xx = n;\n        long yy = n;\n\
    \        long zz = n;\n        long aaa = n;\n        long bbb = n;\n        long\
    \ ccc = n;\n        long dd = n;\n        long eee = n;\n        long fff = n;\n\
    \        long ggg = n;\n        long hhh = n;\n        long iii = n;\n       \
    \ long jjj = n;\n        long kkk = n;\n        long lll = n;\n        long mmm\
    \ = n;\n        long nnn = n;\n        long ooo = n;\n        long ppp = n;\n\
    \        long qqq = n;\n        long rr = n;\n        long ss = n;\n        long\
    \ tt = n;\n        long uuu = n;\n        long vv = n;\n        long ww = n;\n\
    \        long xx = n;\n        long yy = \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcjenowfa.cs(113,18): error CS1525: Invalid expression term ''}''

    /tmp/tmpcjenowfa.cs(113,18): error CS1002: ; expected

    '
  timestamp: 1659823604
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long cube = 1;\n        while\
    \ (n > 1) {\n            n = n / 3;\n            cube = cube * 3;\n        }\n\
    \        if (cube == a) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7eb52f71574a4608add13e1bc7285a50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7eb52f71574a4608add13e1bc7285a50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823604
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long aa = a;\n        long ab = a;\n        long ac = a;\n   \
    \     long ad = a;\n        long ae = a;\n        long af = a;\n        long ag\
    \ = a;\n        long ah = a;\n        long ai = a;\n        long aj = a;\n   \
    \     long ak = a;\n        long al = a;\n        long am = a;\n        long an\
    \ = a;\n        long ao = a;\n        long ap = a;\n        long aq = a;\n   \
    \     long ar = a;\n        long as = a;\n        long at = a;\n        long au\
    \ = a;\n        long av = a;\n        long aw = a;\n        long ax = a;\n   \
    \     long ay = a;\n        long az = a;\n        long ba = a;\n        long bb\
    \ = a;\n        long bc = a;\n        long bd = a;\n        long be = a;\n   \
    \     long bf = a;\n        long bg = a;\n        long bh = a;\n        long bi\
    \ = a;\n        long bj = a;\n        long bk = a;\n        long bl = a;\n   \
    \     long bm = a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7hwbd_kk.cs(95,14): error CS1001: Identifier expected

    /tmp/tmp7hwbd_kk.cs(95,14): error CS1002: ; expected

    /tmp/tmp7hwbd_kk.cs(95,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp7hwbd_kk.cs(95,17): error CS1031: Type expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw181mo3.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long aa = a;\n        long ab = a;\n        long ac = a;\n   \
    \     long ad = a;\n        long ae = a;\n        long af = a;\n        long ag\
    \ = a;\n        long ah = a;\n        long ai = a;\n        long aj = a;\n   \
    \     long ak = a;\n        long al = a;\n        long am = a;\n        long an\
    \ = a;\n        long ao = a;\n        long ap = a;\n        long aq = a;\n   \
    \     long ar = a;\n        long as = a;\n        long at = a;\n        long au\
    \ = a;\n        long av = a;\n        long aw = a;\n        long ax = a;\n   \
    \     long ay = a;\n        long az = a;\n        long ba = a;\n        long bb\
    \ = a;\n        long bc = a;\n        long bd = a;\n        long be = a;\n   \
    \     long bf = a;\n        long bg = a;\n        long bh = a;\n        long bi\
    \ = a;\n        long bj = a;\n        long bk = a;\n        long bl = a;\n   \
    \     long bm = a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7hwbd_kk.cs(95,14): error CS1001: Identifier expected

    /tmp/tmp7hwbd_kk.cs(95,14): error CS1002: ; expected

    /tmp/tmp7hwbd_kk.cs(95,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp7hwbd_kk.cs(95,17): error CS1031: Type expected

    '
  timestamp: 1659823603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long d = 1;\n        while (d\
    \ <= n) {\n            if (n % d == 0) {\n                return false;\n    \
    \        }\n            d *= 3;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1136077477642f6b90b4d46db4c95a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1136077477642f6b90b4d46db4c95a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823604
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     if (cube == a)\n            return true;\n        else\n            return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a9d67a7fde74884ab5f4d86a12a10a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a9d67a7fde74884ab5f4d86a12a10a2>:0 \n"
  stdout: ''
  timestamp: 1659823604
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp18cnasok.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     if (cube == a)\n            return true;\n        else\n            return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a9d67a7fde74884ab5f4d86a12a10a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a9d67a7fde74884ab5f4d86a12a10a2>:0 \n"
  stdout: ''
  timestamp: 1659823604
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8_y19229.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp18cnasok.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long aa = a;\n        long bb = a;\n        long cc = a;\n   \
    \     long dd = a;\n        long ee = a;\n        long ff = a;\n        long gg\
    \ = a;\n        long hh = a;\n        long ii = a;\n        long jj = a;\n   \
    \     long kk = a;\n        long ll = a;\n        long mm = a;\n        long nn\
    \ = a;\n        long oo = a;\n        long pp = a;\n        long qq = a;\n   \
    \     long rr = a;\n        long ss = a;\n        long tt = a;\n        long uu\
    \ = a;\n        long vv = a;\n        long ww = a;\n        long xx = a;\n   \
    \     long yy = a;\n        long zz = a;\n        long aaa = a;\n        long\
    \ bbb = a;\n        long ccc = a;\n        long ddd = a;\n        long eee = a;\n\
    \        long fff = a;\n        long ggg = a;\n        long hhh = a;\n       \
    \ long iii = a;\n        long jjj = a;\n        long kkk = a;\n        long lll\
    \ = a;\n        long mmm = a;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2lixjdwb.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw181mo3.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long aa = a;\n        long bb = a;\n        long cc = a;\n        long\
    \ dd = a;\n        long ee = a;\n        long ff = a;\n        long gg = a;\n\
    \        long hh = a;\n        long ii = a;\n        long jj = a;\n        long\
    \ kk = a;\n        long ll = a;\n        long mm = a;\n        long nn = a;\n\
    \        long oo = a;\n        long pp = a;\n        long qq = a;\n        long\
    \ rr = a;\n        long ss = a;\n        long tt = a;\n        long uu = a;\n\
    \        long vv = a;\n        long ww = a;\n        long xx = a;\n        long\
    \ yy = a;\n        long zz = a;\n        long aaa = a;\n        long bbb = a;\n\
    \        long ccc = a;\n        long ddd = a;\n        long eee = a;\n       \
    \ long fff = a;\n        long ggg = a;\n        long hhh = a;\n        long iii\
    \ = a;\n        long jjj = a;\n        long kkk = a;\n        long lll = a;\n\
    \        long mmm = a;\n        long nnn = a;\n        long ooo = a;\n       \
    \ long ppp = a;\n        long qqq = a;\n        long rrr = a;\n        long sss\
    \ = a;\n        long tt = a;\n        long uuu = a;\n        long vv = a;\n  \
    \      long ww = a;\n        long xx = a;\n        long yy = a;\n        long\
    \ zz = a;\n        long aaa = a;\n        long bbb = a;\n        long ccc = a;\n\
    \        long ddd = a;\n        long eee = a;\n        long fff = a;\n       \
    \ long ggg = a;\n        long hhh = a;\n        long iii = a;\n        long jjj\
    \ = a;\n        long kkk = a;\n        long lll = a;\n        long mm\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz49_2h2e.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823604
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long square = n * n;\n      \
    \  long cube = n * n * n;\n        long cubeSquare = n * n * n * n;\n        long\
    \ cubeCube = n * n * n * n * n;\n        long cubeCubeSquare = n * n * n * n *\
    \ n * n;\n        long cubeCubeCube = n * n * n * n * n * n * n;\n        long\
    \ cubeCubeCubeSquare = n * n * n * n * n * n * n * n;\n        long cubeCubeCubeCube\
    \ = n * n * n * n * n * n * n * n * n;\n        long cubeCubeCubeCubeSquare =\
    \ n * n * n * n * n * n * n * n * n * n;\n        long cubeCubeCubeCubeCube =\
    \ n * n * n * n * n * n * n * n * n * n;\n        long cubeCubeCubeCubeCubeSquare\
    \ = n * n * n * n * n * n * n * n * n * n;\n        long cubeCubeCubeCubeCubeCube\
    \ = n * n * n * n * n * n * n * n * n * n * n;\n        long cubeCubeCubeCubeCubeSquare\
    \ = n * n * n * n * n * n * n * n * n * n * n * n;\n        long cubeCubeCubeCubeCubeCube\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cubeCubeCubeCubeCubeCubeSquare\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cubeCubeCubeCubeCubeCube\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cubeCubeCubeCubeCubeCubeSquare\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cubeCubeCubeCubeCubeCubeCube\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cubeCubeCubeCubeCubeCubeCubeSquare\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long\
    \ cubeCubeCubeCubeCubeCubeCube = n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n;\n        long cubeCubeCubeCubeCubeCubeCubeSquare = n * n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n;\n        long cubeCubeCubeCubeCubeCubeCubeCube\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long\
    \ cubeCubeCubeCubeCubeCubeCubeSquare = n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n;\n        long cubeCubeCubeCubeCubeCubeCube = n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cubeCubeCubeCubeCubeCubeCubeSquare\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n * \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpex3me3mb.cs(51,102): error CS1525: Invalid expression term ''}''

    /tmp/tmpex3me3mb.cs(51,102): error CS1002: ; expected

    '
  timestamp: 1659823604
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw181mo3.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        if (cube == a)\n   \
    \         return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp51mrvk3d.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        if (cube == a)\n   \
    \         return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp51mrvk3d.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw181mo3.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659823603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \n"
  stdout: ''
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyevh8uie.cs(69,14): error CS1001: Identifier expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1002: ; expected

    /tmp/tmpyevh8uie.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpyevh8uie.cs(69,17): error CS1031: Type expected

    /tmp/tmpyevh8uie.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp18cnasok.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp18cnasok.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmp18cnasok.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3631823d91b84619a0d7e713a14f16df>:0 \n"
  stdout: ''
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        long\
    \ b = 1;\n        long c = 1;\n        long d = 1;\n        long e = 1;\n    \
    \    long f = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n\
    \        long j = 1;\n        long k = 1;\n        long l = 1;\n        long m\
    \ = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n      \
    \  long q = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n\
    \        long u = 1;\n        long v = 1;\n        long w = 1;\n        long x\
    \ = 1;\n        long y = 1;\n        long z = 1;\n        long aa = 1;\n     \
    \   long ab = 1;\n        long ac = 1;\n        long ad = 1;\n        long ae\
    \ = 1;\n        long af = 1;\n        long ag = 1;\n        long ah = 1;\n   \
    \     long ai = 1;\n        long aj = 1;\n        long ak = 1;\n        long al\
    \ = 1;\n        long am = 1;\n        long an = 1;\n        long ao = 1;\n   \
    \     long ap = 1;\n        long aq = 1;\n        long ar = 1;\n        long as\
    \ = 1;\n        long at = 1;\n        long au = 1;\n        long av = 1;\n   \
    \     long aw = 1;\n        long ax = 1;\n        long ay = 1;\n        long az\
    \ = 1;\n        long ba = 1;\n        long bb = 1;\n        long bc = 1;\n   \
    \     long bd = 1;\n        long be = 1;\n        long bf = 1;\n        long bg\
    \ = 1;\n        long bh = 1;\n        long bi = 1;\n        long bj = 1;\n   \
    \     long bk = 1;\n        long bl = 1;\n        long bm = 1;\n        long bn\
    \ = 1;\n        long bo = 1;\n        long bp = 1;\n        long bq = 1;\n   \
    \     long br = 1;\n        long bs = 1;\n        long bt = 1;\n        long bu\
    \ = 1;\n        long bv = 1;\n        long bw = 1;\n        long bx = 1;\n   \
    \     long by = 1;\n        long bz = 1;\n        long ca = 1;\n        long cb\
    \ = 1;\n        long cc = 1;\n        long cd = 1;\n        long ce = 1;\n   \
    \     long cf = 1;\n        long cg = 1;\n        long ch = 1;\n        long ci\
    \ = 1;\n        long cj = 1;\n        long ck = 1;\n        long cl = 1;\n   \
    \     long cm = 1;\n        long cn = 1;\n        long co = 1;\n        long cp\
    \ = 1;\n        long cq = 1;\n        long cr = 1;\n        long cs = 1;\n   \
    \     long ct = 1;\n        long cu = 1;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw2cxzgju.cs(71,14): error CS1001: Identifier expected

    /tmp/tmpw2cxzgju.cs(71,14): error CS1002: ; expected

    /tmp/tmpw2cxzgju.cs(71,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpw2cxzgju.cs(71,17): error CS1031: Type expected

    '
  timestamp: 1659823604
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long a = a;\n        long b = a;\n        long c = a;\n        long d\
    \ = a;\n        long e = a;\n        long f = a;\n        long g = a;\n      \
    \  long h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n\
    \        long l = a;\n        long m = a;\n        long n = a;\n        long o\
    \ = a;\n        long p = a;\n        long q = a;\n        long r = a;\n      \
    \  long s = a;\n        long t = a;\n        long u = a;\n        long v = a;\n\
    \        long w = a;\n        long x = a;\n        long y = a;\n        long z\
    \ = a;\n        long a = a;\n        long b = a;\n        long c = a;\n      \
    \  long d = a;\n        long e = a;\n        long f = a;\n        long g = a;\n\
    \        long h = a;\n        long i = a;\n        long j = a;\n        long k\
    \ = a;\n        long l = a;\n        long m = a;\n        long n = a;\n      \
    \  long o = a;\n        long p = a;\n        long q = a;\n        long r = a;\n\
    \        long s = a;\n        long t = a;\n        long u = a;\n        long v\
    \ = a;\n        long w = a;\n        long x = a;\n        long y = a;\n      \
    \  long z = a;\n        long a = a;\n        long b = a;\n        long c = a;\n\
    \        long d = a;\n        long e = a;\n        long f = a;\n        long g\
    \ = a;\n        long h = a;\n        long i = a;\n        long j = a;\n      \
    \  long k = a;\n        long l = a;\n        long m = a;\n        long n = a;\n\
    \        long o = a;\n        long p = a;\n        long q = a;\n        long r\
    \ = a;\n        long s = a;\n        long t = a;\n        long u = a;\n      \
    \  long v = a;\n        long w = a;\n        long x = a;\n        long y = \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl4_8yasu.cs(127,17): error CS1525: Invalid expression term ''}''

    /tmp/tmpl4_8yasu.cs(127,17): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long a = a;\n        long b = a;\n        long c = a;\n      \
    \  long d = a;\n        long e = a;\n        long f = a;\n        long g = a;\n\
    \        long h = a;\n        long i = a;\n        long j = a;\n        long k\
    \ = a;\n        long l = a;\n        long m = a;\n        long n = a;\n      \
    \  long o = a;\n        long p = a;\n        long q = a;\n        long r = a;\n\
    \        long s = a;\n        long t = a;\n        long u = a;\n        long v\
    \ = a;\n        long w = a;\n        long x = a;\n        long y = a;\n      \
    \  long z = a;\n        long A = a;\n        long B = a;\n        long C = a;\n\
    \        long D = a;\n        long E = a;\n        long F = a;\n        long G\
    \ = a;\n        long H = a;\n        long I = a;\n        long J = a;\n      \
    \  long K = a;\n        long L = a;\n        long M = a;\n        long N = a;\n\
    \        long O = a;\n        long P = a;\n        long Q = a;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7k4farqw.cs(26,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7k4farqw.cs(27,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7k4farqw.cs(28,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7k4farqw.cs(29,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7k4farqw.cs(30,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7k4farqw.cs(31,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7k4farqw.cs(32,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7k4farqw.cs(33,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7k4farqw.cs(34,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7k4farqw.cs(35,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7k4farqw.cs(36,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7k4farqw.cs(37,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7k4farqw.cs(38,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7k4farqw.cs(39,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7k4farqw.cs(40,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7k4farqw.cs(41,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7k4farqw.cs(42,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7k4farqw.cs(43,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7k4farqw.cs(44,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7k4farqw.cs(45,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp7k4farqw.cs(46,18): error CS0841:'
  timestamp: 1659823604
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long a = a;\n        long b = a;\n        long c = a;\n        long d\
    \ = a;\n        long e = a;\n        long f = a;\n        long g = a;\n      \
    \  long h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n\
    \        long l = a;\n        long m = a;\n        long n = a;\n        long o\
    \ = a;\n        long p = a;\n        long q = a;\n        long r = a;\n      \
    \  long s = a;\n        long t = a;\n        long u = a;\n        long v = a;\n\
    \        long w = a;\n        long x = a;\n        long y = a;\n        long z\
    \ = a;\n        long a = a;\n        long b = a;\n        long c = a;\n      \
    \  long d = a;\n        long e = a;\n        long f = a;\n        long g = a;\n\
    \        long h = a;\n        long i = a;\n        long j = a;\n        long k\
    \ = a;\n        long l = a;\n        long m = a;\n        long n = a;\n      \
    \  long o = a;\n        long p = a;\n        long q = a;\n        long r = a;\n\
    \        long s = a;\n        long t = a;\n        long u = a;\n        long v\
    \ = a;\n        long w = a;\n        long x = a;\n        long y = a;\n      \
    \  long z = a;\n        long a = a;\n        long b = a;\n        long c = a;\n\
    \        long d = a;\n        long e = a;\n        long f = a;\n        long g\
    \ = a;\n        long h = a;\n        long i = a;\n        long j = a;\n      \
    \  long k = a;\n        long l = a;\n        long m = a;\n        long n = a;\n\
    \        long o = a;\n        long p = a;\n        long q = a;\n        long r\
    \ = a;\n        long s = a;\n        long t = a;\n        long u = a;\n      \
    \  long v = a;\n        long w = a;\n        long x = a;\n        long y = \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl4_8yasu.cs(127,17): error CS1525: Invalid expression term ''}''

    /tmp/tmpl4_8yasu.cs(127,17): error CS1002: ; expected

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8_y19229.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp8_y19229.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        if\
    \ (a == 0)\n            return true;\n        if (a > 180)\n            return\
    \ false;\n        long b = a;\n        long c = 1;\n        long d = 1;\n    \
    \    long e = 1;\n        long f = 1;\n        long g = 1;\n        long h = 1;\n\
    \        long i = 1;\n        long j = 1;\n        long k = 1;\n        long l\
    \ = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n      \
    \  long p = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n\
    \        long t = 1;\n        long u = 1;\n        long v = 1;\n        long w\
    \ = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n      \
    \  long A = 1;\n        long B = 1;\n        long C = 1;\n        long D = 1;\n\
    \        long E = 1;\n        long F = 1;\n        long G = 1;\n        long H\
    \ = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n      \
    \  long L = 1;\n        long M = 1;\n        long N = 1;\n        long O = 1;\n\
    \        long P = 1;\n        long Q = 1;\n        long R = 1;\n        long S\
    \ = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n      \
    \  long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z = 1;\n\
    \        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n        long\
    \ AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG = 1;\n\
    \        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n        long\
    \ AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN = 1;\n\
    \        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n        long\
    \ AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU = 1;\n\
    \        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n        long\
    \ AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB = 1;\n\
    \        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n        long\
    \ BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI = 1;\n\
    \        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n        long\
    \ BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP = 1;\n\
    \        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n        long\
    \ BT\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoy2k1vkg.cs(128,16): error CS1002: ; expected

    '
  timestamp: 1659823604
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ccpx3ab.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659823603
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw181mo3.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659823603
