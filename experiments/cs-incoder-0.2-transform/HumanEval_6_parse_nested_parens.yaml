name: HumanEval_6_parse_nested_parens
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Input to this function is a string represented multiple groups\
  \ for nested parentheses separated by spaces.\n    // For each of the group, output\
  \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two\
  \ levels of nesting while ((())) has three.\n    // >>> ParseNestedParens((\"(()())\
  \ ((())) () ((())()())\"))\n    // (new List<long>(new long[]{(long)2L, (long)3L,\
  \ (long)1L, (long)3L}))\n    public static List<long> ParseNestedParens(string paren_string)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
  (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
  \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
  \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
  \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
  \ long[]{(long)4L}))));\n    }\n\n}\n"
completions: ["        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool inParen =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                inParen = true;\n                stack.Add(level);\n    \
    \            level++;\n            } else if (c == ')') {\n                inParen\
    \ = false;\n                level--;\n                if (level == 0)\n      \
    \              levels.Add(stack.Last());\n            } else if (c == ' ') {\n\
    \                if (inParen)\n                    level--;\n            }\n \
    \       }\n        return levels;", "        List<long> max_levels = new List<long>();\n\
    \        Stack<long> levels = new Stack<long>();\n        bool in_paren = false;\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             in_paren = true;\n                levels.Push(1);\n            }\
    \ else if (c == ')') {\n                in_paren = false;\n                long\
    \ level = levels.Pop();\n                if (level > max_levels.Last()) {\n  \
    \                  max_levels.Add(level);\n                }\n            } else\
    \ if (in_paren) {\n                levels.Push(level + 1);\n            }\n  \
    \      }\n        return max_levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     bool inParen = false;\n        foreach (char c in paren_string) {\n    \
    \        if (c == '(') {\n                inParen = true;\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  inParen = false;\n                level -= stack.Pop();\n            } else\
    \ if (inParen) {\n                level += 1;\n            }\n        }\n    \
    \    levels.Add(level);\n        return levels;", "        List<long> max_levels\
    \ = new List<long>();\n        Stack<long> levels = new Stack<long>();\n     \
    \   long level = 0;\n        bool inParen = false;\n        bool inBrace = false;\n\
    \        bool inBracket = false;\n        bool inBraceOrBracket = false;\n   \
    \     bool inBraceOrBracketOrParen = false;\n        bool inBraceOrBracketOrParenOrBrace\
    \ = false;\n        bool inBraceOrBracketOrParenOrBraceOrBracket = false;\n  \
    \      bool inBraceOrBracketOrParenOrBraceOrBracketOrParen = false;\n        bool\
    \ inBraceOrBracketOrParenOrBraceOrBracketOrParenOrBrace = false;\n        bool\
    \ inBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracket = false;\n  \
    \      bool inBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracketOrParen\
    \ = false;\n        bool inBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracketOrParenOrBrace\
    \ = false;\n        bool inBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracket\
    \ = false;\n        bool inBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracketOrParen\
    \ = false;\n        bool inBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracketOrParenOrBrace\
    \ = false;\n        bool inBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracket\
    \ = false;\n        bool inBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracketOrParen\
    \ = false;\n        bool inBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracketOrParen\
    \ = false;\n        bool inBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracketOrParenOrBraceOrBracketOrParen",
  "        List<long> result = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        StringBuilder sb = new StringBuilder();\n        bool\
    \ inside_group = false;\n        foreach (char c in paren_string) {\n        \
    \    if (c == '(') {\n                inside_group = true;\n                sb.Append(c);\n\
    \            }\n            else if (c == ')') {\n                inside_group\
    \ = false;\n                long level = 0;\n                while (!stack.IsEmpty)\
    \ {\n                    level++;\n                    stack.Pop();\n        \
    \        }\n                result.Add(level);\n                sb.Append(c);\n\
    \            }\n            else if (inside_group) {\n                sb.Append(c);\n\
    \            }\n        }\n        result.Add(sb.Length);\n        return result;",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        StringBuilder sb = new StringBuilder();\n        bool\
    \ in_paren = false;\n        bool in_group = false;\n        bool in_group_open\
    \ = false;\n        bool in_group_close = false;\n        bool in_group_open2\
    \ = false;\n        bool in_group_close2 = false;\n        bool in_group_open3\
    \ = false;\n        bool in_group_close3 = false;\n        bool in_group_open4\
    \ = false;\n        bool in_group_close4 = false;\n        bool in_group_open5\
    \ = false;\n        bool in_group_close5 = false;\n        bool in_group_open6\
    \ = false;\n        bool in_group_close6 = false;\n        bool in_group_open7\
    \ = false;\n        bool in_group_close7 = false;\n        bool in_group_open8\
    \ = false;\n        bool in_group_close8 = false;\n        bool in_group_open9\
    \ = false;\n        bool in_group_close9 = false;\n        bool in_group_open10\
    \ = false;\n        bool in_group_close10 = false;\n        bool in_group_open11\
    \ = false;\n        bool in_group_close11 = false;\n        bool in_group_open12\
    \ = false;\n        bool in_group_close12 = false;\n        bool in_group_open13\
    \ = false;\n        bool in_group_close13 = false;\n        bool in_group_open14\
    \ = false;\n        bool in_group_close14 = false;\n        bool in_group_open15\
    \ = false;\n        bool in_group_close15 = false;\n        bool in_group_open16\
    \ = false;\n        bool in_group_close16 = false;\n        bool in_group_open17\
    \ = false;\n        bool in_group_close17 = false;\n        bool in_group_open18\
    \ = false;\n        bool in_group_close18 = false;\n        bool in_group_open19\
    \ = false;\n        bool in_group_close19 = false;\n        bool in_group_open20\
    \ = false;\n        bool in_group_close20 = false;\n        bool in_group_open21\
    \ = false;\n        bool in_group_close21 = false;\n        bool in_group_open22\
    \ = false;\n        bool in_group_close22 = false;\n        bool in_group_open23\
    \ = false;\n        bool in_group_close23 = false;\n        bool in_group_open24\
    \ = false;\n        bool in_group_close24 = false;\n        bool in_group_open25\
    \ = false;\n        bool in_group_close25 = false;\n        bool in_group_open26\
    \ = false;\n        bool in_group_close26 = false;\n        bool in_group_open27\
    \ = false;\n        bool in_group_close27 = false;\n        bool in_group_open28\
    \ = false;\n        bool in_group_close28 = false;\n        bool in_group_open29\
    \ = false;\n        bool in_group_close29 = false;\n        bool in_group_open",
  "        List<long> max_levels = new List<long>();\n        Stack<long> levels =\
    \ new Stack<long>();\n        bool in_paren = false;\n        bool in_group =\
    \ false;\n        bool in_group2 = false;\n        bool in_group3 = false;\n \
    \       bool in_group4 = false;\n        bool in_group5 = false;\n        bool\
    \ in_group6 = false;\n        bool in_group7 = false;\n        bool in_group8\
    \ = false;\n        bool in_group9 = false;\n        bool in_group10 = false;\n\
    \        bool in_group11 = false;\n        bool in_group12 = false;\n        bool\
    \ in_group13 = false;\n        bool in_group14 = false;\n        bool in_group15\
    \ = false;\n        bool in_group16 = false;\n        bool in_group17 = false;\n\
    \        bool in_group18 = false;\n        bool in_group19 = false;\n        bool\
    \ in_group20 = false;\n        bool in_group21 = false;\n        bool in_group22\
    \ = false;\n        bool in_group23 = false;\n        bool in_group24 = false;\n\
    \        bool in_group25 = false;\n        bool in_group26 = false;\n        bool\
    \ in_group27 = false;\n        bool in_group28 = false;\n        bool in_group29\
    \ = false;\n        bool in_group30 = false;\n        bool in_group31 = false;\n\
    \        bool in_group32 = false;\n        bool in_group33 = false;\n        bool\
    \ in_group34 = false;\n        bool in_group35 = false;\n        bool in_group36\
    \ = false;\n        bool in_group37 = false;\n        bool in_group38 = false;\n\
    \        bool in_group39 = false;\n        bool in_group40 = false;\n        bool\
    \ in_group41 = false;\n        bool in_group42 = false;\n        bool in_group43\
    \ = false;\n        bool in_group44 = false;\n        bool in_group45 = false;\n\
    \        bool in_group46 = false;\n        bool in_group47 = false;\n        bool\
    \ in_group48 = false;\n        bool in_group49 = false;\n        bool in_group50\
    \ = false;\n        bool in_group51 = false;\n        bool in_group52 = false;\n\
    \        bool in_group53 = false;\n        bool in_group54 = false;\n        bool\
    \ in_group55 = false;\n        bool in_group56 = false;\n        bool in_group57\
    \ = false;\n        bool in_group58 = false;\n        bool in_group59 = false;\n\
    \        bool in_group60 = false;\n        bool in_group61 = false;\n        bool\
    \ in_group62 = false;\n        bool in_group63 = false;\n        bool in_group64\
    \ = false;\n        bool in_group65 = false;\n        bool in_group66 = false;\n\
    \        bool in_group67 = false;\n        bool ", "        List<long> result\
    \ = new List<long>();\n        Stack<long> stack = new Stack<long>();\n      \
    \  foreach (char c in paren_string) {\n            if (c == '(') {\n         \
    \       stack.Add(0);\n            } else if (c == ')') {\n                long\
    \ max_level = stack.Peek();\n                if (max_level > result.Count) {\n\
    \                    result.AddRange(Enumerable.Repeat(max_level, max_level));\n\
    \                }\n                stack.Pop();\n            } else {\n     \
    \           long level = stack.Peek();\n                stack.Pop();\n       \
    \         result.Add(level + 1);\n            }\n        }\n        return result;",
  "        // Initialize a stack to store all levels of nesting.\n        Stack<long>\
    \ levels = new Stack<long>();\n        // Initialize a dictionary to store all\
    \ levels of nesting indexed by their depth.\n        Dictionary<long, long> level_index\
    \ = new Dictionary<long, long>();\n        // Initialize a dictionary to store\
    \ all levels of nesting indexed by their depth.\n        Dictionary<long, long>\
    \ level_index_reverse = new Dictionary<long, long>();\n        // Initialize a\
    \ dictionary to store all levels of nesting indexed by their depth.\n        Dictionary<long,\
    \ long> level_index_reverse2 = new Dictionary<long, long>();\n        // Initialize\
    \ a dictionary to store all levels of nesting indexed by their depth.\n      \
    \  Dictionary<long, long> level_index_reverse3 = new Dictionary<long, long>();\n\
    \        // Initialize a dictionary to store all levels of nesting indexed by\
    \ their depth.\n        Dictionary<long, long> level_index_reverse4 = new Dictionary<long,\
    \ long>();\n        // Initialize a dictionary to store all levels of nesting\
    \ indexed by their depth.\n        Dictionary<long, long> level_index_reverse5\
    \ = new Dictionary<long, long>();\n        // Initialize a dictionary to store\
    \ all levels of nesting indexed by their depth.\n        Dictionary<long, long>\
    \ level_index_reverse6 = new Dictionary<long, long>();\n        // Initialize\
    \ a dictionary to store all levels of nesting indexed by their depth.\n      \
    \  Dictionary<long, long> level_index_reverse7 = new Dictionary<long, long>();\n\
    \        // Initialize a dictionary to store all levels of nesting indexed by\
    \ their depth.\n        Dictionary<long, long> level_index_reverse8 = new Dictionary<long,\
    \ long>();\n        // Initialize a dictionary to store all levels of nesting\
    \ indexed by their depth.\n        Dictionary<long, long> level_index_reverse9\
    \ = new Dictionary<long, long>();\n        // Initialize a dictionary to store\
    \ all levels of nesting indexed by their depth.\n        Dictionary<long, long>\
    \ level_index_reverse10 = new Dictionary<long, long>();\n        // Initialize\
    \ a dictionary to store all levels of nesting indexed by their depth.\n      \
    \  Dictionary<long, long> level_index_reverse11 = new Dictionary<long, long>();\n\
    \        // Initialize a dictionary to store all levels of nesting indexed by\
    \ their depth.\n        Dictionary<long, long> level_index_reverse12 = new Dictionary<long,\
    \ long>();\n        // Initialize a dictionary to store all levels of nesting\
    \ indexed by their depth.\n        Dictionary<long, long> level_index_reverse13\
    \ = new Dictionary<long, long>();\n        // Initialize a dictionary to store\
    \ all levels of nesting indexed by their depth", "        List<long> result =\
    \ new List<long>();\n        Stack<long> stack = new Stack<long>();\n        StringBuilder\
    \ sb = new StringBuilder();\n        bool in_paren = false;\n        bool in_brace\
    \ = false;\n        bool in_brace2 = false;\n        bool in_brace3 = false;\n\
    \        bool in_brace4 = false;\n        bool in_brace5 = false;\n        bool\
    \ in_brace6 = false;\n        bool in_brace7 = false;\n        bool in_brace8\
    \ = false;\n        bool in_brace9 = false;\n        bool in_brace10 = false;\n\
    \        bool in_brace11 = false;\n        bool in_brace12 = false;\n        bool\
    \ in_brace13 = false;\n        bool in_brace14 = false;\n        bool in_brace15\
    \ = false;\n        bool in_brace16 = false;\n        bool in_brace17 = false;\n\
    \        bool in_brace18 = false;\n        bool in_brace19 = false;\n        bool\
    \ in_brace20 = false;\n        bool in_brace21 = false;\n        bool in_brace22\
    \ = false;\n        bool in_brace23 = false;\n        bool in_brace24 = false;\n\
    \        bool in_brace25 = false;\n        bool in_brace26 = false;\n        bool\
    \ in_brace27 = false;\n        bool in_brace28 = false;\n        bool in_brace29\
    \ = false;\n        bool in_brace30 = false;\n        bool in_brace31 = false;\n\
    \        bool in_brace32 = false;\n        bool in_brace33 = false;\n        bool\
    \ in_brace34 = false;\n        bool in_brace35 = false;\n        bool in_brace36\
    \ = false;\n        bool in_brace37 = false;\n        bool in_brace38 = false;\n\
    \        bool in_brace39 = false;\n        bool in_brace40 = false;\n        bool\
    \ in_brace41 = false;\n        bool in_brace42 = false;\n        bool in_brace43\
    \ = false;\n        bool in_brace44 = false;\n        bool in_brace45 = false;\n\
    \        bool in_brace46 = false;\n        bool in_brace47 = false;\n        bool\
    \ in_brace48 = false;\n        bool in_brace49 = false;\n        bool in_brace50\
    \ = false;\n        bool in_brace51 = false;\n        bool in_brace52 = false;\n\
    \        bool in_brace53 = false;\n        bool in_brace54 = false;\n        bool\
    \ in_brace55 = false;\n        bool in_brace56 = false;\n        bool in_brace57\
    \ = false;\n        bool in_brace58 = false;\n        bool in_brace59 = false;\n\
    \        bool in_brace60 = false;\n        bool in_brace61 = false;\n        bool\
    \ in_brace62 = false;\n        bool in_brace63 = false;\n        bool in_brace64\
    \ = false;\n        bool in_brace65 = false;\n        bool in_brace66 = false;\n\
    \        ", "        List<long> max_levels = new List<long>();\n        Stack<long>\
    \ levels = new Stack<long>();\n        bool in_paren = false;\n        foreach\
    \ (char c in paren_string) {\n            if (c == '(') {\n                in_paren\
    \ = true;\n                levels.Push(1);\n            } else if (c == ')') {\n\
    \                in_paren = false;\n                long level = levels.Pop();\n\
    \                if (level > max_levels.Last()) {\n                    max_levels.Add(level);\n\
    \                }\n            } else if (in_paren) {\n                levels.Push(level\
    \ + 1);\n            }\n        }\n        return max_levels;", "        List<long>\
    \ result = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0)\n                    result.Add(stack.Pop());\n           \
    \ }\n        }\n        return result;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> levels_stack = new Stack<long>();\n        string current_level\
    \ = \"\";\n        bool in_paren = false;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                if (in_paren) {\n          \
    \          levels_stack.Push(current_level);\n                    in_paren = false;\n\
    \                }\n                else {\n                    in_paren = true;\n\
    \                }\n            }\n            else if (c == ')') {\n        \
    \        if (in_paren) {\n                    levels_stack.Pop();\n          \
    \          in_paren = false;\n                }\n                else {\n    \
    \                in_paren = true;\n                }\n            }\n        \
    \    else if (in_paren) {\n                current_level += c;\n            }\n\
    \            else {\n                levels_stack.Push(current_level);\n     \
    \           current_level = \"\";\n            }\n        }\n        if (levels_stack.Count\
    \ > 0) {\n            levels_stack.Pop();\n        }\n        levels.AddRange(levels_stack);\n\
    \        return levels;", "        List<long> levels = new List<long>();\n   \
    \     Stack<long> stack = new Stack<long>();\n        bool in_paren = false;\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                in_paren = true;\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                in_paren = false;\n     \
    \           level = (long)Math.Max(stack.Pop(), level);\n            } else if\
    \ (in_paren) {\n                level++;\n            }\n            levels.Add(level);\n\
    \        }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Push(1);\n           \
    \ } else if (c == ')') {\n                long level = stack.Pop();\n        \
    \        while (level > 0) {\n                    levels.Add(level);\n       \
    \             level--;\n                }\n            }\n        }\n        return\
    \ levels;", "        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        foreach (char c in paren_string) {\n   \
    \         if (c == '(') {\n                stack.Add(0);\n            } else if\
    \ (c == ')') {\n                long level = stack.Pop();\n                if\
    \ (level > result.Count) {\n                    result.AddRange(Enumerable.Range(0,\
    \ level).Select(i => 0L));\n                }\n                result.Add(level);\n\
    \            }\n        }\n        return result;", "        List<long> levels\
    \ = new List<long>();\n        Stack<long> stack = new Stack<long>();\n      \
    \  StringBuilder sb = new StringBuilder();\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(0);\n            }\
    \ else if (c == ')') {\n                long level = stack.Pop();\n          \
    \      while (level > 0) {\n                    levels.Add(level);\n         \
    \           level--;\n                }\n            } else if (c == '(') {\n\
    \                stack.Add(1);\n            } else if (c == ')') {\n         \
    \       long level = stack.Pop();\n                while (level > 0) {\n     \
    \               levels.Add(level);\n                    level--;\n           \
    \     }\n            } else if (c == '[') {\n                stack.Add(2);\n \
    \           } else if (c == ']') {\n                long level = stack.Pop();\n\
    \                while (level > 0) {\n                    levels.Add(level);\n\
    \                    level--;\n                }\n            } else if (c ==\
    \ '{') {\n                stack.Add(3);\n            } else if (c == '}') {\n\
    \                long level = stack.Pop();\n                while (level > 0)\
    \ {\n                    levels.Add(level);\n                    level--;\n  \
    \              }\n            }\n            sb.Append(c);\n        }\n      \
    \  long level = stack.Pop();\n        while (level > 0) {\n            levels.Add(level);\n\
    \            level--;\n        }\n        return levels;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        bool in_paren = false;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                in_paren\
    \ = true;\n                stack.Add(level);\n            } else if (c == ')')\
    \ {\n                in_paren = false;\n                level = (long)Math.Max(stack.Pop(),\
    \ level);\n            } else if (c == ' ') {\n                level++;\n    \
    \        } else if (c == '(') {\n                level++;\n            } else\
    \ if (c == ')') {\n                level--;\n            }\n        }\n      \
    \  levels.Add(level);\n        return levels;", "        List<long> levels = new\
    \ List<long>();\n        Stack<long> stack = new Stack<long>();\n        StringBuilder\
    \ sb = new StringBuilder();\n        bool in_paren = false;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                in_paren\
    \ = true;\n                stack.Add(0);\n            }\n            if (c ==\
    \ ')') {\n                in_paren = false;\n                long level = stack.Pop();\n\
    \                while (level > 0) {\n                    level--;\n         \
    \           stack.Push(level);\n                }\n            }\n           \
    \ if (in_paren) {\n                sb.Append(c);\n            }\n        }\n \
    \       string s = sb.ToString();\n        char[] chars = s.ToCharArray();\n \
    \       List<long> result = new List<long>();\n        foreach (char c in chars)\
    \ {\n            if (c == '(') {\n                result.Add(0);\n           \
    \ }\n            if (c == ')') {\n                long level = stack.Pop();\n\
    \                while (level > 0) {\n                    level--;\n         \
    \           stack.Push(level);\n                }\n            }\n           \
    \ result.Add(result.Last() + 1);\n        }\n        return result;", "      \
    \  List<long> max_levels = new List<long>();\n        Stack<long> levels = new\
    \ Stack<long>();\n        bool in_paren = false;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                in_paren = true;\n         \
    \       levels.Push(1);\n            } else if (c == ')') {\n                in_paren\
    \ = false;\n                long level = levels.Pop();\n                if (level\
    \ > max_levels.Last()) {\n                    max_levels.Add(level);\n       \
    \         }\n            } else if (in_paren) {\n                levels.Push(levels.Pop()\
    \ + 1);\n            }\n        }\n        return max_levels;"]
stop_tokens:
- "\n    }\n"
