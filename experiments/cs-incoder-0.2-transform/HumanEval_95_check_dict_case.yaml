name: HumanEval_95_check_dict_case
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a dictionary, return True if all keys are strings in lower\
  \ \n    // case or all keys are strings in upper case, else return False.\n    //\
  \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
  \    // >>> CheckDictCase((new Dictionary<string,string>(){{\"a\", \"apple\"}, {\"\
  b\", \"banana\"}}))\n    // (true)\n    // >>> CheckDictCase((new Dictionary<string,string>(){{\"\
  a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))\n    // (false)\n \
  \   // >>> CheckDictCase((new Dictionary<string,string>(){{\"a\", \"apple\"}, {8L,\
  \ \"banana\"}, {\"a\", \"apple\"}}))\n    // (false)\n    // >>> CheckDictCase((new\
  \ Dictionary<string,string>(){{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\"\
  , \"Houston\"}}))\n    // (false)\n    // >>> CheckDictCase((new Dictionary<string,string>(){{\"\
  STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))\n    // (true)\n    public static bool\
  \ CheckDictCase(Dictionary<string,string> dict) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"p\", \"pineapple\"}, {\"b\", \"banana\"}})) ==\
  \ (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"\
  p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})) == (false));\n\
  \    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"p\", \"pineapple\"\
  }, {\"5\", \"banana\"}, {\"a\", \"apple\"}})) == (false));\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\"\
  , \"Houston\"}})) == (false));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"\
  STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})) == (true));\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))\
  \ == (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        bool ret = false;\n        if (dict == null || dict.Count ==\
    \ 0) {\n            return ret;\n        }\n        foreach (var item in dict)\
    \ {\n            if (item.Key.ToLower() == item.Key) {\n                ret =\
    \ true;\n                break;\n            }\n            if (item.Key.ToUpper()\
    \ == item.Key) {\n                ret = true;\n                break;\n      \
    \      }\n        }\n        return ret;", "        bool result = true;\n    \
    \    foreach (KeyValuePair<string,string> kvp in dict) {\n            if (kvp.Key.Length\
    \ != kvp.Value.Length) {\n                result = false;\n                break;\n\
    \            }\n            string key = kvp.Key.ToLower();\n            string\
    \ value = kvp.Value.ToLower();\n            if (!key.Equals(value)) {\n      \
    \          result = false;\n                break;\n            }\n        }\n\
    \        return result;", "        if (dict.Count == 0) return false;\n      \
    \  foreach (KeyValuePair<string, string> kvp in dict) {\n            string key\
    \ = kvp.Key;\n            string value = kvp.Value;\n            if (key.Length\
    \ > 0 && value.Length > 0) {\n                if (char.IsLower(key[0]) || char.IsUpper(key[0]))\
    \ {\n                    if (char.IsLower(value[0]) || char.IsUpper(value[0]))\
    \ {\n                        return true;\n                    }\n           \
    \     }\n            }\n        }\n        return false;", "        if (dict.Count\
    \ == 0) {\n            return false;\n        }\n        foreach (KeyValuePair<string,\
    \ string> kvp in dict) {\n            string key = kvp.Key;\n            string\
    \ value = kvp.Value;\n            if (key.Length != value.Length) {\n        \
    \        return false;\n            }\n            string lowerCase = key.ToLower();\n\
    \            string upperCase = key.ToUpper();\n            if (lowerCase != upperCase)\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        bool result = true;\n        foreach (KeyValuePair<string, string> kvp\
    \ in dict) {\n            if (kvp.Key.Length > 0) {\n                if (!(kvp.Key.ToLower()\
    \ == kvp.Key)) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n            else {\n                if (!(kvp.Key.ToUpper()\
    \ == kvp.Key)) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   if (dict.Count == 0)\n            return false;\n        foreach (var key\
    \ in dict.Keys)\n            if (key.Length > 0)\n                return true;\n\
    \        return false;", "        bool isCaseSensitive = true;\n        foreach\
    \ (var item in dict) {\n            string key = item.Key;\n            string\
    \ value = item.Value;\n            isCaseSensitive = isCaseSensitive && (key.Equals(value,\
    \ StringComparison.OrdinalIgnoreCase));\n            isCaseSensitive = isCaseSensitive\
    \ && (key.Equals(value, StringComparison.OrdinalIgnoreCase));\n        }\n   \
    \     return isCaseSensitive;", "        bool isCaseSensitive = true;\n      \
    \  bool isUpperCase = true;\n        foreach (var key in dict.Keys) {\n      \
    \      isCaseSensitive = isCaseSensitive && key.Equals(key.ToLower(), StringComparison.OrdinalIgnoreCase);\n\
    \            isUpperCase = isUpperCase && key.Equals(key.ToUpper(), StringComparison.OrdinalIgnoreCase);\n\
    \        }\n        return isCaseSensitive && isUpperCase;", "        if (dict.Count\
    \ == 0)\n            return false;\n        foreach (string key in dict.Keys)\n\
    \        {\n            string lowerCase = key.ToLower();\n            string\
    \ upperCase = key.ToUpper();\n            if (lowerCase == upperCase)\n      \
    \          continue;\n            if (dict.ContainsKey(lowerCase))\n         \
    \       return false;\n            if (dict.ContainsKey(upperCase))\n        \
    \        return false;\n        }\n        return true;", "        if (dict ==\
    \ null || dict.Count == 0)\n            return false;\n        foreach (var item\
    \ in dict)\n            if (item.Key.ToLower() == item.Key.ToUpper())\n      \
    \          return false;\n        return true;", "        if (dict.Count == 0)\n\
    \            return false;\n        foreach (var key in dict.Keys) {\n       \
    \     if (!(key is string || key is string))\n                return false;\n\
    \        }\n        return true;", "        if (dict.Count == 0)\n           \
    \ return false;\n        foreach (var key in dict.Keys)\n            if (key.Length\
    \ > 0)\n                return true;\n        return false;", "        if (dict.Count\
    \ == 0)\n            return false;\n        foreach (var key in dict.Keys) {\n\
    \            if (key.Length > 0)\n                return true;\n        }\n  \
    \      return false;", "        if (dict.Count == 0) {\n            return false;\n\
    \        }\n        foreach (var item in dict) {\n            if (item.Key.ToLower()\
    \ == item.Key) {\n                return true;\n            }\n        }\n   \
    \     return false;", "        if (dict.Count == 0)\n            return false;\n\
    \        foreach (var item in dict)\n        {\n            if (item.Key.Length\
    \ > 0)\n            {\n                if (item.Key.ToLower() == item.Key)\n \
    \                   return true;\n            }\n            else\n          \
    \  {\n                if (item.Key.ToUpper() == item.Key)\n                  \
    \  return true;\n            }\n        }\n        return false;", "        if\
    \ (dict.Count == 0)\n            return false;\n        foreach (string key in\
    \ dict.Keys) {\n            string lowerKey = key.ToLower();\n            string\
    \ upperKey = key.ToUpper();\n            if (lowerKey == upperKey)\n         \
    \       continue;\n            if (dict.ContainsKey(lowerKey))\n             \
    \   return false;\n            if (dict.ContainsKey(upperKey))\n             \
    \   return false;\n        }\n        return true;", "        if (dict.Count ==\
    \ 0)\n            return false;\n        foreach (var pair in dict)\n        {\n\
    \            string key = pair.Key;\n            string value = pair.Value;\n\
    \            if (key.Length != value.Length)\n                return false;\n\
    \            string lowerKey = key.ToLower();\n            string upperKey = key.ToUpper();\n\
    \            if (lowerKey != upperKey)\n                return false;\n      \
    \  }\n        return true;", "        if (dict == null || dict.Count == 0)\n \
    \           return false;\n        foreach (string key in dict.Keys) {\n     \
    \       string lowerKey = key.ToLower();\n            string upperKey = key.ToUpper();\n\
    \            if (lowerKey != upperKey)\n                return false;\n      \
    \  }\n        return true;", "        if (dict.Count == 0) return false;\n   \
    \     foreach (var key in dict.Keys) {\n            if (key.Equals(key.ToLower()))\
    \ {\n                return true;\n            }\n            if (key.Equals(key.ToUpper()))\
    \ {\n                return true;\n            }\n        }\n        return false;",
  "        if (dict.Count == 0)\n            return false;\n        foreach (var pair\
    \ in dict)\n        {\n            if (pair.Key.ToLower() == pair.Key)\n     \
    \           return true;\n            if (pair.Key.ToUpper() == pair.Key)\n  \
    \              return true;\n        }\n        return false;"]
stop_tokens:
- "\n    }\n"
