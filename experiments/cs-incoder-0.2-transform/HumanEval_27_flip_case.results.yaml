language: cs
name: HumanEval_27_flip_case
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsUpper(c)) {\n \
    \               result += Char.ToLower(c);\n            } else {\n           \
    \     result += Char.ToUpper(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            result += (char)(c ^ 32);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a72ce2161e6a423b90c2506cf9c09d01>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a72ce2161e6a423b90c2506cf9c09d01>:0 \n"
  stdout: ''
  timestamp: 1659793693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (char.IsLower(c)) {\n \
    \               result += char.ToUpper(c);\n            } else {\n           \
    \     result += char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (char.IsLower(c)) {\n \
    \               result += char.ToUpper(c);\n            } else {\n           \
    \     result += char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for(int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793761
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            flipped[i] = chars[i] > 'Z' ? 'A' + (chars[i]\
    \ - 'A' + 26) : chars[i] > 'z' ? 'a' + (chars[i] - 'a' + 26) : chars[i];\n   \
    \     }\n        return new string(flipped);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgsvp4re0.cs(16,26): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            }\n            else if (charArray[i] >= 'A' && charArray[i]\
    \ <= 'Z') {\n                newCharArray[i] = (char)(charArray[i] + 32);\n  \
    \          }\n            else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            }\n            else if (charArray[i] >= 'A' && charArray[i]\
    \ <= 'Z') {\n                newCharArray[i] = (char)(charArray[i] + 32);\n  \
    \          }\n            else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] newChars = new char[str.Length];\n        for (int i = 0; i <\
    \ str.Length; i++) {\n            if (chars[i].ToString().ToLower() != chars[i].ToString().ToUpper())\
    \ {\n                newChars[i] = chars[i].ToString().ToUpper();\n          \
    \  } else {\n                newChars[i] = chars[i].ToString().ToLower();\n  \
    \          }\n        }\n        return new string(newChars);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\
    \")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8_52c80e.cs(17,31): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp8_52c80e.cs(19,31): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n \
    \               result += Char.ToUpper(c);\n            } else {\n           \
    \     result += Char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (char.IsUpper(c)) {\n \
    \               result += char.ToLower(c);\n            } else {\n           \
    \     result += char.ToUpper(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n \
    \               result += Char.ToUpper(c);\n            } else {\n           \
    \     result += Char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n \
    \               result += Char.ToUpper(c);\n            } else {\n           \
    \     result += Char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            if (chars[i].ToString().Equals(\"A\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'a';\n            }\n            else if (chars[i].ToString().Equals(\"\
    B\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'b';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"C\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'c';\n            }\n            else if (chars[i].ToString().Equals(\"\
    D\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'd';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"E\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'e';\n            }\n            else if (chars[i].ToString().Equals(\"\
    F\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'f';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"G\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'g';\n            }\n            else if (chars[i].ToString().Equals(\"\
    H\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'h';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"I\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'i';\n            }\n            else if (chars[i].ToString().Equals(\"\
    J\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'j';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"K\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'k';\n            }\n            else if (chars[i].ToString().Equals(\"\
    L\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'l';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"M\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'm';\n            }\n            else if (chars[i].ToString().Equals(\"\
    N\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'n';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"O\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'o';\n            }\n            else if (chars[i].ToString().Equals(\"\
    P\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'p';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"Q\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'q';\n            }\n            else if (chars[i].ToString\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt8ajrij9.cs(67,39): error CS1026: ) expected

    /tmp/tmpt8ajrij9.cs(67,39): error CS1525: Invalid expression term ''}''

    /tmp/tmpt8ajrij9.cs(67,39): error CS1002: ; expected

    /tmp/tmpt8ajrij9.cs(69,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpt8ajrij9.cs(75,2): error CS1513: } expected

    '
  timestamp: 1659793760
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        StringBuilder sb =\
    \ new StringBuilder();\n        foreach (char c in str) {\n            if (Char.IsLower(c))\
    \ {\n                sb.Append(char.ToUpper(c));\n            } else {\n     \
    \           sb.Append(char.ToLower(c));\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            }\n            else if (charArray[i] >= 'A' && charArray[i]\
    \ <= 'Z') {\n                newCharArray[i] = (char)(charArray[i] + 32);\n  \
    \          }\n            else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ + 'A' - 'a');\n            } else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82ebc516da3042c9908db943763f3bef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82ebc516da3042c9908db943763f3bef>:0 \n"
  stdout: ''
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            result += (char)(c ^ 32);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a72ce2161e6a423b90c2506cf9c09d01>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a72ce2161e6a423b90c2506cf9c09d01>:0 \n"
  stdout: ''
  timestamp: 1659793693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n \
    \               result += Char.ToUpper(c);\n            } else {\n           \
    \     result += Char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] ==\
    \ char.ToLower(chars[i])) {\n                chars[i] = char.ToUpper(chars[i]);\n\
    \            }\n            else if (chars[i] == char.ToUpper(chars[i])) {\n \
    \               chars[i] = char.ToLower(chars[i]);\n            }\n        }\n\
    \        return new string(chars);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n \
    \               result += Char.ToUpper(c);\n            } else {\n           \
    \     result += Char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        StringBuilder sb =\
    \ new StringBuilder();\n        foreach (char c in str) {\n            if (Char.IsLower(c))\
    \ {\n                sb.Append(char.ToUpper(c));\n            } else {\n     \
    \           sb.Append(char.ToLower(c));\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (char.IsLower(c)) {\n \
    \               result += char.ToUpper(c);\n            } else {\n           \
    \     result += char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n \
    \               result += Char.ToUpper(c);\n            } else {\n           \
    \     result += Char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        StringBuilder sb =\
    \ new StringBuilder();\n        foreach (char c in str) {\n            if (Char.IsLower(c))\
    \ {\n                sb.Append(char.ToUpper(c));\n            } else {\n     \
    \           sb.Append(char.ToLower(c));\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            }\n            else if (charArray[i] >= 'A' && charArray[i]\
    \ <= 'Z') {\n                newCharArray[i] = (char)(charArray[i] + 32);\n  \
    \          }\n            else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (char.IsLower(c)) {\n \
    \               result += char.ToUpper(c);\n            } else {\n           \
    \     result += char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            flipped[i] = chars[i] != chars.ToUpper(i)\
    \ ? chars[i] : chars.ToLower(i);\n        }\n        return new string(flipped);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppcwr5kdj.cs(16,44): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''culture'' of ''MemoryExtensions.ToUpper(ReadOnlySpan<char>,
    Span<char>, CultureInfo)''

    /tmp/tmppcwr5kdj.cs(16,74): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''culture'' of ''MemoryExtensions.ToLower(ReadOnlySpan<char>,
    Span<char>, CultureInfo)''

    '
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f1f904901d847b480affbe51ecdbd13>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f1f904901d847b480affbe51ecdbd13>:0 \n"
  stdout: ''
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            result += (char.IsUpper(c))\
    \ ? c.ToString().ToUpper() : c.ToString().ToLower();\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808fa93217f644e489dabc089461df70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808fa93217f644e489dabc089461df70>:0 \n"
  stdout: ''
  timestamp: 1659823361
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] newChars = new char[chars.Length];\n        for (int i = 0; i\
    \ < chars.Length; i++) {\n            if (chars[i].ToString().ToLower() != chars[i].ToString().ToUpper())\
    \ {\n                newChars[i] = chars[i].ToString().ToUpper();\n          \
    \  } else {\n                newChars[i] = chars[i].ToString().ToLower();\n  \
    \          }\n        }\n        return new string(newChars);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\
    \")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyej9q2jk.cs(17,31): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpyej9q2jk.cs(19,31): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        StringBuilder sb =\
    \ new StringBuilder();\n        foreach (char c in str) {\n            if (char.IsLower(c))\
    \ {\n                sb.Append(char.ToUpper(c));\n            } else {\n     \
    \           sb.Append(char.ToLower(c));\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823361
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            flipped[i] = chars[i] != chars[i].ToUpper()\
    \ ? chars[i].ToUpper() : chars[i].ToLower();\n        }\n        return new string(flipped);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphyx6ixph.cs(16,47): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmphyx6ixph.cs(16,68): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmphyx6ixph.cs(16,89): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    '
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            }\n            else if (charArray[i] >= 'A' && charArray[i]\
    \ <= 'Z') {\n                newCharArray[i] = (char)(charArray[i] + 32);\n  \
    \          }\n            else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] newChars = new char[chars.Length];\n        for (int i = 0; i\
    \ < chars.Length; i++) {\n            if (chars[i].ToString().ToLower() != chars[i].ToString().ToUpper())\
    \ {\n                newChars[i] = chars[i].ToString().ToUpper();\n          \
    \  } else {\n                newChars[i] = chars[i].ToString().ToLower();\n  \
    \          }\n        }\n        return new string(newChars);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\
    \")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyej9q2jk.cs(17,31): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpyej9q2jk.cs(19,31): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        bool isUpper = false;\n        for (int i = 0; i < charArray.Length;\
    \ i++) {\n            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n    \
    \            isUpper = true;\n            }\n            if (charArray[i] >= 'A'\
    \ && charArray[i] <= 'Z') {\n                isUpper = false;\n            }\n\
    \            if (charArray[i] == ' ') {\n                newCharArray[i] = ' ';\n\
    \            }\n            else {\n                if (isUpper) {\n         \
    \           newCharArray[i] = (char)(charArray[i] + 32);\n                }\n\
    \                else {\n                    newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n                }\n            }\n        }\n        return new string(newCharArray);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2479325bc54b4a1cb8ff628c98e292cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2479325bc54b4a1cb8ff628c98e292cc>:0 \n"
  stdout: ''
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[str.Length];\n  \
    \      for (int i = 0; i < str.Length; i++) {\n            if (charArray[i] >=\
    \ 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        Array.Sort(chars);\n        return new string(chars);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\
    \")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2167cdaa46a540b9ab0652dfce2a864d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2167cdaa46a540b9ab0652dfce2a864d>:0 \n"
  stdout: ''
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        Array.Sort(chars);\n        return new string(chars);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\
    \")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2167cdaa46a540b9ab0652dfce2a864d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2167cdaa46a540b9ab0652dfce2a864d>:0 \n"
  stdout: ''
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsUpper(c)) {\n \
    \               result += Char.ToLower(c);\n            } else {\n           \
    \     result += Char.ToUpper(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        StringBuilder sb = new StringBuilder();\n        foreach (char c in chars)\
    \ {\n            if (Char.IsLower(c)) {\n                sb.Append(char.ToUpperInvariant(c));\n\
    \            } else {\n                sb.Append(char.ToLowerInvariant(c));\n\
    \            }\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823361
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            if (chars[i].ToString().Equals(\"A\", StringComparison.InvariantCultureIgnoreCase))\
    \ {\n                flipped[i] = chars[i].ToString().ToUpper();\n           \
    \ } else if (chars[i].ToString().Equals(\"a\", StringComparison.InvariantCultureIgnoreCase))\
    \ {\n                flipped[i] = chars[i].ToString().ToLower();\n           \
    \ } else {\n                flipped[i] = chars[i];\n            }\n        }\n\
    \        return new string(flipped);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3k2hy5jg.cs(17,30): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp3k2hy5jg.cs(19,30): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            }\n            else if (charArray[i] >= 'A' && charArray[i]\
    \ <= 'Z') {\n                newCharArray[i] = (char)(charArray[i] + 32);\n  \
    \          }\n            else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        StringBuilder sb = new StringBuilder();\n      \
    \  foreach (char c in charArray) {\n            if (Char.IsLower(c)) {\n     \
    \           sb.Append(char.ToUpperInvariant(c));\n            } else {\n     \
    \           sb.Append(char.ToLowerInvariant(c));\n            }\n        }\n \
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        Array.Sort(charArray);\n        StringBuilder sb\
    \ = new StringBuilder();\n        foreach (char c in charArray) {\n          \
    \  if (char.IsUpper(c)) {\n                sb.Append(char.ToLower(c));\n     \
    \       } else {\n                sb.Append(char.ToUpper(c));\n            }\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f9d267127d24716b4defb99cab8e9a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f9d267127d24716b4defb99cab8e9a6>:0 \n"
  stdout: ''
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        StringBuilder sb =\
    \ new StringBuilder();\n        foreach (char c in str) {\n            if (Char.IsLower(c))\
    \ {\n                sb.Append(char.ToUpper(c));\n            } else {\n     \
    \           sb.Append(char.ToLower(c));\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flippedChars = new char[chars.Length];\n        for (int i = 0;\
    \ i < chars.Length; i++) {\n            flippedChars[i] = (char.IsUpper(chars[i])\
    \ ? char.ToLower(chars[i]) : char.ToUpper(chars[i]));\n        }\n        return\
    \ new string(flippedChars);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823361
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >\
    \ 'Z') {\n                chars[i] = chars[i] - 32;\n            }\n         \
    \   if (chars[i] < 'A') {\n                chars[i] = chars[i] + 32;\n       \
    \     }\n        }\n        return new string(chars);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpesyafk11.cs(16,28): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpesyafk11.cs(19,28): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            flipped[i] = chars[i] != chars[i].ToUpper()\
    \ ? chars[i].ToUpper() : chars[i].ToLower();\n        }\n        return new string(flipped);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphyx6ixph.cs(16,47): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmphyx6ixph.cs(16,68): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmphyx6ixph.cs(16,89): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    '
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (char.IsLower(c)) {\n \
    \               result += char.ToUpper(c);\n            } else {\n           \
    \     result += char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsUpper(c)) {\n \
    \               result += Char.ToLower(c);\n            } else {\n           \
    \     result += Char.ToUpper(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793621
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            flipped[i] = chars[i] != chars[i].ToUpper()\
    \ ? chars[i].ToUpper() : chars[i].ToLower();\n        }\n        return new string(flipped);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphyx6ixph.cs(16,47): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmphyx6ixph.cs(16,68): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmphyx6ixph.cs(16,89): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    '
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        StringBuilder sb =\
    \ new StringBuilder();\n        foreach (char c in str) {\n            if (Char.IsLower(c))\
    \ {\n                sb.Append(char.ToUpper(c));\n            } else {\n     \
    \           sb.Append(char.ToLower(c));\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        StringBuilder sb =\
    \ new StringBuilder();\n        foreach (char c in str) {\n            if (Char.IsLower(c))\
    \ {\n                sb.Append(char.ToUpper(c));\n            } else {\n     \
    \           sb.Append(char.ToLower(c));\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (char.IsLower(c)) {\n \
    \               result += char.ToUpper(c);\n            } else {\n           \
    \     result += char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            flipped[i] = chars[i] > 'Z' ? 'A' + (chars[i]\
    \ - 'A' + 26) : chars[i] > 'z' ? 'a' + (chars[i] - 'a' + 26) : chars[i];\n   \
    \     }\n        return new string(flipped);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgsvp4re0.cs(16,26): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            }\n            else if (charArray[i] >= 'A' && charArray[i]\
    \ <= 'Z') {\n                newCharArray[i] = (char)(charArray[i] + 32);\n  \
    \          }\n            else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            result += (char)(Char.ToUpper(c));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14fdbeeb159a42bcb129ad1687977f22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14fdbeeb159a42bcb129ad1687977f22>:0 \n"
  stdout: ''
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            flipped[flipped.Length - 1 - i] = chars[i];\n\
    \        }\n        return new string(flipped);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48915db5ef7e43bfb8a5d1389781fcc1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48915db5ef7e43bfb8a5d1389781fcc1>:0 \n"
  stdout: ''
  timestamp: 1659823361
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] newChars = new char[str.Length];\n        for (int i = 0; i <\
    \ str.Length; i++) {\n            if (chars[i].ToString().Equals(\"A\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                newChars[i] = chars[i].ToString().ToUpper();\n          \
    \  }\n            else if (chars[i].ToString().Equals(\"a\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                newChars[i] = chars[i].ToString().ToLower();\n          \
    \  }\n            else {\n                newChars[i] = chars[i];\n          \
    \  }\n        }\n        return new string(newChars);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj7akngez.cs(17,31): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpj7akngez.cs(20,31): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1659823361
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        foreach (char c in charArray) {\n            if (Char.IsLower(c)) {\n\
    \                newCharArray[newCharArray.Length - 1 - charArray.IndexOf(c)]\
    \ = c;\n            } else {\n                newCharArray[newCharArray.Length\
    \ - 1 - charArray.IndexOf(c)] = Char.ToUpper(c);\n            }\n        }\n \
    \       return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp63f46d12.cs(17,66): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmp63f46d12.cs(19,66): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    '
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f1f904901d847b480affbe51ecdbd13>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f1f904901d847b480affbe51ecdbd13>:0 \n"
  stdout: ''
  timestamp: 1659823361
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] newChars = new char[chars.Length];\n        for (int i = 0; i\
    \ < chars.Length; i++) {\n            if (chars[i].ToString().ToLower() != chars[i].ToString().ToUpper())\
    \ {\n                newChars[i] = chars[i].ToString().ToUpper();\n          \
    \  } else {\n                newChars[i] = chars[i].ToString().ToLower();\n  \
    \          }\n        }\n        return new string(newChars);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\
    \")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyej9q2jk.cs(17,31): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpyej9q2jk.cs(19,31): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1659823361
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            flipped[i] = chars[i] != chars[i].ToUpper()\
    \ ? chars[i].ToUpper() : chars[i].ToLower();\n        }\n        return new string(flipped);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphyx6ixph.cs(16,47): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmphyx6ixph.cs(16,68): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmphyx6ixph.cs(16,89): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    '
  timestamp: 1659823361
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            flipped[i] = chars[i] != chars.ToUpper(i)\
    \ ? chars[i] : chars.ToLower(i);\n        }\n        return new string(flipped);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppcwr5kdj.cs(16,44): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''culture'' of ''MemoryExtensions.ToUpper(ReadOnlySpan<char>,
    Span<char>, CultureInfo)''

    /tmp/tmppcwr5kdj.cs(16,74): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''culture'' of ''MemoryExtensions.ToLower(ReadOnlySpan<char>,
    Span<char>, CultureInfo)''

    '
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n \
    \               result += Char.ToUpper(c);\n            } else {\n           \
    \     result += Char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] newChars = new char[chars.Length];\n        for (int i = 0; i\
    \ < chars.Length; i++) {\n            if (chars[i].ToString().ToLower() == chars[i].ToString().ToUpper())\
    \ {\n                newChars[i] = chars[i].ToString().ToLower();\n          \
    \  } else {\n                newChars[i] = chars[i].ToString().ToUpper();\n  \
    \          }\n        }\n        return new string(newChars);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\
    \")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1p_9_9sb.cs(17,31): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp1p_9_9sb.cs(19,31): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] flippedCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                flippedCharArray[i] = (char)(charArray[i]\
    \ + 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                flippedCharArray[i] = (char)(charArray[i] - 32);\n          \
    \  } else {\n                flippedCharArray[i] = charArray[i];\n           \
    \ }\n        }\n        return new string(flippedCharArray);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\
    \")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b64a0e17b0434de38fef55f017be5faf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b64a0e17b0434de38fef55f017be5faf>:0 \n"
  stdout: ''
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            if (chars[i].ToString().ToLower() != chars[i].ToString().ToUpper())\
    \ {\n                sb.Append(chars[i].ToString().ToUpper());\n            }\
    \ else {\n                sb.Append(chars[i].ToString().ToLower());\n        \
    \    }\n        }\n        return sb.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a27b2be51a4420ca7a9347f87d3ba20>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a27b2be51a4420ca7a9347f87d3ba20>:0 \n"
  stdout: ''
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            result += (char)(Char.ToUpper(c));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14fdbeeb159a42bcb129ad1687977f22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14fdbeeb159a42bcb129ad1687977f22>:0 \n"
  stdout: ''
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        bool isUpper = false;\n        for (int i = 0; i < charArray.Length;\
    \ i++) {\n            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n    \
    \            isUpper = true;\n            }\n            if (charArray[i] >= 'A'\
    \ && charArray[i] <= 'Z') {\n                isUpper = false;\n            }\n\
    \            if (isUpper) {\n                newCharArray[i] = (char)(charArray[i]\
    \ + 32);\n            } else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <58d15171e3774797b6c31cf01c76019a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <58d15171e3774797b6c31cf01c76019a>:0 \n"
  stdout: ''
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        StringBuilder sb =\
    \ new StringBuilder();\n        foreach (char c in str) {\n            if (char.IsUpper(c))\
    \ {\n                sb.Append(char.ToLower(c));\n            } else {\n     \
    \           sb.Append(c);\n            }\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6fc3dce6279943b3afc0e09b9d920ae4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6fc3dce6279943b3afc0e09b9d920ae4>:0 \n"
  stdout: ''
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ + 'A' - 'a');\n            } else if (charArray[i] >= 'A' && charArray[i] <=\
    \ 'Z') {\n                newCharArray[i] = (char)(charArray[i] + 'a' - 'A');\n\
    \            } else {\n                newCharArray[i] = charArray[i];\n     \
    \       }\n        }\n        return new string(newCharArray);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\
    \")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] newChars = new char[chars.Length];\n        for (int i = 0; i\
    \ < chars.Length; i++) {\n            if (chars[i].ToString().ToLower() == chars[i].ToString().ToUpper())\
    \ {\n                newChars[i] = chars[i].ToString().ToUpper();\n          \
    \  } else {\n                newChars[i] = chars[i].ToString().ToLower();\n  \
    \          }\n        }\n        return new string(newChars);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\
    \")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqtck0u1i.cs(17,31): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpqtck0u1i.cs(19,31): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            result += (char.IsUpper(c))\
    \ ? (char.ToLower(c)) : (char.ToUpper(c));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            }\n            else if (charArray[i] >= 'A' && charArray[i]\
    \ <= 'Z') {\n                newCharArray[i] = (char)(charArray[i] + 32);\n  \
    \          }\n            else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n \
    \               result += Char.ToUpper(c);\n            } else {\n           \
    \     result += Char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (char.IsLower(c)) {\n \
    \               result += char.ToUpper(c);\n            } else {\n           \
    \     result += char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n \
    \               result += Char.ToUpper(c);\n            } else {\n           \
    \     result += Char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] flippedCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                flippedCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else {\n                flippedCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(flippedCharArray);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3396e8efc694d3db08267a0314986fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3396e8efc694d3db08267a0314986fb>:0 \n"
  stdout: ''
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        Array.Sort(charArray);\n        StringBuilder sb\
    \ = new StringBuilder();\n        foreach (char c in charArray) {\n          \
    \  if (char.IsUpper(c)) {\n                sb.Append(char.ToLower(c));\n     \
    \       } else {\n                sb.Append(c);\n            }\n        }\n  \
    \      return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <64dfe6f6649846a8bff01e3e5859eb95>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <64dfe6f6649846a8bff01e3e5859eb95>:0 \n"
  stdout: ''
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            flipped[flipped.Length - 1 - i] = chars[i];\n\
    \        }\n        return new string(flipped);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48915db5ef7e43bfb8a5d1389781fcc1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48915db5ef7e43bfb8a5d1389781fcc1>:0 \n"
  stdout: ''
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            result += (char)(c ^ 32);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a72ce2161e6a423b90c2506cf9c09d01>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a72ce2161e6a423b90c2506cf9c09d01>:0 \n"
  stdout: ''
  timestamp: 1659793693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            }\n            else if (charArray[i] >= 'A' && charArray[i]\
    \ <= 'Z') {\n                newCharArray[i] = (char)(charArray[i] + 32);\n  \
    \          }\n            else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n \
    \               result += Char.ToUpper(c);\n            } else {\n           \
    \     result += Char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        StringBuilder sb = new StringBuilder();\n      \
    \  foreach (char c in charArray) {\n            if (Char.IsLower(c)) {\n     \
    \           sb.Append(char.ToUpper(c));\n            } else {\n              \
    \  sb.Append(char.ToLower(c));\n            }\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            flipped[i] = chars[i] > 'Z' ? 'A' + (chars[i]\
    \ - 'Z') : chars[i] > 'z' ? 'a' + (chars[i] - 'z') : chars[i];\n        }\n  \
    \      return new string(flipped);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg3fn57h4.cs(16,26): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f1f904901d847b480affbe51ecdbd13>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f1f904901d847b480affbe51ecdbd13>:0 \n"
  stdout: ''
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n \
    \               result += Char.ToUpper(c);\n            } else {\n           \
    \     result += Char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            flipped[i] = chars[i] != chars[i].ToUpper()\
    \ ? chars[i].ToUpper() : chars[i].ToLower();\n        }\n        return new string(flipped);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphyx6ixph.cs(16,47): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmphyx6ixph.cs(16,68): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmphyx6ixph.cs(16,89): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    '
  timestamp: 1659823361
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flippedChars = new char[chars.Length];\n        for (int i = 0;\
    \ i < chars.Length; i++) {\n            flippedChars[i] = chars[i] != chars[i].ToUpper()\
    \ ? chars[i].ToUpper() : chars[i].ToLower();\n        }\n        return new string(flippedChars);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzu883wnc.cs(16,52): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmpzu883wnc.cs(16,73): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmpzu883wnc.cs(16,94): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    '
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            }\n            else if (charArray[i] >= 'A' && charArray[i]\
    \ <= 'Z') {\n                newCharArray[i] = (char)(charArray[i] + 32);\n  \
    \          }\n            else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            if (chars[i].ToString().Equals(\"A\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = (char)(char.ToUpper(chars[i]));\n          \
    \  }\n            else if (chars[i].ToString().Equals(\"a\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = (char)(char.ToLower(chars[i]));\n          \
    \  }\n            else {\n                flipped[i] = chars[i];\n           \
    \ }\n        }\n        return new string(flipped);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a972cb2d4e904160960fd793e5ced510>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a972cb2d4e904160960fd793e5ced510>:0 \n"
  stdout: ''
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            flipped[i] = chars[i] != chars[i].ToUpper()\
    \ ? chars[i].ToUpper() : chars[i].ToLower();\n        }\n        return new string(flipped);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphyx6ixph.cs(16,47): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmphyx6ixph.cs(16,68): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmphyx6ixph.cs(16,89): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    '
  timestamp: 1659823361
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            if (chars[i].ToString().ToLower() != chars[i].ToString().ToUpper())\
    \ {\n                flipped[i] = chars[i].ToString().ToUpper();\n           \
    \ } else {\n                flipped[i] = chars[i].ToString().ToLower();\n    \
    \        }\n        }\n        return new string(flipped);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\
    \")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy2n1ku1f.cs(17,30): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpy2n1ku1f.cs(19,30): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        Array.Sort(chars);\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in chars) {\n            if (Char.IsLower(c)) {\n   \
    \             sb.Append(char.ToUpper(c));\n            } else {\n            \
    \    sb.Append(char.ToLower(c));\n            }\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bddda789528b497c9ea41f5c52bb1889>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bddda789528b497c9ea41f5c52bb1889>:0 \n"
  stdout: ''
  timestamp: 1659823362
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i].ToString().Equals(\"\
    A\", StringComparison.OrdinalIgnoreCase)) {\n                chars[i] = chars[i].ToString().ToUpper();\n\
    \            } else if (chars[i].ToString().Equals(\"a\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                chars[i] = chars[i].ToString().ToLower();\n            }\
    \ else if (chars[i].ToString().Equals(\"B\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                chars[i] = chars[i].ToString().ToUpper();\n            }\
    \ else if (chars[i].ToString().Equals(\"b\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                chars[i] = chars[i].ToString().ToLower();\n            }\
    \ else if (chars[i].ToString().Equals(\"C\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                chars[i] = chars[i].ToString().ToUpper();\n            }\
    \ else if (chars[i].ToString().Equals(\"c\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                chars[i] = chars[i].ToString().ToLower();\n            }\
    \ else if (chars[i].ToString().Equals(\"D\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                chars[i] = chars[i].ToString().ToUpper();\n            }\
    \ else if (chars[i].ToString().Equals(\"d\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                chars[i] = chars[i].ToString().ToLower();\n            }\
    \ else if (chars[i].ToString().Equals(\"E\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                chars[i] = chars[i].ToString().ToUpper();\n            }\
    \ else if (chars[i].ToString().Equals(\"e\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                chars[i] = chars[i].ToString().ToLower();\n            }\
    \ else if (chars[i].ToString().Equals(\"F\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                chars[i] = chars[i].ToString().ToUpper();\n            }\
    \ else if (chars[i].ToString().Equals(\"f\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                chars[i] = chars[i].ToString().ToLower();\n            }\
    \ else if (chars[i].ToString().Equals(\"G\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                chars[i] = chars[i].ToString().ToUpper();\n            }\
    \ else if (chars[i].ToString().Equals(\"g\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                chars[i] = chars[i].ToString().ToLower();\n            }\
    \ else if (chars[i].ToString().Equals(\"H\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                chars[i] = chars[i].ToString().ToUpper();\n            }\
    \ else if (chars[i].ToString().Equals(\"h\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                chars[i] = chars[i].ToString().ToLower();\n            }\
    \ else if (chars[i].ToString().Equals(\"I\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                chars[i] = chars[i].ToString().ToUpper();\n            }\
    \ else if (chars[i].ToString().Equals(\"i\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                chars[i] = \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxp6pcyj0.cs(50,27): error CS1525: Invalid expression term ''}''

    /tmp/tmpxp6pcyj0.cs(50,27): error CS1002: ; expected

    /tmp/tmpxp6pcyj0.cs(52,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpxp6pcyj0.cs(58,2): error CS1513: } expected

    '
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        Array.Sort(chars);\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in chars) {\n            if (Char.IsLower(c)) {\n   \
    \             sb.Append(char.ToUpperInvariant(c));\n            } else {\n   \
    \             sb.Append(char.ToLowerInvariant(c));\n            }\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <08af4f61248c492bb27a67dc25f5ba87>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <08af4f61248c492bb27a67dc25f5ba87>:0 \n"
  stdout: ''
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        Array.Reverse(chars);\n        return new string(chars);\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\
    \")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <680abaa0d34541e88e1b068375755367>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <680abaa0d34541e88e1b068375755367>:0 \n"
  stdout: ''
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        StringBuilder sb = new StringBuilder();\n        foreach (char c in chars)\
    \ {\n            if (Char.IsLower(c)) {\n                sb.Append(char.ToUpperInvariant(c));\n\
    \            } else {\n                sb.Append(char.ToLowerInvariant(c));\n\
    \            }\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        StringBuilder sb = new StringBuilder();\n      \
    \  foreach (char c in charArray) {\n            if (Char.IsUpper(c)) {\n     \
    \           sb.Append(char.ToLower(c));\n            } else {\n              \
    \  sb.Append(c);\n            }\n        }\n        return sb.ToString();\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3ae7f870ce004bb181956366ca9b6d2e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3ae7f870ce004bb181956366ca9b6d2e>:0 \n"
  stdout: ''
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] flippedCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            flippedCharArray[i]\
    \ = charArray[i];\n            if (charArray[i] >= 'a' && charArray[i] <= 'z')\
    \ {\n                flippedCharArray[i] = (char)(charArray[i] - 32);\n      \
    \      }\n            if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n    \
    \            flippedCharArray[i] = (char)(charArray[i] + 32);\n            }\n\
    \        }\n        return new string(flippedCharArray);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            }\n            else if (charArray[i] >= 'A' && charArray[i]\
    \ <= 'Z') {\n                newCharArray[i] = (char)(charArray[i] + 32);\n  \
    \          }\n            else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (char.IsLower(c)) {\n \
    \               result += char.ToUpper(c);\n            } else {\n           \
    \     result += char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ + 'A' - 'a');\n            }\n            else if (charArray[i] >= 'A' && charArray[i]\
    \ <= 'Z') {\n                newCharArray[i] = (char)(charArray[i] + 'a' - 'A');\n\
    \            }\n            else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f1f904901d847b480affbe51ecdbd13>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f1f904901d847b480affbe51ecdbd13>:0 \n"
  stdout: ''
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            }\n            else if (charArray[i] >= 'A' && charArray[i]\
    \ <= 'Z') {\n                newCharArray[i] = (char)(charArray[i] + 32);\n  \
    \          }\n            else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        Array.Reverse(chars);\n        return new string(chars);\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\
    \")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <680abaa0d34541e88e1b068375755367>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <680abaa0d34541e88e1b068375755367>:0 \n"
  stdout: ''
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (char.IsLower(c)) {\n \
    \               result += char.ToUpper(c);\n            } else {\n           \
    \     result += char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            if (chars[i].ToString().ToLower() != chars[i].ToString().ToUpper())\
    \ {\n                flipped[i] = chars[i].ToString().ToUpper();\n           \
    \ } else {\n                flipped[i] = chars[i].ToString().ToLower();\n    \
    \        }\n        }\n        return new string(flipped);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\
    \")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy2n1ku1f.cs(17,30): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpy2n1ku1f.cs(19,30): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        StringBuilder sb =\
    \ new StringBuilder();\n        foreach (char c in str) {\n            if (Char.IsLower(c))\
    \ {\n                sb.Append(char.ToUpper(c));\n            } else {\n     \
    \           sb.Append(char.ToLower(c));\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n \
    \               result += Char.ToUpper(c);\n            } else {\n           \
    \     result += Char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            flipped[flipped.Length - 1 - i] = chars[i];\n\
    \        }\n        return new string(flipped);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48915db5ef7e43bfb8a5d1389781fcc1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48915db5ef7e43bfb8a5d1389781fcc1>:0 \n"
  stdout: ''
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] newChars = new char[chars.Length];\n        for (int i = 0; i\
    \ < chars.Length; i++) {\n            if (chars[i].ToString().ToLower() != chars[i].ToString().ToUpper())\
    \ {\n                newChars[i] = chars[i].ToString().ToUpper();\n          \
    \  } else {\n                newChars[i] = chars[i].ToString().ToLower();\n  \
    \          }\n        }\n        return new string(newChars);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\
    \")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyej9q2jk.cs(17,31): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpyej9q2jk.cs(19,31): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (char.IsLower(c)) {\n \
    \               result += char.ToUpper(c);\n            } else {\n           \
    \     result += char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            if (chars[i] == 'a') {\n                flipped[i]\
    \ = 'A';\n            } else if (chars[i] == 'A') {\n                flipped[i]\
    \ = 'a';\n            } else {\n                flipped[i] = chars[i];\n     \
    \       }\n        }\n        return new string(flipped);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8058e0c19c6747489db9d8067810af1e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8058e0c19c6747489db9d8067810af1e>:0 \n"
  stdout: ''
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n \
    \               result += Char.ToUpper(c);\n            } else {\n           \
    \     result += Char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            flipped[i] = chars[i] > 'Z' ? 'A' + (chars[i]\
    \ - 'A') : chars[i];\n        }\n        return new string(flipped);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqcsewmrb.cs(16,26): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsUpper(c)) {\n \
    \               result += Char.ToLower(c);\n            } else {\n           \
    \     result += Char.ToUpper(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsUpper(c)) {\n \
    \               result += Char.ToLower(c);\n            } else {\n           \
    \     result += Char.ToUpper(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (char.IsLower(c)) {\n \
    \               result += char.ToUpper(c);\n            } else {\n           \
    \     result += char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        StringBuilder sb =\
    \ new StringBuilder();\n        foreach (char c in str) {\n            if (Char.IsLower(c))\
    \ {\n                sb.Append(char.ToUpper(c));\n            } else {\n     \
    \           sb.Append(char.ToLower(c));\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n \
    \               result += Char.ToUpper(c);\n            } else {\n           \
    \     result += Char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            }\n            else if (charArray[i] >= 'A' && charArray[i]\
    \ <= 'Z') {\n                newCharArray[i] = (char)(charArray[i] + 32);\n  \
    \          }\n            else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ + 'A' - 'a');\n            }\n            else if (charArray[i] >= 'A' && charArray[i]\
    \ <= 'Z') {\n                newCharArray[i] = (char)(charArray[i] + 'a' - 'A');\n\
    \            }\n            else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            result += (char)(Char.ToUpper(c));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14fdbeeb159a42bcb129ad1687977f22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14fdbeeb159a42bcb129ad1687977f22>:0 \n"
  stdout: ''
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ + 'A' - 'a');\n            } else if (charArray[i] >= 'A' && charArray[i] <=\
    \ 'Z') {\n                newCharArray[i] = (char)(charArray[i] + 'a' - 'A');\n\
    \            } else {\n                newCharArray[i] = charArray[i];\n     \
    \       }\n        }\n        return new string(newCharArray);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\
    \")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        StringBuilder sb = new StringBuilder();\n      \
    \  foreach (char c in charArray) {\n            if (Char.IsLower(c)) {\n     \
    \           sb.Append(char.ToUpper(c));\n            } else {\n              \
    \  sb.Append(char.ToLower(c));\n            }\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n \
    \               result += Char.ToUpper(c);\n            } else {\n           \
    \     result += Char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n \
    \               result += Char.ToUpper(c);\n            } else {\n           \
    \     result += Char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] newChars = new char[chars.Length];\n        for (int i = 0; i\
    \ < chars.Length; i++) {\n            if (chars[i] == 'a') {\n               \
    \ newChars[i] = 'A';\n            } else if (chars[i] == 'A') {\n            \
    \    newChars[i] = 'a';\n            } else {\n                newChars[i] = chars[i];\n\
    \            }\n        }\n        return new string(newChars);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\
    \")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82d7c071a5fd4c70becd780d7a04e165>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82d7c071a5fd4c70becd780d7a04e165>:0 \n"
  stdout: ''
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n \
    \               result += Char.ToUpper(c);\n            } else {\n           \
    \     result += Char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (char.IsLower(c)) {\n \
    \               result += char.ToUpper(c);\n            } else {\n           \
    \     result += char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            flipped[i] = chars[i] > chars.Length - 1 ?\
    \ chars.Length - 1 : chars[i];\n        }\n        return new string(flipped);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa6_7rw7e.cs(16,26): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            flipped[chars.Length - 1 - i] = chars[i];\n\
    \        }\n        return new string(flipped);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46ce4623a89943df953bffa7bd0a6c70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46ce4623a89943df953bffa7bd0a6c70>:0 \n"
  stdout: ''
  timestamp: 1659823363
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            result += (char)(Char.ToUpper(c));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14fdbeeb159a42bcb129ad1687977f22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14fdbeeb159a42bcb129ad1687977f22>:0 \n"
  stdout: ''
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        StringBuilder sb = new StringBuilder();\n        foreach (char c in chars)\
    \ {\n            if (Char.IsUpper(c)) {\n                sb.Append(char.ToLower(c));\n\
    \            } else {\n                sb.Append(char.ToUpper(c));\n         \
    \   }\n        }\n        return sb.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823363
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n \
    \               result += Char.ToUpper(c);\n            } else {\n           \
    \     result += Char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            flipped[i] = chars[i] != chars.ToUpper(i)\
    \ ? chars[i] : chars.ToLower(i);\n        }\n        return new string(flipped);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppcwr5kdj.cs(16,44): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''culture'' of ''MemoryExtensions.ToUpper(ReadOnlySpan<char>,
    Span<char>, CultureInfo)''

    /tmp/tmppcwr5kdj.cs(16,74): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''culture'' of ''MemoryExtensions.ToLower(ReadOnlySpan<char>,
    Span<char>, CultureInfo)''

    '
  timestamp: 1659823361
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        bool isUpper = false;\n        for (int i = 0; i < charArray.Length;\
    \ i++) {\n            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n    \
    \            isUpper = !isUpper;\n            }\n            newCharArray[i] =\
    \ isUpper ? charArray[i].ToUpper() : charArray[i].ToLower();\n        }\n    \
    \    return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7828_o9y.cs(20,54): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmp7828_o9y.cs(20,79): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    '
  timestamp: 1659823362
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        StringBuilder sb =\
    \ new StringBuilder(str.Length);\n        foreach (char c in str) {\n        \
    \    if (char.IsLower(c)) {\n                sb.Append(char.ToUpper(c));\n   \
    \         } else {\n                sb.Append(char.ToLower(c));\n            }\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823363
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[str.Length];\n  \
    \      for (int i = 0; i < str.Length; i++) {\n            if (charArray[i] >=\
    \ 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (char.IsLower(c)) {\n \
    \               result += char.ToUpper(c);\n            } else {\n           \
    \     result += char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for(int i = 0; i < charArray.Length; i++) {\n            if(charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2408f784f8ec42608793e08024f4fdfd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2408f784f8ec42608793e08024f4fdfd>:0 \n"
  stdout: ''
  timestamp: 1659823363
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (char.IsLower(c)) {\n \
    \               result += char.ToUpper(c);\n            } else {\n           \
    \     result += char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for(int i = 0; i < charArray.Length; i++) {\n            if(charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            }\n            else {\n                newCharArray[i] =\
    \ charArray[i];\n            }\n        }\n        return new string(newCharArray);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89a3ed025a3e4d238eaa2c2d92bf957d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89a3ed025a3e4d238eaa2c2d92bf957d>:0 \n"
  stdout: ''
  timestamp: 1659823363
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"\
    Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent\
    \ delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n \
    \               result += Char.ToUpper(c);\n            } else {\n           \
    \     result += Char.ToLower(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793622
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            if (chars[i].ToString().Equals(\"A\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'a';\n            }\n            else if (chars[i].ToString().Equals(\"\
    B\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'b';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"C\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'c';\n            }\n            else if (chars[i].ToString().Equals(\"\
    D\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'd';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"E\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'e';\n            }\n            else if (chars[i].ToString().Equals(\"\
    F\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'f';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"G\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'g';\n            }\n            else if (chars[i].ToString().Equals(\"\
    H\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'h';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"I\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'i';\n            }\n            else if (chars[i].ToString().Equals(\"\
    J\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'j';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"K\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'k';\n            }\n            else if (chars[i].ToString().Equals(\"\
    L\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'l';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"M\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'm';\n            }\n            else if (chars[i].ToString().Equals(\"\
    N\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'n';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"O\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'o';\n            }\n            else if (chars[i].ToString().Equals(\"\
    P\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'p';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"Q\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'q';\n            }\n            else if (chars[i].ToString\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
    \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
    )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\"\
    )).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt8ajrij9.cs(67,39): error CS1026: ) expected

    /tmp/tmpt8ajrij9.cs(67,39): error CS1525: Invalid expression term ''}''

    /tmp/tmpt8ajrij9.cs(67,39): error CS1002: ; expected

    /tmp/tmpt8ajrij9.cs(69,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpt8ajrij9.cs(75,2): error CS1513: } expected

    '
  timestamp: 1659793760
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] flippedCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            flippedCharArray[i]\
    \ = charArray[i];\n            if (charArray[i] >= 'a' && charArray[i] <= 'z')\
    \ {\n                flippedCharArray[i] = (char)(charArray[i] - 32);\n      \
    \      }\n        }\n        return new string(flippedCharArray);\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\
    \")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dfac93b26b884a95a4d5a41095d44416>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dfac93b26b884a95a4d5a41095d44416>:0 \n"
  stdout: ''
  timestamp: 1659823363
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n\
    \        char[] newChars = new char[chars.Length];\n        for (int i = 0; i\
    \ < chars.Length; i++) {\n            if (chars[i].ToString().ToLower() != chars[i].ToString().ToUpper())\
    \ {\n                newChars[i] = chars[i].ToString().ToUpper();\n          \
    \  } else {\n                newChars[i] = chars[i].ToString().ToLower();\n  \
    \          }\n        }\n        return new string(newChars);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\
    \")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyej9q2jk.cs(17,31): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpyej9q2jk.cs(19,31): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1659823361
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static string FlipCase(string str) {\n        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        bool isUpper = false;\n        for (int i = 0; i < charArray.Length;\
    \ i++) {\n            if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n    \
    \            newCharArray[i] = (char)(charArray[i] - 'A' + 'a');\n           \
    \     isUpper = true;\n            }\n            else {\n                newCharArray[i]\
    \ = charArray[i];\n            }\n        }\n        if (isUpper) {\n        \
    \    return new string(newCharArray);\n        }\n        else {\n           \
    \ return new string(newCharArray).ToUpper();\n        }\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"\
    These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <399233065c0f46538d6036a4f7608c30>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <399233065c0f46538d6036a4f7608c30>:0 \n"
  stdout: ''
  timestamp: 1659823363
