name: HumanEval_68_pluck
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n    // your task is to pluck one of the nodes and return it.\n\
  \    // The plucked node should be the node with the smallest even value.\n    //\
  \ If multiple nodes with the same smallest even value are found return the node\
  \ that has smallest index.\n    // The plucked node should be returned in a list,\
  \ [ smalest_value, its index ],\n    // If there are no even values or the given\
  \ array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new\
  \ long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,\
  \ (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n\
  \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
  \    // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n\
  \    // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
  \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
  \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n\
  \    // so we will choose the first zero, which has the smallest index.\n    //\
  \ Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
  \    public static List<long> Pluck(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,\
  \ (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,\
  \ (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if (found) {\n            while (smallest_value % 2 == 0) {\n         \
    \       smallest_value /= 2;\n                smallest_index++;\n            }\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smalest_value = arr.Min();\n        int smalest_index = 0;\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                if (arr[i] < smalest_value) {\n                    smalest_value\
    \ = arr[i];\n                    smalest_index = i;\n                }\n     \
    \       }\n        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = -1;\n  \
    \      long smallest_even_value = -1;\n        foreach (long value in arr) {\n\
    \            if (value % 2 == 0) {\n                if (smallest_even_value ==\
    \ -1) {\n                    smallest_even_value = value;\n                  \
    \  smallest_index = value;\n                } else if (value < smallest_even_value)\
    \ {\n                    smallest_even_value = value;\n                    smallest_index\
    \ = value;\n                }\n            }\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = 0;\n        long\
    \ smallest_index = 0;\n        bool found = false;\n        foreach (long node\
    \ in arr) {\n            if (node % 2 == 0) {\n                smallest_even_value\
    \ = node;\n                smallest_index = arr.IndexOf(node);\n             \
    \   found = true;\n                break;\n            }\n        }\n        if\
    \ (!found) {\n            return result;\n        }\n        List<long> result_list\
    \ = new List<long>();\n        foreach (long node in arr) {\n            if (node\
    \ % 2 == 0) {\n                if (node < smallest_even_value) {\n           \
    \         result_list.Add(smallest_even_value);\n                    result_list.Add(smallest_index);\n\
    \                }\n            }\n        }\n        return result_list;", " \
    \       long smallestEvenValue = 0;\n        long smallestIndex = 0;\n       \
    \ List<long> result = new List<long>();\n        foreach (var item in arr) {\n\
    \            if (item % 2 == 0) {\n                smallestEvenValue = item;\n\
    \                smallestIndex = arr.IndexOf(item);\n            }\n        }\n\
    \        if (smallestEvenValue == 0) {\n            return result;\n        }\n\
    \        List<long> evenValues = new List<long>();\n        List<long> indexValues\
    \ = new List<long>();\n        foreach (var item in arr) {\n            if (item\
    \ % 2 == 0) {\n                evenValues.Add(item);\n                indexValues.Add(arr.IndexOf(item));\n\
    \            }\n        }\n        if (evenValues.Count == 0) {\n            return\
    \ result;\n        }\n        long smallestEvenValue = evenValues.Min();\n   \
    \     long smallestIndex = indexValues.Min();\n        if (smallestEvenValue ==\
    \ smallestEvenValue) {\n            smallestEvenValue = evenValues.Min();\n  \
    \          smallestIndex = indexValues.Min();\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (arr.Count == 0) {\n            return\
    \ result;\n        }\n        long smallest_even_value = arr.Min();\n        long\
    \ smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        while (smallest_index != smallest_even_index) {\n                result.Add(arr[smallest_index]);\n\
    \                smallest_index++;\n            }\n        }\n        else {\n\
    \            while (smallest_index != smallest_even_index) {\n               \
    \ result.Add(arr[smallest_index]);\n                smallest_index++;\n      \
    \      }\n            result.Add(smallest_value);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = arr.IndexOf(smallest_value);\n        long smallest_even_value\
    \ = smallest_value % 2 == 0 ? smallest_value : smallest_value - 1;\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] == smallest_even_value) {\n                found = true;\n         \
    \       result.Add(smallest_value);\n                result.Add(smallest_index);\n\
    \                break;\n            }\n        }\n        if (!found) {\n   \
    \         result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        bool\
    \ found = false;\n        foreach (var node in arr) {\n            if (node.Value\
    \ % 2 == 0) {\n                if (smallest_value == 0) {\n                  \
    \  smallest_value = node.Value;\n                    smallest_index = node.Index;\n\
    \                    found = true;\n                } else if (smallest_value\
    \ < node.Value) {\n                    smallest_value = node.Value;\n        \
    \            smallest_index = node.Index;\n                    found = true;\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        return result;", "        if (arr.Count == 0) {\n           \
    \ return new List<long>();\n        }\n        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallestEvenValue % 2 == 0) {\n                  \
    \  smallestEvenValue = arr[i];\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        foreach (var node in arr) {\n            if (node.Value % 2 ==\
    \ 0) {\n                if (smallest_value < node.Value) {\n                 \
    \   smallest_value = node.Value;\n                    smallest_index = arr.IndexOf(node);\n\
    \                }\n            }\n        }\n        if (smallest_index > 0)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        if (arr.Count == 0) {\n        \
    \    return new List<long>();\n        }\n        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        bool found = false;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            if (found) {\n                    result.Add(smallest_even_value);\n\
    \                    result.Add(smallest_even_index);\n                    return\
    \ result;\n                }\n                found = true;\n                smallest_even_value\
    \ = arr[i];\n                smallest_even_index = i;\n            }\n       \
    \ }\n        if (!found) {\n            return result;\n        }\n        List<long>\
    \ evens = new List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0) {\n                evens.Add(arr[i]);\n     \
    \       }\n        }\n        long smallest_even = evens.Min();\n        long\
    \ smallest_even_index = evens.IndexOf(smallest_even);\n        result.Add(smallest_even);\n\
    \        result.Add(smallest_even_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = arr.Min(x =>\
    \ x % 2 == 0 ? x : 0);\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = 0;\n        long smallest_even_index = 0;\n \
    \       bool found = false;\n        foreach (var node in arr) {\n           \
    \ if (found == true) {\n                if (smallest_even_value < node.Value)\
    \ {\n                    smallest_even_value = node.Value;\n                 \
    \   smallest_even_index = node.Index;\n                }\n            }\n    \
    \        if (node.Value % 2 == 0) {\n                found = true;\n         \
    \   }\n        }\n        if (smallest_even_value == 0) {\n            return\
    \ result;\n        }\n        result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;", "        if (arr.Count == 0) {\n            return new\
    \ List<long>();\n        }\n        List<long> res = new List<long>();\n     \
    \   long smallest_value = 0;\n        int smallest_index = 0;\n        foreach\
    \ (long node in arr) {\n            if (node % 2 == 0) {\n                if (smallest_value\
    \ == 0) {\n                    smallest_value = node;\n                    smallest_index\
    \ = arr.IndexOf(node);\n                } else {\n                    if (smallest_value\
    \ < node) {\n                        smallest_value = node;\n                \
    \        smallest_index = arr.IndexOf(node);\n                    }\n        \
    \        }\n            }\n        }\n        if (smallest_value == 0) {\n   \
    \         return new List<long>();\n        }\n        res.Add(smallest_value);\n\
    \        res.Add(smallest_index);\n        return res;", "        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        long smallest_value = 0;\n        bool found = false;\n      \
    \  foreach (long node in arr) {\n            if (node % 2 == 0) {\n          \
    \      smallest_even_value = node;\n                smallest_index = arr.IndexOf(node);\n\
    \                smallest_value = smallest_even_value;\n                found\
    \ = true;\n            }\n        }\n        if (found) {\n            int index\
    \ = smallest_index;\n            while (index >= 0) {\n                if (smallest_value\
    \ == arr[index]) {\n                    result.Add(smallest_value);\n        \
    \            result.Add(index);\n                    break;\n                }\n\
    \                index--;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smalest_value = 0;\n\
    \        int smalest_index = 0;\n        long smalest_even_value = 0;\n      \
    \  int smalest_even_index = 0;\n        bool has_even_value = false;\n       \
    \ for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                has_even_value = true;\n                smalest_even_value =\
    \ arr[i];\n                smalest_even_index = i;\n            }\n          \
    \  if (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n  \
    \              smalest_index = i;\n            }\n        }\n        if (has_even_value)\
    \ {\n            smalest_value = smalest_even_value;\n            smalest_index\
    \ = smalest_even_index;\n        }\n        result.Add(smalest_value);\n     \
    \   result.Add(smalest_index);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        for (int i = 0; i < arr.Count; i++) {\n                if (arr[i] ==\
    \ smallest_value) {\n                    smallest_index = i;\n               \
    \     break;\n                }\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = 0;\n        long smallest_even_value = 0;\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            long\
    \ value = arr[i];\n            if (value % 2 == 0) {\n                found =\
    \ true;\n                if (value < smallest_value) {\n                    smallest_value\
    \ = value;\n                    smallest_index = i;\n                }\n     \
    \           else if (value == smallest_value) {\n                    smallest_even_value\
    \ = value;\n                }\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = 0;\n        int smallest_even_index = 0;\n\
    \        foreach (var node in arr) {\n            if (node.Value % 2 == 0) {\n\
    \                if (smallest_even_value < node.Value) {\n                   \
    \ smallest_even_value = node.Value;\n                    smallest_even_index =\
    \ arr.IndexOf(node);\n                }\n            }\n        }\n        if\
    \ (smallest_even_value == 0) {\n            return new List<long>();\n       \
    \ }\n        result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smalest_value = 0;\n        long smalest_index = 0;\n        long smalest_index_value\
    \ = 0;\n        long smalest_index_value2 = 0;\n        long smalest_index_value3\
    \ = 0;\n        long smalest_index_value4 = 0;\n        long smalest_index_value5\
    \ = 0;\n        long smalest_index_value6 = 0;\n        long smalest_index_value7\
    \ = 0;\n        long smalest_index_value8 = 0;\n        long smalest_index_value9\
    \ = 0;\n        long smalest_index_value10 = 0;\n        long smalest_index_value11\
    \ = 0;\n        long smalest_index_value12 = 0;\n        long smalest_index_value13\
    \ = 0;\n        long smalest_index_value14 = 0;\n        long smalest_index_value15\
    \ = 0;\n        long smalest_index_value16 = 0;\n        long smalest_index_value17\
    \ = 0;\n        long smalest_index_value18 = 0;\n        long smalest_index_value19\
    \ = 0;\n        long smalest_index_value20 = 0;\n        long smalest_index_value21\
    \ = 0;\n        long smalest_index_value22 = 0;\n        long smalest_index_value23\
    \ = 0;\n        long smalest_index_value24 = 0;\n        long smalest_index_value25\
    \ = 0;\n        long smalest_index_value26 = 0;\n        long smalest_index_value27\
    \ = 0;\n        long smalest_index_value28 = 0;\n        long smalest_index_value29\
    \ = 0;\n        long smalest_index_value30 = 0;\n        long smalest_index_value31\
    \ = 0;\n        long smalest_index_value32 = 0;\n        long smalest_index_value33\
    \ = 0;\n        long smalest_index_value34 = 0;\n        long smalest_index_value35\
    \ = 0;\n        long smalest_index_value36 = 0;\n        long smalest_index_value37\
    \ = 0;\n        long smalest_index_value38 = 0;\n        long smalest_index_value39\
    \ = 0;\n        long smalest_index_value40 = 0;\n        long smalest_index_value41\
    \ = 0;\n        long smalest_index_value42 = 0;\n        long smalest_index_value43\
    \ = 0;\n        long smalest_index_value44 = 0;\n        long smalest_index_value45\
    \ = 0;\n        long smalest_index_value46 = 0;\n        long smalest_index_value47\
    \ = 0;\n        long smalest_index_value48 = 0;\n        long smalest_index_value49\
    \ = 0;\n        "]
stop_tokens:
- "\n    }\n"
