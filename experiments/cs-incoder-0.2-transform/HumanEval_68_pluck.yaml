name: HumanEval_68_pluck
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n    // your task is to pluck one of the nodes and return it.\n\
  \    // The plucked node should be the node with the smallest even value.\n    //\
  \ If multiple nodes with the same smallest even value are found return the node\
  \ that has smallest index.\n    // The plucked node should be returned in a list,\
  \ [ smalest_value, its index ],\n    // If there are no even values or the given\
  \ array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new\
  \ long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,\
  \ (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n\
  \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
  \    // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n\
  \    // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
  \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
  \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n\
  \    // so we will choose the first zero, which has the smallest index.\n    //\
  \ Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
  \    public static List<long> Pluck(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,\
  \ (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,\
  \ (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if (found) {\n            while (smallest_value % 2 == 0) {\n         \
    \       smallest_value /= 2;\n                smallest_index++;\n            }\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smalest_value = arr.Min();\n        int smalest_index = 0;\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                if (arr[i] < smalest_value) {\n                    smalest_value\
    \ = arr[i];\n                    smalest_index = i;\n                }\n     \
    \       }\n        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = -1;\n  \
    \      long smallest_even_value = -1;\n        foreach (long value in arr) {\n\
    \            if (value % 2 == 0) {\n                if (smallest_even_value ==\
    \ -1) {\n                    smallest_even_value = value;\n                  \
    \  smallest_index = value;\n                } else if (value < smallest_even_value)\
    \ {\n                    smallest_even_value = value;\n                    smallest_index\
    \ = value;\n                }\n            }\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = 0;\n        long\
    \ smallest_index = 0;\n        bool found = false;\n        foreach (long node\
    \ in arr) {\n            if (node % 2 == 0) {\n                smallest_even_value\
    \ = node;\n                smallest_index = arr.IndexOf(node);\n             \
    \   found = true;\n                break;\n            }\n        }\n        if\
    \ (!found) {\n            return result;\n        }\n        List<long> result_list\
    \ = new List<long>();\n        foreach (long node in arr) {\n            if (node\
    \ % 2 == 0) {\n                if (node < smallest_even_value) {\n           \
    \         result_list.Add(smallest_even_value);\n                    result_list.Add(smallest_index);\n\
    \                }\n            }\n        }\n        return result_list;", " \
    \       long smallestEvenValue = 0;\n        long smallestIndex = 0;\n       \
    \ List<long> result = new List<long>();\n        foreach (var item in arr) {\n\
    \            if (item % 2 == 0) {\n                smallestEvenValue = item;\n\
    \                smallestIndex = arr.IndexOf(item);\n            }\n        }\n\
    \        if (smallestEvenValue == 0) {\n            return result;\n        }\n\
    \        List<long> evenValues = new List<long>();\n        List<long> indexValues\
    \ = new List<long>();\n        foreach (var item in arr) {\n            if (item\
    \ % 2 == 0) {\n                evenValues.Add(item);\n                indexValues.Add(arr.IndexOf(item));\n\
    \            }\n        }\n        if (evenValues.Count == 0) {\n            return\
    \ result;\n        }\n        long smallestEvenValue = evenValues.Min();\n   \
    \     long smallestIndex = indexValues.Min();\n        if (smallestEvenValue ==\
    \ smallestEvenValue) {\n            smallestEvenValue = evenValues.Min();\n  \
    \          smallestIndex = indexValues.Min();\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (arr.Count == 0) {\n            return\
    \ result;\n        }\n        long smallest_even_value = arr.Min();\n        long\
    \ smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        while (smallest_index != smallest_even_index) {\n                result.Add(arr[smallest_index]);\n\
    \                smallest_index++;\n            }\n        }\n        else {\n\
    \            while (smallest_index != smallest_even_index) {\n               \
    \ result.Add(arr[smallest_index]);\n                smallest_index++;\n      \
    \      }\n            result.Add(smallest_value);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = arr.IndexOf(smallest_value);\n        long smallest_even_value\
    \ = smallest_value % 2 == 0 ? smallest_value : smallest_value - 1;\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] == smallest_even_value) {\n                found = true;\n         \
    \       result.Add(smallest_value);\n                result.Add(smallest_index);\n\
    \                break;\n            }\n        }\n        if (!found) {\n   \
    \         result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        bool\
    \ found = false;\n        foreach (var node in arr) {\n            if (node.Value\
    \ % 2 == 0) {\n                if (smallest_value == 0) {\n                  \
    \  smallest_value = node.Value;\n                    smallest_index = node.Index;\n\
    \                    found = true;\n                } else if (smallest_value\
    \ < node.Value) {\n                    smallest_value = node.Value;\n        \
    \            smallest_index = node.Index;\n                    found = true;\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        return result;", "        if (arr.Count == 0) {\n           \
    \ return new List<long>();\n        }\n        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallestEvenValue % 2 == 0) {\n                  \
    \  smallestEvenValue = arr[i];\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        foreach (var node in arr) {\n            if (node.Value % 2 ==\
    \ 0) {\n                if (smallest_value < node.Value) {\n                 \
    \   smallest_value = node.Value;\n                    smallest_index = arr.IndexOf(node);\n\
    \                }\n            }\n        }\n        if (smallest_index > 0)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        if (arr.Count == 0) {\n        \
    \    return new List<long>();\n        }\n        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        bool found = false;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            if (found) {\n                    result.Add(smallest_even_value);\n\
    \                    result.Add(smallest_even_index);\n                    return\
    \ result;\n                }\n                found = true;\n                smallest_even_value\
    \ = arr[i];\n                smallest_even_index = i;\n            }\n       \
    \ }\n        if (!found) {\n            return result;\n        }\n        List<long>\
    \ evens = new List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0) {\n                evens.Add(arr[i]);\n     \
    \       }\n        }\n        long smallest_even = evens.Min();\n        long\
    \ smallest_even_index = evens.IndexOf(smallest_even);\n        result.Add(smallest_even);\n\
    \        result.Add(smallest_even_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = arr.Min(x =>\
    \ x % 2 == 0 ? x : 0);\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = 0;\n        long smallest_even_index = 0;\n \
    \       bool found = false;\n        foreach (var node in arr) {\n           \
    \ if (found == true) {\n                if (smallest_even_value < node.Value)\
    \ {\n                    smallest_even_value = node.Value;\n                 \
    \   smallest_even_index = node.Index;\n                }\n            }\n    \
    \        if (node.Value % 2 == 0) {\n                found = true;\n         \
    \   }\n        }\n        if (smallest_even_value == 0) {\n            return\
    \ result;\n        }\n        result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;", "        if (arr.Count == 0) {\n            return new\
    \ List<long>();\n        }\n        List<long> res = new List<long>();\n     \
    \   long smallest_value = 0;\n        int smallest_index = 0;\n        foreach\
    \ (long node in arr) {\n            if (node % 2 == 0) {\n                if (smallest_value\
    \ == 0) {\n                    smallest_value = node;\n                    smallest_index\
    \ = arr.IndexOf(node);\n                } else {\n                    if (smallest_value\
    \ < node) {\n                        smallest_value = node;\n                \
    \        smallest_index = arr.IndexOf(node);\n                    }\n        \
    \        }\n            }\n        }\n        if (smallest_value == 0) {\n   \
    \         return new List<long>();\n        }\n        res.Add(smallest_value);\n\
    \        res.Add(smallest_index);\n        return res;", "        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        long smallest_value = 0;\n        bool found = false;\n      \
    \  foreach (long node in arr) {\n            if (node % 2 == 0) {\n          \
    \      smallest_even_value = node;\n                smallest_index = arr.IndexOf(node);\n\
    \                smallest_value = smallest_even_value;\n                found\
    \ = true;\n            }\n        }\n        if (found) {\n            int index\
    \ = smallest_index;\n            while (index >= 0) {\n                if (smallest_value\
    \ == arr[index]) {\n                    result.Add(smallest_value);\n        \
    \            result.Add(index);\n                    break;\n                }\n\
    \                index--;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smalest_value = 0;\n\
    \        int smalest_index = 0;\n        long smalest_even_value = 0;\n      \
    \  int smalest_even_index = 0;\n        bool has_even_value = false;\n       \
    \ for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                has_even_value = true;\n                smalest_even_value =\
    \ arr[i];\n                smalest_even_index = i;\n            }\n          \
    \  if (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n  \
    \              smalest_index = i;\n            }\n        }\n        if (has_even_value)\
    \ {\n            smalest_value = smalest_even_value;\n            smalest_index\
    \ = smalest_even_index;\n        }\n        result.Add(smalest_value);\n     \
    \   result.Add(smalest_index);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        for (int i = 0; i < arr.Count; i++) {\n                if (arr[i] ==\
    \ smallest_value) {\n                    smallest_index = i;\n               \
    \     break;\n                }\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = 0;\n        long smallest_even_value = 0;\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            long\
    \ value = arr[i];\n            if (value % 2 == 0) {\n                found =\
    \ true;\n                if (value < smallest_value) {\n                    smallest_value\
    \ = value;\n                    smallest_index = i;\n                }\n     \
    \           else if (value == smallest_value) {\n                    smallest_even_value\
    \ = value;\n                }\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = 0;\n        int smallest_even_index = 0;\n\
    \        foreach (var node in arr) {\n            if (node.Value % 2 == 0) {\n\
    \                if (smallest_even_value < node.Value) {\n                   \
    \ smallest_even_value = node.Value;\n                    smallest_even_index =\
    \ arr.IndexOf(node);\n                }\n            }\n        }\n        if\
    \ (smallest_even_value == 0) {\n            return new List<long>();\n       \
    \ }\n        result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smalest_value = 0;\n        long smalest_index = 0;\n        long smalest_index_value\
    \ = 0;\n        long smalest_index_value2 = 0;\n        long smalest_index_value3\
    \ = 0;\n        long smalest_index_value4 = 0;\n        long smalest_index_value5\
    \ = 0;\n        long smalest_index_value6 = 0;\n        long smalest_index_value7\
    \ = 0;\n        long smalest_index_value8 = 0;\n        long smalest_index_value9\
    \ = 0;\n        long smalest_index_value10 = 0;\n        long smalest_index_value11\
    \ = 0;\n        long smalest_index_value12 = 0;\n        long smalest_index_value13\
    \ = 0;\n        long smalest_index_value14 = 0;\n        long smalest_index_value15\
    \ = 0;\n        long smalest_index_value16 = 0;\n        long smalest_index_value17\
    \ = 0;\n        long smalest_index_value18 = 0;\n        long smalest_index_value19\
    \ = 0;\n        long smalest_index_value20 = 0;\n        long smalest_index_value21\
    \ = 0;\n        long smalest_index_value22 = 0;\n        long smalest_index_value23\
    \ = 0;\n        long smalest_index_value24 = 0;\n        long smalest_index_value25\
    \ = 0;\n        long smalest_index_value26 = 0;\n        long smalest_index_value27\
    \ = 0;\n        long smalest_index_value28 = 0;\n        long smalest_index_value29\
    \ = 0;\n        long smalest_index_value30 = 0;\n        long smalest_index_value31\
    \ = 0;\n        long smalest_index_value32 = 0;\n        long smalest_index_value33\
    \ = 0;\n        long smalest_index_value34 = 0;\n        long smalest_index_value35\
    \ = 0;\n        long smalest_index_value36 = 0;\n        long smalest_index_value37\
    \ = 0;\n        long smalest_index_value38 = 0;\n        long smalest_index_value39\
    \ = 0;\n        long smalest_index_value40 = 0;\n        long smalest_index_value41\
    \ = 0;\n        long smalest_index_value42 = 0;\n        long smalest_index_value43\
    \ = 0;\n        long smalest_index_value44 = 0;\n        long smalest_index_value45\
    \ = 0;\n        long smalest_index_value46 = 0;\n        long smalest_index_value47\
    \ = 0;\n        long smalest_index_value48 = 0;\n        long smalest_index_value49\
    \ = 0;\n        ", "        if (arr.Count == 0)\n            return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        int smallest_index = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallest_even_value\
    \ < arr[i]) {\n                    smallest_even_value = arr[i];\n           \
    \         smallest_index = i;\n                }\n            }\n        }\n \
    \       result.Add(smallest_even_value);\n        result.Add(smallest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       foreach (long value in arr) {\n            if (value % 2 == 0) {\n   \
    \             if (smallestEvenValue % 2 == 0) {\n                    if (value\
    \ < smallestEvenValue) {\n                        smallestEvenValue = value;\n\
    \                        smallestIndex = arr.IndexOf(value);\n               \
    \     }\n                } else {\n                    if (value < smallestEvenValue)\
    \ {\n                        smallestEvenValue = value;\n                    \
    \    smallestIndex = arr.IndexOf(value);\n                    }\n            \
    \    }\n            }\n        }\n        result.Add(smallestEvenValue);\n   \
    \     result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (arr.Count == 0) {\n            return\
    \ result;\n        }\n        long smallest_value = arr.Min();\n        long smallest_index\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ < smallest_value) {\n                smallest_value = arr[i];\n            \
    \    smallest_index = i;\n            }\n        }\n        if (smallest_value\
    \ % 2 == 0) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \            return result;\n        }\n        List<long> evens = new List<long>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                evens.Add(arr[i]);\n            }\n        }\n       \
    \ long smallest_even = evens.Min();\n        int smallest_even_index = evens.IndexOf(smallest_even);\n\
    \        result.Add(smallest_even);\n        result.Add(smallest_even_index);\n\
    \        return result;", "        if (arr.Count == 0) {\n            return new\
    \ List<long>();\n        }\n        List<long> result = new List<long>();\n  \
    \      long smallest_value = arr.Min();\n        long smallest_index = 0;\n  \
    \      bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n  \
    \          long value = arr[i];\n            if (value % 2 == 0) {\n         \
    \       if (value < smallest_value) {\n                    smallest_value = value;\n\
    \                    smallest_index = i;\n                    found = true;\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        int smallest_index = 0;\n        foreach\
    \ (var node in arr) {\n            if (node.Value % 2 == 0) {\n              \
    \  if (smallest_value < node.Value) {\n                    smallest_value = node.Value;\n\
    \                    smallest_index = arr.IndexOf(node);\n                }\n\
    \            }\n        }\n        if (smallest_index > 0) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        long smalest_value = arr.Min();\n        long smalest_index = 0;\n    \
    \    List<long> result = new List<long>();\n        foreach (long n in arr) {\n\
    \            if (n % 2 == 0) {\n                if (smalest_value == n) {\n  \
    \                  smalest_index = arr.IndexOf(n);\n                }\n      \
    \          else {\n                    smalest_value = n;\n                  \
    \  smalest_index = arr.IndexOf(n);\n                }\n            }\n       \
    \ }\n        if (smalest_index != arr.IndexOf(smalest_value)) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = arr.IndexOf(smallest_value);\n        bool found\
    \ = false;\n        foreach (long value in arr) {\n            if (value % 2 ==\
    \ 0) {\n                found = true;\n                result.Add(value);\n  \
    \              if (smallest_value == value) {\n                    smallest_index\
    \ = arr.IndexOf(value);\n                }\n            }\n        }\n       \
    \ if (!found) {\n            return result;\n        }\n        List<long> result_2\
    \ = new List<long>();\n        foreach (long value in arr) {\n            if (value\
    \ % 2 == 0) {\n                result_2.Add(value);\n            }\n        }\n\
    \        if (result_2.Count > 1) {\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_value);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_2.Remove(smallest_index);\n            result_2.Sort();\n           \
    \ result_", "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if (found) {\n            while (smallest_index > 0) {\n              \
    \  if (arr[smallest_index] % 2 == 0) {\n                    smallest_value +=\
    \ arr[smallest_index];\n                    smallest_index--;\n              \
    \  } else {\n                    break;\n                }\n            }\n  \
    \          result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        } else {\n            return result;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (arr.Count == 0) {\n\
    \            return result;\n        }\n        long smallest_value = 0;\n   \
    \     long smallest_index = 0;\n        bool has_even_value = false;\n       \
    \ for (int i = 0; i < arr.Count; i++) {\n            long value = arr[i];\n  \
    \          if (value % 2 == 0) {\n                has_even_value = true;\n   \
    \         }\n            if (value < smallest_value) {\n                smallest_value\
    \ = value;\n                smallest_index = i;\n            }\n        }\n  \
    \      if (has_even_value) {\n            result.Add(smallest_value);\n      \
    \      result.Add(smallest_index);\n        } else {\n            int smallest_index_with_even_value\
    \ = smallest_index;\n            while (smallest_index_with_even_value < arr.Count\
    \ - 1 && arr[smallest_index_with_even_value] % 2 == 0) {\n                smallest_index_with_even_value++;\n\
    \            }\n            result.Add(smallest_value);\n            result.Add(smallest_index_with_even_value);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        bool\
    \ found = false;\n        foreach (var item in arr) {\n            if (item %\
    \ 2 == 0) {\n                smallest_value = item;\n                smallest_index\
    \ = arr.IndexOf(item);\n                found = true;\n            }\n       \
    \ }\n        if (found) {\n            result.Add(smallest_value);\n         \
    \   result.Add(smallest_index);\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long smalest_value = arr.Min();\n\
    \        int smalest_index = 0;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (smalest_value < arr[i])\
    \ {\n                    smalest_value = arr[i];\n                    smalest_index\
    \ = i;\n                }\n            }\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = arr.Min();\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even_value);\n      \
    \  bool has_even_values = arr.Count > 0;\n        if (has_even_values) {\n   \
    \         int smallest_even_value_index = arr.FindIndex(x => x == smallest_even_value);\n\
    \            if (smallest_even_value_index > 0) {\n                result.Add(smallest_even_value);\n\
    \                result.Add(smallest_even_value_index);\n            }\n     \
    \   }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallestEvenValue % 2 == 0) {\n                  \
    \  smallestEvenValue = arr[i];\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = -1;\n        bool found = false;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            long value = arr[i];\n            if\
    \ (value % 2 == 0) {\n                if (smallest_value == 0) {\n           \
    \         smallest_value = value;\n                    smallest_index = i;\n \
    \                   found = true;\n                } else if (smallest_value <\
    \ value) {\n                    smallest_value = value;\n                    smallest_index\
    \ = i;\n                    found = true;\n                }\n            }\n\
    \        }\n        if (found) {\n            result.Add(smallest_value);\n  \
    \          result.Add(smallest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        int smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ < arr[i]) {\n                    smallestEvenValue = arr[i];\n             \
    \       smallestIndex = i;\n                }\n            }\n        }\n    \
    \    result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ long smallestEven = arr.Min(x => x % 2 == 0 ? x : 0);\n        long smallestIndex\
    \ = arr.IndexOf(smallestEven);\n        result.Add(smallestEven);\n        if\
    \ (smallestIndex != -1) {\n            result.Add(smallestIndex);\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index == -1)\
    \ {\n            return result;\n        }\n        bool found = false;\n    \
    \    long smallest_even_value_plus_one = smallest_even_value + 1;\n        foreach\
    \ (long i in arr) {\n            if (i == smallest_even_value_plus_one) {\n  \
    \              found = true;\n                break;\n            }\n        }\n\
    \        if (found) {\n            result.Add(smallest_even_value);\n        \
    \    result.Add(smallest_even_index);\n            return result;\n        }\n\
    \        long smallest_even_value_plus_two = smallest_even_value + 2;\n      \
    \  foreach (long i in arr) {\n            if (i == smallest_even_value_plus_two)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n            return result;\n  \
    \      }\n        long smallest_even_value_plus_three = smallest_even_value +\
    \ 3;\n        foreach (long i in arr) {\n            if (i == smallest_even_value_plus_three)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n            return result;\n  \
    \      }\n        long smallest_even_value_plus_four = smallest_even_value + 4;\n\
    \        foreach (long i in arr) {\n            if (i == smallest_even_value_plus_four)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n            return result;\n  \
    \      }\n        long smallest_even_value_plus_five = smallest_even_value + 5;\n\
    \        foreach (long i in arr) {\n            if (i == smallest_even_value_plus_five)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n            return result;\n  \
    \      }\n        long smallest_even_value_plus_six = smallest_even_value + 6;\n\
    \        foreach (long i in arr) {\n            if (i == smallest_even_value_plus_six)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n            return result;\n  \
    \      }\n        long smallest_even_value_plus_seven = smallest_even_value +\
    \ 7;\n        foreach (long i in arr) {\n            if (i == smallest_even_value_plus_seven)\
    \ {\n                found = true;\n                break;\n            }", " \
    \       List<long> result = new List<long>();\n        long smallest_value = 0;\n\
    \        long smallest_index = 0;\n        bool found = false;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n         \
    \       found = true;\n                smallest_value = arr[i];\n            \
    \    smallest_index = i;\n            }\n        }\n        if (found) {\n   \
    \         result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        int smallest_index = 0;\n        foreach\
    \ (var node in arr) {\n            if (node.Value % 2 == 0) {\n              \
    \  if (smallest_value < node.Value) {\n                    smallest_value = node.Value;\n\
    \                    smallest_index = arr.IndexOf(node);\n                }\n\
    \            }\n        }\n        if (smallest_index != 0) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEvenValue =\
    \ arr.Min();\n        long smallestIndex = 0;\n        bool foundSmallestEvenValue\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (smallestEvenValue == arr[i]) {\n          \
    \          foundSmallestEvenValue = true;\n                    smallestIndex =\
    \ i;\n                }\n            }\n        }\n        if (foundSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        } else {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ current_value = 0;\n        long current_index = 0;\n        bool found = false;\n\
    \        foreach (var item in arr) {\n            if (item % 2 == 0) {\n     \
    \           current_value = item;\n                current_index = current_index\
    \ + 1;\n            }\n            else {\n                if (current_value ==\
    \ 0) {\n                    smallest_value = item;\n                    smallest_index\
    \ = current_index;\n                    found = true;\n                }\n   \
    \             else {\n                    if (smallest_value < item) {\n     \
    \                   smallest_value = item;\n                        smallest_index\
    \ = current_index;\n                        found = true;\n                  \
    \  }\n                }\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        else {\n            result.Add(0);\n            result.Add(0);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index == arr.Count\
    \ - 1) {\n            return result;\n        }\n        long smallest_value =\
    \ arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = smallest_even_index + 1; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_value);\n\
    \        bool found = false;\n        foreach (long value in arr) {\n        \
    \    if (value % 2 == 0) {\n                if (smallest_value == value) {\n \
    \                   found = true;\n                    break;\n              \
    \  }\n                if (smallest_value < value) {\n                    smallest_value\
    \ = value;\n                    smallest_index = arr.IndexOf(value);\n       \
    \         }\n            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        if (arr.Count == 0) {\n            return new List<long>();\n        }\n\
    \        List<long> result = new List<long>();\n        long smallest_value =\
    \ arr.Min();\n        long smallest_index = 0;\n        bool is_even = true;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            long value = arr[i];\n\
    \            if (value < smallest_value) {\n                smallest_value = value;\n\
    \                smallest_index = i;\n            }\n            if (value ==\
    \ smallest_value && is_even) {\n                result.Add(smallest_value);\n\
    \                result.Add(smallest_index);\n                is_even = false;\n\
    \            }\n        }\n        if (is_even) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEvenValue =\
    \ arr.Min();\n        int smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ % 2 == 0) {\n                    smallestEvenValue = arr[i];\n             \
    \       smallestIndex = i;\n                }\n            }\n        }\n    \
    \    result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ long smallest_value = 0;\n        int smallest_index = 0;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n         \
    \       if (smallest_value < arr[i]) {\n                    smallest_value = arr[i];\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        if (smallest_index > 0) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_value = 0;\n\
    \        long smallest_index = 0;\n        long smallest_even_value = 0;\n   \
    \     long smallest_even_index = 0;\n        bool found = false;\n        foreach\
    \ (var node in arr) {\n            if (found == true) {\n                if (smallest_value\
    \ == 0) {\n                    smallest_value = node;\n                    smallest_index\
    \ = arr.IndexOf(node);\n                }\n                else if (smallest_value\
    \ == node) {\n                    smallest_index = arr.IndexOf(node);\n      \
    \          }\n                else if (smallest_value == node && smallest_index\
    \ == arr.IndexOf(node)) {\n                    smallest_even_value = node;\n \
    \                   smallest_even_index = arr.IndexOf(node);\n               \
    \ }\n                else if (smallest_value == node && smallest_even_index ==\
    \ arr.IndexOf(node)) {\n                    smallest_even_index = arr.IndexOf(node);\n\
    \                }\n            }\n            if (node % 2 == 0) {\n        \
    \        smallest_even_value = node;\n                smallest_even_index = arr.IndexOf(node);\n\
    \                found = true;\n            }\n        }\n        if (smallest_value\
    \ == 0) {\n            return new List<long>();\n        }\n        else if (smallest_even_index\
    \ == arr.IndexOf(smallest_even_value)) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        else if (smallest_index\
    \ == arr.IndexOf(smallest_value)) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        else {\n        \
    \    result.Add(smallest_value);\n            result.Add(smallest_index);\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = 0;\n        long smallest_index = 0;\n   \
    \     foreach (var node in arr) {\n            if (node.Value % 2 == 0) {\n  \
    \              if (smallest_even_value < node.Value) {\n                    smallest_even_value\
    \ = node.Value;\n                    smallest_index = node.Index;\n          \
    \      }\n            }\n        }\n        if (smallest_even_value == 0) {\n\
    \            return result;\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = arr.Min();\n\
    \        int smallest_even_index = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallest_even_value\
    \ < arr[i]) {\n                    smallest_even_value = arr[i];\n           \
    \         smallest_even_index = i;\n                }\n            }\n       \
    \ }\n        if (smallest_even_index != -1) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_even_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        } else {\n            result.Add(smallest_even_value);\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long smallest_value = arr.Min();\n        long smallest_index = 0;\n    \
    \    for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n        result.Add(smallest_value);\n      \
    \  result.Add(smallest_index);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        long smallest_value_index\
    \ = arr.IndexOf(smallest_even_value);\n        long smallest_value = smallest_even_value;\n\
    \        bool found = false;\n        foreach (long value in arr) {\n        \
    \    if (value % 2 == 0) {\n                if (smallest_value == smallest_even_value)\
    \ {\n                    found = true;\n                    smallest_value = value;\n\
    \                    smallest_value_index = arr.IndexOf(value);\n            \
    \    }\n                else {\n                    if (smallest_value < smallest_even_value)\
    \ {\n                        found = true;\n                        smallest_value\
    \ = value;\n                        smallest_value_index = arr.IndexOf(value);\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_value_index);\n\
    \        }\n        else {\n            result.Add(smallest_even_value);\n   \
    \         result.Add(smallest_even_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        long smallestIndex = arr.IndexOf(smallestEven);\n        if (smallestIndex\
    \ == -1) {\n            return result;\n        }\n        bool isEven = true;\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestEvenIndex =\
    \ arr.IndexOf(smallestEvenValue);\n        foreach (long n in arr) {\n       \
    \     if (n % 2 == 0) {\n                isEven = false;\n            }\n    \
    \        if (isEven) {\n                if (smallestEvenValue < n) {\n       \
    \             smallestEvenValue = n;\n                    smallestEvenIndex =\
    \ arr.IndexOf(n);\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestEvenIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (long node in arr) {\n  \
    \          if (node % 2 == 0) {\n                found = true;\n             \
    \   if (smallest_value == 0) {\n                    smallest_value = node;\n \
    \                   smallest_index = arr.IndexOf(node);\n                }\n \
    \               else if (smallest_value < node) {\n                    smallest_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \       }\n            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        if (arr.Count == 0) {\n            return new List<long>();\n        }\n\
    \        List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        long smallestIndex = arr.IndexOf(smallestEven);\n        bool foundSmallestEven\
    \ = false;\n        bool foundSmallestIndex = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            long value = arr[i];\n            if (value\
    \ % 2 == 0) {\n                if (foundSmallestEven) {\n                    result.Add(smallestEven);\n\
    \                    foundSmallestEven = false;\n                    foundSmallestIndex\
    \ = true;\n                }\n                result.Add(value);\n           \
    \     foundSmallestEven = true;\n                foundSmallestIndex = false;\n\
    \            }\n        }\n        if (foundSmallestEven) {\n            result.Add(smallestEven);\n\
    \        }\n        if (foundSmallestIndex) {\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = 0;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] < smallest_value) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = i;\n                found = false;\n\
    \            }\n            if (arr[i] == smallest_value) {\n                found\
    \ = true;\n            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        bool has_even_values = arr.Count > 0;\n        bool has_zeros = arr.Any(x\
    \ => x == 0);\n        if (has_even_values) {\n            int even_value_count\
    \ = arr.Count(x => x % 2 == 0);\n            if (even_value_count > 1) {\n   \
    \             smallest_even_value = arr.Min(x => x % 2 == 0);\n              \
    \  smallest_even_index = arr.IndexOf(smallest_even_value);\n            }\n  \
    \      }\n        if (has_zeros) {\n            int zero_count = arr.Count(x =>\
    \ x == 0);\n            if (zero_count > 1) {\n                smallest_even_value\
    \ = arr.Min(x => x == 0);\n                smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \            }\n        }\n        result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;", "        if (arr.Count == 0)\n            return new\
    \ List<long>();\n        var evens = arr.Where(x => x % 2 == 0).ToList();\n  \
    \      if (evens.Count == 0)\n            return new List<long>();\n        var\
    \ min = evens.Min();\n        var index = evens.IndexOf(min);\n        if (index\
    \ == 0)\n            return new List<long>();\n        var min = evens.Min();\n\
    \        var index = evens.IndexOf(min);\n        if (index == 0)\n          \
    \  return new List<long>();\n        var min = evens.Min();\n        var index\
    \ = evens.IndexOf(min);\n        if (index == 0)\n            return new List<long>();\n\
    \        var min = evens.Min();\n        var index = evens.IndexOf(min);\n   \
    \     if (index == 0)\n            return new List<long>();\n        var min =\
    \ evens.Min();\n        var index = evens.IndexOf(min);\n        if (index ==\
    \ 0)\n            return new List<long>();\n        var min = evens.Min();\n \
    \       var index = evens.IndexOf(min);\n        if (index == 0)\n           \
    \ return new List<long>();\n        var min = evens.Min();\n        var index\
    \ = evens.IndexOf(min);\n        if (index == 0)\n            return new List<long>();\n\
    \        var min = evens.Min();\n        var index = evens.IndexOf(min);\n   \
    \     if (index == 0)\n            return new List<long>();\n        var min =\
    \ evens.Min();\n        var index = evens.IndexOf(min);\n        if (index ==\
    \ 0)\n            return new List<long>();\n        var min = evens.Min();\n \
    \       var index = evens.IndexOf(min);\n        if (index == 0)\n           \
    \ return new List<long>();\n        var min = evens.Min();\n        var index\
    \ = evens.IndexOf(min);\n        if (index == 0)\n            return new List<long>();\n\
    \        var min = evens.Min();\n        var index = evens.IndexOf(min);\n   \
    \     if (index == 0)\n            return new List<long>();\n        var min =\
    \ evens.Min();\n        var index = evens.IndexOf(min);\n        if (index ==\
    \ 0)\n            return new List<long>();\n        var min = evens.Min();\n \
    \       var index = evens.IndexOf(min);\n        if (index == 0)\n           \
    \ return new List<long>();\n        var min = evens.Min();\n        var index\
    \ = evens.IndexOf(min);\n        if (index == 0)\n            return new List<long>();\n\
    \        var min = evens.Min();\n        var index = evens.IndexOf(min);\n   \
    \     if (index == 0)\n            return new List<long>();\n        var min =\
    \ evens.Min();\n        var index = evens.IndexOf(min);\n        if (index ==\
    \ 0)\n            return new List<long>();\n        var min = evens.Min();\n \
    \       var index = evens.Index", "        List<long> result = new List<long>();\n\
    \        if (arr.Count > 0) {\n            long smallest_even_value = arr.Min();\n\
    \            long smallest_even_index = arr.IndexOf(smallest_even_value);\n  \
    \          long smallest_even_value_plus_one = smallest_even_value + 1;\n    \
    \        long smallest_even_index_plus_one = smallest_even_index + 1;\n      \
    \      bool found_even_value = false;\n            bool found_even_index = false;\n\
    \            bool found_even_value_plus_one = false;\n            bool found_even_index_plus_one\
    \ = false;\n            bool found_smallest_even_value = false;\n            bool\
    \ found_smallest_even_index = false;\n            bool found_smallest_even_value_plus_one\
    \ = false;\n            bool found_smallest_even_index_plus_one = false;\n   \
    \         foreach (long node in arr) {\n                if (node == smallest_even_value)\
    \ {\n                    found_even_value = true;\n                }\n       \
    \         if (node == smallest_even_index) {\n                    found_even_index\
    \ = true;\n                }\n                if (node == smallest_even_value_plus_one)\
    \ {\n                    found_even_value_plus_one = true;\n                }\n\
    \                if (node == smallest_even_index_plus_one) {\n               \
    \     found_even_index_plus_one = true;\n                }\n                if\
    \ (node == smallest_even_value) {\n                    found_smallest_even_value\
    \ = true;\n                }\n                if (node == smallest_even_index)\
    \ {\n                    found_smallest_even_index = true;\n                }\n\
    \                if (node == smallest_even_value_plus_one) {\n               \
    \     found_smallest_even_value_plus_one = true;\n                }\n        \
    \        if (node == smallest_even_index_plus_one) {\n                    found_smallest_even_index_plus_one\
    \ = true;\n                }\n            }\n            if (found_even_value)\
    \ {\n                if (found_even_index) {\n                    if (found_even_value_plus_one)\
    \ {\n                        if (found_even_index_plus_one) {\n              \
    \              if (found_smallest_even_value) {\n                            \
    \    if (found_smallest_even_index) {\n                                    if\
    \ (found_smallest_even_value_plus_one) {\n                                   \
    \     if (found_smallest_even_index_plus_one) {\n                            \
    \                result.Add(smallest_even_value);\n                          \
    \                  result.Add(smallest_even_index);\n                        \
    \                    result.Add(smallest_even_value_plus_one);\n             \
    \                               result.Add(smallest_even_index_plus_one);\n  \
    \                                      }\n                                   \
    \ }\n                                }\n                            }\n      \
    \                  }\n                    }\n                }\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ smallest_even_value = 0;\n        long smallest_even_index = 0;\n        bool\
    \ found = false;\n        foreach (long node in arr) {\n            if (node %\
    \ 2 == 0) {\n                if (smallest_value == 0) {\n                    smallest_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \           smallest_even_value = node % 2;\n                    smallest_even_index\
    \ = arr.IndexOf(node) % 2;\n                    found = true;\n              \
    \  }\n                else if (smallest_value == node % 2) {\n               \
    \     smallest_even_value = smallest_even_value;\n                    smallest_even_index\
    \ = smallest_even_index;\n                    found = true;\n                }\n\
    \                else if (smallest_value == node % 2 && smallest_even_index <\
    \ smallest_index) {\n                    smallest_even_value = smallest_value;\n\
    \                    smallest_even_index = smallest_index;\n                 \
    \   found = true;\n                }\n                else if (smallest_value\
    \ == node % 2 && smallest_even_index == smallest_index) {\n                  \
    \  smallest_even_value = smallest_value;\n                    smallest_even_index\
    \ = smallest_index;\n                    found = true;\n                }\n  \
    \              else if (smallest_value == node % 2 && smallest_even_index > smallest_index)\
    \ {\n                    smallest_even_value = smallest_value;\n             \
    \       smallest_even_index = smallest_index;\n                    found = true;\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        else {\n            result.Add(0);\n            result.Add(0);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = 0;\n        long smallest_index = 0;\n   \
    \     long smallest_value = 0;\n        bool found = false;\n        foreach (long\
    \ value in arr) {\n            if (value % 2 == 0) {\n                smallest_even_value\
    \ = value;\n                smallest_index = arr.IndexOf(value);\n           \
    \     smallest_value = value;\n                found = true;\n               \
    \ break;\n            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        } else {\n            result.Add(smallest_value);\n\
    \        }\n        return result;", "        if (arr.Count == 0)\n          \
    \  return new List<long>();\n        long smalest_value = arr.Min();\n       \
    \ long smalest_index = 0;\n        List<long> result = new List<long>();\n   \
    \     foreach (long node in arr) {\n            if (node % 2 == 0) {\n       \
    \         if (node < smalest_value) {\n                    smalest_value = node;\n\
    \                    smalest_index = arr.IndexOf(node);\n                }\n \
    \           }\n        }\n        if (smalest_index != 0)\n            result.Add(smalest_value);\n\
    \        return result;", "        if (arr.Count == 0) {\n            return new\
    \ List<long>();\n        }\n        List<long> result = new List<long>();\n  \
    \      long smallest_value = arr.Min();\n        long smallest_index = 0;\n  \
    \      bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n  \
    \          if (arr[i] < smallest_value) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n                found = true;\n        \
    \    }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_even_index;\n        foreach (var item in arr) {\n            if\
    \ (item % 2 == 0) {\n                if (smallest_value % 2 == 0) {\n        \
    \            smallest_value = item;\n                    smallest_index = arr.IndexOf(item);\n\
    \                }\n                else {\n                    smallest_value\
    \ = smallest_value + item;\n                    smallest_index = arr.IndexOf(smallest_value);\n\
    \                }\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = arr.Min();\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even_value);\n      \
    \  long smallest_value = smallest_even_value;\n        long smallest_index = smallest_even_index;\n\
    \        foreach (long value in arr) {\n            if (value % 2 == 0) {\n  \
    \              if (smallest_value < value) {\n                    smallest_even_value\
    \ = value;\n                    smallest_even_index = arr.IndexOf(value);\n  \
    \                  smallest_value = value;\n                    smallest_index\
    \ = arr.IndexOf(value);\n                }\n            }\n        }\n       \
    \ result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index == -1)\
    \ {\n            return result;\n        }\n        long smallest_value = arr[smallest_even_index];\n\
    \        long smallest_index = smallest_even_index;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_value)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (!found) {\n            return result;\n        }\n     \
    \   List<long> even_values = new List<long>();\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                even_values.Add(arr[i]);\n\
    \            }\n        }\n        long smallest_even_value = even_values.Min();\n\
    \        long smallest_even_index = even_values.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = even_values[smallest_even_index];\n      \
    \  long smallest_index = smallest_even_index;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] == smallest_value) {\n                result.Add(arr[i]);\n\
    \            }\n        }\n        return result;", "        long smalest_value\
    \ = 0;\n        int smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (var item in arr) {\n            if (item % 2 == 0) {\n     \
    \           if (item < smalest_value) {\n                    smalest_value = item;\n\
    \                    smalest_index = arr.IndexOf(item);\n                }\n \
    \           }\n        }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_value = 0;\n\
    \        long smallest_index = 0;\n        bool has_even_value = false;\n    \
    \    foreach (long node in arr) {\n            if (node % 2 == 0) {\n        \
    \        has_even_value = true;\n            }\n            if (has_even_value)\
    \ {\n                if (smallest_value < node) {\n                    smallest_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \       }\n            }\n        }\n        if (smallest_value == 0) {\n    \
    \        return new List<long>();\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        long smallest_even_value = 0;\n        long smallest_even_index\
    \ = 0;\n        bool found = false;\n        foreach (var node in arr) {\n   \
    \         if (node % 2 == 0) {\n                if (smallest_value == 0) {\n \
    \                   smallest_value = node;\n                    smallest_index\
    \ = arr.IndexOf(node);\n                    found = true;\n                }\n\
    \                else {\n                    smallest_even_value = node;\n   \
    \                 smallest_even_index = arr.IndexOf(node);\n                }\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        else {\n   \
    \         result.Add(smallest_value);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = 0;\n        bool has_even_value = false;\n    \
    \    for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                has_even_value = true;\n            }\n            if (arr[i]\
    \ == smallest_value) {\n                smallest_index = i;\n            }\n \
    \       }\n        if (has_even_value) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        } else {\n            result.Add(smallest_value);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallestEvenValue % 2 == 0) {\n                  \
    \  if (smallestIndex < i) {\n                        smallestEvenValue = arr[i];\n\
    \                        smallestIndex = i;\n                    }\n         \
    \       } else {\n                    if (smallestEvenValue < arr[i]) {\n    \
    \                    smallestEvenValue = arr[i];\n                        smallestIndex\
    \ = i;\n                    }\n                }\n            }\n        }\n \
    \       result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n  \
    \      for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                if (smallestEvenValue < arr[i]) {\n                    smallestEvenValue\
    \ = arr[i];\n                    smallestIndex = i;\n                }\n     \
    \       }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = arr.Min(x => x % 2 == 0 ? x : 0);\n        long\
    \ smallest_index = arr.IndexOf(smallest_even_value);\n        if (smallest_index\
    \ != -1) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        long smalest_value = 0;\n      \
    \  long smalest_index = 0;\n        List<long> result = new List<long>();\n  \
    \      foreach (var item in arr) {\n            if (item % 2 == 0) {\n       \
    \         if (item < smalest_value) {\n                    smalest_value = item;\n\
    \                    smalest_index = arr.IndexOf(item);\n                }\n \
    \           }\n        }\n        if (smalest_index != arr.Count - 1) {\n    \
    \        result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        bool\
    \ found = false;\n        foreach (long node in arr) {\n            if (node %\
    \ 2 == 0) {\n                if (smallest_value == 0) {\n                    smallest_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \           found = true;\n                } else if (smallest_value < node) {\n\
    \                    smallest_value = node;\n                    smallest_index\
    \ = arr.IndexOf(node);\n                    found = true;\n                }\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        if (arr.Count == 0) {\n            return new List<long>();\n        }\n\
    \        List<long> result = new List<long>();\n        long smallest_value =\
    \ 0;\n        long smallest_index = 0;\n        long smallest_even_value = 0;\n\
    \        long smallest_even_index = 0;\n        long smallest_odd_value = 0;\n\
    \        long smallest_odd_index = 0;\n        bool odd_found = false;\n     \
    \   bool even_found = false;\n        bool even_found2 = false;\n        bool\
    \ even_found3 = false;\n        bool even_found4 = false;\n        bool even_found5\
    \ = false;\n        bool even_found6 = false;\n        bool even_found7 = false;\n\
    \        bool even_found8 = false;\n        bool even_found9 = false;\n      \
    \  bool even_found10 = false;\n        bool even_found11 = false;\n        bool\
    \ even_found12 = false;\n        bool even_found13 = false;\n        bool even_found14\
    \ = false;\n        bool even_found15 = false;\n        bool even_found16 = false;\n\
    \        bool even_found17 = false;\n        bool even_found18 = false;\n    \
    \    bool even_found19 = false;\n        bool even_found20 = false;\n        bool\
    \ even_found21 = false;\n        bool even_found22 = false;\n        bool even_found23\
    \ = false;\n        bool even_found24 = false;\n        bool even_found25 = false;\n\
    \        bool even_found26 = false;\n        bool even_found27 = false;\n    \
    \    bool even_found28 = false;\n        bool even_found29 = false;\n        bool\
    \ even_found30 = false;\n        bool even_found31 = false;\n        bool even_found32\
    \ = false;\n        bool even_found33 = false;\n        bool even_found34 = false;\n\
    \        bool even_found35 = false;\n        bool even_found36 = false;\n    \
    \    bool even_found37 = false;\n        bool even_found38 = false;\n        bool\
    \ even_found39 = false;\n        bool even_found40 = false;\n        bool even_found41\
    \ = false;\n        bool even_found42 = false;\n        bool even_found43 = false;\n\
    \        bool even_found44 = false;\n        bool even_found45 = false;\n    \
    \    bool even_found46 = false;\n        bool even_found47 = false;\n        bool\
    \ even_found48 = false;\n        bool even_found49 = false;\n        bool even_found50\
    \ = false;\n        bool even_found51 = false;\n        bool even_found52 = false;\n\
    \        bool even_found53 = false;\n        ", "        List<long> result = new\
    \ List<long>();\n        if (arr.Count > 0) {\n            long smallest_value\
    \ = arr.Min();\n            long smallest_index = 0;\n            bool found =\
    \ false;\n            for (int i = 0; i < arr.Count; i++) {\n                if\
    \ (arr[i] == smallest_value) {\n                    found = true;\n          \
    \          smallest_index = i;\n                }\n            }\n           \
    \ if (found) {\n                result.Add(smallest_value);\n                result.Add(smallest_index);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        int smallest_index\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ < smallest_value) {\n                smallest_value = arr[i];\n            \
    \    smallest_index = i;\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      long smallestIndex = 0;\n        bool isSmallestEvenValue = true;\n   \
    \     foreach (long node in arr) {\n            if (node % 2 == 0) {\n       \
    \         if (smallestEvenValue % 2 == 0) {\n                    isSmallestEvenValue\
    \ = true;\n                    smallestEvenValue = node;\n                   \
    \ smallestIndex = arr.IndexOf(node);\n                } else {\n             \
    \       isSmallestEvenValue = false;\n                }\n            }\n     \
    \   }\n        if (isSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min(x => x % 2 == 0 ? x : 0);\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        List<long> even_values = new List<long>();\n        foreach (long\
    \ value in arr) {\n            if (value % 2 == 0) {\n                even_values.Add(value);\n\
    \            }\n        }\n        if (even_values.Count > 0) {\n            smallest_even_value\
    \ = even_values.Min(x => x);\n            smallest_even_index = even_values.IndexOf(smallest_even_value);\n\
    \        }\n        result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = arr.Min();\n        int smallest_even_index =\
    \ arr.IndexOf(smallest_even_value);\n        if (smallest_even_index == -1) {\n\
    \            return result;\n        }\n        long smallest_value = arr[smallest_even_index];\n\
    \        long smallest_index = smallest_even_index;\n        for (int i = smallest_even_index\
    \ + 1; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n           \
    \     smallest_value = arr[i];\n                smallest_index = i;\n        \
    \    }\n        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        long smallest_value = smallest_even_value;\n\
    \        long smallest_index = smallest_even_index;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallest_value == smallest_even_value) {\n       \
    \             smallest_value = arr[i];\n                    smallest_index = i;\n\
    \                    found = true;\n                }\n                else if\
    \ (smallest_value < arr[i]) {\n                    smallest_value = arr[i];\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        if (found) {\n            result.Add(smallest_value);\n   \
    \         result.Add(smallest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEven = arr.Min(x\
    \ => x % 2 == 0 ? x : 0);\n        int smallestIndex = 0;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < smallestEven)\
    \ {\n                smallestEven = arr[i];\n                smallestIndex = i;\n\
    \            }\n        }\n        result.Add(smallestEven);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min(x => x % 2 == 0 ? x : 0);\n        long\
    \ smallestIndex = arr.FindIndex(x => x % 2 == 0 ? x : 0);\n        if (smallestEvenValue\
    \ == 0) {\n            return result;\n        }\n        if (smallestIndex ==\
    \ 0) {\n            result.Add(smallestEvenValue);\n            return result;\n\
    \        }\n        long smallestEvenValueIndex = arr.FindIndex(x => x % 2 ==\
    \ 0 ? x : 0);\n        if (smallestEvenValueIndex == 0) {\n            result.Add(smallestEvenValue);\n\
    \            return result;\n        }\n        long smallestEvenValueIndex2 =\
    \ arr.FindIndex(x => x % 2 == 0 ? x : 0);\n        if (smallestEvenValueIndex2\
    \ == 0) {\n            result.Add(smallestEvenValue);\n            return result;\n\
    \        }\n        long smallestEvenValueIndex3 = arr.FindIndex(x => x % 2 ==\
    \ 0 ? x : 0);\n        if (smallestEvenValueIndex3 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            return result;\n        }\n        long smallestEvenValueIndex4 =\
    \ arr.FindIndex(x => x % 2 == 0 ? x : 0);\n        if (smallestEvenValueIndex4\
    \ == 0) {\n            result.Add(smallestEvenValue);\n            return result;\n\
    \        }\n        long smallestEvenValueIndex5 = arr.FindIndex(x => x % 2 ==\
    \ 0 ? x : 0);\n        if (smallestEvenValueIndex5 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            return result;\n        }\n        long smallestEvenValueIndex6 =\
    \ arr.FindIndex(x => x % 2 == 0 ? x : 0);\n        if (smallestEvenValueIndex6\
    \ == 0) {\n            result.Add(smallestEvenValue);\n            return result;\n\
    \        }\n        long smallestEvenValueIndex7 = arr.FindIndex(x => x % 2 ==\
    \ 0 ? x : 0);\n        if (smallestEvenValueIndex7 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            return result;\n        }\n        long smallestEvenValueIndex8 =\
    \ arr.FindIndex(x => x % 2 == 0 ? x : 0);\n        if (smallestEvenValueIndex8\
    \ == 0) {\n            result.Add(smallestEvenValue);\n            return result;\n\
    \        }\n        long smallestEvenValueIndex9 = arr.FindIndex(x => x % 2 ==\
    \ 0 ? x : 0);\n        if (smallestEvenValueIndex9 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            return result;\n        }\n        long smallestEvenValueIndex10\
    \ = arr.FindIndex(x => x % 2 == 0 ? x : 0);\n        if (smallestEvenValueIndex10\
    \ == 0) {\n            result.Add(smallestEvenValue);\n            return result;\n\
    \        }\n        long smallestEvenValueIndex11 = arr.FindIndex(x => x % 2 ==\
    \ 0 ? x : 0);\n        if (smallestEvenValueIndex11 == 0) {", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      long smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue < arr[i])\
    \ {\n                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = 0;\n        long\
    \ smallest_index = 0;\n        bool found = false;\n        foreach (var item\
    \ in arr) {\n            if (item % 2 == 0) {\n                smallest_even_value\
    \ = item;\n                smallest_index = arr.IndexOf(item);\n             \
    \   found = true;\n                break;\n            }\n        }\n        if\
    \ (found) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        long smallest_value = smallest_even_value;\n\
    \        long smallest_index = smallest_even_index;\n        bool found = false;\n\
    \        foreach (var item in arr) {\n            if (item % 2 == 0) {\n     \
    \           if (smallest_value == smallest_even_value) {\n                   \
    \ smallest_value = item;\n                    smallest_index = arr.IndexOf(item);\n\
    \                    found = true;\n                }\n                else if\
    \ (smallest_value < item) {\n                    smallest_value = item;\n    \
    \                smallest_index = arr.IndexOf(item);\n                    found\
    \ = true;\n                }\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        int smallest_index = 0;\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                if (smallest_value\
    \ == 0) {\n                    smallest_value = item;\n                    smallest_index\
    \ = arr.IndexOf(item);\n                } else {\n                    if (smallest_value\
    \ < item) {\n                        smallest_value = item;\n                \
    \        smallest_index = arr.IndexOf(item);\n                    }\n        \
    \        }\n            }\n        }\n        if (smallest_value != 0) {\n   \
    \         result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min(x => x % 2 == 0);\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index == arr.Count\
    \ - 1) {\n            return result;\n        }\n        long smallest_value =\
    \ arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        while (smallest_value % 2 == 0) {\n            smallest_value /= 2;\n\
    \            smallest_index++;\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (var item in arr) {\n            if (item % 2 == 0) {\n     \
    \           smallest_even_value = item;\n                smallest_index = arr.IndexOf(item);\n\
    \            }\n        }\n        if (smallest_even_value == 0) {\n         \
    \   return result;\n        }\n        List<long> result_list = new List<long>();\n\
    \        foreach (var item in arr) {\n            if (item % 2 == 0) {\n     \
    \           if (item < smallest_even_value) {\n                    result_list.Add(item);\n\
    \                }\n            }\n        }\n        if (result_list.Count >\
    \ 0) {\n            result_list.Sort();\n            result.Add(result_list[0]);\n\
    \            result.Add(result_list[1]);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = 0;\n        bool has_even_value = false;\n    \
    \    foreach (long value in arr) {\n            if (value % 2 == 0) {\n      \
    \          has_even_value = true;\n            }\n            if (value < smallest_value)\
    \ {\n                smallest_value = value;\n                smallest_index =\
    \ arr.IndexOf(value);\n            }\n        }\n        if (has_even_value) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        } else {\n            result.Add(smallest_value);\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ smallest_value = 0;\n        long smallest_index = 0;\n        bool found =\
    \ false;\n        foreach (long node in arr) {\n            if (node % 2 == 0)\
    \ {\n                found = true;\n                if (smallest_value == 0) {\n\
    \                    smallest_value = node;\n                    smallest_index\
    \ = arr.IndexOf(node);\n                } else {\n                    if (node\
    \ < smallest_value) {\n                        smallest_value = node;\n      \
    \                  smallest_index = arr.IndexOf(node);\n                    }\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = -1;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] < smallest_value) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = i;\n                found = true;\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = -1;\n        bool found = false;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            long value = arr[i];\n           \
    \ if (value == smallest_value) {\n                found = true;\n            \
    \    smallest_index = i;\n            }\n            if (found && value < smallest_value)\
    \ {\n                smallest_value = value;\n                smallest_index =\
    \ i;\n            }\n        }\n        if (smallest_index != -1) {\n        \
    \    result.Add(smallest_value);\n            result.Add(smallest_index);\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        long smallest_value = smallest_even_value;\n\
    \        long smallest_index = smallest_even_index;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n                found = true;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        } else {\n            result.Add(smallest_value);\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ smallest_value = 0;\n        int smallest_index = 0;\n        foreach (long\
    \ node in arr) {\n            if (node % 2 == 0) {\n                if (smallest_value\
    \ < node) {\n                    smallest_value = node;\n                    smallest_index\
    \ = arr.IndexOf(node);\n                }\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        foreach (long node in arr) {\n            if (node % 2 == 0) {\n\
    \                if (smallest_value == 0) {\n                    smallest_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \       } else if (smallest_value < node) {\n                    smallest_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \       }\n            }\n        }\n        if (smallest_value == 0) {\n    \
    \        return new List<long>();\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      long smallestIndex = 0;\n        bool isSmallestEvenValueFound = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallestEvenValue)\
    \ {\n                isSmallestEvenValueFound = true;\n                smallestIndex\
    \ = i;\n            }\n        }\n        if (isSmallestEvenValueFound) {\n  \
    \          result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = 0;\n\
    \        bool has_even = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                has_even = true;\n      \
    \      }\n            if (arr[i] == smallest_value) {\n                smallest_index\
    \ = i;\n            }\n        }\n        if (has_even) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        } else {\n            if (smallest_index\
    \ == 0) {\n                result.Add(smallest_value);\n            } else {\n\
    \                result.Add(smallest_index);\n            }\n        }\n     \
    \   return result;", "        long smalest_value = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        long smalest_index = 0;\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                if (item\
    \ < smalest_value) {\n                    smalest_value = item;\n            \
    \        smalest_index = arr.IndexOf(item);\n                }\n            }\n\
    \        }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        if (arr.Count == 0) {\n\
    \            return result;\n        }\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = 0;\n        bool found = false;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            long value = arr[i];\n           \
    \ if (value % 2 == 0) {\n                if (smallest_value < value) {\n     \
    \               smallest_value = value;\n                    smallest_index =\
    \ i;\n                    found = true;\n                }\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smallest_value);\n    \
    \        result.Add(smallest_index);\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min(x => x % 2 == 0);\n        long smallest_index = arr.FindIndex(x =>\
    \ x % 2 == 0);\n        if (smallest_even_value == 0) return result;\n       \
    \ if (smallest_index == -1) return result;\n        bool found = false;\n    \
    \    for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                if (arr[i] < smallest_even_value) {\n                    smallest_even_value\
    \ = arr[i];\n                    smallest_index = i;\n                    found\
    \ = true;\n                }\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index == -1)\
    \ {\n            return result;\n        }\n        long smallest_value = arr[smallest_even_index];\n\
    \        long smallest_index = smallest_even_index;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_value)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (!found) {\n            return result;\n        }\n     \
    \   for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] != smallest_value)\
    \ {\n                continue;\n            }\n            long value = arr[i];\n\
    \            if (value % 2 == 0) {\n                smallest_value = value;\n\
    \                smallest_index = i;\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = arr.Min();\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even_value);\n      \
    \  if (smallest_even_index == arr.Count - 1) {\n            result.Add(smallest_even_value);\n\
    \            return result;\n        }\n        long smallest_value = arr[smallest_even_index\
    \ + 1];\n        long smallest_index = smallest_even_index + 1;\n        foreach\
    \ (long value in arr) {\n            if (value % 2 == 0) {\n                if\
    \ (value < smallest_value) {\n                    smallest_value = value;\n  \
    \                  smallest_index = arr.IndexOf(value);\n                }\n \
    \           }\n        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smalest_value = arr.Min();\n        int smalest_index = 0;\n      \
    \  for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                if (smalest_value < arr[i]) {\n                    smalest_value\
    \ = arr[i];\n                    smalest_index = i;\n                }\n     \
    \       }\n        }\n        if (smalest_index != 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min(x => x % 2 == 0);\n        int smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        int smallest_index\
    \ = smallest_even_index;\n        for (int i = smallest_even_index + 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = i;\n            }\n        }\n   \
    \     result.Add(smallest_value);\n        result.Add(smallest_index);\n     \
    \   return result;", "        List<long> result = new List<long>();\n        long\
    \ smallest_even_value = 0;\n        int smallest_index = 0;\n        foreach (long\
    \ node in arr) {\n            if (node % 2 == 0) {\n                smallest_even_value\
    \ = node;\n                smallest_index = arr.IndexOf(node);\n            }\n\
    \        }\n        if (smallest_even_value != 0) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_even_index;\n        foreach (long value in arr) {\n            if\
    \ (value % 2 == 0) {\n                if (smallest_value == smallest_even_value)\
    \ {\n                    smallest_value = value;\n                    smallest_index\
    \ = arr.IndexOf(value);\n                }\n                else {\n         \
    \           if (smallest_value < smallest_even_value) {\n                    \
    \    smallest_value = value;\n                        smallest_index = arr.IndexOf(value);\n\
    \                    }\n                }\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = arr.IndexOf(smallest_value);\n        long smallest_even_value\
    \ = smallest_value % 2 == 0 ? smallest_value : smallest_value - 1;\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] == smallest_even_value) {\n                found = true;\n         \
    \       break;\n            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        } else {\n            result.Add(smallest_value);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = 0;\n        long smallest_index = 0;\n   \
    \     long smallest_value = 0;\n        bool found = false;\n        foreach (var\
    \ node in arr) {\n            if (node.Value % 2 == 0) {\n                smallest_even_value\
    \ = node.Value;\n                smallest_index = arr.IndexOf(node);\n       \
    \         smallest_value = node.Value;\n                found = true;\n      \
    \      }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min(x => x % 2 == 0);\n        int smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index > 0) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        bool has_even_values = false;\n\
    \        foreach (long node in arr) {\n            if (node % 2 == 0) {\n    \
    \            has_even_values = true;\n                smallest_even_value = node;\n\
    \                smallest_index = arr.IndexOf(node);\n            }\n        }\n\
    \        if (has_even_values) {\n            int smallest_even_value_index = arr.IndexOf(smallest_even_value);\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_even_value_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min(x => x % 2 == 0);\n        long smallest_even_index\
    \ = arr.FindIndex(x => x % 2 == 0);\n        if (smallest_even_value == 0) {\n\
    \            return result;\n        }\n        long smallest_value = arr.Min(x\
    \ => x);\n        long smallest_index = arr.FindIndex(x => x == smallest_value);\n\
    \        if (smallest_value == 0) {\n            return result;\n        }\n \
    \       if (smallest_index == -1) {\n            return result;\n        }\n \
    \       if (smallest_even_value == 1) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n            return result;\n       \
    \ }\n        long smallest_even_value_plus_one = smallest_even_value + 1;\n  \
    \      long smallest_even_index_plus_one = smallest_even_index + 1;\n        List<long>\
    \ even_values = new List<long>();\n        List<long> even_indexes = new List<long>();\n\
    \        foreach (long value in arr) {\n            if (value % 2 == 0) {\n  \
    \              even_values.Add(value);\n                even_indexes.Add(arr.FindIndex(x\
    \ => x == value));\n            }\n        }\n        if (even_values.Count ==\
    \ 1) {\n            result.Add(even_values[0]);\n            result.Add(even_indexes[0]);\n\
    \            return result;\n        }\n        List<long> even_values_plus_one\
    \ = new List<long>();\n        List<long> even_indexes_plus_one = new List<long>();\n\
    \        foreach (long value in even_values) {\n            even_values_plus_one.Add(value\
    \ + 1);\n            even_indexes_plus_one.Add(even_indexes[even_values.FindIndex(x\
    \ => x == value)] + 1);\n        }\n        if (even_values_plus_one.Count ==\
    \ 1) {\n            result.Add(even_values_plus_one[0]);\n            result.Add(even_indexes_plus_one[0]);\n\
    \            return result;\n        }\n        List<long> even_values_plus_one_plus_one\
    \ = new List<long>();\n        List<long> even_indexes_plus_one_plus_one = new\
    \ List<long>();\n        foreach (long value in even_values_plus_one) {\n    \
    \        even_values_plus_one_plus_one.Add(value + 1);\n            even_indexes_plus_one_plus_one.Add(even_indexes_plus_one[even_values_plus_one.FindIndex(x\
    \ => x == value)] + 1);\n        }\n        if (even_values_plus_one_plus_one.Count\
    \ == 1) {\n            result.Add(even_values_plus_one_plus_one[0]);\n       \
    \     result.Add(even_indexes_plus_one_plus_one[0]);\n            return result;\n\
    \        }\n        List<long> even_values_plus_one_plus_one_plus_one = new List<long>();\n\
    \        List<long> even_indexes_plus_one_plus_one_plus_", "        List<long>\
    \ result = new List<long>();\n        long smalest_value = arr.Min();\n      \
    \  long smalest_index = 0;\n        bool found = false;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n             \
    \   found = true;\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n        if (found) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        int smallest_index = 0;\n        foreach (long node in arr) {\n\
    \            if (node % 2 == 0) {\n                if (smallest_even_value < node)\
    \ {\n                    smallest_even_value = node;\n                    smallest_index\
    \ = arr.IndexOf(node);\n                }\n            }\n        }\n        if\
    \ (smallest_even_value == 0) {\n            return new List<long>();\n       \
    \ }\n        result.Add(smallest_even_value);\n        result.Add(smallest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index == -1)\
    \ {\n            return result;\n        }\n        long smallest_value = arr[smallest_even_index];\n\
    \        long smallest_index = smallest_even_index;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_value)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (!found) {\n            return result;\n        }\n     \
    \   long smallest_index = smallest_even_index;\n        for (int i = smallest_even_index\
    \ + 1; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n           \
    \     smallest_value = arr[i];\n                smallest_index = i;\n        \
    \        found = true;\n                break;\n            }\n        }\n   \
    \     if (!found) {\n            return result;\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        if (arr.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = arr.Min();\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even_value);\n      \
    \  long smallest_value = smallest_even_value;\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            long value = arr[i];\n            if (value % 2 == 0) {\n       \
    \         if (smallest_value == smallest_even_value) {\n                    smallest_value\
    \ = value;\n                    smallest_index = i;\n                    found\
    \ = true;\n                }\n                else {\n                    if (smallest_value\
    \ < value) {\n                        smallest_value = value;\n              \
    \          smallest_index = i;\n                        found = true;\n      \
    \              }\n                }\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (arr[i] < smallestEvenValue) {\n                  \
    \  smallestEvenValue = arr[i];\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (var node in arr) {\n            if (smallest_value == 0) {\n\
    \                smallest_value = node;\n                smallest_index = arr.IndexOf(node);\n\
    \            } else if (smallest_value == node) {\n                smallest_index\
    \ = arr.IndexOf(node);\n            } else if (smallest_value % 2 == 0) {\n  \
    \              smallest_value = node;\n                smallest_index = arr.IndexOf(node);\n\
    \            }\n        }\n        if (smallest_value == 0) {\n            return\
    \ new List<long>();\n        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        int smallestIndex = 0;\n  \
    \      for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0\
    \ && arr[i] < smallestEvenValue) {\n                smallestEvenValue = arr[i];\n\
    \                smallestIndex = i;\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = 0;\n        bool found = false;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n   \
    \             smallest_value = arr[i];\n                smallest_index = i;\n\
    \                found = true;\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = 0;\n        int smallest_even_index = 0;\n\
    \        bool found = false;\n        foreach (long node in arr) {\n         \
    \   if (node % 2 == 0) {\n                smallest_even_value = node;\n      \
    \          smallest_even_index = arr.IndexOf(node);\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ smallest_even_value = 0;\n        long smallest_even_index = 0;\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                smallest_even_value\
    \ = item;\n                smallest_even_index = arr.IndexOf(item);\n        \
    \    }\n            if (item < smallest_value) {\n                smallest_value\
    \ = item;\n                smallest_index = arr.IndexOf(item);\n            }\n\
    \        }\n        if (smallest_even_index == arr.Count - 1) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n            return result;\n       \
    \ }\n        if (smallest_even_index > 0) {\n            smallest_value = arr[smallest_even_index];\n\
    \            smallest_index = smallest_even_index;\n        }\n        smallest_value\
    \ = arr[smallest_index];\n        smallest_index = smallest_index;\n        smallest_even_value\
    \ = arr[smallest_even_index];\n        smallest_even_index = smallest_even_index;\n\
    \        foreach (var item in arr.Skip(smallest_even_index + 1)) {\n         \
    \   if (item % 2 == 0) {\n                smallest_even_value = item;\n      \
    \          smallest_even_index = arr.IndexOf(item);\n            }\n         \
    \   if (item < smallest_value) {\n                smallest_value = item;\n   \
    \             smallest_index = arr.IndexOf(item);\n            }\n        }\n\
    \        if (smallest_even_index == arr.Count - 1) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n            return result;\n       \
    \ }\n        if (smallest_even_index > 0) {\n            smallest_value = arr[smallest_even_index];\n\
    \            smallest_index = smallest_even_index;\n        }\n        smallest_value\
    \ = arr[smallest_index];\n        smallest_index = smallest_index;\n        smallest_even_value\
    \ = arr[smallest_even_index];\n        smallest_even_index = smallest_even_index;\n\
    \        foreach (var item in arr.Skip(smallest_even_index + 1)) {\n         \
    \   if (item % 2 == 0) {\n                smallest_even_value = item;\n      \
    \          smallest_even_index = arr.IndexOf(item);\n            }\n         \
    \   if (item < smallest_value) {\n                smallest_value = item;\n   \
    \             smallest_index = arr.IndexOf(item);\n            }\n        }\n\
    \        if (smallest_even_index == arr.Count - 1) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n            return result;\n       \
    \ }\n        if (smallest_even_index > 0) {\n            smallest_value = arr[smallest_even_index];\n\
    \            smallest_index = smallest_even_index;\n        }\n        smallest_value\
    \ = arr[smallest_index];\n        smallest_", "        List<long> result = new\
    \ List<long>();\n        long smallest_value = arr.Min();\n        int smallest_index\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ < smallest_value) {\n                smallest_value = arr[i];\n            \
    \    smallest_index = i;\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = arr.IndexOf(smallest_value);\n        bool found = false;\n\
    \        foreach (long value in arr) {\n            if (value % 2 == 0) {\n  \
    \              found = true;\n                result.Add(value);\n           \
    \     if (smallest_value == value) {\n                    smallest_index = arr.IndexOf(value);\n\
    \                }\n            }\n        }\n        if (!found || arr.Count\
    \ == 0) {\n            return result;\n        }\n        List<long> evens = new\
    \ List<long>();\n        foreach (long value in arr) {\n            if (value\
    \ % 2 == 0) {\n                evens.Add(value);\n            }\n        }\n \
    \       List<long> evens_pluck_result = Pluck(evens);\n        if (evens_pluck_result.Count\
    \ > 0) {\n            evens_pluck_result.Insert(0, smallest_value);\n        \
    \    evens_pluck_result.Insert(0, smallest_index);\n            return evens_pluck_result;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = 0;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            long value = arr[i];\n            if (value == smallest_value) {\n\
    \                found = true;\n                result.Add(value);\n         \
    \       result.Add(i);\n            }\n            if (value == smallest_value\
    \ && found == true) {\n                smallest_index = i;\n            }\n  \
    \      }\n        if (smallest_index == 0) {\n            return result;\n   \
    \     }\n        List<long> temp = new List<long>();\n        for (int i = 0;\
    \ i < smallest_index; i++) {\n            temp.Add(arr[i]);\n        }\n     \
    \   temp.Add(smallest_value);\n        temp.Add(smallest_index);\n        return\
    \ temp;", "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if (found) {\n            for (int i = 0; i < arr.Count; i++) {\n     \
    \           if (arr[i] == smallest_value) {\n                    result.Add(smallest_value);\n\
    \                    result.Add(smallest_index);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long smallest_even_value =\
    \ 0;\n        long smallest_index = 0;\n        bool found = false;\n        foreach\
    \ (var node in arr) {\n            if (found == true) {\n                if (smallest_even_value\
    \ < node.Value) {\n                    smallest_even_value = node.Value;\n   \
    \                 smallest_index = node.Index;\n                }\n          \
    \  }\n            if (node.Value % 2 == 0) {\n                found = true;\n\
    \                if (smallest_even_value < node.Value) {\n                   \
    \ smallest_even_value = node.Value;\n                    smallest_index = node.Index;\n\
    \                }\n            }\n        }\n        if (smallest_even_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = 0;\n        bool found = false;\n        foreach (long\
    \ value in arr) {\n            if (value % 2 == 0) {\n                if (smallest_value\
    \ < value) {\n                    smallest_value = value;\n                  \
    \  smallest_index = arr.IndexOf(value);\n                    found = true;\n \
    \               }\n            }\n        }\n        if (found) {\n          \
    \  result.Add(smallest_value);\n            result.Add(smallest_index);\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = 0;\n        long smallest_index = 0;\n   \
    \     foreach (var item in arr) {\n            if (item % 2 == 0) {\n        \
    \        if (smallest_even_value < item) {\n                    smallest_even_value\
    \ = item;\n                    smallest_index = arr.IndexOf(item);\n         \
    \       }\n            }\n        }\n        if (smallest_even_value == 0) {\n\
    \            return new List<long>();\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      long smallestIndex = 0;\n        bool foundSmallestEvenValue = false;\n\
    \        bool foundSmallestIndex = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ == arr[i]) {\n                    foundSmallestEvenValue = true;\n         \
    \           smallestIndex = i;\n                }\n            }\n        }\n\
    \        if (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_value = 0;\n\
    \        int smallest_index = 0;\n        foreach (var node in arr) {\n      \
    \      if (smallest_value == 0) {\n                smallest_value = node;\n  \
    \              smallest_index = arr.IndexOf(node);\n            } else if (smallest_value\
    \ == node) {\n                smallest_index++;\n            } else if (smallest_value\
    \ < node) {\n                smallest_value = node;\n                smallest_index\
    \ = arr.IndexOf(node);\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        if (arr.Count\
    \ == 0)\n            return new List<long>();\n        List<long> result = new\
    \ List<long>();\n        long smallest_value = arr.Min();\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n                found = true;\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == arr.Count - 1) {\n            result.Add(smallest_even_value);\n\
    \            return result;\n        }\n        long smallest_odd_value = arr[smallest_even_index\
    \ + 1];\n        long smallest_odd_index = arr.IndexOf(smallest_odd_value);\n\
    \        if (smallest_odd_index == arr.Count - 1) {\n            result.Add(smallest_odd_value);\n\
    \            return result;\n        }\n        long smallest_odd_value_2 = arr[smallest_odd_index\
    \ + 1];\n        long smallest_odd_index_2 = arr.IndexOf(smallest_odd_value_2);\n\
    \        if (smallest_odd_index_2 == arr.Count - 1) {\n            result.Add(smallest_odd_value_2);\n\
    \            return result;\n        }\n        long smallest_odd_value_3 = arr[smallest_odd_index_2\
    \ + 1];\n        long smallest_odd_index_3 = arr.IndexOf(smallest_odd_value_3);\n\
    \        if (smallest_odd_index_3 == arr.Count - 1) {\n            result.Add(smallest_odd_value_3);\n\
    \            return result;\n        }\n        long smallest_odd_value_4 = arr[smallest_odd_index_3\
    \ + 1];\n        long smallest_odd_index_4 = arr.IndexOf(smallest_odd_value_4);\n\
    \        if (smallest_odd_index_4 == arr.Count - 1) {\n            result.Add(smallest_odd_value_4);\n\
    \            return result;\n        }\n        long smallest_odd_value_5 = arr[smallest_odd_index_4\
    \ + 1];\n        long smallest_odd_index_5 = arr.IndexOf(smallest_odd_value_5);\n\
    \        if (smallest_odd_index_5 == arr.Count - 1) {\n            result.Add(smallest_odd_value_5);\n\
    \            return result;\n        }\n        long smallest_odd_value_6 = arr[smallest_odd_index_5\
    \ + 1];\n        long smallest_odd_index_6 = arr.IndexOf(smallest_odd_value_6);\n\
    \        if (smallest_odd_index_6 == arr.Count - 1) {\n            result.Add(smallest_odd_value_6);\n\
    \            return result;\n        }\n        long smallest_odd_value_7 = arr[smallest_odd_index_6\
    \ + 1];\n        long smallest_odd_index_7 = arr.IndexOf(smallest_odd_value_7);\n\
    \        if (smallest_odd_index_7 == arr.Count - 1) {\n            result.Add(smallest_odd_value_7);\n\
    \            return result;\n        }\n        long smallest_odd_value_8 = arr[smallest_odd_index_7\
    \ + 1];\n        long smallest_od", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index != -1)\
    \ {\n            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        if (arr.Count > 0) {\n            foreach (var item in arr.Skip(smallest_even_index))\
    \ {\n                if (item % 2 == 0) {\n                    result.Add(item);\n\
    \                    result.Add(arr.IndexOf(item));\n                }\n     \
    \       }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long smallestEvenValue = arr.Min();\n        long smallestIndex\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (smallestEvenValue % 2 == 0) {\n           \
    \         smallestEvenValue = arr[i];\n                    smallestIndex = i;\n\
    \                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (arr.Count == 0) {\n            return\
    \ result;\n        }\n        long minValue = arr.Min();\n        long minIndex\
    \ = 0;\n        long minEvenValue = minValue / 2;\n        long minEvenIndex =\
    \ 0;\n        bool isEven = true;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            long value = arr[i];\n            if (isEven) {\n           \
    \     if (value == minEvenValue) {\n                    minEvenIndex = i;\n  \
    \              }\n                isEven = false;\n            } else {\n    \
    \            if (value == minEvenValue) {\n                    minEvenIndex =\
    \ i;\n                }\n                isEven = true;\n            }\n     \
    \   }\n        result.Add(minValue);\n        result.Add(minIndex);\n        if\
    \ (minEvenIndex != 0) {\n            result.Add(minEvenValue);\n            result.Add(minEvenIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        bool found = false;\n        foreach\
    \ (long value in arr) {\n            if (value % 2 == 0) {\n                if\
    \ (smallest_even_value == value) {\n                    found = true;\n      \
    \              break;\n                }\n                if (smallest_even_index\
    \ < arr.IndexOf(value)) {\n                    smallest_even_value = value;\n\
    \                    smallest_even_index = arr.IndexOf(value);\n             \
    \   }\n            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] != smallest_value) {\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if (found) {\n            for (int i = 0; i < arr.Count; i++) {\n     \
    \           if (arr[i] == smallest_value) {\n                    smallest_index\
    \ = i;\n                    break;\n                }\n            }\n       \
    \ }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min(x => x % 2 == 0 ? x : 0);\n        long\
    \ smallestIndex = arr.IndexOf(smallestEvenValue);\n        if (smallestEvenValue\
    \ == 0) {\n            return result;\n        }\n        if (smallestIndex !=\
    \ -1) {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        if (arr.Count == 0) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long smallest_value =\
    \ arr.Min();\n        long smallest_index = arr.IndexOf(smallest_value);\n   \
    \     long smallest_even_value = smallest_value % 2 == 0 ? smallest_value : smallest_value\
    \ - 1;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            long value = arr[i];\n            if (value == smallest_even_value)\
    \ {\n                found = true;\n                result.Add(smallest_value);\n\
    \                result.Add(smallest_index);\n                break;\n       \
    \     }\n            if (value == smallest_value) {\n                found = true;\n\
    \                result.Add(smallest_value);\n                result.Add(smallest_index);\n\
    \                break;\n            }\n            if (value < smallest_value)\
    \ {\n                found = true;\n                result.Add(value);\n     \
    \           result.Add(smallest_index);\n                break;\n            }\n\
    \        }\n        if (!found) return new List<long>();\n        return result;",
  "        List<long> result = new List<long>();\n        if (arr.Count == 0) {\n\
    \            return result;\n        }\n        long smallest_even_value = arr.Min();\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even_value);\n      \
    \  long smallest_value = smallest_even_value;\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                found = true;\n         \
    \       if (smallest_value == smallest_even_value) {\n                    smallest_value\
    \ = arr[i];\n                    smallest_index = i;\n                }\n    \
    \        }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEvenValue =\
    \ arr.Min();\n        long smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ % 2 == 0) {\n                    if (smallestEvenValue < arr[i]) {\n       \
    \                 smallestEvenValue = arr[i];\n                        smallestIndex\
    \ = i;\n                    }\n                }\n            }\n        }\n \
    \       result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long smallest_even_value = arr.Min();\n        long smallest_even_index =\
    \ arr.IndexOf(smallest_even_value);\n        long smallest_value = smallest_even_value;\n\
    \        long smallest_index = smallest_even_index;\n        foreach (long value\
    \ in arr) {\n            if (value % 2 == 0) {\n                if (smallest_value\
    \ == smallest_even_value) {\n                    if (smallest_index == arr.IndexOf(value))\
    \ {\n                        result.Add(smallest_value);\n                   \
    \     result.Add(smallest_index);\n                        break;\n          \
    \          }\n                    else {\n                        smallest_value\
    \ = value;\n                        smallest_index = arr.IndexOf(value);\n   \
    \                 }\n                }\n                else {\n             \
    \       smallest_even_value = value;\n                    smallest_even_index\
    \ = arr.IndexOf(value);\n                }\n            }\n        }\n       \
    \ if (result.Count == 0) {\n            return new List<long>();\n        }\n\
    \        else {\n            return result;\n        }", "        if (arr.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = arr.Min();\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even_value);\n      \
    \  bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] % 2 == 0) {\n                if (smallest_even_value < arr[i])\
    \ {\n                    smallest_even_value = arr[i];\n                    smallest_even_index\
    \ = i;\n                    found = true;\n                }\n            }\n\
    \        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index != -1) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if (found) {\n            while (smallest_value % 2 == 0) {\n         \
    \       smallest_value /= 2;\n                smallest_even_index++;\n       \
    \     }\n            smallest_value = arr[smallest_even_index];\n            smallest_index\
    \ = smallest_even_index;\n        }\n        result.Add(smallest_value);\n   \
    \     result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = arr.IndexOf(smallest_value);\n        long smallest_even_value\
    \ = smallest_value % 2 == 0 ? smallest_value : smallest_value - 1;\n        bool\
    \ found = false;\n        foreach (long value in arr) {\n            if (value\
    \ % 2 == 0) {\n                if (smallest_even_value == value) {\n         \
    \           found = true;\n                    break;\n                }\n   \
    \             else if (smallest_even_value < value) {\n                    smallest_even_value\
    \ = value;\n                    smallest_index = arr.IndexOf(value);\n       \
    \         }\n            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        int smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        List<long>\
    \ even_values = new List<long>();\n        List<long> even_indexes = new List<long>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                even_values.Add(arr[i]);\n                even_indexes.Add(i);\n\
    \            }\n        }\n        even_values.Sort();\n        even_indexes.Sort();\n\
    \        bool found = false;\n        for (int i = 0; i < even_values.Count; i++)\
    \ {\n            if (even_values[i] == smallest_even_value) {\n              \
    \  found = true;\n                break;\n            }\n        }\n        if\
    \ (found) {\n            int index = even_indexes[even_values.Count - 1];\n  \
    \          result.Add(smallest_value);\n            result.Add(index);\n     \
    \   }\n        return result;", "        long smallest_value = arr.Min();\n  \
    \      long smallest_index = -1;\n        List<long> result = new List<long>();\n\
    \        foreach (long node in arr) {\n            if (node % 2 == 0) {\n    \
    \            if (smallest_value == 0 || node < smallest_value) {\n           \
    \         smallest_value = node;\n                    smallest_index = arr.IndexOf(node);\n\
    \                }\n            }\n        }\n        if (smallest_index == -1)\
    \ {\n            return new List<long>();\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = 0;\n        int\
    \ smallest_index = 0;\n        bool found = false;\n        foreach (long node\
    \ in arr) {\n            if (node % 2 == 0) {\n                smallest_even_value\
    \ = node;\n                smallest_index = arr.IndexOf(node);\n             \
    \   found = true;\n                break;\n            }\n        }\n        if\
    \ (found) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        int smallest_index = 0;\n        bool\
    \ has_even_value = false;\n        foreach (var node in arr) {\n            if\
    \ (node.Value % 2 == 0) {\n                has_even_value = true;\n          \
    \  }\n            if (node.Value < smallest_value) {\n                smallest_value\
    \ = node.Value;\n                smallest_index = arr.IndexOf(node);\n       \
    \     }\n        }\n        if (has_even_value) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        } else {\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (arr.Count == 0) {\n            return result;\n        }\n      \
    \  long smallest_value = arr.Min();\n        long smallest_index = 0;\n      \
    \  bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] < smallest_value) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n                found = true;\n        \
    \    }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smalest_value = 0;\n\
    \        long smalest_index = 0;\n        long smalest_even_value = 0;\n     \
    \   long smalest_even_index = 0;\n        long smalest_even_index_in_array = 0;\n\
    \        long smalest_even_index_in_array_in_array = 0;\n        long smalest_even_index_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array =\
    \ 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if (found) {\n            for (int i = 0; i < arr.Count; i++) {\n     \
    \           if (arr[i] == smallest_value) {\n                    result.Add(smallest_value);\n\
    \                    result.Add(smallest_index);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long smallest_even_value =\
    \ 0;\n        long smallest_index = 0;\n        bool found = false;\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                smallest_even_value\
    \ = n;\n                smallest_index = arr.IndexOf(n);\n                found\
    \ = true;\n                break;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        } else {\n            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        bool isSmallestEvenValue = true;\n        bool isSmallestIndex = true;\n\
    \        foreach (long value in arr) {\n            if (value % 2 == 0) {\n  \
    \              if (smallestEvenValue < value) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = arr.IndexOf(value);\n        \
    \            isSmallestEvenValue = true;\n                    isSmallestIndex\
    \ = true;\n                } else if (smallestEvenValue == value) {\n        \
    \            isSmallestEvenValue = true;\n                    isSmallestIndex\
    \ = true;\n                } else if (smallestEvenValue > value) {\n         \
    \           isSmallestEvenValue = true;\n                    isSmallestIndex =\
    \ false;\n                }\n            } else {\n                if (smallestEvenValue\
    \ < value) {\n                    smallestEvenValue = value;\n               \
    \     smallestIndex = arr.IndexOf(value);\n                    isSmallestEvenValue\
    \ = false;\n                    isSmallestIndex = true;\n                } else\
    \ if (smallestEvenValue == value) {\n                    isSmallestEvenValue =\
    \ true;\n                    isSmallestIndex = true;\n                } else if\
    \ (smallestEvenValue > value) {\n                    isSmallestEvenValue = true;\n\
    \                    isSmallestIndex = false;\n                }\n           \
    \ }\n        }\n        if (isSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        } else {\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index == -1)\
    \ {\n            return result;\n        }\n        long smallest_value = arr[smallest_even_index];\n\
    \        long smallest_index = smallest_even_index;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] != smallest_value)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            smallest_value = arr[smallest_even_index];\n\
    \            smallest_index = smallest_even_index;\n        }\n        bool found2\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ != smallest_value) {\n                found2 = true;\n                break;\n\
    \            }\n        }\n        if (found2) {\n            smallest_value =\
    \ arr[smallest_even_index];\n            smallest_index = smallest_even_index;\n\
    \        }\n        if (smallest_even_index == arr.Count - 1) {\n            return\
    \ result;\n        }\n        long smallest_value2 = arr[smallest_even_index +\
    \ 1];\n        long smallest_index2 = smallest_even_index + 1;\n        bool found3\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ != smallest_value2) {\n                found3 = true;\n                break;\n\
    \            }\n        }\n        if (found3) {\n            smallest_value2\
    \ = arr[smallest_even_index + 1];\n            smallest_index2 = smallest_even_index\
    \ + 1;\n        }\n        if (smallest_even_index == arr.Count - 2) {\n     \
    \       return result;\n        }\n        long smallest_value3 = arr[smallest_even_index\
    \ + 2];\n        long smallest_index3 = smallest_even_index + 2;\n        bool\
    \ found4 = false;\n        for (int i = 0; i < arr.Count; i++) {\n           \
    \ if (arr[i] != smallest_value3) {\n                found4 = true;\n         \
    \       break;\n            }\n        }\n        if (found4) {\n            smallest_value3\
    \ = arr[smallest_even_index + 2];\n            smallest_index3 = smallest_even_index\
    \ + 2;\n        }\n        if (smallest_even_index == arr.Count - 3) {\n     \
    \       return result;\n        }\n        long smallest_value4 = arr[smallest_even_index\
    \ + 3];\n        long smallest_index4 = smallest_even_index + 3;\n        bool\
    \ found5 = false;\n        for (int i = 0; i < arr.Count; i++) {\n           \
    \ if (arr[i] != smallest_value4) {\n                found5 = true;\n         \
    \       break;\n            }\n        }\n        if (found5) {\n            smallest_value4\
    \ = arr[smallest_even_index + 3];\n            smallest_index4 = smallest_even_index\
    \ + 3;\n        }\n", "        List<long> result = new List<long>();\n       \
    \ long smallestEven = arr.Min();\n        int smallestIndex = -1;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < smallestEven) {\n                smallestEven = arr[i];\n                smallestIndex\
    \ = i;\n            }\n        }\n        result.Add(smallestEven);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_value = 0;\n        int smallest_index = 0;\n        bool\
    \ found = false;\n        foreach (long value in arr) {\n            if (value\
    \ % 2 == 0) {\n                if (smallest_value == 0) {\n                  \
    \  smallest_value = value;\n                    smallest_index = arr.IndexOf(value);\n\
    \                    found = true;\n                } else if (smallest_value\
    \ < value) {\n                    smallest_value = value;\n                  \
    \  smallest_index = arr.IndexOf(value);\n                    found = true;\n \
    \               }\n            }\n        }\n        if (found) {\n          \
    \  result.Add(smallest_value);\n            result.Add(smallest_index);\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n        result.Add(smallest_value);\n      \
    \  result.Add(smallest_index);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] != smallest_value) {\n                continue;\n    \
    \        }\n            found = true;\n            long value = arr[i];\n    \
    \        if (value % 2 == 0) {\n                smallest_value = value;\n    \
    \            smallest_index = i;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        bool\
    \ found = false;\n        foreach (var item in arr) {\n            if (item %\
    \ 2 == 0) {\n                found = true;\n                smallest_value = item;\n\
    \                smallest_index = arr.IndexOf(item);\n            }\n        }\n\
    \        if (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        int smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index == -1)\
    \ {\n            return result;\n        }\n        long smallest_value = arr[smallest_even_index];\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;", "        if (arr.Count == 0) {\n        \
    \    return new List<long>();\n        }\n        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = 0;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                result.Add(smallest_value);\n                result.Add(smallest_index);\n\
    \                break;\n            }\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n        if (!found) {\n            return new\
    \ List<long>();\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (var node in arr) {\n   \
    \         if (node.Value % 2 == 0) {\n                smallest_even_value = node.Value;\n\
    \                smallest_index = arr.IndexOf(node);\n                found =\
    \ true;\n            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = -1;\n        bool found = false;\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smallest_value\
    \ == n) {\n                    found = true;\n                    smallest_index\
    \ = arr.IndexOf(n);\n                }\n                else if (smallest_value\
    \ < n) {\n                    smallest_value = n;\n                    smallest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min(x => x % 2 == 0 ? x : 0);\n      \
    \  long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_even_index);\n        return result;", "        if\
    \ (arr.Count == 0)\n            return new List<long>();\n        var minValue\
    \ = arr.Min();\n        var minIndex = arr.FindIndex(x => x == minValue);\n  \
    \      if (minIndex == -1)\n            return new List<long>();\n        var\
    \ minEvenIndex = minIndex - 1;\n        var minEvenValue = arr[minEvenIndex];\n\
    \        var minEvenIndexList = arr.FindIndex(x => x == minEvenValue);\n     \
    \   if (minEvenIndexList == -1)\n            return new List<long>();\n      \
    \  var minEvenIndexListCount = minEvenIndexList.Count;\n        if (minEvenIndexListCount\
    \ > 1)\n            return new List<long>();\n        var minEvenIndexListMinValue\
    \ = minEvenIndexList.Min();\n        var minEvenIndexListMinIndex = minEvenIndexList.FindIndex(x\
    \ => x == minEvenIndexListMinValue);\n        if (minEvenIndexListMinIndex ==\
    \ -1)\n            return new List<long>();\n        var minEvenIndexListMinIndexCount\
    \ = minEvenIndexListMinIndex.Count;\n        if (minEvenIndexListMinIndexCount\
    \ > 1)\n            return new List<long>();\n        var minEvenIndexListMinIndexMinValue\
    \ = minEvenIndexListMinIndex.Min();\n        var minEvenIndexListMinIndexMinIndex\
    \ = minEvenIndexListMinIndex.FindIndex(x => x == minEvenIndexListMinIndexMinValue);\n\
    \        if (minEvenIndexListMinIndexMinIndex == -1)\n            return new List<long>();\n\
    \        var minEvenIndexListMinIndexMinIndexCount = minEvenIndexListMinIndexMinIndex.Count;\n\
    \        if (minEvenIndexListMinIndexMinIndexCount > 1)\n            return new\
    \ List<long>();\n        var minEvenIndexListMinIndexMinIndexMinValue = minEvenIndexListMinIndexMinIndex.Min();\n\
    \        var minEvenIndexListMinIndexMinIndexMinIndex = minEvenIndexListMinIndexMinIndex.FindIndex(x\
    \ => x == minEvenIndexListMinIndexMinIndexMinValue);\n        if (minEvenIndexListMinIndexMinIndexMinIndex\
    \ == -1)\n            return new List<long>();\n        var minEvenIndexListMinIndexMinIndexMinIndexCount\
    \ = minEvenIndexListMinIndexMinIndexMinIndex.Count;\n        if (minEvenIndexListMinIndexMinIndexMinIndexCount\
    \ > 1)\n            return new List<long>();\n        var minEvenIndexListMinIndexMinIndexMinIndexMinValue\
    \ = minEvenIndexListMinIndexMinIndexMinIndex.Min();\n        var minEvenIndexListMinIndexMinIndexMinIndexMinIndex\
    \ = minEvenIndexListMinIndexMinIndexMinIndex.FindIndex(x => x == minEvenIndexListMinIndexMinIndexMinIndexMinValue);\n\
    \        if (min", "        List<long> result = new List<long>();\n        long\
    \ smallest_even_value = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] != smallest_value) {\n       \
    \         continue;\n            }\n            found = true;\n            long\
    \ value = arr[i];\n            long index = i;\n            while (index > 0 &&\
    \ arr[index / 2] != value) {\n                index = (index / 2);\n         \
    \   }\n            if (index == arr.Count - 1) {\n                result.Add(value);\n\
    \            } else {\n                result.Add(value);\n                result.Add(index);\n\
    \            }\n        }\n        if (!found) {\n            return result;\n\
    \        }\n        if (result.Count > 1) {\n            int smallest_index =\
    \ result.Min();\n            int smallest_value = result[smallest_index];\n  \
    \          int smallest_even_index = smallest_index / 2;\n            int smallest_even_value\
    \ = arr[smallest_even_index];\n            if (smallest_even_value == smallest_value)\
    \ {\n                result.Remove(smallest_even_index);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        bool found = false;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            if (smallest_even_value == arr[i]) {\n                    found =\
    \ true;\n                    break;\n                }\n                if (smallest_even_index\
    \ < i) {\n                    smallest_even_value = arr[i];\n                \
    \    smallest_even_index = i;\n                }\n            }\n        }\n \
    \       if (found) {\n            result.Add(smallest_even_value);\n         \
    \   result.Add(smallest_even_index);\n        }\n        return result;", "  \
    \      if (arr.Count == 0) {\n            return new List<long>();\n        }\n\
    \        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                found = true;\n         \
    \       result.Add(arr[i]);\n                break;\n            }\n        }\n\
    \        if (!found) {\n            return new List<long>();\n        }\n    \
    \    if (result.Count > 1) {\n            int smallest_index = smallest_even_index;\n\
    \            int smallest_value_index = smallest_even_index;\n            for\
    \ (int i = 0; i < result.Count; i++) {\n                if (result[i] < smallest_value)\
    \ {\n                    smallest_value_index = i;\n                    smallest_value\
    \ = result[i];\n                }\n                if (result[i] < smallest_index)\
    \ {\n                    smallest_index = result[i];\n                }\n    \
    \        }\n            result.RemoveAt(smallest_value_index);\n            result.Insert(smallest_index,\
    \ smallest_value);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        bool found_even_value\
    \ = false;\n        foreach (long value in arr) {\n            if (value % 2 ==\
    \ 0) {\n                found_even_value = true;\n                if (value <\
    \ smallest_even_value) {\n                    smallest_even_value = value;\n \
    \                   smallest_even_index = arr.IndexOf(value);\n              \
    \  }\n            }\n        }\n        if (found_even_value) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        int smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] == smallest_even_value) {\n                found =\
    \ true;\n                break;\n            }\n        }\n        if (!found)\
    \ {\n            return result;\n        }\n        long smallest_value = arr[smallest_even_index];\n\
    \        for (int i = smallest_even_index + 1; i < arr.Count; i++) {\n       \
    \     if (arr[i] < smallest_value) {\n                smallest_value = arr[i];\n\
    \                smallest_even_index = i;\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_even_index);\n        return result;", "        long\
    \ smallest_even_value = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == arr.Count - 1) {\n            return new List<long>();\n\
    \        }\n        long smallest_value = arr[smallest_even_index + 1];\n    \
    \    List<long> result = new List<long>();\n        bool found = false;\n    \
    \    for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] != smallest_value)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smallest_value);\n    \
    \        result.Add(smallest_even_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = smallest_even_index\
    \ + 1; i < arr.Count; i++) {\n            long value = arr[i];\n            if\
    \ (value % 2 == 0) {\n                if (value < smallest_value) {\n        \
    \            smallest_value = value;\n                    smallest_index = i;\n\
    \                    found = true;\n                }\n            }\n       \
    \ }\n        if (found) {\n            result.Add(smallest_value);\n         \
    \   result.Add(smallest_index);\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = 0;\n        bool found = false;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n \
    \               smallest_value = arr[i];\n                smallest_index = i;\n\
    \                found = true;\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallestEvenValue < arr[i]) {\n                  \
    \  smallestEvenValue = arr[i];\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (long n in arr) {\n     \
    \       if (n % 2 == 0) {\n                smallest_value = n;\n             \
    \   smallest_index = arr.IndexOf(n);\n                found = true;\n        \
    \    }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  foreach (var node in arr) {\n            if (found == true) {\n           \
    \     if (smallest_even_value < node.Value) {\n                    smallest_even_value\
    \ = node.Value;\n                    smallest_index = node.Index;\n          \
    \      }\n            }\n            if (node.Value % 2 == 0) {\n            \
    \    found = true;\n            }\n        }\n        if (found == true) {\n \
    \           result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = 0;\n        long smallest_index = 0;\n   \
    \     bool found = false;\n        foreach (long n in arr) {\n            if (n\
    \ % 2 == 0) {\n                smallest_even_value = n;\n                smallest_index\
    \ = arr.IndexOf(n);\n                found = true;\n            }\n        }\n\
    \        if (found) {\n            result.Add(smallest_even_value);\n        \
    \    result.Add(smallest_index);\n        }\n        return result;", "      \
    \  List<long> result = new List<long>();\n        long smallest_even_value = arr.Min(x\
    \ => x % 2 == 0);\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;", "        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            if (smalest_value < arr[i]) {\n                    smalest_value\
    \ = arr[i];\n                    smalest_index = i;\n                }\n     \
    \       }\n        }\n        if (smalest_index != 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = 0;\n        bool is_even = true;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n \
    \               smallest_value = arr[i];\n                smallest_index = i;\n\
    \            }\n            if (arr[i] % 2 == 0) {\n                is_even =\
    \ false;\n            }\n        }\n        if (is_even) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        int smallestIndex = -1;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                if (smallestEven == arr[i])\
    \ {\n                    smallestIndex = i;\n                }\n             \
    \   else {\n                    smallestEven = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if (smallestIndex\
    \ != -1) {\n            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (arr.Count > 0) {\n            long smallestEvenValue = arr.Min();\n\
    \            long smallestIndex = 0;\n            for (int i = 0; i < arr.Count;\
    \ i++) {\n                if (arr[i] % 2 == 0 && arr[i] < smallestEvenValue) {\n\
    \                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  foreach (var item in arr) {\n            if (item % 2 == 0) {\n           \
    \     smallest_even_value = item;\n                smallest_index = arr.IndexOf(item);\n\
    \                found = true;\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = 0;\n        long smallest_index = 0;\n   \
    \     long smallest_value = 0;\n        long smallest_index2 = 0;\n        long\
    \ smallest_value2 = 0;\n        bool found = false;\n        foreach (var item\
    \ in arr) {\n            if (item % 2 == 0) {\n                smallest_even_value\
    \ = item;\n                smallest_index = arr.IndexOf(item);\n             \
    \   found = true;\n            }\n        }\n        if (found) {\n          \
    \  smallest_value = smallest_even_value;\n            smallest_index2 = smallest_index;\n\
    \            smallest_value2 = smallest_even_value;\n            foreach (var\
    \ item in arr) {\n                if (item % 2 == 0) {\n                    if\
    \ (smallest_value <= item) {\n                        smallest_value = item;\n\
    \                        smallest_index2 = arr.IndexOf(item);\n              \
    \          smallest_value2 = item;\n                    }\n                }\n\
    \            }\n            result.Add(smallest_value);\n            result.Add(smallest_index2);\n\
    \            result.Add(smallest_value2);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                smallest_even_value = arr[i];\n                smallest_index\
    \ = i;\n                found = true;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        int smallest_index = 0;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            if (smallest_value == 0) {\n                    smallest_value =\
    \ arr[i];\n                    smallest_index = i;\n                } else if\
    \ (arr[i] < smallest_value) {\n                    smallest_value = arr[i];\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        if (smallest_value != 0) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index != -1) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        else {\n   \
    \         result.Add(smallest_even_value);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_even_index_plus_one = smallest_even_index + 1;\n      \
    \  long smallest_even_value_plus_one = smallest_even_value + 1;\n        bool\
    \ found = false;\n        foreach (long value in arr) {\n            if (value\
    \ % 2 == 0) {\n                if (smallest_even_value == value) {\n         \
    \           found = true;\n                }\n                else {\n       \
    \             smallest_even_value = value;\n                    smallest_even_index\
    \ = arr.IndexOf(value);\n                    smallest_even_index_plus_one = smallest_even_index\
    \ + 1;\n                    smallest_even_value_plus_one = smallest_even_value\
    \ + 1;\n                }\n            }\n        }\n        if (found) {\n  \
    \          result.Add(smallest_even_value);\n            result.Add(smallest_even_index_plus_one);\n\
    \        }\n        else {\n            result.Add(smallest_even_value_plus_one);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallestEvenValue < arr[i]) {\n                  \
    \  smallestEvenValue = arr[i];\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = 0;\n        long\
    \ smallestIndex = 0;\n        foreach (var node in arr) {\n            if (smallestEvenValue\
    \ == 0) {\n                smallestEvenValue = node;\n                smallestIndex\
    \ = arr.IndexOf(node);\n            }\n            if (node % 2 == 0) {\n    \
    \            if (smallestEvenValue < node) {\n                    smallestEvenValue\
    \ = node;\n                    smallestIndex = arr.IndexOf(node);\n          \
    \      }\n            }\n        }\n        result.Add(smallestEvenValue);\n \
    \       result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      long smallestIndex = 0;\n        bool foundSmallestEvenValue = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (!foundSmallestEvenValue) {\n                    foundSmallestEvenValue\
    \ = true;\n                    smallestEvenValue = arr[i];\n                 \
    \   smallestIndex = i;\n                }\n            }\n        }\n        if\
    \ (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n   \
    \         result.Add(smallestIndex);\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        if (arr.Count == 0) {\n\
    \            return result;\n        }\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = 0;\n        bool found = false;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n \
    \               smallest_value = arr[i];\n                smallest_index = i;\n\
    \                found = true;\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        bool foundSmallestEven = false;\n        foreach (long n in arr) {\n\
    \            if (n % 2 == 0) {\n                if (smallestEven < n) {\n    \
    \                smallestEven = n;\n                    smallestIndex = arr.IndexOf(n);\n\
    \                    foundSmallestEven = true;\n                }\n          \
    \  }\n        }\n        if (foundSmallestEven) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        long smallestIndex = arr.IndexOf(smallestEven);\n        if (smallestIndex\
    \ != -1) {\n            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        else {\n            result.Add(smallestEven);\n          \
    \  result.Add(0);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        long\
    \ smallestIndex = 0;\n        foreach (long node in arr) {\n            if (node\
    \ % 2 == 0) {\n                if (smallestEvenValue < node) {\n             \
    \       smallestEvenValue = node;\n                    smallestIndex = arr.IndexOf(node);\n\
    \                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = 0;\n        long\
    \ smallest_index = 0;\n        foreach (long n in arr) {\n            if (n %\
    \ 2 == 0) {\n                if (smallest_even_value < n) {\n                \
    \    smallest_even_value = n;\n                    smallest_index = arr.IndexOf(n);\n\
    \                }\n            }\n        }\n        if (smallest_even_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;"]
stop_tokens:
- "\n    }\n"
