name: HumanEval_153_Strongest_Extension
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You will be given the name of a class (a string) and a list\
  \ of extensions.\n    // The extensions are to be used to load additional classes\
  \ to the class. The\n    // strength of the extension is as follows: Let CAP be\
  \ the number of the uppercase\n    // letters in the extension's name, and let SM\
  \ be the number of lowercase letters \n    // in the extension's name, the strength\
  \ is given by the fraction CAP - SM. \n    // You should find the strongest extension\
  \ and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
  \    // If there are two or more extensions with the same strength, you should\n\
  \    // choose the one that comes first in the list.\n    // For example, if you\
  \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
  \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
  \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n  \
  \  // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
  \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
  )\n    public static string StrongestExtension(string class_name, List<string> extensions)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
  Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
  eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
  Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
  , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
  )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
  \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
  , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
  )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
  Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
  )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new string[]{(string)\"\
  Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\"\
  )));\n    Debug.Assert(StrongestExtension((\"YameRore\"), (new List<string>(new\
  \ string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\", (string)\"\
  Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"\
  finNNalLLly\"), (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\"\
  , (string)\"Wow\", (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
  _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
  _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
  \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n  \
  \  }\n\n}\n"
completions: ["        string extension = extensions[0];\n        string extension_strength\
    \ = extension.Substring(extension.Length - 1, 1);\n        string extension_strength_str\
    \ = extension_strength.ToString();\n        string extension_strength_str_upper\
    \ = extension_strength_str.ToUpper();\n        int extension_strength_int = Convert.ToInt32(extension_strength_str_upper);\n\
    \        int extension_strength_int_upper = Convert.ToInt32(extension_strength_str_upper);\n\
    \        int extension_strength_int_lower = Convert.ToInt32(extension_strength_str_lower);\n\
    \        int extension_strength_int_lower_upper = Convert.ToInt32(extension_strength_str_lower_upper);\n\
    \        int extension_strength_int_lower_upper2 = Convert.ToInt32(extension_strength_str_lower_upper2);\n\
    \        int extension_strength_int_lower_upper3 = Convert.ToInt32(extension_strength_str_lower_upper3);\n\
    \        int extension_strength_int_lower_upper4 = Convert.ToInt32(extension_strength_str_lower_upper4);\n\
    \        int extension_strength_int_lower_upper5 = Convert.ToInt32(extension_strength_str_lower_upper5);\n\
    \        int extension_strength_int_lower_upper6 = Convert.ToInt32(extension_strength_str_lower_upper6);\n\
    \        int extension_strength_int_lower_upper7 = Convert.ToInt32(extension_strength_str_lower_upper7);\n\
    \        int extension_strength_int_lower_upper8 = Convert.ToInt32(extension_strength_str_lower_upper8);\n\
    \        int extension_strength_int_lower_upper9 = Convert.ToInt32(extension_strength_str_lower_upper9);\n\
    \        int extension_strength_int_lower_upper10 = Convert.ToInt32(extension_strength_str_lower_upper10);\n\
    \        int extension_strength_int_lower_upper11 = Convert.ToInt32(extension_strength_str_lower_upper11);\n\
    \        int extension_strength_int_lower_upper12 = Convert.ToInt32(extension_strength_str_lower_upper12);\n\
    \        int extension_strength_int_lower_upper13 = Convert.ToInt32(extension_strength_str_lower_upper13);\n\
    \        int extension_strength_int_lower_upper14 = Convert.ToInt32(extension_strength_str_lower_upper14);\n\
    \        int extension_strength_int_lower_upper15 = Convert.ToInt32(extension_strength_str_lower_upper15);\n\
    \        int extension_strength_int_lower_upper16 = Convert.ToInt32(extension_strength_str_lower_upper16);\n\
    \        int extension_strength_int_lower_upper17 = Convert.ToInt32(extension_strength_str_lower_upper17);\n\
    \        int extension_strength_int_lower_upper18 = Convert.ToInt32(extension_strength_",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extension.Count();\n        double\
    \ max_strength = extension_strength;\n        string strongest_extension = null;\n\
    \        foreach (string extension in extensions) {\n            if (extension_strength\
    \ > max_strength) {\n                max_strength = extension_strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;", "        string extension\
    \ = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1, 1);\n        string extension_strength_str = extension_strength.ToString();\n\
    \        string extension_strength_str_upper = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper_small = extension_strength_str_upper.Substring(0,\
    \ extension_strength_str_upper.Length - 1);\n        string extension_strength_str_lower_small\
    \ = extension_strength_str_lower.Substring(0, extension_strength_str_lower.Length\
    \ - 1);\n        string extension_strength_str_upper_small_lower = extension_strength_str_upper_small.Substring(0,\
    \ extension_strength_str_upper_small.Length - 1);\n        string extension_strength_str_lower_small_lower\
    \ = extension_strength_str_lower_small.Substring(0, extension_strength_str_lower_small.Length\
    \ - 1);\n        string extension_strength_str_upper_small_lower_lower = extension_strength_str_upper_small_lower.Substring(0,\
    \ extension_strength_str_upper_small_lower.Length - 1);\n        string extension_strength_str_lower_small_lower_lower\
    \ = extension_strength_str_lower_small_lower.Substring(0, extension_strength_str_lower_small_lower.Length\
    \ - 1);\n        string extension_strength_str_upper_small_lower_lower_lower =\
    \ extension_strength_str_upper_small_lower_lower.Substring(0, extension_strength_str_upper_small_lower_lower.Length\
    \ - 1);\n        string extension_strength_str_lower_small_lower_lower_lower =\
    \ extension_strength_str_lower_small_lower_lower.Substring(0, extension_strength_str_lower_small_lower_lower.Length\
    \ - 1);\n        string extension_strength_str_upper_small_lower_lower_lower_lower\
    \ = extension_strength_str_upper_small_lower_lower_lower.Substring(0, extension_strength_str_upper_small_lower_lower_lower.Length\
    \ - 1);\n        string extension_strength_str_lower_small_lower_lower_lower_lower\
    \ = extension_strength_str_lower_small_lower_lower_lower.Substring(0, extension_strength_str_lower_small_lower_lower_lower.Length\
    \ - 1);\n        string extension_strength_str_upper_small_lower_lower_lower_lower_lower\
    \ = extension_strength_str_upper_small_lower_lower_lower_lower.Substring(0, extension_strength_str_upper_small_lower_lower_lower_lower.Length\
    \ - 1);\n        string extension_strength_str_lower_small_", "        string\
    \ extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        string extension_strength_str = extension_strength.ToString();\n    \
    \    string extension_strength_str_length = extension_strength_str.Length;\n \
    \       string extension_strength_str_length_str = extension_strength_str_length.ToString();\n\
    \        string extension_strength_str_length_str_length = extension_strength_str_length_str.Length;\n\
    \        string extension_strength_str_length_str_length_str = extension_strength_str_length_str_length.ToString();\n\
    \        string extension_strength_str_length_str_length_str_length = extension_strength_str_length_str_length_str.Length;\n\
    \        string extension_strength_str_length_str_length_str_length_str = extension_strength_str_length_str_length_str_length.ToString();\n\
    \        string extension_strength_str_length_str_length_str_length_str_length\
    \ = extension_strength_str_length_str_length_str_length_str.Length;\n        string\
    \ extension_strength_str_length_str_length_str_length_str_length_str = extension_strength_str_length_str_length_str_length_str_length.ToString();\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length\
    \ = extension_strength_str_length_str_length_str_length_str_length_str.Length;\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length_str_length\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str.Length;\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str.Length;\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str_length.ToString();\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str.Length;\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length.ToString();\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str.Length;\n\
    \        string extension_strength", "        string strongest_extension = string.Empty;\n\
    \        double strongest_extension_strength = double.MaxValue;\n        foreach\
    \ (string extension in extensions) {\n            int extension_strength = GetExtensionStrength(extension);\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + strongest_extension;", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1,\
    \ 1);\n        string extension_strength_str = extension_strength.ToString();\n\
    \        string extension_strength_str_upper = extension_strength_str.ToUpper();\n\
    \        int extension_strength_int = int.Parse(extension_strength_str_upper);\n\
    \        int extension_strength_int_upper = extension_strength_int % 2; // 0 %\
    \ 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower = extension_strength_int\
    \ / 2; // 0 / 2 = 0, 1 / 2 = 1\n        int extension_strength_int_upper2 = extension_strength_int\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower2 = extension_strength_int\
    \ / 2; // 0 / 2 = 0, 1 / 2 = 1\n        int extension_strength_int_upper3 = extension_strength_int\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower3 = extension_strength_int\
    \ / 2; // 0 / 2 = 0, 1 / 2 = 1\n        int extension_strength_int_upper4 = extension_strength_int\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower4 = extension_strength_int\
    \ / 2; // 0 / 2 = 0, 1 / 2 = 1\n        int extension_strength_int_upper5 = extension_strength_int\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower5 = extension_strength_int\
    \ / 2; // 0 / 2 = 0, 1 / 2 = 1\n        int extension_strength_int_upper6 = extension_strength_int\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower6 = extension_strength_int\
    \ / 2; // 0 / 2 = 0, 1 / 2 = 1\n        int extension_strength_int_upper7 = extension_strength_int\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower7 = extension_strength_int\
    \ / 2; // 0 / 2 = 0, 1 / 2 = 1\n        int extension_strength_int_upper8 = extension_strength_int\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower8 = extension_strength_int\
    \ / 2; // 0 / 2 = 0, 1 / 2 = 1\n        int extension_strength_int_upper9 = extension_strength_int\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower9 = extension_strength_int\
    \ / 2; // 0 / 2 = 0, 1 / 2 = 1\n        int extension_strength_int_upper10 = extension_strength_int\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension", "        string extension\
    \ = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1).ToUpper();\n        string extension_strength_length = extension_strength.Length;\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength);\n \
    \       int extension_strength_int2 = extension_strength_int / 2;\n        int\
    \ extension_strength_int3 = extension_strength_int / 3;\n        int extension_strength_int4\
    \ = extension_strength_int / 4;\n        int extension_strength_int5 = extension_strength_int\
    \ / 5;\n        int extension_strength_int6 = extension_strength_int / 6;\n  \
    \      int extension_strength_int7 = extension_strength_int / 7;\n        int\
    \ extension_strength_int8 = extension_strength_int / 8;\n        int extension_strength_int9\
    \ = extension_strength_int / 9;\n        int extension_strength_int10 = extension_strength_int\
    \ / 10;\n        int extension_strength_int11 = extension_strength_int / 11;\n\
    \        int extension_strength_int12 = extension_strength_int / 12;\n       \
    \ int extension_strength_int13 = extension_strength_int / 13;\n        int extension_strength_int14\
    \ = extension_strength_int / 14;\n        int extension_strength_int15 = extension_strength_int\
    \ / 15;\n        int extension_strength_int16 = extension_strength_int / 16;\n\
    \        int extension_strength_int17 = extension_strength_int / 17;\n       \
    \ int extension_strength_int18 = extension_strength_int / 18;\n        int extension_strength_int19\
    \ = extension_strength_int / 19;\n        int extension_strength_int20 = extension_strength_int\
    \ / 20;\n        int extension_strength_int21 = extension_strength_int / 21;\n\
    \        int extension_strength_int22 = extension_strength_int / 22;\n       \
    \ int extension_strength_int23 = extension_strength_int / 23;\n        int extension_strength_int24\
    \ = extension_strength_int / 24;\n        int extension_strength_int25 = extension_strength_int\
    \ / 25;\n        int extension_strength_int26 = extension_strength_int / 26;\n\
    \        int extension_strength_int27 = extension_strength_int / 27;\n       \
    \ int extension_strength_int28 = extension_strength_int / 28;\n        int extension_strength_int29\
    \ = extension_strength_int / 29;\n        int extension_strength_int30", "   \
    \     // Your code here\n        string strongest_extension = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > strongest_extension.ToUpper().Count()\
    \ - strongest_extension.ToLower().Count()) {\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        double strength = extension_strength / extensions.Count();\n\
    \        double max_strength = extensions.Max(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        if (strength == max_strength) {\n            return class_name + \".\"\
    \ + extensions.Min(x => x.ToUpper().Count() - x.ToLower().Count());\n        }\n\
    \        return class_name + \".\" + extensions.Max(x => x.ToUpper().Count() -\
    \ x.ToLower().Count());", "        string extension = extensions[0];\n       \
    \ string extension_strength = extension.Substring(extension.Length - 1, 1);\n\
    \        int extension_strength_int = 0;\n        if (extension_strength == \"\
    A\") {\n            extension_strength_int = 1;\n        } else if (extension_strength\
    \ == \"B\") {\n            extension_strength_int = 2;\n        } else if (extension_strength\
    \ == \"C\") {\n            extension_strength_int = 3;\n        } else if (extension_strength\
    \ == \"D\") {\n            extension_strength_int = 4;\n        } else if (extension_strength\
    \ == \"E\") {\n            extension_strength_int = 5;\n        } else if (extension_strength\
    \ == \"F\") {\n            extension_strength_int = 6;\n        } else if (extension_strength\
    \ == \"G\") {\n            extension_strength_int = 7;\n        } else if (extension_strength\
    \ == \"H\") {\n            extension_strength_int = 8;\n        } else if (extension_strength\
    \ == \"I\") {\n            extension_strength_int = 9;\n        } else if (extension_strength\
    \ == \"J\") {\n            extension_strength_int = 10;\n        } else if (extension_strength\
    \ == \"K\") {\n            extension_strength_int = 11;\n        } else if (extension_strength\
    \ == \"L\") {\n            extension_strength_int = 12;\n        } else if (extension_strength\
    \ == \"M\") {\n            extension_strength_int = 13;\n        } else if (extension_strength\
    \ == \"N\") {\n            extension_strength_int = 14;\n        } else if (extension_strength\
    \ == \"O\") {\n            extension_strength_int = 15;\n        } else if (extension_strength\
    \ == \"P\") {\n            extension_strength_int = 16;\n        } else if (extension_strength\
    \ == \"Q\") {\n            extension_strength_int = 17;\n        } else if (extension_strength\
    \ == \"R\") {\n            extension_strength_int = 18;\n        } else if (extension_strength\
    \ == \"S\") {\n            extension_strength_int = 19;\n        } else if (extension_strength\
    \ == \"T\") {\n            extension_strength_int = 20;\n        } else if (extension_strength\
    \ == \"U\") {\n            extension_strength_int = 21;\n        } else if (extension_strength\
    \ == \"V\") {\n            extension_strength_int = 22;\n        } else if (extension_strength\
    \ == \"W\") {\n            extension_strength_int = 23;\n        } else if (extension_strength\
    \ == \"X\") {\n            extension_strength_int = 24;\n        } else if (extension_strength\
    \ == \"Y\") {\n            extension_strength_int = 25;\n        } else if (extension_strength\
    \ == \"Z\") {\n            extension_strength_int = 26;\n        } else if (extension_strength\
    \ == \"a\") {\n            extension_strength_int = 1;\n        } else if (extension_strength\
    \ == \"b\") {\n            extension_strength_int = 2;\n        } else if (extension_strength\
    \ == \"c\") {\n            extension_strength_int = 3;\n        } else if (extension_strength\
    \ == \"d\") {", "        string strongest_extension = class_name;\n        string\
    \ extension_strength = class_name;\n        foreach (string extension in extensions)\
    \ {\n            int extension_strength_int = extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \            if (extension_strength_int > extension_strength.ToUpper().Count()\
    \ - extension_strength.ToLower().Count()) {\n                strongest_extension\
    \ = extension;\n                extension_strength = extension_strength_int;\n\
    \            }\n        }\n        return strongest_extension;", "        string\
    \ extension = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1);\n        string extension_strength_str = extension_strength.ToLower();\n\
    \        int extension_cap = extension_strength_str.Length;\n        int extension_sm\
    \ = 0;\n        for (int i = 0; i < extension_strength_str.Length; i++) {\n  \
    \          if (extension_strength_str[i] == 'a' || extension_strength_str[i] ==\
    \ 'e' || extension_strength_str[i] == 'i' || extension_strength_str[i] == 'o'\
    \ || extension_strength_str[i] == 'u' || extension_strength_str[i] == 'y') {\n\
    \                extension_sm++;\n            }\n        }\n        double extension_strength_double\
    \ = Convert.ToDouble(extension_strength);\n        double extension_cap_double\
    \ = Convert.ToDouble(extension_cap);\n        double extension_sm_double = Convert.ToDouble(extension_sm);\n\
    \        double extension_strength_double_rounded = Math.Round(extension_strength_double,\
    \ 2);\n        double extension_cap_double_rounded = Math.Round(extension_cap_double,\
    \ 2);\n        double extension_sm_double_rounded = Math.Round(extension_sm_double,\
    \ 2);\n        if (extension_strength_double > extension_cap_double && extension_strength_double\
    \ > extension_sm_double) {\n            extension = extensions[0];\n        }\n\
    \        else if (extension_cap_double > extension_sm_double) {\n            extension\
    \ = extensions[1];\n        }\n        else if (extension_sm_double > extension_strength_double)\
    \ {\n            extension = extensions[2];\n        }\n        return class_name\
    \ + \".\" + extension;", "        string extension = extensions[0];\n        string\
    \ extension_strength = extension.Substring(extension.Length - 1).ToLower();\n\
    \        string extension_strength_fraction =\n            extension_strength.Substring(extension_strength.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction_remainder =\n  \
    \          extension_strength_fraction.Substring(extension_strength_fraction.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder =\n  \
    \          extension_strength_fraction_remainder.Substring(extension_strength_fraction_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder.Substring(extension_strength_fraction_remainder_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder_remainder.Substring(extension_strength_fraction_remainder_remainder_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder_remainder_remainder.Substring(extension_strength_fraction_remainder_remainder_remainder_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder_remainder_remainder_remainder.Substring(extension_strength_fraction_remainder_remainder_remainder_remainder_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder.Substring(extension_strength_fraction_remainder_remainder_remainder_remainder_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder.Substring(extension_strength_fraction_remainder_remainder_remainder_remainder_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder_remainder.Substring(extension_strength_fraction_remain",
  "        string extension_strength = extensions[0].Length;\n        foreach (string\
    \ extension in extensions) {\n            int extension_length = extension.Length;\n\
    \            int extension_strength_diff = extension_length - extension_strength;\n\
    \            if (extension_strength_diff < 0) {\n                extension_strength\
    \ = extension_length;\n            }\n            else if (extension_strength_diff\
    \ > 0) {\n                extension_strength = extension_strength - extension_strength_diff;\n\
    \            }\n        }\n        return class_name + \".\" + extensions[0];",
  "        string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1, 1);\n        string extension_strength_str\
    \ = extension_strength.ToString();\n        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        string extension_strength_str = extension_strength.ToString();\n    \
    \    int extension_strength_int = Convert.ToInt32(extension_strength_str);\n \
    \       int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        double\
    \ max_strength = extensions.Max(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        if (strength > max_strength) {\n            return class_name + \".\"\
    \ + extensions.OrderByDescending(x => x.ToUpper().Count() - x.ToLower().Count()).First();\n\
    \        }\n        return class_name + \".\" + extensions.OrderByDescending(x\
    \ => x.ToUpper().Count() - x.ToLower().Count()).First();", "        string extension\
    \ = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1);\n        string extension_strength_number = int.Parse(extension_strength);\n\
    \        int extension_strength_number_abs = Math.Abs(extension_strength_number);\n\
    \        int extension_strength_number_abs2 = 0;\n        for (int i = 0; i <\
    \ extension_strength_number_abs; i++) {\n            extension_strength_number_abs2\
    \ += extension_strength_number_abs;\n        }\n        int extension_strength_number_abs3\
    \ = extension_strength_number_abs2 / 2;\n        int extension_strength_number_abs4\
    \ = extension_strength_number_abs3 / 2;\n        int extension_strength_number_abs5\
    \ = extension_strength_number_abs4 / 2;\n        int extension_strength_number_abs6\
    \ = extension_strength_number_abs5 / 2;\n        int extension_strength_number_abs7\
    \ = extension_strength_number_abs6 / 2;\n        int extension_strength_number_abs8\
    \ = extension_strength_number_abs7 / 2;\n        int extension_strength_number_abs9\
    \ = extension_strength_number_abs8 / 2;\n        int extension_strength_number_abs10\
    \ = extension_strength_number_abs9 / 2;\n        int extension_strength_number_abs11\
    \ = extension_strength_number_abs10 / 2;\n        int extension_strength_number_abs12\
    \ = extension_strength_number_abs11 / 2;\n        int extension_strength_number_abs13\
    \ = extension_strength_number_abs12 / 2;\n        int extension_strength_number_abs14\
    \ = extension_strength_number_abs13 / 2;\n        int extension_strength_number_abs15\
    \ = extension_strength_number_abs14 / 2;\n        int extension_strength_number_abs16\
    \ = extension_strength_number_abs15 / 2;\n        int extension_strength_number_abs17\
    \ = extension_strength_number_abs16 / 2;\n        int extension_strength_number_abs18\
    \ = extension_strength_number_abs17 / 2;\n        int extension_strength_number_abs19\
    \ = extension_strength_number_abs18 / 2;\n        int extension_strength_number_abs20\
    \ = extension_strength_number_abs19 / 2;\n        int extension_strength_number_abs21\
    \ = extension_strength_number_abs20 / 2;\n        int extension_strength_number_abs22\
    \ = extension_strength_number_abs21 / 2;\n        int extension_strength_number_abs23\
    \ = extension_strength_number_abs22 / 2;\n        int extension_strength_number_abs24\
    \ = extension_strength_number_abs23 / 2;\n        int extension_strength_number_abs25\
    \ = ", "        string extension_strength = extensions[0];\n        foreach (string\
    \ extension in extensions) {\n            int extension_capitalized = extension.Count(c\
    \ => char.IsUpper(c));\n            int extension_smaller = extension.Count(c\
    \ => char.IsLower(c));\n            int extension_strength_fraction = extension_capitalized\
    \ - extension_smaller;\n            if (extension_strength_fraction > extension_strength)\
    \ {\n                extension_strength = extension_strength_fraction;\n     \
    \           extension_strength = extension.Substring(0, extension.Length - extension_strength);\n\
    \            }\n        }\n        return class_name + \".\" + extension_strength;",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        string extension_strength_2 = extensions[1].ToUpper().Count() - extensions[1].ToLower().Count();\n\
    \        string extension_strength_3 = extensions[2].ToUpper().Count() - extensions[2].ToLower().Count();\n\
    \        string extension_strength_4 = extensions[3].ToUpper().Count() - extensions[3].ToLower().Count();\n\
    \        string extension_strength_5 = extensions[4].ToUpper().Count() - extensions[4].ToLower().Count();\n\
    \        string extension_strength_6 = extensions[5].ToUpper().Count() - extensions[5].ToLower().Count();\n\
    \        string extension_strength_7 = extensions[6].ToUpper().Count() - extensions[6].ToLower().Count();\n\
    \        string extension_strength_8 = extensions[7].ToUpper().Count() - extensions[7].ToLower().Count();\n\
    \        string extension_strength_9 = extensions[8].ToUpper().Count() - extensions[8].ToLower().Count();\n\
    \        string extension_strength_10 = extensions[9].ToUpper().Count() - extensions[9].ToLower().Count();\n\
    \        string extension_strength_11 = extensions[10].ToUpper().Count() - extensions[10].ToLower().Count();\n\
    \        string extension_strength_12 = extensions[11].ToUpper().Count() - extensions[11].ToLower().Count();\n\
    \        string extension_strength_13 = extensions[12].ToUpper().Count() - extensions[12].ToLower().Count();\n\
    \        string extension_strength_14 = extensions[13].ToUpper().Count() - extensions[13].ToLower().Count();\n\
    \        string extension_strength_15 = extensions[14].ToUpper().Count() - extensions[14].ToLower().Count();\n\
    \        string extension_strength_16 = extensions[15].ToUpper().Count() - extensions[15].ToLower().Count();\n\
    \        string extension_strength_17 = extensions[16].ToUpper().Count() - extensions[16].ToLower().Count();\n\
    \        string extension_strength_18 = extensions[17].ToUpper().Count() - extensions[17].ToLower().Count();\n\
    \        string extension_strength_19 = extensions[18].ToUpper().Count() - extensions[18].ToLower().Count();\n\
    \        string extension_strength_20 = extensions[19].ToUpper().Count() - extensions[19].ToLower().Count();",
  "        string strongest = string.Empty;\n        string extension = string.Empty;\n\
    \        string extension_strength = string.Empty;\n        foreach (string extension_name\
    \ in extensions) {\n            extension = extension_name;\n            extension_strength\
    \ = extension.Substring(extension.Length - 1).ToLower();\n            if (extension_strength.Length\
    \ > strongest.Length) {\n                strongest = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest;"]
stop_tokens:
- "\n    }\n"
