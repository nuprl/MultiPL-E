name: HumanEval_153_Strongest_Extension
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You will be given the name of a class (a string) and a list\
  \ of extensions.\n    // The extensions are to be used to load additional classes\
  \ to the class. The\n    // strength of the extension is as follows: Let CAP be\
  \ the number of the uppercase\n    // letters in the extension's name, and let SM\
  \ be the number of lowercase letters \n    // in the extension's name, the strength\
  \ is given by the fraction CAP - SM. \n    // You should find the strongest extension\
  \ and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
  \    // If there are two or more extensions with the same strength, you should\n\
  \    // choose the one that comes first in the list.\n    // For example, if you\
  \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
  \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
  \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n  \
  \  // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
  \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
  )\n    public static string StrongestExtension(string class_name, List<string> extensions)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
  Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
  eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
  Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
  , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
  )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
  \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
  , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
  )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
  Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
  )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new string[]{(string)\"\
  Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\"\
  )));\n    Debug.Assert(StrongestExtension((\"YameRore\"), (new List<string>(new\
  \ string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\", (string)\"\
  Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"\
  finNNalLLly\"), (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\"\
  , (string)\"Wow\", (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
  _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
  _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
  \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n  \
  \  }\n\n}\n"
completions: ["        string extension = extensions[0];\n        string extension_strength\
    \ = extension.Substring(extension.Length - 1, 1);\n        string extension_strength_str\
    \ = extension_strength.ToString();\n        string extension_strength_str_upper\
    \ = extension_strength_str.ToUpper();\n        int extension_strength_int = Convert.ToInt32(extension_strength_str_upper);\n\
    \        int extension_strength_int_upper = Convert.ToInt32(extension_strength_str_upper);\n\
    \        int extension_strength_int_lower = Convert.ToInt32(extension_strength_str_lower);\n\
    \        int extension_strength_int_lower_upper = Convert.ToInt32(extension_strength_str_lower_upper);\n\
    \        int extension_strength_int_lower_upper2 = Convert.ToInt32(extension_strength_str_lower_upper2);\n\
    \        int extension_strength_int_lower_upper3 = Convert.ToInt32(extension_strength_str_lower_upper3);\n\
    \        int extension_strength_int_lower_upper4 = Convert.ToInt32(extension_strength_str_lower_upper4);\n\
    \        int extension_strength_int_lower_upper5 = Convert.ToInt32(extension_strength_str_lower_upper5);\n\
    \        int extension_strength_int_lower_upper6 = Convert.ToInt32(extension_strength_str_lower_upper6);\n\
    \        int extension_strength_int_lower_upper7 = Convert.ToInt32(extension_strength_str_lower_upper7);\n\
    \        int extension_strength_int_lower_upper8 = Convert.ToInt32(extension_strength_str_lower_upper8);\n\
    \        int extension_strength_int_lower_upper9 = Convert.ToInt32(extension_strength_str_lower_upper9);\n\
    \        int extension_strength_int_lower_upper10 = Convert.ToInt32(extension_strength_str_lower_upper10);\n\
    \        int extension_strength_int_lower_upper11 = Convert.ToInt32(extension_strength_str_lower_upper11);\n\
    \        int extension_strength_int_lower_upper12 = Convert.ToInt32(extension_strength_str_lower_upper12);\n\
    \        int extension_strength_int_lower_upper13 = Convert.ToInt32(extension_strength_str_lower_upper13);\n\
    \        int extension_strength_int_lower_upper14 = Convert.ToInt32(extension_strength_str_lower_upper14);\n\
    \        int extension_strength_int_lower_upper15 = Convert.ToInt32(extension_strength_str_lower_upper15);\n\
    \        int extension_strength_int_lower_upper16 = Convert.ToInt32(extension_strength_str_lower_upper16);\n\
    \        int extension_strength_int_lower_upper17 = Convert.ToInt32(extension_strength_str_lower_upper17);\n\
    \        int extension_strength_int_lower_upper18 = Convert.ToInt32(extension_strength_",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extension.Count();\n        double\
    \ max_strength = extension_strength;\n        string strongest_extension = null;\n\
    \        foreach (string extension in extensions) {\n            if (extension_strength\
    \ > max_strength) {\n                max_strength = extension_strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;", "        string extension\
    \ = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1, 1);\n        string extension_strength_str = extension_strength.ToString();\n\
    \        string extension_strength_str_upper = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper_small = extension_strength_str_upper.Substring(0,\
    \ extension_strength_str_upper.Length - 1);\n        string extension_strength_str_lower_small\
    \ = extension_strength_str_lower.Substring(0, extension_strength_str_lower.Length\
    \ - 1);\n        string extension_strength_str_upper_small_lower = extension_strength_str_upper_small.Substring(0,\
    \ extension_strength_str_upper_small.Length - 1);\n        string extension_strength_str_lower_small_lower\
    \ = extension_strength_str_lower_small.Substring(0, extension_strength_str_lower_small.Length\
    \ - 1);\n        string extension_strength_str_upper_small_lower_lower = extension_strength_str_upper_small_lower.Substring(0,\
    \ extension_strength_str_upper_small_lower.Length - 1);\n        string extension_strength_str_lower_small_lower_lower\
    \ = extension_strength_str_lower_small_lower.Substring(0, extension_strength_str_lower_small_lower.Length\
    \ - 1);\n        string extension_strength_str_upper_small_lower_lower_lower =\
    \ extension_strength_str_upper_small_lower_lower.Substring(0, extension_strength_str_upper_small_lower_lower.Length\
    \ - 1);\n        string extension_strength_str_lower_small_lower_lower_lower =\
    \ extension_strength_str_lower_small_lower_lower.Substring(0, extension_strength_str_lower_small_lower_lower.Length\
    \ - 1);\n        string extension_strength_str_upper_small_lower_lower_lower_lower\
    \ = extension_strength_str_upper_small_lower_lower_lower.Substring(0, extension_strength_str_upper_small_lower_lower_lower.Length\
    \ - 1);\n        string extension_strength_str_lower_small_lower_lower_lower_lower\
    \ = extension_strength_str_lower_small_lower_lower_lower.Substring(0, extension_strength_str_lower_small_lower_lower_lower.Length\
    \ - 1);\n        string extension_strength_str_upper_small_lower_lower_lower_lower_lower\
    \ = extension_strength_str_upper_small_lower_lower_lower_lower.Substring(0, extension_strength_str_upper_small_lower_lower_lower_lower.Length\
    \ - 1);\n        string extension_strength_str_lower_small_", "        string\
    \ extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        string extension_strength_str = extension_strength.ToString();\n    \
    \    string extension_strength_str_length = extension_strength_str.Length;\n \
    \       string extension_strength_str_length_str = extension_strength_str_length.ToString();\n\
    \        string extension_strength_str_length_str_length = extension_strength_str_length_str.Length;\n\
    \        string extension_strength_str_length_str_length_str = extension_strength_str_length_str_length.ToString();\n\
    \        string extension_strength_str_length_str_length_str_length = extension_strength_str_length_str_length_str.Length;\n\
    \        string extension_strength_str_length_str_length_str_length_str = extension_strength_str_length_str_length_str_length.ToString();\n\
    \        string extension_strength_str_length_str_length_str_length_str_length\
    \ = extension_strength_str_length_str_length_str_length_str.Length;\n        string\
    \ extension_strength_str_length_str_length_str_length_str_length_str = extension_strength_str_length_str_length_str_length_str_length.ToString();\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length\
    \ = extension_strength_str_length_str_length_str_length_str_length_str.Length;\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length_str_length\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str.Length;\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str.Length;\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str_length.ToString();\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str.Length;\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length.ToString();\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str.Length;\n\
    \        string extension_strength", "        string strongest_extension = string.Empty;\n\
    \        double strongest_extension_strength = double.MaxValue;\n        foreach\
    \ (string extension in extensions) {\n            int extension_strength = GetExtensionStrength(extension);\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + strongest_extension;", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1,\
    \ 1);\n        string extension_strength_str = extension_strength.ToString();\n\
    \        string extension_strength_str_upper = extension_strength_str.ToUpper();\n\
    \        int extension_strength_int = int.Parse(extension_strength_str_upper);\n\
    \        int extension_strength_int_upper = extension_strength_int % 2; // 0 %\
    \ 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower = extension_strength_int\
    \ / 2; // 0 / 2 = 0, 1 / 2 = 1\n        int extension_strength_int_upper2 = extension_strength_int\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower2 = extension_strength_int\
    \ / 2; // 0 / 2 = 0, 1 / 2 = 1\n        int extension_strength_int_upper3 = extension_strength_int\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower3 = extension_strength_int\
    \ / 2; // 0 / 2 = 0, 1 / 2 = 1\n        int extension_strength_int_upper4 = extension_strength_int\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower4 = extension_strength_int\
    \ / 2; // 0 / 2 = 0, 1 / 2 = 1\n        int extension_strength_int_upper5 = extension_strength_int\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower5 = extension_strength_int\
    \ / 2; // 0 / 2 = 0, 1 / 2 = 1\n        int extension_strength_int_upper6 = extension_strength_int\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower6 = extension_strength_int\
    \ / 2; // 0 / 2 = 0, 1 / 2 = 1\n        int extension_strength_int_upper7 = extension_strength_int\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower7 = extension_strength_int\
    \ / 2; // 0 / 2 = 0, 1 / 2 = 1\n        int extension_strength_int_upper8 = extension_strength_int\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower8 = extension_strength_int\
    \ / 2; // 0 / 2 = 0, 1 / 2 = 1\n        int extension_strength_int_upper9 = extension_strength_int\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower9 = extension_strength_int\
    \ / 2; // 0 / 2 = 0, 1 / 2 = 1\n        int extension_strength_int_upper10 = extension_strength_int\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension", "        string extension\
    \ = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1).ToUpper();\n        string extension_strength_length = extension_strength.Length;\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength);\n \
    \       int extension_strength_int2 = extension_strength_int / 2;\n        int\
    \ extension_strength_int3 = extension_strength_int / 3;\n        int extension_strength_int4\
    \ = extension_strength_int / 4;\n        int extension_strength_int5 = extension_strength_int\
    \ / 5;\n        int extension_strength_int6 = extension_strength_int / 6;\n  \
    \      int extension_strength_int7 = extension_strength_int / 7;\n        int\
    \ extension_strength_int8 = extension_strength_int / 8;\n        int extension_strength_int9\
    \ = extension_strength_int / 9;\n        int extension_strength_int10 = extension_strength_int\
    \ / 10;\n        int extension_strength_int11 = extension_strength_int / 11;\n\
    \        int extension_strength_int12 = extension_strength_int / 12;\n       \
    \ int extension_strength_int13 = extension_strength_int / 13;\n        int extension_strength_int14\
    \ = extension_strength_int / 14;\n        int extension_strength_int15 = extension_strength_int\
    \ / 15;\n        int extension_strength_int16 = extension_strength_int / 16;\n\
    \        int extension_strength_int17 = extension_strength_int / 17;\n       \
    \ int extension_strength_int18 = extension_strength_int / 18;\n        int extension_strength_int19\
    \ = extension_strength_int / 19;\n        int extension_strength_int20 = extension_strength_int\
    \ / 20;\n        int extension_strength_int21 = extension_strength_int / 21;\n\
    \        int extension_strength_int22 = extension_strength_int / 22;\n       \
    \ int extension_strength_int23 = extension_strength_int / 23;\n        int extension_strength_int24\
    \ = extension_strength_int / 24;\n        int extension_strength_int25 = extension_strength_int\
    \ / 25;\n        int extension_strength_int26 = extension_strength_int / 26;\n\
    \        int extension_strength_int27 = extension_strength_int / 27;\n       \
    \ int extension_strength_int28 = extension_strength_int / 28;\n        int extension_strength_int29\
    \ = extension_strength_int / 29;\n        int extension_strength_int30", "   \
    \     // Your code here\n        string strongest_extension = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > strongest_extension.ToUpper().Count()\
    \ - strongest_extension.ToLower().Count()) {\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        double strength = extension_strength / extensions.Count();\n\
    \        double max_strength = extensions.Max(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        if (strength == max_strength) {\n            return class_name + \".\"\
    \ + extensions.Min(x => x.ToUpper().Count() - x.ToLower().Count());\n        }\n\
    \        return class_name + \".\" + extensions.Max(x => x.ToUpper().Count() -\
    \ x.ToLower().Count());", "        string extension = extensions[0];\n       \
    \ string extension_strength = extension.Substring(extension.Length - 1, 1);\n\
    \        int extension_strength_int = 0;\n        if (extension_strength == \"\
    A\") {\n            extension_strength_int = 1;\n        } else if (extension_strength\
    \ == \"B\") {\n            extension_strength_int = 2;\n        } else if (extension_strength\
    \ == \"C\") {\n            extension_strength_int = 3;\n        } else if (extension_strength\
    \ == \"D\") {\n            extension_strength_int = 4;\n        } else if (extension_strength\
    \ == \"E\") {\n            extension_strength_int = 5;\n        } else if (extension_strength\
    \ == \"F\") {\n            extension_strength_int = 6;\n        } else if (extension_strength\
    \ == \"G\") {\n            extension_strength_int = 7;\n        } else if (extension_strength\
    \ == \"H\") {\n            extension_strength_int = 8;\n        } else if (extension_strength\
    \ == \"I\") {\n            extension_strength_int = 9;\n        } else if (extension_strength\
    \ == \"J\") {\n            extension_strength_int = 10;\n        } else if (extension_strength\
    \ == \"K\") {\n            extension_strength_int = 11;\n        } else if (extension_strength\
    \ == \"L\") {\n            extension_strength_int = 12;\n        } else if (extension_strength\
    \ == \"M\") {\n            extension_strength_int = 13;\n        } else if (extension_strength\
    \ == \"N\") {\n            extension_strength_int = 14;\n        } else if (extension_strength\
    \ == \"O\") {\n            extension_strength_int = 15;\n        } else if (extension_strength\
    \ == \"P\") {\n            extension_strength_int = 16;\n        } else if (extension_strength\
    \ == \"Q\") {\n            extension_strength_int = 17;\n        } else if (extension_strength\
    \ == \"R\") {\n            extension_strength_int = 18;\n        } else if (extension_strength\
    \ == \"S\") {\n            extension_strength_int = 19;\n        } else if (extension_strength\
    \ == \"T\") {\n            extension_strength_int = 20;\n        } else if (extension_strength\
    \ == \"U\") {\n            extension_strength_int = 21;\n        } else if (extension_strength\
    \ == \"V\") {\n            extension_strength_int = 22;\n        } else if (extension_strength\
    \ == \"W\") {\n            extension_strength_int = 23;\n        } else if (extension_strength\
    \ == \"X\") {\n            extension_strength_int = 24;\n        } else if (extension_strength\
    \ == \"Y\") {\n            extension_strength_int = 25;\n        } else if (extension_strength\
    \ == \"Z\") {\n            extension_strength_int = 26;\n        } else if (extension_strength\
    \ == \"a\") {\n            extension_strength_int = 1;\n        } else if (extension_strength\
    \ == \"b\") {\n            extension_strength_int = 2;\n        } else if (extension_strength\
    \ == \"c\") {\n            extension_strength_int = 3;\n        } else if (extension_strength\
    \ == \"d\") {", "        string strongest_extension = class_name;\n        string\
    \ extension_strength = class_name;\n        foreach (string extension in extensions)\
    \ {\n            int extension_strength_int = extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \            if (extension_strength_int > extension_strength.ToUpper().Count()\
    \ - extension_strength.ToLower().Count()) {\n                strongest_extension\
    \ = extension;\n                extension_strength = extension_strength_int;\n\
    \            }\n        }\n        return strongest_extension;", "        string\
    \ extension = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1);\n        string extension_strength_str = extension_strength.ToLower();\n\
    \        int extension_cap = extension_strength_str.Length;\n        int extension_sm\
    \ = 0;\n        for (int i = 0; i < extension_strength_str.Length; i++) {\n  \
    \          if (extension_strength_str[i] == 'a' || extension_strength_str[i] ==\
    \ 'e' || extension_strength_str[i] == 'i' || extension_strength_str[i] == 'o'\
    \ || extension_strength_str[i] == 'u' || extension_strength_str[i] == 'y') {\n\
    \                extension_sm++;\n            }\n        }\n        double extension_strength_double\
    \ = Convert.ToDouble(extension_strength);\n        double extension_cap_double\
    \ = Convert.ToDouble(extension_cap);\n        double extension_sm_double = Convert.ToDouble(extension_sm);\n\
    \        double extension_strength_double_rounded = Math.Round(extension_strength_double,\
    \ 2);\n        double extension_cap_double_rounded = Math.Round(extension_cap_double,\
    \ 2);\n        double extension_sm_double_rounded = Math.Round(extension_sm_double,\
    \ 2);\n        if (extension_strength_double > extension_cap_double && extension_strength_double\
    \ > extension_sm_double) {\n            extension = extensions[0];\n        }\n\
    \        else if (extension_cap_double > extension_sm_double) {\n            extension\
    \ = extensions[1];\n        }\n        else if (extension_sm_double > extension_strength_double)\
    \ {\n            extension = extensions[2];\n        }\n        return class_name\
    \ + \".\" + extension;", "        string extension = extensions[0];\n        string\
    \ extension_strength = extension.Substring(extension.Length - 1).ToLower();\n\
    \        string extension_strength_fraction =\n            extension_strength.Substring(extension_strength.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction_remainder =\n  \
    \          extension_strength_fraction.Substring(extension_strength_fraction.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder =\n  \
    \          extension_strength_fraction_remainder.Substring(extension_strength_fraction_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder.Substring(extension_strength_fraction_remainder_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder_remainder.Substring(extension_strength_fraction_remainder_remainder_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder_remainder_remainder.Substring(extension_strength_fraction_remainder_remainder_remainder_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder_remainder_remainder_remainder.Substring(extension_strength_fraction_remainder_remainder_remainder_remainder_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder.Substring(extension_strength_fraction_remainder_remainder_remainder_remainder_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder.Substring(extension_strength_fraction_remainder_remainder_remainder_remainder_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder_remainder.Substring(extension_strength_fraction_remain",
  "        string extension_strength = extensions[0].Length;\n        foreach (string\
    \ extension in extensions) {\n            int extension_length = extension.Length;\n\
    \            int extension_strength_diff = extension_length - extension_strength;\n\
    \            if (extension_strength_diff < 0) {\n                extension_strength\
    \ = extension_length;\n            }\n            else if (extension_strength_diff\
    \ > 0) {\n                extension_strength = extension_strength - extension_strength_diff;\n\
    \            }\n        }\n        return class_name + \".\" + extensions[0];",
  "        string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1, 1);\n        string extension_strength_str\
    \ = extension_strength.ToString();\n        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        string extension_strength_str = extension_strength.ToString();\n    \
    \    int extension_strength_int = Convert.ToInt32(extension_strength_str);\n \
    \       int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int = Convert.ToInt", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        double\
    \ max_strength = extensions.Max(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        if (strength > max_strength) {\n            return class_name + \".\"\
    \ + extensions.OrderByDescending(x => x.ToUpper().Count() - x.ToLower().Count()).First();\n\
    \        }\n        return class_name + \".\" + extensions.OrderByDescending(x\
    \ => x.ToUpper().Count() - x.ToLower().Count()).First();", "        string extension\
    \ = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1);\n        string extension_strength_number = int.Parse(extension_strength);\n\
    \        int extension_strength_number_abs = Math.Abs(extension_strength_number);\n\
    \        int extension_strength_number_abs2 = 0;\n        for (int i = 0; i <\
    \ extension_strength_number_abs; i++) {\n            extension_strength_number_abs2\
    \ += extension_strength_number_abs;\n        }\n        int extension_strength_number_abs3\
    \ = extension_strength_number_abs2 / 2;\n        int extension_strength_number_abs4\
    \ = extension_strength_number_abs3 / 2;\n        int extension_strength_number_abs5\
    \ = extension_strength_number_abs4 / 2;\n        int extension_strength_number_abs6\
    \ = extension_strength_number_abs5 / 2;\n        int extension_strength_number_abs7\
    \ = extension_strength_number_abs6 / 2;\n        int extension_strength_number_abs8\
    \ = extension_strength_number_abs7 / 2;\n        int extension_strength_number_abs9\
    \ = extension_strength_number_abs8 / 2;\n        int extension_strength_number_abs10\
    \ = extension_strength_number_abs9 / 2;\n        int extension_strength_number_abs11\
    \ = extension_strength_number_abs10 / 2;\n        int extension_strength_number_abs12\
    \ = extension_strength_number_abs11 / 2;\n        int extension_strength_number_abs13\
    \ = extension_strength_number_abs12 / 2;\n        int extension_strength_number_abs14\
    \ = extension_strength_number_abs13 / 2;\n        int extension_strength_number_abs15\
    \ = extension_strength_number_abs14 / 2;\n        int extension_strength_number_abs16\
    \ = extension_strength_number_abs15 / 2;\n        int extension_strength_number_abs17\
    \ = extension_strength_number_abs16 / 2;\n        int extension_strength_number_abs18\
    \ = extension_strength_number_abs17 / 2;\n        int extension_strength_number_abs19\
    \ = extension_strength_number_abs18 / 2;\n        int extension_strength_number_abs20\
    \ = extension_strength_number_abs19 / 2;\n        int extension_strength_number_abs21\
    \ = extension_strength_number_abs20 / 2;\n        int extension_strength_number_abs22\
    \ = extension_strength_number_abs21 / 2;\n        int extension_strength_number_abs23\
    \ = extension_strength_number_abs22 / 2;\n        int extension_strength_number_abs24\
    \ = extension_strength_number_abs23 / 2;\n        int extension_strength_number_abs25\
    \ = ", "        string extension_strength = extensions[0];\n        foreach (string\
    \ extension in extensions) {\n            int extension_capitalized = extension.Count(c\
    \ => char.IsUpper(c));\n            int extension_smaller = extension.Count(c\
    \ => char.IsLower(c));\n            int extension_strength_fraction = extension_capitalized\
    \ - extension_smaller;\n            if (extension_strength_fraction > extension_strength)\
    \ {\n                extension_strength = extension_strength_fraction;\n     \
    \           extension_strength = extension.Substring(0, extension.Length - extension_strength);\n\
    \            }\n        }\n        return class_name + \".\" + extension_strength;",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        string extension_strength_2 = extensions[1].ToUpper().Count() - extensions[1].ToLower().Count();\n\
    \        string extension_strength_3 = extensions[2].ToUpper().Count() - extensions[2].ToLower().Count();\n\
    \        string extension_strength_4 = extensions[3].ToUpper().Count() - extensions[3].ToLower().Count();\n\
    \        string extension_strength_5 = extensions[4].ToUpper().Count() - extensions[4].ToLower().Count();\n\
    \        string extension_strength_6 = extensions[5].ToUpper().Count() - extensions[5].ToLower().Count();\n\
    \        string extension_strength_7 = extensions[6].ToUpper().Count() - extensions[6].ToLower().Count();\n\
    \        string extension_strength_8 = extensions[7].ToUpper().Count() - extensions[7].ToLower().Count();\n\
    \        string extension_strength_9 = extensions[8].ToUpper().Count() - extensions[8].ToLower().Count();\n\
    \        string extension_strength_10 = extensions[9].ToUpper().Count() - extensions[9].ToLower().Count();\n\
    \        string extension_strength_11 = extensions[10].ToUpper().Count() - extensions[10].ToLower().Count();\n\
    \        string extension_strength_12 = extensions[11].ToUpper().Count() - extensions[11].ToLower().Count();\n\
    \        string extension_strength_13 = extensions[12].ToUpper().Count() - extensions[12].ToLower().Count();\n\
    \        string extension_strength_14 = extensions[13].ToUpper().Count() - extensions[13].ToLower().Count();\n\
    \        string extension_strength_15 = extensions[14].ToUpper().Count() - extensions[14].ToLower().Count();\n\
    \        string extension_strength_16 = extensions[15].ToUpper().Count() - extensions[15].ToLower().Count();\n\
    \        string extension_strength_17 = extensions[16].ToUpper().Count() - extensions[16].ToLower().Count();\n\
    \        string extension_strength_18 = extensions[17].ToUpper().Count() - extensions[17].ToLower().Count();\n\
    \        string extension_strength_19 = extensions[18].ToUpper().Count() - extensions[18].ToLower().Count();\n\
    \        string extension_strength_20 = extensions[19].ToUpper().Count() - extensions[19].ToLower().Count();",
  "        string strongest = string.Empty;\n        string extension = string.Empty;\n\
    \        string extension_strength = string.Empty;\n        foreach (string extension_name\
    \ in extensions) {\n            extension = extension_name;\n            extension_strength\
    \ = extension.Substring(extension.Length - 1).ToLower();\n            if (extension_strength.Length\
    \ > strongest.Length) {\n                strongest = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest;", "        string extension_strength\
    \ = extensions[0].Substring(class_name.Length);\n        foreach (string extension\
    \ in extensions) {\n            string extension_strength_new = extension.Substring(class_name.Length);\n\
    \            int extension_strength_int = Convert.ToInt32(extension_strength_new);\n\
    \            int extension_strength_float = Convert.ToSingle(extension_strength_new);\n\
    \            int extension_strength_double = Convert.ToDouble(extension_strength_new);\n\
    \            int extension_strength_long = Convert.ToInt64(extension_strength_new);\n\
    \            int extension_strength_ulong = Convert.ToUInt64(extension_strength_new);\n\
    \            int extension_strength_bool = Convert.ToBoolean(extension_strength_new);\n\
    \            int extension_strength_char = Convert.ToChar(extension_strength_new);\n\
    \            int extension_strength_short = Convert.ToInt16(extension_strength_new);\n\
    \            int extension_strength_ushort = Convert.ToUInt16(extension_strength_new);\n\
    \            int extension_strength_ushort = Convert.ToUInt16(extension_strength_new);\n\
    \            int extension_strength_int = Convert.ToInt32(extension_strength_new);\n\
    \            int extension_strength_uint = Convert.ToUInt32(extension_strength_new);\n\
    \            int extension_strength_long = Convert.ToInt64(extension_strength_new);\n\
    \            int extension_strength_ulong = Convert.ToUInt64(extension_strength_new);\n\
    \            int extension_strength_float = Convert.ToSingle(extension_strength_new);\n\
    \            int extension_strength_double = Convert.ToDouble(extension_strength_new);\n\
    \            int extension_strength_bool = Convert.ToBoolean(extension_strength_new);\n\
    \            int extension_strength_char = Convert.ToChar(extension_strength_new);\n\
    \            int extension_strength_short = Convert.ToInt16(extension_strength_new);\n\
    \            int extension_strength_ushort = Convert.ToUInt16(extension_strength_new);\n\
    \            int extension_strength_ushort = Convert.ToUInt16(extension_strength_new);\n\
    \            int extension_strength_int = Convert.ToInt32(extension_strength_new);\n\
    \            int extension_strength_uint = Convert.ToUInt32(extension_strength_new);\n\
    \            int extension_strength_long = Convert.ToInt64(extension_strength_new",
  "        string extension_strength = extensions[0].Length;\n        string extension_class\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ extension_strength_int = extension.Length;\n            if (extension_strength_int\
    \ > extension_strength) {\n                extension_strength = extension_strength_int;\n\
    \                extension_class = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + extension_class;", "        // Your code here\n\
    \        string strongest = string.Empty;\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.Length;\n            int sm =\
    \ class_name.Length;\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest = class_name + \".\" + extension;\n      \
    \          break;\n            }\n        }\n        return strongest;", "   \
    \     string extension_strength = string.Empty;\n        string extension_class_name\
    \ = string.Empty;\n        string extension_class_name_with_extension = string.Empty;\n\
    \        string extension_class_name_with_extension_strength = string.Empty;\n\
    \        string extension_class_name_with_extension_strength_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        string strongest_extension = extensions[0];\n        foreach (string\
    \ extension in extensions) {\n            string extension_strength_new = extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n            if (extension_strength_new > extension_strength)\
    \ {\n                strongest_extension = extension;\n                extension_strength\
    \ = extension_strength_new;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest_extension;", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        double strength = extension_strength / extensions.Count();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();",
  "        string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1, 1);\n        string extension_strength_str\
    \ = extension_strength.ToString();\n        string extension_strength_str_upper\
    \ = extension_strength_str.ToUpper();\n        string extension_strength_str_lower\
    \ = extension_strength_str.ToLower();\n        string extension_strength_str_upper2\
    \ = extension_strength_str.ToUpper();\n        string extension_strength_str_lower2\
    \ = extension_strength_str.ToLower();\n        string extension_strength_str_upper3\
    \ = extension_strength_str.ToUpper();\n        string extension_strength_str_lower3\
    \ = extension_strength_str.ToLower();\n        string extension_strength_str_upper4\
    \ = extension_strength_str.ToUpper();\n        string extension_strength_str_lower4\
    \ = extension_strength_str.ToLower();\n        string extension_strength_str_upper5\
    \ = extension_strength_str.ToUpper();\n        string extension_strength_str_lower5\
    \ = extension_strength_str.ToLower();\n        string extension_strength_str_upper6\
    \ = extension_strength_str.ToUpper();\n        string extension_strength_str_lower6\
    \ = extension_strength_str.ToLower();\n        string extension_strength_str_upper7\
    \ = extension_strength_str.ToUpper();\n        string extension_strength_str_lower7\
    \ = extension_strength_str.ToLower();\n        string extension_strength_str_upper8\
    \ = extension_strength_str.ToUpper();\n        string extension_strength_str_lower8\
    \ = extension_strength_str.ToLower();\n        string extension_strength_str_upper9\
    \ = extension_strength_str.ToUpper();\n        string extension_strength_str_lower9\
    \ = extension_strength_str.ToLower();\n        string extension_strength_str_upper10\
    \ = extension_strength_str.ToUpper();\n        string extension_strength_str_lower10\
    \ = extension_strength_str.ToLower();\n        string extension_strength_str_upper11\
    \ = extension_strength_str.ToUpper();\n        string extension_strength_str_lower11\
    \ = extension_strength_str.ToLower();\n        string extension_strength_str_upper12\
    \ = extension_strength_str.ToUpper();\n        string extension_strength_str_lower12\
    \ = extension_strength_str.ToLower();\n        string extension_strength_str_upper13\
    \ = extension_strength_str.ToUpper();\n        string extension_strength_str_lower13\
    \ = extension_strength_str.ToLower();\n        string extension_", "        string\
    \ extension_strength = \"\";\n        foreach (string extension in extensions)\
    \ {\n            int extension_strength_numerator = 0;\n            int extension_strength_denominator\
    \ = 0;\n            int extension_strength_total = 0;\n            int extension_strength_numerator_total\
    \ = 0;\n            int extension_strength_denominator_total = 0;\n          \
    \  int extension_strength_total_total = 0;\n            int extension_strength_numerator_total_total\
    \ = 0;\n            int extension_strength_denominator_total_total = 0;\n    \
    \        int extension_strength_total_total_total = 0;\n            int extension_strength_numerator_total_total_total\
    \ = 0;\n            int extension_strength_denominator_total_total_total = 0;\n\
    \            int extension_strength_total_total_total_total = 0;\n           \
    \ int extension_strength_numerator_total_total_total_total = 0;\n            int\
    \ extension_strength_denominator_total_total_total_total = 0;\n            int\
    \ extension_strength_total_total_total_total_total = 0;\n            int extension_strength_numerator_total_total_total_total_total\
    \ = 0;\n            int extension_strength_denominator_total_total_total_total_total\
    \ = 0;\n            int extension_strength_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_numerator_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_denominator_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_total_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_numerator_total_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_denominator_total_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_total_total_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_numerator_total_total_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_denominator_total_total_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_total_total_total_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_numerator_total_total_total_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_denominator_total_total_total_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_numerator_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_denominator_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_numerator_total_total_total_total_total_total_",
  "        string extension = extensions[0];\n        string extension_class = class_name\
    \ + extension;\n        string extension_class_with_extension = extension_class\
    \ + \".\";\n        string extension_class_with_extension_strength = extension_class_with_extension\
    \ + extension;\n        string extension_class_with_extension_strength_strength\
    \ = extension_class_with_extension_strength + \".\";\n        string extension_class_with_extension_strength_strength_strength\
    \ = extension_class_with_extension_strength_strength + \".\";\n        string\
    \ extension_class_with_extension_strength_strength_strength_strength = extension_class_with_extension_strength_strength_strength\
    \ + \".\";\n        string extension_class_with_extension_strength_strength_strength_strength_strength\
    \ = extension_class_with_extension_strength_strength_strength_strength + \".\"\
    ;\n        string extension_class_with_extension_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_extension_strength_strength_strength_strength + \".\"\
    ;\n        string extension_class_with_extension_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_extension_strength_strength_strength_strength + \".\"\
    ;\n        string extension_class_with_extension_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_extension_strength_strength_strength_strength + \".\"\
    ;\n        string extension_class_with_extension_strength_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_extension_strength_strength_strength + \".\";\n     \
    \   string extension_class_with_extension_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_extension_strength_strength_strength + \".\";\n     \
    \   string extension_class_with_extension_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_extension_strength_strength_strength + \".\";\n     \
    \   string extension_class_with_extension_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_extension_strength_strength_strength + \".\";\n     \
    \   string extension_class_with_extension_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_extension_strength_strength_strength + \".\";\n     \
    \   string extension_class_with_extension_strength_strength_strength_strength_strength_strength_strength_",
  "        string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1);\n        string extension_strength_str\
    \ = extension_strength.ToUpper();\n        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        string extension_strength_intstr = extension_strength_int.ToString();\n\
    \        int extension_strength_intstr_length = extension_strength_intstr.Length;\n\
    \        int extension_strength_intstr_length_2 = extension_strength_intstr_length\
    \ / 2;\n        int extension_strength_intstr_length_3 = extension_strength_intstr_length\
    \ / 3;\n        int extension_strength_intstr_length_4 = extension_strength_intstr_length\
    \ / 4;\n        int extension_strength_intstr_length_5 = extension_strength_intstr_length\
    \ / 5;\n        int extension_strength_intstr_length_6 = extension_strength_intstr_length\
    \ / 6;\n        int extension_strength_intstr_length_7 = extension_strength_intstr_length\
    \ / 7;\n        int extension_strength_intstr_length_8 = extension_strength_intstr_length\
    \ / 8;\n        int extension_strength_intstr_length_9 = extension_strength_intstr_length\
    \ / 9;\n        int extension_strength_intstr_length_10 = extension_strength_intstr_length\
    \ / 10;\n        int extension_strength_intstr_length_11 = extension_strength_intstr_length\
    \ / 11;\n        int extension_strength_intstr_length_12 = extension_strength_intstr_length\
    \ / 12;\n        int extension_strength_intstr_length_13 = extension_strength_intstr_length\
    \ / 13;\n        int extension_strength_intstr_length_14 = extension_strength_intstr_length\
    \ / 14;\n        int extension_strength_intstr_length_15 = extension_strength_intstr_length\
    \ / 15;\n        int extension_strength_intstr_length_16 = extension_strength_intstr_length\
    \ / 16;\n        int extension_strength_intstr_length_17 = extension_strength_intstr_length\
    \ / 17;\n        int extension_strength_intstr_length_18 = extension_strength_intstr_length\
    \ / 18;\n        int extension_strength_intstr_length_19 = extension_strength_intstr_length\
    \ / 19;\n        int extension_strength_intstr_length_20 = extension_strength_intstr_length\
    \ / 20;\n        int extension_strength_intstr_length_21 = extension_strength_intstr_length\
    \ / 21;\n        int extension_strength_intstr_length_22 = extension_strength_intstr_length\
    \ / 22;\n        int extension_strength_intstr_length_23", "        // Your code\
    \ here\n        string strongest_extension = \"\";\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        double\
    \ max_strength = extension_strength;\n        string strongest_extension = null;\n\
    \        foreach (string extension in extensions) {\n            if (extension_strength\
    \ > max_strength) {\n                max_strength = extension_strength;\n    \
    \            strongest_extension = extension;\n            }\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       return class_name + \".\" + strongest_extension;", "        string extension_strength\
    \ = \"\";\n        string extension_class = \"\";\n        foreach (string extension\
    \ in extensions) {\n            int extension_class_length = extension.Length;\n\
    \            int extension_strength_length = extension_strength.Length;\n    \
    \        int extension_class_cap = extension_class_length - extension_strength_length;\n\
    \            int extension_strength_cap = extension_strength_length - extension_class_cap;\n\
    \            int extension_class_sm = extension_class_length - extension_class_cap;\n\
    \            int extension_strength_sm = (extension_class_length - extension_class_sm);\n\
    \            int extension_class_cap_sm = (extension_class_length - extension_class_cap);\n\
    \            int extension_strength_cap_sm = (extension_class_length - extension_class_cap_sm);\n\
    \            int extension_class_cap_sm = extension_class_length - extension_class_cap;\n\
    \            int extension_strength_cap_sm = extension_class_length - extension_class_cap_sm;\n\
    \            int extension_class_cap_sm_sm = extension_class_length - extension_class_cap_sm;\n\
    \            int extension_strength_cap_sm_sm = extension_class_length - extension_class_cap_sm_sm;\n\
    \            int extension_class_cap_sm_sm_sm = extension_class_length - extension_class_cap_sm_sm_sm;\n\
    \            int extension_strength_cap_sm_sm_sm = extension_class_length - extension_class_cap_sm_sm_sm;\n\
    \            int extension_class_cap_sm_sm_sm_sm = extension_class_length - extension_class_cap_sm_sm_sm_sm;\n\
    \            int extension_strength_cap_sm_sm_sm_sm = extension_class_length -\
    \ extension_class_cap_sm_sm_sm_sm;\n            int extension_class_cap_sm_sm_sm_sm_sm\
    \ = extension_class_length - extension_class_cap_sm_sm_sm_sm_sm;\n           \
    \ int extension_strength_cap_sm_sm_sm_sm_sm = extension_class_length - extension_class_cap_sm_sm_sm_sm_sm;\n\
    \            int extension_class_cap_sm_sm_sm_sm_sm_sm = extension_class_length\
    \ - extension_class_cap_sm_sm_sm_sm_sm_sm;\n            int extension_strength_cap_sm_sm_sm_sm_sm_sm\
    \ = extension_class_length - extension_class_cap_sm_sm_sm_sm_sm_sm;\n        \
    \    int extension_class_cap_sm_sm_sm_sm_sm_sm_sm = extension_class_length - extension_class_cap_sm_sm_sm_sm_sm_sm_sm;\n\
    \            int extension_strength_cap_sm_sm_sm_sm_sm_sm_sm = extension_class_length\
    \ - extension_", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        string strongest_extension = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_new\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength_new > extension_strength) {\n                strongest_extension\
    \ = extension;\n                extension_strength = extension_strength_new;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string extension_strength = extensions[0].ToUpper().Substring(class_name.Length);\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ = extension.ToUpper().Substring(class_name.Length);\n            if (extension_strength.Equals(extension.ToUpper().Substring(class_name.Length)))\
    \ {\n                extension_strength = extension.ToUpper().Substring(class_name.Length);\n\
    \            }\n        }\n        return class_name + \".\" + extension_strength;",
  "        string extension = extensions.OrderByDescending(x => x.Length).FirstOrDefault();\n\
    \        if (extension != null)\n            return class_name + \".\" + extension;\n\
    \        else\n            return class_name;", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1,\
    \ 1);\n        string extension_strength_str = extension_strength.ToString();\n\
    \        string extension_strength_str_upper = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper2 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower2 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper3 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower3 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper4 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower4 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper5 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower5 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper6 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower6 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper7 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower7 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper8 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower8 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper9 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower9 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper10 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower10 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper11 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower11 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper12 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower12 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper13 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower13 = extension_strength_str.ToLower();\n\
    \        string extension_", "        string strongest_extension = string.Empty;\n\
    \        string strongest_extension_strength = string.Empty;\n        string strongest_extension_strength_class\
    \ = string.Empty;\n        foreach (string extension in extensions) {\n      \
    \      int extension_strength = extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n                strongest_extension_strength_class =\
    \ class_name;\n            }\n        }\n        return strongest_extension_strength_class\
    \ + \".\" + strongest_extension;", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        string extension_strength_2 = extensions[1].ToUpper().Count()\
    \ - extensions[1].ToLower().Count();\n        string extension_strength_3 = extensions[2].ToUpper().Count()\
    \ - extensions[2].ToLower().Count();\n        string extension_strength_4 = extensions[3].ToUpper().Count()\
    \ - extensions[3].ToLower().Count();\n        string extension_strength_5 = extensions[4].ToUpper().Count()\
    \ - extensions[4].ToLower().Count();\n        string extension_strength_6 = extensions[5].ToUpper().Count()\
    \ - extensions[5].ToLower().Count();\n        string extension_strength_7 = extensions[6].ToUpper().Count()\
    \ - extensions[6].ToLower().Count();\n        string extension_strength_8 = extensions[7].ToUpper().Count()\
    \ - extensions[7].ToLower().Count();\n        string extension_strength_9 = extensions[8].ToUpper().Count()\
    \ - extensions[8].ToLower().Count();\n        string extension_strength_10 = extensions[9].ToUpper().Count()\
    \ - extensions[9].ToLower().Count();\n        string extension_strength_11 = extensions[10].ToUpper().Count()\
    \ - extensions[10].ToLower().Count();\n        string extension_strength_12 =\
    \ extensions[11].ToUpper().Count() - extensions[11].ToLower().Count();\n     \
    \   string extension_strength_13 = extensions[12].ToUpper().Count() - extensions[12].ToLower().Count();\n\
    \        string extension_strength_14 = extensions[13].ToUpper().Count() - extensions[13].ToLower().Count();\n\
    \        string extension_strength_15 = extensions[14].ToUpper().Count() - extensions[14].ToLower().Count();\n\
    \        string extension_strength_16 = extensions[15].ToUpper().Count() - extensions[15].ToLower().Count();\n\
    \        string extension_strength_17 = extensions[16].ToUpper().Count() - extensions[16].ToLower().Count();\n\
    \        string extension_strength_18 = extensions[17].ToUpper().Count() - extensions[17].ToLower().Count();\n\
    \        string extension_strength_19 = extensions[18].ToUpper().Count() - extensions[18].ToLower().Count();\n\
    \        string extension_strength_20 = extensions[19].ToUpper().Count() - extensions[19].ToLower().Count();",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       extension_strength = extension_strength / extensions.Count();\n      \
    \  extension_strength = Math.Abs(extension_strength);\n        extension_strength\
    \ = extension_strength.ToString();\n        string strongest_extension = class_name\
    \ + \".\" + extensions[0];\n        foreach (string extension in extensions) {\n\
    \            if (extension_strength > extension.ToUpper().Count() - extension.ToLower().Count())\
    \ {\n                strongest_extension = class_name + \".\" + extension;\n \
    \           }\n        }\n        return strongest_extension;", "        string\
    \ strongest_extension = string.Empty;\n        string extension_strength = string.Empty;\n\
    \        string extension_class_name = string.Empty;\n        string extension_extension_name\
    \ = string.Empty;\n        string extension_extension_strength = string.Empty;\n\
    \        foreach (string extension in extensions) {\n            extension_class_name\
    \ = extension.Substring(0, extension.IndexOf(\".\"));\n            extension_extension_name\
    \ = extension.Substring(extension.IndexOf(\".\") + 1);\n            extension_extension_strength\
    \ = extension.Substring(extension.IndexOf(\".\") + 1, extension.IndexOf(\".\"\
    ) - extension.IndexOf(\".\") - 1);\n            if (extension_class_name == class_name)\
    \ {\n                if (extension_extension_strength.Length > extension_strength.Length)\
    \ {\n                    strongest_extension = extension;\n                  \
    \  extension_strength = extension_extension_strength;\n                }\n   \
    \         }\n        }\n        return strongest_extension;", "        string\
    \ extension_strength = extensions[0].Length;\n        foreach (string extension\
    \ in extensions) {\n            int extension_length = extension.Length;\n   \
    \         int extension_strength_difference = extension_length - extension_strength;\n\
    \            if (extension_strength_difference < 0) {\n                extension_strength\
    \ = extension_length;\n            }\n            else {\n                extension_strength\
    \ += extension_strength_difference;\n            }\n        }\n        return\
    \ class_name + \".\" + extensions[0];", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1).ToUpper();\n\
    \        string extension_strength_number = extension_strength.Count(c => c ==\
    \ 'A') - extension_strength.Count(c => c == 'B') - extension_strength.Count(c\
    \ => c == 'C');\n        string extension_strength_number_string = extension_strength_number.ToString();\n\
    \        string extension_strength_number_string_reversed = extension_strength_number_string.Reverse().ToArray();\n\
    \        int extension_strength_number_string_reversed_int = int.Parse(extension_strength_number_string_reversed);\n\
    \        int extension_strength_number_string_reversed_int_reversed = extension_strength_number_string_reversed_int\
    \ * -1;\n        int extension_strength_number_string_reversed_int_reversed_reversed\
    \ = extension_strength_number_string_reversed_int_reversed * -1;\n        int\
    \ extension_strength_number_string_reversed_int_reversed_reversed_reversed = extension_strength_number_string_reversed_int_reversed_reversed\
    \ * -1;\n        int extension_strength_number_string_reversed_int_reversed_reversed_reversed_reversed\
    \ = extension_strength_number_string_reversed_int_reversed_reversed_reversed *\
    \ -1;\n        int extension_strength_number_string_reversed_int_reversed_reversed_reversed_reversed_reversed\
    \ = extension_strength_number_string_reversed_int_reversed_reversed_reversed_reversed\
    \ * -1;\n        int extension_strength_number_string_reversed_int_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = extension_strength_number_string_reversed_int_reversed_reversed_reversed_reversed_reversed\
    \ * -1;\n        int extension_strength_number_string_reversed_int_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = extension_strength_number_string_reversed_int_reversed_reversed_reversed_reversed_reversed_reversed\
    \ * -1;\n        int extension_strength_number_string_reversed_int_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = extension_strength_number_string_reversed_int_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ * -1;\n        int extension_strength_number_string_reversed_int_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = extension_strength_number_string_reversed_int_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ * -1;\n        int extension_strength_number_string_reverse", "        string\
    \ extension_strength = extensions[0];\n        foreach (string extension in extensions)\
    \ {\n            int extension_capital = extension.Count(x => char.IsUpper(x));\n\
    \            int extension_smaller = extension.Count(x => char.IsLower(x));\n\
    \            int extension_strength_fraction = extension_capital - extension_smaller;\n\
    \            if (extension_strength_fraction > extension_strength) {\n       \
    \         extension_strength = extension_strength_fraction;\n                extension_strength\
    \ = extension.Substring(0, extension.Length - extension_strength);\n         \
    \   }\n        }\n        return class_name + \".\" + extension_strength;", " \
    \       string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1).ToLower();\n        string extension_strength_fraction\
    \ =\n            extension_strength.Substring(extension_strength.Length - 1).ToLower();\n\
    \        string extension_strength_fraction_remainder =\n            extension_strength_fraction.Substring(extension_strength_fraction.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder =\n  \
    \          extension_strength_fraction_remainder.Substring(extension_strength_fraction_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder.Substring(extension_strength_fraction_remainder_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder_remainder.Substring(extension_strength_fraction_remainder_remainder_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder_remainder_remainder.Substring(extension_strength_fraction_remainder_remainder_remainder_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder_remainder_remainder_remainder.Substring(extension_strength_fraction_remainder_remainder_remainder_remainder_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder.Substring(extension_strength_fraction_remainder_remainder_remainder_remainder_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder_remainder.Substring(extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder.Length\
    \ - 1);\n        string extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ =\n            extension_strength_fraction_remainder_remainder_remainder_remainder_remainder_remainder_remain",
  "        string extension = extensions[0];\n        foreach (string extension2 in\
    \ extensions) {\n            int extension2_strength = extension2.ToUpper().Count()\
    \ - extension2.ToUpper().ToLower().Count();\n            if (extension2_strength\
    \ > extension.ToUpper().Count() - extension.ToUpper().ToLower().Count()) {\n \
    \               extension = extension2;\n            }\n        }\n        return\
    \ class_name + \".\" + extension;", "        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap_extension\
    \ = extension.ToUpper().Count();\n            int sm_extension = extension.ToLower().Count();\n\
    \            int strength = cap_extension - sm_extension;\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + \".\" + extension;\n\
    \                break;\n            }\n        }\n        return strongest_extension;",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        extensions.Sort();\n\
    \        string strongest = class_name + \".\" + extensions[0];\n        foreach\
    \ (string extension in extensions) {\n            if (extension.ToUpper().Count()\
    \ - extension.ToLower().Count() == strength) {\n                strongest = class_name\
    \ + \".\" + extension;\n            }\n        }\n        return strongest;",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        string strongest_extension = extensions[0];\n        foreach (string\
    \ extension in extensions) {\n            extension_strength += extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n            if (extension_strength > strongest_extension.ToUpper().Count()\
    \ - strongest_extension.ToLower().Count()) {\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        string extension_strength = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int extension_capitalized\
    \ = extension.Count(c => char.IsUpper(c));\n            int extension_smallcased\
    \ = extension.Count(c => char.IsLower(c));\n            int extension_strength_difference\
    \ = extension_capitalized - extension_smallcased;\n            if (extension_strength_difference\
    \ > extension_strength.Count(c => char.IsUpper(c))) extension_strength = extension;\n\
    \        }\n        return class_name + \".\" + extension_strength;", "      \
    \  string extension = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction =\n            extension_strength.Substring(0,\
    \ extension_strength.Length - 1).ToLower();\n        string extension_strength_fraction_remainder\
    \ =\n            extension_strength.Substring(extension_strength.Length - 1).ToLower();\n\
    \        double extension_strength_fraction_remainder_double = \n            double.Parse(extension_strength_fraction_remainder);\n\
    \        double extension_strength_fraction_remainder_double_2 = \n          \
    \  extension_strength_fraction_remainder_double * 2;\n        double extension_strength_fraction_remainder_double_3\
    \ = \n            extension_strength_fraction_remainder_double_2 * 3;\n      \
    \  double extension_strength_fraction_remainder_double_4 = \n            extension_strength_fraction_remainder_double_3\
    \ * 4;\n        double extension_strength_fraction_remainder_double_5 = \n   \
    \         extension_strength_fraction_remainder_double_4 * 5;\n        double\
    \ extension_strength_fraction_remainder_double_6 = \n            extension_strength_fraction_remainder_double_5\
    \ * 6;\n        double extension_strength_fraction_remainder_double_7 = \n   \
    \         extension_strength_fraction_remainder_double_6 * 7;\n        double\
    \ extension_strength_fraction_remainder_double_8 = \n            extension_strength_fraction_remainder_double_7\
    \ * 8;\n        double extension_strength_fraction_remainder_double_9 = \n   \
    \         extension_strength_fraction_remainder_double_8 * 9;\n        double\
    \ extension_strength_fraction_remainder_double_10 = \n            extension_strength_fraction_remainder_double_9\
    \ * 10;\n        double extension_strength_fraction_remainder_double_11 = \n \
    \           extension_strength_fraction_remainder_double_10 * 11;\n        double\
    \ extension_strength_fraction_remainder_double_12 = \n            extension_strength_fraction_remainder_double_11\
    \ * 12;\n        double extension_strength_fraction_remainder_double_13 = \n \
    \           extension_strength_fraction_remainder_double_12 * 13;\n        double\
    \ extension_strength_fraction_remainder_double_14 = \n            extension_strength_fraction_remainder_double_13\
    \ * 14;\n        double extension_strength_fraction_remainder_double_15 = \n \
    \           extension_strength_fraction_remainder_double_14 * 15;\n        double\
    \ extension_strength_fraction_remainder_double_16 = \n            extension_strength_fraction_remainder_double_15",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        double\
    \ max_strength = extensions.Max(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        if (strength == max_strength) {\n            return class_name + extensions[0];\n\
    \        }\n        if (strength < max_strength) {\n            return class_name\
    \ + extensions.OrderBy(x => x.ToUpper().Count() - x.ToLower().Count()).First();\n\
    \        }\n        return class_name + extensions.OrderByDescending(x => x.ToUpper().Count()\
    \ - x.ToLower().Count()).First();", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1);\n\
    \        string extension_strength_number = extension_strength.ToCharArray().Where(c\
    \ => char.IsUpper(c)).Count();\n        string extension_strength_number_string\
    \ = extension_strength_number.ToString();\n        string extension_strength_number_string_with_zeros\
    \ = extension_strength_number_string.PadLeft(3, '0');\n        string extension_strength_number_string_with_zeros_as_hex\
    \ = extension_strength_number_string_with_zeros.ToHexString();\n        string\
    \ extension_strength_number_string_with_zeros_as_hex_with_zeros = extension_strength_number_string_with_zeros_as_hex.PadLeft(4,\
    \ '0');\n        string extension_strength_number_string_with_zeros_as_hex_with_zeros_as_hex\
    \ = extension_strength_number_string_with_zeros_as_hex_with_zeros.ToHexString();\n\
    \        string extension_strength_number_string_with_zeros_as_hex_with_zeros_as_hex_with_zeros\
    \ = extension_strength_number_string_with_zeros_as_hex_with_zeros_as_hex.PadLeft(8,\
    \ '0');\n        string extension_strength_number_string_with_zeros_as_hex_with_zeros_as_hex_with_zeros_as_hex\
    \ = extension_strength_number_string_with_zeros_as_hex_with_zeros_as_hex_with_zeros.ToHexString();\n\
    \        string extension_strength_number_string_with_zeros_as_hex_with_zeros_as_hex_with_zeros_as_hex_with_zeros\
    \ = extension_strength_number_string_with_zeros_as_hex_with_zeros_as_hex_with_zeros_as_hex.PadLeft(16,\
    \ '0');\n        string extension_strength_number_string_with_zeros_as_hex_with_zeros_as_hex_with_zeros_as_hex_with_zeros_as_hex\
    \ = extension_strength_number_string_with_zeros_as_hex_with_zeros_as_hex_with_zeros_as_hex_with_zeros.ToHexString();\n\
    \        string extension_strength_number_string_with_zeros_as_hex_with_zeros_as_hex_with_zeros_as_hex_with_zeros_as_hex_with_zeros_as_hex\
    \ = extension_strength_number_string_with_zeros_as_hex_with_zeros_as_hex_with_zeros_as_hex_with_zeros_as_hex_with_zeros.ToHexString();\n\
    \        string extension_strength_number_string_with_zeros_as_hex_with_zeros_as_hex_with_zeros_as_hex_with_zeros_as_hex_with_zeros_as_hex\
    \ = extension_strength_number_string_", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        double strength = extension_strength / extensions.Count();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();",
  "        string strongest_extension = string.Empty;\n        double strength = -1;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Length;\n\
    \            int sm = class_name.ToLower().Count(x => char.IsUpper(x));\n    \
    \        double frac = cap - sm;\n            if (frac > strength) {\n       \
    \         strongest_extension = extension;\n                strength = frac;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string extension = extensions[0];\n        string extension_class = class_name\
    \ + extension;\n        string extension_class_name = extension_class.Substring(0,\
    \ extension_class.Length - extension.Length);\n        string extension_class_name_without_extension\
    \ = extension_class_name.Substring(0, extension_class_name.Length - extension.Length);\n\
    \        int extension_class_name_without_extension_length = extension_class_name_without_extension.Length;\n\
    \        string extension_class_name_without_extension_without_extension = extension_class_name_without_extension.Substring(0,\
    \ extension_class_name_without_extension_without_extension.Length - extension_class_name_without_extension_length);\n\
    \        int extension_class_name_without_extension_without_extension_length =\
    \ extension_class_name_without_extension_without_extension.Length;\n        string\
    \ extension_class_name_without_extension_without_extension_without_extension =\
    \ extension_class_name_without_extension_without_extension.Substring(0, extension_class_name_without_extension_without_extension_without_extension_length);\n\
    \        int extension_class_name_without_extension_without_extension_without_extension_length\
    \ = extension_class_name_without_extension_without_extension_without_extension.Length;\n\
    \        string extension_class_name_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_without_extension_without_extension_without_extension.Substring(0,\
    \ extension_class_name_without_extension_without_extension_without_extension_without_extension_length);\n\
    \        int extension_class_name_without_extension_without_extension_without_extension_without_extension_length\
    \ = extension_class_name_without_extension_without_extension_without_extension_without_extension.Length;\n\
    \        string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_without_extension_without_extension_without_extension_without_extension.Substring(0,\
    \ extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_length);\n\
    \        int extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_length\
    \ = extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension.Length;\n\
    \        string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.Substring(0,\
    \ extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_length);\n\
    \        int extension_class_name_without_extension_without_extension_without_extension",
  "        // Your code here\n        string strongest_extension = \"\";\n       \
    \ foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + \".\" + extension;\n          \
    \      break;\n            }\n        }\n        return strongest_extension;",
  "        string strongest_extension = null;\n        string extension_strength =\
    \ null;\n        foreach (string extension in extensions) {\n            int extension_strength_numerator\
    \ = 0;\n            int extension_strength_denominator = 0;\n            int extension_cap\
    \ = 0;\n            int extension_sm = 0;\n            int extension_length =\
    \ extension.Length;\n            for (int i = 0; i < extension_length; i++) {\n\
    \                char c = extension[i];\n                if (Char.IsUpper(c))\
    \ {\n                    extension_cap++;\n                }\n               \
    \ else if (Char.IsLower(c)) {\n                    extension_sm++;\n         \
    \       }\n            }\n            extension_strength_numerator = extension_cap\
    \ - extension_sm;\n            extension_strength_denominator = extension_cap;\n\
    \            extension_strength = extension_strength_numerator / extension_strength_denominator;\n\
    \            if (extension_strength > extension_strength_numerator / extension_strength_denominator)\
    \ {\n                strongest_extension = extension;\n            }\n       \
    \ }\n        return class_name + \".\" + strongest_extension;", "        string\
    \ strongest_extension = extensions[0];\n        string extension_strength = strongest_extension.Substring(strongest_extension.Length\
    \ - 1, 1);\n        foreach (string extension in extensions) {\n            string\
    \ extension_strength_temp = extension.Substring(extension.Length - 1, 1);\n  \
    \          if (extension_strength_temp == extension_strength) {\n            \
    \    strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1);\n\
    \        string extension_strength_str = extension_strength.ToLower();\n     \
    \   string extension_strength_str_length = extension_strength_str.Length;\n  \
    \      string extension_strength_str_length_str = extension_strength_str.Substring(extension_strength_str_length\
    \ - 1);\n        int extension_strength_int = Convert.ToInt32(extension_strength_str_length_str);\n\
    \        int extension_strength_int_length = extension_strength_int / 10;\n  \
    \      string extension_strength_int_length_str = extension_strength_int % 10;\n\
    \        string extension_strength_int_length_str_str = extension_strength_int_length_str.ToString(CultureInfo.InvariantCulture);\n\
    \        int extension_strength_int_length_str_str_length = extension_strength_int_length_str_str.Length;\n\
    \        string extension_strength_int_length_str_str_length_str = extension_strength_int_length_str_str.Substring(extension_strength_int_length_str_str_length\
    \ - 1);\n        int extension_strength_int_length_str_str_length_str_length =\
    \ extension_strength_int_length_str_str_length_str.Length;\n        string extension_strength_int_length_str_str_length_str_length_str_str\
    \ = extension_strength_int_length_str_str_length_str.Substring(extension_strength_int_length_str_str_length_str_length\
    \ - 1);\n        int extension_strength_int_length_str_str_length_str_length_str_str_length\
    \ = extension_strength_int_length_str_str_length_str_length_str_str.Length;\n\
    \        string extension_strength_int_length_str_str_length_str_length_str_length_str_str_str\
    \ = extension_strength_int_length_str_str_length_str_length_str_str_str.Substring(extension_strength_int_length_str_str_length_str_length_str_str_length_str_str_length\
    \ - 1);\n        int extension_strength_int_length_str_str_length_str_length_str_length_str_length_str_str_length\
    \ = extension_strength_int_length_str_str_length_str_length_str_length_str_length_str_str_str.Length;\n\
    \        string extension_strength_int_length_str_str_length_str_length_str_length_str_length_str_length_str_length_str_str_str\
    \ = extension_strength_int_length_str_str_length_str_length_str_length_str_length_str_length_str_str_str.Substring(extension_strength_int_length_str_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length\
    \ - 1);\n        int extension_strength_int_length_str_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_str_length\
    \ = extension_strength_int_length_str_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_str.Length;\n\
    \        string extension_strength_int_length_str_str_length_str_length_str_length_str_length_str_",
  "        string strongest_extension = string.Empty;\n        string extension_strength\
    \ = string.Empty;\n        string extension_class_name = string.Empty;\n     \
    \   string extension_class_name_with_extension = string.Empty;\n        string\
    \ extension_class_name_with_extension_strength = string.Empty;\n        foreach\
    \ (string extension in extensions) {\n            extension_class_name = class_name\
    \ + \".\" + extension;\n            extension_class_name_with_extension = extension_class_name.Substring(0,\
    \ extension_class_name.Length - extension.Length);\n            extension_strength\
    \ = extension_class_name.Substring(extension_class_name.Length - extension.Length);\n\
    \            if (extension_strength.Length > strongest_extension.Length) {\n \
    \               strongest_extension = extension_class_name_with_extension;\n \
    \           }\n            if (extension_strength.Length == strongest_extension.Length)\
    \ {\n                if (extension_strength.ToUpper() == extension_strength.ToLower())\
    \ {\n                    extension_class_name_with_extension_strength = extension_class_name_with_extension;\n\
    \                }\n            }\n        }\n        if (strongest_extension.Length\
    \ > extension_strength.Length) {\n            strongest_extension = extension_class_name_with_extension_strength;\n\
    \        }\n        return strongest_extension;", "        string strongest_extension\
    \ = string.Empty;\n        double strongest_extension_strength = double.MaxValue;\n\
    \        foreach (string extension in extensions) {\n            int capitals\
    \ = extension.Count(c => char.IsUpper(c));\n            int lowercases = extension.Count(c\
    \ => char.IsLower(c));\n            double strength = capitals - lowercases;\n\
    \            if (strength > strongest_extension_strength) {\n                strongest_extension\
    \ = extension;\n                strongest_extension_strength = strength;\n   \
    \         }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string strongest_extension = null;\n        double strength = 0;\n    \
    \    foreach (string extension in extensions) {\n            int cap = extension.Length;\n\
    \            int sm = class_name.Length;\n            double frac = cap - sm;\n\
    \            strength += frac;\n        }\n        if (strength > 0) {\n     \
    \       strongest_extension = class_name + extensions[0];\n        }\n       \
    \ return strongest_extension;", "        string strongest_extension = null;\n\
    \        string extension_strength = null;\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength_numerator = 0;\n      \
    \      int extension_strength_denominator = 0;\n            int extension_cap\
    \ = 0;\n            int extension_sm = 0;\n            int extension_length =\
    \ extension.Length;\n            int extension_counter = 0;\n            int extension_counter2\
    \ = 0;\n            char extension_char;\n            char extension_char2;\n\
    \            char extension_char3;\n            char extension_char4;\n      \
    \      char extension_char5;\n            char extension_char6;\n            char\
    \ extension_char7;\n            char extension_char8;\n            char extension_char9;\n\
    \            char extension_char10;\n            char extension_char11;\n    \
    \        char extension_char12;\n            char extension_char13;\n        \
    \    char extension_char14;\n            char extension_char15;\n            char\
    \ extension_char16;\n            char extension_char17;\n            char extension_char18;\n\
    \            char extension_char19;\n            char extension_char20;\n    \
    \        char extension_char21;\n            char extension_char22;\n        \
    \    char extension_char23;\n            char extension_char24;\n            char\
    \ extension_char25;\n            char extension_char26;\n            char extension_char27;\n\
    \            char extension_char28;\n            char extension_char29;\n    \
    \        char extension_char30;\n            char extension_char31;\n        \
    \    char extension_char32;\n            char extension_char33;\n            char\
    \ extension_char34;\n            char extension_char35;\n            char extension_char36;\n\
    \            char extension_char37;\n            char extension_char38;\n    \
    \        char extension_char39;\n            char extension_char40;\n        \
    \    char extension_char41;\n            char extension_char42;\n            char\
    \ extension_char43;\n            char extension_char44;\n            char extension_char45;\n\
    \            char extension_char46;\n            char extension_char47;\n    \
    \        char extension_char48;\n            char extension_char49;\n        \
    \    char extension_char50;\n            char extension_char51;\n            char\
    \ extension_char52;\n            char extension_char53;\n            char extension_char54;\n\
    \            char extension_char55;\n            char extension_char56;\n    \
    \        char extension_char", "        string extension = extensions[0];\n  \
    \      string extension_strength = extension.Substring(0, extension.Length - 1);\n\
    \        string extension_strength_without_cap = extension_strength.ToLower();\n\
    \        int extension_strength_without_cap_length = extension_strength_without_cap.Length;\n\
    \        int extension_strength_without_cap_count_of_cap = extension_strength_without_cap.Count(c\
    \ => c == 'C');\n        int extension_strength_without_cap_count_of_sm = extension_strength_without_cap.Count(c\
    \ => c == 'S');\n        int extension_strength_without_cap_count_of_cap_and_sm\
    \ = extension_strength_without_cap_count_of_cap + extension_strength_without_cap_count_of_sm;\n\
    \        int extension_strength_without_cap_count_of_cap_and_sm_and_extension_strength_without_cap_count_of_cap_and_sm\
    \ = extension_strength_without_cap_count_of_cap_and_sm + extension_strength_without_cap_count_of_cap_and_sm;\n\
    \        int extension_strength_without_cap_count_of_cap_and_sm_and_extension_strength_without_cap_count_of_cap_and_sm_and_extension_strength_without_cap_count_of_cap_and_sm\
    \ = extension_strength_without_cap_count_of_cap_and_sm_and_extension_strength_without_cap_count_of_cap_and_sm\
    \ + extension_strength_without_cap_count_of_cap_and_sm_and_extension_strength_without_cap_count_of_cap_and_sm;\n\
    \        int extension_strength_without_cap_count_of_cap_and_sm_and_extension_strength_without_cap_count_of_cap_and_sm_and_extension_strength_without_cap_count_of_cap_and_sm_and_extension_strength_without_cap_count_of_cap_and_sm\
    \ = extension_strength_without_cap_count_of_cap_and_sm_and_extension_strength_without_cap_count_of_cap_and_sm_and_extension_strength_without_cap_count_of_cap_and_sm\
    \ + extension_strength_without_cap_count_of_cap_and_sm_and_extension_strength_without_cap_count_of_cap_and_sm_and_extension_strength_without_cap_count_of_cap_and_sm;\n\
    \        int extension_strength_without_cap_count_of_cap_and_sm_and_extension_strength_without_cap_count_of_cap_and_sm_and_extension_strength_without_cap_count_of_cap_and_sm_and_extension_strength_without_cap_count_of_cap_and_sm_and_extension_strength_without_cap_count_of_cap_and_sm_and_extension_strength_without_cap_count_of_cap_and_sm_and_extension_strength",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        double\
    \ max_strength = extension_strength;\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            if (extension.ToUpper().Count()\
    \ - extension.ToLower().Count() > max_strength) {\n                max_strength\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n             \
    \   strongest_extension = class_name + \".\" + extension;\n            }\n   \
    \     }\n        return strongest_extension;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => Char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => Char.IsLower(c));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += \".\" + extension;\n        \
    \    }\n        }\n        return strongest_extension;", "        string strongest_extension\
    \ = string.Empty;\n        string extension_strength = string.Empty;\n       \
    \ foreach (string extension in extensions) {\n            int extension_strength_numerator\
    \ = extension.Count(x => char.IsUpper(x));\n            int extension_strength_denominator\
    \ = extension.Count(x => char.IsLower(x));\n            double extension_strength_fraction\
    \ = (double)extension_strength_numerator / (double)extension_strength_denominator;\n\
    \            if (extension_strength_fraction > extension_strength) {\n       \
    \         strongest_extension = extension;\n                extension_strength\
    \ = extension_strength_fraction;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest_extension;", "        string extension_strength = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength_int > extension_strength.ToUpper().Count() - extension_strength.ToLower().Count())\
    \ {\n                extension_strength = extension;\n            }\n        }\n\
    \        return class_name + \".\" + extension_strength;", "        string extension_strength\
    \ = extensions[0].Length;\n        foreach (string extension in extensions) {\n\
    \            int extension_strength_new = extension.Length;\n            int extension_strength_old\
    \ = extension_strength;\n            extension_strength = extension_strength_new\
    \ - extension_strength_old;\n            if (extension_strength > extension_strength_old)\
    \ {\n                extension_strength = extension_strength_old;\n          \
    \  }\n        }\n        return class_name + \".\" + extensions[0];", "      \
    \  string extension_strength = extensions[0].ToUpper().Substring(1).ToLower();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ = extension.ToUpper().Substring(1).ToLower() - extension_strength;\n       \
    \ }\n        double strength = Convert.ToDouble(extension_strength);\n       \
    \ string strongest_extension = class_name + extensions[0];\n        foreach (string\
    \ extension in extensions) {\n            if (strength > Convert.ToDouble(extension.ToUpper().Substring(1).ToLower()))\
    \ {\n                strongest_extension = class_name + extension;\n         \
    \   }\n        }\n        return strongest_extension;", "        string extension\
    \ = extensions.OrderByDescending(x => x.Length).First();\n        string extension_class\
    \ = class_name + extension;\n        string extension_class_with_strength = extension_class\
    \ + \".\" + extension.Length;\n        string extension_class_with_strength_2\
    \ = extension_class_with_strength + \".\" + extension.Length;\n        string\
    \ extension_class_with_strength_3 = extension_class_with_strength_2 + \".\" +\
    \ extension.Length;\n        string extension_class_with_strength_4 = extension_class_with_strength_3\
    \ + \".\" + extension.Length;\n        string extension_class_with_strength_5\
    \ = extension_class_with_strength_4 + \".\" + extension.Length;\n        string\
    \ extension_class_with_strength_6 = extension_class_with_strength_5 + \".\" +\
    \ extension.Length;\n        string extension_class_with_strength_7 = extension_class_with_strength_6\
    \ + \".\" + extension.Length;\n        string extension_class_with_strength_8\
    \ = extension_class_with_strength_7 + \".\" + extension.Length;\n        string\
    \ extension_class_with_strength_9 = extension_class_with_strength_8 + \".\" +\
    \ extension.Length;\n        string extension_class_with_strength_10 = extension_class_with_strength_9\
    \ + \".\" + extension.Length;\n        string extension_class_with_strength_11\
    \ = extension_class_with_strength_10 + \".\" + extension.Length;\n        string\
    \ extension_class_with_strength_12 = extension_class_with_strength_11 + \".\"\
    \ + extension.Length;\n        string extension_class_with_strength_13 = extension_class_with_strength_12\
    \ + \".\" + extension.Length;\n        string extension_class_with_strength_14\
    \ = extension_class_with_strength_13 + \".\" + extension.Length;\n        string\
    \ extension_class_with_strength_15 = extension_class_with_strength_14 + \".\"\
    \ + extension.Length;\n        string extension_class_with_strength_16 = extension_class_with_strength_15\
    \ + \".\" + extension.Length;\n        string extension_class_with_strength_17\
    \ = extension_class_with_strength_16 + \".\" + extension.Length;\n        string\
    \ extension_class_with_strength_18 = extension_class_with_strength_17 + \".\"\
    \ + extension.Length;\n        string extension_class_with_strength_19 = extension_class_with_strength_18\
    \ + \".\" + extension.Length;\n        string extension_class_with_strength_20\
    \ = extension_class_with_strength_19 + \".\" + extension.Length;\n        string\
    \ extension_class_with_strength_21 = extension_class_with_strength_20 + \".\"\
    \ + extension.Length;\n        string extension", "        string extension_strength\
    \ = extensions[0];\n        foreach (string extension in extensions) {\n     \
    \       int extension_strength_int = extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \            if (extension_strength_int > extension_strength.ToUpper().Count()\
    \ - extension_strength.ToLower().Count()) {\n                extension_strength\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ extension_strength;", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        if (extension_strength > 0) {\n            return class_name\
    \ + \".\" + extensions[0];\n        }\n        if (extension_strength == 0) {\n\
    \            return class_name;\n        }\n        extension_strength = extension_strength\
    \ / 2;\n        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength > 0) {\n            return class_name + \".\" +\
    \ extensions[0];\n        }\n        if (extension_strength == 0) {\n        \
    \    return class_name;\n        }\n        extension_strength = extension_strength\
    \ / 2;\n        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength > 0) {\n            return class_name + \".\" +\
    \ extensions[0];\n        }\n        if (extension_strength == 0) {\n        \
    \    return class_name;\n        }\n        extension_strength = extension_strength\
    \ / 2;\n        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength > 0) {\n            return class_name + \".\" +\
    \ extensions[0];\n        }\n        if (extension_strength == 0) {\n        \
    \    return class_name;\n        }\n        extension_strength = extension_strength\
    \ / 2;\n        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength > 0) {\n            return class_name + \".\" +\
    \ extensions[0];\n        }\n        if (extension_strength == 0) {\n        \
    \    return class_name;\n        }\n        extension_strength = extension_strength\
    \ / 2;\n        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength > 0) {\n            return class_name + \".\" +\
    \ extensions[0];\n        }\n        if (extension_strength == 0) {\n        \
    \    return class_name;\n        }\n        extension_strength = extension_strength\
    \ / 2;\n        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength > 0) {\n            return class_name + \".\" +\
    \ extensions[0];\n        }\n        if (extension_strength == 0) {\n        \
    \    return class_name;\n        }\n        extension_strength = extension_strength\
    \ / 2;\n        ", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        double strength = extension_strength / extension.Count();\n\
    \        extension_strength = extension_strength % extension.Count();\n      \
    \  if (extension_strength > 0) {\n            extension_strength = extension_strength\
    \ - 1;\n        }\n        double max_strength = extension_strength;\n       \
    \ string strongest_extension = class_name + \".\" + extensions[0];\n        foreach\
    \ (string extension in extensions) {\n            if (extension_strength > max_strength)\
    \ {\n                max_strength = extension_strength;\n                strongest_extension\
    \ = class_name + \".\" + extension;\n            }\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       return strongest_extension;", "        string strongest_extension = string.Empty;\n\
    \        string extension_strength = string.Empty;\n        foreach (string extension\
    \ in extensions) {\n            int extension_capital_letters = extension.Count(x\
    \ => char.IsUpper(x));\n            int extension_small_letters = extension.Count(x\
    \ => char.IsLower(x));\n            int extension_strength = extension_capital_letters\
    \ - extension_small_letters;\n            if (extension_strength > 0) {\n    \
    \            extension_strength = extension_strength.ToString();\n           \
    \     strongest_extension = class_name + \".\" + extension;\n            }\n \
    \       }\n        return strongest_extension;", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1,\
    \ 1);\n        string extension_strength_str = extension_strength.ToString();\n\
    \        string extension_strength_str_upper = extension_strength_str.ToUpper();\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str_upper);\n\
    \        int extension_strength_int_upper = Convert.ToInt32(extension_strength_str_upper);\n\
    \        int extension_strength_int_lower = Convert.ToInt32(extension_strength_str_lower);\n\
    \        int extension_strength_int_lower_upper = Convert.ToInt32(extension_strength_str_lower_upper);\n\
    \        int extension_strength_int_lower_upper2 = Convert.ToInt32(extension_strength_str_lower_upper2);\n\
    \        int extension_strength_int_lower_upper3 = Convert.ToInt32(extension_strength_str_lower_upper3);\n\
    \        int extension_strength_int_lower_upper4 = Convert.ToInt32(extension_strength_str_lower_upper4);\n\
    \        int extension_strength_int_lower_upper5 = Convert.ToInt32(extension_strength_str_lower_upper5);\n\
    \        int extension_strength_int_lower_upper6 = Convert.ToInt32(extension_strength_str_lower_upper6);\n\
    \        int extension_strength_int_lower_upper7 = Convert.ToInt32(extension_strength_str_lower_upper7);\n\
    \        int extension_strength_int_lower_upper8 = Convert.ToInt32(extension_strength_str_lower_upper8);\n\
    \        int extension_strength_int_lower_upper9 = Convert.ToInt32(extension_strength_str_lower_upper9);\n\
    \        int extension_strength_int_lower_upper10 = Convert.ToInt32(extension_strength_str_lower_upper10);\n\
    \        int extension_strength_int_lower_upper11 = Convert.ToInt32(extension_strength_str_lower_upper11);\n\
    \        int extension_strength_int_lower_upper12 = Convert.ToInt32(extension_strength_str_lower_upper12);\n\
    \        int extension_strength_int_lower_upper13 = Convert.ToInt32(extension_strength_str_lower_upper13);\n\
    \        int extension_strength_int_lower_upper14 = Convert.ToInt32(extension_strength_str_lower_upper14);\n\
    \        int extension_strength_int_lower_upper15 = Convert.ToInt32(extension_strength_str_lower_upper15);\n\
    \        int extension_strength_int_lower_upper16 = Convert.ToInt32(extension_strength_str_lower_upper16);\n\
    \        int extension_strength_int_lower_upper17 = Convert.ToInt32(extension_strength_str_lower_upper17);\n\
    \        int extension_strength_int_lower_upper18 = Convert.ToInt32(extension_strength_",
  "        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.ToUpper().Count();\n     \
    \       int sm = extension.ToLower().Count();\n            int strength = cap\
    \ - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += \".\" + extension;\n            }\n        }\n        return strongest_extension;",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        string extension_strength_strongest = extensions[0];\n        foreach\
    \ (string extension in extensions) {\n            extension_strength += extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n            if (extension_strength > extension_strength_strongest)\
    \ {\n                extension_strength_strongest = extension;\n            }\n\
    \        }\n        return class_name + \".\" + extension_strength_strongest;",
  "        string extension_strength = extensions[0].ToUpper().Substring(class_name.Length);\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Substring(class_name.Length);\n        }\n        double\
    \ strength = Convert.ToDouble(extension_strength);\n        double max_strength\
    \ = -1;\n        string max_extension = \"\";\n        foreach (string extension\
    \ in extensions) {\n            double extension_strength = extension.ToUpper().Substring(class_name.Length);\n\
    \            if (extension_strength > max_strength) {\n                max_strength\
    \ = extension_strength;\n                max_extension = extension;\n        \
    \    }\n        }\n        return class_name + \".\" + max_extension;", "    \
    \    string extension_strength = extensions[0].Length;\n        string extension_class\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ extension_strength_new = extension.Length;\n            if (extension_strength_new\
    \ > extension_strength) {\n                extension_strength = extension_strength_new;\n\
    \                extension_class = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + extension_class;", "        string extension\
    \ = extensions.OrderByDescending(x => x.Length).First();\n        string result\
    \ = class_name + extension;\n        return result;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        extensions.Sort();\n\
    \        string strongest_extension = extensions[0];\n        foreach (string\
    \ extension in extensions) {\n            if (extension.ToUpper().Count() - extension.ToLower().Count()\
    \ == strength) {\n                strongest_extension = extension;\n         \
    \   }\n        }\n        return class_name + \".\" + strongest_extension;", " \
    \       string strongest_extension = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.ToUpper().Count();\n     \
    \       int sm = extension.ToLower().Count();\n            int strength = cap\
    \ - sm;\n            if (strength > strongest_extension.ToUpper().Count() - strongest_extension.ToLower().Count())\
    \ {\n                strongest_extension = extension;\n            }\n       \
    \ }\n        return class_name + \".\" + strongest_extension;", "        string\
    \ extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        string extension_strength_str = extension_strength.ToString();\n    \
    \    string extension_strength_str_length = extension_strength_str.Length;\n \
    \       string extension_strength_str_length_str = extension_strength_str_length.ToString();\n\
    \        string extension_strength_str_length_str_length = extension_strength_str_length_str.Length;\n\
    \        string extension_strength_str_length_str_length_str = extension_strength_str_length_str_length.ToString();\n\
    \        string extension_strength_str_length_str_length_str_length = extension_strength_str_length_str_length_str.Length;\n\
    \        string extension_strength_str_length_str_length_str_length_str = extension_strength_str_length_str_length_str_length.ToString();\n\
    \        string extension_strength_str_length_str_length_str_length_str_length\
    \ = extension_strength_str_length_str_length_str_length_str.Length;\n        string\
    \ extension_strength_str_length_str_length_str_length_str_length_str = extension_strength_str_length_str_length_str_length_str_length.ToString();\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length\
    \ = extension_strength_str_length_str_length_str_length_str_length_str.Length;\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length_str_length\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str.Length;\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str.Length;\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str.Length;\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length.ToString();\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str.Length;\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str.Length;\n\
    \        string extension_strength_str_length_str_length_str_length_str_length_str_length_str_",
  "        string strongest_extension = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength = GetExtensionStrength(extension);\n\
    \            if (extension_strength > GetExtensionStrength(strongest_extension))\
    \ {\n                strongest_extension = extension;\n            }\n       \
    \ }\n        return class_name + \".\" + strongest_extension;", "        string\
    \ extension_strength = string.Empty;\n        string extension_strength_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension = string.Empty;\n\
    \        string extension_strength_extension_extension_extension = string.Empty;\n\
    \        string extension_strength_extension_extension_extension_extension = string.Empty;\n\
    \        string extension_strength_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        string strongest_extension = extensions[0];\n        foreach (string\
    \ extension in extensions) {\n            string extension_strength_new = extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n            if (extension_strength_new > extension_strength)\
    \ {\n                strongest_extension = extension;\n                extension_strength\
    \ = extension_strength_new;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest_extension;", "        // Your code here\n        string\
    \ extension = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1);\n        string extension_strength_number = int.Parse(extension_strength);\n\
    \        int extension_strength_number_int = (int)extension_strength_number;\n\
    \        int extension_strength_number_float = extension_strength_number_int /\
    \ 10;\n        float extension_strength_number_float2 = extension_strength_number_float\
    \ + extension_strength_number_float;\n        float extension_strength_number_float3\
    \ = extension_strength_number_float2 / 10;\n        float extension_strength_number_float4\
    \ = extension_strength_number_float3 / 10;\n        float extension_strength_number_float5\
    \ = extension_strength_number_float4 / 10;\n        float extension_strength_number_float6\
    \ = extension_strength_number_float5 / 10;\n        float extension_strength_number_float7\
    \ = extension_strength_number_float6 / 10;\n        float extension_strength_number_float8\
    \ = extension_strength_number_float7 / 10;\n        float extension_strength_number_float9\
    \ = extension_strength_number_float8 / 10;\n        float extension_strength_number_float10\
    \ = extension_strength_number_float9 / 10;\n        float extension_strength_number_float11\
    \ = extension_strength_number_float10 / 10;\n        float extension_strength_number_float12\
    \ = extension_strength_number_float11 / 10;\n        float extension_strength_number_float13\
    \ = extension_strength_number_float12 / 10;\n        float extension_strength_number_float14\
    \ = extension_strength_number_float13 / 10;\n        float extension_strength_number_float15\
    \ = extension_strength_number_float14 / 10;\n        float extension_strength_number_float16\
    \ = extension_strength_number_float15 / 10;\n        float extension_strength_number_float17\
    \ = extension_strength_number_float16 / 10;\n        float extension_strength_number_float18\
    \ = extension_strength_number_float17 / 10;\n        float extension_strength_number_float19\
    \ = extension_strength_number_float18 / 10;\n        float extension_strength_number_float20\
    \ = extension_strength_number_float19 / 10;\n        float extension_strength_number_float21\
    \ = extension_strength_number_float20 / 10;\n        float extension_strength_number_float22\
    \ = extension_strength_number_float21 / 10;\n        float extension_strength_number_float23\
    \ = extension_strength_number_float22 / 10;\n        float extension_", "    \
    \    string strongest_extension = string.Empty;\n        string strongest_extension_strength\
    \ = string.Empty;\n        foreach (string extension in extensions) {\n      \
    \      int extension_strength = GetExtensionStrength(extension);\n           \
    \ if (extension_strength > strongest_extension_strength) {\n                strongest_extension_strength\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       extension_strength = extension_strength / extensions.Count();\n      \
    \  extension_strength = extension_strength.ToString();\n        string strongest_extension\
    \ = class_name + \".\" + extensions[0];\n        foreach (string extension in\
    \ extensions) {\n            if (extension_strength > extension.ToUpper().Count()\
    \ - extension.ToLower().Count()) {\n                strongest_extension = class_name\
    \ + \".\" + extension;\n            }\n        }\n        return strongest_extension;",
  "        string extension_strength = extensions[0].Length;\n        foreach (string\
    \ extension in extensions) {\n            int extension_length = extension.Length;\n\
    \            int extension_strength_difference = extension_length - extension_strength;\n\
    \            if (extension_strength_difference > 0) {\n                extension_strength\
    \ = extension_strength_difference;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[0];", "        string strongest_extension = string.Empty;\n\
    \        string extension_strength = string.Empty;\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength_int = 0;\n            int\
    \ extension_cap_int = 0;\n            int extension_sm_int = 0;\n            int\
    \ extension_length = extension.Length;\n            int extension_cap_length =\
    \ extension.ToUpperInvariant().Length;\n            int extension_sm_length =\
    \ extension.ToLowerInvariant().Length;\n            int extension_cap_minus =\
    \ extension_cap_length - extension_sm_length;\n            int extension_sm_minus\
    \ = extension_sm_length - extension_cap_length;\n            int extension_minus\
    \ = extension_length - extension_cap_length - extension_sm_length;\n         \
    \   int extension_plus = extension_length - extension_cap_length - extension_sm_length\
    \ - extension_minus;\n            int extension_plus_minus = extension_plus -\
    \ extension_minus;\n            int extension_plus_minus_minus = extension_plus\
    \ - extension_minus - extension_minus;\n            int extension_plus_minus_minus_minus\
    \ = extension_plus - extension_minus - extension_minus - extension_minus;\n  \
    \          int extension_plus_minus_minus_minus_minus = extension_plus - extension_minus\
    \ - extension_minus - extension_minus - extension_minus;\n            int extension_plus_minus_minus_minus_minus_minus\
    \ = extension_plus - extension_minus - extension_minus - extension_minus - extension_minus\
    \ - extension_minus;\n            int extension_plus_minus_minus_minus_minus_minus_minus\
    \ = extension_plus - extension_minus - extension_minus - extension_minus - extension_minus\
    \ - extension_minus - extension_minus;\n            int extension_plus_minus_minus_minus_minus_minus_minus_minus\
    \ = extension_plus - extension_minus - extension_minus - extension_minus - extension_minus\
    \ - extension_minus - extension_minus - extension_minus - extension_minus;\n \
    \           int extension_plus_minus_minus_minus_minus_minus_minus_minus_minus\
    \ = extension_plus - extension_minus - extension_minus - extension_minus - extension_minus\
    \ - extension_minus - extension_minus - extension_minus - extension_minus - extension_minus\
    \ - extension_", "        string strongest_extension = string.Empty;\n       \
    \ string extension_strength = string.Empty;\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength_numerator = 0;\n      \
    \      int extension_strength_denominator = 0;\n            int extension_cap\
    \ = 0;\n            int extension_sm = 0;\n            int extension_length =\
    \ extension.Length;\n            int extension_count_cap = 0;\n            int\
    \ extension_count_sm = 0;\n            int extension_count_length = 0;\n     \
    \       int extension_count_cap_sm = 0;\n            int extension_count_cap_length\
    \ = 0;\n            int extension_count_sm_sm = 0;\n            int extension_count_sm_length\
    \ = 0;\n            int extension_count_cap_sm_sm = 0;\n            int extension_count_cap_length_sm\
    \ = 0;\n            int extension_count_sm_cap = 0;\n            int extension_count_sm_cap_length\
    \ = 0;\n            int extension_count_cap_sm_sm = 0;\n            int extension_count_cap_length_sm_sm\
    \ = 0;\n            int extension_count_sm_cap_sm = 0;\n            int extension_count_sm_cap_length_sm\
    \ = 0;\n            int extension_count_cap_length_sm_sm = 0;\n            int\
    \ extension_count_sm_cap_length_sm_sm = 0;\n            int extension_count_cap_length_sm_sm_sm\
    \ = 0;\n            int extension_count_sm_cap_length_sm_sm = 0;\n           \
    \ int extension_count_cap_length_sm_sm_sm = 0;\n            int extension_count_sm_cap_length_sm_sm\
    \ = 0;\n            int extension_count_cap_length_sm_sm_sm = 0;\n           \
    \ int extension_count_sm_cap_length_sm_sm = 0;\n            int extension_count_cap_length_sm_sm_sm\
    \ = 0;\n            int extension_count_sm_cap_length_sm_sm = 0;\n           \
    \ int extension_count_cap_length_sm_sm_sm = 0;\n            int extension_count_sm_cap_length_sm_sm\
    \ = 0;\n            int extension_count_cap_length_sm_sm_sm = 0;\n           \
    \ int extension_count_sm_cap_length_sm_sm_sm = 0;\n            int extension_count_cap_length_sm_sm_sm\
    \ = 0;\n            int extension_count_sm_cap_length_sm_sm = 0;\n           \
    \ int extension_count_cap_length_sm_sm_sm = 0;\n            int extension_count_sm_cap_length_sm_sm\
    \ = 0;\n            int extension_count_cap_length_sm_sm_sm = 0;\n           \
    \ int extension_count_sm_cap_length_sm_sm = 0;\n            int extension_count_cap_length_sm_sm_sm\
    \ = 0;\n            int extension_count_sm_cap_length_sm_sm = 0;\n           \
    \ int extension_count_cap_length_sm_sm", "        string extension_strength =\
    \ extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n       \
    \ foreach (string extension in extensions) {\n            extension_strength +=\
    \ extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n    \
    \    double strength = extension_strength / extensions.Count();\n        double\
    \ max_strength = extension_strength;\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            if (extension_strength\
    \ > max_strength) {\n                max_strength = extension_strength;\n    \
    \            strongest_extension = class_name + extension;\n            }\n  \
    \      }\n        return strongest_extension;", "        string strongest_extension\
    \ = null;\n        double strength = -1;\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.Length;\n            int sm =\
    \ class_name.Length;\n            double fraction = cap - sm;\n            if\
    \ (fraction > strength) {\n                strength = fraction;\n            \
    \    strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        string extension_strength\
    \ = string.Empty;\n        string extension_strength_extension = string.Empty;\n\
    \        string extension_strength_extension_extension = string.Empty;\n     \
    \   string extension_strength_extension_extension_extension = string.Empty;\n\
    \        string extension_strength_extension_extension_extension_extension = string.Empty;\n\
    \        string extension_strength_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extension.Count();\n        double\
    \ max_strength = extension_strength;\n        string strongest_extension = null;\n\
    \        foreach (string extension in extensions) {\n            if (extension_strength\
    \ > max_strength) {\n                max_strength = extension_strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength > 0) {\n            return class_name + \".\" +\
    \ extensions[0];\n        }\n        else {\n            int max_strength = -1;\n\
    \            string max_extension = null;\n            foreach (string extension\
    \ in extensions) {\n                if (extension_strength > max_strength) {\n\
    \                    max_strength = extension_strength;\n                    max_extension\
    \ = extension;\n                }\n            }\n            return class_name\
    \ + \".\" + max_extension;\n        }", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        extension_strength = extension_strength / extensions.Count();\n\
    \        extension_strength = extension_strength.ToString();\n        string strongest_extension\
    \ = class_name + \".\" + extensions[0];\n        foreach (string extension in\
    \ extensions) {\n            if (extension_strength == extension.ToUpper().Count()\
    \ - extension.ToLower().Count()) {\n                strongest_extension = class_name\
    \ + \".\" + extension;\n            }\n        }\n        return strongest_extension;",
  "        string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1).ToLower();\n        string extension_strength_fraction\
    \ =\n            extension_strength.Substring(0, extension_strength.Length - 1).ToLower();\n\
    \        string extension_strength_fraction_remainder =\n            extension_strength.Substring(extension_strength.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction_multiplier =\n \
    \           extension_strength_fraction_remainder.Substring(0,\n             \
    \   extension_strength_fraction_remainder.Length - 1).ToLower();\n        string\
    \ extension_strength_fraction_multiplier_remainder =\n            extension_strength_fraction_remainder.Substring(\n\
    \                extension_strength_fraction_remainder.Length - 1).ToLower();\n\
    \        string extension_strength_fraction_multiplier_multiplier =\n        \
    \    extension_strength_fraction_multiplier_remainder.Substring(0,\n         \
    \       extension_strength_fraction_multiplier_remainder.Length - 1).ToLower();\n\
    \        string extension_strength_fraction_multiplier_multiplier_remainder =\n\
    \            extension_strength_fraction_multiplier_remainder.Substring(\n   \
    \             extension_strength_fraction_multiplier_remainder.Length - 1).ToLower();\n\
    \        string extension_strength_fraction_multiplier_multiplier_multiplier =\n\
    \            extension_strength_fraction_multiplier_multiplier_remainder.Substring(0,\n\
    \                extension_strength_fraction_multiplier_multiplier_remainder.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction_multiplier_multiplier_multiplier_remainder\
    \ =\n            extension_strength_fraction_multiplier_multiplier_remainder.Substring(\n\
    \                extension_strength_fraction_multiplier_multiplier_remainder.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction_multiplier_multiplier_multiplier_multiplier\
    \ =\n            extension_strength_fraction_multiplier_multiplier_multiplier_remainder.Substring(0,\n\
    \                extension_strength_fraction_multiplier_multiplier_multiplier_remainder.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction_multiplier_multiplier_multiplier_multiplier_remainder\
    \ =\n            extension_strength_fraction_multiplier_multiplier_multiplier_remainder.Substring(\n\
    \                extension_strength_fraction_multiplier_multiplier_multiplier_remainder.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction_multiplier_multiplier_multiplier_multiplier_multiplier\
    \ =\n            extension_", "        string strongest_extension = string.Empty;\n\
    \        double strongest_extension_strength = double.MaxValue;\n        foreach\
    \ (string extension in extensions) {\n            int extension_strength = ExtensionStrength(extension);\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + strongest_extension;", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        string strongest_extension = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength > strongest_extension.ToUpper().Count() - strongest_extension.ToLower().Count())\
    \ {\n                strongest_extension = extension;\n            }\n       \
    \ }\n        return class_name + \".\" + strongest_extension;", "        string\
    \ extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        string strongest = extensions[0];\n  \
    \      foreach (string extension in extensions) {\n            if (extension.ToUpper().Count()\
    \ - extension.ToLower().Count() > strength) {\n                strongest = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;", " \
    \       string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       extension_strength = extension_strength / extensions.Count();\n      \
    \  string strongest_extension = class_name + \".\" + extensions[0];\n        foreach\
    \ (string extension in extensions.Skip(1)) {\n            if (extension_strength\
    \ > extension.ToUpper().Count() - extension.ToLower().Count()) {\n           \
    \     strongest_extension = class_name + \".\" + extension;\n            }\n \
    \       }\n        return strongest_extension;", "        string extension_strength\
    \ = extensions[0].Substring(0, extensions[0].Length - 1);\n        foreach (string\
    \ extension in extensions) {\n            int extension_strength_int = extension.Substring(0,\
    \ extension.Length - 1);\n            if (extension_strength_int > extension_strength)\
    \ {\n                extension_strength = extension_strength_int;\n          \
    \  }\n        }\n        return class_name + \".\" + extension_strength;", " \
    \       // Your code here\n        string strongest_extension = string.Empty;\n\
    \        string extension_strength = string.Empty;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Length;\n            int sm\
    \ = class_name.Length;\n            int strength = cap - sm;\n            if (strength\
    \ > extension_strength) {\n                extension_strength = strength;\n  \
    \              strongest_extension = extension;\n            }\n        }\n  \
    \      return class_name + \".\" + strongest_extension;", "        string extension_strength\
    \ = string.Empty;\n        string extension_strength_extension = string.Empty;\n\
    \        foreach (string extension in extensions) {\n            int extension_capital_letters\
    \ = extension.Count(x => char.IsUpper(x));\n            int extension_small_letters\
    \ = extension.Count(x => char.IsLower(x));\n            int extension_strength\
    \ = extension_capital_letters - extension_small_letters;\n            if (extension_strength\
    \ > extension_strength_extension) {\n                extension_strength_extension\
    \ = extension_strength;\n                extension_strength = extension_strength_extension;\n\
    \            }\n        }\n        return class_name + \".\" + extension_strength_extension;",
  "        // Your code goes here\n        string extension = extensions.OrderByDescending(x\
    \ => x.Length).FirstOrDefault();\n        if (extension != null)\n           \
    \ return class_name + \".\" + extension;\n        else\n            return class_name;",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       extension_strength = extension_strength / extensions.Count();\n      \
    \  string strongest_extension = class_name + extensions[0];\n        foreach (string\
    \ extension in extensions) {\n            if (extension_strength > extension.ToUpper().Count()\
    \ - extension.ToLower().Count()) {\n                strongest_extension = class_name\
    \ + extension;\n            }\n        }\n        return strongest_extension;",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        double\
    \ max_strength = extension_strength;\n        string strongest_extension = null;\n\
    \        foreach (string extension in extensions) {\n            double extension_strength\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength > max_strength) {\n                max_strength = extension_strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   string strongest_extension = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength_new = extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n            if (extension_strength_new > extension_strength)\
    \ {\n                strongest_extension = extension;\n                extension_strength\
    \ = extension_strength_new;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest_extension;", "        string strongest_extension = null;\n\
    \        string extension_strength = null;\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength_numerator = 0;\n      \
    \      int extension_strength_denominator = 0;\n            int extension_cap\
    \ = 0;\n            int extension_sm = 0;\n            int extension_length =\
    \ extension.Length;\n            for (int i = 0; i < extension_length; i++) {\n\
    \                if (extension[i].ToUpper() == extension[i]) {\n             \
    \       extension_cap++;\n                }\n                else if (extension[i].ToLower()\
    \ == extension[i]) {\n                    extension_sm++;\n                }\n\
    \            }\n            extension_strength_numerator = extension_cap - extension_sm;\n\
    \            extension_strength_denominator = extension_length;\n            extension_strength\
    \ = extension_strength_numerator / extension_strength_denominator;\n         \
    \   if (extension_strength > extension_strength_numerator) {\n               \
    \ strongest_extension = extension;\n                extension_strength = extension_strength_numerator;\n\
    \            }\n        }\n        if (strongest_extension != null) {\n      \
    \      string class_name_with_strongest_extension = class_name + \".\" + strongest_extension;\n\
    \            return class_name_with_strongest_extension;\n        }\n        else\
    \ {\n            return class_name;\n        }", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength);\n \
    \       int class_name_int = Convert.ToInt32(class_name);\n        int max_extension_strength_int\
    \ = class_name_int - extension_strength_int;\n        if (max_extension_strength_int\
    \ < 0) {\n            max_extension_strength_int = 0;\n        }\n        string\
    \ extension_strength_str = extension_strength.Substring(0, extension_strength.Length\
    \ - 1);\n        string extension_str = extension.Substring(0, extension.Length\
    \ - 1);\n        string class_name_str = class_name.Substring(0, class_name.Length\
    \ - 1);\n        string result = class_name_str + \".\" + extension_str;\n   \
    \     if (max_extension_strength_int > 0) {\n            int max_extension_strength_int2\
    \ = max_extension_strength_int + 1;\n            string max_extension_strength_str\
    \ = extension_strength_str.Substring(0, max_extension_strength_int2);\n      \
    \      string max_extension_str = extension_str.Substring(0, max_extension_strength_int2);\n\
    \            string max_class_name_str = class_name_str.Substring(0, max_extension_strength_int2);\n\
    \            string max_result = max_class_name_str + \".\" + max_extension_str;\n\
    \            if (extensions.Count > 1) {\n                for (int i = 1; i <\
    \ extensions.Count; i++) {\n                    string extension_str = extensions[i].Substring(0,\
    \ extensions[i].Length - 1);\n                    string class_name_str = class_name.Substring(0,\
    \ class_name.Length - 1);\n                    string result = class_name_str\
    \ + \".\" + extension_str;\n                    if (extension_strength_int < Convert.ToInt32(extensions[i].Substring(extensions[i].Length\
    \ - 1))) {\n                        extension_strength_str = extensions[i].Substring(0,\
    \ extensions[i].Length - 1);\n                        extension_str = extensions[i].Substring(0,\
    \ extensions[i].Length - 1);\n                        class_name_str = class_name.Substring(0,\
    \ class_name.Length - 1);\n                        result = class_name_str + \"\
    .\" + extension_str;\n                    }\n                }\n            }\n\
    \            result = max_result;\n        }\n        return result;", "     \
    \   string strongest_extension = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.ToUpper().Count();\n     \
    \       int sm = extension.ToLower().Count();\n            int strength = cap\
    \ - sm;\n            if (strength > strongest_extension.ToUpper().Count() - strongest_extension.ToLower().Count())\
    \ {\n                strongest_extension = extension;\n            }\n       \
    \ }\n        return class_name + \".\" + strongest_extension;", "        string\
    \ strongest_extension = null;\n        double strength = -1;\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.Length;\n\
    \            int sm = class_name.Length;\n            double frac = cap - sm;\n\
    \            double strength_of_extension = frac / cap;\n            if (strength\
    \ > strength_of_extension) {\n                strongest_extension = extension;\n\
    \                strength = strength_of_extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        string extension\
    \ = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1, 1);\n        string extension_strength_str = extension_strength.ToString();\n\
    \        string extension_strength_str_upper = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper2 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower2 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper3 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower3 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper4 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower4 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper5 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower5 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper6 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower6 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper7 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower7 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper8 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower8 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper9 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower9 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper10 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower10 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper11 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower11 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper12 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower12 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper13 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower13 = extension_strength_str.ToLower();\n\
    \        string extension_", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        extension_strength = extension_strength / extensions.Count();\n\
    \        extension_strength = extension_strength.ToString();\n        string strongest_extension\
    \ = class_name + \".\" + extension_strength;\n        return strongest_extension;",
  "        string extension = extensions.OrderByDescending(x => x.Length).First();\n\
    \        string strongest = class_name + extension;\n        return strongest;",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength == 0) return class_name;\n        int max_strength\
    \ = -1;\n        string max_extension = \"\";\n        foreach (string extension\
    \ in extensions) {\n            if (extension.ToUpper().Count() - extension.ToLower().Count()\
    \ > max_strength) {\n                max_strength = extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n                max_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + max_extension;",
  "        string extension = extensions.FirstOrDefault(e => e.ToUpper().Contains(class_name.ToUpper()));\n\
    \        if (extension == null) {\n            return \"\";\n        }\n     \
    \   string extension_name = extension.Substring(class_name.Length);\n        string\
    \ extension_strength = extension_name.ToUpper().Substring(class_name.ToUpper().Length\
    \ - extension_name.Length);\n        int strength = Convert.ToInt32(extension_strength);\n\
    \        if (strength > 0) {\n            return class_name + \".\" + extension;\n\
    \        }\n        string extension_strength_sorted = extensions.OrderByDescending(e\
    \ => e.ToUpper().Contains(class_name.ToUpper())).FirstOrDefault();\n        if\
    \ (extension_strength_sorted == null) {\n            return \"\";\n        }\n\
    \        string extension_strength_sorted_name = extension_strength_sorted.Substring(class_name.Length);\n\
    \        string extension_strength_sorted_strength = extension_strength_sorted_name.ToUpper().Substring(class_name.ToUpper().Length\
    \ - extension_strength_sorted_name.Length);\n        strength = Convert.ToInt32(extension_strength_sorted_strength);\n\
    \        if (strength > 0) {\n            return class_name + \".\" + extension_strength_sorted;\n\
    \        }\n        return \"\";", "        string strongest_extension = null;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           if (strongest_extension == null) {\n                    strongest_extension\
    \ = class_name + \".\" + extension;\n                } else {\n              \
    \      if (strength > strongest_extension.Length) {\n                        strongest_extension\
    \ = class_name + \".\" + extension;\n                    }\n                }\n\
    \            }\n        }\n        return strongest_extension;", "        string\
    \ extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        extensions.Sort();\n\
    \        string strongest_extension = extensions[0];\n        for (int i = 1;\
    \ i < extensions.Count; i++) {\n            if (extensions[i].ToUpper().Count()\
    \ - extensions[i].ToLower().Count() == strength) {\n                strongest_extension\
    \ = extensions[i];\n            }\n        }\n        return class_name + \".\"\
    \ + strongest_extension;", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        double strength = extension_strength / extensions.Count();\n\
    \        double max_strength = extension_strength;\n        string strongest_extension\
    \ = null;\n        foreach (string extension in extensions) {\n            if\
    \ (extension.ToUpper().Count() - extension.ToLower().Count() > max_strength) {\n\
    \                max_strength = extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        string extension\
    \ = extensions[0];\n        string extension_strength = extension.Substring(0,\
    \ extension.Length - 1);\n        string extension_strength_number = extension_strength.ToUpperInvariant();\n\
    \        int extension_strength_number_int = int.Parse(extension_strength_number);\n\
    \        int extension_strength_number_cap = extension_strength_number_int - extension_strength_number_int%2;\
    \ // CAP\n        int extension_strength_number_sm = extension_strength_number_int\
    \ - extension_strength_number_int%2 + 1; // SM\n        string extension_strength_number_cap_str\
    \ = extension_strength_number_cap.ToString();\n        string extension_strength_number_sm_str\
    \ = extension_strength_number_sm.ToString();\n        string extension_strength_number_cap_str_with_zeros\
    \ = extension_strength_number_cap_str.PadLeft(3, '0');\n        string extension_strength_number_sm_str_with_zeros\
    \ = extension_strength_number_sm_str.PadLeft(3, '0');\n        string extension_strength_number_cap_str_with_zeros_plus_one\
    \ = extension_strength_number_cap_str_with_zeros + extension_strength_number_sm_str_with_zeros;\n\
    \        string extension_strength_number_sm_str_with_zeros_plus_one = extension_strength_number_sm_str_with_zeros\
    \ + extension_strength_number_cap_str_with_zeros;\n        string extension_strength_number_cap_str_with_zeros_plus_one_with_zeros\
    \ = extension_strength_number_cap_str_with_zeros_plus_one.PadLeft(3, '0');\n \
    \       string extension_strength_number_sm_str_with_zeros_plus_one_with_zeros\
    \ = extension_strength_number_sm_str_with_zeros_plus_one.PadLeft(3, '0');\n  \
    \      string extension_strength_number_cap_str_with_zeros_plus_one_with_zeros_plus_one\
    \ = extension_strength_number_cap_str_with_zeros_plus_one_with_zeros.PadLeft(3,\
    \ '0');\n        string extension_strength_number_sm_str_with_zeros_plus_one_with_zeros_plus_one\
    \ = extension_strength_number_sm_str_with_zeros_plus_one_with_zeros.PadLeft(3,\
    \ '0');\n        string extension_strength_number_cap_str_with_zeros_plus_one_with_zeros_plus_one_with_zeros\
    \ = extension_strength_number_cap_str_with_zeros_plus_one_with_zeros_plus_one.PadLeft(3,\
    \ '0');\n        string extension_strength_number_sm_str_with_zeros_plus_one_with_zeros_plus_one_",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        double\
    \ max_strength = extension_strength;\n        string strongest_extension = null;\n\
    \        foreach (string extension in extensions) {\n            double extension_strength\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength > max_strength) {\n                max_strength = extension_strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        string extension\
    \ = extensions[0];\n        string extension_class = \"\";\n        foreach (string\
    \ extension_name in extensions) {\n            int extension_class_length = extension_name.Length;\n\
    \            int extension_class_cap = extension_class_length - 1;\n         \
    \   int extension_class_sm = extension_class_cap - 1;\n            int extension_class_strength\
    \ = (extension_class_cap - extension_class_sm);\n            if (extension_class_strength\
    \ > extension_class_length) {\n                extension = extension_name;\n \
    \               extension_class = extension_name + \".\";\n            }\n   \
    \     }\n        return class_name + extension_class + extension;", "        string\
    \ extension = extensions.OrderByDescending(x => x.ToUpperInvariant().Count() -\
    \ x.ToLowerInvariant().Count()).First();\n        return class_name + \".\" +\
    \ extension;", "        string extension_strength = string.Empty;\n        string\
    \ extension_strength_extension = string.Empty;\n        string extension_strength_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_",
  "        string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1, 1);\n        string extension_strength_str\
    \ = extension_strength.ToString();\n        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        string extension_strength_str = extension_strength.ToString();\n    \
    \    string extension_strength_str = extension_strength_str.ToLower();\n     \
    \   string extension_strength_str = extension_strength_str.ToUpper();\n      \
    \  string extension_strength_str = extension_strength_str.Replace(\"A\", \"1\"\
    );\n        string extension_strength_str = extension_strength_str.Replace(\"\
    B\", \"2\");\n        string extension_strength_str = extension_strength_str.Replace(\"\
    C\", \"3\");\n        string extension_strength_str = extension_strength_str.Replace(\"\
    D\", \"4\");\n        string extension_strength_str = extension_strength_str.Replace(\"\
    E\", \"5\");\n        string extension_strength_str = extension_strength_str.Replace(\"\
    F\", \"6\");\n        string extension_strength_str = extension_strength_str.Replace(\"\
    G\", \"7\");\n        string extension_strength_str = extension_strength_str.Replace(\"\
    H\", \"8\");\n        string extension_strength_str = extension_strength_str.Replace(\"\
    I\", \"9\");\n        string extension_strength_str = extension_strength_str.Replace(\"\
    J\", \"10\");\n        string extension_strength_str = extension_strength_str.Replace(\"\
    K\", \"11\");\n        string extension_strength_str = extension_strength_str.Replace(\"\
    L\", \"12\");\n        string extension_strength_str = extension_strength_str.Replace(\"\
    M\", \"13\");\n        string extension_strength_str = extension_strength_str.Replace(\"\
    N\", \"14\");\n        string extension_strength_str = extension_strength_str.Replace(\"\
    O\", \"15\");\n        string extension_strength_str = extension_strength_str.Replace(\"\
    P\", \"16\");\n        string extension_strength_str = extension_strength_str.Replace(\"\
    Q\", \"17\");\n        string extension_strength_str = extension_strength_str.Replace(\"\
    R\", \"18\");\n        string extension_strength_str = extension_strength_str.Replace(\"\
    S\", \"19\");\n        string extension_strength_str = extension_strength_str.Replace(\"\
    T\", \"20\");\n        string extension_strength_str = extension_strength_str.Replace(\"\
    U\", \"21\");\n        string extension_strength_str = extension_strength_str.",
  "        string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1);\n        int extension_strength_int\
    \ = Convert.ToInt32(extension_strength);\n        int extension_cap = class_name.Length;\n\
    \        int extension_sm = extension_cap - extension_strength_int;\n        string\
    \ extension_class_name = class_name + extension;\n        string extension_class_name_with_extension\
    \ = extension_class_name + extension;\n        string extension_class_name_with_extension_strength\
    \ = extension_class_name + extension_strength;\n        string extension_class_name_with_extension_strength_int\
    \ = extension_class_name + extension_strength_int;\n        string extension_class_name_with_extension_cap\
    \ = extension_class_name + extension_cap;\n        string extension_class_name_with_extension_sm\
    \ = extension_class_name + extension_sm;\n        string extension_class_name_with_extension_sm_int\
    \ = extension_class_name + extension_sm_int;\n        string extension_class_name_with_extension_cap_sm\
    \ = extension_class_name + extension_cap_sm;\n        string extension_class_name_with_extension_cap_sm_int\
    \ = extension_class_name + extension_cap_sm_int;\n        string extension_class_name_with_extension_strength_int\
    \ = extension_class_name + extension_strength_int;\n        string extension_class_name_with_extension_strength_int_cap\
    \ = extension_class_name + extension_strength_int_cap;\n        string extension_class_name_with_extension_strength_int_sm\
    \ = extension_class_name + extension_strength_int_sm;\n        string extension_class_name_with_extension_strength_int_sm_int\
    \ = extension_class_name + extension_strength_int_sm_int;\n        string extension_class_name_with_extension_strength_int_cap_sm\
    \ = extension_class_name + extension_strength_int_cap_sm;\n        string extension_class_name_with_extension_strength_int_cap_sm_int\
    \ = extension_class_name + extension_strength_int_cap_sm_int;\n        string\
    \ extension_class_name_with_extension_strength_int_sm_cap = extension_class_name\
    \ + extension_strength_int_sm_cap;\n        string extension_class_name_with_extension_strength_int_sm_sm_int\
    \ = extension_class_name + extension_strength_int_sm_sm_int;\n        string extension_class_name_with_extension_strength_int_sm_cap_sm\
    \ = extension_class_name + extension_strength_int_sm_cap_sm;\n        string extension_class_name_with_extension_strength_int_sm_sm_cap_sm_int\
    \ = extension_class_name + extension_strength_int_sm_sm_cap_sm_int;\n        string\
    \ extension_class_name_with_extension_strength_int_sm_sm_cap_s", "        string\
    \ extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength > 0) {\n            return class_name + \".\" +\
    \ extensions[0];\n        }\n        else {\n            return class_name;\n\
    \        }", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        if (extension_strength > 0) {\n            return class_name\
    \ + \".\" + extensions[0];\n        }\n        else {\n            int max_strength\
    \ = -1;\n            string max_extension = null;\n            foreach (string\
    \ extension in extensions) {\n                if (extension.ToUpper().Count()\
    \ - extension.ToLower().Count() > max_strength) {\n                    max_strength\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n             \
    \       max_extension = extension;\n                }\n            }\n       \
    \     return class_name + \".\" + max_extension;\n        }", "        string\
    \ strongest_extension = string.Empty;\n        string extension_strength = string.Empty;\n\
    \        string extension_class_name = string.Empty;\n        foreach (string\
    \ extension in extensions) {\n            extension_class_name = extension.Substring(0,\
    \ extension.IndexOf(\"_\"));\n            extension_strength = extension.Substring(extension.IndexOf(\"\
    _\") + 1);\n            if (extension_strength.Length > strongest_extension.Length)\
    \ {\n                strongest_extension = extension_class_name;\n           \
    \ }\n        }\n        return class_name + \".\" + strongest_extension;", " \
    \       string strongest_extension = string.Empty;\n        double strongest_extension_strength\
    \ = double.MaxValue;\n        foreach (string extension in extensions) {\n   \
    \         int extension_strength = ExtensionStrength(extension);\n           \
    \ if (extension_strength > strongest_extension_strength) {\n                strongest_extension\
    \ = extension;\n                strongest_extension_strength = extension_strength;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string strongest_extension = null;\n        string extension_strength =\
    \ null;\n        foreach (string extension in extensions) {\n            int extension_cap\
    \ = extension.ToUpper().Count();\n            int extension_sm  = extension.ToLower().Count();\n\
    \            double extension_strength = extension_cap - extension_sm;\n     \
    \       if (extension_strength > 0) {\n                if (strongest_extension\
    \ == null) {\n                    strongest_extension = extension;\n         \
    \           extension_strength = extension_strength;\n                }\n    \
    \            else if (extension_strength > extension_strength) {\n           \
    \         strongest_extension = extension;\n                    extension_strength\
    \ = extension_strength;\n                }\n            }\n        }\n       \
    \ if (strongest_extension != null) {\n            string class_name_with_extension\
    \ = class_name + \".\" + strongest_extension;\n            return class_name_with_extension;\n\
    \        }\n        else {\n            return class_name;\n        }", "    \
    \    string strongest_extension = null;\n        double strength = 0;\n      \
    \  foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            strength += (cap - sm);\n        }\n        if (strength > 0) {\n\
    \            strongest_extension = class_name + \".\" + extensions.OrderByDescending(x\
    \ => x).First();\n        }\n        return strongest_extension;", "        string\
    \ strongest_extension = class_name;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(c => char.IsUpper(c));\n          \
    \  int sm = extension.Count(c => char.IsLower(c));\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += \".\" + extension;\n            }\n        }\n        return strongest_extension;",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        extensions.Sort();\n\
    \        string strongest_extension = class_name + \".\" + extensions[0];\n  \
    \      foreach (string extension in extensions) {\n            if (strength >\
    \ extension_strength) {\n                strongest_extension = class_name + \"\
    .\" + extension;\n                extension_strength = extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n            }\n        }\n        return strongest_extension;",
  "        string extension_strength = extensions[0].Substring(0, 1);\n        foreach\
    \ (string extension in extensions) {\n            int extension_strength_int =\
    \ extension.Substring(0, 1).ToUpper().ToCharArray().Count(c => c == 'A');\n  \
    \          int extension_strength_upper = extension.Substring(0, 1).ToUpper().ToCharArray().Count(c\
    \ => c == 'B');\n            int extension_strength_lower = extension.Substring(0,\
    \ 1).ToUpper().ToCharArray().Count(c => c == 'C');\n            int extension_strength_total\
    \ = extension_strength_int + extension_strength_upper + extension_strength_lower;\n\
    \            if (extension_strength_int > extension_strength_upper) {\n      \
    \          extension_strength = extension;\n            } else if (extension_strength_int\
    \ > extension_strength_lower) {\n                extension_strength = extension;\n\
    \            } else if (extension_strength_int > extension_strength_total) {\n\
    \                extension_strength = extension;\n            }\n        }\n \
    \       return class_name + \".\" + extension_strength;", "        string strongest_extension\
    \ = extensions[0];\n        foreach (string extension in extensions) {\n     \
    \       int cap = extension.Count(c => char.IsUpper(c));\n            int sm =\
    \ extension.Count(c => char.IsLower(c));\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        string extension_strength\
    \ = extensions[0].Length;\n        foreach (string extension in extensions) {\n\
    \            int extension_strength_new = extension.Length;\n            if (extension_strength_new\
    \ > extension_strength) {\n                extension_strength = extension_strength_new;\n\
    \            }\n        }\n        return class_name + \".\" + extensions[0];",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        string extension_strength_strongest = extensions[0];\n        foreach\
    \ (string extension in extensions) {\n            int extension_strength_new =\
    \ extension.ToUpper().Count() - extension.ToLower().Count();\n            if (extension_strength_new\
    \ > extension_strength) {\n                extension_strength = extension_strength_new;\n\
    \                extension_strength_strongest = extension;\n            }\n  \
    \      }\n        return class_name + \".\" + extension_strength_strongest;",
  "        string strongest_extension = null;\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.Length;\n            int sm =\
    \ class_name.Length;\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                if (strongest_extension == null) {\n               \
    \     strongest_extension = class_name + \".\" + extension;\n                }\
    \ else {\n                    int strength_compare = extension.Length - extension.Replace(strongest_extension,\
    \ \"\").Length;\n                    if (strength_compare > strength) {\n    \
    \                    strongest_extension = class_name + \".\" + extension;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ strongest_extension;", "        string extension_strength = extensions[0].Substring(class_name.Length);\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = extension.Substring(class_name.Length);\n            int extension_strength_float\
    \ = extension_strength_int - extension_strength_int.ToCharArray().Where(c => char.IsUpper(c)).Count();\n\
    \            if (extension_strength_float > extension_strength) {\n          \
    \      extension_strength = extension_strength_float;\n            }\n       \
    \ }\n        return class_name + \".\" + extensions[0];", "        string extension\
    \ = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction =\n            extension_strength.Substring(0,\
    \ extension_strength.Length - 1).ToLower();\n        string extension_strength_fraction_remainder\
    \ =\n            extension_strength.Substring(extension_strength.Length - 1).ToLower();\n\
    \        int extension_cap = extension_strength_fraction_remainder.Count(x =>\
    \ x == 'A');\n        int extension_sm = extension_strength_fraction_remainder.Count(x\
    \ => x == 'a');\n        int extension_strength_fraction =\n            extension_cap\
    \ - extension_sm;\n        extension_strength_fraction = extension_strength_fraction\
    \ / extension_cap;\n        if (extension_strength_fraction > 0) {\n         \
    \   extension = extension_strength_fraction_remainder + extension;\n        }\n\
    \        extension = class_name + \".\" + extension;\n        return extension;",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength == 0) {\n            return class_name;\n     \
    \   }\n        double strength = extension_strength / extension_strength.ToString().Length;\n\
    \        List<string> sorted_extensions = extensions.OrderByDescending(x => x.ToUpper().Count()\
    \ - x.ToLower().Count()).ToList();\n        string strongest_extension = sorted_extensions[0];\n\
    \        if (sorted_extensions.Count > 1) {\n            foreach (string extension\
    \ in sorted_extensions) {\n                if (strength > extension_strength)\
    \ {\n                    strongest_extension = extension;\n                  \
    \  strength = extension_strength;\n                }\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   string extension_strength_2 = extensions[1].ToUpper().Count() - extensions[1].ToLower().Count();\n\
    \        string extension_strength_3 = extensions[2].ToUpper().Count() - extensions[2].ToLower().Count();\n\
    \        string extension_strength_4 = extensions[3].ToUpper().Count() - extensions[3].ToLower().Count();\n\
    \        string extension_strength_5 = extensions[4].ToUpper().Count() - extensions[4].ToLower().Count();\n\
    \        string extension_strength_6 = extensions[5].ToUpper().Count() - extensions[5].ToLower().Count();\n\
    \        string extension_strength_7 = extensions[6].ToUpper().Count() - extensions[6].ToLower().Count();\n\
    \        string extension_strength_8 = extensions[7].ToUpper().Count() - extensions[7].ToLower().Count();\n\
    \        string extension_strength_9 = extensions[8].ToUpper().Count() - extensions[8].ToLower().Count();\n\
    \        string extension_strength_10 = extensions[9].ToUpper().Count() - extensions[9].ToLower().Count();\n\
    \        string extension_strength_11 = extensions[10].ToUpper().Count() - extensions[10].ToLower().Count();\n\
    \        string extension_strength_12 = extensions[11].ToUpper().Count() - extensions[11].ToLower().Count();\n\
    \        string extension_strength_13 = extensions[12].ToUpper().Count() - extensions[12].ToLower().Count();\n\
    \        string extension_strength_14 = extensions[13].ToUpper().Count() - extensions[13].ToLower().Count();\n\
    \        string extension_strength_15 = extensions[14].ToUpper().Count() - extensions[14].ToLower().Count();\n\
    \        string extension_strength_16 = extensions[15].ToUpper().Count() - extensions[15].ToLower().Count();\n\
    \        string extension_strength_17 = extensions[16].ToUpper().Count() - extensions[16].ToLower().Count();\n\
    \        string extension_strength_18 = extensions[17].ToUpper().Count() - extensions[17].ToLower().Count();\n\
    \        string extension_strength_19 = extensions[18].ToUpper().Count() - extensions[18].ToLower().Count();\n\
    \        string extension_strength_20 = extensions[19].ToUpper().Count() - extensions[19].ToLower().Count();",
  "        string extension_strength = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength_int = extension.ToUpper().Count()\
    \ - extension.ToUpper().ToLower().Count();\n            if (extension_strength_int\
    \ > extension_strength.ToUpper().Count() - extension_strength.ToLower().Count())\
    \ {\n                extension_strength = extension;\n            }\n        }\n\
    \        return class_name + \".\" + extension_strength;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();", "        string extension\
    \ = extensions.OrderByDescending(x => x.Count(x => x.ToUpper() == x.ToLower())).FirstOrDefault();\n\
    \        if (extension != null)\n            return class_name + extension;\n\
    \        else\n            return class_name;", "        string extension = extensions[0];\n\
    \        int extension_strength = extension.Count(x => x.ToUpper().Equals(class_name.ToUpper()))\
    \ - extension.Count(x => x.ToLower().Equals(class_name.ToLower()));\n        if\
    \ (extension_strength > 0) {\n            return class_name + \".\" + extension;\n\
    \        }\n        extension_strength = extension.Count(x => x.ToUpper().Equals(class_name.ToUpper()));\n\
    \        if (extension_strength > 0) {\n            return class_name + \".\"\
    \ + extension;\n        }\n        extension_strength = extension.Count(x => x.ToLower().Equals(class_name.ToLower()));\n\
    \        if (extension_strength > 0) {\n            return class_name + \".\"\
    \ + extension;\n        }\n        extension_strength = extension.Count(x => x.Equals(class_name));\n\
    \        if (extension_strength > 0) {\n            return class_name + \".\"\
    \ + extension;\n        }\n        extension_strength = extension.Count(x => x.ToUpper().Equals(class_name.ToUpper()));\n\
    \        if (extension_strength > 0) {\n            return class_name + \".\"\
    \ + extension;\n        }\n        extension_strength = extension.Count(x => x.ToLower().Equals(class_name.ToLower()));\n\
    \        if (extension_strength > 0) {\n            return class_name + \".\"\
    \ + extension;\n        }\n        extension_strength = extension.Count(x => x.Equals(class_name));\n\
    \        if (extension_strength > 0) {\n            return class_name + \".\"\
    \ + extension;\n        }\n        extension_strength = extension.Count(x => x.ToUpper().Equals(class_name.ToUpper()));\n\
    \        if (extension_strength > 0) {\n            return class_name + \".\"\
    \ + extension;\n        }\n        extension_strength = extension.Count(x => x.ToLower().Equals(class_name.ToLower()));\n\
    \        if (extension_strength > 0) {\n            return class_name + \".\"\
    \ + extension;\n        }\n        extension_strength = extension.Count(x => x.Equals(class_name));\n\
    \        if (extension_strength > 0) {\n            return class_name + \".\"\
    \ + extension;\n        }\n        extension_strength = extension.Count(x => x.ToUpper().Equals(class_name.ToUpper()));\n\
    \        if (extension_strength > 0) {\n            return class_name + \".\"\
    \ + extension;\n        }\n        extension_strength = extension.Count(x => x.ToLower().Equals(class_name.ToLower()));\n\
    \        if (extension_strength > 0) {\n            return class_name + \".\"\
    \ + extension;\n        }\n        extension_strength = extension.Count(x => x.Equals(class_name));\n\
    \        if (extension_strength > 0) {\n            return class_name + \".\"\
    \ + extension;\n        }\n        extension_strength = extension.Count(x => x.ToUpper().Equals(",
  "        // Your code here\n        string strongest_extension = \"\";\n       \
    \ double strongest_strength = -1;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(x => char.IsUpper(x));\n          \
    \  int sm = extension.Count(x => char.IsLower(x));\n            double strength\
    \ = cap - sm;\n            if (strength > strongest_strength) {\n            \
    \    strongest_extension = extension;\n                strongest_strength = strength;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string strongest_extension = null;\n        double strongest_extension_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            int cap\
    \ = extension.Length;\n            int sm = class_name.Length;\n            double\
    \ strength = cap - sm;\n            if (strength > strongest_extension_strength)\
    \ {\n                strongest_extension = extension;\n                strongest_extension_strength\
    \ = strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string extension_strength = extensions[0].Length;\n        foreach (string\
    \ extension in extensions) {\n            int extension_length = extension.Length;\n\
    \            int extension_strength_difference = extension_length - extension_strength;\n\
    \            if (extension_strength_difference > 0) {\n                extension_strength\
    \ = extension_strength_difference;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[0];", "        string strongest = null;\n        double\
    \ strongest_strength = double.MaxValue;\n        foreach (string extension in\
    \ extensions) {\n            double extension_strength = GetExtensionStrength(extension);\n\
    \            if (extension_strength > strongest_strength) {\n                strongest\
    \ = class_name + \".\" + extension;\n                strongest_strength = extension_strength;\n\
    \            }\n        }\n        return strongest;", "        string extension_strength\
    \ = extensions[0];\n        foreach (string extension in extensions) {\n     \
    \       int extension_capital = extension.Count(c => Char.IsUpper(c));\n     \
    \       int extension_smaller = extension.Count(c => Char.IsLower(c));\n     \
    \       int extension_strength_fraction = (extension_capital - extension_smaller);\n\
    \            if (extension_strength_fraction > extension_strength.Count(c => Char.IsUpper(c)))\
    \ \n                extension_strength = extension;\n        }\n        return\
    \ class_name + \".\" + extension_strength;", "        // Your code here\n    \
    \    string strongest_extension = \"\";\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.Length;\n            int sm =\
    \ class_name.Length;\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + \".\" + extension;\n\
    \                break;\n            }\n        }\n        return strongest_extension;",
  "        string extension_strength = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength_int = extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n            if (extension_strength_int > extension_strength.ToUpper().Count()\
    \ - extension_strength.ToLower().Count()) {\n                extension_strength\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ extension_strength;", "        string extension_strength = extensions[0].Length;\n\
    \        string extension_class = \"\";\n        foreach (string extension in\
    \ extensions) {\n            int extension_strength_int = extension.Length;\n\
    \            if (extension_strength_int > extension_strength) {\n            \
    \    extension_strength = extension_strength_int;\n                extension_class\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ extension_class;", "        // Your code here\n        string strongest = string.Empty;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            double strength = (double)cap - (double)sm;\n            if (strength\
    \ > 0) {\n                strongest = class_name + \".\" + extension;\n      \
    \          break;\n            }\n        }\n        return strongest;", "   \
    \     string extension_strength = extensions[0].Length;\n        foreach (string\
    \ extension in extensions) {\n            int extension_strength_new = extension.Length;\n\
    \            int extension_strength_old = extension_strength;\n            while\
    \ (extension_strength_new > extension_strength_old) {\n                extension_strength_old\
    \ = extension_strength_new;\n                extension_strength_new = extension_strength_old\
    \ - extension_strength_new;\n            }\n            if (extension_strength_new\
    \ > extension_strength) {\n                extension_strength = extension_strength_new;\n\
    \            }\n        }\n        return class_name + \".\" + extensions[extensions.IndexOf(extension_strength)];",
  "        string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1).ToLower();\n        string extension_strength_fraction\
    \ =\n            extension_strength.Substring(0, extension_strength.Length - 1).ToLower();\n\
    \        string extension_strength_fraction_string =\n            extension_strength_fraction.Substring(0,\
    \ extension_strength_fraction.Length - 1).ToLower();\n        string extension_strength_fraction_string\
    \ =\n            extension_strength_fraction.Substring(0, extension_strength_fraction.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction_string =\n     \
    \       extension_strength_fraction.Substring(0, extension_strength_fraction.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction_string =\n     \
    \       extension_strength_fraction.Substring(0, extension_strength_fraction.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction_string =\n     \
    \       extension_strength_fraction.Substring(0, extension_strength_fraction.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction_string =\n     \
    \       extension_strength_fraction.Substring(0, extension_strength_fraction.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction_string =\n     \
    \       extension_strength_fraction.Substring(0, extension_strength_fraction.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction_string =\n     \
    \       extension_strength_fraction.Substring(0, extension_strength_fraction.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction_string =\n     \
    \       extension_strength_fraction.Substring(0, extension_strength_fraction.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction_string =\n     \
    \       extension_strength_fraction.Substring(0, extension_strength_fraction.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction_string =\n     \
    \       extension_strength_fraction.Substring(0, extension_strength_fraction.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction_string =\n     \
    \       extension_strength_fraction.Substring(0, extension_strength_fraction.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction_string =\n     \
    \       extension_strength_fraction.Substring(0, extension_strength_fraction.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction_string =\n     \
    \       extension_strength", "        string extension = extensions[0];\n    \
    \    string extension_strength = extension.Substring(0, extension.Length - 1);\n\
    \        string extension_strength_number = extension_strength.ToUpperInvariant().Substring(0,\
    \ extension_strength.Length - 1);\n        int extension_strength_number_int =\
    \ Convert.ToInt32(extension_strength_number);\n        int extension_strength_number_cap\
    \ = extension_strength_number_int - extension_strength_number_int%CAP;\n     \
    \   int extension_strength_number_sm = extension_strength_number_int - extension_strength_number_cap;\n\
    \        string extension_strength_number_string = extension_strength_number_cap.ToString()\
    \ + extension_strength_number_sm.ToString();\n        extension_strength_number_string\
    \ = extension_strength_number_string.ToUpperInvariant();\n        string extension_strength_number_string_upper\
    \ = extension_strength_number_string.ToUpperInvariant();\n        string extension_strength_number_string_lower\
    \ = extension_strength_number_string.ToLowerInvariant();\n        string extension_strength_number_string_upper_lower\
    \ = extension_strength_number_string_upper.ToLowerInvariant();\n        string\
    \ extension_strength_number_string_lower_upper = extension_strength_number_string_lower.ToUpperInvariant();\n\
    \        string extension_strength_number_string_upper_lower_lower = extension_strength_number_string_upper_lower.ToLowerInvariant();\n\
    \        string extension_strength_number_string_lower_upper_lower = extension_strength_number_string_lower_upper.ToUpperInvariant();\n\
    \        string extension_strength_number_string_upper_lower_lower_lower = extension_strength_number_string_upper_lower_lower.ToLowerInvariant();\n\
    \        string extension_strength_number_string_upper_lower_lower_lower_lower\
    \ = extension_strength_number_string_upper_lower_lower_lower.ToUpperInvariant();\n\
    \        string extension_strength_number_string_upper_lower_lower_lower_lower_lower\
    \ = extension_strength_number_string_upper_lower_lower_lower_lower_lower.ToLowerInvariant();\n\
    \        string extension_strength_number_string_upper_lower_lower_lower_lower_lower_lower\
    \ = extension_strength_number_string_upper_lower_lower_lower_lower_lower_lower.ToUpperInvariant();\n\
    \        string extension_strength_number_string_upper_lower_lower_lower_lower_lower_lower_lower\
    \ = extension_strength_number_string_upper_lower_lower_lower_lower_lower_lower_lower_lower.ToLowerInvariant();\n\
    \        string extension_strength_number_string_upper_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = extension_strength_number_string_upper_lower_lower_lower_lower_lower_lower_",
  "        string extension = extensions[0];\n        foreach (string extension2 in\
    \ extensions) {\n            int cap = extension2.Length;\n            int sm\
    \ = extension.Length;\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                extension = extension2;\n            }\n        }\n\
    \        return class_name + \".\" + extension;", "        string extension_strength\
    \ = string.Empty;\n        string extension_class = string.Empty;\n        string\
    \ extension_class_name = string.Empty;\n        string extension_class_name_with_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_",
  "        string strongest_extension = null;\n        string extension_strength =\
    \ null;\n        foreach (string extension in extensions) {\n            int extension_strength_numerator\
    \ = extension.Count(c => char.IsUpper(c));\n            int extension_strength_denominator\
    \ = extension.Count(c => char.IsLower(c));\n            double extension_strength_fraction\
    \ = extension_strength_numerator / extension_strength_denominator;\n         \
    \   if (extension_strength_fraction > strongest_extension) {\n               \
    \ strongest_extension = extension;\n                extension_strength = extension_strength_fraction.ToString();\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string extension_strength = extensions[0].Length;\n        foreach (string\
    \ extension in extensions) {\n            int extension_strength_new = extension.Length;\n\
    \            int extension_strength_old = extension_strength;\n            int\
    \ extension_strength_diff = extension_strength_new - extension_strength_old;\n\
    \            if (extension_strength_diff > extension_strength) {\n           \
    \     extension_strength = extension_strength_diff;\n            }\n        }\n\
    \        return class_name + \".\" + extensions[0];", "        // Your code here\n\
    \        string strongest_extension = string.Empty;\n        string extension_strength\
    \ = string.Empty;\n        foreach (string extension in extensions) {\n      \
    \      int cap = extension.Count(x => char.IsUpper(x));\n            int sm =\
    \ extension.Count(x => char.IsLower(x));\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                extension_strength = extension;\n\
    \                strongest_extension = class_name + extension;\n             \
    \   break;\n            }\n        }\n        if (extension_strength.Length >\
    \ 0) {\n            return strongest_extension;\n        }\n        return class_name;",
  "        string extension_strength = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength_int = extension.ToUpper().Count()\
    \ - extension.ToUpper().ToLower().Count();\n            if (extension_strength_int\
    \ > extension_strength.ToUpper().Count() - extension_strength.ToLower().Count())\
    \ {\n                extension_strength = extension;\n            }\n        }\n\
    \        return class_name + \".\" + extension_strength;", "        string extension\
    \ = extensions[0];\n        string extension_class = class_name + \".\" + extension;\n\
    \        string extension_class_with_strength = extension_class + \".\" + extension;\n\
    \        string extension_class_with_strength_without_extension = extension_class_with_strength.Remove(extension_class_with_strength.Length\
    \ - extension.Length);\n        string extension_class_with_strength_without_extension_without_extension\
    \ = extension_class_with_strength_without_extension.Remove(extension_class_with_strength_without_extension.Length\
    \ - extension.Length);\n        string extension_class_with_strength_without_extension_without_extension_without_extension\
    \ = extension_class_with_strength_without_extension_without_extension.Remove(extension_class_with_strength_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_with_strength_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_with_strength_without_extension_without_extension_without_extension.Remove(extension_class_with_strength_without_extension_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_with_strength_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_with_strength_without_extension_without_extension_without_extension.Remove(extension_class_with_strength_without_extension_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_with_strength_without_extension_without_extension_without_extension_without_extension.Remove(extension_class_with_strength_without_extension_without_extension_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_with_strength_without_extension_without_extension_without_extension_without_extension.Remove(extension_class_with_strength_without_extension_without_extension_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension.Remove(extension_class_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = ", "        // Your code here\n        string strongest_extension = \"\";\n\
    \        double strongest_strength = 0;\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            double\
    \ strength = cap - sm;\n            if (strength > strongest_strength) {\n   \
    \             strongest_extension = extension;\n                strongest_strength\
    \ = strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1).ToLower();\n        string extension_strength_fraction\
    \ =\n            extension_strength.Substring(extension_strength.Length - 1).ToLower();\n\
    \        int extension_strength_int = int.Parse(extension_strength_fraction);\n\
    \        string extension_strength_fraction_string =\n            extension_strength_fraction.Substring(0,\
    \ extension_strength_fraction.Length - 1);\n        int extension_strength_int\
    \ = int.Parse(extension_strength_fraction_string);\n        int extension_strength_fraction_int\
    \ = extension_strength_int - 1;\n        string extension_strength_fraction_string\
    \ = extension_strength_fraction_int.ToString();\n        string extension_strength_fraction_string2\
    \ =\n            extension_strength_fraction_string.Substring(0, extension_strength_fraction_string.Length\
    \ - 1);\n        int extension_strength_int = int.Parse(extension_strength_fraction_string2);\n\
    \        string extension_strength_fraction_string3 = extension_strength_int.ToString();\n\
    \        string extension_strength_fraction_string4 =\n            extension_strength_fraction_string3.Substring(0,\
    \ extension_strength_fraction_string3.Length - 1);\n        int extension_strength_int\
    \ = int.Parse(extension_strength_fraction_string4);\n        string extension_strength_fraction_string5\
    \ = extension_strength_int.ToString();\n        string extension_strength_fraction_string6\
    \ =\n            extension_strength_fraction_string5.Substring(0, extension_strength_fraction_string5.Length\
    \ - 1);\n        int extension_strength_int = int.Parse(extension_strength_fraction_string6);\n\
    \        string extension_strength_fraction_string7 = extension_strength_int.ToString();\n\
    \        string extension_strength_fraction_string8 =\n            extension_strength_fraction_string7.Substring(0,\
    \ extension_strength_fraction_string7.Length - 1);\n        int extension_strength_int\
    \ = int.Parse(extension_strength_fraction_string8);\n        string extension_strength_fraction_string9\
    \ = extension_strength_int.ToString();\n        string extension_strength_fraction_string10\
    \ =\n            extension_strength_fraction_string9.Substring(0, extension_strength_fraction_string9.Length\
    \ - 1);\n        int extension_strength_int = int.Parse(extension_strength_fraction_string10);\n\
    \        string extension_strength_fraction_string11 = extension_strength_int.ToString();\n\
    \        string extension_strength_fraction_string12 =\n            extension_strength_fraction_string11.Substring(0,\
    \ extension_strength", "        string extension_strength = extensions[0].Length;\n\
    \        foreach (string extension in extensions) {\n            int extension_length\
    \ = extension.Length;\n            int extension_cap = extension_length.ToUpperInvariant().Count();\n\
    \            int extension_sm = extension_length.ToLowerInvariant().Count();\n\
    \            int extension_strength_frac = extension_cap - extension_sm;\n   \
    \         if (extension_strength_frac > extension_strength) {\n              \
    \  extension_strength = extension_strength_frac;\n            }\n        }\n \
    \       return class_name + \".\" + extensions[0];", "        // Your code here\n\
    \        string extension = extensions[0];\n        int cap = class_name.Count(x\
    \ => x.ToUpper() == x);\n        int sm = class_name.Count(x => x.ToLower() ==\
    \ x);\n        int strength = cap - sm;\n        extensions.Remove(extension);\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        foreach (string\
    \ e in extensions) {\n            if (e == extension) {\n                extensions.Remove(e);\n\
    \                extensions.Sort();\n                extensions.Reverse();\n \
    \           }\n        }\n        string strongest = class_name + extension;\n\
    \        return strongest;", "        string extension = extensions[0];\n    \
    \    string extension_strength = extension.Substring(extension.Length - 1, 1);\n\
    \        string extension_strength_str = extension_strength.ToString();\n    \
    \    string extension_strength_str_upper = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper_small = extension_strength_str_upper.Substring(extension_strength_str_upper.Length\
    \ - 1, 1);\n        string extension_strength_str_lower_small = extension_strength_str_lower.Substring(extension_strength_str_lower.Length\
    \ - 1, 1);\n        string extension_strength_str_upper_small_lower = extension_strength_str_upper_small.ToLower();\n\
    \        string extension_strength_str_lower_small_lower = extension_strength_str_lower_small.ToLower();\n\
    \        string extension_strength_str_upper_small_lower_lower = extension_strength_str_upper_small_lower.ToLower();\n\
    \        string extension_strength_str_lower_small_lower_lower = extension_strength_str_lower_small_lower.ToLower();\n\
    \        string extension_strength_str_upper_small_lower_lower_lower = extension_strength_str_upper_small_lower_lower.ToLower();\n\
    \        string extension_strength_str_lower_small_lower_lower_lower = extension_strength_str_lower_small_lower_lower.ToLower();\n\
    \        string extension_strength_str_upper_small_lower_lower_lower_lower = extension_strength_str_upper_small_lower_lower_lower.ToLower();\n\
    \        string extension_strength_str_lower_small_lower_lower_lower_lower = extension_strength_str_lower_small_lower_lower_lower.ToLower();\n\
    \        string extension_strength_str_upper_small_lower_lower_lower_lower_lower\
    \ = extension_strength_str_upper_small_lower_lower_lower_lower.ToLower();\n  \
    \      string extension_strength_str_lower_small_lower_lower_lower_lower_lower_lower\
    \ = extension_strength_str_lower_small_lower_lower_lower_lower_lower.ToLower();\n\
    \        string extension_strength_str_upper_small_lower_lower_lower_lower_lower_lower_lower\
    \ = extension_strength_str_upper_small_lower_lower_lower_lower_lower_lower_lower.ToLower();\n\
    \        string extension_strength_str_lower_small_lower_lower_lower_lower_lower_lower_lower\
    \ = extension_strength_str_lower_small_lower_lower_lower_lower_lower_lower_lower.ToLower();\n\
    \        string extension_strength_str_upper_small_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = extension_", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        string strongest_extension = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_new\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength_new > extension_strength) {\n                strongest_extension\
    \ = extension;\n                extension_strength = extension_strength_new;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extension_strength.ToString().Count();\n\
    \        double strength_of_extensions = extensions.Select(x => x.ToUpper().Count()\
    \ - x.ToLower().Count()).Sum();\n        double strength_of_class = class_name.ToUpper().Count()\
    \ - class_name.ToLower().Count();\n        if (strength > strength_of_extensions\
    \ && strength > strength_of_class) {\n            return class_name + \".\" +\
    \ extensions.OrderByDescending(x => x).First();\n        }\n        return class_name\
    \ + \".\" + extensions.OrderBy(x => x).First();", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        extensions.Sort();\n\
    \        string strongest_extension = class_name + \".\" + extensions[0];\n  \
    \      foreach (string extension in extensions) {\n            if (strength >\
    \ extension_strength) {\n                strongest_extension = class_name + \"\
    .\" + extension;\n            }\n        }\n        return strongest_extension;",
  "        string strongest_extension = string.Empty;\n        double strongest_strength\
    \ = double.MaxValue;\n        foreach (string extension in extensions) {\n   \
    \         double extension_strength = ExtensionStrength(class_name, extension);\n\
    \            if (extension_strength > strongest_strength) {\n                strongest_strength\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        double\
    \ max_strength = extension_strength;\n        string strongest_extension = null;\n\
    \        foreach (string extension in extensions) {\n            double extension_strength\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength > max_strength) {\n                max_strength = extension_strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        string extension_strength\
    \ = extensions[0].Length;\n        foreach (string extension in extensions) {\n\
    \            int extension_length = extension.Length;\n            int extension_strength_diff\
    \ = extension_length - extension_strength;\n            if (extension_strength_diff\
    \ < 0) {\n                extension_strength = extension_length;\n           \
    \ }\n            else if (extension_strength_diff > 0) {\n                extension_strength\
    \ = extension_strength - extension_strength_diff;\n            }\n        }\n\
    \        return class_name + \".\" + extensions[0];", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   string extension_strength_2 = extensions[1].ToUpper().Count() - extensions[1].ToLower().Count();\n\
    \        string extension_strength_3 = extensions[2].ToUpper().Count() - extensions[2].ToLower().Count();\n\
    \        string extension_strength_4 = extensions[3].ToUpper().Count() - extensions[3].ToLower().Count();\n\
    \        string extension_strength_5 = extensions[4].ToUpper().Count() - extensions[4].ToLower().Count();\n\
    \        string extension_strength_6 = extensions[5].ToUpper().Count() - extensions[5].ToLower().Count();\n\
    \        string extension_strength_7 = extensions[6].ToUpper().Count() - extensions[6].ToLower().Count();\n\
    \        string extension_strength_8 = extensions[7].ToUpper().Count() - extensions[7].ToLower().Count();\n\
    \        string extension_strength_9 = extensions[8].ToUpper().Count() - extensions[8].ToLower().Count();\n\
    \        string extension_strength_10 = extensions[9].ToUpper().Count() - extensions[9].ToLower().Count();\n\
    \        string extension_strength_11 = extensions[10].ToUpper().Count() - extensions[10].ToLower().Count();\n\
    \        string extension_strength_12 = extensions[11].ToUpper().Count() - extensions[11].ToLower().Count();\n\
    \        string extension_strength_13 = extensions[12].ToUpper().Count() - extensions[12].ToLower().Count();\n\
    \        string extension_strength_14 = extensions[13].ToUpper().Count() - extensions[13].ToLower().Count();\n\
    \        string extension_strength_15 = extensions[14].ToUpper().Count() - extensions[14].ToLower().Count();\n\
    \        string extension_strength_16 = extensions[15].ToUpper().Count() - extensions[15].ToLower().Count();\n\
    \        string extension_strength_17 = extensions[16].ToUpper().Count() - extensions[16].ToLower().Count();\n\
    \        string extension_strength_18 = extensions[17].ToUpper().Count() - extensions[17].ToLower().Count();\n\
    \        string extension_strength_19 = extensions[18].ToUpper().Count() - extensions[18].ToLower().Count();\n\
    \        string extension_strength_20 = extensions[19].ToUpper().Count() - extensions[19].ToLower().Count();",
  "        // Your code here\n        string strongest = null;\n        double strongest_strength\
    \ = double.MaxValue;\n        foreach (string extension in extensions) {\n   \
    \         int cap = extension.Count(c => c == 'A');\n            int sm = extension.Count(c\
    \ => c == 'a');\n            double strength = cap - sm;\n            if (strength\
    \ > strongest_strength) {\n                strongest = class_name + \".\" + extension;\n\
    \                strongest_strength = strength;\n            }\n        }\n  \
    \      return strongest;", "        string extension_strength = extensions[0].Substring(class_name.Length);\n\
    \        string extension_strength_without_cap = extension_strength.ToUpper();\n\
    \        string extension_strength_without_sm = extension_strength.ToLower();\n\
    \        double extension_strength_without_cap_double = double.Parse(extension_strength_without_cap);\n\
    \        double extension_strength_without_sm_double = double.Parse(extension_strength_without_sm);\n\
    \        double extension_strength_without_cap_double_divided_by_sm = extension_strength_without_cap_double\
    \ / extension_strength_without_sm_double;\n        double extension_strength_without_sm_double_divided_by_cap\
    \ = extension_strength_without_sm_double / extension_strength_without_cap_double;\n\
    \        double extension_strength_without_cap_double_divided_by_sm_divided_by_cap\
    \ = extension_strength_without_cap_double / extension_strength_without_sm_double\
    \ / extension_strength_without_cap_double_divided_by_sm;\n        double extension_strength_without_sm_double_divided_by_cap_divided_by_sm\
    \ = extension_strength_without_sm_double / extension_strength_without_cap_double\
    \ / extension_strength_without_sm_double_divided_by_cap;\n        double extension_strength_without_cap_double_divided_by_sm_divided_by_cap_divided_by_sm\
    \ = extension_strength_without_cap_double / extension_strength_without_sm_double\
    \ / extension_strength_without_cap_double_divided_by_sm / extension_strength_without_sm_double_divided_by_cap;\n\
    \        double extension_strength_without_sm_double_divided_by_cap_divided_by_sm_divided_by_cap\
    \ = extension_strength_without_sm_double / extension_strength_without_cap_double\
    \ / extension_strength_without_sm_double_divided_by_cap / extension_strength_without_cap_double_divided_by_sm_divided_by_cap;\n\
    \        double extension_strength_without_cap_double_divided_by_sm_divided_by_cap_divided_by_sm_divided_by_cap\
    \ = extension_strength_without_cap_double / extension_strength_without_sm_double\
    \ / extension_strength_without_cap_double_divided_by_sm / extension_strength_without_sm_double_divided_by_cap\
    \ / extension_strength_without_cap_double_divided_by_sm_divided_by_cap;\n    \
    \    double extension_strength_without_sm_double_divided_by_cap_divided_by_sm_divided_by_cap_divided_by_sm\
    \ = extension", "        string extension = extensions[0];\n        string extension_strength\
    \ = extension.Substring(extension.Length - 1, 1);\n        string extension_strength_str\
    \ = extension_strength.ToString();\n        string extension_strength_str_upper\
    \ = extension_strength_str.ToUpper();\n        int extension_strength_int = 0;\n\
    \        if (extension_strength_str_upper == \"A\") {\n            extension_strength_int\
    \ = 1;\n        }\n        else if (extension_strength_str_upper == \"B\") {\n\
    \            extension_strength_int = 2;\n        }\n        else if (extension_strength_str_upper\
    \ == \"C\") {\n            extension_strength_int = 3;\n        }\n        else\
    \ if (extension_strength_str_upper == \"D\") {\n            extension_strength_int\
    \ = 4;\n        }\n        else if (extension_strength_str_upper == \"E\") {\n\
    \            extension_strength_int = 5;\n        }\n        else if (extension_strength_str_upper\
    \ == \"F\") {\n            extension_strength_int = 6;\n        }\n        else\
    \ if (extension_strength_str_upper == \"G\") {\n            extension_strength_int\
    \ = 7;\n        }\n        else if (extension_strength_str_upper == \"H\") {\n\
    \            extension_strength_int = 8;\n        }\n        else if (extension_strength_str_upper\
    \ == \"I\") {\n            extension_strength_int = 9;\n        }\n        else\
    \ if (extension_strength_str_upper == \"J\") {\n            extension_strength_int\
    \ = 10;\n        }\n        else if (extension_strength_str_upper == \"K\") {\n\
    \            extension_strength_int = 11;\n        }\n        else if (extension_strength_str_upper\
    \ == \"L\") {\n            extension_strength_int = 12;\n        }\n        else\
    \ if (extension_strength_str_upper == \"M\") {\n            extension_strength_int\
    \ = 13;\n        }\n        else if (extension_strength_str_upper == \"N\") {\n\
    \            extension_strength_int = 14;\n        }\n        else if (extension_strength_str_upper\
    \ == \"O\") {\n            extension_strength_int = 15;\n        }\n        else\
    \ if (extension_strength_str_upper == \"P\") {\n            extension_strength_int\
    \ = 16;\n        }\n        else if (extension_strength_str_upper == \"Q\") {\n\
    \            extension_strength_int = 17;\n        }\n        else if (extension_strength_str_upper\
    \ == \"R\") {\n            extension_strength_int = 18;\n        }\n        else\
    \ if (extension_strength_str_upper == \"S\") {\n            extension_strength_int\
    \ = 19;\n        }\n        else if (extension_strength_str_upper == \"T\") {\n\
    \            extension_strength_int = 20;\n        }\n        else if (extension_strength_str_upper\
    \ == \"U\") {\n            extension_strength_int = 21;\n        }\n        else\
    \ if (extension_", "        string extension = extensions[0];\n        string\
    \ extension_strength = extension.Substring(extension.Length - 1, 1);\n       \
    \ int extension_cap = extension.Length - extension_strength.Length;\n        int\
    \ extension_sm = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n  \
    \          string extension_i = extensions[i];\n            int extension_i_length\
    \ = extension_i.Length;\n            int extension_i_strength = extension_i.Substring(extension_i.Length\
    \ - 1, 1);\n            int extension_i_cap = extension_i.Length - extension_i_strength.Length;\n\
    \            int extension_i_lower = extension_i.ToLowerInvariant().Count(x =>\
    \ x != '_');\n            if (extension_i_strength > extension_strength) {\n \
    \               extension = extension_i;\n                extension_strength =\
    \ extension_i_strength;\n                extension_cap = extension_i_cap;\n  \
    \              extension_sm = extension_i_lower;\n            }\n        }\n \
    \       string extension_strength_str = extension_strength.ToString();\n     \
    \   string extension_cap_str = extension_cap.ToString();\n        string extension_sm_str\
    \ = extension_sm.ToString();\n        string extension_str = extension.Substring(0,\
    \ extension.Length - extension_strength_str.Length - extension_cap_str.Length\
    \ - extension_sm_str.Length);\n        return class_name + \".\" + extension_str;",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        double\
    \ max_strength = extensions.Max(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        double min_strength = extensions.Min(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        if (strength > max_strength) {\n            return class_name + \".\"\
    \ + extensions.OrderByDescending(x => x.ToUpper().Count() - x.ToLower().Count()).First();\n\
    \        }\n        if (strength < min_strength) {\n            return class_name\
    \ + \".\" + extensions.OrderBy(x => x.ToUpper().Count() - x.ToLower().Count()).First();\n\
    \        }\n        return class_name + \".\" + extensions.OrderByDescending(x\
    \ => x.ToUpper().Count() - x.ToLower().Count()).First();", "        string extension\
    \ = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1);\n        string extension_strength_str = extension_strength.ToLower();\n\
    \        string extension_strength_str_length = extension_strength_str.Length;\n\
    \        int extension_strength_int = 0;\n        foreach (char c in extension_strength_str)\
    \ {\n            extension_strength_int += (int)c;\n        }\n        double\
    \ extension_strength_double = extension_strength_int / extension_strength_str_length;\n\
    \        double extension_strength_double2 = Math.Abs(extension_strength_double);\n\
    \        double extension_strength_double3 = Math.Abs(extension_strength_double2);\n\
    \        double extension_strength_double4 = Math.Abs(extension_strength_double3);\n\
    \        double extension_strength_double5 = Math.Abs(extension_strength_double4);\n\
    \        double extension_strength_double6 = Math.Abs(extension_strength_double5);\n\
    \        double extension_strength_double7 = Math.Abs(extension_strength_double6);\n\
    \        double extension_strength_double8 = Math.Abs(extension_strength_double7);\n\
    \        double extension_strength_double9 = Math.Abs(extension_strength_double8);\n\
    \        double extension_strength_double10 = Math.Abs(extension_strength_double9);\n\
    \        double extension_strength_double11 = Math.Abs(extension_strength_double10);\n\
    \        double extension_strength_double12 = Math.Abs(extension_strength_double11);\n\
    \        double extension_strength_double13 = Math.Abs(extension_strength_double12);\n\
    \        double extension_strength_double14 = Math.Abs(extension_strength_double13);\n\
    \        double extension_strength_double15 = Math.Abs(extension_strength_double14);\n\
    \        double extension_strength_double16 = Math.Abs(extension_strength_double15);\n\
    \        double extension_strength_double17 = Math.Abs(extension_strength_double16);\n\
    \        double extension_strength_double18 = Math.Abs(extension_strength_double17);\n\
    \        double extension_strength_double19 = Math.Abs(extension_strength_double18);\n\
    \        double extension_strength_double20 = Math.Abs(extension_strength_double19);\n\
    \        double extension_strength_double21 = Math.Abs(extension_strength_double20);\n\
    \        double extension_strength_double22 = Math.Abs(extension_strength_double21);\n\
    \        double extension_strength_double23 = Math.Abs(extension_strength_double22);\n\
    \        double extension_strength", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1).ToLower();\n\
    \        string extension_strength_frac = extension_strength.Substring(extension_strength.Length\
    \ - 1).ToLower();\n        double extension_strength_frac_double = Convert.ToDouble(extension_strength_frac);\n\
    \        double extension_strength_double = Convert.ToDouble(extension_strength);\n\
    \        double extension_strength_double_frac = extension_strength_double - extension_strength_frac_double;\n\
    \        double extension_strength_double_frac_double = Convert.ToDouble(extension_strength_double_frac);\n\
    \        double extension_strength_double_frac_double_frac = extension_strength_double_frac\
    \ - extension_strength_frac_double_frac;\n        double extension_strength_double_frac_double_frac_double\
    \ = Convert.ToDouble(extension_strength_double_frac_double_frac);\n        double\
    \ extension_strength_double_frac_double_frac_double_frac = extension_strength_double_frac_double_frac_double\
    \ - extension_strength_frac_double_frac_double_frac;\n        double extension_strength_double_frac_double_frac_double_frac_double\
    \ = Convert.ToDouble(extension_strength_double_frac_double_frac_double_frac);\n\
    \        double extension_strength_double_frac_double_frac_double_frac_double_frac\
    \ = extension_strength_double_frac_double_frac_double_frac - extension_strength_frac_double_frac_double_frac_double;\n\
    \        double extension_strength_double_frac_double_frac_double_frac_double_frac_double\
    \ = Convert.ToDouble(extension_strength_double_frac_double_frac_double_frac_double_frac);\n\
    \        double extension_strength_double_frac_double_frac_double_frac_double_frac_double_frac\
    \ = extension_strength_double_frac_double_frac_double_frac_double_frac - extension_strength_frac_double_frac_double_frac_double_frac;\n\
    \        double extension_strength_double_frac_double_frac_double_frac_double_frac_double_frac_double\
    \ = Convert.ToDouble(extension_strength_double_frac_double_frac_double_frac_double_frac_double_frac_double_frac);\n\
    \        double extension_strength_double_frac_double_frac_double_frac_double_frac_double_frac_double_frac\
    \ = extension_strength_double_frac_double_frac_double_frac_double_frac_double_frac\
    \ - extension_strength", "        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.ToUpper().Count();\n            int sm = extension.ToLower().Count();\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += \".\" + extension;\n            }\n       \
    \ }\n        return strongest_extension;", "        string extension_strength\
    \ = extensions[0].Substring(0, extensions[0].Length - 1);\n        foreach (string\
    \ extension in extensions) {\n            int extension_strength_int = extension.Substring(0,\
    \ extension.Length - 1);\n            if (extension_strength_int > extension_strength)\
    \ {\n                extension_strength = extension_strength_int;\n          \
    \  }\n        }\n        return class_name + \".\" + extension_strength;", " \
    \       string extension_strength = extensions[0].ToUpper().Substring(class_name.ToUpper().Length);\n\
    \        string strongest_extension = extensions[0];\n        foreach (string\
    \ extension in extensions) {\n            string extension_strength_new = extension.ToUpper().Substring(class_name.ToUpper().Length);\n\
    \            if (extension_strength_new > extension_strength) {\n            \
    \    strongest_extension = extension;\n                extension_strength = extension_strength_new;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1);\n        string extension_strength_str\
    \ = extension_strength.ToLower();\n        string extension_strength_str_length\
    \ = extension_strength_str.Length;\n        int extension_strength_int = 0;\n\
    \        if (extension_strength_str_length == 1) {\n            extension_strength_int\
    \ = Convert.ToInt32(extension_strength_str);\n        }\n        else if (extension_strength_str_length\
    \ == 2) {\n            extension_strength_int = Convert.ToInt32(extension_strength_str[0]);\n\
    \            extension_strength_int += Convert.ToInt32(extension_strength_str[1]);\n\
    \        }\n        else if (extension_strength_str_length == 3) {\n         \
    \   extension_strength_int = Convert.ToInt32(extension_strength_str[0]);\n   \
    \         extension_strength_int += Convert.ToInt32(extension_strength_str[1]);\n\
    \            extension_strength_int += Convert.ToInt32(extension_strength_str[2]);\n\
    \        }\n        else if (extension_strength_str_length == 4) {\n         \
    \   extension_strength_int = Convert.ToInt32(extension_strength_str[0]);\n   \
    \         extension_strength_int += Convert.ToInt32(extension_strength_str[1]);\n\
    \            extension_strength_int += Convert.ToInt32(extension_strength_str[2]);\n\
    \            extension_strength_int += Convert.ToInt32(extension_strength_str[3]);\n\
    \        }\n        else if (extension_strength_str_length == 5) {\n         \
    \   extension_strength_int = Convert.ToInt32(extension_strength_str[0]);\n   \
    \         extension_strength_int += Convert.ToInt32(extension_strength_str[1]);\n\
    \            extension_strength_int += Convert.ToInt32(extension_strength_str[2]);\n\
    \            extension_strength_int += Convert.ToInt32(extension_strength_str[3]);\n\
    \            extension_strength_int += Convert.ToInt32(extension_strength_str[4]);\n\
    \        }\n        else if (extension_strength_str_length == 6) {\n         \
    \   extension_strength_int = Convert.ToInt32(extension_strength_str[0]);\n   \
    \         extension_strength_int += Convert.ToInt32(extension_strength_str[1]);\n\
    \            extension_strength_int += Convert.ToInt32(extension_strength_str[2]);\n\
    \            extension_strength_int += Convert.ToInt32(extension_strength_str[3]);\n\
    \            extension_strength_int += Convert.ToInt32(extension_strength_str",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength == 0) {\n            return class_name;\n     \
    \   }\n        double strength = extension_strength / extension_strength.ToString().Count();\n\
    \        double max_strength = extension_strength;\n        string max_extension\
    \ = null;\n        foreach (string extension in extensions) {\n            if\
    \ (extension_strength > max_strength) {\n                max_strength = extension_strength;\n\
    \                max_extension = extension;\n            }\n        }\n      \
    \  return class_name + \".\" + max_extension;", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1).ToLower();\n\
    \        List<string> extension_strength_sorted = extensions.OrderBy(x => x.Substring(x.Length\
    \ - 1).ToLower()).ToList();\n        int extension_strength_sorted_index = extension_strength_sorted.IndexOf(extension_strength);\n\
    \        if (extension_strength_sorted_index > 0) {\n            extension = extension_strength_sorted[extension_strength_sorted_index];\n\
    \        }\n        return class_name + \".\" + extension;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength > 0) {\n            return class_name + \".\" +\
    \ extensions[0];\n        }\n        else {\n            int max_strength = -1;\n\
    \            string max_extension = null;\n            foreach (string extension\
    \ in extensions) {\n                if (extension.ToUpper().Count() - extension.ToLower().Count()\
    \ > max_strength) {\n                    max_strength = extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n                    max_extension = extension;\n\
    \                }\n            }\n            return class_name + \".\" + max_extension;\n\
    \        }", "        string strongest_extension = string.Empty;\n        double\
    \ strongest_extension_strength = double.MaxValue;\n        foreach (string extension\
    \ in extensions) {\n            string extension_class = class_name + \".\" +\
    \ extension;\n            double extension_strength = ExtensionStrength(extension_class);\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension = extension_class;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return strongest_extension;",
  "        string extension_strength = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int extension_capital_letters = extension.Count(x\
    \ => char.IsUpper(x));\n            int extension_small_letters = extension.Count(x\
    \ => char.IsLower(x));\n            int extension_strength_fraction = (extension_capital_letters\
    \ - extension_small_letters);\n            if (extension_strength_fraction > extension_strength)\
    \ {\n                extension_strength = extension_strength_fraction;\n     \
    \           extension_strength = extension.Substring(0, extension.Length - extension_strength_fraction);\n\
    \            }\n        }\n        return class_name + \".\" + extension_strength;"]
stop_tokens:
- "\n    }\n"
