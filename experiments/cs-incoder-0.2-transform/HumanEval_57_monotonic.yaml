name: HumanEval_57_monotonic
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return True is list elements are monotonically increasing or\
  \ decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
  \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>>\
  \ Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
  \    // (true)\n    public static bool Monotonic(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
  \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
  \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
  \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
  \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
  \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
  \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
  \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L,\
  \ (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
completions: ["        long first = l.First();\n        long last = l.Last();\n  \
    \      if (first > last)\n            return false;\n        long mid = first\
    \ + (last - first) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        bool isMonotonic = true;\n        foreach (long x in l)\n \
    \       {\n            if (x > mid)\n            {\n                isIncreasing\
    \ = false;\n            }\n            if (x < mid)\n            {\n         \
    \       isDecreasing = false;\n            }\n            if (x == mid)\n    \
    \        {\n                isMonotonic = false;\n            }\n        }\n \
    \       return isIncreasing || isDecreasing || isMonotonic;", "        long min\
    \ = l.Min();\n        long max = l.Max();\n        long mid = min + (max - min)\
    \ / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        foreach (long x in l) {\n            if (x > mid) {\n               \
    \ isDecreasing = false;\n            } else if (x < mid) {\n                isIncreasing\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing;",
  "        long prev = l[0];\n        bool increasing = true;\n        foreach (long\
    \ el in l.Skip(1)) {\n            if (el < prev) {\n                increasing\
    \ = false;\n            }\n            prev = el;\n        }\n        return increasing;",
  "        long first = l.First();\n        long last = l.Last();\n        long middle\
    \ = l.Count / 2;\n        long middle2 = middle + middle;\n        long middle3\
    \ = middle2 + middle;\n        long middle4 = middle3 + middle;\n        long\
    \ middle5 = middle4 + middle;\n        long middle6 = middle5 + middle;\n    \
    \    long middle7 = middle6 + middle;\n        long middle8 = middle7 + middle;\n\
    \        long middle9 = middle8 + middle;\n        long middle10 = middle9 + middle;\n\
    \        long middle11 = middle10 + middle;\n        long middle12 = middle11\
    \ + middle;\n        long middle13 = middle12 + middle;\n        long middle14\
    \ = middle13 + middle;\n        long middle15 = middle14 + middle;\n        long\
    \ middle16 = middle15 + middle;\n        long middle17 = middle16 + middle;\n\
    \        long middle18 = middle17 + middle;\n        long middle19 = middle18\
    \ + middle;\n        long middle20 = middle19 + middle;\n        long middle21\
    \ = middle20 + middle;\n        long middle22 = middle21 + middle;\n        long\
    \ middle23 = middle22 + middle;\n        long middle24 = middle23 + middle;\n\
    \        long middle25 = middle24 + middle;\n        long middle26 = middle25\
    \ + middle;\n        long middle27 = middle26 + middle;\n        long middle28\
    \ = middle27 + middle;\n        long middle29 = middle28 + middle;\n        long\
    \ middle30 = middle29 + middle;\n        long middle31 = middle30 + middle;\n\
    \        long middle32 = middle31 + middle;\n        long middle33 = middle32\
    \ + middle;\n        long middle34 = middle33 + middle;\n        long middle35\
    \ = middle34 + middle;\n        long middle36 = middle35 + middle;\n        long\
    \ middle37 = middle36 + middle;\n        long middle38 = middle37 + middle;\n\
    \        long middle39 = middle38 + middle;\n        long middle40 = middle39\
    \ + middle;\n        long middle41 = middle40 + middle;\n        long middle42\
    \ = middle41 + middle;\n        long middle43 = middle42 + middle;\n        long\
    \ middle44 = middle43 + middle;\n        long middle45 = middle44 + middle;\n\
    \        long middle46 = middle45 + middle;\n        long middle47 = middle46\
    \ + middle;\n        long middle48 = middle47 + middle;\n        long middle49\
    \ = middle48 + middle;\n        long middle50 = middle49 + middle;\n        long\
    \ middle51 = middle50 + middle;\n        long middle5", "        long prev = l.First();\n\
    \        bool isIncreasing = true;\n        foreach (long current in l.Skip(1))\
    \ {\n            if (current < prev) {\n                isIncreasing = false;\n\
    \            }\n            prev = current;\n        }\n        return isIncreasing;",
  "        long max = l.Max();\n        long min = l.Min();\n        bool isIncreasing\
    \ = (max > min);\n        if (isIncreasing) {\n            bool isDecreasing =\
    \ false;\n            foreach (long x in l) {\n                if (x > max) {\n\
    \                    isDecreasing = true;\n                    break;\n      \
    \          }\n            }\n            return isDecreasing;\n        } else\
    \ {\n            bool isDecreasing = true;\n            foreach (long x in l)\
    \ {\n                if (x < min) {\n                    isDecreasing = false;\n\
    \                    break;\n                }\n            }\n            return\
    \ isDecreasing;\n        }", "        if (l.Count < 2) return false;\n       \
    \ long first = l[0];\n        long last = l[l.Count - 1];\n        long mid =\
    \ first + (last - first) / 2;\n        bool increasing = true;\n        bool decreasing\
    \ = true;\n        foreach (long x in l.Skip(1).Take(l.Count - 1)) {\n       \
    \     if (x > mid) decreasing = false;\n            if (x < mid) increasing =\
    \ false;\n        }\n        return increasing || decreasing;", "        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        bool monotonic = true;\n \
    \       foreach (long x in l) {\n            if (x < mid) {\n                decreasing\
    \ = false;\n            } else if (x > mid) {\n                increasing = false;\n\
    \            } else {\n                monotonic = false;\n            }\n   \
    \     }\n        if (increasing && decreasing) return true;\n        if (increasing\
    \ && !decreasing) return false;\n        if (decreasing && !increasing) return\
    \ false;\n        return monotonic;", "        long first = l.First();\n     \
    \   long last = l.Last();\n        long mid = first + (last - first) / 2;\n  \
    \      bool isIncreasing = true;\n        bool isDecreasing = true;\n        bool\
    \ isMonotonic = true;\n        bool isMonotonicIncreasing = true;\n        bool\
    \ isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicDecreasingMonotonic = true;\n\
    \        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMon", "        long first = l.First();\n        long\
    \ last = l.Last();\n        bool increasing = (first < last);\n        if (increasing)\
    \ {\n            bool increasing2 = true;\n            foreach (long x in l.Skip(1))\n\
    \                if (x < first)\n                    increasing2 = false;\n  \
    \          return increasing2;\n        }\n        bool decreasing = (first >\
    \ last);\n        if (decreasing) {\n            bool decreasing2 = true;\n  \
    \          foreach (long x in l.Skip(1))\n                if (x > last)\n    \
    \                decreasing2 = false;\n            return decreasing2;\n     \
    \   }\n        return false;", "        if (l.Count == 0) return true;\n     \
    \   long max = l.Max();\n        long min = l.Min();\n        if (min > max) return\
    \ false;\n        long mid = min + (max - min) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        foreach (long x in l) {\n\
    \            if (x > mid) {\n                isIncreasing = false;\n         \
    \   } else if (x < mid) {\n                isDecreasing = false;\n           \
    \ }\n        }\n        return isIncreasing || isDecreasing;", "        long max\
    \ = l.Max();\n        long min = l.Min();\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        bool isMonotonic = true;\n       \
    \ foreach (long x in l) {\n            if (x > max) {\n                isIncreasing\
    \ = false;\n            }\n            if (x < min) {\n                isDecreasing\
    \ = false;\n            }\n            if (x == max) {\n                isMonotonic\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing\
    \ || isMonotonic;", "        if (l.Count < 2) return false;\n        long first\
    \ = l[0];\n        long last = l[l.Count - 1];\n        long mid = first + (last\
    \ - first) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        bool isMonotonic = true;\n        foreach (long x in l.Skip(1).Take(l.Count\
    \ - 1)) {\n            if (x > mid) {\n                isIncreasing = false;\n\
    \            }\n            if (x < mid) {\n                isDecreasing = false;\n\
    \            }\n            if (x == mid) {\n                isMonotonic = false;\n\
    \            }\n        }\n        return isIncreasing || isDecreasing || isMonotonic;",
  "        long first = l.First();\n        long last = l.Last();\n        long middle\
    \ = l.Count / 2;\n        bool increasing = true;\n        bool decreasing = true;\n\
    \        long middleValue = l.Count / 2;\n        long middleValue2 = l.Count\
    \ / 2;\n        long middleValue3 = l.Count / 2;\n        long middleValue4 =\
    \ l.Count / 2;\n        long middleValue5 = l.Count / 2;\n        long middleValue6\
    \ = l.Count / 2;\n        long middleValue7 = l.Count / 2;\n        long middleValue8\
    \ = l.Count / 2;\n        long middleValue9 = l.Count / 2;\n        long middleValue10\
    \ = l.Count / 2;\n        long middleValue11 = l.Count / 2;\n        long middleValue12\
    \ = l.Count / 2;\n        long middleValue13 = l.Count / 2;\n        long middleValue14\
    \ = l.Count / 2;\n        long middleValue15 = l.Count / 2;\n        long middleValue16\
    \ = l.Count / 2;\n        long middleValue17 = l.Count / 2;\n        long middleValue18\
    \ = l.Count / 2;\n        long middleValue19 = l.Count / 2;\n        long middleValue20\
    \ = l.Count / 2;\n        long middleValue21 = l.Count / 2;\n        long middleValue22\
    \ = l.Count / 2;\n        long middleValue23 = l.Count / 2;\n        long middleValue24\
    \ = l.Count / 2;\n        long middleValue25 = l.Count / 2;\n        long middleValue26\
    \ = l.Count / 2;\n        long middleValue27 = l.Count / 2;\n        long middleValue28\
    \ = l.Count / 2;\n        long middleValue29 = l.Count / 2;\n        long middleValue30\
    \ = l.Count / 2;\n        long middleValue31 = l.Count / 2;\n        long middleValue32\
    \ = l.Count / 2;\n        long middleValue33 = l.Count / 2;\n        long middleValue34\
    \ = l.Count / 2;\n        long middleValue35 = l.Count / 2;\n        long middleValue36\
    \ = l.Count / 2;\n        long middleValue37 = l.Count / 2;\n        long middleValue38\
    \ = l.Count / 2;\n        long middleValue39 = l.Count / 2;\n        long middleValue40\
    \ = l.Count / 2;\n        long middleValue41 = l.Count / 2;\n        long middleValue42\
    \ = l.Count / 2;\n        long middleValue43 = l.Count / 2;\n        long middleValue44\
    \ = l.Count / 2;\n        long middleValue", "        long max = l.Max();\n  \
    \      long min = l.Min();\n        if (min > max) {\n            long tmp = min;\n\
    \            min = max;\n            max = tmp;\n        }\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        long curr = min;\n     \
    \   long next = max;\n        while (curr < next) {\n            isIncreasing\
    \ &= (curr < next);\n            isDecreasing &= (curr > next);\n            long\
    \ mid = curr + ((next - curr) / 2);\n            if (mid > curr) {\n         \
    \       curr = mid;\n            } else {\n                next = mid;\n     \
    \       }\n        }\n        return isIncreasing || isDecreasing;", "       \
    \ if (l.Count == 0) return true;\n        long first = l[0];\n        long last\
    \ = l[l-1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        bool isMonotonic = true;\n\
    \        bool isMonotonicIncreasing = true;\n        bool isMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            long current = l[i];\n            if\
    \ (current < mid) {\n                isMonotonic = false;\n                isMonotonicIncreasing\
    \ = false;\n                isMonotonicDecreasing = false;\n                isMonotonicIncreasingDecreasing\
    \ = false;\n            } else if (current > mid) {\n                isMonotonic\
    \ = false;\n                isMonotonicIncreasing = false;\n                isMonotonicDecreasing\
    \ = false;\n                isMonotonicIncreasingDecreasing = false;\n       \
    \     } else if (current == mid) {\n                isMonotonic = false;\n   \
    \             isMonotonicIncreasing = false;\n                isMonotonicDecreasing\
    \ = false;\n                isMonotonicIncreasingDecreasing = false;\n       \
    \     } else if (current < first) {\n                isMonotonic = false;\n  \
    \              isMonotonicIncreasing = false;\n                isMonotonicDecreasing\
    \ = false;\n                isMonotonicIncreasingDecreasing = false;\n       \
    \     } else if (current > last) {\n                isMonotonic = false;\n   \
    \             isMonotonicIncreasing = false;\n                isMonotonicDecreasing\
    \ = false;\n                isMonotonicIncreasingDecreasing = false;\n       \
    \     } else if (current < mid) {\n                isMonotonicIncreasing = false;\n\
    \                isMonotonicDecreasing = false;\n                isMonotonicIncreasingDecreasing\
    \ = false;\n            } else if (current > mid) {\n                isMonotonicIncreasing\
    \ = false;\n                isMonotonicDecreasing = false;\n                isMonotonicIncreasingDecreasing\
    \ = false;\n            } else if (current < first) {\n                isMonotonicIncreasingDecreasing\
    \ = false;\n            } else if (current > last) {\n                isMonotonicIncreasingDecreasing\
    \ = false;\n            }\n            if (isMonotonic) {\n                isMonotonicIncreasing\
    \ = true;\n                isMonotonicDecreasing = true;\n                isMonotonicIncreasingDecre",
  "        long max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  if (max < min) {\n            isIncreasing = false;\n            isDecreasing\
    \ = false;\n        }\n        else {\n            long diff = max - min;\n  \
    \          if (diff < 0)\n                isIncreasing = false;\n            else\
    \ if (diff > 0)\n                isDecreasing = false;\n            else\n   \
    \             isIncreasing = true;\n        }\n        if (mid < min)\n      \
    \      isIncreasing = false;\n        if (mid > max)\n            isDecreasing\
    \ = false;\n        return isIncreasing || isDecreasing;", "        long max =\
    \ l.Max();\n        long min = l.Min();\n        long mid = (max + min) / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  bool isMonotonic = true;\n        foreach (long x in l) {\n            if (x\
    \ > mid) {\n                isIncreasing = false;\n            }\n           \
    \ if (x < mid) {\n                isDecreasing = false;\n            }\n     \
    \       if (x == mid) {\n                isMonotonic = false;\n            }\n\
    \        }\n        if (isIncreasing && isDecreasing && isMonotonic) {\n     \
    \       return true;\n        }\n        return false;", "        if (l.Count\
    \ < 2) return true;\n        long prev = l[0];\n        long current = l[1];\n\
    \        bool increasing = true;\n        for (int i = 2; i < l.Count; i++) {\n\
    \            long next = l[i];\n            if (current < next) {\n          \
    \      increasing = false;\n                break;\n            }\n          \
    \  current = next;\n        }\n        return increasing || (current == prev);",
  "        long max = l.Max();\n        long min = l.Min();\n        if (min > max)\
    \ {\n            return false;\n        }\n        long mid = min + (max - min)\
    \ / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        foreach (long x in l) {\n            if (x > mid) {\n               \
    \ isIncreasing = false;\n            }\n            if (x < mid) {\n         \
    \       isDecreasing = false;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing;"]
stop_tokens:
- "\n    }\n"
