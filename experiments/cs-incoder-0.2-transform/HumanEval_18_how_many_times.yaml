name: HumanEval_18_how_many_times
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Find how many times a given substring can be found in the original\
  \ string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n  \
  \  // (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>>\
  \ HowManyTimes((\"aaaa\"), (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string\
  \ str, string substring) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
  \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) ==\
  \ (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
  \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
  }\n"
completions: ["        long count = 0;\n        long start = 0;\n        long end\
    \ = 0;\n        long length = 0;\n        long index = 0;\n        bool found\
    \ = false;\n        do {\n            index = str.IndexOf(substring, start);\n\
    \            if (index == -1) {\n                end = str.Length;\n         \
    \   } else {\n                end = index + 1;\n            }\n            length\
    \ = (end - start);\n            found = true;\n            count += length;\n\
    \            start = end;\n        } while (found && index < str.Length);\n  \
    \      return count;", "        long count = 0;\n        foreach (char c in substring)\
    \ {\n            if (str.Contains(c)) {\n                count++;\n          \
    \  }\n        }\n        return count;", "        long count = 0;\n        foreach\
    \ (char c in substring) {\n            count += str.IndexOf(c, StringComparison.OrdinalIgnoreCase)\
    \ >= 0 ? 1 : 0;\n        }\n        return count;", "        long count = 0;\n\
    \        foreach (char c in substring) {\n            count += str.IndexOf(c,\
    \ StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n        return\
    \ count;", "        long count = 0;\n        foreach (char c in str) {\n     \
    \       if (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,\
    \ str.Length - 1), substring);\n            }\n            if (c == substring[substring.Length\
    \ - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length -\
    \ 1), substring);\n            }\n        }\n        return count;", "       \
    \ long count = 0;\n        foreach (char c in substring) {\n            count\
    \ += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n      \
    \  }\n        return count;", "        long count = 0;\n        foreach (char\
    \ c in str) {\n            if (c == substring[0]) {\n                count +=\
    \ HowManyTimes(str.Substring(1, str.Length - 1), substring);\n            }\n\
    \            else if (c == substring[substring.Length - 1]) {\n              \
    \  count += HowManyTimes(str.Substring(0, str.Length - 1), substring);\n     \
    \       }\n            else {\n                count += HowManyTimes(str.Substring(0,\
    \ str.Length - 1), substring) + HowManyTimes(str, substring);\n            }\n\
    \        }\n        return count;", "        long count = 0;\n        foreach\
    \ (char c in str) {\n            if (c == substring[0]) {\n                count\
    \ += HowManyTimes(str.Substring(1, str.Length - 1), substring);\n            }\n\
    \            else if (c == substring[substring.Length - 1]) {\n              \
    \  count += HowManyTimes(str.Substring(0, str.Length - 1), substring);\n     \
    \       }\n            else {\n                count += HowManyTimes(str.Substring(0,\
    \ str.Length - 1), substring) + HowManyTimes(str, substring);\n            }\n\
    \        }\n        return count;", "        long count = 0;\n        foreach\
    \ (char c in str) {\n            if (c == substring[0]) {\n                count\
    \ += HowManyTimes(str.Substring(1, str.Length - 1), substring);\n            }\n\
    \            else if (c == substring[substring.Length - 1]) {\n              \
    \  count += HowManyTimes(str.Substring(0, str.Length - 1), substring);\n     \
    \       }\n            else {\n                count += HowManyTimes(str.Substring(0,\
    \ str.Length - 1), substring) + HowManyTimes(str.Substring(1, str.Length - 1),\
    \ substring);\n            }\n        }\n        return count;", "        long\
    \ count = 0;\n        long start = 0;\n        long end = 0;\n        long len\
    \ = 0;\n        long len2 = 0;\n        long len3 = 0;\n        long len4 = 0;\n\
    \        long len5 = 0;\n        long len6 = 0;\n        long len7 = 0;\n    \
    \    long len8 = 0;\n        long len9 = 0;\n        long len10 = 0;\n       \
    \ long len11 = 0;\n        long len12 = 0;\n        long len13 = 0;\n        long\
    \ len14 = 0;\n        long len15 = 0;\n        long len16 = 0;\n        long len17\
    \ = 0;\n        long len18 = 0;\n        long len19 = 0;\n        long len20 =\
    \ 0;\n        long len21 = 0;\n        long len22 = 0;\n        long len23 = 0;\n\
    \        long len24 = 0;\n        long len25 = 0;\n        long len26 = 0;\n \
    \       long len27 = 0;\n        long len28 = 0;\n        long len29 = 0;\n  \
    \      long len30 = 0;\n        long len31 = 0;\n        long len32 = 0;\n   \
    \     long len33 = 0;\n        long len34 = 0;\n        long len35 = 0;\n    \
    \    long len36 = 0;\n        long len37 = 0;\n        long len38 = 0;\n     \
    \   long len39 = 0;\n        long len40 = 0;\n        long len41 = 0;\n      \
    \  long len42 = 0;\n        long len43 = 0;\n        long len44 = 0;\n       \
    \ long len45 = 0;\n        long len46 = 0;\n        long len47 = 0;\n        long\
    \ len48 = 0;\n        long len49 = 0;\n        long len50 = 0;\n        long len51\
    \ = 0;\n        long len52 = 0;\n        long len53 = 0;\n        long len54 =\
    \ 0;\n        long len55 = 0;\n        long len56 = 0;\n        long len57 = 0;\n\
    \        long len58 = 0;\n        long len59 = 0;\n        long len60 = 0;\n \
    \       long len61 = 0;\n        long len62 = 0;\n        long len63 = 0;\n  \
    \      long len64 = 0;\n        long len65 = 0;\n        long len66 = 0;\n   \
    \     long len67 = 0;\n        long len68 = 0;\n        long len69 = 0;\n    \
    \    long len70 = 0;\n        long len71 = 0;\n        long len72 = 0;\n     \
    \   long len73 = 0;\n        long len74 = 0;\n        long len75 = 0;\n      \
    \  long len76 = 0;\n        long len77 = 0;\n        long len78 = 0;\n       \
    \ long len79 = 0;\n        long len80 = 0;\n        long len81 = 0;\n        long\
    \ len82 = 0;\n        long len83 = 0;\n        long len84 = 0;", "        long\
    \ count = 0;\n        foreach (char c in substring) {\n            if (str.Contains(c))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        long count = 0;\n        foreach (char c in str) {\n            if (c ==\
    \ substring[0]) {\n                count += HowManyTimes(str.Substring(1, str.Length\
    \ - 1), substring);\n            }\n        }\n        return count;", "     \
    \   long count = 0;\n        foreach (char c in substring) {\n            count\
    \ += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n      \
    \  }\n        return count;", "        long count = 0;\n        foreach (char\
    \ c in str) {\n            if (c == substring[0]) {\n                count +=\
    \ HowManyTimes(str.Substring(1, str.Length - 1), substring);\n            }\n\
    \            else if (c == substring[1]) {\n                count += HowManyTimes(str.Substring(0,\
    \ str.Length - 1), substring);\n            }\n            else if (c == substring[2])\
    \ {\n                count += HowManyTimes(str.Substring(0, str.Length - 1), substring);\n\
    \            }\n        }\n        return count;", "        long count = 0;\n\
    \        foreach (char c in substring) {\n            count += str.IndexOf(c,\
    \ StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n        return\
    \ count;", "        long count = 0;\n        foreach (char c in substring) {\n\
    \            count += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0\
    \ ? 1 : 0;\n        }\n        return count;", "        long count = 0;\n    \
    \    foreach (char c in str) {\n            if (c == substring[0]) {\n       \
    \         count += HowManyTimes(str.Substring(1, str.Length - 1), substring);\n\
    \            }\n        }\n        return count;", "        long count = 0;\n\
    \        foreach (char c in substring) {\n            count += str.IndexOf(c,\
    \ StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n        return\
    \ count;", "        long count = 0;\n        long start = 0;\n        long end\
    \ = 0;\n        long length = 0;\n        bool found = false;\n        bool startFound\
    \ = false;\n        bool endFound = false;\n        bool lengthFound = false;\n\
    \        bool foundStartFound = false;\n        bool foundEndFound = false;\n\
    \        bool foundLengthFound = false;\n        bool foundStartEndFound = false;\n\
    \        bool foundStartLengthFound = false;\n        bool foundEndLengthFound\
    \ = false;\n        bool foundLengthStartFound = false;\n        bool foundLengthEndFound\
    \ = false;\n        bool foundStartLengthEndFound = false;\n        bool foundEndStartFound\
    \ = false;\n        bool foundEndEndFound = false;\n        bool foundLengthLengthFound\
    \ = false;\n        bool foundStartStartFound = false;\n        bool foundStartEndFound\
    \ = false;\n        bool foundEndLengthFound = false;\n        bool foundEndStartFound\
    \ = false;\n        bool foundLengthStartFound = false;\n        bool foundLengthEndFound\
    \ = false;\n        bool foundStartLengthLengthFound = false;\n        bool foundEndEndFound\
    \ = false;\n        bool foundStartStartFound = false;\n        bool foundStartLengthFound\
    \ = false;\n        bool foundEndLengthFound = false;\n        bool foundStartLengthEndFound\
    \ = false;\n        bool foundEndStartFound = false;\n        bool foundLengthLengthFound\
    \ = false;\n        bool foundStartStartFound = false;\n        bool foundStartEndFound\
    \ = false;\n        bool foundEndLengthFound = false;\n        bool foundStartLengthEndFound\
    \ = false;\n        bool foundEndStartFound = false;\n        bool foundLengthLengthFound\
    \ = false;\n        bool foundStartStartFound = false;\n        bool foundStartEndFound\
    \ = false;\n        bool foundEndLengthFound = false;\n        bool foundStartLengthEndFound\
    \ = false;\n        bool foundEndStartFound = false;\n        bool foundLengthLengthFound\
    \ = false;\n        bool foundStartStartFound = false;\n        bool foundStartEndFound\
    \ = false;\n        bool foundEndLengthFound = false;\n        bool foundStartLengthEndFound\
    \ = false;\n        bool foundEndStartFound = false;\n        bool foundLengthLengthFound\
    \ = false;\n        bool foundStartStartFound = false;\n        bool foundStartEndFound\
    \ = false;\n        bool foundEndLengthFound = false;\n        bool foundStartLengthEndFound\
    \ = false;\n        bool foundEndStartFound = false;\n        bool foundLengthLengthFound\
    \ = false;\n        bool foundStartStartFound = false;\n        bool foundStartEndFound\
    \ = false;\n        bool foundEndLengthFound = false;\n        bool foundStartLengthEndFound\
    \ = false;\n        bool foundEndStartFound = false;\n        bool foundLengthLengthFound\
    \ = false;\n        bool foundStartStartFound = false;\n        bool foundStartEndFound\
    \ = false;\n        ", "        long count = 0;\n        foreach (char c in str)\
    \ {\n            if (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,\
    \ str.Length - 1), substring);\n            }\n            if (c == substring[substring.Length\
    \ - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length -\
    \ 1), substring);\n            }\n        }\n        return count;"]
stop_tokens:
- "\n    }\n"
