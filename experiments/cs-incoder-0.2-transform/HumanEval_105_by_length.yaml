name: HumanEval_105_by_length
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given an array of integers, sort the integers that are between\
  \ 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each\
  \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
  , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    //\
  \ >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L,\
  \ (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"\
  Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\"\
  , (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the array is empty,\
  \ return an empty array:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n\
  \    // If the array has any strange number ignore it:\n    // >>> ByLength((new\
  \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new\
  \ string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long>\
  \ arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
  \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
  \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
  , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
  Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
  \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
  \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
  }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
  \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
  , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
  \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
  Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
completions: ["        if (arr.Count == 0) return new List<string>();\n        List<string>\
    \ result = new List<string>();\n        long max = arr.Max();\n        long min\
    \ = arr.Min();\n        long digit = max - min;\n        long tens = digit / 10;\n\
    \        long ones = digit % 10;\n        string one = GetName(ones);\n      \
    \  string ten = GetName(tens);\n        string tens = GetName(tens);\n       \
    \ string ones = GetName(ones);\n        string ten = GetName(ten);\n        string\
    \ tens = GetName(tens);\n        string one = GetName(one);\n        string ten\
    \ = GetName(ten);\n        string tens = GetName(tens);\n        string ones =\
    \ GetName(ones);\n        string ten = GetName(ten);\n        string tens = GetName(tens);\n\
    \        string one = GetName(one);\n        string ten = GetName(ten);\n    \
    \    string tens = GetName(tens);\n        string ones = GetName(ones);\n    \
    \    string ten = GetName(ten);\n        string tens = GetName(tens);\n      \
    \  string one = GetName(one);\n        string ten = GetName(ten);\n        string\
    \ tens = GetName(tens);\n        string ones = GetName(ones);\n        string\
    \ ten = GetName(ten);\n        string tens = GetName(tens);\n        string one\
    \ = GetName(one);\n        string ten = GetName(ten);\n        string tens = GetName(tens);\n\
    \        string ones = GetName(ones);\n        string ten = GetName(ten);\n  \
    \      string tens = GetName(tens);\n        string one = GetName(one);\n    \
    \    string ten = GetName(ten);\n        string tens = GetName(tens);\n      \
    \  string ones = GetName(ones);\n        string ten = GetName(ten);\n        string\
    \ tens = GetName(tens);\n        string one = GetName(one);\n        string ten\
    \ = GetName(ten);\n        string tens = GetName(tens);\n        string ones =\
    \ GetName(ones);\n        string ten = GetName(ten);\n        string tens = GetName(tens);\n\
    \        string one = GetName(one);\n        string ten = GetName(ten);\n    \
    \    string tens = GetName(tens);\n        string ones = GetName(ones);\n    \
    \    string ten = GetName(ten);\n        string tens = GetName(tens);\n      \
    \  string one = GetName(one);\n        string ten = GetName(ten);\n        string\
    \ ten", "        if (arr.Count == 0) return new List<string>();\n        long\
    \ max = arr.Max();\n        long min = arr.Min();\n        long range = (max -\
    \ min) + 1;\n        List<string> result = new List<string>();\n        foreach\
    \ (long n in arr) {\n            if (n >= 1 && n <= 9) {\n                string\
    \ name = GetName(n);\n                result.Add(name);\n            }\n     \
    \   }\n        List<long> reversed = new List<long>();\n        foreach (string\
    \ name in result) {\n            reversed.Add(GetNumber(name));\n        }\n \
    \       foreach (long n in reversed) {\n            string name = GetName(n);\n\
    \            result.Add(name);\n        }\n        return result;", "        if\
    \ (arr.Count == 0) {\n            return new List<string>();\n        }\n    \
    \    List<string> result = new List<string>();\n        long max = arr.Max();\n\
    \        long min = arr.Min();\n        long range = max - min;\n        long\
    \ ten = range / 10;\n        long ones = range % 10;\n        long tens = ten\
    \ * 10;\n        long ones = ones * 10;\n        long tens = tens * 10;\n    \
    \    long tens = tens * 10;\n        long tens = tens * 10;\n        long tens\
    \ = tens * 10;\n        long tens = tens * 10;\n        long tens = tens * 10;\n\
    \        long tens = tens * 10;\n        long tens = tens * 10;\n        long\
    \ tens = tens * 10;\n        long tens = tens * 10;\n        long tens = tens\
    \ * 10;\n        long tens = tens * 10;\n        long tens = tens * 10;\n    \
    \    long tens = tens * 10;\n        long tens = tens * 10;\n        long tens\
    \ = tens * 10;\n        long tens = tens * 10;\n        long tens = tens * 10;\n\
    \        long tens = tens * 10;\n        long tens = tens * 10;\n        long\
    \ tens = tens * 10;\n        long tens = tens * 10;\n        long tens = tens\
    \ * 10;\n        long tens = tens * 10;\n        long tens = tens * 10;\n    \
    \    long tens = tens * 10;\n        long tens = tens * 10;\n        long tens\
    \ = tens * 10;\n        long tens = tens * 10;\n        long tens = tens * 10;\n\
    \        long tens = tens * 10;\n        long tens = tens * 10;\n        long\
    \ tens = tens * 10;\n        long tens = tens * 10;\n        long tens = tens\
    \ * 10;\n        long tens = tens * 10;\n        long tens = tens * 10;\n    \
    \    long tens = tens * 10;\n        long tens = tens * 10;\n        long tens\
    \ = tens * 10;\n        long tens = tens * 10;\n        long tens = tens * 10;\n\
    \        long tens = tens * 10;\n        long tens = tens * 10;\n        long\
    \ tens = tens * 10;\n        long tens = tens * 10;\n        long tens = tens\
    \ * 10;\n        long tens = tens * 10;\n        long tens = tens * 10;\n    \
    \    long tens = tens * 10;\n        long tens = tens * 10;\n        long tens\
    \ = tens * 10;\n        long tens = tens * 10;\n        long tens = tens * 10;\n\
    \        long ten", "        if (arr.Count == 0) {\n            return new List<string>();\n\
    \        }\n        List<string> result = new List<string>();\n        long maxValue\
    \ = arr.Max();\n        long minValue = arr.Min();\n        long maxDigit = maxValue\
    \ / 10;\n        long minDigit = minValue / 10;\n        long digit;\n       \
    \ string name;\n        for (long i = 0; i < arr.Count; i++) {\n            digit\
    \ = arr[i];\n            if (digit < minDigit) {\n                result.Add(string.Empty);\n\
    \                continue;\n            }\n            if (digit > maxDigit) {\n\
    \                result.Add(string.Empty);\n                continue;\n      \
    \      }\n            name = GetName(digit);\n            if (string.IsNullOrEmpty(name))\
    \ {\n                result.Add(string.Empty);\n                continue;\n  \
    \          }\n            result.Add(name);\n        }\n        return result;",
  "        if (arr.Count == 0)\n            return new List<string>();\n        List<long>\
    \ reversed = arr.Reverse();\n        List<string> result = new List<string>();\n\
    \        foreach (long i in reversed) {\n            string name = GetName(i);\n\
    \            if (name != null)\n                result.Add(name);\n        }\n\
    \        return result;", "        if (arr.Count == 0)\n            return new\
    \ List<string>();\n        List<long> reversed = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n >= 1 && n <= 9)\n                reversed.Add(n);\n\
    \            else\n                break;\n        }\n        List<string> result\
    \ = new List<string>();\n        foreach (long n in reversed) {\n            string\
    \ name = GetName(n);\n            result.Add(name);\n        }\n        return\
    \ result;", "        if (arr.Count == 0)\n            return new List<string>();\n\
    \        List<string> result = new List<string>();\n        long maxValue = arr.Max();\n\
    \        long minValue = arr.Min();\n        long maxDigit = maxValue / 10;\n\
    \        long minDigit = minValue / 10;\n        long digit;\n        string name;\n\
    \        bool isDigit;\n        long temp;\n        long temp2;\n        long\
    \ temp3;\n        long temp4;\n        long temp5;\n        long temp6;\n    \
    \    long temp7;\n        long temp8;\n        long temp9;\n        long temp10;\n\
    \        long temp11;\n        long temp12;\n        long temp13;\n        long\
    \ temp14;\n        long temp15;\n        long temp16;\n        long temp17;\n\
    \        long temp18;\n        long temp19;\n        long temp20;\n        long\
    \ temp21;\n        long temp22;\n        long temp23;\n        long temp24;\n\
    \        long temp25;\n        long temp26;\n        long temp27;\n        long\
    \ temp28;\n        long temp29;\n        long temp30;\n        long temp31;\n\
    \        long temp32;\n        long temp33;\n        long temp34;\n        long\
    \ temp35;\n        long temp36;\n        long temp37;\n        long temp38;\n\
    \        long temp39;\n        long temp40;\n        long temp41;\n        long\
    \ temp42;\n        long temp43;\n        long temp44;\n        long temp45;\n\
    \        long temp46;\n        long temp47;\n        long temp48;\n        long\
    \ temp49;\n        long temp50;\n        long temp51;\n        long temp52;\n\
    \        long temp53;\n        long temp54;\n        long temp55;\n        long\
    \ temp56;\n        long temp57;\n        long temp58;\n        long temp59;\n\
    \        long temp60;\n        long temp61;\n        long temp62;\n        long\
    \ temp63;\n        long temp64;\n        long temp65;\n        long temp66;\n\
    \        long temp67;\n        long temp68;\n        long temp69;\n        long\
    \ temp70;\n        long temp71;\n        long temp72;\n        long temp73;\n\
    \        long temp74;\n        long temp75;\n        long temp76;\n        long\
    \ temp", "        if (arr.Count == 0)\n            return new List<string>();\n\
    \        List<string> result = new List<string>();\n        List<long> sortedArr\
    \ = arr.OrderBy(x => x).ToList();\n        string one = \"One\";\n        string\
    \ two = \"Two\";\n        string three = \"Three\";\n        string four = \"\
    Four\";\n        string five = \"Five\";\n        string six = \"Six\";\n    \
    \    string seven = \"Seven\";\n        string eight = \"Eight\";\n        string\
    \ nine = \"Nine\";\n        string ten = \"Ten\";\n        string hundred = \"\
    Hundred\";\n        string thousand = \"Thousand\";\n        string million =\
    \ \"Million\";\n        string billion = \"Billion\";\n        string trillion\
    \ = \"Trillion\";\n        string quadrillion = \"Quadrillion\";\n        string\
    \ quintillion = \"Quintillion\";\n        string sextillion = \"Sextillion\";\n\
    \        string septillion = \"Septillion\";\n        string octillion = \"Octillion\"\
    ;\n        string nonillion = \"Nonillion\";\n        string decillion = \"Decillion\"\
    ;\n        string undecillion = \"Undecillion\";\n        string duodecillion\
    \ = \"Duodecillion\";\n        string tredecillion = \"Tredecillion\";\n     \
    \   string quattuordecillion = \"Quattuordecillion\";\n        string quindecillion\
    \ = \"Quindecillion\";\n        string sexdecillion = \"Sexdecillion\";\n    \
    \    string septendecillion = \"Septendecillion\";\n        string octodecillion\
    \ = \"Octodecillion\";\n        string novemdecillion = \"Novemdecillion\";\n\
    \        string vigintillion = \"Vigintillion\";\n        string unvigintillion\
    \ = \"Unvigintillion\";\n        string duovigintillion = \"Duovigintillion\"\
    ;\n        string trevigintillion = \"Trevigintillion\";\n        string quattuorvigintillion\
    \ = \"Quattuorvigintillion\";\n        string quinvigintillion = \"Quinvigintillion\"\
    ;\n        string sexvigintillion = \"", "        if (arr.Count == 0)\n      \
    \      return new List<string>();\n        var result = new List<string>();\n\
    \        var max = (long)Math.Pow(10, arr.Count);\n        var min = max - 1;\n\
    \        var digits = new Dictionary<long, string>();\n        foreach (var n\
    \ in arr)\n            digits[n - min] = names[n - min];\n        var reversed\
    \ = new long[arr.Count];\n        for (int i = 0; i < arr.Count; i++)\n      \
    \      reversed[arr.Count - 1 - i] = arr[i];\n        for (int i = 0; i < arr.Count;\
    \ i++)\n            result.Add(digits[reversed[i]]);\n        return result;",
  "        if (arr.Count == 0)\n            return new List<string>();\n        List<string>\
    \ result = new List<string>();\n        long max = arr.Max();\n        long min\
    \ = arr.Min();\n        long range = (max - min) + 1;\n        long digit = max\
    \ - min;\n        long tens = range / 10;\n        long ones = range % 10;\n \
    \       long tensDigit = tens / 10;\n        long onesDigit = ones % 10;\n   \
    \     string tensName = GetName((long)tensDigit);\n        string onesName = GetName((long)onesDigit);\n\
    \        string tensNameReverse = tensName.Reverse();\n        string onesNameReverse\
    \ = onesName.Reverse();\n        string tensNameReverse2 = tensNameReverse.Replace(\"\
    One\", \"Eight\");\n        string onesNameReverse2 = onesNameReverse.Replace(\"\
    One\", \"Eight\");\n        string tensNameReverse3 = tensNameReverse2.Replace(\"\
    Two\", \"Five\");\n        string onesNameReverse3 = onesNameReverse2.Replace(\"\
    Two\", \"Five\");\n        string tensNameReverse4 = tensNameReverse3.Replace(\"\
    Three\", \"Four\");\n        string onesNameReverse4 = onesNameReverse3.Replace(\"\
    Three\", \"Four\");\n        string tensNameReverse5 = tensNameReverse4.Replace(\"\
    Four\", \"Three\");\n        string onesNameReverse5 = onesNameReverse4.Replace(\"\
    Four\", \"Three\");\n        string tensNameReverse6 = tensNameReverse5.Replace(\"\
    Five\", \"Two\");\n        string onesNameReverse6 = onesNameReverse5.Replace(\"\
    Five\", \"Two\");\n        string tensNameReverse7 = tensNameReverse6.Replace(\"\
    Six\", \"One\");\n        string onesNameReverse7 = onesNameReverse6.Replace(\"\
    Six\", \"One\");\n        string tensNameReverse8 = tensNameReverse7.Replace(\"\
    Seven\", \"Zero\");\n        string onesNameReverse8 = onesNameReverse7.Replace(\"\
    Seven\", \"Zero\");\n        string tensNameReverse9 = tensNameReverse8.Replace(\"\
    Eight\", \"One\");\n        string onesNameReverse9 = onesNameReverse8.Replace(\"\
    Eight\", \"One\");\n        string tensNameReverse10 = tensNameReverse9.Replace(\"\
    Nine\", \"Zero\");\n        string onesNameReverse10 = onesNameReverse9.Replace(\"\
    Nine\", \"Zero\");\n        string tensNameReverse11 = tensNameReverse10.Replace",
  "        if (arr.Count == 0) return new List<string>();\n        var result = new\
    \ List<string>();\n        var ones = new List<long>();\n        var tens = new\
    \ List<long>();\n        var hundreds = new List<long>();\n        var thousands\
    \ = new List<long>();\n        var tenThousands = new List<long>();\n        var\
    \ oneThousands = new List<long>();\n        var tenThousandsOnes = new List<long>();\n\
    \        var oneThousandsOnes = new List<long>();\n        var tenThousandsOnesOnes\
    \ = new List<long>();\n        var oneThousandsOnesOnes = new List<long>();\n\
    \        var tenThousandsOnesOnesOnes = new List<long>();\n        var oneThousandsOnesOnesOnes\
    \ = new List<long>();\n        var tenThousandsOnesOnesOnesOnes = new List<long>();\n\
    \        var oneThousandsOnesOnesOnesOnes = new List<long>();\n        var tenThousandsOnesOnesOnesOnesOnes\
    \ = new List<long>();\n        var oneThousandsOnesOnesOnesOnesOnes = new List<long>();\n\
    \        var tenThousandsOnesOnesOnesOnesOnesOnes = new List<long>();\n      \
    \  var oneThousandsOnesOnesOnesOnesOnesOnes = new List<long>();\n        var tenThousandsOnesOnesOnesOnesOnesOnesOnes\
    \ = new List<long>();\n        var oneThousandsOnesOnesOnesOnesOnesOnesOnes =\
    \ new List<long>();\n        var tenThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = new List<long>();\n        var oneThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = new List<long>();\n        var tenThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = new List<long>();\n        var oneThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = new List<long>();\n        var tenThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = new List<long>();\n        var oneThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes",
  "        if (arr.Count == 0) {\n            return new List<string>();\n       \
    \ }\n        long max = arr.Max();\n        long min = arr.Min();\n        List<long>\
    \ reversed = arr.Reverse().ToList();\n        List<string> result = new List<string>();\n\
    \        long digit;\n        string name;\n        bool isDigit;\n        bool\
    \ isName;\n        bool isReversed;\n        bool isSorted;\n        bool isReversedSorted;\n\
    \        bool isDigitSorted;\n        bool isDigitReversed;\n        bool isDigitReversedSorted;\n\
    \        bool isDigitReversedSorted;\n        bool isDigitReversedSorted;\n  \
    \      bool isDigitReversedSorted;\n        bool isDigitReversedSorted;\n    \
    \    bool isDigitReversedSorted;\n        bool isDigitReversedSorted;\n      \
    \  bool isDigitReversedSorted;\n        bool isDigitReversedSorted;\n        bool\
    \ isDigitReversedSorted;\n        bool isDigitReversedSorted;\n        bool isDigitReversedSorted;\n\
    \        bool isDigitReversedSorted;\n        bool isDigitReversedSorted;\n  \
    \      bool isDigitReversedSorted;\n        bool isDigitReversedSorted;\n    \
    \    bool isDigitReversedSorted;\n        bool isDigitReversedSorted;\n      \
    \  bool isDigitReversedSorted;\n        bool isDigitReversedSorted;\n        bool\
    \ isDigitReversedSorted;\n        bool isDigitReversedSorted;\n        bool isDigitReversedSorted;\n\
    \        bool isDigitReversedSorted;\n        bool isDigitReversedSorted;\n  \
    \      bool isDigitReversedSorted;\n        bool isDigitReversedSorted;\n    \
    \    bool isDigitReversedSorted;\n        bool isDigitReversedSorted;\n      \
    \  bool isDigitReversedSorted;\n        bool isDigitReversedSorted;\n        bool\
    \ isDigitReversedSorted;\n        bool isDigitReversedSorted;\n        bool isDigitReversedSorted;\n\
    \        bool isDigitReversedSorted;\n        bool isDigitReversedSorted;\n  \
    \      bool isDigitReversedSorted;\n        bool isDigitReversedSorted;\n    \
    \    bool isDigitReversedSorted;\n        bool isDigitReversedSorted;\n      \
    \  bool isDigitReversedSorted;\n        bool isDigitReversedSorted;\n        bool\
    \ isDigitReversedSorted;\n        bool isDigitReversedSorted;\n        bool isDigitReversedSorted;\n\
    \        bool ", "        if (arr.Count == 0)\n            return new List<string>();\n\
    \        var result = new List<string>();\n        var ones = arr.Where(x => x\
    \ == 1L).ToList();\n        var tens = arr.Where(x => x == 10L).ToList();\n  \
    \      var hundreds = arr.Where(x => x == 100L).ToList();\n        var thousands\
    \ = arr.Where(x => x == 1000L).ToList();\n        var millions = arr.Where(x =>\
    \ x == 1000000L).ToList();\n        var billions = arr.Where(x => x == 1000000000L).ToList();\n\
    \        var trillions = arr.Where(x => x == 1000000000000L).ToList();\n     \
    \   var quadrillions = arr.Where(x => x == 1000000000000000L).ToList();\n    \
    \    var quintillions = arr.Where(x => x == 1000000000000000000L).ToList();\n\
    \        var sextillions = arr.Where(x => x == 1000000000000000000000L).ToList();\n\
    \        var septillions = arr.Where(x => x == 1000000000000000000000000L).ToList();\n\
    \        var octillions = arr.Where(x => x == 100000000000000000000000000L).ToList();\n\
    \        var nonillions = arr.Where(x => x == 1000000000000000000000000000000L).ToList();\n\
    \        var one = ones[0];\n        var ten = tens[0];\n        var hundred =\
    \ hundreds[0];\n        var thousand = thousands[0];\n        var million = millions[0];\n\
    \        var billion = billions[0];\n        var trillion = trillions[0];\n  \
    \      var quadrillion = quadrillions[0];\n        var quintillion = quintillions[0];\n\
    \        var sextillion = sextillions[0];\n        var septillion = septillions[0];\n\
    \        var octillion = octillions[0];\n        var nonillion = nonillions[0];\n\
    \        var tenThousand = ten * 1000;\n        var hundredThousand = hundred\
    \ * 1000;\n        var thousandThousand = thousand * 1000;\n        var millionThousand\
    \ = million * 1000;\n        var billionThousand = billion * 1000;\n        var\
    \ trillionThousand = trillion * 1000;\n        var quadrillionThousand = quadrillion\
    \ * 1000;\n        var quintillionThousand = quintillion * 1000;\n        var\
    \ sextillionThousand = sextil", "        if (arr.Count == 0) {\n            return\
    \ new List<string>();\n        }\n        var result = new List<string>();\n \
    \       var maxLength = arr.Max();\n        var minLength = arr.Min();\n     \
    \   var maxDigit = maxLength / 10;\n        var minDigit = minLength / 10;\n \
    \       var maxDigitName = GetDigitName(maxDigit);\n        var minDigitName =\
    \ GetDigitName(minDigit);\n        var maxDigitIndex = GetDigitIndex(maxDigit);\n\
    \        var minDigitIndex = GetDigitIndex(minDigit);\n        var maxDigitName\
    \ = GetDigitName(maxDigit);\n        var minDigitName = GetDigitName(minDigit);\n\
    \        var maxDigitIndex = GetDigitIndex(maxDigit);\n        var minDigitIndex\
    \ = GetDigitIndex(minDigit);\n        var maxDigitName = GetDigitName(maxDigit);\n\
    \        var minDigitName = GetDigitName(minDigit);\n        var maxDigitIndex\
    \ = GetDigitIndex(maxDigit);\n        var minDigitIndex = GetDigitIndex(minDigit);\n\
    \        var maxDigitName = GetDigitName(maxDigit);\n        var minDigitName\
    \ = GetDigitName(minDigit);\n        var maxDigitIndex = GetDigitIndex(maxDigit);\n\
    \        var minDigitIndex = GetDigitIndex(minDigit);\n        var maxDigitName\
    \ = GetDigitName(maxDigit);\n        var minDigitName = GetDigitName(minDigit);\n\
    \        var maxDigitIndex = GetDigitIndex(maxDigit);\n        var minDigitIndex\
    \ = GetDigitIndex(minDigit);\n        var maxDigitName = GetDigitName(maxDigit);\n\
    \        var minDigitName = GetDigitName(minDigit);\n        var maxDigitIndex\
    \ = GetDigitIndex(maxDigit);\n        var minDigitIndex = GetDigitIndex(minDigit);\n\
    \        var maxDigitName = GetDigitName(maxDigit);\n        var minDigitName\
    \ = GetDigitName(minDigit);\n        var maxDigitIndex = GetDigitIndex(maxDigit);\n\
    \        var minDigitIndex = GetDigitIndex(minDigit);\n        var maxDigitName\
    \ = GetDigitName(maxDigit);\n        var minDigitName = GetDigitName(minDigit);\n\
    \        var maxDigitIndex = GetDigitIndex(maxDigit);\n        var minDigitIndex\
    \ = GetDigitIndex(minDigit);\n        var maxDigitName = GetDigitName(maxDigit);\n\
    \        var minDigitName = GetDigitName(minDigit);\n        var maxDigitIndex\
    \ = GetDigitIndex(maxDigit);\n        var minDigitIndex = GetDigitIndex(minDigit);\n\
    \        var maxDigitName = GetDigitName(maxDigit);\n        var minDigitName\
    \ = GetDigitName(minDigit);\n        var maxDigitIndex = GetDigitIndex(maxDigit);\n\
    \        var minDigitIndex = GetDigitIndex(minDigit);\n        var maxDigitName\
    \ = GetDigitName(maxDigit);\n        var minDigitName = GetDigitName(min", " \
    \       if (arr.Count == 0) {\n            return new List<string>();\n      \
    \  }\n        var result = new List<string>();\n        var digits = new List<int>();\n\
    \        var digitNames = new List<string>();\n        var maxDigit = arr.Max();\n\
    \        var minDigit = arr.Min();\n        var maxDigitName = digitNames.Last();\n\
    \        var minDigitName = digitNames.First();\n        var maxDigitIndex = digits.Count\
    \ - 1;\n        var minDigitIndex = digits.Count - 1;\n        var maxDigitDigit\
    \ = maxDigit % 10;\n        var minDigitDigit = minDigit % 10;\n        var maxDigitDigitName\
    \ = digitNames[maxDigitIndex];\n        var minDigitDigitName = digitNames[minDigitIndex];\n\
    \        while (maxDigit != minDigit) {\n            if (maxDigit < minDigit)\
    \ {\n                maxDigitDigit = maxDigit % 10;\n                maxDigitDigitName\
    \ = digitNames[maxDigitIndex];\n                maxDigitIndex--;\n           \
    \ }\n            if (minDigit > maxDigit) {\n                minDigitDigit = minDigit\
    \ % 10;\n                minDigitDigitName = digitNames[minDigitIndex];\n    \
    \            minDigitIndex--;\n            }\n            if (maxDigit == minDigit)\
    \ {\n                digits.Add(maxDigit);\n                digitNames.Add(maxDigitDigitName);\n\
    \                maxDigitIndex--;\n                minDigitIndex--;\n        \
    \    }\n            if (maxDigit > minDigit) {\n                digits.Add(minDigit);\n\
    \                digitNames.Add(minDigitDigitName);\n                minDigitIndex++;\n\
    \                maxDigitIndex++;\n            }\n            maxDigit = maxDigit\
    \ / 10;\n            maxDigitName = digitNames[maxDigitIndex];\n            minDigit\
    \ = minDigit / 10;\n            minDigitName = digitNames[minDigitIndex];\n  \
    \      }\n        if (maxDigit == minDigit) {\n            digits.Add(maxDigit);\n\
    \            digitNames.Add(maxDigitDigitName);\n        }\n        foreach (var\
    \ digit in digits) {\n            result.Add(digitNames[digit]);\n        }\n\
    \        return result;", "        if (arr.Count == 0) return new List<string>();\n\
    \        List<string> result = new List<string>();\n        long maxValue = arr.Max();\n\
    \        long minValue = arr.Min();\n        long maxDigit = maxValue / 10;\n\
    \        long minDigit = minValue / 10;\n        long digit;\n        string name;\n\
    \        if (minDigit == maxDigit) {\n            digit = minDigit;\n        \
    \    name = minDigit == 1 ? One.ToString() : Two.ToString();\n        }\n    \
    \    else {\n            digit = minDigit;\n            name = minDigit == 1 ?\
    \ One.ToString() : Two.ToString();\n            while (digit < maxDigit) {\n \
    \               digit++;\n                name = name + Three.ToString();\n  \
    \          }\n            digit = maxDigit;\n            name = maxDigit == 9\
    \ ? Nine.ToString() : Five.ToString();\n            while (digit > minDigit) {\n\
    \                digit--;\n                name = name + Three.ToString();\n \
    \           }\n        }\n        foreach (long num in arr) {\n            if\
    \ (num < minValue || num > maxValue) continue;\n            string s = num.ToString();\n\
    \            int index = s.IndexOf(digit);\n            if (index >= 0) {\n  \
    \              result.Add(name.Substring(0, index) + s.Substring(index + 1));\n\
    \            }\n        }\n        return result;", "        if (arr.Count ==\
    \ 0) {\n            return new List<string>();\n        }\n        var result\
    \ = new List<string>();\n        var ones = arr.Where(x => x == 1L).ToArray();\n\
    \        var tens = arr.Where(x => x == 10L).ToArray();\n        var hundreds\
    \ = arr.Where(x => x == 100L).ToArray();\n        var thousands = arr.Where(x\
    \ => x == 1000L).ToArray();\n        var millions = arr.Where(x => x == 1000000L).ToArray();\n\
    \        var billions = arr.Where(x => x == 1000000000L).ToArray();\n        var\
    \ trillions = arr.Where(x => x == 1000000000000L).ToArray();\n        var quadrillions\
    \ = arr.Where(x => x == 1000000000000000L).ToArray();\n        var quintillions\
    \ = arr.Where(x => x == 1000000000000000000L).ToArray();\n        var thousands\
    \ = arr.Where(x => x == 10000000000000000000L).ToArray();\n        var millions\
    \ = arr.Where(x => x == 1000000000000000000000L).ToArray();\n        var billions\
    \ = arr.Where(x => x == 100000000000000000000000L).ToArray();\n        var trillions\
    \ = arr.Where(x => x == 100000000000000000000000000L).ToArray();\n        var\
    \ quadrillions = arr.Where(x => x == 100000000000000000000000000000L).ToArray();\n\
    \        var quintillions = arr.Where(x => x == 10000000000000000000000000000000L).ToArray();\n\
    \        var thousands = arr.Where(x => x == 1000000000000000000000000000000000L).ToArray();\n\
    \        var millions = arr.Where(x => x == 1000000000000000000000000000000000L).ToArray();\n\
    \        var billions = arr.Where(x => x == 1000000000000000000000000000000000L).ToArray();\n\
    \        var trillions = arr.Where(x => x == 1000000000000000000000000000000000L).ToArray();\n\
    \        var quadrillions = arr.Where(x => x == 1000000000000000000000000000000000L).ToArray();\n\
    \        var quintillions = arr.Where(x => x == 1000000000000000000000000000000000L).ToArray();\n\
    \        var thousands = arr.Where(x => x == 1000000000000000000000000000000000L).ToArray();\n\
    \        var millions = arr.Where(x => x == 1000000000000000000000000000000000L).ToArray();\n\
    \        var billions = arr.Where(x => x == 1000000000000000000000000000000000L).ToArray();\n\
    \        var trillions = arr.Where(x => x == 1000000000000000000000000000000000L",
  "        if (arr.Count == 0)\n            return new List<string>();\n        var\
    \ result = new List<string>();\n        var ones = arr.Where(x => x >= 1 && x\
    \ <= 9).ToList();\n        var tens = arr.Where(x => x >= 10 && x <= 99).ToList();\n\
    \        var hundreds = arr.Where(x => x >= 100 && x <= 999).ToList();\n     \
    \   var thousands = arr.Where(x => x >= 1000 && x <= 9999).ToList();\n       \
    \ var tenThousands = arr.Where(x => x >= 10000 && x <= 99999).ToList();\n    \
    \    var oneThousands = arr.Where(x => x >= 100000 && x <= 999999).ToList();\n\
    \        var oneHundreds = arr.Where(x => x >= 1000000 && x <= 999999999).ToList();\n\
    \        var oneThousandHundreds = arr.Where(x => x >= 10000000 && x <= 99999999999).ToList();\n\
    \        var oneThousandThousandHundreds = arr.Where(x => x >= 1000000000 && x\
    \ <= 999999999999).ToList();\n        var oneThousandThousandThousandHundreds\
    \ = arr.Where(x => x >= 10000000000 && x <= 999999999999999).ToList();\n     \
    \   var oneThousandThousandThousandThousandHundreds = arr.Where(x => x >= 1000000000000\
    \ && x <= 9999999999999999).ToList();\n        var oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.Where(x => x >= 100000000000000 && x <= 9999999999999999999).ToList();\n\
    \        var oneThousandThousandThousandThousandThousandHundreds = arr.Where(x\
    \ => x >= 10000000000000000 && x <= 99999999999999999999).ToList();\n        var\
    \ oneThousandThousandThousandThousandThousandThousandHundreds = arr.Where(x =>\
    \ x >= 100000000000000000 && x <= 99999999999999999999999).ToList();\n       \
    \ var oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.Where(x\
    \ => x >= 100000000000000000 && x <= 999999999999999999999999).ToList();\n   \
    \     var oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.Where(x => x >= 100000000000000000 && x <= 999999999999999999999999999).ToList",
  "        if (arr.Count == 0) return new List<string>();\n        var result = new\
    \ List<string>();\n        var ones = arr.Where(x => x >= 1 && x <= 9).ToList();\n\
    \        var tens = arr.Where(x => x >= 10 && x <= 99).ToList();\n        var\
    \ hundreds = arr.Where(x => x >= 100 && x <= 999).ToList();\n        var thousands\
    \ = arr.Where(x => x >= 1000 && x <= 9999).ToList();\n        var millions = arr.Where(x\
    \ => x >= 10000 && x <= 99999).ToList();\n        var billions = arr.Where(x =>\
    \ x >= 100000 && x <= 999999).ToList();\n        var trillions = arr.Where(x =>\
    \ x >= 1000000 && x <= 9999999).ToList();\n        var quadrillions = arr.Where(x\
    \ => x >= 10000000 && x <= 99999999).ToList();\n        var quintillions = arr.Where(x\
    \ => x >= 100000000 && x <= 999999999).ToList();\n        var sextillions = arr.Where(x\
    \ => x >= 1000000000 && x <= 99999999999).ToList();\n        var septillions =\
    \ arr.Where(x => x >= 10000000000 && x <= 999999999999).ToList();\n        var\
    \ octillions = arr.Where(x => x >= 100000000000 && x <= 999999999999999).ToList();\n\
    \        var nonillions = arr.Where(x => x >= 1000000000000 && x <= 9999999999999999).ToList();\n\
    \        var onesAndTens = ones.Concat(tens).ToList();\n        var onesAndHundreds\
    \ = ones.Concat(onesAndTens).ToList();\n        var onesAndThousands = ones.Concat(onesAndHundreds).ToList();\n\
    \        var onesAndMillions = ones.Concat(onesAndThousands).ToList();\n     \
    \   var onesAndBillions = ones.Concat(onesAndMillions).ToList();\n        var\
    \ onesAndTrillions = ones.Concat(onesAndBillions).ToList();\n        var onesAndQuadrillions\
    \ = ones.Concat(onesAndTrillions).ToList();\n        var onesAndQuintillions =\
    \ ones.Concat(onesAndQuadrillions).ToList();\n        var onesAndSextillions =\
    \ ones.Concat(onesAndQuintillions).ToList();\n        var onesAndSeptillions =\
    \ ones.Concat(onesAndSextillions).ToList();\n        var onesAndOctillions = ones.Concat(onesAndSeptil",
  "        if (arr.Count == 0) return new List<string>();\n        long max = arr.Max();\n\
    \        long min = arr.Min();\n        long range = (max - min) + 1;\n      \
    \  List<string> result = new List<string>();\n        bool isFirst = true;\n \
    \       foreach (long n in arr) {\n            if (isFirst) {\n              \
    \  isFirst = false;\n            } else {\n                result.Add(string.Empty);\n\
    \            }\n            long digit = n / range;\n            string name =\
    \ GetName(digit);\n            result.Add(name);\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
