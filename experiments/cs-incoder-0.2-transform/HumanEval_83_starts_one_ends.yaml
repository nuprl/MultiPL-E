name: HumanEval_83_starts_one_ends
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a positive integer n, return the count of the numbers\
  \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
  \ long StartsOneEnds(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
  \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
  \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
  \ == (18000L));\n    }\n\n}\n"
completions: ["        long count = 0;\n        long digit = n;\n        while (digit\
    \ > 0) {\n            count += digit % 10;\n            digit /= 10;\n       \
    \ }\n        return count;", "        long count = 0;\n        long last = 1;\n\
    \        while (n > 0) {\n            long digit = n % 10;\n            if (digit\
    \ == 1) {\n                count++;\n            }\n            last = digit;\n\
    \            n /= 10;\n        }\n        if (last == 1) {\n            count++;\n\
    \        }\n        return count;", "        long count = 0;\n        long digit\
    \ = n;\n        while (digit > 0) {\n            count += digit % 10;\n      \
    \      digit /= 10;\n        }\n        return count;", "        long count =\
    \ 0;\n        long limit = n;\n        while (limit > 0) {\n            long digit\
    \ = limit % 10;\n            if (digit == 1) {\n                count++;\n   \
    \         }\n            limit /= 10;\n        }\n        return count;", "  \
    \      long count = 0;\n        long limit = (long)Math.Pow(10, n);\n        long\
    \ start = 1;\n        long end = 1;\n        while (start <= limit) {\n      \
    \      long temp = start;\n            while (temp < end) {\n                if\
    \ (temp % 10 == 1)\n                    count++;\n                temp++;\n  \
    \          }\n            start = end + 1;\n            end = start + 1;\n   \
    \     }\n        return count;", "        long count = 0;\n        long limit\
    \ = n;\n        while (limit > 0) {\n            long digit = limit % 10;\n  \
    \          if (digit == 1) {\n                count++;\n            }\n      \
    \      limit /= 10;\n        }\n        return count;", "        long count =\
    \ 0;\n        long limit = (long)Math.Pow(10, n);\n        long start = 1;\n \
    \       long end = 1;\n        while (start <= limit) {\n            long mid\
    \ = (start + end) / 2;\n            if (mid % 10 == 1) {\n                count++;\n\
    \                if (mid > limit) {\n                    end = mid - 1;\n    \
    \            } else {\n                    start = mid + 1;\n                }\n\
    \            } else {\n                start = mid + 1;\n            }\n     \
    \   }\n        return count;", "        long count = 0;\n        long last = 1;\n\
    \        while (n > 1) {\n            long next = (n % 10) + 1;\n            if\
    \ (next == 1) {\n                count++;\n            }\n            last = next;\n\
    \            n = n / 10;\n        }\n        return count;", "        long count\
    \ = 0;\n        long start = 1;\n        long end = 1;\n        while (n > 0)\
    \ {\n            long digit = n % 10;\n            if (digit == 1) {\n       \
    \         count++;\n            }\n            n /= 10;\n        }\n        return\
    \ count;", "        long count = 0;\n        long limit = n;\n        while (limit\
    \ > 0) {\n            long digit = limit % 10;\n            if (digit == 1)\n\
    \                count++;\n            limit = limit / 10;\n        }\n      \
    \  return count;", "        long count = 0;\n        long start = 1;\n       \
    \ long end = 1;\n        while (n > 0) {\n            long digit = n % 10;\n \
    \           if (digit == 1) {\n                count++;\n            }\n     \
    \       if (digit == 0) {\n                end = start + 1;\n                start\
    \ = end - 1;\n            }\n            n /= 10;\n        }\n        return count;",
  "        long count = 0;\n        long last = 1;\n        while (n > 1) {\n    \
    \        long digit = n % 10;\n            if (digit == 1) {\n               \
    \ count++;\n            }\n            last = last * 10 + digit;\n           \
    \ n = n / 10;\n        }\n        return count;", "        long count = 0;\n \
    \       long m = n;\n        while (m > 1) {\n            long r = m % 10;\n \
    \           m /= 10;\n            if (r == 1) {\n                count++;\n  \
    \          }\n        }\n        return count;", "        long count = 0;\n  \
    \      long start = 1;\n        long end = 1;\n        while (n != 0) {\n    \
    \        long digit = n % 10;\n            if (digit == 1) {\n               \
    \ count++;\n            }\n            n /= 10;\n        }\n        return count;",
  "        long count = 0;\n        long limit = Math.Pow(10, n);\n        long start\
    \ = 1;\n        long end = 1;\n        while (start <= limit) {\n            long\
    \ mid = (start + end) / 2;\n            if (mid % 2 == 0) {\n                start\
    \ = mid + 1;\n            } else {\n                end = mid - 1;\n         \
    \   }\n            if (start > limit) {\n                break;\n            }\n\
    \            if (end > limit) {\n                end = limit;\n            }\n\
    \            if (start == end) {\n                count++;\n            }\n  \
    \      }\n        return count;", "        long count = 0;\n        long start\
    \ = 1;\n        while (start <= n) {\n            long end = 1;\n            while\
    \ (end <= n && end <= start) {\n                end++;\n            }\n      \
    \      if (start == end) {\n                count++;\n            }\n        \
    \    start++;\n        }\n        return count;", "        long count = 0;\n \
    \       long limit = n;\n        while (limit > 0) {\n            long digit =\
    \ limit % 10;\n            if (digit == 1)\n                count++;\n       \
    \     limit /= 10;\n        }\n        return count;", "        long count = 0;\n\
    \        long last = 1;\n        long current;\n        do {\n            current\
    \ = last + 1;\n            while (current % 10 == 1) {\n                current\
    \ = current / 10;\n                count++;\n            }\n            last =\
    \ current;\n        } while (current != n);\n        return count;", "       \
    \ long count = 0;\n        long start = 1;\n        long end = 1;\n        while\
    \ (n > 0) {\n            long digit = n % 10;\n            if (digit == 1) {\n\
    \                count++;\n            }\n            if (digit == 0) {\n    \
    \            end = start + 1;\n                start = end - 1;\n            }\n\
    \            n = n / 10;\n        }\n        return count;", "        long count\
    \ = 0;\n        long limit = n;\n        long start = 1;\n        long end = 1;\n\
    \        while (limit > 0) {\n            count++;\n            limit = limit\
    \ / 10;\n        }\n        while (start <= n) {\n            count++;\n     \
    \       start++;\n        }\n        while (end <= n) {\n            count++;\n\
    \            end++;\n        }\n        return count;"]
stop_tokens:
- "\n    }\n"
