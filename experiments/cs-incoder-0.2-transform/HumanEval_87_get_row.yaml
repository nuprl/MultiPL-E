name: HumanEval_87_get_row
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n   \
  \ // which is similar to matrix, however, unlike matrices,\n    // each row may\
  \ contain a different number of columns.\n    // Given lst, and integer x, find\
  \ integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2)\
  \ ...] such that\n    // each tuple is a coordinate - (row, columns), starting with\
  \ 0.\n    // Sort coordinates initially by rows in ascending order.\n    // Also,\
  \ sort coordinates of the row by columns in descending order.\n    // Examples:\n\
  \    // >>> GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,\
  \ (long)5L, (long)1L})})), (1L))\n    // (new List<Tuple<long, long>>(new Tuple<long,\
  \ long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L,\
  \ 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L,\
  \ 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))\n    // >>> GetRow((new List<List<long>>()),\
  \ (1L))\n    // (new List<Tuple<long, long>>())\n    // >>> GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(), (List<long>)new List<long>(new long[]{(long)1L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})})), (3L))\n\
  \    // (new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L,\
  \ 2L)}))\n    public static List<Tuple<long, long>> GetRow(List<List<long>> lst,\
  \ long x) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),\
  \ (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,\
  \ long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,\
  \ long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,\
  \ (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,\
  \ long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,\
  \ (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,\
  \ long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,\
  \ long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,\
  \ long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,\
  \ long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,\
  \ long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),\
  \ (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),\
  \ (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new\
  \ List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,\
  \ long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
completions: ["        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Add(0);\n            col.Add(0);\n            result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n        }\n        foreach (List<long> row in\
    \ lst) {\n            foreach (long c in col) {\n                if (row[c] ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.Count, c));\n\
    \                }\n            }\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            List<Tuple<long, long>> rowResult\
    \ = new List<Tuple<long, long>>();\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    rowResult.Add(new Tuple<long,\
    \ long>(row, col));\n                }\n            }\n            result.AddRange(rowResult);\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderByDescending(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ThenBy(x => x.Item1).ToList();", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> row\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column = new\
    \ List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n    \
    \        foreach (long col in row) {\n                if (col == x) {\n      \
    \              result.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(x)));\n\
    \                }\n            }\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        foreach (Tuple<long,\
    \ long> tuple in result) {\n            row.Add(tuple.Item1);\n            column.Add(tuple.Item2);\n\
    \        }\n        row.Sort((x, y) => y.CompareTo(x));\n        column.Sort((x,\
    \ y) => y.CompareTo(x));\n        result.AddRange(row);\n        result.AddRange(column);\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            col.AddRange(row.Skip(row.Count - 1).Take(row.Count).Reverse().ToList());\n\
    \            row.RemoveRange(row.Count - 1);\n            row.Sort();\n      \
    \      foreach (long c in col) {\n                if (c == x) {\n            \
    \        result.Add(new Tuple<long, long>(row.Count, col.Count));\n          \
    \      }\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            foreach (long col in row)\
    \ {\n                col.Sort();\n                if (col == x) {\n          \
    \          result.Add(new Tuple<long, long>(row.Count, col.Count));\n        \
    \        }\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            List<Tuple<long, long>> rowResult = new List<Tuple<long,\
    \ long>>();\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    rowResult.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ row.IndexOf(col)));\n                }\n            }\n            result.AddRange(rowResult);\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> col = new List<Tuple<long, long>>();\n      \
    \  foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    row.Add(col);\n        \
    \            col.Add(0);\n                    result.Add(new Tuple<long, long>(row.Count\
    \ - 1, col.Count - 1));\n                }\n            }\n        }\n       \
    \ foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col != x) {\n                    row.Add(col);\n        \
    \            col.Add(0);\n                    result.Add(new Tuple<long, long>(row.Count\
    \ - 1, col.Count - 1));\n                }\n            }\n        }\n       \
    \ return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            List<long>\
    \ columns = new List<long>();\n            foreach (long n in row) {\n       \
    \         if (n != x) {\n                    columns.Add(n);\n               \
    \ }\n            }\n            columns.Sort();\n            columns.Reverse();\n\
    \            result.Add(new Tuple<long, long>(columns.Count, columns.Count));\n\
    \        }\n        result.Sort();\n        result.Reverse();\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    col.Reverse();\n            foreach (long col in col) {\n               \
    \ if (col == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col));\n                }\n            }\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long col in row) {\n                col.Reverse();\n           \
    \     col.Add(x);\n                col.Sort();\n                result.Add(new\
    \ Tuple<long, long>(row.Count, col.Count));\n            }\n        }\n      \
    \  return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<List<long>> row = new List<List<long>>();\n        List<long>\
    \ column = new List<long>();\n        foreach (List<long> list in lst) {\n   \
    \         row.Add(list);\n        }\n        foreach (List<long> list in row)\
    \ {\n            column.Add(x);\n            result.Add(new Tuple<long, long>(list.IndexOf(column),\
    \ list.IndexOf(column)));\n        }\n        foreach (List<long> list in row)\
    \ {\n            column.RemoveAt(0);\n        }\n        foreach (List<long> list\
    \ in row) {\n            column.Add(x);\n            result.Add(new Tuple<long,\
    \ long>(list.IndexOf(column), list.IndexOf(column)));\n        }\n        foreach\
    \ (List<long> list in row) {\n            column.RemoveAt(0);\n        }\n   \
    \     foreach (List<long> list in row) {\n            column.Add(x);\n       \
    \     result.Add(new Tuple<long, long>(list.IndexOf(column), list.IndexOf(column)));\n\
    \        }\n        foreach (List<long> list in row) {\n            column.RemoveAt(0);\n\
    \        }\n        foreach (List<long> list in row) {\n            column.Add(x);\n\
    \            result.Add(new Tuple<long, long>(list.IndexOf(column), list.IndexOf(column)));\n\
    \        }\n        foreach (List<long> list in row) {\n            column.RemoveAt(0);\n\
    \        }\n        foreach (List<long> list in row) {\n            column.Add(x);\n\
    \            result.Add(new Tuple<long, long>(list.IndexOf(column), list.IndexOf(column)));\n\
    \        }\n        foreach (List<long> list in row) {\n            column.RemoveAt(0);\n\
    \        }\n        foreach (List<long> list in row) {\n            column.Add(x);\n\
    \            result.Add(new Tuple<long, long>(list.IndexOf(column), list.IndexOf(column)));\n\
    \        }\n        foreach (List<long> list in row) {\n            column.RemoveAt(0);\n\
    \        }\n        foreach (List<long> list in row) {\n            column.Add(x);\n\
    \            result.Add(new Tuple<long, long>(list.IndexOf(column), list.IndexOf(column)));\n\
    \        }\n        foreach (List<long> list in row) {\n            column.RemoveAt(0);\n\
    \        }\n        foreach (List<long> list in row) {\n            column.Add(x);\n\
    \            result.Add(new Tuple<long, long>(list.IndexOf(column), list.IndexOf(column)));\n\
    \        }\n        foreach (List<long> list in row) {\n            column.RemoveAt(0);\n\
    \        }\n        foreach (List<long> list in row) {\n            column.Add(x);\n\
    \            result.Add(new Tuple<long, long>(list.IndexOf(column), list.IndexOf(column)));\n\
    \        }\n        foreach (List<long", "        List<Tuple<long, long>> result\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> row = new\
    \ List<Tuple<long, long>>();\n        foreach (List<long> column in lst) {\n \
    \           row.Add(new Tuple<long, long>(column.Count, 0));\n        }\n    \
    \    row.Sort((a, b) => b.Item1.CompareTo(a.Item1));\n        foreach (Tuple<long,\
    \ long> t in row) {\n            foreach (List<long> column in lst) {\n      \
    \          if (t.Item1 == column.Count) {\n                    result.Add(new\
    \ Tuple<long, long>(t.Item1, t.Item2));\n                }\n            }\n  \
    \      }\n        result.Sort((a, b) => b.Item1.CompareTo(a.Item1));\n       \
    \ result.Sort((a, b) => b.Item2.CompareTo(a.Item2));\n        return result;",
  "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ col = new List<Tuple<long, long>>();\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col == x) {\n\
    \                    ret.Add(new Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    col.Add(col);\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col != x) {\n                    row.Insert(row.IndexOf(row),\
    \ col);\n                }\n            }\n        }\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Insert(row.IndexOf(row), col);\n          \
    \      }\n            }\n        }\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col != x) {\n  \
    \                  row.Insert(row.IndexOf(row), col);\n                }\n   \
    \         }\n        }\n        foreach (List<long> row in lst) {\n          \
    \  foreach (long col in row) {\n                if (col != x) {\n            \
    \        row.Insert(row.IndexOf(row), col);\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col != x) {\n                    row.Insert(row.IndexOf(row),\
    \ col);\n                }\n            }\n        }\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Insert(row.IndexOf(row), col);\n          \
    \      }\n            }\n        }\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col != x) {\n  \
    \                  row.Insert(row.IndexOf(row), col);\n                }\n   \
    \         }\n        }\n        foreach (List<long> row in lst) {\n          \
    \  foreach (long col in row) {\n                if (col != x) {\n            \
    \        row.Insert(row.IndexOf(row), col);\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col != x) {\n                    row.Insert(row.IndexOf(row),\
    \ col);\n                }\n            }\n        }\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Insert(row.IndexOf(row), ", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            foreach (long c in row)\
    \ {\n                col.Add(c);\n            }\n            col.Sort();\n   \
    \         foreach (long c in col) {\n                if (c == x) {\n         \
    \           result.Add(new Tuple<long, long>(row.Count, col.Count));\n       \
    \         }\n            }\n        }\n        result.Sort();\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long c in row) {\n                col.Add(c);\n            }\n \
    \           col.Sort();\n            foreach (long c in col) {\n             \
    \   if (c == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                }\n            }\n        }\n        result.Sort((x,\
    \ y) => x.Item1.CompareTo(y.Item1));\n        result.Sort((x, y) => x.Item2.CompareTo(y.Item2));\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count - 1));\n  \
    \          col.Sort();\n            foreach (long col in col) {\n            \
    \    if (col == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                }\n            }\n        }\n        result.Sort((x,\
    \ y) => x.Item1.CompareTo(y.Item1));\n        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        var row = new List<Tuple<long, long>>();\n        var col = new List<Tuple<long,\
    \ long>>();\n        var rows = new List<List<Tuple<long, long>>>();\n       \
    \ foreach (var row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            rows.Add(row);\n        }\n        rows.Sort();\n        rows.Reverse();\n\
    \        foreach (var row in rows) {\n            row.Sort();\n            row.Reverse();\n\
    \            foreach (var col in row) {\n                col.Sort();\n       \
    \         col.Reverse();\n                foreach (var coord in col) {\n     \
    \               if (coord.Equals(x)) {\n                        result.Add(Tuple.Create(row.IndexOf(row),\
    \ col.IndexOf(col)));\n                    }\n                }\n            }\n\
    \        }\n        return result;", "        List<Tuple<long, long>> res = new\
    \ List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n    \
    \        foreach (long col in row) {\n                if (col == x) {\n      \
    \              res.Add(new Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n\
    \                }\n            }\n        }\n        return res.OrderBy(x =>\
    \ x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> res = new List<Tuple<long, long>>();\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    res.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ row.IndexOf(col)));\n                }\n            }\n        }\n        return\
    \ res.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "     \
    \   var row = new List<Tuple<long, long>>();\n        var rows = new List<List<Tuple<long,\
    \ long>>>();\n        foreach (var row in lst) {\n            row.Sort();\n  \
    \          rows.Add(row);\n        }\n        rows.Sort((x, y) => x.Count - y.Count);\n\
    \        foreach (var row in rows) {\n            row.Sort((x, y) => x.CompareTo(y));\n\
    \            foreach (var col in row) {\n                if (col.Item1 == x) {\n\
    \                    row.Add(Tuple.Create(col.Item2, x));\n                  \
    \  break;\n                }\n            }\n        }\n        return row;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Add(x);\n        \
    \    result.Add(new Tuple<long, long>(row.Count, row.Count));\n        }\n   \
    \     foreach (List<long> col in result.OrderByDescending(x => x.Item1).ThenByDescending(x\
    \ => x.Item2)) {\n            col.Add(x);\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    col.AddRange(row.Skip(1).Take(row.Count - 1).ToList());\n            col.Sort();\n\
    \            foreach (long c in col) {\n                if (c == x) {\n      \
    \              result.Add(Tuple.Create(row.Count, col.Count));\n             \
    \       break;\n                }\n            }\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<List<long>> row = new List<List<long>>();\n        List<List<long>> column\
    \ = new List<List<long>>();\n        foreach (List<long> list in lst) {\n    \
    \        row.Add(list);\n        }\n        foreach (List<long> list in row) {\n\
    \            column.Add(list);\n        }\n        foreach (List<long> list in\
    \ column) {\n            foreach (long item in list) {\n                if (item\
    \ == x) {\n                    result.Add(new Tuple<long, long>(list.IndexOf(list),\
    \ list.IndexOf(list)));\n                }\n            }\n        }\n       \
    \ foreach (List<long> list in column) {\n            foreach (long item in list)\
    \ {\n                if (item != x) {\n                    result.Add(new Tuple<long,\
    \ long>(list.IndexOf(list), list.IndexOf(list)));\n                }\n       \
    \     }\n        }\n        foreach (List<long> list in row) {\n            foreach\
    \ (long item in list) {\n                if (item != x) {\n                  \
    \  result.Add(new Tuple<long, long>(list.IndexOf(list), list.IndexOf(list)));\n\
    \                }\n            }\n        }\n        foreach (List<long> list\
    \ in row) {\n            foreach (long item in list) {\n                if (item\
    \ == x) {\n                    result.Add(new Tuple<long, long>(list.IndexOf(list),\
    \ list.IndexOf(list)));\n                }\n            }\n        }\n       \
    \ foreach (List<long> list in row) {\n            foreach (long item in list)\
    \ {\n                if (item != x) {\n                    result.Add(new Tuple<long,\
    \ long>(list.IndexOf(list), list.IndexOf(list)));\n                }\n       \
    \     }\n        }\n        foreach (List<long> list in row) {\n            foreach\
    \ (long item in list) {\n                if (item == x) {\n                  \
    \  result.Add(new Tuple<long, long>(list.IndexOf(list), list.IndexOf(list)));\n\
    \                }\n            }\n        }\n        foreach (List<long> list\
    \ in row) {\n            foreach (long item in list) {\n                if (item\
    \ != x) {\n                    result.Add(new Tuple<long, long>(list.IndexOf(list),\
    \ list.IndexOf(list)));\n                }\n            }\n        }\n       \
    \ foreach (List<long> list in row) {\n            foreach (long item in list)\
    \ {\n                if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(list.IndexOf(list), list.IndexOf(list)));\n                }\n       \
    \     }\n        }\n        foreach (List<long> list in row) {\n            foreach\
    \ (long item in list) {\n                if (item != x) {\n                  \
    \  result.Add(new Tuple<long, long>(list.IndexOf(list), list.IndexOf(list)));\n\
    \                }\n            }\n        }\n        foreach (List<long> list\
    \ in row) {\n            foreach (long ", "        List<Tuple<long, long>> result\
    \ = new List<Tuple<long, long>>();\n        List<long> row = new List<long>();\n\
    \        List<long> col = new List<long>();\n        foreach (List<long> row in\
    \ lst) {\n            row.Sort();\n            foreach (long c in row) {\n   \
    \             col.Add(c);\n            }\n            col.Sort();\n          \
    \  foreach (long c in col) {\n                if (c == x) {\n                \
    \    result.Add(new Tuple<long, long>(row.Count, col.Count));\n              \
    \  }\n            }\n        }\n        result.Sort();\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    col.Reverse();\n            foreach (long c in col) {\n                if\
    \ (c == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                }\n            }\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> column = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col != x) {\n                    column.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        foreach\
    \ (Tuple<long, long> column in column) {\n            row.Insert(column.Item1,\
    \ column.Item2);\n        }\n        foreach (Tuple<long, long> row in row) {\n\
    \            column.Insert(row.Item1, row.Item2);\n        }\n        foreach\
    \ (Tuple<long, long> column in column) {\n            row.Insert(column.Item1,\
    \ column.Item2);\n        }\n        foreach (Tuple<long, long> row in row) {\n\
    \            result.Add(new Tuple<long, long>(row.Item1, row.Item2));\n      \
    \  }\n        foreach (Tuple<long, long> column in column) {\n            result.Add(new\
    \ Tuple<long, long>(column.Item1, column.Item2));\n        }\n        foreach\
    \ (Tuple<long, long> row in row) {\n            result.Add(new Tuple<long, long>(row.Item1,\
    \ row.Item2));\n        }\n        foreach (Tuple<long, long> column in column)\
    \ {\n            result.Add(new Tuple<long, long>(column.Item1, column.Item2));\n\
    \        }\n        foreach (Tuple<long, long> row in row) {\n            result.Add(new\
    \ Tuple<long, long>(row.Item1, row.Item2));\n        }\n        foreach (Tuple<long,\
    \ long> column in column) {\n            result.Add(new Tuple<long, long>(column.Item1,\
    \ column.Item2));\n        }\n        foreach (Tuple<long, long> row in row) {\n\
    \            result.Add(new Tuple<long, long>(row.Item1, row.Item2));\n      \
    \  }\n        foreach (Tuple<long, long> column in column) {\n            result.Add(new\
    \ Tuple<long, long>(column.Item1, column.Item2));\n        }\n        foreach\
    \ (Tuple<long, long> row in row) {\n            result.Add(new Tuple<long, long>(row.Item1,\
    \ row.Item2));\n        }\n        foreach (Tuple<long, long> column in column)\
    \ {\n            result.Add(new Tuple<long, long>(column.Item1, column.Item2));\n\
    \        }\n        foreach (Tuple<long, long> row in ", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            foreach (long col in row)\
    \ {\n                col.Sort();\n                if (col == x) {\n          \
    \          result.Add(new Tuple<long, long>(row.Count, col.Count));\n        \
    \        }\n            }\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long col in row) {\n                if (col == x) {\n          \
    \          result.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(x)));\n\
    \                }\n            }\n        }\n        result.Sort((x, y) => y.Item1.CompareTo(x.Item1));\n\
    \        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            List<long> columns = new List<long>();\n\
    \            foreach (long y in row) {\n                if (y == x) {\n      \
    \              columns.Add(y);\n                }\n            }\n           \
    \ result.Add(new Tuple<long, long>(columns.Count, columns.Max()));\n        }\n\
    \        return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> column = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    row.Add(col);\n                    column.Add(Tuple.Create(row.Count\
    \ - 1, col.Count - 1));\n                }\n            }\n            result.Add(Tuple.Create(row.Count,\
    \ column.Count));\n            row.Clear();\n            column.Clear();\n   \
    \     }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n        result.Sort((x,\
    \ y) => y.Item2.CompareTo(x.Item2));\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ row = new List<Tuple<long, long>>();\n        foreach (List<long> row in lst)\
    \ {\n            row.Sort();\n            row.Reverse();\n            foreach\
    \ (long col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.Count, row.Count - 1));\n                }\n         \
    \   }\n        }\n        result.Sort();\n        result.Reverse();\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long num in row)\
    \ {\n                if (num == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(num), row.IndexOf(num)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> ret = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(y => y)) {\n                if (col == x) {\n     \
    \               ret.Add(Tuple.Create(row.IndexOf(col), col.IndexOf(row)));\n \
    \               }\n            }\n        }\n        return ret;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column\
    \ = new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col == x) {\n  \
    \                  result.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(x)));\n\
    \                }\n            }\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> col = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ rowSorted = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ colSorted = new List<Tuple<long, long>>();\n        foreach (List<long> row\
    \ in lst) {\n            row.Sort();\n            foreach (long col in row) {\n\
    \                col.Sort();\n                if (col == x) {\n              \
    \      result.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(x)));\n\
    \                }\n            }\n        }\n        result.Sort();\n       \
    \ foreach (Tuple<long, long> t in result) {\n            row.Add(t.Item1);\n \
    \           col.Add(t.Item2);\n        }\n        row.Sort();\n        col.Sort();\n\
    \        foreach (Tuple<long, long> t in row) {\n            rowSorted.Add(t);\n\
    \        }\n        foreach (Tuple<long, long> t in col) {\n            colSorted.Add(t);\n\
    \        }\n        rowSorted.Sort();\n        colSorted.Sort();\n        foreach\
    \ (Tuple<long, long> t in rowSorted) {\n            rowSorted.Add(t);\n      \
    \  }\n        foreach (Tuple<long, long> t in colSorted) {\n            colSorted.Add(t);\n\
    \        }\n        return rowSorted;", "        List<Tuple<long, long>> result\
    \ = new List<Tuple<long, long>>();\n        List<long> row = new List<long>();\n\
    \        List<long> col = new List<long>();\n        foreach (List<long> row in\
    \ lst) {\n            row.Sort();\n            col.AddRange(row.Skip(row.Count\
    \ - 1).Take(row.Count).Reverse().ToList());\n            col.Sort();\n       \
    \     foreach (long c in col) {\n                if (c == x) {\n             \
    \       result.Add(new Tuple<long, long>(row.Count, col.Count));\n           \
    \         break;\n                }\n            }\n        }\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n      \
    \  List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col != x) {\n                    column.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        foreach\
    \ (Tuple<long, long> tuple in result.OrderByDescending(x => x.Item1)) {\n    \
    \        row.Add(tuple.Item2);\n        }\n        foreach (Tuple<long, long>\
    \ tuple in column.OrderByDescending(x => x.Item1)) {\n            column.Add(tuple.Item2);\n\
    \        }\n        result.AddRange(row);\n        result.AddRange(column);\n\
    \        return result;", "        List<Tuple<long, long>> ret = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    ret.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        foreach (Tuple<long, long> t in ret) {\n            t.Item1\
    \ = t.Item1 > t.Item2 ? t.Item1 : t.Item2;\n            t.Item2 = t.Item1 > t.Item2\
    \ ? t.Item2 : t.Item1;\n        }\n        return ret;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var col in row) {\n                if (col == x)\
    \ {\n                    result.Add(new Tuple<long, long>(row.IndexOf(row), row.IndexOf(col)));\n\
    \                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> column = new List<long>();\n        foreach\
    \ (List<long> row in lst) {\n            row.Add(x);\n            column.Add(x);\n\
    \            result.Add(new Tuple<long, long>(row.Count, column.Count));\n   \
    \     }\n        foreach (List<long> row in lst) {\n            column.Sort();\n\
    \            column.Reverse();\n            foreach (long column in column) {\n\
    \                result.Add(new Tuple<long, long>(row.Count, column));\n     \
    \       }\n        }\n        result.Sort();\n        result.Reverse();\n    \
    \    return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Add(0);\n            col.Add(0);\n        }\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            col.Sort();\n          \
    \  if (row.Contains(x)) {\n                result.Add(new Tuple<long, long>(row.IndexOf(x),\
    \ col.IndexOf(x)));\n            }\n        }\n        result.Sort();\n      \
    \  return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            foreach (long c in row) {\n                col.Add(c);\n\
    \            }\n            col.Sort();\n            foreach (long c in col) {\n\
    \                if (c == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        result.Sort();\n        return result;", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        foreach (List<long> row in\
    \ lst) {\n            foreach (long col in row) {\n                if (col ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ row.IndexOf(col)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> col = new List<Tuple<long, long>>();\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(Tuple.Create(row.Count, col.Count));\n       \
    \         }\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col != x) {\n\
    \                    row.Remove(col);\n                    col.Remove(col);\n\
    \                    result.Add(Tuple.Create(row.Count, col.Count));\n       \
    \         }\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col != x) {\n\
    \                    row.Add(col);\n                    col.Add(col);\n      \
    \              result.Add(Tuple.Create(row.Count, col.Count));\n             \
    \   }\n            }\n        }\n        foreach (List<long> row in lst) {\n \
    \           foreach (long col in row) {\n                if (col != x) {\n   \
    \                 row.Remove(col);\n                    col.Remove(col);\n   \
    \                 result.Add(Tuple.Create(row.Count, col.Count));\n          \
    \      }\n            }\n        }\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col != x) {\n  \
    \                  row.Add(col);\n                    col.Add(col);\n        \
    \            result.Add(Tuple.Create(row.Count, col.Count));\n               \
    \ }\n            }\n        }\n        foreach (List<long> row in lst) {\n   \
    \         foreach (long col in row) {\n                if (col != x) {\n     \
    \               row.Remove(col);\n                    col.Remove(col);\n     \
    \               result.Add(Tuple.Create(row.Count, col.Count));\n            \
    \    }\n            }\n        }\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col != x) {\n  \
    \                  row.Add(col);\n                    col.Add(col);\n        \
    \            result.Add(Tuple.Create(row.Count, col.Count));\n               \
    \ }\n            }\n        }\n        foreach (List<long> row in lst) {\n   \
    \         foreach (long col in row) {\n                if (col != x) {\n     \
    \               row.Remove(col);\n                    col.Remove(col);\n     \
    \               result.Add(Tuple.Create(row.Count, col.Count));\n            \
    \    }\n            }\n        }\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col != x) {\n  \
    \                  row.Add(col);\n                    col.Add(col);\n        \
    \            result.Add(Tuple", "        List<Tuple<long, long>> result = new\
    \ List<Tuple<long, long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col != x) {\n                    column.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n\
    \            }\n        }\n        foreach (Tuple<long, long> tuple in column)\
    \ {\n            row.Insert(tuple.Item1, tuple.Item2);\n        }\n        foreach\
    \ (Tuple<long, long> tuple in row) {\n            column.Insert(tuple.Item1, tuple.Item2);\n\
    \        }\n        result.Sort(new TupleComparer());\n        column.Sort(new\
    \ TupleComparer());\n        row.Sort(new TupleComparer());\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long col in row) {\n                if (col == x) {\n          \
    \          result.Add(new Tuple<long, long>(row.Count, col.Count));\n        \
    \        }\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> res = new List<Tuple<long, long>>();\n        List<long> row = new List<long>();\n\
    \        List<long> col = new List<long>();\n        foreach (List<long> row in\
    \ lst) {\n            row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count\
    \ - 1).ToList());\n            col.Sort();\n            col.Reverse();\n     \
    \       col.AddRange(new List<long>() { x });\n            col.Sort();\n     \
    \       col.Reverse();\n            col.AddRange(row.Take(row.Count - 1).ToList());\n\
    \            col.Sort();\n            col.Reverse();\n            col.AddRange(new\
    \ List<long>() { x });\n            col.Sort();\n            col.Reverse();\n\
    \            col.AddRange(row.Skip(1).Take(row.Count - 1).ToList());\n       \
    \     col.Sort();\n            col.Reverse();\n            col.AddRange(row.Take(row.Count\
    \ - 1).ToList());\n            col.Sort();\n            col.Reverse();\n     \
    \       col.AddRange(row.Skip(1).Take(row.Count - 1).ToList());\n            col.Sort();\n\
    \            col.Reverse();\n            col.AddRange(row.Take(row.Count - 1).ToList());\n\
    \            col.Sort();\n            col.Reverse();\n            col.AddRange(row.Skip(1).Take(row.Count\
    \ - 1).ToList());\n            col.Sort();\n            col.Reverse();\n     \
    \       col.AddRange(row.Take(row.Count - 1).ToList());\n            col.Sort();\n\
    \            col.Reverse();\n            col.AddRange(row.Skip(1).Take(row.Count\
    \ - 1).ToList());\n            col.Sort();\n            col.Reverse();\n     \
    \       col.AddRange(row.Take(row.Count - 1).ToList());\n            col.Sort();\n\
    \            col.Reverse();\n            col.AddRange(row.Skip(1).Take(row.Count\
    \ - 1).ToList());\n            col.Sort();\n            col.Reverse();\n     \
    \       col.AddRange(row.Take(row.Count - 1).ToList());\n            col.Sort();\n\
    \            col.Reverse();\n            col.AddRange(row.Skip(1).Take(row.Count\
    \ - 1).ToList());\n            col.Sort();\n            col.Reverse();\n     \
    \       col.AddRange(row.Take(row.Count - 1).ToList());\n            col.Sort();\n\
    \            col.Reverse();\n            col.AddRange(row.Skip(1).Take(row.Count\
    \ - 1).ToList());\n            col.Sort();\n            col.Reverse();\n     \
    \       col.AddRange(row.Take(row.Count - 1).ToList());\n            ", "    \
    \    var result = new List<Tuple<long, long>>();\n        var row = new List<long>();\n\
    \        var column = new List<long>();\n        foreach (var row in lst) {\n\
    \            row.Sort();\n            column.Sort();\n            if (row.Count\
    \ == 0) {\n                result.Add(new Tuple<long, long>(row.Count, 0));\n\
    \                continue;\n            }\n            if (column.Count == 0)\
    \ {\n                result.Add(new Tuple<long, long>(row.Count, row.Count));\n\
    \                continue;\n            }\n            if (row.Count == column.Count)\
    \ {\n                for (int i = 0; i < row.Count; i++) {\n                 \
    \   if (row[i] < column[i]) {\n                        result.Add(new Tuple<long,\
    \ long>(row.Count, row.Count));\n                        break;\n            \
    \        }\n                    else if (row[i] > column[i]) {\n             \
    \           result.Add(new Tuple<long, long>(row.Count, row.Count));\n       \
    \                 break;\n                    }\n                    else if (row[i]\
    \ == column[i]) {\n                        result.Add(new Tuple<long, long>(row.Count,\
    \ row.Count));\n                        break;\n                    }\n      \
    \          }\n                continue;\n            }\n            if (row.Count\
    \ > column.Count) {\n                for (int i = 0; i < row.Count; i++) {\n \
    \                   if (row[i] < column[i]) {\n                        result.Add(new\
    \ Tuple<long, long>(row.Count, row.Count));\n                        break;\n\
    \                    }\n                    else if (row[i] > column[i]) {\n \
    \                       result.Add(new Tuple<long, long>(row.Count, row.Count));\n\
    \                        break;\n                    }\n                    else\
    \ if (row[i] == column[i]) {\n                        result.Add(new Tuple<long,\
    \ long>(row.Count, row.Count));\n                        break;\n            \
    \        }\n                }\n                continue;\n            }\n    \
    \        if (column.Count > row.Count) {\n                for (int i = 0; i <\
    \ column.Count; i++) {\n                    if (column[i] < row[i]) {\n      \
    \                  result.Add(new Tuple<long, long>(row.Count, row.Count));\n\
    \                        break;\n                    }\n                    else\
    \ if (column[i] > row[i]) {\n                        result.Add(new Tuple<long,\
    \ long>(row.Count, row.Count));\n                        break;\n            \
    \        }\n                    else if (column[i] == row[i]) {\n            \
    \            result.Add(new Tuple<long, long>(row.Count, row.Count));\n      \
    \                  break;\n                    }\n                }\n        \
    \        continue;\n            }\n        }\n        return result;", "     \
    \   List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        List<long>\
    \ row = new List<long>();\n        List<long> col = new List<long>();\n      \
    \  foreach (List<long> row in lst) {\n            row.Sort();\n            foreach\
    \ (long c in row) {\n                col.Add(c);\n            }\n            col.Sort();\n\
    \            foreach (long c in col) {\n                if (c == x) {\n      \
    \              ret.Add(new Tuple<long, long>(row.Count, col.Count));\n       \
    \         }\n            }\n        }\n        ret.Sort();\n        ret.Reverse();\n\
    \        return ret;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        var rows = lst.Select(l => l.Count).ToArray();\n        var cols = lst.First().Count;\n\
    \        var row = 0;\n        var col = 0;\n        while (row < rows && col\
    \ < cols) {\n            if (lst[row][col] == x) {\n                result.Add(new\
    \ Tuple<long, long>(row, col));\n            }\n            else if (lst[row][col]\
    \ > x) {\n                row++;\n            }\n            else {\n        \
    \        col++;\n            }\n        }\n        return result.OrderBy(t =>\
    \ t.Item1).ThenByDescending(t => t.Item2).ToList();", "        List<Tuple<long,\
    \ long>> res = new List<Tuple<long, long>>();\n        List<long> row = new List<long>();\n\
    \        List<long> col = new List<long>();\n        foreach (List<long> row in\
    \ lst) {\n            foreach (long col in row) {\n                if (col ==\
    \ x) {\n                    res.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    col.Remove(x);\n                }\n           \
    \ }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col.Count == 0) {\n               \
    \     row.Remove(col);\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col.Count == 0) {\n                    col.Remove(row);\n      \
    \          }\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col.Count ==\
    \ 0) {\n                    row.Remove(col);\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col.Count == 0) {\n                    col.Remove(row);\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col.Count\
    \ == 0) {\n                    row.Remove(col);\n                }\n         \
    \   }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col.Count == 0) {\n               \
    \     col.Remove(row);\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col.Count == 0) {\n                    row.Remove(col);\n      \
    \          }\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col.Count ==\
    \ 0) {\n                    col.Remove(row);\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col.Count == 0) {\n                    row.Remove(col);\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col.Count\
    \ == 0) {\n                    col.Remove(row);\n                }\n         \
    \   }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col.Count == 0) {\n               \
    \     row.Remove(col);\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> row = new List<Tuple<long, long>>();\n        foreach (List<long> column\
    \ in lst) {\n            row.Add(new Tuple<long, long>(column.Count, 0));\n  \
    \      }\n        row.Sort((a, b) => a.Item1.CompareTo(b.Item1));\n        foreach\
    \ (Tuple<long, long> tuple in row) {\n            int i = 0;\n            foreach\
    \ (long item in tuple.Item2) {\n                if (item == x) {\n           \
    \         result.Add(new Tuple<long, long>(tuple.Item1, i));\n               \
    \     break;\n                }\n                i++;\n            }\n       \
    \ }\n        result.Sort((a, b) => a.Item2.CompareTo(b.Item2));\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            foreach (long c in row) {\n                col.Add(c);\n\
    \            }\n            col.Sort();\n            foreach (long c in col) {\n\
    \                if (c == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        result.Sort();\n        return result;", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        List<long> row = new List<long>();\n\
    \        List<long> col = new List<long>();\n        foreach (List<long> row in\
    \ lst) {\n            foreach (long col in row) {\n                if (col ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        return\
    \ result.OrderByDescending(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long c in row) {\n                col.Add(c);\n            }\n \
    \           col.Sort();\n            foreach (long c in col) {\n             \
    \   if (c == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                }\n            }\n        }\n        result.Sort();\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.Count - 1,\
    \ col.Count - 1));\n                    break;\n                }\n          \
    \  }\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> column = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    row.Add(col);\n                    column.Add(Tuple.Create(row.IndexOf(col),\
    \ row.IndexOf(col)));\n                }\n            }\n            result.Add(Tuple.Create(row.Count,\
    \ column.Count));\n            row.Clear();\n            column.Clear();\n   \
    \     }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n        result.Sort((x,\
    \ y) => y.Item2.CompareTo(x.Item2));\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column\
    \ = new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col == x) {\n  \
    \                  result.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    column.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        column.Sort((x,\
    \ y) => y.Item1.CompareTo(x.Item1));\n        row.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n\
    \        result.Sort((x, y) => y.Item1.CompareTo(x.Item1));\n        foreach (Tuple<long,\
    \ long> item in column) {\n            foreach (Tuple<long, long> item in row)\
    \ {\n                if (item.Item1 == item.Item2) {\n                    result.Add(item);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        List<long>\
    \ row = new List<long>();\n        List<long> col = new List<long>();\n      \
    \  foreach (List<long> row in lst) {\n            row.Sort();\n            col.AddRange(row.ToArray());\n\
    \        }\n        col.Sort();\n        col.Reverse();\n        foreach (long\
    \ col in col) {\n            row.Add(col);\n        }\n        row.Add(x);\n \
    \       result.Add(new Tuple<long, long>(row.ToArray()));\n        return result;",
  "        var result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            var rowTuple = new List<Tuple<long, long>>();\n        \
    \    foreach (var item in row) {\n                rowTuple.Add(new Tuple<long,\
    \ long>(item, item));\n            }\n            rowTuple.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \            rowTuple.Sort((x, y) => x.Item2.CompareTo(y.Item2));\n          \
    \  if (rowTuple.Contains(new Tuple<long, long>(x, x))) {\n                result.Add(new\
    \ Tuple<long, long>(x, x));\n            }\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            List<Tuple<long, long>> rowResult\
    \ = new List<Tuple<long, long>>();\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    rowResult.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n            result.AddRange(rowResult);\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column\
    \ = new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col == x) {\n  \
    \                  result.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    column.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        foreach\
    \ (Tuple<long, long> t in column) {\n            row.Insert(t.Item1, t.Item2);\n\
    \        }\n        foreach (Tuple<long, long> t in row) {\n            column.Insert(t.Item1,\
    \ t.Item2);\n        }\n        foreach (Tuple<long, long> t in result) {\n  \
    \          row.Insert(t.Item1, t.Item2);\n        }\n        foreach (Tuple<long,\
    \ long> t in column) {\n            column.Insert(t.Item1, t.Item2);\n       \
    \ }\n        foreach (Tuple<long, long> t in row) {\n            row.Insert(t.Item1,\
    \ t.Item2);\n        }\n        foreach (Tuple<long, long> t in result) {\n  \
    \          row.Insert(t.Item1, t.Item2);\n        }\n        foreach (Tuple<long,\
    \ long> t in column) {\n            column.Insert(t.Item1, t.Item2);\n       \
    \ }\n        foreach (Tuple<long, long> t in row) {\n            row.Insert(t.Item1,\
    \ t.Item2);\n        }\n        foreach (Tuple<long, long> t in result) {\n  \
    \          row.Insert(t.Item1, t.Item2);\n        }\n        foreach (Tuple<long,\
    \ long> t in column) {\n            column.Insert(t.Item1, t.Item2);\n       \
    \ }\n        foreach (Tuple<long, long> t in row) {\n            row.Insert(t.Item1,\
    \ t.Item2);\n        }\n        foreach (Tuple<long, long> t in result) {\n  \
    \          row.Insert(t.Item1, t.Item2);\n        }\n        foreach (Tuple<long,\
    \ long> t in column) {\n            column.Insert(t.Item1, t.Item2);\n       \
    \ }\n        foreach (Tuple<long, long> t in row) {\n            row.Insert(t.Item1,\
    \ t.Item2);\n        }\n        foreach (Tuple<long, long> t in result) {\n  \
    \          row.Insert(t.Item1, t.Item2);\n        }\n        foreach (Tuple<long,\
    \ long> t in column) {\n            ", "        List<Tuple<long, long>> result\
    \ = new List<Tuple<long, long>>();\n        List<long> row = new List<long>();\n\
    \        List<long> col = new List<long>();\n        foreach (List<long> row in\
    \ lst) {\n            row.Sort();\n            col.Reverse();\n            foreach\
    \ (long c in col) {\n                if (c == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.Count, col.Count));\n                }\n            }\n\
    \        }\n        return result;", "        List<Tuple<long, long>> result =\
    \ new List<Tuple<long, long>>();\n        List<long> row = new List<long>();\n\
    \        List<long> col = new List<long>();\n        foreach (List<long> row in\
    \ lst) {\n            row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count\
    \ - 1).ToList());\n            col.Sort();\n            row.Sort();\n        \
    \    foreach (long c in col) {\n                if (c == x) {\n              \
    \      result.Add(new Tuple<long, long>(row.Count, col.Count));\n            \
    \        break;\n                }\n            }\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Add(0);\n            col.Add(0);\n            result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n        }\n        foreach (List<long> row in\
    \ lst) {\n            foreach (long col in row) {\n                if (col ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col != x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                    break;\n                }\n\
    \            }\n        }\n        foreach (List<long> row in lst) {\n       \
    \     foreach (long col in row) {\n                if (col == x) {\n         \
    \           result.Add(new Tuple<long, long>(row.Count, col.Count));\n       \
    \             break;\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col != x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                    break;\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.Count, col.Count));\n                    break;\n    \
    \            }\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col != x) {\n\
    \                    result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                    break;\n                }\n\
    \            }\n        }\n        foreach (List<long> row in lst) {\n       \
    \     foreach (long col in row) {\n                if (col != x) {\n         \
    \           result.Add(new Tuple<long, long>(row.Count, col.Count));\n       \
    \             break;\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                    break;\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col != x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.Count, col.", "        List<Tuple<long, long>> result\
    \ = new List<Tuple<long, long>>();\n        List<long> row = new List<long>();\n\
    \        List<long> col = new List<long>();\n        foreach (List<long> row in\
    \ lst) {\n            row.Sort();\n            foreach (long c in row) {\n   \
    \             col.Add(c);\n            }\n            col.Sort();\n          \
    \  foreach (long c in col) {\n                if (c == x) {\n                \
    \    result.Add(new Tuple<long, long>(row.Count, col.Count));\n              \
    \  }\n            }\n        }\n        result.Sort();\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> column in lst) {\n            row.Add(new Tuple<long, long>(column.Count,\
    \ 0));\n        }\n        row.Sort((a, b) => a.Item1.CompareTo(b.Item1));\n \
    \       foreach (Tuple<long, long> t in row) {\n            foreach (long i in\
    \ t.Item1) {\n                if (i == x) {\n                    result.Add(new\
    \ Tuple<long, long>(t.Item1, t.Item2));\n                }\n            }\n  \
    \      }\n        result.Sort((a, b) => b.Item1.CompareTo(a.Item1));\n       \
    \ return result;", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    res.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return res.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Add(0);\n            col.Add(0);\n        }\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            col.Sort();\n          \
    \  foreach (long c in col) {\n                if (c == x) {\n                \
    \    result.Add(new Tuple<long, long>(row.Count, col.Count));\n              \
    \  }\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ row.IndexOf(col)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<List<long>> row = new List<List<long>>();\n        List<long>\
    \ col = new List<long>();\n        foreach (List<long> list in lst) {\n      \
    \      row.Add(list);\n        }\n        foreach (List<long> list in row) {\n\
    \            col.Add(x);\n            result.Add(new Tuple<long, long>(list.IndexOf(col),\
    \ list.IndexOf(col)));\n        }\n        List<Tuple<long, long>> sorted = result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();\n        return sorted;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> column = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col != x) {\n                    column.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        column.Sort((a,\
    \ b) => b.Item1.CompareTo(a.Item1));\n        column.Sort((a, b) => b.Item2.CompareTo(a.Item2));\n\
    \        foreach (Tuple<long, long> col in column) {\n            row.Add(lst[col.Item1].ElementAt(col.Item2));\n\
    \        }\n        row.Sort((a, b) => b.Item1.CompareTo(a.Item1));\n        row.Sort((a,\
    \ b) => b.Item2.CompareTo(a.Item2));\n        result.AddRange(row);\n        result.AddRange(column);\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            row.Reverse();\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    row.Reverse();\n            foreach (long col in row) {\n               \
    \ if (col == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(row),\
    \ row.IndexOf(row) + 1));\n                }\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        return result;", "    \
    \    List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n       \
    \ foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> ret = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            col.AddRange(row.ToArray());\n            col.Sort();\n\
    \            row.Clear();\n            col.Clear();\n            foreach (long\
    \ c in col) {\n                if (c == x) {\n                    ret.Add(new\
    \ Tuple<long, long>(row.Count, col.Count));\n                }\n            }\n\
    \        }\n        return ret;", "        List<Tuple<long, long>> result = new\
    \ List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n    \
    \        foreach (long col in row) {\n                if (col == x) {\n      \
    \              result.Add(new Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n\
    \                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            foreach (long c in row)\
    \ {\n                col.Add(c);\n            }\n            col.Sort();\n   \
    \         foreach (long c in col) {\n                if (c == x) {\n         \
    \           result.Add(new Tuple<long, long>(row.Count - 1, col.Count - 1));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ column = new List<Tuple<long, long>>();\n        foreach (List<long> row in\
    \ lst) {\n            foreach (long col in row) {\n                if (col ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => a.Item1.CompareTo(b.Item1));\n        result.Sort((a, b) => b.Item2.CompareTo(a.Item2));\n\
    \        foreach (Tuple<long, long> item in result) {\n            row.Add(item.Item1);\n\
    \            column.Add(item.Item2);\n        }\n        row.Sort((a, b) => b.CompareTo(a));\n\
    \        column.Sort((a, b) => b.CompareTo(a));\n        result.AddRange(row);\n\
    \        result.AddRange(column);\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                    break;\n                }\n\
    \            }\n        }\n        foreach (List<long> row in lst) {\n       \
    \     row.Sort();\n            foreach (long col in row) {\n                if\
    \ (col != x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        List<Tuple<long, long>> result =\
    \ new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col == x) {\n  \
    \                  result.Add(new Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n\
    \                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ row.IndexOf(col)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    col.Reverse();\n            foreach (long c in col) {\n                if\
    \ (c == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                }\n            }\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            List<Tuple<long, long>> rowResult\
    \ = GetRow(row, x);\n            if (rowResult.Count > 0) {\n                result.AddRange(rowResult);\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            col.AddRange(row);\n            col.Sort();\n     \
    \       foreach (long c in col) {\n                if (c == x) {\n           \
    \         result.Add(new Tuple<long, long>(row.Count, col.Count));\n         \
    \       }\n            }\n        }\n        result.Sort();\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> column = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col != x) {\n                    column.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        foreach\
    \ (Tuple<long, long> tuple in result.OrderByDescending(x => x.Item1).ThenByDescending(x\
    \ => x.Item2)) {\n            row.Add(tuple.Item1);\n            column.Add(tuple.Item2);\n\
    \        }\n        result.AddRange(column);\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        List<long>\
    \ row = new List<long>();\n        List<long> col = new List<long>();\n      \
    \  foreach (List<long> row in lst) {\n            row.Add(0);\n            col.Add(0);\n\
    \            result.Add(new Tuple<long, long>(row.Count, col.Count));\n      \
    \  }\n        foreach (List<long> row in lst) {\n            foreach (long c in\
    \ col) {\n                if (row[c] == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.Count, c));\n                    break;\n            \
    \    }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        var row = new List<long>();\n        var col = new List<long>();\n  \
    \      foreach (var item in lst) {\n            row.Add(item[0]);\n          \
    \  col.Add(item[1]);\n        }\n        col.Sort();\n        row.Sort();\n  \
    \      var rowIndex = row.BinarySearch(Convert.ToInt64(x));\n        if (rowIndex\
    \ >= 0) {\n            var colIndex = col.BinarySearch(Convert.ToInt64(x) - rowIndex);\n\
    \            if (colIndex >= 0) {\n                result.Add(new Tuple<long,\
    \ long>(rowIndex, colIndex));\n            }\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long c in row) {\n                col.Add(c);\n            }\n \
    \           col.Sort();\n            if (col.Contains(x)) {\n                result.Add(new\
    \ Tuple<long, long>(row.Count - 1, col.Count - 1));\n            }\n        }\n\
    \        result.Sort();\n        return result;", "        var result = new List<Tuple<long,\
    \ long>>();\n        var row = new List<Tuple<long, long>>();\n        foreach\
    \ (var item in lst) {\n            if (item.Contains(x)) {\n                row.Add(Tuple.Create(item.IndexOf(x),\
    \ item.LastIndexOf(x)));\n            }\n        }\n        row.Sort((a, b) =>\
    \ a.Item1.CompareTo(b.Item1));\n        row.Sort((a, b) => b.Item2.CompareTo(a.Item2));\n\
    \        result.AddRange(row);\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            foreach (long col in row)\
    \ {\n                col.Reverse();\n            }\n            col.Add(x);\n\
    \            result.Add(new Tuple<long, long>(row.Count, col.Count));\n      \
    \  }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n        result.Sort((x,\
    \ y) => y.Item2.CompareTo(x.Item2));\n        return result;", "        var result\
    \ = new List<Tuple<long, long>>();\n        var row = new List<Tuple<long, long>>();\n\
    \        foreach (var item in lst) {\n            row.Add(Tuple.Create(item.Count,\
    \ item.IndexOf(x)));\n        }\n        row.Sort((a, b) => a.Item1.CompareTo(b.Item1));\n\
    \        row.Sort((a, b) => b.Item2.CompareTo(a.Item2));\n        foreach (var\
    \ item in row) {\n            result.Add(Tuple.Create(item.Item1, item.Item2));\n\
    \        }\n        return result;", "        List<Tuple<long, long>> result =\
    \ new List<Tuple<long, long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), col.IndexOf(x)));\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col != x) {\n                    column.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(x)));\n                }\n \
    \           }\n        }\n        foreach (Tuple<long, long> row in result) {\n\
    \            foreach (Tuple<long, long> col in column) {\n                if (col.Item1\
    \ < row.Item1) {\n                    result.Insert(row.Item1, col);\n       \
    \         }\n            }\n        }\n        foreach (Tuple<long, long> row\
    \ in result) {\n            foreach (Tuple<long, long> col in column) {\n    \
    \            if (col.Item1 > row.Item1) {\n                    result.Insert(row.Item1,\
    \ col);\n                }\n            }\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     foreach (List<long> row in lst) {\n            row.Sort();\n           \
    \ foreach (long col in row) {\n                if (col != x) {\n             \
    \       result.Add(new Tuple<long, long>(row.Count, col.Count));\n           \
    \         break;\n                }\n            }\n        }\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    col.AddRange(row);\n            col.Sort();\n            foreach (long c\
    \ in col) {\n                if (c == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.Count - 1, col.Count - 1));\n                }\n     \
    \       }\n        }\n        result.Sort();\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        List<long>\
    \ row = new List<long>();\n        List<long> column = new List<long>();\n   \
    \     foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                    break;\n                }\n\
    \            }\n        }\n        foreach (List<long> row in lst) {\n       \
    \     foreach (long col in row) {\n                if (col != x) {\n         \
    \           column.Add(col);\n                }\n            }\n        }\n  \
    \      column.Sort();\n        column.Reverse();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(column[row.Count - 1]);\n             \
    \   }\n            }\n        }\n        row.Sort();\n        row.Reverse();\n\
    \        result.Sort();\n        result.Reverse();\n        return result;", " \
    \       var result = new List<Tuple<long, long>>();\n        foreach (var row\
    \ in lst) {\n            foreach (var col in row) {\n                if (col ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(row),\
    \ row.IndexOf(row) + 1));\n                    break;\n                }\n   \
    \         }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> ret = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Add(0);\n            col.Add(0);\n        }\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long c in col) {\n                if (row[c]\
    \ == x) {\n                    ret.Add(new Tuple<long, long>(row.IndexOf(c), col.IndexOf(c)));\n\
    \                }\n            }\n        }\n        ret.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        ret.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        return ret;",
  "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ col = new List<Tuple<long, long>>();\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col == x) {\n\
    \                    ret.Add(new Tuple<long, long>(row.IndexOf(row), col.IndexOf(col)));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    col.Remove(col);\n                }\n         \
    \   }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col.Count > 0) {\n                \
    \    row.Remove(row);\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col.Count > 0) {\n                    col.Remove(col);\n       \
    \         }\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col.Count >\
    \ 0) {\n                    row.Remove(row);\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col.Count > 0) {\n                    col.Remove(col);\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col.Count\
    \ > 0) {\n                    row.Remove(row);\n                }\n          \
    \  }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col.Count > 0) {\n                \
    \    col.Remove(col);\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col.Count > 0) {\n                    row.Remove(row);\n       \
    \         }\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col.Count >\
    \ 0) {\n                    col.Remove(col);\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col.Count > 0) {\n                    row.Remove(row);\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col.Count\
    \ > 0) {\n                    col.Remove(col);\n                }\n          \
    \  }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col.Count > 0) {\n                \
    \    row.Remove(row);\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in ", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n   \
    \     foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col != x) {\n                    column.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n\
    \            }\n        }\n        foreach (Tuple<long, long> column in column)\
    \ {\n            row.Insert(column.Item1, column.Item2);\n        }\n        foreach\
    \ (Tuple<long, long> row in row) {\n            column.Insert(row.Item1, row.Item2);\n\
    \        }\n        foreach (Tuple<long, long> column in column) {\n         \
    \   row.Insert(column.Item1, column.Item2);\n        }\n        foreach (Tuple<long,\
    \ long> row in row) {\n            column.Insert(row.Item1, row.Item2);\n    \
    \    }\n        foreach (Tuple<long, long> column in column) {\n            row.Insert(column.Item1,\
    \ column.Item2);\n        }\n        foreach (Tuple<long, long> row in row) {\n\
    \            column.Insert(row.Item1, row.Item2);\n        }\n        foreach\
    \ (Tuple<long, long> column in column) {\n            row.Insert(column.Item1,\
    \ column.Item2);\n        }\n        foreach (Tuple<long, long> row in row) {\n\
    \            column.Insert(row.Item1, row.Item2);\n        }\n        foreach\
    \ (Tuple<long, long> column in column) {\n            row.Insert(column.Item1,\
    \ column.Item2);\n        }\n        foreach (Tuple<long, long> row in row) {\n\
    \            column.Insert(row.Item1, row.Item2);\n        }\n        foreach\
    \ (Tuple<long, long> column in column) {\n            row.Insert(column.Item1,\
    \ column.Item2);\n        }\n        foreach (Tuple<long, long> row in row) {\n\
    \            column.Insert(row.Item1, row.Item2);\n        }\n        foreach\
    \ (Tuple<long, long> column in column) {\n            row.Insert(column.Item1,\
    \ column.Item2);\n        }\n        foreach (Tuple<long, long> row in row) {\n\
    \            column.Insert(row.Item1, row.Item2);\n        }\n        foreach\
    \ (Tuple<long, long> column in column) {\n            row.Insert(column.Item1,\
    \ column.Item2);\n        }", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n   \
    \     foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col != x) {\n                    column.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n\
    \            }\n        }\n        foreach (Tuple<long, long> column in column)\
    \ {\n            row.Insert(column.Item1, column.Item2);\n        }\n        foreach\
    \ (Tuple<long, long> row in row) {\n            column.Insert(row.Item1, row.Item2);\n\
    \        }\n        foreach (Tuple<long, long> column in column) {\n         \
    \   row.Insert(column.Item1, column.Item2);\n        }\n        foreach (Tuple<long,\
    \ long> row in row) {\n            result.Add(row);\n        }\n        foreach\
    \ (Tuple<long, long> column in column) {\n            result.Add(column);\n  \
    \      }\n        return result;", "        List<Tuple<long, long>> result = new\
    \ List<Tuple<long, long>>();\n        List<long> row = new List<long>();\n   \
    \     List<long> col = new List<long>();\n        foreach (List<long> row in lst)\
    \ {\n            row.Sort();\n            foreach (long c in row) {\n        \
    \        if (c == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                }\n                col.Add(c);\n            }\n\
    \            col.Sort();\n        }\n        result.Sort();\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> column = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    column.Sort();\n            if (row.Contains(x)) {\n                result.Add(new\
    \ Tuple<long, long>(row.IndexOf(x), column.IndexOf(x)));\n            }\n    \
    \    }\n        return result;", "        List<Tuple<long, long>> result = new\
    \ List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n    \
    \        foreach (long col in row) {\n                if (col == x) {\n      \
    \              result.Add(new Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n\
    \                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ row.IndexOf(col)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            List<long> col = new List<long>();\n\
    \            foreach (long val in row) {\n                if (val == x) {\n  \
    \                  col.Add(val);\n                }\n            }\n         \
    \   result.Add(new Tuple<long, long>(row.Count, col.Count));\n        }\n    \
    \    return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long c in row) {\n                if (c == x) {\n              \
    \      result.Add(new Tuple<long, long>(row.Count - 1, col.Count - 1));\n    \
    \                break;\n                }\n                col.Add(c);\n    \
    \        }\n            col.Sort();\n        }\n        result.Sort();\n     \
    \   return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> column\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ foreach (long col in row) {\n                if (col == x) {\n             \
    \       result.Add(new Tuple<long, long>(row.Count, col.Count));\n           \
    \     }\n            }\n        }\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col != x) {\n  \
    \                  column.Add(col);\n                }\n            }\n      \
    \  }\n        column.Sort();\n        column.Reverse();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(column[row.Count - 1]);\n             \
    \   }\n            }\n        }\n        row.Sort();\n        row.Reverse();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col != x) {\n                    result.Add(new Tuple<long,\
    \ long>(row[row.Count - 1], col));\n                }\n            }\n       \
    \ }\n        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            col.AddRange(row.Reverse());\n            col.Sort();\n\
    \            foreach (long c in col) {\n                if (c == x) {\n      \
    \              result.Add(new Tuple<long, long>(row.Count, col.Count));\n    \
    \                break;\n                }\n            }\n        }\n       \
    \ return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> col = new List<Tuple<long, long>>();\n      \
    \  foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    row.Add(col);\n        \
    \            col.Add(col);\n                    result.Add(Tuple.Create(row.Count,\
    \ col.Count));\n                }\n            }\n        }\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Remove(col);\n                    col.Remove(col);\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(Tuple.Create(row.Count, col.Count));\n       \
    \         }\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col == x) {\n\
    \                    row.Add(col);\n                    col.Add(col);\n      \
    \              result.Add(Tuple.Create(row.Count, col.Count));\n             \
    \   }\n            }\n        }\n        foreach (List<long> row in lst) {\n \
    \           foreach (long col in row) {\n                if (col != x) {\n   \
    \                 row.Remove(col);\n                    col.Remove(col);\n   \
    \             }\n            }\n        }\n        foreach (List<long> row in\
    \ lst) {\n            foreach (long col in row) {\n                if (col !=\
    \ x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(Tuple.Create(row.Count, col.Count));\n       \
    \         }\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col == x) {\n\
    \                    row.Add(col);\n                    col.Add(col);\n      \
    \              result.Add(Tuple.Create(row.Count, col.Count));\n             \
    \   }\n            }\n        }\n        foreach (List<long> row in lst) {\n \
    \           foreach (long col in row) {\n                if (col != x) {\n   \
    \                 row.Remove(col);\n                    col.Remove(col);\n   \
    \             }\n            }\n        }\n        foreach (List<long> row in\
    \ lst) {\n            foreach (long col in row) {\n                if (col !=\
    \ x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(Tuple.Create(row.Count, col.Count));\n       \
    \         }\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col == x) {\n\
    \                    row.Add(col);", "        List<Tuple<long, long>> result =\
    \ new List<Tuple<long, long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), col.IndexOf(x)));\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col != x) {\n                    column.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(x)));\n                }\n \
    \           }\n        }\n        column.Sort((x, y) => y.Item1.CompareTo(x.Item1));\n\
    \        column.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        foreach (Tuple<long,\
    \ long> item in column) {\n            row.Add(lst[item.Item1].IndexOf(item.Item2));\n\
    \        }\n        row.Sort((x, y) => y.Item1.CompareTo(x.Item1));\n        row.Sort((x,\
    \ y) => y.Item2.CompareTo(x.Item2));\n        foreach (Tuple<long, long> item\
    \ in row) {\n            column.Add(lst[item.Item1].IndexOf(item.Item2));\n  \
    \      }\n        column.Sort((x, y) => y.Item1.CompareTo(x.Item1));\n       \
    \ column.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        foreach (Tuple<long,\
    \ long> item in column) {\n            result.Add(new Tuple<long, long>(item.Item1,\
    \ item.Item2));\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> col =\
    \ new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col == x) {\n  \
    \                  result.Add(new Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Remove(col);\n                }\n         \
    \   }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col != x) {\n                    col.Add(col);\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Insert(row.IndexOf(row), col);\n          \
    \      }\n            }\n        }\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col != x) {\n  \
    \                  col.Remove(col);\n                }\n            }\n      \
    \  }\n        foreach (List<long> row in lst) {\n            foreach (long col\
    \ in row) {\n                if (col != x) {\n                    row.Insert(row.IndexOf(row),\
    \ col);\n                }\n            }\n        }\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    col.Insert(col.IndexOf(col), col);\n          \
    \      }\n            }\n        }\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col != x) {\n  \
    \                  row.Insert(row.IndexOf(row), col);\n                }\n   \
    \         }\n        }\n        foreach (List<long> row in lst) {\n          \
    \  foreach (long col in row) {\n                if (col != x) {\n            \
    \        col.Insert(col.IndexOf(col), col);\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col != x) {\n                    row.Insert(row.IndexOf(row),\
    \ col);\n                }\n            }\n        }\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    col.Insert(col.IndexOf(col), col);\n          \
    \      }\n            }\n        }\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col != x) {\n  \
    \                  row.Insert(row.IndexOf(row), col);\n                }\n   \
    \         }\n        }\n        ", "        var result = new List<Tuple<long,\
    \ long>>();\n        var rows = lst.Select(l => l.Count).OrderBy(l => l).ToList();\n\
    \        var cols = lst.Select(l => l.Count).OrderByDescending(l => l).ToList();\n\
    \        var row = 0;\n        var col = 0;\n        while (row < rows.Count &&\
    \ col < cols.Count) {\n            if (rows[row] == cols[col]) {\n           \
    \     var tuple = new Tuple<long, long>(row, col);\n                result.Add(tuple);\n\
    \                row++;\n                col++;\n            }\n            else\
    \ if (rows[row] < cols[col]) {\n                row++;\n            }\n      \
    \      else {\n                col++;\n            }\n        }\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    row.Reverse();\n            foreach (long col in row) {\n               \
    \ if (col == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                }\n            }\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long c in row) {\n                col.Add(c);\n            }\n \
    \           col.Sort();\n            result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n            col.Clear();\n        }\n        result.Sort((x, y)\
    \ => x.Item1.CompareTo(y.Item1));\n        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n\
    \        foreach (Tuple<long, long> t in result) {\n            if (t.Item1 ==\
    \ x) {\n                result.Remove(t);\n                break;\n          \
    \  }\n        }\n        return result;", "        List<Tuple<long, long>> result\
    \ = new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            List<long> columns = new List<long>();\n            foreach (long\
    \ y in row) {\n                if (y == x) {\n                    columns.Add(y);\n\
    \                }\n            }\n            columns.Sort();\n            columns.Reverse();\n\
    \            result.Add(new Tuple<long, long>(columns.Count, columns.Count));\n\
    \        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n     \
    \   result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long col in row) {\n                if (col == x) {\n          \
    \          result.Add(new Tuple<long, long>(row.Count, col.Count));\n        \
    \        }\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            row.Sort();\n            foreach (long col in row) {\n      \
    \          if (col != x) {\n                    col.Sort();\n                \
    \    for (int i = 0; i < row.Count; i++) {\n                        for (int j\
    \ = 0; j < col.Count; j++) {\n                            if (i == row.Count -\
    \ 1 && j == col.Count - 1) {\n                                result.Add(new Tuple<long,\
    \ long>(i, j));\n                            }\n                        }\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    res.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return res.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ foreach (long col in row) {\n                if (col == x) {\n             \
    \       result.Add(new Tuple<long, long>(row.Count, col.Count));\n           \
    \     }\n            }\n        }\n        List<Tuple<long, long>> sorted = new\
    \ List<Tuple<long, long>>();\n        foreach (Tuple<long, long> t in result)\
    \ {\n            sorted.Add(new Tuple<long, long>(t.Item1, t.Item2));\n      \
    \  }\n        sorted.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n        sorted.Sort((x,\
    \ y) => y.Item2.CompareTo(x.Item2));\n        return sorted;", "        List<Tuple<long,\
    \ long>> ret = new List<Tuple<long, long>>();\n        List<long> row = new List<long>();\n\
    \        List<long> col = new List<long>();\n        foreach (List<long> row in\
    \ lst) {\n            row.Sort();\n            foreach (long c in row) {\n   \
    \             col.Add(c);\n            }\n            col.Sort();\n          \
    \  foreach (long c in col) {\n                if (c == x) {\n                \
    \    ret.Add(new Tuple<long, long>(row.Count, col.Count));\n                }\n\
    \            }\n        }\n        foreach (Tuple<long, long> t in ret) {\n  \
    \          t.Item1 = t.Item1 - 1;\n            t.Item2 = t.Item2 - 1;\n      \
    \  }\n        ret.Sort();\n        return ret;", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        foreach (List<long> row in\
    \ lst) {\n            foreach (long col in row) {\n                if (col ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ row.IndexOf(col)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      var result = new List<Tuple<long, long>>();\n        var row = new List<Tuple<long,\
    \ long>>();\n        var col = new List<Tuple<long, long>>();\n        var rowIndex\
    \ = 0;\n        var colIndex = 0;\n        foreach (var row in lst) {\n      \
    \      row.Sort();\n            row.Reverse();\n            foreach (var col in\
    \ row) {\n                col.Sort();\n                col.Reverse();\n      \
    \          if (colIndex == x) {\n                    result.Add(new Tuple<long,\
    \ long>(rowIndex, colIndex));\n                }\n                colIndex++;\n\
    \            }\n            rowIndex++;\n            colIndex = 0;\n        }\n\
    \        result.Sort();\n        result.Reverse();\n        return result;", " \
    \       List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n    \
    \    List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long c in row) {\n                col.Add(c);\n            }\n \
    \           col.Sort();\n            result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        foreach (Tuple<long, long> t in result) {\n            if (t.Item1 ==\
    \ x) {\n                for (int i = 0; i < t.Item2; i++) {\n                \
    \    result.Add(new Tuple<long, long>(t.Item1, t.Item2 - i));\n              \
    \  }\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            foreach (long c in row)\
    \ {\n                col.Add(c);\n            }\n            col.Sort();\n   \
    \         foreach (long c in col) {\n                if (c == x) {\n         \
    \           result.Add(new Tuple<long, long>(row.Count, col.Count));\n       \
    \         }\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column\
    \ = new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col == x) {\n  \
    \                  result.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    column.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        column.Sort((x,\
    \ y) => y.Item1.CompareTo(x.Item1));\n        column.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n\
    \        foreach (Tuple<long, long> tuple in column) {\n            row.Add(tuple.Item1);\n\
    \        }\n        row.Sort((x, y) => y.Item1.CompareTo(x.Item1));\n        row.Sort((x,\
    \ y) => y.Item2.CompareTo(x.Item2));\n        foreach (Tuple<long, long> tuple\
    \ in row) {\n            result.Add(tuple);\n        }\n        return result;",
  "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ col = new List<Tuple<long, long>>();\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col == x) {\n\
    \                    ret.Add(new Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    col.Reverse();\n                    row.Reverse();\n\
    \                    col.Reverse();\n                    row.Reverse();\n    \
    \                col.Reverse();\n                    ret.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ row.IndexOf(col)));\n                }\n            }\n        }\n        return\
    \ ret;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n      \
    \  List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col != x) {\n                    column.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        foreach\
    \ (Tuple<long, long> row in result) {\n            row.Item2 = row.Item2 - column.IndexOf(row);\n\
    \            row.Item1 = row.Item1 - row.IndexOf(row);\n            row.Item1\
    \ = row.Item1 - column.IndexOf(row);\n            row.Item1 = row.Item1 - row.IndexOf(row);\n\
    \            row.Item1 = row.Item1 - column.IndexOf(row);\n            row.Item1\
    \ = row.Item1 - row.IndexOf(row);\n            row.Item1 = row.Item1 - column.IndexOf(row);\n\
    \            row.Item1 = row.Item1 - row.IndexOf(row);\n            row.Item1\
    \ = row.Item1 - column.IndexOf(row);\n            row.Item1 = row.Item1 - row.IndexOf(row);\n\
    \            row.Item1 = row.Item1 - column.IndexOf(row);\n            row.Item1\
    \ = row.Item1 - row.IndexOf(row);\n            row.Item1 = row.Item1 - column.IndexOf(row);\n\
    \            row.Item1 = row.Item1 - row.IndexOf(row);\n            row.Item1\
    \ = row.Item1 - column.IndexOf(row);\n            row.Item1 = row.Item1 - row.IndexOf(row);\n\
    \            row.Item1 = row.Item1 - column.IndexOf(row);\n            row.Item1\
    \ = row.Item1 - row.IndexOf(row);\n            row.Item1 = row.Item1 - column.IndexOf(row);\n\
    \            row.Item1 = row.Item1 - row.IndexOf(row);\n            row.Item1\
    \ = row.Item1 - column.IndexOf(row);\n            row.Item1 = row.Item1 - row.IndexOf(row);\n\
    \            row.Item1 = row.Item1 - column.IndexOf(row);\n            row.Item1\
    \ = row.Item1 - row.IndexOf(row);\n            row.Item1 = row.Item1 - column.IndexOf(row);\n\
    \            row.Item1 = row.Item1 - row.IndexOf(row);\n            row.Item1\
    \ = row.Item1 - column.IndexOf(row);\n            row.Item1 = row.Item", "   \
    \     List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n      \
    \  List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> col = new List<Tuple<long, long>>();\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(col)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col != x) {\n                    col.Remove(col);\n            \
    \    }\n            }\n        }\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col.Count > 0) {\n\
    \                    row.Remove(col);\n                }\n            }\n    \
    \    }\n        foreach (List<long> row in lst) {\n            foreach (long col\
    \ in row) {\n                if (col.Count > 0) {\n                    col.Remove(col);\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col.Count\
    \ > 0) {\n                    row.Remove(col);\n                }\n          \
    \  }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col.Count > 0) {\n                \
    \    col.Remove(col);\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col.Count > 0) {\n                    row.Remove(col);\n       \
    \         }\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col.Count >\
    \ 0) {\n                    col.Remove(col);\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col.Count > 0) {\n                    row.Remove(col);\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col.Count\
    \ > 0) {\n                    col.Remove(col);\n                }\n          \
    \  }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col.Count > 0) {\n                \
    \    row.Remove(col);\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col.Count > 0) {\n                    col.Remove(col);\n       \
    \         }\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col.Count >\
    \ 0) {\n                    row.Remove(col);\n                }\n            }\n\
    \        }\n        foreach (List<long> row in ", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        foreach (List<long> row in\
    \ lst) {\n            foreach (long col in row) {\n                if (col ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ row.IndexOf(col)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long c in row) {\n                col.Add(c);\n            }\n \
    \           col.Sort();\n            foreach (long c in col) {\n             \
    \   result.Add(new Tuple<long, long>(row.IndexOf(c), col.IndexOf(c)));\n     \
    \       }\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => x.Item2.CompareTo(y.Item2));\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> col = new List<Tuple<long, long>>();\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        List<long>\
    \ row = new List<long>();\n        List<long> col = new List<long>();\n      \
    \  foreach (List<long> row in lst) {\n            row.Add(0);\n            col.Add(0);\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            col.Sort();\n            foreach (long c in col) {\n            \
    \    if (c == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                }\n            }\n        }\n        result.Sort();\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            foreach (long c in row) {\n                col.Add(c);\n\
    \            }\n            col.Sort();\n            foreach (long c in col) {\n\
    \                if (c == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> column\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ foreach (long col in row) {\n                if (col == x) {\n             \
    \       result.Add(new Tuple<long, long>(row.Count, col.Count));\n           \
    \     }\n            }\n        }\n        List<Tuple<long, long>> sortedResult\
    \ = result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();\n  \
    \      foreach (Tuple<long, long> tuple in sortedResult) {\n            row.Add(tuple.Item1);\n\
    \            column.Add(tuple.Item2);\n        }\n        result.Add(new Tuple<long,\
    \ long>(row.Count, column.Count));\n        return result;", "        var result\
    \ = new List<Tuple<long, long>>();\n        foreach (var row in lst) {\n     \
    \       var tuple = new Tuple<long, long>();\n            foreach (var col in\
    \ row) {\n                if (col == x) {\n                    tuple.Item1 = row.IndexOf(col);\n\
    \                    tuple.Item2 = col.IndexOf(x);\n                    break;\n\
    \                }\n            }\n            result.Add(tuple);\n        }\n\
    \        return result.OrderBy(t => t.Item1).ThenByDescending(t => t.Item2).ToList();",
  "        var result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            var rowTuple = new List<Tuple<long, long>>();\n        \
    \    foreach (var col in row) {\n                if (col == x) {\n           \
    \         rowTuple.Add(Tuple.Create(row.IndexOf(col), row.IndexOf(col)));\n  \
    \              }\n            }\n            result.Add(rowTuple.OrderByDescending(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).FirstOrDefault());\n        }\n \
    \       return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long num in row) {\n\
    \                if (num == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(num), row.IndexOf(num)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n   \
    \     foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), col.IndexOf(x)));\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col != x) {\n                    column.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(x)));\n                }\n \
    \           }\n        }\n        foreach (Tuple<long, long> row in result) {\n\
    \            foreach (Tuple<long, long> col in column) {\n                if (col.Item1\
    \ < row.Item1) {\n                    result.Remove(row);\n                  \
    \  column.Remove(col);\n                    break;\n                }\n      \
    \      }\n        }\n        return result;", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        List<long> row = new List<long>();\n\
    \        List<long> col = new List<long>();\n        foreach (List<long> row in\
    \ lst) {\n            row.Sort();\n            foreach (long col in row) {\n \
    \               if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        return result.OrderByDescending(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> ret = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> col = new List<Tuple<long, long>>();\n      \
    \  foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    ret.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), col.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            foreach (long col in row) {\n                col.Sort();\n      \
    \          if (col.First() == row.First()) {\n                    col.Reverse();\n\
    \                    col.Reverse();\n                    col.Reverse();\n    \
    \                col.Reverse();\n                    col.Reverse();\n        \
    \            col.Reverse();\n                    col.Reverse();\n            \
    \        col.Reverse();\n                    col.Reverse();\n                \
    \    col.Reverse();\n                    col.Reverse();\n                    col.Reverse();\n\
    \                    col.Reverse();\n                    col.Reverse();\n    \
    \                col.Reverse();\n                    col.Reverse();\n        \
    \            col.Reverse();\n                    col.Reverse();\n            \
    \        col.Reverse();\n                    col.Reverse();\n                \
    \    col.Reverse();\n                    col.Reverse();\n                    col.Reverse();\n\
    \                    col.Reverse();\n                    col.Reverse();\n    \
    \                col.Reverse();\n                    col.Reverse();\n        \
    \            col.Reverse();\n                    col.Reverse();\n            \
    \        col.Reverse();\n                    col.Reverse();\n                \
    \    col.Reverse();\n                    col.Reverse();\n                    col.Reverse();\n\
    \                    col.Reverse();\n                    col.Reverse();\n    \
    \                col.Reverse();\n                    col.Reverse();\n        \
    \            col.Reverse();\n                    col.Reverse();\n            \
    \        col.Reverse();\n                    col.Reverse();\n                \
    \    col.Reverse();\n                    col.Reverse();\n                    col.Reverse();\n\
    \                    col.Reverse();\n                    col.Reverse();\n    \
    \                col.Reverse();\n                    col.Reverse();\n        \
    \            col.Reverse();\n                    col.Reverse();\n            \
    \        col.Reverse();\n                    col.Reverse();\n                \
    \    col.Reverse();\n                    col.Reverse();\n                    col.Reverse();\n\
    \                    col.Reverse();\n                    col.Reverse();\n    \
    \                col.Reverse();\n                    col.Reverse();\n        \
    \            col.Reverse();\n                    col.Reverse();\n            \
    \        col.Reverse();\n                    col.Reverse();\n                \
    \    col.Reverse();\n                    col.Reverse();\n                    col.Reverse();\n\
    \                    col.Reverse();\n                    col.Reverse();\n    \
    \                col.Reverse();\n                    col.Reverse();\n        \
    \            col.Reverse();\n                    col.Reverse();\n            \
    \        col.Reverse();\n                    col.Reverse();\n                \
    \    col.Reverse();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            row.Reverse();\n            col.AddRange(row);\n  \
    \          col.Reverse();\n            foreach (long c in col) {\n           \
    \     if (c == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        List<Tuple<long, long>> result =\
    \ new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col == x) {\n  \
    \                  result.Add(new Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n\
    \                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var col in row) {\n                if (col == x)\
    \ {\n                    result.Add(new Tuple<long, long>(row.IndexOf(row), row.IndexOf(col)));\n\
    \                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            foreach (long c in row)\
    \ {\n                col.Add(c);\n            }\n            col.Sort();\n   \
    \         result.Add(new Tuple<long, long>(row.Count, col.Count));\n        }\n\
    \        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n        result.Sort((x,\
    \ y) => y.Item2.CompareTo(x.Item2));\n        foreach (Tuple<long, long> t in\
    \ result) {\n            if (t.Item1 == x) {\n                result.Remove(t);\n\
    \                break;\n            }\n        }\n        foreach (Tuple<long,\
    \ long> t in result) {\n            if (t.Item2 == x) {\n                result.Remove(t);\n\
    \                break;\n            }\n        }\n        return result;", " \
    \       List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n    \
    \    List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> col = new List<Tuple<long, long>>();\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                }\n            }\n        }\n        foreach (Tuple<long, long>\
    \ row in result) {\n            row.Sort();\n            foreach (Tuple<long,\
    \ long> col in row) {\n                col.Sort();\n            }\n        }\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        foreach (var row in lst) {\n            var rowTuple = new List<Tuple<long,\
    \ long>>();\n            foreach (var item in row) {\n                rowTuple.Add(Tuple.Create(item,\
    \ item));\n            }\n            rowTuple.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \            rowTuple.Sort((x, y) => x.Item2.CompareTo(y.Item2));\n          \
    \  var rowTuple2 = rowTuple.OrderByDescending(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).FirstOrDefault();\n            if (rowTuple2 != null)\n        \
    \        result.Add(rowTuple2);\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => x.Item2.CompareTo(y.Item2));\n        var result2\
    \ = result.Where(x => x.Item1 == x).OrderByDescending(x => x.Item2).FirstOrDefault();\n\
    \        if (result2 != null)\n            return result2;\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long c in row) {\n                col.Add(c);\n            }\n \
    \           col.Sort();\n            foreach (long c in col) {\n             \
    \   if (c == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                }\n            }\n        }\n        result.Sort();\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n   \
    \     foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), col.IndexOf(x)));\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col != x) {\n                    column.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(x)));\n                }\n \
    \           }\n        }\n        foreach (Tuple<long, long> tuple in result.OrderByDescending(x\
    \ => x.Item1)) {\n            row.Add(tuple.Item2);\n        }\n        foreach\
    \ (Tuple<long, long> tuple in column.OrderByDescending(x => x.Item1)) {\n    \
    \        column.Add(tuple.Item2);\n        }\n        result.AddRange(column);\n\
    \        result.AddRange(row);\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column\
    \ = new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col == x) {\n  \
    \                  result.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    column.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        foreach\
    \ (Tuple<long, long> row in result) {\n            foreach (Tuple<long, long>\
    \ column in column) {\n                if (row.Item1 > column.Item1) {\n     \
    \               row.Item1 = column.Item1;\n                }\n               \
    \ if (row.Item2 > column.Item2) {\n                    row.Item2 = column.Item2;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        List<long>\
    \ row = new List<long>();\n        List<long> col = new List<long>();\n      \
    \  foreach (List<long> row in lst) {\n            row.Sort();\n            foreach\
    \ (long c in row) {\n                col.Add(c);\n            }\n            col.Sort();\n\
    \            foreach (long c in col) {\n                if (c == x) {\n      \
    \              result.Add(new Tuple<long, long>(row.Count, col.Count));\n    \
    \            }\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> column = new List<long>();\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            column.Sort();\n\
    \            if (row.Contains(x)) {\n                result.Add(new Tuple<long,\
    \ long>(row.IndexOf(x), column.IndexOf(x)));\n            }\n        }\n     \
    \   return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> column\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ foreach (long col in row) {\n                if (col == x) {\n             \
    \       result.Add(new Tuple<long, long>(row.Count, col.Count));\n           \
    \     }\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<List<long>> row\
    \ = new List<List<long>>();\n        foreach (List<long> column in lst) {\n  \
    \          row.Add(column);\n        }\n        row.Sort((x, y) => x.Count > y.Count\
    \ ? 1 : -1);\n        foreach (List<long> column in row) {\n            column.Sort((x,\
    \ y) => x > y ? 1 : -1);\n        }\n        foreach (List<long> column in row)\
    \ {\n            column.Sort((x, y) => x > y ? 1 : -1);\n        }\n        foreach\
    \ (List<long> column in row) {\n            column.Sort((x, y) => x > y ? 1 :\
    \ -1);\n        }\n        foreach (List<long> column in row) {\n            column.Sort((x,\
    \ y) => x > y ? 1 : -1);\n        }\n        foreach (List<long> column in row)\
    \ {\n            column.Sort((x, y) => x > y ? 1 : -1);\n        }\n        foreach\
    \ (List<long> column in row) {\n            column.Sort((x, y) => x > y ? 1 :\
    \ -1);\n        }\n        foreach (List<long> column in row) {\n            column.Sort((x,\
    \ y) => x > y ? 1 : -1);\n        }\n        foreach (List<long> column in row)\
    \ {\n            column.Sort((x, y) => x > y ? 1 : -1);\n        }\n        foreach\
    \ (List<long> column in row) {\n            column.Sort((x, y) => x > y ? 1 :\
    \ -1);\n        }\n        foreach (List<long> column in row) {\n            column.Sort((x,\
    \ y) => x > y ? 1 : -1);\n        }\n        foreach (List<long> column in row)\
    \ {\n            column.Sort((x, y) => x > y ? 1 : -1);\n        }\n        foreach\
    \ (List<long> column in row) {\n            column.Sort((x, y) => x > y ? 1 :\
    \ -1);\n        }\n        foreach (List<long> column in row) {\n            column.Sort((x,\
    \ y) => x > y ? 1 : -1);\n        }\n        foreach (List<long> column in row)\
    \ {\n            column.Sort((x, y) => x > y ? 1 : -1);\n        }\n        foreach\
    \ (List<long> column in row) {\n            column.Sort((x, y) => x > y ? 1 :\
    \ -1);\n        }\n        foreach (List<long> column in row) {\n            column.Sort((x,\
    \ y) => x > y ? 1 : -1);\n        }\n        foreach (List<long> column in row)\
    \ {\n            column.Sort((x, y) => x > y ? 1 : -1);\n        }\n        foreach\
    \ (List<long> column in row) {\n            column.Sort((x, y) => x > y ? 1 :\
    \ -1);\n        }\n        foreach (List<long> column in row) {\n            column.Sort((x,\
    \ y) => x > ", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count - 1).ToList());\n\
    \            row.RemoveAll(x => x == x);\n            result.AddRange(row.Select(x\
    \ => Tuple.Create(row.IndexOf(x), col.IndexOf(x))))\n                .OrderByDescending(x\
    \ => x.Item1)\n                .ThenByDescending(x => x.Item2)\n             \
    \   .ToList();\n            col.RemoveAll(x => x == x);\n        }\n        result.AddRange(col.Select(x\
    \ => Tuple.Create(row.IndexOf(x), x)))\n            .OrderByDescending(x => x.Item1)\n\
    \            .ThenByDescending(x => x.Item2)\n            .ToList();\n       \
    \ result.Sort();\n        return result;", "        var result = new List<Tuple<long,\
    \ long>>();\n        var rows = lst.Where(x => x.Count > 0).ToList();\n      \
    \  var rows = rows.OrderBy(x => x.Count).ToList();\n        var rows = rows.OrderByDescending(x\
    \ => x.Count).ToList();\n        var rows = rows.OrderBy(x => x.First()).ToList();\n\
    \        var rows = rows.OrderByDescending(x => x.First()).ToList();\n       \
    \ var rows = rows.OrderBy(x => x.Last()).ToList();\n        var rows = rows.OrderByDescending(x\
    \ => x.Last()).ToList();\n        var rows = rows.OrderBy(x => x.ElementAt(0)).ToList();\n\
    \        var rows = rows.OrderByDescending(x => x.ElementAt(0)).ToList();\n  \
    \      var rows = rows.OrderBy(x => x.ElementAt(1)).ToList();\n        var rows\
    \ = rows.OrderByDescending(x => x.ElementAt(1)).ToList();\n        foreach (var\
    \ row in rows) {\n            var cols = row.Where(x => x.Count > 0).ToList();\n\
    \            var cols = cols.OrderBy(x => x.Count).ToList();\n            var\
    \ cols = cols.OrderByDescending(x => x.Count).ToList();\n            var cols\
    \ = cols.OrderBy(x => x.First()).ToList();\n            var cols = cols.OrderByDescending(x\
    \ => x.First()).ToList();\n            var cols = cols.OrderBy(x => x.Last()).ToList();\n\
    \            var cols = cols.OrderByDescending(x => x.Last()).ToList();\n    \
    \        var cols = cols.OrderBy(x => x.ElementAt(0)).ToList();\n            var\
    \ cols = cols.OrderByDescending(x => x.ElementAt(0)).ToList();\n            var\
    \ cols = cols.OrderBy(x => x.ElementAt(1)).ToList();\n            var cols = cols.OrderByDescending(x\
    \ => x.ElementAt(1)).ToList();\n            foreach (var col in cols) {\n    \
    \            var tuple = new Tuple<long, long>(row.First(), col.First());\n  \
    \              result.Add(tuple);\n            }\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<List<long>> row = new List<List<long>>();\n        foreach (List<long>\
    \ list in lst) {\n            row.Add(list);\n        }\n        row.Sort((x,\
    \ y) => x.Count > y.Count ? 1 : -1);\n        foreach (List<long> list in row)\
    \ {\n            list.Sort((x, y) => x > y ? 1 : -1);\n        }\n        foreach\
    \ (List<long> list in row) {\n            foreach (long num in list) {\n     \
    \           if (num == x) {\n                    result.Add(new Tuple<long, long>(list.IndexOf(num),\
    \ list.IndexOf(num)));\n                }\n            }\n        }\n        return\
    \ result;", "        var row = new List<Tuple<long, long>>();\n        var rowIndex\
    \ = 0;\n        var rowIndexMax = lst.Count - 1;\n        var columnIndex = 0;\n\
    \        var columnIndexMax = lst[0].Count - 1;\n        while (rowIndex < rowIndexMax\
    \ && columnIndex < columnIndexMax) {\n            var rowElement = lst[rowIndex][columnIndex];\n\
    \            if (rowElement == x) {\n                row.Add(Tuple.Create(rowIndex,\
    \ columnIndex));\n            }\n            columnIndex++;\n        }\n     \
    \   row.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n        row.Reverse();\n\
    \        return row;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n   \
    \     foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col != x) {\n                    column.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n\
    \            }\n        }\n        foreach (Tuple<long, long> tuple in column)\
    \ {\n            row.Insert(tuple.Item1, tuple.Item2);\n        }\n        foreach\
    \ (Tuple<long, long> tuple in row) {\n            column.Insert(tuple.Item1, tuple.Item2);\n\
    \        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n     \
    \   column.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n        row.Sort((x, y)\
    \ => x.Item1.CompareTo(y.Item1));\n        return result;", "        var result\
    \ = new List<Tuple<long, long>>();\n        var row = new List<long>();\n    \
    \    var column = new List<long>();\n        foreach (var row in lst) {\n    \
    \        row.ForEach(x => column.Add(x));\n            if (column.Count == x)\
    \ {\n                result.Add(Tuple.Create(row.IndexOf(column.First()), column.IndexOf(column.Last())));\n\
    \                column.RemoveAt(0);\n            }\n        }\n        column.ForEach(x\
    \ => row.Add(x));\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        return result;",
  "        var result = new List<Tuple<long, long>>();\n        var row = new List<long>();\n\
    \        var column = new List<long>();\n        foreach (var item in lst) {\n\
    \            if (item.Count == 0) {\n                row.Add(0);\n           \
    \     column.Add(0);\n            }\n            else if (item.Count == 1) {\n\
    \                row.Add(item[0]);\n                column.Add(0);\n         \
    \   }\n            else {\n                var maxRow = item.Max();\n        \
    \        var maxColumn = item.Max(x => x);\n                if (maxRow == x) {\n\
    \                    row.Add(maxRow);\n                    column.Add(maxColumn);\n\
    \                }\n                else if (maxColumn == x) {\n             \
    \       row.Add(maxRow);\n                    column.Add(maxColumn);\n       \
    \         }\n                else {\n                    row.Add(maxRow);\n  \
    \                  column.Add(maxColumn);\n                }\n            }\n\
    \        }\n        result.Add(new Tuple<long, long>(row.Count, column.Count));\n\
    \        foreach (var item in row) {\n            result.Add(new Tuple<long, long>(item,\
    \ 0));\n        }\n        foreach (var item in column) {\n            result.Add(new\
    \ Tuple<long, long>(0, item));\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => y.Item1.CompareTo(x.Item1));\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            List<Tuple<long, long>> rowResult\
    \ = new List<Tuple<long, long>>();\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    rowResult.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n            result.AddRange(rowResult);\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            foreach (long col in row)\
    \ {\n                col.Sort();\n                if (col == x) {\n          \
    \          result.Add(new Tuple<long, long>(row.Count, col.Count));\n        \
    \        }\n            }\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row) {\n                if (col == x) {\n                    res.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return res.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<List<long>> row = new List<List<long>>();\n        List<List<long>>\
    \ col = new List<List<long>>();\n        foreach (List<long> list in lst) {\n\
    \            row.Add(list);\n        }\n        foreach (List<long> list in row)\
    \ {\n            col.Add(list);\n        }\n        foreach (List<long> list in\
    \ col) {\n            foreach (long num in list) {\n                if (num ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(list.IndexOf(num),\
    \ list.IndexOf(num)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> list in col) {\n            foreach (long num in list) {\n     \
    \           if (num != x) {\n                    result.Add(new Tuple<long, long>(list.IndexOf(num),\
    \ list.IndexOf(num)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> list in row) {\n            foreach (long num in list) {\n     \
    \           if (num != x) {\n                    result.Add(new Tuple<long, long>(list.IndexOf(num),\
    \ list.IndexOf(num)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> list in row) {\n            foreach (long num in list) {\n     \
    \           if (num == x) {\n                    result.Add(new Tuple<long, long>(list.IndexOf(num),\
    \ list.IndexOf(num)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> list in col) {\n            foreach (long num in list) {\n     \
    \           if (num != x) {\n                    result.Add(new Tuple<long, long>(list.IndexOf(num),\
    \ list.IndexOf(num)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> list in col) {\n            foreach (long num in list) {\n     \
    \           if (num == x) {\n                    result.Add(new Tuple<long, long>(list.IndexOf(num),\
    \ list.IndexOf(num)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> list in row) {\n            foreach (long num in list) {\n     \
    \           if (num != x) {\n                    result.Add(new Tuple<long, long>(list.IndexOf(num),\
    \ list.IndexOf(num)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> list in row) {\n            foreach (long num in list) {\n     \
    \           if (num == x) {\n                    result.Add(new Tuple<long, long>(list.IndexOf(num),\
    \ list.IndexOf(num)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> list in col) {\n            foreach (long num in list) {\n     \
    \           if (num != x) {\n                    result.Add(new Tuple<long, long>(list.IndexOf(num),\
    \ list.IndexOf(num)));\n                }\n            }\n        }\n        foreach\
    \ (List<", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n      \
    \  foreach (List<long> column in lst) {\n            row.Add(new Tuple<long, long>(column.Count,\
    \ column.Sum()));\n        }\n        row.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        row.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        foreach (Tuple<long,\
    \ long> t in row) {\n            if (t.Item1 == x) {\n                result.Add(new\
    \ Tuple<long, long>(t.Item1, t.Item2));\n            }\n        }\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            List<long> columns = new\
    \ List<long>();\n            foreach (long value in row) {\n                if\
    \ (value == x) {\n                    columns.Add(value);\n                }\n\
    \            }\n            result.Add(new Tuple<long, long>(columns.Count, columns.Last()));\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> column in lst) {\n            row.Add(new Tuple<long,\
    \ long>(column.Count, 0));\n        }\n        row.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        foreach (Tuple<long, long> t in row) {\n            foreach (long c in\
    \ t.Item1) {\n                if (c == x) {\n                    result.Add(new\
    \ Tuple<long, long>(t.Item1, t.Item2));\n                }\n            }\n  \
    \      }\n        result.Sort((x, y) => x.Item2.CompareTo(y.Item2));\n       \
    \ return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            col.Reverse();\n            foreach (long col in col)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n   \
    \     foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col != x) {\n                    column.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n\
    \            }\n        }\n        foreach (Tuple<long, long> row in result) {\n\
    \            foreach (Tuple<long, long> col in column) {\n                if (col.Item1\
    \ > row.Item1) {\n                    result.Insert(row.Item2, row);\n       \
    \             break;\n                }\n            }\n        }\n        foreach\
    \ (Tuple<long, long> row in result) {\n            foreach (Tuple<long, long>\
    \ col in column) {\n                if (col.Item2 > row.Item2) {\n           \
    \         result.Insert(row.Item2, row);\n                    break;\n       \
    \         }\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            foreach (long c in row)\
    \ {\n                col.Add(c);\n            }\n            col.Sort();\n   \
    \         foreach (long c in col) {\n                if (c == x) {\n         \
    \           result.Add(new Tuple<long, long>(row.Count, col.Count));\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<List<long>> row = new List<List<long>>();\n        foreach\
    \ (List<long> column in lst) {\n            row.Add(column);\n        }\n    \
    \    row.Sort((x, y) => x.Count > y.Count ? 1 : -1);\n        foreach (List<long>\
    \ column in row) {\n            column.Sort((x, y) => x > y ? 1 : -1);\n     \
    \   }\n        foreach (List<long> column in row) {\n            foreach (long\
    \ value in column) {\n                if (value == x) {\n                    result.Add(new\
    \ Tuple<long, long>(column.IndexOf(value), row.IndexOf(value)));\n           \
    \     }\n            }\n        }\n        result.Sort((x, y) => x.Item1 > y.Item1\
    \ ? 1 : -1);\n        return result;", "        List<Tuple<long, long>> result\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> row = new\
    \ List<Tuple<long, long>>();\n        List<Tuple<long, long>> column = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n\
    \            }\n        }\n        foreach (List<long> row in lst) {\n       \
    \     foreach (long col in row) {\n                if (col != x) {\n         \
    \           column.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n\
    \                }\n            }\n        }\n        column.Sort((a, b) => b.Item1.CompareTo(a.Item1));\n\
    \        row.Sort((a, b) => b.Item1.CompareTo(a.Item1));\n        result.Sort((a,\
    \ b) => b.Item1.CompareTo(a.Item1));\n        return result;", "        List<Tuple<long,\
    \ long>> ret = new List<Tuple<long, long>>();\n        List<long> row = new List<long>();\n\
    \        List<long> col = new List<long>();\n        foreach (List<long> row in\
    \ lst) {\n            row.Sort();\n            col.AddRange(row.Skip(row.Count\
    \ - 1).Take(row.Count).ToList());\n            row.RemoveAt(row.Count - 1);\n\
    \            row.Sort();\n            col.AddRange(row.Skip(row.Count - 1).Take(row.Count).ToList());\n\
    \            row.RemoveAt(row.Count - 1);\n            row.Sort();\n         \
    \   col.AddRange(row.Skip(row.Count - 1).Take(row.Count).ToList());\n        \
    \    row.RemoveAt(row.Count - 1);\n            row.Sort();\n            col.AddRange(row.Skip(row.Count\
    \ - 1).Take(row.Count).ToList());\n            row.RemoveAt(row.Count - 1);\n\
    \            row.Sort();\n            col.AddRange(row.Skip(row.Count - 1).Take(row.Count).ToList());\n\
    \            row.RemoveAt(row.Count - 1);\n            row.Sort();\n         \
    \   col.AddRange(row.Skip(row.Count - 1).Take(row.Count).ToList());\n        \
    \    row.RemoveAt(row.Count - 1);\n            row.Sort();\n            col.AddRange(row.Skip(row.Count\
    \ - 1).Take(row.Count).ToList());\n            row.RemoveAt(row.Count - 1);\n\
    \            row.Sort();\n            col.AddRange(row.Skip(row.Count - 1).Take(row.Count).ToList());\n\
    \            row.RemoveAt(row.Count - 1);\n            row.Sort();\n         \
    \   col.AddRange(row.Skip(row.Count - 1).Take(row.Count).ToList());\n        \
    \    row.RemoveAt(row.Count - 1);\n            row.Sort();\n            col.AddRange(row.Skip(row.Count\
    \ - 1).Take(row.Count).ToList());\n            row.RemoveAt(row.Count - 1);\n\
    \            row.Sort();\n            col.AddRange(row.Skip(row.Count - 1).Take(row.Count).ToList());\n\
    \            row.RemoveAt(row.Count - 1);\n            row.Sort();\n         \
    \   col.AddRange(row.Skip(row.Count - 1).Take(row.Count).ToList());\n        \
    \    row.RemoveAt(row.Count - 1);\n            row.Sort();\n            col.AddRange(row.Skip(row.Count\
    \ - 1).Take(row.Count).ToList());\n            row.RemoveAt(row.Count - 1);\n\
    \            row.Sort();\n            col.AddRange(row.Skip(row.Count - 1).Take(row.Count).ToList());",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long num in row) {\n       \
    \         if (num == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(num),\
    \ row.IndexOf(num)));\n                }\n            }\n        }\n        return\
    \ result;", "        var result = new List<Tuple<long, long>>();\n        var\
    \ rows = lst.Select(x => x.Select(y => (long)y).ToArray()).ToArray();\n      \
    \  var sorted = rows.OrderBy(x => x.Length).ThenBy(x => x.SelectMany(y => y).ToArray()).ToArray();\n\
    \        var sortedRows = sorted.Select(x => x.Select(y => (long)y).ToArray()).ToArray();\n\
    \        var sortedColumns = sorted.Select(x => x.SelectMany(y => y).ToArray()).ToArray();\n\
    \        var sortedColumnsReversed = sorted.Select(x => x.SelectMany(y => y.Reverse()).ToArray()).ToArray();\n\
    \        var sortedRowsReversed = sorted.Select(x => x.Reverse().ToArray()).ToArray();\n\
    \        var rowIndex = 0;\n        var columnIndex = 0;\n        foreach (var\
    \ row in sortedRows) {\n            var rowIndex2 = 0;\n            var columnIndex2\
    \ = 0;\n            foreach (var column in row) {\n                if (column\
    \ == x) {\n                    result.Add(new Tuple<long, long>(rowIndex, columnIndex));\n\
    \                }\n                columnIndex2++;\n            }\n         \
    \   rowIndex++;\n            columnIndex = columnIndex2;\n        }\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderByDescending(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n   \
    \     foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col != x) {\n                    column.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n\
    \            }\n        }\n        foreach (Tuple<long, long> t in column) {\n\
    \            row.Insert(t.Item1, t.Item2);\n        }\n        foreach (Tuple<long,\
    \ long> t in row) {\n            column.Insert(t.Item1, t.Item2);\n        }\n\
    \        foreach (Tuple<long, long> t in result) {\n            row.Insert(t.Item1,\
    \ t.Item2);\n        }\n        foreach (Tuple<long, long> t in column) {\n  \
    \          column.Insert(t.Item1, t.Item2);\n        }\n        foreach (Tuple<long,\
    \ long> t in row) {\n            row.Insert(t.Item1, t.Item2);\n        }\n  \
    \      foreach (Tuple<long, long> t in result) {\n            row.Insert(t.Item1,\
    \ t.Item2);\n        }\n        foreach (Tuple<long, long> t in column) {\n  \
    \          column.Insert(t.Item1, t.Item2);\n        }\n        foreach (Tuple<long,\
    \ long> t in row) {\n            row.Insert(t.Item1, t.Item2);\n        }\n  \
    \      foreach (Tuple<long, long> t in result) {\n            row.Insert(t.Item1,\
    \ t.Item2);\n        }\n        foreach (Tuple<long, long> t in column) {\n  \
    \          column.Insert(t.Item1, t.Item2);\n        }\n        foreach (Tuple<long,\
    \ long> t in row) {\n            row.Insert(t.Item1, t.Item2);\n        }\n  \
    \      foreach (Tuple<long, long> t in result) {\n            row.Insert(t.Item1,\
    \ t.Item2);\n        }\n        foreach (Tuple<long, long> t in column) {\n  \
    \          column.Insert(t.Item1, t.Item2);\n        }\n        foreach (Tuple<long,\
    \ long> t in row) {\n            row.Insert(t.Item1, t.Item2);\n        }\n  \
    \      foreach (Tuple<long, long> t in result) {\n            row.Insert(t.Item1,\
    \ t.Item2);\n        }\n        foreach (Tuple<long, long> t in column) {\n  \
    \          "]
stop_tokens:
- "\n    }\n"
