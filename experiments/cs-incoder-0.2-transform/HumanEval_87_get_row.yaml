name: HumanEval_87_get_row
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n   \
  \ // which is similar to matrix, however, unlike matrices,\n    // each row may\
  \ contain a different number of columns.\n    // Given lst, and integer x, find\
  \ integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2)\
  \ ...] such that\n    // each tuple is a coordinate - (row, columns), starting with\
  \ 0.\n    // Sort coordinates initially by rows in ascending order.\n    // Also,\
  \ sort coordinates of the row by columns in descending order.\n    // Examples:\n\
  \    // >>> GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,\
  \ (long)5L, (long)1L})})), (1L))\n    // (new List<Tuple<long, long>>(new Tuple<long,\
  \ long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L,\
  \ 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L,\
  \ 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))\n    // >>> GetRow((new List<List<long>>()),\
  \ (1L))\n    // (new List<Tuple<long, long>>())\n    // >>> GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(), (List<long>)new List<long>(new long[]{(long)1L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})})), (3L))\n\
  \    // (new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L,\
  \ 2L)}))\n    public static List<Tuple<long, long>> GetRow(List<List<long>> lst,\
  \ long x) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),\
  \ (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,\
  \ long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,\
  \ long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,\
  \ (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,\
  \ long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,\
  \ (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,\
  \ long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,\
  \ long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,\
  \ long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,\
  \ long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,\
  \ long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),\
  \ (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),\
  \ (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new\
  \ List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,\
  \ long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
completions: ["        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Add(0);\n            col.Add(0);\n            result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n        }\n        foreach (List<long> row in\
    \ lst) {\n            foreach (long c in col) {\n                if (row[c] ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.Count, c));\n\
    \                }\n            }\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            List<Tuple<long, long>> rowResult\
    \ = new List<Tuple<long, long>>();\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    rowResult.Add(new Tuple<long,\
    \ long>(row, col));\n                }\n            }\n            result.AddRange(rowResult);\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderByDescending(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ThenBy(x => x.Item1).ToList();", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> row\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column = new\
    \ List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n    \
    \        foreach (long col in row) {\n                if (col == x) {\n      \
    \              result.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(x)));\n\
    \                }\n            }\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        foreach (Tuple<long,\
    \ long> tuple in result) {\n            row.Add(tuple.Item1);\n            column.Add(tuple.Item2);\n\
    \        }\n        row.Sort((x, y) => y.CompareTo(x));\n        column.Sort((x,\
    \ y) => y.CompareTo(x));\n        result.AddRange(row);\n        result.AddRange(column);\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            col.AddRange(row.Skip(row.Count - 1).Take(row.Count).Reverse().ToList());\n\
    \            row.RemoveRange(row.Count - 1);\n            row.Sort();\n      \
    \      foreach (long c in col) {\n                if (c == x) {\n            \
    \        result.Add(new Tuple<long, long>(row.Count, col.Count));\n          \
    \      }\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            foreach (long col in row)\
    \ {\n                col.Sort();\n                if (col == x) {\n          \
    \          result.Add(new Tuple<long, long>(row.Count, col.Count));\n        \
    \        }\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            List<Tuple<long, long>> rowResult = new List<Tuple<long,\
    \ long>>();\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    rowResult.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ row.IndexOf(col)));\n                }\n            }\n            result.AddRange(rowResult);\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> col = new List<Tuple<long, long>>();\n      \
    \  foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    row.Add(col);\n        \
    \            col.Add(0);\n                    result.Add(new Tuple<long, long>(row.Count\
    \ - 1, col.Count - 1));\n                }\n            }\n        }\n       \
    \ foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col != x) {\n                    row.Add(col);\n        \
    \            col.Add(0);\n                    result.Add(new Tuple<long, long>(row.Count\
    \ - 1, col.Count - 1));\n                }\n            }\n        }\n       \
    \ return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            List<long>\
    \ columns = new List<long>();\n            foreach (long n in row) {\n       \
    \         if (n != x) {\n                    columns.Add(n);\n               \
    \ }\n            }\n            columns.Sort();\n            columns.Reverse();\n\
    \            result.Add(new Tuple<long, long>(columns.Count, columns.Count));\n\
    \        }\n        result.Sort();\n        result.Reverse();\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    col.Reverse();\n            foreach (long col in col) {\n               \
    \ if (col == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col));\n                }\n            }\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long col in row) {\n                col.Reverse();\n           \
    \     col.Add(x);\n                col.Sort();\n                result.Add(new\
    \ Tuple<long, long>(row.Count, col.Count));\n            }\n        }\n      \
    \  return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<List<long>> row = new List<List<long>>();\n        List<long>\
    \ column = new List<long>();\n        foreach (List<long> list in lst) {\n   \
    \         row.Add(list);\n        }\n        foreach (List<long> list in row)\
    \ {\n            column.Add(x);\n            result.Add(new Tuple<long, long>(list.IndexOf(column),\
    \ list.IndexOf(column)));\n        }\n        foreach (List<long> list in row)\
    \ {\n            column.RemoveAt(0);\n        }\n        foreach (List<long> list\
    \ in row) {\n            column.Add(x);\n            result.Add(new Tuple<long,\
    \ long>(list.IndexOf(column), list.IndexOf(column)));\n        }\n        foreach\
    \ (List<long> list in row) {\n            column.RemoveAt(0);\n        }\n   \
    \     foreach (List<long> list in row) {\n            column.Add(x);\n       \
    \     result.Add(new Tuple<long, long>(list.IndexOf(column), list.IndexOf(column)));\n\
    \        }\n        foreach (List<long> list in row) {\n            column.RemoveAt(0);\n\
    \        }\n        foreach (List<long> list in row) {\n            column.Add(x);\n\
    \            result.Add(new Tuple<long, long>(list.IndexOf(column), list.IndexOf(column)));\n\
    \        }\n        foreach (List<long> list in row) {\n            column.RemoveAt(0);\n\
    \        }\n        foreach (List<long> list in row) {\n            column.Add(x);\n\
    \            result.Add(new Tuple<long, long>(list.IndexOf(column), list.IndexOf(column)));\n\
    \        }\n        foreach (List<long> list in row) {\n            column.RemoveAt(0);\n\
    \        }\n        foreach (List<long> list in row) {\n            column.Add(x);\n\
    \            result.Add(new Tuple<long, long>(list.IndexOf(column), list.IndexOf(column)));\n\
    \        }\n        foreach (List<long> list in row) {\n            column.RemoveAt(0);\n\
    \        }\n        foreach (List<long> list in row) {\n            column.Add(x);\n\
    \            result.Add(new Tuple<long, long>(list.IndexOf(column), list.IndexOf(column)));\n\
    \        }\n        foreach (List<long> list in row) {\n            column.RemoveAt(0);\n\
    \        }\n        foreach (List<long> list in row) {\n            column.Add(x);\n\
    \            result.Add(new Tuple<long, long>(list.IndexOf(column), list.IndexOf(column)));\n\
    \        }\n        foreach (List<long> list in row) {\n            column.RemoveAt(0);\n\
    \        }\n        foreach (List<long> list in row) {\n            column.Add(x);\n\
    \            result.Add(new Tuple<long, long>(list.IndexOf(column), list.IndexOf(column)));\n\
    \        }\n        foreach (List<long", "        List<Tuple<long, long>> result\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> row = new\
    \ List<Tuple<long, long>>();\n        foreach (List<long> column in lst) {\n \
    \           row.Add(new Tuple<long, long>(column.Count, 0));\n        }\n    \
    \    row.Sort((a, b) => b.Item1.CompareTo(a.Item1));\n        foreach (Tuple<long,\
    \ long> t in row) {\n            foreach (List<long> column in lst) {\n      \
    \          if (t.Item1 == column.Count) {\n                    result.Add(new\
    \ Tuple<long, long>(t.Item1, t.Item2));\n                }\n            }\n  \
    \      }\n        result.Sort((a, b) => b.Item1.CompareTo(a.Item1));\n       \
    \ result.Sort((a, b) => b.Item2.CompareTo(a.Item2));\n        return result;",
  "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ col = new List<Tuple<long, long>>();\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col == x) {\n\
    \                    ret.Add(new Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    col.Add(col);\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col != x) {\n                    row.Insert(row.IndexOf(row),\
    \ col);\n                }\n            }\n        }\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Insert(row.IndexOf(row), col);\n          \
    \      }\n            }\n        }\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col != x) {\n  \
    \                  row.Insert(row.IndexOf(row), col);\n                }\n   \
    \         }\n        }\n        foreach (List<long> row in lst) {\n          \
    \  foreach (long col in row) {\n                if (col != x) {\n            \
    \        row.Insert(row.IndexOf(row), col);\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col != x) {\n                    row.Insert(row.IndexOf(row),\
    \ col);\n                }\n            }\n        }\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Insert(row.IndexOf(row), col);\n          \
    \      }\n            }\n        }\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col != x) {\n  \
    \                  row.Insert(row.IndexOf(row), col);\n                }\n   \
    \         }\n        }\n        foreach (List<long> row in lst) {\n          \
    \  foreach (long col in row) {\n                if (col != x) {\n            \
    \        row.Insert(row.IndexOf(row), col);\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col != x) {\n                    row.Insert(row.IndexOf(row),\
    \ col);\n                }\n            }\n        }\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Insert(row.IndexOf(row), ", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            foreach (long c in row)\
    \ {\n                col.Add(c);\n            }\n            col.Sort();\n   \
    \         foreach (long c in col) {\n                if (c == x) {\n         \
    \           result.Add(new Tuple<long, long>(row.Count, col.Count));\n       \
    \         }\n            }\n        }\n        result.Sort();\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long c in row) {\n                col.Add(c);\n            }\n \
    \           col.Sort();\n            foreach (long c in col) {\n             \
    \   if (c == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                }\n            }\n        }\n        result.Sort((x,\
    \ y) => x.Item1.CompareTo(y.Item1));\n        result.Sort((x, y) => x.Item2.CompareTo(y.Item2));\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count - 1));\n  \
    \          col.Sort();\n            foreach (long col in col) {\n            \
    \    if (col == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                }\n            }\n        }\n        result.Sort((x,\
    \ y) => x.Item1.CompareTo(y.Item1));\n        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n\
    \        return result;"]
stop_tokens:
- "\n    }\n"
