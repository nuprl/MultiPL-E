name: HumanEval_16_count_distinct_characters
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string, find out how many distinct characters (regardless\
  \ of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n\
  \    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n   \
  \ public static long CountDistinctCharacters(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
  \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
  \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
  aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY\
  \ JeRRRY\")) == (5L));\n    }\n\n}\n"
completions: ["        long distinctCharCount = 0;\n        foreach (char c in str)\
    \ {\n            distinctCharCount += str.Count(x => x == c);\n        }\n   \
    \     return distinctCharCount;", "        long result = 0;\n        foreach (char\
    \ c in str) {\n            result += Math.Pow(26, (str.IndexOf(c) + 1));\n   \
    \     }\n        return result;", "        long count = 0;\n        foreach (char\
    \ c in str) {\n            count += (int)Char.GetNumericValue(c);\n        }\n\
    \        return count;", "        long distinctCharacters = 0;\n        foreach\
    \ (char c in str) {\n            distinctCharacters += (c >= 'A' && c <= 'Z')\
    \ ? 26 : (c >= 'a' && c <= 'z') ? 26 : 0;\n        }\n        return distinctCharacters;",
  "        long distinctCharacters = 0;\n        foreach (char c in str) {\n     \
    \       distinctCharacters += (c >= 'A' && c <= 'Z') ? 1 : 0;\n        }\n   \
    \     return distinctCharacters;", "        long distinctCharacters = 0;\n   \
    \     foreach (char c in str) {\n            distinctCharacters += (c >= 'A' &&\
    \ c <= 'Z') ? 1 : 0;\n            distinctCharacters += (c >= 'a' && c <= 'z')\
    \ ? 1 : 0;\n        }\n        return distinctCharacters;", "        long count\
    \ = 0;\n        foreach (char c in str) {\n            count += (int)Char.GetNumericValue(c);\n\
    \        }\n        return count;", "        long count = 0;\n        foreach\
    \ (char c in str) {\n            count += (int)Char.GetNumericValue(c);\n    \
    \    }\n        return count;", "        long count = 0;\n        foreach (char\
    \ c in str) {\n            count += 1;\n        }\n        return count;", " \
    \       long distinctCharacters = 0;\n        foreach (char c in str) {\n    \
    \        distinctCharacters += 1;\n        }\n        return distinctCharacters;",
  "        long count = 0;\n        foreach (char c in str) {\n            count +=\
    \ str.Count(x => x == c);\n        }\n        return count;", "        long distinctCharacters\
    \ = 0;\n        foreach (char c in str) {\n            distinctCharacters += (long)Char.GetNumericValue(c);\n\
    \        }\n        return distinctCharacters;", "        long distinctCharacters\
    \ = 0;\n        foreach (char c in str) {\n            distinctCharacters += (Convert.ToInt64(c)\
    \ == c) ? 1 : 0;\n        }\n        return distinctCharacters;", "        long\
    \ distinctChars = 0;\n        foreach (char c in str) {\n            distinctChars\
    \ += (c >= 'A' && c <= 'Z') ? 1 : 0;\n        }\n        return distinctChars;",
  "        long distinctCharacters = 0;\n        foreach (char c in str) {\n     \
    \       distinctCharacters ^= (long)c;\n        }\n        return distinctCharacters;",
  "        long count = 0;\n        foreach (char c in str) {\n            count +=\
    \ str.Count(x => x == c);\n        }\n        return count;", "        long count\
    \ = 0;\n        foreach (char c in str) {\n            count += str.Count(x =>\
    \ x == c);\n        }\n        return count;", "        long result = 0;\n   \
    \     foreach (char c in str) {\n            result += Math.Pow((int)c, 2);\n\
    \        }\n        return result;", "        long distinctCharCount = 0;\n  \
    \      foreach (char c in str) {\n            distinctCharCount += str.Count(x\
    \ => x == c);\n        }\n        return distinctCharCount;", "        long count\
    \ = 0;\n        foreach (char c in str) {\n            count += 1;\n        }\n\
    \        return count;"]
stop_tokens:
- "\n    }\n"
