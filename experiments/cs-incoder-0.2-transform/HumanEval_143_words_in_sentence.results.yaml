language: cs
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string words = sentence.Split('
    ');\n        List<int> primes = new List<int>();\n        foreach (string word
    in words) {\n            int n = Convert.ToInt32(word);\n            if (IsPrime(n))
    {\n                primes.Add(n);\n            }\n        }\n        foreach (int
    prime in primes) {\n            result += \" \" + words[prime];\n        }\n        return
    result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8yuphtac.cs(25,24): error CS0029: Cannot implicitly convert type ''string[]''
    to ''string''

    /tmp/tmp8yuphtac.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    /tmp/tmp8yuphtac.cs(27,9): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1659794079
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        List<int> primes = new List<int>();\n
    \       foreach (string word in sentence.Split(' '))\n        {\n            int
    n = Convert.ToInt32(word);\n            if (primes.Contains(n))\n            {\n
    \               result += word;\n            }\n            else\n            {\n
    \               primes.Add(n);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.WordsInSentence
    (System.String sentence) [0x00022] in <c09b0389f65f4206ab1a1dbdf478c0c0>:0 \n
    \ at Problem.Main (System.String[] args) [0x00001] in <c09b0389f65f4206ab1a1dbdf478c0c0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.WordsInSentence
    (System.String sentence) [0x00022] in <c09b0389f65f4206ab1a1dbdf478c0c0>:0 \n
    \ at Problem.Main (System.String[] args) [0x00001] in <c09b0389f65f4206ab1a1dbdf478c0c0>:0
    \n"
  stdout: ''
  timestamp: 1659794079
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n                result
    += \" \" + c;\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp41n77v7e.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793936
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        foreach (string word in sentence.Split('
    '))\n        {\n            int length = word.Length;\n            bool isPrime
    = true;\n            for (int i = 2; i <= Math.Sqrt(length); i++)\n            {\n
    \               if (length % i == 0)\n                {\n                    isPrime
    = false;\n                    break;\n                }\n            }\n            if
    (isPrime)\n            {\n                result += word;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8727d9d54216467bb6afcfc3844dcb28>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8727d9d54216467bb6afcfc3844dcb28>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794079
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n
    \       Array.Sort(charArray);\n        foreach (char c in charArray) {\n            if
    (IsPrimeNumber(c)) {\n                result += \" \" + c;\n            }\n        }\n
    \       return result.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl5k928qn.cs(28,17): error CS0103: The name ''IsPrimeNumber'' does not
    exist in the current context

    '
  timestamp: 1659793939
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            if
    (IsPrime(c)) {\n                result += \" \" + c;\n            }\n        }\n
    \       return result.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2sdblqm3.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793938
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       HashSet<string> words = new HashSet<string>();\n        foreach (char
    c in chars) {\n            if (char.IsLetter(c)) {\n                string word
    = c.ToString();\n                words.Add(word);\n            }\n        }\n
    \       foreach (string word in words) {\n            int length = word.Length;\n
    \           if (length == 1) {\n                result += word;\n            }\n
    \           else if (length == 2 && word.StartsWith(\"a\") && word.EndsWith(\"a\"))
    {\n                result += word;\n            }\n            else if (length
    == 2 && word.StartsWith(\"a\") && word.EndsWith(\"e\")) {\n                result
    += word;\n            }\n            else if (length == 2 && word.StartsWith(\"e\")
    && word.EndsWith(\"a\")) {\n                result += word;\n            }\n            else
    if (length == 2 && word.StartsWith(\"e\") && word.EndsWith(\"e\")) {\n                result
    += word;\n            }\n            else if (length == 3 && word.StartsWith(\"a\")
    && word.EndsWith(\"e\") && word.StartsWith(\"i\") && word.EndsWith(\"i\")) {\n
    \               result += word;\n            }\n            else if (length ==
    3 && word.StartsWith(\"a\") && word.EndsWith(\"e\") && word.StartsWith(\"o\")
    && word.EndsWith(\"o\")) {\n                result += word;\n            }\n            else
    if (length == 3 && word.StartsWith(\"a\") && word.EndsWith(\"e\") && word.StartsWith(\"u\")
    && word.EndsWith(\"u\")) {\n                result += word;\n            }\n            else
    if (length == 3 && word.StartsWith(\"a\") && word.EndsWith(\"i\") && word.StartsWith(\"i\")
    && word.EndsWith(\"o\")) {\n                result += word;\n            }\n            else
    if (length == 3 && word.StartsWith(\"a\") && word.EndsWith(\"i\") && word.StartsWith(\"o\")
    && word.EndsWith(\"o\")) {\n                result += word;\n            }\n            else
    if (length == 3 && word.StartsWith(\"a\") && word.EndsWith(\"o\") && word.StartsWith(\"u\")
    && word.EndsWith(\"u\")) {\n                result += word;\n            }\n            else
    if (length == 3 && word.StartsWith(\"e\") && word.EndsWith(\"a\") && word.StartsWith(\"i\")
    && word.EndsWith(\"i\")) {\n                result += word;\n            }\n            else
    if (length == 3 && word.StartsWith(\"e\") && word.EndsWith(\"a\") && word.StartsWith\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvrwfgutu.cs(71,98): error CS1026: ) expected

    /tmp/tmpvrwfgutu.cs(71,98): error CS1525: Invalid expression term ''}''

    /tmp/tmpvrwfgutu.cs(71,98): error CS1002: ; expected

    /tmp/tmpvrwfgutu.cs(73,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpvrwfgutu.cs(83,2): error CS1513: } expected

    '
  timestamp: 1659794079
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        bool isPrime = true;\n        bool isPrime2
    = true;\n        bool isPrime3 = true;\n        bool isPrime4 = true;\n        bool
    isPrime5 = true;\n        bool isPrime6 = true;\n        bool isPrime7 = true;\n
    \       bool isPrime8 = true;\n        bool isPrime9 = true;\n        bool isPrime10
    = true;\n        bool isPrime11 = true;\n        bool isPrime12 = true;\n        bool
    isPrime13 = true;\n        bool isPrime14 = true;\n        bool isPrime15 = true;\n
    \       bool isPrime16 = true;\n        bool isPrime17 = true;\n        bool isPrime18
    = true;\n        bool isPrime19 = true;\n        bool isPrime20 = true;\n        bool
    isPrime21 = true;\n        bool isPrime22 = true;\n        bool isPrime23 = true;\n
    \       bool isPrime24 = true;\n        bool isPrime25 = true;\n        bool isPrime26
    = true;\n        bool isPrime27 = true;\n        bool isPrime28 = true;\n        bool
    isPrime29 = true;\n        bool isPrime30 = true;\n        bool isPrime31 = true;\n
    \       bool isPrime32 = true;\n        bool isPrime33 = true;\n        bool isPrime34
    = true;\n        bool isPrime35 = true;\n        bool isPrime36 = true;\n        bool
    isPrime37 = true;\n        bool isPrime38 = true;\n        bool isPrime39 = true;\n
    \       bool isPrime40 = true;\n        bool isPrime41 = true;\n        bool isPrime42
    = true;\n        bool isPrime43 = true;\n        bool isPrime44 = true;\n        bool
    isPrime45 = true;\n        bool isPrime46 = true;\n        bool isPrime47 = true;\n
    \       bool isPrime48 = true;\n        bool isPrime49 = true;\n        bool isPrime50
    = true;\n        bool isPrime51 = true;\n        bool isPrime52 = true;\n        bool
    isPrime53 = true;\n        bool isPrime54 = true;\n        bool isPrime55 = true;\n
    \       bool isPrime56 = true;\n        bool isPrime57 = true;\n        bool isPrime58
    = true;\n        bool isPrime59 = true;\n        bool isPrime60 = true;\n\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfc3_2g8r.cs(24,16): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmpfc3_2g8r.cs(27,14): warning CS0219: The variable ''isPrime'' is assigned
    but its value is never used

    /tmp/tmpfc3_2g8r.cs(28,14): warning CS0219: The variable ''isPrime2'' is assigned
    but its value is never used

    /tmp/tmpfc3_2g8r.cs(29,14): warning CS0219: The variable ''isPrime3'' is assigned
    but its value is never used

    /tmp/tmpfc3_2g8r.cs(30,14): warning CS0219: The variable ''isPrime4'' is assigned
    but its value is never used

    /tmp/tmpfc3_2g8r.cs(31,14): warning CS0219: The variable ''isPrime5'' is assigned
    but its value is never used

    /tmp/tmpfc3_2g8r.cs(32,14): warning CS0219: The variable ''isPrime6'' is assigned
    but its value is never used

    /tmp/tmpfc3_2g8r.cs(33,14): warning CS0219: The variable ''isPrime7'' is assigned
    but its value is never used

    /tmp/tmpfc3_2g8r.cs(34,14): warning CS0219: The variable ''isPrime8'' is assigned
    but its value is never used

    /tmp/tmpfc3_2g8r.cs(35,14): warning CS0219: The variable ''isPrime9'' is assigned
    but its value is never used

    /tmp/tmpfc3_2g8r.cs(36,14): warning CS0219: The variable ''isPrime10'' is assigned
    but its value is never used

    /tmp/tmpfc3_2g8r.cs(37,14): warning CS0219: The variable ''isPrime11'' is assigned
    but its value is never used

    /tmp/tmpfc3_2g8r.cs(38,14): warning CS0219: The variable ''isPrime12'' is assigned
    but its value is never used

    /tmp/tmpfc3_2g8r.cs(39,14): warning CS0219: The variable ''isPrime13'' is assigned
    but its value is never used

    /tmp/tmpfc3_2g8r.cs(40,14): warning CS0219: The variable ''isPrime14'' is assigned
    but its value is never used

    /tmp/tmpfc3_2g8r.cs(41,14): warning CS0219: The variable ''isPrime15'' is assigned
    but its value is never used

    /tmp/tmpfc3_2g8r.cs(42,14): warning CS0219: The variable ''isPrime16'' is assigned
    but its value is never used

    /tmp/tmpfc3_2g8r.cs(43,14): warning CS0219: The variable ''isPrime17'' is assigned '
  timestamp: 1659794079
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       HashSet<string> words = new HashSet<string>();\n        foreach (char
    c in chars) {\n            if (char.IsLetter(c)) {\n                string word
    = c.ToString();\n                words.Add(word);\n            }\n        }\n
    \       foreach (string word in words) {\n            int length = word.Length;\n
    \           if (length == 1) continue;\n            bool isPrime = true;\n            for
    (int i = 2; i <= Math.Sqrt(length); i++) {\n                if (length % i ==
    0) {\n                    isPrime = false;\n                    break;\n                }\n
    \           }\n            if (isPrime) {\n                result += \" \" + word;\n
    \           }\n        }\n        return result.Trim();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51941ab0578340978439f6fde2a2e319>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51941ab0578340978439f6fde2a2e319>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794079
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            if
    (IsPrime(c.ToString().Length)) {\n                result += \" \" + c;\n            }\n
    \       }\n        return result.Trim();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4hef13c4.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793941
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        bool isPrime = true;\n        for (int i =
    0; i < chars.Length; i++) {\n            int count = 0;\n            while (chars[i]
    == ' ') {\n                count++;\n                i++;\n            }\n            if
    (count % 2 == 0) {\n                isPrime = false;\n                break;\n
    \           }\n        }\n        if (isPrime) {\n            int length = chars.Length;\n
    \           int index = 0;\n            while (index < length) {\n                string
    temp = chars[index];\n                for (int i = index + 1; i < length; i++)
    {\n                    if (chars[i] == ' ') {\n                        temp =
    temp + \" \" + chars[i];\n                        index++;\n                        break;\n
    \                   }\n                }\n                if (IsPrime(temp)) {\n
    \                   result += temp + \" \";\n                }\n                index++;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq4fv1lqp.cs(43,31): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpq4fv1lqp.cs(51,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794079
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    count = 0;\n            while (c != ' ') {\n                count++;\n                c
    = chars[count];\n            }\n            if (IsPrime(count)) {\n                result
    += \" \" + c;\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfurqrh5l.cs(31,17): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmpfurqrh5l.cs(33,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793936
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n
    \       HashSet<string> words = new HashSet<string>();\n        foreach (char
    c in charArray) {\n            if (char.IsLetter(c)) {\n                string
    word = c.ToString();\n                words.Add(word);\n            }\n        }\n
    \       foreach (string word in words) {\n            int length = word.Length;\n
    \           bool isPrime = true;\n            for (int i = 2; i <= Math.Sqrt(length);
    i++) {\n                if (length % i == 0) {\n                    isPrime =
    false;\n                    break;\n                }\n            }\n            if
    (isPrime) {\n                result += \" \" + word;\n            }\n        }\n
    \       return result.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aadf91990a0c486783a8be5a598ad0b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aadf91990a0c486783a8be5a598ad0b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794079
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       HashSet<string> words = new HashSet<string>();\n        foreach (char
    c in chars) {\n            if (char.IsLetter(c)) {\n                string word
    = c.ToString();\n                words.Add(word);\n            }\n        }\n
    \       foreach (string word in words) {\n            int length = word.Length;\n
    \           if (length == 1) {\n                result += word;\n            }
    else {\n                for (int i = 2; i <= Math.Sqrt(length); i++) {\n                    if
    (length % i == 0) {\n                        int count = 0;\n                        for
    (int j = 0; j < word.Length; j++) {\n                            if (word[j] ==
    word[j]) {\n                                count++;\n                            }\n
    \                       }\n                        if (count == i) {\n                            result
    += word;\n                            break;\n                        }\n                    }\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ec925b501df2474f8d2c343bf2220ab6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ec925b501df2474f8d2c343bf2220ab6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794079
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n
    \       List<int> primes = new List<int>();\n        foreach (char c in charArray)
    {\n            int prime = PrimeNumber(c);\n            if (prime > 1) {\n                primes.Add(prime);\n
    \           }\n        }\n        primes.Sort();\n        foreach (int prime in
    primes) {\n            result += \" \" + charArray[prime];\n        }\n        return
    result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj_ww1bii.cs(28,25): error CS0103: The name ''PrimeNumber'' does not exist
    in the current context

    '
  timestamp: 1659794079
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        bool isPrime = true;\n        string
    word = \"\";\n        foreach (char c in sentence) {\n            isPrime = true;\n
    \           int n = Convert.ToInt32(c);\n            for (int i = 2; i <= Math.Sqrt(n);
    i++) {\n                if (n % i == 0) {\n                    isPrime = false;\n
    \                   break;\n                }\n            }\n            if (isPrime)
    {\n                word += c;\n            }\n        }\n        foreach (char
    c in word) {\n            result += c;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2611e83a4e9426593a05ac65aeb6f1a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2611e83a4e9426593a05ac65aeb6f1a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794079
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    temp = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)
    {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        char[] charArray = word.ToCharArray();\n        Array.Sort(charArray);\n
    \       foreach (char c in charArray) {\n            temp = temp + c;\n        }\n
    \       char[] charArray2 = temp.ToCharArray();\n        Array.Sort(charArray2);\n
    \       foreach (char c in charArray2) {\n            if (isPrime) {\n                if
    (c != ' ') {\n                    isPrime = false;\n                }\n            }\n
    \           else {\n                if (c != ' ') {\n                    isPrime
    = true;\n                }\n            }\n        }\n        foreach (char c
    in charArray2) {\n            if (isPrime) {\n                result += c;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2eb96af1ddde4cc69c71f92e6f5c073b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2eb96af1ddde4cc69c71f92e6f5c073b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794079
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            if
    (IsPrime(c.ToString().Length)) {\n                result += c;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn6q5sw6c.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793939
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            } else {\n                if (isPrime)
    {\n                    isPrime = IsPrime(word.Length);\n                }\n                result
    += \" \" + word;\n                word = \"\";\n            }\n        }\n        if
    (isPrime) {\n            result += \" \" + word;\n        }\n        return result.Trim();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3nabzjc0.cs(32,31): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794079
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        int length = sentence.Length;\n        for (int i = 0;
    i < length; i++) {\n            word = sentence.Substring(i, 1);\n            isPrime
    = true;\n            int j = 2;\n            while (j < length) {\n                if
    (j % i == 0) {\n                    isPrime = false;\n                    break;\n
    \               }\n                j++;\n            }\n            if (isPrime)
    {\n                result += word;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide
    by zero.\n  at Problem.WordsInSentence (System.String sentence) [0x0002e] in <100775284a9b4b84b7c55bdca2b4a183>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <100775284a9b4b84b7c55bdca2b4a183>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.DivideByZeroException: Attempted to
    divide by zero.\n  at Problem.WordsInSentence (System.String sentence) [0x0002e]
    in <100775284a9b4b84b7c55bdca2b4a183>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <100775284a9b4b84b7c55bdca2b4a183>:0 \n"
  stdout: ''
  timestamp: 1659794079
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string words = sentence.Split('
    ');\n        foreach (string word in words) {\n            int length = word.Length;\n
    \           if (IsPrime(length)) {\n                result += \" \" + word;\n
    \           }\n        }\n        return result.Trim();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpho5e7ung.cs(25,24): error CS0029: Cannot implicitly convert type ''string[]''
    to ''string''

    /tmp/tmpho5e7ung.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    /tmp/tmpho5e7ung.cs(26,9): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    temp = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            } else {\n                if (word
    != \"\") {\n                    temp = word;\n                    word = \"\";\n
    \                   result += temp;\n                }\n            }\n        }\n
    \       if (word != \"\") {\n            temp = word;\n            word = \"\";\n
    \           result += temp;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f462f46338c1437fb8a54b8ce824bd1f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f462f46338c1437fb8a54b8ce824bd1f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       HashSet<string> words = new HashSet<string>();\n        foreach (char
    c in chars) {\n            if (char.IsLetter(c)) {\n                string word
    = c.ToString();\n                if (words.Contains(word)) {\n                    result
    += \" \" + word;\n                } else {\n                    words.Add(word);\n
    \               }\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aad15243976044f88b85376e1c63801f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aad15243976044f88b85376e1c63801f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            } else {\n                isPrime =
    false;\n            }\n        }\n        if (isPrime) {\n            int n =
    int.Parse(word);\n            int count = 0;\n            int i = 2;\n            while
    (i <= n) {\n                if (n % i == 0) {\n                    count++;\n
    \               }\n                i++;\n            }\n            int k = 0;\n
    \           while (count > 0) {\n                result += sentence.Substring(k,
    count + 1);\n                k++;\n                count--;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd32c5827044dbaa99bce429feda3ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd32c5827044dbaa99bce429feda3ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        int length = 0;\n        char[] charArray = sentence.ToCharArray();\n
    \       foreach (char c in charArray) {\n            length++;\n            word
    += c;\n        }\n        char[] charArray2 = word.ToCharArray();\n        foreach
    (char c in charArray2) {\n            isPrime = true;\n            int i = 2;\n
    \           while (i <= length) {\n                if (c % i == 0) {\n                    isPrime
    = false;\n                    break;\n                }\n                i++;\n
    \           }\n            if (isPrime) {\n                result += \" \" + word;\n
    \           }\n        }\n        return result.Trim();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <58e198918cf447f39640639478d4e5fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <58e198918cf447f39640639478d4e5fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       HashSet<string> set = new HashSet<string>();\n        foreach (char c
    in chars) {\n            if (char.IsLetter(c)) {\n                string temp
    = c.ToString();\n                if (set.Contains(temp)) {\n                    set.Remove(temp);\n
    \               } else {\n                    set.Add(temp);\n                }\n
    \           }\n        }\n        foreach (string s in set) {\n            if
    (s.Length > 0) {\n                result += s + \" \";\n            }\n        }\n
    \       return result.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <65d6484e59ee4bdd8436657d56a643b7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <65d6484e59ee4bdd8436657d56a643b7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    temp = \"\";\n        char[] chars = sentence.ToCharArray();\n        Array.Sort(chars);\n
    \       foreach (char c in chars) {\n            word += c;\n        }\n        char[]
    chars2 = word.ToCharArray();\n        Array.Sort(chars2);\n        foreach (char
    c in chars2) {\n            if (chars.Contains(c)) {\n                temp = temp
    + c;\n            }\n        }\n        char[] chars3 = temp.ToCharArray();\n
    \       Array.Sort(chars3);\n        foreach (char c in chars3) {\n            if
    (chars2.Contains(c)) {\n                result += c;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <87eaf178dcab44b380bace2e0bef7d84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <87eaf178dcab44b380bace2e0bef7d84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        char[] charArray = sentence.ToCharArray();\n        List<int>
    primes = new List<int>();\n        foreach (char c in charArray) {\n            int
    prime = PrimeNumber(c);\n            if (prime > 0)\n                primes.Add(prime);\n
    \       }\n        string result = \"\";\n        foreach (int prime in primes)
    {\n            string temp = sentence.Substring(0, sentence.IndexOf(\" \", 0));\n
    \           while (temp.Length > 0) {\n                if (temp.Length % prime
    == 0)\n                    result += temp.Substring(0, temp.Length / prime);\n
    \               temp = temp.Substring(temp.Length / prime);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm9u075xa.cs(27,25): error CS0103: The name ''PrimeNumber'' does not exist
    in the current context

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n                result
    += \" \" + c;\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp41n77v7e.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            } else {\n                isPrime =
    false;\n                break;\n            }\n        }\n        char[] charArray
    = word.ToCharArray();\n        List<int> primes = new List<int>();\n        for
    (int i = 0; i < charArray.Length; i++) {\n            int prime = i;\n            while
    (prime < charArray.Length && charArray[prime] == charArray[prime + 1]) {\n                prime++;\n
    \           }\n            if (prime > charArray.Length) {\n                primes.Add(i);\n
    \           }\n        }\n        foreach (int prime in primes) {\n            int
    count = 0;\n            int index = 0;\n            while (index < charArray.Length)
    {\n                if (charArray[index] == charArray[prime + 1]) {\n                    count++;\n
    \                   index++;\n                } else {\n                    break;\n
    \               }\n            }\n            if (count == charArray.Length /
    prime) {\n                result += charArray[prime + 1];\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.WordsInSentence (System.String sentence)
    [0x00083] in <c36efb47f9c84cfc9123a01228be757d>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c36efb47f9c84cfc9123a01228be757d>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.WordsInSentence (System.String sentence) [0x00083] in <c36efb47f9c84cfc9123a01228be757d>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <c36efb47f9c84cfc9123a01228be757d>:0
    \n"
  stdout: ''
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        List<string> words = new List<string>();\n
    \       foreach (string word in sentence.Split(' '))\n        {\n            words.Add(word);\n
    \       }\n        foreach (string word in words)\n        {\n            int
    length = word.Length;\n            bool isPrime = true;\n            int i = 2;\n
    \           while (i <= Math.Sqrt(length))\n            {\n                if
    (length % i == 0)\n                {\n                    isPrime = false;\n                    break;\n
    \               }\n                i++;\n            }\n            if (isPrime)\n
    \           {\n                result += \" \" + word;\n            }\n        }\n
    \       return result.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b162fa5f8cba42498d5eea25fe3cd237>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b162fa5f8cba42498d5eea25fe3cd237>:0
    \n"
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        foreach (string word in sentence.Split('
    '))\n        {\n            int length = word.Length;\n            if (length
    == 1)\n            {\n                result += word;\n            }\n            else
    if (length == 2 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 3 && IsPrime(length))\n            {\n
    \               result += word;\n            }\n            else if (length ==
    4 && IsPrime(length))\n            {\n                result += word;\n            }\n
    \           else if (length == 5 && IsPrime(length))\n            {\n                result
    += word;\n            }\n            else if (length == 6 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 7 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 8 && IsPrime(length))\n            {\n
    \               result += word;\n            }\n            else if (length ==
    9 && IsPrime(length))\n            {\n                result += word;\n            }\n
    \           else if (length == 10 && IsPrime(length))\n            {\n                result
    += word;\n            }\n            else if (length == 11 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 12 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 13 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 14 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 15 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 16 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 17 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 18 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 19 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 20 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 21 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 22 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 23 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyej74c2.cs(120,22): error CS1525: Invalid expression term ''}''

    /tmp/tmpcyej74c2.cs(120,22): error CS1026: ) expected

    /tmp/tmpcyej74c2.cs(120,22): error CS1002: ; expected

    /tmp/tmpcyej74c2.cs(122,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpcyej74c2.cs(132,2): error CS1513: } expected

    '
  timestamp: 1659823421
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        foreach (char c in sentence) {\n            isPrime =
    true;\n            for (int i = 2; i <= Math.Sqrt(c); i++) {\n                if
    (c % i == 0) {\n                    isPrime = false;\n                    break;\n
    \               }\n            }\n            if (isPrime) {\n                result
    += \" \" + word;\n                word = \"\";\n            }\n            word
    += c;\n        }\n        return result.Trim();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <72ed531940f74f47a9bb248ee8e834e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <72ed531940f74f47a9bb248ee8e834e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    temp = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)
    {\n            temp = c + temp;\n            isPrime = isPrimeTest(temp);\n            if
    (isPrime) {\n                result += temp;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3lcil4gj.cs(30,23): error CS0103: The name ''isPrimeTest'' does not exist
    in the current context

    /tmp/tmp3lcil4gj.cs(25,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        List<string> words = new List<string>();\n
    \       foreach (string word in sentence.Split(' '))\n        {\n            words.Add(word);\n
    \       }\n        List<int> primes = new List<int>();\n        foreach (string
    word in words)\n        {\n            primes.Add(new BigInteger(word).Sieve());\n
    \       }\n        foreach (int prime in primes)\n        {\n            if (primes.Contains(prime))\n
    \           {\n                result += \" \" + words[primes.IndexOf(prime)];\n
    \           }\n        }\n        return result.Trim();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptdg_tcne.cs(33,39): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    '
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        foreach (string word in sentence.Split('
    '))\n        {\n            int length = word.Length;\n            if (length
    == 1)\n            {\n                result += word;\n            }\n            else\n
    \           {\n                bool isPrime = true;\n                for (int
    i = 2; i <= Math.Sqrt(length); i++)\n                {\n                    if
    (length % i == 0)\n                    {\n                        isPrime = false;\n
    \                       break;\n                    }\n                }\n                if
    (isPrime)\n                {\n                    result += word;\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c42635f2af6a48e7a17d9d65340d2cef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c42635f2af6a48e7a17d9d65340d2cef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        string str = string.Join(\" \", chars);\n
    \       char[] chars2 = str.ToCharArray();\n        Array.Sort(chars2);\n        string
    str2 = string.Join(\" \", chars2);\n        char[] chars3 = str2.ToCharArray();\n
    \       Array.Sort(chars3);\n        string str3 = string.Join(\" \", chars3);\n
    \       char[] chars4 = str3.ToCharArray();\n        Array.Sort(chars4);\n        string
    str4 = string.Join(\" \", chars4);\n        char[] chars5 = str4.ToCharArray();\n
    \       Array.Sort(chars5);\n        string str5 = string.Join(\" \", chars5);\n
    \       char[] chars6 = str5.ToCharArray();\n        Array.Sort(chars6);\n        string
    str6 = string.Join(\" \", chars6);\n        char[] chars7 = str6.ToCharArray();\n
    \       Array.Sort(chars7);\n        string str7 = string.Join(\" \", chars7);\n
    \       char[] chars8 = str7.ToCharArray();\n        Array.Sort(chars8);\n        string
    str8 = string.Join(\" \", chars8);\n        char[] chars9 = str8.ToCharArray();\n
    \       Array.Sort(chars9);\n        string str9 = string.Join(\" \", chars9);\n
    \       char[] chars10 = str9.ToCharArray();\n        Array.Sort(chars10);\n        string
    str10 = string.Join(\" \", chars10);\n        char[] chars11 = str10.ToCharArray();\n
    \       Array.Sort(chars11);\n        string str11 = string.Join(\" \", chars11);\n
    \       char[] chars12 = str11.ToCharArray();\n        Array.Sort(chars12);\n
    \       string str12 = string.Join(\" \", chars12);\n        char[] chars13 =
    str12.ToCharArray();\n        Array.Sort(chars13);\n        string str13 = string.Join(\"
    \", chars13);\n        char[] chars14 = str13.ToCharArray();\n        Array.Sort(chars14);\n
    \       string str14 = string.Join(\" \", chars14);\n        char[] chars15 =
    str14.ToCharArray();\n        Array.Sort(chars15);\n        string str15 = string.Join(\"
    \", chars\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphlxcpac9.cs(69,46): error CS1026: ) expected

    /tmp/tmphlxcpac9.cs(69,46): error CS1002: ; expected

    '
  timestamp: 1659823421
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    temp = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)
    {\n            temp = c + temp;\n        }\n        char[] charArray = temp.ToCharArray();\n
    \       Array.Sort(charArray);\n        foreach (char c in charArray) {\n            if
    (charArray.Contains(c)) {\n                isPrime = false;\n            }\n        }\n
    \       if (isPrime) {\n            int length = sentence.Length;\n            int
    index = 0;\n            int primeNumber = 0;\n            while (index < length)
    {\n                primeNumber = (int)Math.Sqrt(length + 1);\n                for
    (int i = 2; i <= primeNumber; i++) {\n                    if (length % i == 0)
    {\n                        isPrime = false;\n                        break;\n
    \                   }\n                }\n                if (isPrime) {\n                    for
    (int i = 2; i <= length / 2; i++) {\n                        if (length % i ==
    0) {\n                            isPrime = false;\n                            break;\n
    \                       }\n                    }\n                }\n                if
    (isPrime) {\n                    result += sentence.Substring(index, 1);\n                    index++;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9df1f5a30b44164803ba92801a6c0a8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9df1f5a30b44164803ba92801a6c0a8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    temp = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            } else {\n                temp = word;\n
    \               word = \"\";\n                result += temp;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05f3766021474b46b2996736e48db244>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05f3766021474b46b2996736e48db244>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        foreach (string word in sentence.Split('
    '))\n        {\n            int length = word.Length;\n            bool isPrime
    = true;\n            for (int i = 2; i <= Math.Sqrt(length); i++)\n            {\n
    \               if (length % i == 0)\n                {\n                    isPrime
    = false;\n                    break;\n                }\n            }\n            if
    (isPrime)\n            {\n                result += word;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8727d9d54216467bb6afcfc3844dcb28>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8727d9d54216467bb6afcfc3844dcb28>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794079
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n                result
    += \" \" + c;\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp41n77v7e.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       int[] primes = new int[100];\n        primes[0] = 2;\n        primes[1]
    = 3;\n        primes[2] = 5;\n        primes[3] = 7;\n        primes[4] = 11;\n
    \       primes[5] = 13;\n        primes[6] = 17;\n        primes[7] = 19;\n        primes[8]
    = 23;\n        primes[9] = 29;\n        primes[10] = 41;\n        primes[11] =
    53;\n        primes[12] = 59;\n        primes[13] = 67;\n        primes[14] =
    71;\n        primes[15] = 79;\n        primes[16] = 87;\n        primes[17] =
    97;\n        primes[18] = 103;\n        primes[19] = 109; // 10^18\n        primes[20]
    = 113; // 10^19\n        primes[21] = 121; // 10^20\n        primes[22] = 127;\n
    \       primes[23] = 131;\n        primes[24] = 139;\n        primes[25] = 147;\n
    \       primes[26] = 153;\n        primes[27] = 159;\n        primes[28] = 167;\n
    \       primes[29] = 173;\n        primes[30] = 179;\n        primes[31] = 187;\n
    \       primes[32] = 191;\n        primes[33] = 193;\n        primes[34] = 197;\n
    \       primes[35] = 199;\n        primes[36] = 203;\n        primes[37] = 207;\n
    \       primes[38] = 211;\n        primes[39] = 213;\n        primes[40] = 217;\n
    \       primes[41] = 219;\n        primes[42] = 223;\n        primes[43] = 227;\n
    \       primes[44] = 229;\n        primes[45] = 233;\n        primes[46] = 239;\n
    \       primes[47] = 241;\n        primes[48] = 243;\n        primes[49] = 247;\n
    \       primes[50] = 251;\n        primes[51] = 257;\n        primes[52] = 263;\n
    \       primes[53] = 269;\n        primes[54] = 271;\n        primes[55] = 277;\n
    \       primes[56] = 281;\n        primes[57] = 283;\n        primes[58] = 293;\n
    \       primes[59] = 297;\n        primes[60] = 303;\n\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw3kv8q72.cs(24,16): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmpw3kv8q72.cs(23,26): error CS0161: ''Problem.WordsInSentence(string)'':
    not all code paths return a value

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        foreach (string word in sentence.Split('
    '))\n        {\n            int length = word.Length;\n            if (length
    == 1)\n            {\n                result += word;\n            }\n            else\n
    \           {\n                for (int i = 2; i <= Math.Sqrt(length); i++)\n
    \               {\n                    if (length % i == 0)\n                    {\n
    \                       break;\n                    }\n                }\n                if
    (i == Math.Sqrt(length))\n                {\n                    result += word;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3g91tr_7.cs(41,21): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       HashSet<string> set = new HashSet<string>();\n        foreach (char c
    in chars) {\n            if (char.IsLetter(c)) {\n                string s = c.ToString();\n
    \               if (set.Contains(s)) {\n                    set.Remove(s);\n                }
    else {\n                    set.Add(s);\n                }\n            }\n        }\n
    \       foreach (string s in set) {\n            int n = s.Length;\n            int
    count = 0;\n            while (n > 1) {\n                if (n % 2 == 0) {\n                    n
    = (n / 2);\n                    count++;\n                } else {\n                    n
    = (3 * n) + 1;\n                    count++;\n                }\n            }\n
    \           if (count == 1) {\n                result += s;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d02f93b577294bb2b00a5d33116942ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d02f93b577294bb2b00a5d33116942ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        foreach (string word in sentence.Split('
    '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n
    \           {\n                result += word;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1awgrmpt.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        foreach (char c in sentence) {\n            isPrime =
    true;\n            int n = Convert.ToInt32(c);\n            int m = Convert.ToInt32(Math.Floor(Math.Sqrt(n)));\n
    \           for (int i = 2; i <= m; i++) {\n                if (n % i == 0) {\n
    \                   isPrime = false;\n                    break;\n                }\n
    \           }\n            if (isPrime) {\n                word += c;\n            }\n
    \       }\n        result = word;\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8dcfc3da3ca4937a0347ffc4a5d3bee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8dcfc3da3ca4937a0347ffc4a5d3bee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    length = c.ToString().Length;\n            if (length == 1) {\n                result
    += c;\n            }\n            else if (length == 2 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 3 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 4 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 5 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 6 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 7 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 8 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 9 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 10 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 11 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 12 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 13 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 14 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 15 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 16 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 17 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 18 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 19 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 20 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 21 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 22 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 23 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 24 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 25 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 26 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 27 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 28 && c != ' ') {\n                result
    += c;\n            }\n            else if (length == 29 && c != ' ') {\n                result
    += c;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo7hv_05_.cs(117,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpo7hv_05_.cs(127,2): error CS1513: } expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        foreach (string word in sentence.Split('
    '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n
    \           {\n                result += word;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1awgrmpt.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            if
    (IsPrime(c.Length)) {\n                result += c;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr96p88kz.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    /tmp/tmpr96p88kz.cs(28,27): error CS1061: ''char'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string temp = \"\";\n        bool
    isPrime = true;\n        string temp2 = \"\";\n        foreach (char c in sentence)
    {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n                isPrime
    = false;\n            }\n        }\n        if (isPrime) {\n            foreach
    (char c in sentence) {\n                int n = Convert.ToInt32(c);\n                if
    (n % 2 == 0) {\n                    temp += c;\n                }\n            }\n
    \           foreach (char c in sentence) {\n                int n = Convert.ToInt32(c);\n
    \               if (n % 2 != 0) {\n                    temp2 += c;\n                }\n
    \           }\n            result = temp;\n            result = result.Replace(\"
    \", string.Empty);\n            result = result.Replace(\",\", string.Empty);\n
    \           result = result.Replace(\".\", string.Empty);\n            result
    = result.Replace(\"!\", string.Empty);\n            result = result.Replace(\"?\",
    string.Empty);\n            result = result.Replace(\";\", string.Empty);\n            result
    = result.Replace(\":\", string.Empty);\n            result = result.Replace(\"(\",
    string.Empty);\n            result = result.Replace(\")\", string.Empty);\n            result
    = result.Replace(\"[\", string.Empty);\n            result = result.Replace(\"]\",
    string.Empty);\n            result = result.Replace(\"{\", string.Empty);\n            result
    = result.Replace(\"}\", string.Empty);\n            result = result.Replace(\"'\",
    string.Empty);\n            result = result.Replace(\"\\\"\", string.Empty);\n
    \           result = result.Replace(\"%\", string.Empty);\n            result
    = result.Replace(\"*\", string.Empty);\n            result = result.Replace(\"+\",
    string.Empty);\n            result = result.Replace(\"=\", string.Empty);\n            result
    = result.Replace(\"-\", string.Empty);\n            result = result.Replace(\"/\",
    string.Empty);\n            result = result.Replace(\"^\", string.Empty);\n            result
    = result.Replace(\"~\", string.Empty);\n            result = result.Replace(\"|\",
    string.Empty);\n            result = result.Replace(\"&\", string.Empty);\n            result
    = result.Replace(\"=\", string.Empty);\n            result = result.Replace(\"_\",
    string.Empty);\n            result = result.Replace(\"@\", string.Empty);\n            result
    = result.Replace(\"!\", string.Empty);\n            result = result.Replace(\"~\",
    string.Empty);\n            result = result.Replace(\"_\", string.Empty);\n            result
    = result.Replace(\"_\", string.Empty);\n            result = result.Replace(\"_\",
    string.Empty);\n            result = result.Replace(\"_\", string.Empty);\n            result
    = result.Replace(\"_\", string.Empty);\n            result = result.Replace(\"_\",
    string.Empty);\n            result = result.Replace(\"_\", string.Empty);\n            result
    = result.Replace(\"_\", string.Empty);\n            result = result.Replace(\"_\",
    string.Empty);\n            result = result.Replace(\"_\", \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3wlovqsm.cs(87,41): error CS1525: Invalid expression term ''}''

    /tmp/tmp3wlovqsm.cs(87,41): error CS1026: ) expected

    /tmp/tmp3wlovqsm.cs(87,41): error CS1002: ; expected

    /tmp/tmp3wlovqsm.cs(89,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp3wlovqsm.cs(99,2): error CS1513: } expected

    '
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        List<string> words = new List<string>();\n
    \       foreach (string word in sentence.Split(' '))\n        {\n            words.Add(word);\n
    \       }\n        List<int> primes = new List<int>();\n        foreach (string
    word in words)\n        {\n            int count = 0;\n            foreach (char
    c in word)\n            {\n                count += (int)Math.Pow(word.Length,
    2);\n            }\n            if (count % 2 == 0)\n            {\n                primes.Add(count);\n
    \           }\n        }\n        foreach (int prime in primes)\n        {\n            int
    count = 0;\n            foreach (string word in words)\n            {\n                if
    (prime == count)\n                {\n                    result += \" \" + word;\n
    \               }\n                count++;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <333e5f6119134465bb45a7f560bdb6b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <333e5f6119134465bb45a7f560bdb6b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            } else {\n                if (isPrime)
    {\n                    isPrime = IsPrime(word.Length);\n                }\n                result
    += \" \" + word;\n                word = \"\";\n            }\n        }\n        if
    (isPrime) {\n            isPrime = IsPrime(word.Length);\n        }\n        result
    += \" \" + word;\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbn7arq2t.cs(32,31): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    /tmp/tmpbn7arq2t.cs(39,23): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        foreach (string word in sentence.Split('
    '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n
    \           {\n                result += word;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1awgrmpt.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        foreach (char c in sentence) {\n            isPrime =
    true;\n            int length = c.ToString().Length;\n            for (int i =
    1; i < length; i++) {\n                if (c.ToString().Substring(0, i).Equals(c.ToString().Substring(i)))
    {\n                    isPrime = false;\n                    break;\n                }\n
    \           }\n            if (isPrime) {\n                word += c;\n            }\n
    \       }\n        result = word;\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2b215d8268cf4b44abfe08291a10f429>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2b215d8268cf4b44abfe08291a10f429>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string temp = \"\";\n        char[]
    charArray = sentence.ToCharArray();\n        Array.Sort(charArray);\n        foreach
    (char c in charArray) {\n            if (char.IsLetter(c)) {\n                temp
    = temp + c;\n            }\n        }\n        char[] charArray2 = temp.ToCharArray();\n
    \       Array.Sort(charArray2);\n        foreach (char c in charArray2) {\n            if
    (char.IsLetter(c)) {\n                result += c;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f6ac324f8074c50b9b41d653a3f3173>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f6ac324f8074c50b9b41d653a3f3173>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       HashSet<string> words = new HashSet<string>();\n        foreach (char
    c in chars) {\n            if (char.IsLetter(c)) {\n                string word
    = c.ToString();\n                words.Add(word);\n            }\n        }\n
    \       foreach (string word in words) {\n            int length = word.Length;\n
    \           if (length == 1) continue;\n            if (length == 2 && word[0]
    == 'a' && word[1] == 'a') continue;\n            if (length == 3 && word[0] ==
    'a' && word[1] == 'a' && word[2] == 'a') continue;\n            if (length ==
    4 && word[0] == 'a' && word[1] == 'a' && word[2] == 'a' && word[3] == 'a') continue;\n
    \           if (length == 5 && word[0] == 'a' && word[1] == 'a' && word[2] ==
    'a' && word[3] == 'a' && word[4] == 'a') continue;\n            if (length ==
    6 && word[0] == 'a' && word[1] == 'a' && word[2] == 'a' && word[3] == 'a' && word[4]
    == 'a' && word[5] == 'a') continue;\n            if (length == 7 && word[0] ==
    'a' && word[1] == 'a' && word[2] == 'a' && word[3] == 'a' && word[4] == 'a' &&
    word[5] == 'a' && word[6] == 'a') continue;\n            if (length == 8 && word[0]
    == 'a' && word[1] == 'a' && word[2] == 'a' && word[3] == 'a' && word[4] == 'a'
    && word[5] == 'a' && word[6] == 'a' && word[7] == 'a') continue;\n            if
    (length == 9 && word[0] == 'a' && word[1] == 'a' && word[2] == 'a' && word[3]
    == 'a' && word[4] == 'a' && word[5] == 'a' && word[6] == 'a' && word[7] == 'a'
    && word[8] == 'a') continue;\n            if (length == 10 && word[0] == 'a' &&
    word[1] == 'a' && word[2] == 'a' && word[3] == 'a' && word[4] == 'a' && word[5]
    == 'a' && word[6] == 'a' && word[7] == 'a' && word[8] == 'a' && word[9] == 'a')
    continue;\n            if (length == 11 && word[0] == 'a' && word[1] == 'a' &&
    word[2] == 'a' && word[3] == 'a' && word[4] == 'a' && word[5] == 'a' && word[6]
    == 'a' && word[7] == 'a' && word[8] == 'a' && word[9] == 'a' && word[10] == 'a')
    continue;\n            if (length == 12 && word[0] == 'a' && word[1] == 'a' &&
    word[2] == 'a' && word[3] == 'a' && word[4] == 'a' && word[5] == 'a' && word[6]
    == 'a' && word[7] == 'a' && word[8] == 'a' && \n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg73grfmk.cs(46,194): error CS1525: Invalid expression term ''}''

    /tmp/tmpg73grfmk.cs(46,194): error CS1026: ) expected

    /tmp/tmpg73grfmk.cs(46,194): error CS1002: ; expected

    /tmp/tmpg73grfmk.cs(48,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpg73grfmk.cs(58,2): error CS1513: } expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n                result
    += \" \" + c;\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp41n77v7e.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n                result
    += \" \" + c;\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp41n77v7e.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        foreach (char c in sentence) {\n            int n = Convert.ToInt32(c);\n
    \           if (n % 2 == 0) {\n                isPrime = false;\n            }\n
    \       }\n        if (isPrime) {\n            int n = Convert.ToInt32(sentence);\n
    \           int count = 0;\n            while (n > 1) {\n                if (n
    % 2 == 0) {\n                    count++;\n                }\n                n
    = n / 2;\n            }\n            int count = 0;\n            while (n > 1)
    {\n                if (n % 2 == 0) {\n                    count++;\n                }\n
    \               n = n / 2;\n            }\n            int count = 0;\n            while
    (n > 1) {\n                if (n % 2 == 0) {\n                    count++;\n                }\n
    \               n = n / 2;\n            }\n            int count = 0;\n            while
    (n > 1) {\n                if (n % 2 == 0) {\n                    count++;\n                }\n
    \               n = n / 2;\n            }\n            int count = 0;\n            while
    (n > 1) {\n                if (n % 2 == 0) {\n                    count++;\n                }\n
    \               n = n / 2;\n            }\n            int count = 0;\n            while
    (n > 1) {\n                if (n % 2 == 0) {\n                    count++;\n                }\n
    \               n = n / 2;\n            }\n            int count = 0;\n            while
    (n > 1) {\n                if (n % 2 == 0) {\n                    count++;\n                }\n
    \               n = n / 2;\n            }\n            int count = 0;\n            while
    (n > 1) {\n                if (n % 2 == 0) {\n                    count++;\n                }\n
    \               n = n / 2;\n            }\n            int count = 0;\n            while
    (n > 1) {\n                if (n % 2 == 0) {\n                    count++;\n                }\n
    \               n = n / 2;\n            }\n            int count = 0;\n            while
    (n > 1) {\n                if (n % 2 == 0) {\n                    count++;\n                }\n
    \               n = n / 2;\n            }\n            int count = 0;\n            while
    (n > 1) {\n                if (n % 2 == 0) {\n                    count++;\n                }\n
    \               n = n / 2;\n            }\n            int count = 0;\n            while
    (n > 1) {\n                if (n % 2 == 0) {\n                    count++;\n                }\n
    \               n = n / 2;\n            }\n            int count = 0;\n            while
    (n > 1) {\n                if (n % 2 == 0) {\n                    count++;\n                }\n
    \               n = n / 2;\n            }\n            int count = 0;\n            while
    (n > 1) {\n                if (n % 2 == 0) {\n                    count++;\n                }\n
    \               n = n / 2;\n            }\n            int count = 0;\n            while
    (n > 1) {\n                if (n % 2 == 0) {\n                    count++;\n                }\n
    \               n = n / 2;\n            }\n            int count = 0;\n            while
    (n > 1) {\n                if (n % 2 == 0) {\n                    count++;\n                }\n
    \               n = n / 2;\n            }\n\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_kyuaa_o.cs(149,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp_kyuaa_o.cs(159,2): error CS1513: } expected

    '
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    count = 0;\n            int i = 1;\n            while (i < chars.Length) {\n                if
    (chars[i] == c) {\n                    count++;\n                    i++;\n                }
    else {\n                    break;\n                }\n            }\n            if
    (count % 2 == 0) {\n                result += \" \" + c;\n            }\n        }\n
    \       return result.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b164546300a848eb8c8247ee902265ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b164546300a848eb8c8247ee902265ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n
    \       List<int> primes = new List<int>();\n        foreach (char c in charArray)
    {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n                for
    (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                    if (n % i == 0)
    {\n                        primes.Add(i);\n                    }\n                }\n
    \           }\n        }\n        foreach (int prime in primes) {\n            string
    temp = \"\";\n            for (int i = 0; i < charArray.Length; i++) {\n                if
    (charArray[i] == ' ') {\n                    temp += charArray[i];\n                }\n
    \           }\n            int count = 0;\n            foreach (char c in temp)
    {\n                if (c == ' ') {\n                    count++;\n                }\n
    \           }\n            if (count == prime) {\n                result += temp;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2659c5ad3bd7477aaa0073b49a5f1da1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2659c5ad3bd7477aaa0073b49a5f1da1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       HashSet<string> words = new HashSet<string>();\n        foreach (char
    c in chars) {\n            if (char.IsLetter(c)) {\n                string word
    = c.ToString();\n                words.Add(word);\n            }\n        }\n
    \       foreach (string word in words) {\n            int length = word.Length;\n
    \           if (length == 1) {\n                result += word;\n            }\n
    \           else if (length == 2 && word.StartsWith(\"a\") && word.EndsWith(\"a\"))
    {\n                result += word;\n            }\n            else if (length
    == 2 && word.StartsWith(\"a\") && word.EndsWith(\"e\")) {\n                result
    += word;\n            }\n            else if (length == 2 && word.StartsWith(\"e\")
    && word.EndsWith(\"a\")) {\n                result += word;\n            }\n            else
    if (length == 2 && word.StartsWith(\"e\") && word.EndsWith(\"e\")) {\n                result
    += word;\n            }\n            else if (length == 3 && word.StartsWith(\"a\")
    && word.EndsWith(\"e\") && word.StartsWith(\"i\") && word.EndsWith(\"i\")) {\n
    \               result += word;\n            }\n            else if (length ==
    3 && word.StartsWith(\"a\") && word.EndsWith(\"e\") && word.StartsWith(\"o\")
    && word.EndsWith(\"o\")) {\n                result += word;\n            }\n            else
    if (length == 3 && word.StartsWith(\"e\") && word.EndsWith(\"i\") && word.StartsWith(\"o\")
    && word.EndsWith(\"o\")) {\n                result += word;\n            }\n            else
    if (length == 3 && word.StartsWith(\"e\") && word.EndsWith(\"o\") && word.StartsWith(\"i\")
    && word.EndsWith(\"i\")) {\n                result += word;\n            }\n            else
    if (length == 3 && word.StartsWith(\"a\") && word.EndsWith(\"e\") && word.StartsWith(\"o\")
    && word.EndsWith(\"i\")) {\n                result += word;\n            }\n            else
    if (length == 3 && word.StartsWith(\"a\") && word.EndsWith(\"e\") && word.StartsWith(\"i\")
    && word.EndsWith(\"o\")) {\n                result += word;\n            }\n            else
    if (length == 3 && word.StartsWith(\"e\") && word.EndsWith(\"i\") && word.StartsWith(\"o\")
    && word.EndsWith(\"i\")) {\n                result += word;\n            }\n            else
    if (length == 3 && word.StartsWith(\"e\") && word.EndsWith(\"o\") && word.Star\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp03p0qns_.cs(71,92): error CS1026: ) expected

    /tmp/tmp03p0qns_.cs(71,92): error CS1525: Invalid expression term ''}''

    /tmp/tmp03p0qns_.cs(71,92): error CS1002: ; expected

    /tmp/tmp03p0qns_.cs(73,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp03p0qns_.cs(83,2): error CS1513: } expected

    '
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        foreach (char c in sentence) {\n            isPrime =
    true;\n            int n = Convert.ToInt32(c);\n            for (int i = 2; i
    <= Math.Sqrt(n); i++) {\n                if (n % i == 0) {\n                    isPrime
    = false;\n                    break;\n                }\n            }\n            if
    (isPrime) {\n                result += word;\n                word = \"\";\n            }\n
    \           word += c;\n        }\n        result += word;\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77cff3b8983942c6a94e447ce456a1d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77cff3b8983942c6a94e447ce456a1d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    temp = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)
    {\n            if (char.IsLetter(c)) {\n                word += c;\n            }
    else {\n                result += word;\n                word = \"\";\n            }\n
    \       }\n        result += word;\n        foreach (char c in sentence) {\n            if
    (char.IsLetter(c)) {\n                temp = c;\n                isPrime = true;\n
    \               for (int i = 2; i <= Math.Sqrt(word.Length); i++) {\n                    if
    (word.Length % i == 0) {\n                        isPrime = false;\n                        break;\n
    \                   }\n                }\n                if (isPrime) {\n                    result
    += temp;\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjgvguh0s.cs(39,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        char[] chars = sentence.ToCharArray();\n        List<int>
    primes = new List<int>();\n        foreach (char c in chars) {\n            int
    prime = GetPrime(c);\n            if (prime > 0)\n                primes.Add(prime);\n
    \       }\n        string result = new String();\n        foreach (int prime in
    primes) {\n            string primeString = String.Empty;\n            for (int
    i = 0; i < prime; i++) {\n                primeString += \" \";\n            }\n
    \           result += primeString;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe6yaynlr.cs(27,25): error CS0103: The name ''GetPrime'' does not exist
    in the current context

    /tmp/tmpe6yaynlr.cs(31,29): error CS1729: ''string'' does not contain a constructor
    that takes 0 arguments

    '
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string temp = \"\";\n        foreach
    (string word in sentence.Split(' '))\n        {\n            int length = word.Length;\n
    \           if (length == 1)\n            {\n                temp = temp + word;\n
    \           }\n            else\n            {\n                int flag = 0;\n
    \               for (int i = 1; i < length; i++)\n                {\n                    flag
    = flag * i;\n                }\n                if (flag == length)\n                {\n
    \                   temp = temp + word;\n                }\n            }\n        }\n
    \       result = temp;\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6af3bfe416934e729f87383de49a8fb8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6af3bfe416934e729f87383de49a8fb8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        foreach (string word in sentence.Split('
    '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n
    \           {\n                result += word;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1awgrmpt.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            if
    (IsPrime(c.ToString().Length)) {\n                result += c;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn6q5sw6c.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793939
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    word2 = \"\";\n        bool isPrime = true;\n        bool isPrime2 = true;\n        bool
    isPrime3 = true;\n        bool isPrime4 = true;\n        bool isPrime5 = true;\n
    \       bool isPrime6 = true;\n        bool isPrime7 = true;\n        bool isPrime8
    = true;\n        bool isPrime9 = true;\n        bool isPrime10 = true;\n        bool
    isPrime11 = true;\n        bool isPrime12 = true;\n        bool isPrime13 = true;\n
    \       bool isPrime14 = true;\n        bool isPrime15 = true;\n        bool isPrime16
    = true;\n        bool isPrime17 = true;\n        bool isPrime18 = true;\n        bool
    isPrime19 = true;\n        bool isPrime20 = true;\n        bool isPrime21 = true;\n
    \       bool isPrime22 = true;\n        bool isPrime23 = true;\n        bool isPrime24
    = true;\n        bool isPrime25 = true;\n        bool isPrime26 = true;\n        bool
    isPrime27 = true;\n        bool isPrime28 = true;\n        bool isPrime29 = true;\n
    \       bool isPrime30 = true;\n        bool isPrime31 = true;\n        bool isPrime32
    = true;\n        bool isPrime33 = true;\n        bool isPrime34 = true;\n        bool
    isPrime35 = true;\n        bool isPrime36 = true;\n        bool isPrime37 = true;\n
    \       bool isPrime38 = true;\n        bool isPrime39 = true;\n        bool isPrime40
    = true;\n        bool isPrime41 = true;\n        bool isPrime42 = true;\n        bool
    isPrime43 = true;\n        bool isPrime44 = true;\n        bool isPrime45 = true;\n
    \       bool isPrime46 = true;\n        bool isPrime47 = true;\n        bool isPrime48
    = true;\n        bool isPrime49 = true;\n        bool isPrime50 = true;\n        bool
    isPrime51 = true;\n        bool isPrime52 = true;\n        bool isPrime53 = true;\n
    \       bool isPrime54 = true;\n        bool isPrime55 = true;\n        bool isPrime56
    = true;\n        bool isPrime57 = true;\n        bool isPrime58 = true;\n        bool
    isPrime59 = true;\n        bool isPrime60 = true;\n        bool isPrime61 = \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzrzx4wqk.cs(87,25): error CS1525: Invalid expression term ''}''

    /tmp/tmpzrzx4wqk.cs(87,25): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        for (int i = 0; i < sentence.Length; i++) {\n            word
    = sentence.Substring(i, 1);\n            int length = word.Length;\n            if
    (length == 1) {\n                isPrime = true;\n            } else {\n                isPrime
    = false;\n            }\n            if (isPrime) {\n                for (int
    j = 2; j < length; j++) {\n                    if (length % j == 0) {\n                        isPrime
    = false;\n                        break;\n                    }\n                }\n
    \           }\n            if (isPrime) {\n                result += word;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da1e1fdfa5454c2a850590176c461a30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da1e1fdfa5454c2a850590176c461a30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    temp = \"\";\n        bool isPrime = true;\n        int length = sentence.Length;\n
    \       for (int i = 0; i < length; i++) {\n            word = sentence.Substring(i,
    1);\n            temp = word.ToLower();\n            isPrime = true;\n            for
    (int j = 2; j < Math.Sqrt(length); j++) {\n                if (temp.Length % j
    == 0) {\n                    isPrime = false;\n                    break;\n                }\n
    \           }\n            if (isPrime) {\n                result += \" \" + word;\n
    \           }\n        }\n        return result.Trim();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f0bb64626804d9a812af6216f2cb6c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f0bb64626804d9a812af6216f2cb6c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        bool isPrime = true;\n        string
    word = \"\";\n        foreach (char c in sentence) {\n            isPrime = true;\n
    \           int n = Convert.ToInt32(c);\n            for (int i = 2; i <= Math.Sqrt(n);
    i++) {\n                if (n % i == 0) {\n                    isPrime = false;\n
    \                   break;\n                }\n            }\n            if (isPrime)
    {\n                word += c;\n            }\n        }\n        foreach (char
    c in word) {\n            result += c;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2611e83a4e9426593a05ac65aeb6f1a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2611e83a4e9426593a05ac65aeb6f1a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794079
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       HashSet<string> words = new HashSet<string>();\n        foreach (char
    c in chars) {\n            if (char.IsLetter(c)) {\n                string word
    = c.ToString();\n                if (words.Contains(word)) {\n                    result
    += \" \" + word;\n                } else {\n                    words.Add(word);\n
    \               }\n            }\n        }\n        string newWords = \"\";\n
    \       foreach (string word in words) {\n            int length = word.Length;\n
    \           if (length == 1) {\n                newWords += word;\n            }
    else {\n                bool isPrime = true;\n                for (int i = 2;
    i <= Math.Sqrt(length); i++) {\n                    if (length % i == 0) {\n                        isPrime
    = false;\n                        break;\n                    }\n                }\n
    \               if (isPrime) {\n                    newWords += \" \" + word;\n
    \               }\n            }\n        }\n        return newWords.Trim();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3b14febef76b4990ab02c7cce3226940>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3b14febef76b4990ab02c7cce3226940>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    temp = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)
    {\n            word = word + c;\n        }\n        char[] charArray = word.ToCharArray();\n
    \       Array.Sort(charArray);\n        foreach (char c in charArray) {\n            temp
    = temp + c;\n        }\n        char[] charArray2 = temp.ToCharArray();\n        Array.Sort(charArray2);\n
    \       foreach (char c in charArray2) {\n            isPrime = true;\n            for
    (int i = 1; i < charArray2.Length; i++) {\n                if (c % charArray2[i]
    == 0) {\n                    isPrime = false;\n                    break;\n                }\n
    \           }\n            if (isPrime) {\n                result = result + c;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <daef146d80644c23a2b105cbd74991f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <daef146d80644c23a2b105cbd74991f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        List<string> words = new List<string>();\n
    \       foreach (string word in sentence.Split(' '))\n        {\n            words.Add(word);\n
    \       }\n        foreach (string word in words)\n        {\n            int
    length = word.Length;\n            if (length == 1)\n            {\n                result
    += word;\n            }\n            else if (length == 2 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 3 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 4 && IsPrime(length))\n            {\n
    \               result += word;\n            }\n            else if (length ==
    5 && IsPrime(length))\n            {\n                result += word;\n            }\n
    \           else if (length == 6 && IsPrime(length))\n            {\n                result
    += word;\n            }\n            else if (length == 7 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 8 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 9 && IsPrime(length))\n            {\n
    \               result += word;\n            }\n            else if (length ==
    10 && IsPrime(length))\n            {\n                result += word;\n            }\n
    \           else if (length == 11 && IsPrime(length))\n            {\n                result
    += word;\n            }\n            else if (length == 12 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 13 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 14 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 15 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 16 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 17 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 18 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 19 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 20 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 21 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 22 && IsPrime(length))\n
    \           {\n                result += word;\n\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_lcw6mxa.cs(122,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp_lcw6mxa.cs(132,2): error CS1513: } expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    count = 0;\n            while (c != ' ') {\n                count++;\n                c
    = chars[count];\n            }\n            if (IsPrime(count)) {\n                result
    += \" \" + c;\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfurqrh5l.cs(31,17): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmpfurqrh5l.cs(33,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string words = sentence.Split('
    ');\n        List<int> primes = new List<int>();\n        foreach (string word
    in words) {\n            int length = word.Length;\n            if (length ==
    1) continue;\n            int prime = 1;\n            while (prime * prime <=
    length) {\n                if (length == prime) break;\n                if (length
    % prime == 0) break;\n                prime++;\n            }\n            if
    (prime > 1) {\n                primes.Add(prime);\n                result += \"
    \" + word;\n            }\n        }\n        return result.Trim();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiy050q4a.cs(25,24): error CS0029: Cannot implicitly convert type ''string[]''
    to ''string''

    /tmp/tmpiy050q4a.cs(27,9): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        string str = string.Join(\" \", chars);\n
    \       char[] chars2 = str.ToCharArray();\n        Array.Sort(chars2);\n        string
    str2 = string.Join(\" \", chars2);\n        char[] chars3 = str2.ToCharArray();\n
    \       Array.Sort(chars3);\n        string str3 = string.Join(\" \", chars3);\n
    \       char[] chars4 = str3.ToCharArray();\n        Array.Sort(chars4);\n        string
    str4 = string.Join(\" \", chars4);\n        char[] chars5 = str4.ToCharArray();\n
    \       Array.Sort(chars5);\n        string str5 = string.Join(\" \", chars5);\n
    \       char[] chars6 = str5.ToCharArray();\n        Array.Sort(chars6);\n        string
    str6 = string.Join(\" \", chars6);\n        char[] chars7 = str6.ToCharArray();\n
    \       Array.Sort(chars7);\n        string str7 = string.Join(\" \", chars7);\n
    \       char[] chars8 = str7.ToCharArray();\n        Array.Sort(chars8);\n        string
    str8 = string.Join(\" \", chars8);\n        char[] chars9 = str8.ToCharArray();\n
    \       Array.Sort(chars9);\n        string str9 = string.Join(\" \", chars9);\n
    \       char[] chars10 = str9.ToCharArray();\n        Array.Sort(chars10);\n        string
    str10 = string.Join(\" \", chars10);\n        char[] chars11 = str10.ToCharArray();\n
    \       Array.Sort(chars11);\n        string str11 = string.Join(\" \", chars11);\n
    \       char[] chars12 = str11.ToCharArray();\n        Array.Sort(chars12);\n
    \       string str12 = string.Join(\" \", chars12);\n        char[] chars13 =
    str12.ToCharArray();\n        Array.Sort(chars13);\n        string str13 = string.Join(\"
    \", chars13);\n        char[] chars14 = str13.ToCharArray();\n        Array.Sort(chars14);\n
    \       string str14 = string.Join(\" \", chars14);\n        char[] chars15 =
    str14.ToCharArray();\n        Array.Sort(chars15);\n        string str15 = string.Join(\"
    \", chars\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphlxcpac9.cs(69,46): error CS1026: ) expected

    /tmp/tmphlxcpac9.cs(69,46): error CS1002: ; expected

    '
  timestamp: 1659823421
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string words = sentence.Split('
    ');\n        foreach (string word in words) {\n            int length = word.Length;\n
    \           bool isPrime = true;\n            for (int i = 2; i <= Math.Sqrt(length);
    i++) {\n                if (length % i == 0) {\n                    isPrime =
    false;\n                    break;\n                }\n            }\n            if
    (isPrime) {\n                result += word;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdqa2b81x.cs(25,24): error CS0029: Cannot implicitly convert type ''string[]''
    to ''string''

    /tmp/tmpdqa2b81x.cs(26,9): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    length = GetLength(c);\n            if (length != 0) {\n                for (int
    i = 0; i < length; i++) {\n                    result += c;\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp33gtxbl4.cs(28,26): error CS0103: The name ''GetLength'' does not exist
    in the current context

    '
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        string primes = \"\";\n        bool isPrime
    = true;\n        foreach (char c in chars) {\n            int n = Convert.ToInt32(c);\n
    \           if (isPrime) {\n                for (int i = 2; i <= n / 2; i++) {\n
    \                   if (n % i == 0) {\n                        isPrime = false;\n
    \                       break;\n                    }\n                }\n            }\n
    \           if (isPrime) {\n                primes += c.ToString();\n            }\n
    \       }\n        result = primes;\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03863a4e5cdc4b00bce29e7cc530c9b7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03863a4e5cdc4b00bce29e7cc530c9b7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        foreach (string word in sentence.Split('
    '))\n        {\n            int n = Convert.ToInt32(word);\n            if (IsPrime(n))\n
    \           {\n                result += \" \" + word;\n            }\n        }\n
    \       return result.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplf5h0d3m.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       List<int> primes = new List<int>();\n        foreach (char c in chars)
    {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n                primes.Add(n);\n
    \           }\n        }\n        foreach (int p in primes) {\n            int
    count = 0;\n            foreach (char c in chars) {\n                if (Convert.ToInt32(c)
    == p) {\n                    count++;\n                }\n            }\n            if
    (count == 0) {\n                result += p.ToString();\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8efa65f9e27e4bfd9f5eb4e98eeb2615>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8efa65f9e27e4bfd9f5eb4e98eeb2615>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    length = c.ToString().Length;\n            int prime = IsPrime(length);\n            if
    (prime == 1) {\n                result += c;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphsvz0a43.cs(29,25): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       HashSet<string> words = new HashSet<string>();\n        foreach (char
    c in chars) {\n            if (char.IsLetter(c)) {\n                string word
    = c.ToString();\n                if (words.Contains(word)) {\n                    result
    += \" \" + word;\n                } else {\n                    words.Add(word);\n
    \               }\n            }\n        }\n        foreach (string word in words)
    {\n            int length = word.Length;\n            if (length == 1) {\n                result
    += \" \" + word;\n            } else {\n                for (int i = 2; i <= Math.Sqrt(length);
    i++) {\n                    if (length % i == 0) {\n                        string
    sub = word.Substring(0, i);\n                        result += \" \" + sub;\n
    \                       break;\n                    }\n                }\n            }\n
    \       }\n        return result.Trim();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6cfc07c3f7484670b9c21656518ee565>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6cfc07c3f7484670b9c21656518ee565>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    temp = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)
    {\n            isPrime = true;\n            temp = c;\n            int count =
    0;\n            while (temp != \"\") {\n                temp = temp.Substring(1);\n
    \               count++;\n            }\n            if (count % 2 == 0) {\n                isPrime
    = false;\n            }\n            if (isPrime) {\n                result +=
    \" \" + word;\n                word = \"\";\n            }\n            else {\n
    \               word += c;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv17_mbvu.cs(30,20): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       HashSet<string> words = new HashSet<string>();\n        foreach (char
    c in chars) {\n            if (char.IsLetter(c)) {\n                string word
    = c.ToString();\n                if (words.Contains(word)) {\n                    words.Remove(word);\n
    \               } else {\n                    words.Add(word);\n                }\n
    \           }\n        }\n        foreach (string word in words) {\n            int
    len = word.Length;\n            int count = 0;\n            while (len > 1) {\n
    \               count += 2;\n                len -= 2;\n            }\n            if
    (len == 1) {\n                result += word;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dca263cb184cfb97cc8e7c727d145d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dca263cb184cfb97cc8e7c727d145d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        List<string> words = new List<string>();\n
    \       foreach (string word in sentence.Split(' '))\n        {\n            words.Add(word);\n
    \       }\n        foreach (string word in words)\n        {\n            int
    length = word.Length;\n            int prime = 1;\n            while (prime <=
    length)\n            {\n                if (IsPrime(length))\n                {\n
    \                   prime++;\n                }\n                else\n                {\n
    \                   length--;\n                }\n            }\n            result
    += \" \" + word;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ofjxdrv.cs(36,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        List<string> words = new List<string>();\n
    \       foreach (string word in sentence.Split(' '))\n        {\n            words.Add(word);\n
    \       }\n        List<int> primes = new List<int>();\n        foreach (string
    word in words)\n        {\n            int length = word.Length;\n            if
    (length == 1)\n            {\n                primes.Add(1);\n            }\n
    \           else\n            {\n                for (int i = 2; i <= Math.Sqrt(length);
    i++)\n                {\n                    if (length%i == 0)\n                    {\n
    \                       primes.Add(i);\n                        break;\n                    }\n
    \               }\n            }\n        }\n        foreach (int prime in primes)\n
    \       {\n            string word = \"\";\n            foreach (string word in
    words)\n            {\n                if (word.Length == prime)\n                {\n
    \                   result += \" \" + word;\n                }\n            }\n
    \       }\n        return result.Trim();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv7ul9mol.cs(53,29): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpv7ul9mol.cs(52,20): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    '
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        foreach (string word in sentence.Split('
    '))\n        {\n            int len = word.Length;\n            bool isPrime =
    true;\n            for (int i = 2; i <= Math.Sqrt(len); i++)\n            {\n
    \               if (len % i == 0)\n                {\n                    isPrime
    = false;\n                    break;\n                }\n            }\n            if
    (isPrime)\n            {\n                result += word;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bb3dd2a3ea2d4050a2c34460ab551fb8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bb3dd2a3ea2d4050a2c34460ab551fb8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        bool isPrime = true;\n        string
    newString = \"\";\n        foreach (string word in sentence.Split(' '))\n        {\n
    \           int length = word.Length;\n            if (length == 0)\n            {\n
    \               continue;\n            }\n            int count = 0;\n            int
    i = 2;\n            while (i < length)\n            {\n                if (length%i
    == 0)\n                {\n                    count++;\n                }\n                i++;\n
    \           }\n            if (count == 0)\n            {\n                isPrime
    = false;\n            }\n            if (isPrime)\n            {\n                newString
    += word + \" \";\n            }\n        }\n        result = newString;\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2ea95c2524940ae88a39f48fa70274a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2ea95c2524940ae88a39f48fa70274a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        char[] charArray = sentence.ToCharArray();\n        List<string>
    words = new List<string>();\n        foreach (char c in charArray) {\n            if
    (char.IsLetter(c)) {\n                words.Add(c.ToString());\n            }\n
    \       }\n        string result = \"\";\n        foreach (string word in words)
    {\n            int length = word.Length;\n            if (length == 1) {\n                result
    += word;\n                continue;\n            }\n            bool isPrime =
    true;\n            for (int i = 2; i <= Math.Sqrt(length); i++) {\n                if
    (length % i == 0) {\n                    isPrime = false;\n                    break;\n
    \               }\n            }\n            if (isPrime) {\n                result
    += word;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4d423db8bdd40c384c73a7fee0831d7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4d423db8bdd40c384c73a7fee0831d7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        List<string> words = new List<string>();\n
    \       foreach (string word in sentence.Split(' '))\n        {\n            words.Add(word);\n
    \       }\n        foreach (string word in words)\n        {\n            int
    length = word.Length;\n            bool isPrime = true;\n            for (int
    i = 2; i <= Math.Sqrt(length); i++)\n            {\n                if (length
    % i == 0)\n                {\n                    isPrime = false;\n                    break;\n
    \               }\n            }\n            if (isPrime)\n            {\n                result
    += \" \" + word;\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf6e8abdedbc4651879196bde2c73631>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf6e8abdedbc4651879196bde2c73631>:0
    \n"
  stdout: ''
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    temp = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)
    {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        foreach (char c in word) {\n            temp = Convert.ToString(Math.Sqrt(Convert.ToDouble(c)));\n
    \           if (temp.Length > 1) {\n                isPrime = false;\n            }\n
    \       }\n        if (isPrime) {\n            foreach (char c in word) {\n                result
    += \" \" + c;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidCastException: Invalid cast from
    'Char' to 'Double'.\n  at System.Char.System.IConvertible.ToDouble (System.IFormatProvider
    provider) [0x00014] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToDouble
    (System.Char value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.WordsInSentence
    (System.String sentence) [0x0006e] in <1b7f1d4fd7c647ef99aee45eb524916e>:0 \n
    \ at Problem.Main (System.String[] args) [0x00001] in <1b7f1d4fd7c647ef99aee45eb524916e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidCastException: Invalid cast
    from 'Char' to 'Double'.\n  at System.Char.System.IConvertible.ToDouble (System.IFormatProvider
    provider) [0x00014] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToDouble
    (System.Char value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.WordsInSentence
    (System.String sentence) [0x0006e] in <1b7f1d4fd7c647ef99aee45eb524916e>:0 \n
    \ at Problem.Main (System.String[] args) [0x00001] in <1b7f1d4fd7c647ef99aee45eb524916e>:0
    \n"
  stdout: ''
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       int[] primes = new int[100];\n        Array.Sort(primes);\n        foreach
    (int prime in primes) {\n            int count = 0;\n            foreach (char
    c in chars) {\n                if (IsPrime(prime, c)) {\n                    count++;\n
    \               }\n            }\n            if (count == chars.Length) {\n                result
    += new string(chars, 0, chars.Length);\n                break;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsmdihy80.cs(31,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n                result
    += \" \" + c;\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp41n77v7e.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793936
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       int[] primes = new int[chars.Length];\n        bool isPrime = true;\n
    \       for (int i = 0; i < chars.Length; i++) {\n            primes[i] = 1;\n
    \           isPrime = true;\n            for (int j = i + 1; j < chars.Length;
    j++) {\n                if (chars[i] == chars[j]) {\n                    isPrime
    = false;\n                    break;\n                }\n            }\n            if
    (isPrime) {\n                primes[i]++;\n            }\n        }\n        for
    (int i = 0; i < chars.Length; i++) {\n            if (primes[i] > 1) {\n                result
    += chars[i];\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d6ba36711b4744fea3eedb9b8e48c171>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d6ba36711b4744fea3eedb9b8e48c171>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            } else {\n                isPrime =
    false;\n            }\n        }\n        if (isPrime) {\n            int length
    = word.Length;\n            int prime = 0;\n            int primeCount = 0;\n
    \           int primeCount2 = 0;\n            int primeCount3 = 0;\n            int
    primeCount4 = 0;\n            int primeCount5 = 0;\n            int primeCount6
    = 0;\n            int primeCount7 = 0;\n            int primeCount8 = 0;\n            int
    primeCount9 = 0;\n            int primeCount10 = 0;\n            int primeCount11
    = 0;\n            int primeCount12 = 0;\n            int primeCount13 = 0;\n            int
    primeCount14 = 0;\n            int primeCount15 = 0;\n            int primeCount16
    = 0;\n            int primeCount17 = 0;\n            int primeCount18 = 0;\n            int
    primeCount19 = 0;\n            int primeCount20 = 0;\n            int primeCount21
    = 0;\n            int primeCount22 = 0;\n            int primeCount23 = 0;\n            int
    primeCount24 = 0;\n            int primeCount25 = 0;\n            int primeCount26
    = 0;\n            int primeCount27 = 0;\n            int primeCount28 = 0;\n            int
    primeCount29 = 0;\n            int primeCount30 = 0;\n            int primeCount31
    = 0;\n            int primeCount32 = 0;\n            int primeCount33 = 0;\n            int
    primeCount34 = 0;\n            int primeCount35 = 0;\n            int primeCount36
    = 0;\n            int primeCount37 = 0;\n            int primeCount38 = 0;\n            int
    primeCount39 = 0;\n            int primeCount40 = 0;\n            int primeCount41
    = 0;\n            int primeCount42 = 0;\n            int primeCount43 = 0;\n            int
    primeCount44 = 0;\n            int primeCount45 = 0;\n            int primeCount46
    = 0;\n            int primeCount47 = 0;\n            int primeCount48 = 0;\n            int
    primeCount49 = 0;\n            int primeCount50 = 0;\n            int primeCount51
    = 0;\n            int primeCount52 = 0;\n            int primeCount53 = 0;\n            int
    primeCount54 = 0;\n            int primeCount55 = 0;\n            int primeCount56
    = 0;\n            int primeCount57 = 0;\n            int primeCount58 = 0;\n            int
    primeCount59 = 0;\n            int primeCount60 = 0;\n            int primeCount61
    = 0;\n            int primeCount62 = 0;\n            int primeCount63 = 0;\n            int
    primeCount64 = 0;\n            int prime\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphuzlso8d.cs(101,22): error CS1002: ; expected

    /tmp/tmphuzlso8d.cs(103,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmphuzlso8d.cs(113,2): error CS1513: } expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        foreach (string word in sentence.Split('
    '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n
    \           {\n                result += word;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1awgrmpt.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    temp = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)
    {\n            if (char.IsLetter(c)) {\n                word += c;\n            }
    else {\n                temp = word;\n                word = \"\";\n                isPrime
    = true;\n                for (int i = 0; i < temp.Length; i++) {\n                    isPrime
    = isPrime && IsPrime(temp[i]);\n                }\n                if (isPrime)
    {\n                    result += temp;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprmi0cev7.cs(36,42): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    temp = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        temp = word;\n
    \       List<int> primes = new List<int>();\n        primes.Add(2);\n        primes.Add(3);\n
    \       primes.Add(5);\n        primes.Add(7);\n        primes.Add(11);\n        primes.Add(13);\n
    \       primes.Add(17);\n        primes.Add(19);\n        primes.Add(23);\n        primes.Add(29);\n
    \       primes.Add(31);\n        primes.Add(37);\n        primes.Add(41);\n        primes.Add(43);\n
    \       primes.Add(47);\n        primes.Add(53);\n        primes.Add(59);\n        primes.Add(61);\n
    \       primes.Add(67);\n        primes.Add(71);\n        primes.Add(73);\n        primes.Add(79);\n
    \       primes.Add(83);\n        primes.Add(89);\n        primes.Add(97);\n        primes.Add(103);\n
    \       primes.Add(105);\n        primes.Add(107);\n        primes.Add(109);\n
    \       primes.Add(113);\n        primes.Add(127);\n        primes.Add(131);\n
    \       primes.Add(137);\n        primes.Add(139);\n        primes.Add(143);\n
    \       primes.Add(147);\n        primes.Add(151);\n        primes.Add(157);\n
    \       primes.Add(163);\n        primes.Add(167);\n        primes.Add(173);\n
    \       primes.Add(179);\n        primes.Add(181);\n        primes.Add(191);\n
    \       primes.Add(193);\n        primes.Add(197);\n        primes.Add(199);\n
    \       primes.Add(211);\n        primes.Add(223);\n        primes.Add(227);\n
    \       primes.Add(229);\n        primes.Add(233);\n        primes.Add(239);\n
    \       primes.Add(241);\n        primes.Add(251);\n        primes.Add(257);\n
    \       primes.Add(263);\n        primes.Add(269);\n        primes.Add(271);\n
    \       primes.Add(277);\n        primes.Add(281);\n        primes.Add(283);\n
    \       primes.Add(293);\n        primes.Add(307);\n        primes.Add(311);\n
    \       primes.Add(313;\n        primes.\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa0953jyn.cs(99,23): error CS1026: ) expected

    /tmp/tmpa0953jyn.cs(100,16): error CS1001: Identifier expected

    /tmp/tmpa0953jyn.cs(100,16): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n
    \       Array.Sort(charArray);\n        foreach (char c in charArray) {\n            if
    (IsPrime(c.ToString().Length)) {\n                result += \" \" + c;\n            }\n
    \       }\n        return result.Trim();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjn09rclk.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        string str = string.Join(\" \", chars);\n
    \       char[] chars2 = str.ToCharArray();\n        Array.Sort(chars2);\n        string
    str2 = string.Join(\" \", chars2);\n        char[] chars3 = str2.ToCharArray();\n
    \       Array.Sort(chars3);\n        string str3 = string.Join(\" \", chars3);\n
    \       char[] chars4 = str3.ToCharArray();\n        Array.Sort(chars4);\n        string
    str4 = string.Join(\" \", chars4);\n        char[] chars5 = str4.ToCharArray();\n
    \       Array.Sort(chars5);\n        string str5 = string.Join(\" \", chars5);\n
    \       char[] chars6 = str5.ToCharArray();\n        Array.Sort(chars6);\n        string
    str6 = string.Join(\" \", chars6);\n        char[] chars7 = str6.ToCharArray();\n
    \       Array.Sort(chars7);\n        string str7 = string.Join(\" \", chars7);\n
    \       char[] chars8 = str7.ToCharArray();\n        Array.Sort(chars8);\n        string
    str8 = string.Join(\" \", chars8);\n        char[] chars9 = str8.ToCharArray();\n
    \       Array.Sort(chars9);\n        string str9 = string.Join(\" \", chars9);\n
    \       char[] chars10 = str9.ToCharArray();\n        Array.Sort(chars10);\n        string
    str10 = string.Join(\" \", chars10);\n        char[] chars11 = str10.ToCharArray();\n
    \       Array.Sort(chars11);\n        string str11 = string.Join(\" \", chars11);\n
    \       char[] chars12 = str11.ToCharArray();\n        Array.Sort(chars12);\n
    \       string str12 = string.Join(\" \", chars12);\n        char[] chars13 =
    str12.ToCharArray();\n        Array.Sort(chars13);\n        string str13 = string.Join(\"
    \", chars13);\n        char[] chars14 = str13.ToCharArray();\n        Array.Sort(chars14);\n
    \       string str14 = string.Join(\" \", chars14);\n        char[] chars15 =
    str14.ToCharArray();\n        Array.Sort(chars15);\n        string str15 = string.Join(\"
    \", chars\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphlxcpac9.cs(69,46): error CS1026: ) expected

    /tmp/tmphlxcpac9.cs(69,46): error CS1002: ; expected

    '
  timestamp: 1659823421
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       List<int> primes = new List<int>();\n        foreach (char c in chars)
    {\n            int prime = IsPrime(c);\n            if (prime == -1) {\n                return
    \"\";\n            }\n            primes.Add(prime);\n        }\n        List<int>
    primesSorted = primes.OrderBy(p => p).ToList();\n        foreach (int prime in
    primesSorted) {\n            int count = 0;\n            while (count < prime)
    {\n                result += chars[count];\n                count++;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo30y3bq9.cs(28,25): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        foreach (string word in sentence.Split('
    '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n
    \           {\n                result += \" \" + word;\n            }\n        }\n
    \       return result.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptlasi77o.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n                result
    += \" \" + c;\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp41n77v7e.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    word2 = \"\";\n        string word3 = \"\";\n        string word4 = \"\";\n        string
    word5 = \"\";\n        string word6 = \"\";\n        string word7 = \"\";\n        string
    word8 = \"\";\n        string word9 = \"\";\n        string word10 = \"\";\n        string
    word11 = \"\";\n        string word12 = \"\";\n        string word13 = \"\";\n
    \       string word14 = \"\";\n        string word15 = \"\";\n        string word16
    = \"\";\n        string word17 = \"\";\n        string word18 = \"\";\n        string
    word19 = \"\";\n        string word20 = \"\";\n        string word21 = \"\";\n
    \       string word22 = \"\";\n        string word23 = \"\";\n        string word24
    = \"\";\n        string word25 = \"\";\n        string word26 = \"\";\n        string
    word27 = \"\";\n        string word28 = \"\";\n        string word29 = \"\";\n
    \       string word30 = \"\";\n        string word31 = \"\";\n        string word32
    = \"\";\n        string word33 = \"\";\n        string word34 = \"\";\n        string
    word35 = \"\";\n        string word36 = \"\";\n        string word37 = \"\";\n
    \       string word38 = \"\";\n        string word39 = \"\";\n        string word40
    = \"\";\n        string word41 = \"\";\n        string word42 = \"\";\n        string
    word43 = \"\";\n        string word44 = \"\";\n        string word45 = \"\";\n
    \       string word46 = \"\";\n        string word47 = \"\";\n        string word48
    = \"\";\n        string word49 = \"\";\n        string word50 = \"\";\n        string
    word51 = \"\";\n        string word52 = \"\";\n        string word53 = \"\";\n
    \       string word54 = \"\";\n        string word55 = \"\";\n        string word56
    = \"\";\n        string word57 = \"\";\n        string word58 = \"\";\n        string
    word59 = \"\";\n        string word60 = \"\";\n        string word61 = \"\";\n
    \       string word62 = \"\";\n        string word63 = \"\";\n        string word64
    = \"\";\n        string word65 = \"\";\n        string word66 = \"\";\n        string
    word67 = \"\";\n        string word68 = \"\";\n        string word69 = \"\";\n
    \       string word70 = \"\";\n        string word71 = \"\";\n        string word72
    = \"\";\n        string word73 = \"\";\n        string word74 = \"\";\n        string
    word75 = \"\";\n        string word76 = \"\";\n        string word77 = \"\";\n
    \       string word78 = \"\";\n        string word79 = \"\";\n        string word80
    = \"\";\n        string word81 = \"\";\n        string word82 = \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp99iv9gic.cs(106,24): error CS1525: Invalid expression term ''}''

    /tmp/tmp99iv9gic.cs(106,24): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n                result
    += \" \" + c;\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp41n77v7e.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    temp = \"\";\n        char[] charArray = sentence.ToCharArray();\n        Array.Sort(charArray);\n
    \       foreach (char c in charArray) {\n            if (char.IsLetter(c)) {\n
    \               word += c;\n            } else {\n                temp = word;\n
    \               word = \"\";\n                if (IsPrime(temp.Length)) {\n                    result
    += temp;\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcahq2kdd.cs(35,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n                result
    += \" \" + c;\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp41n77v7e.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        foreach (string word in sentence.Split('
    '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n
    \           {\n                result += \" \" + word;\n            }\n        }\n
    \       return result.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptlasi77o.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n                result
    += \" \" + c;\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp41n77v7e.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n                result
    += \" \" + c;\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp41n77v7e.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    temp = \"\";\n        char[] charArray = sentence.ToCharArray();\n        Array.Sort(charArray);\n
    \       foreach (char c in charArray) {\n            if (char.IsLetter(c)) {\n
    \               word += c;\n            } else {\n                temp = word;\n
    \               word = \"\";\n                if (IsPrime(temp.Length)) {\n                    result
    += temp;\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcahq2kdd.cs(35,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        string temp = \"\";\n        foreach (char c in sentence)
    {\n            if (char.IsLetter(c)) {\n                word += c;\n            }
    else {\n                temp = word;\n                word = \"\";\n                isPrime
    = true;\n                for (int i = 0; i < temp.Length; i++) {\n                    if
    (temp[i] == '.') {\n                        isPrime = false;\n                        break;\n
    \                   }\n                }\n                if (isPrime) {\n                    result
    += word;\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d93a705f11c444edba73453fee03ae53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d93a705f11c444edba73453fee03ae53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        foreach
    (char c in sentence) {\n            if (char.IsLetter(c)) {\n                word
    += c;\n            }\n        }\n        char[] chars = word.ToCharArray();\n
    \       List<int> primes = new List<int>();\n        foreach (char c in chars)
    {\n            int n = Convert.ToInt32(c);\n            primes.Add(n);\n        }\n
    \       primes.Sort();\n        foreach (int p in primes) {\n            int count
    = 0;\n            foreach (char c in chars) {\n                if (p == Convert.ToInt32(c))
    {\n                    count++;\n                }\n            }\n            if
    (count == chars.Length) {\n                result += \" \" + word;\n            }\n
    \       }\n        return result.Trim();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a88a4692d7094671982e5c60497ba849>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a88a4692d7094671982e5c60497ba849>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    len = c.ToString().Length;\n            if (len == 1) continue;\n            int
    count = 0;\n            while (true) {\n                string str = c.ToString();\n
    \               string newstr = str.Substring(0, str.Length - 1);\n                if
    (newstr.Length == len) break;\n                count++;\n            }\n            if
    (count == len) result += c.ToString();\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1b0f7b053194c43a201aadb45e161c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1b0f7b053194c43a201aadb45e161c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        foreach (string word in sentence.Split('
    '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n
    \           {\n                result += \" \" + word;\n            }\n        }\n
    \       return result.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptlasi77o.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n
    \       List<int> primes = new List<int>();\n        foreach (char c in charArray)
    {\n            int prime = PrimeNumber(c);\n            if (prime > 1) {\n                primes.Add(prime);\n
    \           }\n        }\n        foreach (int prime in primes) {\n            result
    += \" \" + charArray[prime];\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2ho9v4a0.cs(28,25): error CS0103: The name ''PrimeNumber'' does not exist
    in the current context

    '
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        bool isPrime = true;\n        foreach
    (char c in sentence) {\n            if (char.IsLetter(c)) {\n                isPrime
    = true;\n                for (int i = 2; i <= Math.Sqrt(c); i++) {\n                    if
    (c % i == 0) {\n                        isPrime = false;\n                        break;\n
    \                   }\n                }\n                if (isPrime) {\n                    result
    += \" \" + c;\n                }\n            }\n        }\n        return result.Trim();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32274ea8959d4008ae7ffad8c5c07cc3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32274ea8959d4008ae7ffad8c5c07cc3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        bool isPrime = true;\n        string prime
    = \"\";\n        string prime2 = \"\";\n        string prime3 = \"\";\n        string
    prime4 = \"\";\n        string prime5 = \"\";\n        string prime6 = \"\";\n
    \       string prime7 = \"\";\n        string prime8 = \"\";\n        string prime9
    = \"\";\n        string prime10 = \"\";\n        string prime11 = \"\";\n        string
    prime12 = \"\";\n        string prime13 = \"\";\n        string prime14 = \"\";\n
    \       string prime15 = \"\";\n        string prime16 = \"\";\n        string
    prime17 = \"\";\n        string prime18 = \"\";\n        string prime19 = \"\";\n
    \       string prime20 = \"\";\n        string prime21 = \"\";\n        string
    prime22 = \"\";\n        string prime23 = \"\";\n        string prime24 = \"\";\n
    \       string prime25 = \"\";\n        string prime26 = \"\";\n        string
    prime27 = \"\";\n        string prime28 = \"\";\n        string prime29 = \"\";\n
    \       string prime30 = \"\";\n        string prime31 = \"\";\n        string
    prime32 = \"\";\n        string prime33 = \"\";\n        string prime34 = \"\";\n
    \       string prime35 = \"\";\n        string prime36 = \"\";\n        string
    prime37 = \"\";\n        string prime38 = \"\";\n        string prime39 = \"\";\n
    \       string prime40 = \"\";\n        string prime41 = \"\";\n        string
    prime42 = \"\";\n        string prime43 = \"\";\n        string prime44 = \"\";\n
    \       string prime45 = \"\";\n        string prime46 = \"\";\n        string
    prime47 = \"\";\n        string prime48 = \"\";\n        string prime49 = \"\";\n
    \       string prime50 = \"\";\n        string prime51 = \"\";\n        string
    prime52 = \"\";\n        string prime53 = \"\";\n        string prime54 = \"\";\n
    \       string prime55 = \"\";\n        string prime56 = \"\";\n        string
    prime57 = \"\";\n        string prime58 = \"\";\n        string prime59 = \"\";\n
    \       string prime60 = \"\";\n        string prime61 = \"\";\n        string
    prime62 = \"\";\n        string prime63 = \"\";\n        string prime64 = \"\";\n
    \       string prime65 = \"\";\n        string prime66 = \"\";\n        string
    prime67 = \"\";\n        string prime68 = \"\";\n        string prime69 = \"\";\n
    \       string prime70 = \"\";\n        string prime71 = \"\";\n        string
    prime72 = \"\";\n        string prime73 = \"\";\n        string prime74 = \"\";\n
    \       string prime75 = \"\";\n        string prime76 = \"\";\n        string
    prime77 = \"\";\n        string prime78\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptt5whox_.cs(105,23): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        List<string> words = new List<string>();\n
    \       foreach (string word in sentence.Split(' '))\n        {\n            int
    length = word.Length;\n            if (length == 1)\n            {\n                words.Add(word);\n
    \           }\n            else\n            {\n                bool isPrime =
    true;\n                for (int i = 2; i <= Math.Sqrt(length); i++)\n                {\n
    \                   if (length % i == 0)\n                    {\n                        isPrime
    = false;\n                        break;\n                    }\n                }\n
    \               if (isPrime)\n                {\n                    words.Add(word);\n
    \               }\n            }\n        }\n        foreach (string word in words)\n
    \       {\n            result += \" \" + word;\n        }\n        return result.Trim();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <66ef578d32f341b097c091874047c0a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <66ef578d32f341b097c091874047c0a4>:0
    \n"
  stdout: ''
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        foreach (char c in sentence) {\n            int n = Convert.ToInt32(c);\n
    \           if (n % 2 == 0) {\n                isPrime = false;\n            }\n
    \       }\n        if (isPrime) {\n            int n = Convert.ToInt32(sentence);\n
    \           int count = 0;\n            while (n != 1) {\n                n =
    n / 2;\n                count++;\n            }\n            int count = 0;\n
    \           while (n != 1) {\n                n = n / 2;\n                count++;\n
    \           }\n            int count = 0;\n            while (n != 1) {\n                n
    = n / 2;\n                count++;\n            }\n            int count = 0;\n
    \           while (n != 1) {\n                n = n / 2;\n                count++;\n
    \           }\n            int count = 0;\n            while (n != 1) {\n                n
    = n / 2;\n                count++;\n            }\n            int count = 0;\n
    \           while (n != 1) {\n                n = n / 2;\n                count++;\n
    \           }\n            int count = 0;\n            while (n != 1) {\n                n
    = n / 2;\n                count++;\n            }\n            int count = 0;\n
    \           while (n != 1) {\n                n = n / 2;\n                count++;\n
    \           }\n            int count = 0;\n            while (n != 1) {\n                n
    = n / 2;\n                count++;\n            }\n            int count = 0;\n
    \           while (n != 1) {\n                n = n / 2;\n                count++;\n
    \           }\n            int count = 0;\n            while (n != 1) {\n                n
    = n / 2;\n                count++;\n            }\n            int count = 0;\n
    \           while (n != 1) {\n                n = n / 2;\n                count++;\n
    \           }\n            int count = 0;\n            while (n != 1) {\n                n
    = n / 2;\n                count++;\n            }\n            int count = 0;\n
    \           while (n != 1) {\n                n = n / 2;\n                count++;\n
    \           }\n            int count = 0;\n            while (n != 1) {\n                n
    = n / 2;\n                count++;\n            }\n            int count = 0;\n
    \           while (n != 1) {\n                n = n / 2;\n                count++;\n
    \           }\n            int count = 0;\n            while (n != 1) {\n                n
    = n / 2;\n                count++;\n            }\n            int count = 0;\n
    \           while (n != 1) {\n                n = n / 2;\n                count++;\n
    \           }\n            int count = 0;\n            while (n != 1) {\n                n
    = n / 2;\n                count++;\n            }\n            int count = 0;\n
    \           while (n != 1) {\n                n = n / 2;\n                count++;\n
    \           }\n            int count = 0;\n            while (n != \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeonx48a3.cs(136,24): error CS1525: Invalid expression term ''}''

    /tmp/tmpeonx48a3.cs(136,24): error CS1026: ) expected

    /tmp/tmpeonx48a3.cs(136,24): error CS1002: ; expected

    /tmp/tmpeonx48a3.cs(138,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpeonx48a3.cs(148,2): error CS1513: } expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        foreach
    (char c in sentence) {\n            if (char.IsLetter(c)) {\n                word
    += c;\n            }\n        }\n        List<string> words = new List<string>();\n
    \       foreach (char c in word) {\n            int length = Convert.ToInt32(c);\n
    \           string newWord = word.Substring(0, length);\n            if (newWord.Length
    > 0) {\n                words.Add(newWord);\n            }\n        }\n        foreach
    (string word in words) {\n            int length = Convert.ToInt32(word);\n            if
    (length == 1) {\n                result += word;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4omv3eta.cs(39,25): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        char[] charArray = sentence.ToCharArray();\n        List<string>
    words = new List<string>();\n        foreach (char c in charArray) {\n            if
    (char.IsLetter(c)) {\n                words.Add(c.ToString());\n            }\n
    \       }\n        string result = \"\";\n        foreach (string word in words)
    {\n            int length = word.Length;\n            bool isPrime = true;\n            for
    (int i = 2; i <= Math.Sqrt(length); i++) {\n                if (length % i ==
    0) {\n                    isPrime = false;\n                    break;\n                }\n
    \           }\n            if (isPrime) {\n                result += \" \" + word;\n
    \           }\n        }\n        return result.Trim();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9bd6d3dac06547bfb398cbe098814e4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9bd6d3dac06547bfb398cbe098814e4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       HashSet<string> words = new HashSet<string>();\n        foreach (char
    c in chars) {\n            if (char.IsLetter(c)) {\n                string word
    = c.ToString();\n                words.Add(word);\n            }\n        }\n
    \       foreach (string word in words) {\n            int length = word.Length;\n
    \           if (length == 1) {\n                result += word;\n            }
    else if (length == 2 && word.Contains(\"a\") && word.Contains(\"e\")) {\n                result
    += word;\n            } else if (length == 2 && word.Contains(\"a\") && word.Contains(\"i\"))
    {\n                result += word;\n            } else if (length == 2 && word.Contains(\"e\")
    && word.Contains(\"i\")) {\n                result += word;\n            } else
    if (length == 3 && word.Contains(\"a\") && word.Contains(\"e\") && word.Contains(\"i\"))
    {\n                result += word;\n            } else if (length == 3 && word.Contains(\"a\")
    && word.Contains(\"e\") && word.Contains(\"o\")) {\n                result +=
    word;\n            } else if (length == 3 && word.Contains(\"a\") && word.Contains(\"i\")
    && word.Contains(\"o\")) {\n                result += word;\n            } else
    if (length == 3 && word.Contains(\"e\") && word.Contains(\"i\") && word.Contains(\"o\"))
    {\n                result += word;\n            } else if (length == 3 && word.Contains(\"e\")
    && word.Contains(\"o\") && word.Contains(\"i\")) {\n                result +=
    word;\n            } else if (length == 3 && word.Contains(\"i\") && word.Contains(\"o\")
    && word.Contains(\"i\")) {\n                result += word;\n            } else
    if (length == 3 && word.Contains(\"o\") && word.Contains(\"i\") && word.Contains(\"i\"))
    {\n                result += word;\n            } else if (length == 4 && word.Contains(\"a\")
    && word.Contains(\"e\") && word.Contains(\"i\") && word.Contains(\"o\")) {\n                result
    += word;\n            } else if (length == 4 && word.Contains(\"a\") && word.Contains(\"e\")
    && word.Contains(\"o\") && word.Contains(\"i\")) {\n                result +=
    word;\n            } else if (length == 4 && word.Contains(\"a\") && word.Contains(\"i\")
    && word.Contains(\"o\") && word.Contains(\"i\")) {\n                result +=
    word;\n            } else if (length == 4 && word.Contains(\"e\") && word.Contains(\"i\")
    && word.Contains(\"o\") && word.Contains(\"i\")) {\n                result +=
    word;\n            } else if (length == 4 && word.Contains(\"e\") && word.Contains(\"o\")
    && word.Contains(\"i\") && word.Contains(\"i\")) {\n                result +=
    word;\n            } else if (length == 4 && word.Contains(\"i\") \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2f7ja7o4.cs(67,57): error CS1026: ) expected

    /tmp/tmp2f7ja7o4.cs(67,57): error CS1525: Invalid expression term ''}''

    /tmp/tmp2f7ja7o4.cs(67,57): error CS1002: ; expected

    /tmp/tmp2f7ja7o4.cs(69,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp2f7ja7o4.cs(79,2): error CS1513: } expected

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        char[] chars = sentence.ToCharArray();\n        List<string>
    result = new List<string>();\n        bool isPrime = true;\n        bool isPrime2
    = true;\n        bool isPrime3 = true;\n        bool isPrime4 = true;\n        bool
    isPrime5 = true;\n        bool isPrime6 = true;\n        bool isPrime7 = true;\n
    \       bool isPrime8 = true;\n        bool isPrime9 = true;\n        bool isPrime10
    = true;\n        bool isPrime11 = true;\n        bool isPrime12 = true;\n        bool
    isPrime13 = true;\n        bool isPrime14 = true;\n        bool isPrime15 = true;\n
    \       bool isPrime16 = true;\n        bool isPrime17 = true;\n        bool isPrime18
    = true;\n        bool isPrime19 = true;\n        bool isPrime20 = true;\n        bool
    isPrime21 = true;\n        bool isPrime22 = true;\n        bool isPrime23 = true;\n
    \       bool isPrime24 = true;\n        bool isPrime25 = true;\n        bool isPrime26
    = true;\n        bool isPrime27 = true;\n        bool isPrime28 = true;\n        bool
    isPrime29 = true;\n        bool isPrime30 = true;\n        bool isPrime31 = true;\n
    \       bool isPrime32 = true;\n        bool isPrime33 = true;\n        bool isPrime34
    = true;\n        bool isPrime35 = true;\n        bool isPrime36 = true;\n        bool
    isPrime37 = true;\n        bool isPrime38 = true;\n        bool isPrime39 = true;\n
    \       bool isPrime40 = true;\n        bool isPrime41 = true;\n        bool isPrime42
    = true;\n        bool isPrime43 = true;\n        bool isPrime44 = true;\n        bool
    isPrime45 = true;\n        bool isPrime46 = true;\n        bool isPrime47 = true;\n
    \       bool isPrime48 = true;\n        bool isPrime49 = true;\n        bool isPrime50
    = true;\n        bool isPrime51 = true;\n        bool isPrime52 = true;\n        bool
    isPrime53 = true;\n        bool isPrime54 = true;\n        bool isPrime55 = true;\n
    \       bool isPrime56 = true;\n        bool isPrime57 = true;\n        bool isPrime58
    = true;\n        bool isPrime59 = true;\n        bool isPrime60 = true;\n        bool
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpet660ic5.cs(86,13): error CS1001: Identifier expected

    /tmp/tmpet660ic5.cs(86,13): error CS1002: ; expected

    '
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        foreach (char c in sentence) {\n            isPrime =
    true;\n            int length = c.ToString().Length;\n            for (int i =
    1; i < length; i++) {\n                if (c.ToString()[i] != c.ToString()[i -
    1]) {\n                    isPrime = false;\n                    break;\n                }\n
    \           }\n            if (isPrime) {\n                word += c;\n            }\n
    \       }\n        foreach (char c in word) {\n            int length = c.ToString().Length;\n
    \           for (int i = 1; i < length; i++) {\n                if (c.ToString()[i]
    != c.ToString()[i - 1]) {\n                    isPrime = false;\n                    break;\n
    \               }\n            }\n            if (isPrime) {\n                result
    += \" \" + c;\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <087c2777f3a9407bb51bc78c8781a738>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <087c2777f3a9407bb51bc78c8781a738>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    newWord = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)
    {\n            isPrime = true;\n            int n = Convert.ToInt32(c);\n            for
    (int i = 2; i <= Math.Sqrt(n); i++) {\n                if (n % i == 0) {\n                    isPrime
    = false;\n                    break;\n                }\n            }\n            if
    (isPrime) {\n                word += c;\n            }\n        }\n        foreach
    (char c in word) {\n            newWord += c;\n        }\n        result = newWord;\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0e99d373f8545fdb86c5221a3067699>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0e99d373f8545fdb86c5221a3067699>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        char[] charArray = sentence.ToCharArray();\n        List<string>
    result = new List<string>();\n        bool isPrime = true;\n        foreach (char
    c in charArray) {\n            int length = c.ToString().Length;\n            if
    (length == 1) continue;\n            int count = 0;\n            while (count
    < length) {\n                count += 1;\n                isPrime = true;\n                for
    (int i = 2; i <= Math.Sqrt(length); i++) {\n                    if (length % i
    == 0) {\n                        isPrime = false;\n                        break;\n
    \                   }\n                }\n                if (isPrime) {\n                    result.Add(c.ToString());\n
    \                   break;\n                }\n            }\n        }\n        return
    string.Join(\" \", result);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d44384d3b7cd41fb8036caaea3d8e610>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d44384d3b7cd41fb8036caaea3d8e610>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       List<int> primes = new List<int>();\n        foreach (char c in chars)
    {\n            int prime = GetPrime(c);\n            if (primes.Contains(prime))
    {\n                primes.Remove(prime);\n            }\n            else {\n
    \               primes.Add(prime);\n            }\n        }\n        foreach
    (int prime in primes) {\n            result += \" \" + chars[prime - 1];\n        }\n
    \       return result.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpknhthy83.cs(28,25): error CS0103: The name ''GetPrime'' does not exist
    in the current context

    '
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       List<int> primes = new List<int>();\n        foreach (char c in chars)
    {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n                for
    (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                    if (n % i == 0)
    {\n                        primes.Add(i);\n                        break;\n                    }\n
    \               }\n            }\n        }\n        foreach (int prime in primes)
    {\n            string s = \"\";\n            int count = 0;\n            for (int
    i = 0; i < chars.Length; i++) {\n                if (chars[i] == ' ') {\n                    count++;\n
    \               }\n            }\n            if (count == prime) {\n                for
    (int j = 0; j < chars.Length; j++) {\n                    if (chars[j] == ' ')
    {\n                        s += chars[j];\n                    }\n                }\n
    \               result += s;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <424aaf4740e045998b72f29fc05f3682>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <424aaf4740e045998b72f29fc05f3682>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            if
    (IsPrime(c.Length)) {\n                result += \" \" + c;\n            }\n        }\n
    \       return result.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr0hvw1pu.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    /tmp/tmpr0hvw1pu.cs(28,27): error CS1061: ''char'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        foreach (string word in sentence.Split('
    '))\n        {\n            int length = word.Length;\n            int prime =
    1;\n            while (prime * prime <= length)\n            {\n                if
    (length == prime * prime)\n                {\n                    result += word;\n
    \                   break;\n                }\n                else\n                {\n
    \                   prime++;\n                }\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa8193c21ba244a0ad21efda860ce13e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa8193c21ba244a0ad21efda860ce13e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    temp = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        temp = word;\n
    \       List<int> primes = new List<int>();\n        primes.Add(2);\n        primes.Add(3);\n
    \       primes.Add(5);\n        primes.Add(7);\n        primes.Add(11);\n        primes.Add(13);\n
    \       primes.Add(17);\n        primes.Add(19);\n        primes.Add(23);\n        primes.Add(29);\n
    \       primes.Add(31);\n        primes.Add(37);\n        primes.Add(41);\n        primes.Add(43);\n
    \       primes.Add(47);\n        primes.Add(53);\n        primes.Add(59);\n        primes.Add(61);\n
    \       primes.Add(67);\n        primes.Add(71);\n        primes.Add(73);\n        primes.Add(79);\n
    \       primes.Add(83);\n        primes.Add(89);\n        primes.Add(97);\n        primes.Add(103);\n
    \       primes.Add(109);\n        primes.Add(113);\n        primes.Add(127);\n
    \       primes.Add(131);\n        primes.Add(137);\n        primes.Add(139);\n
    \       primes.Add(143);\n        primes.Add(147);\n        primes.Add(151);\n
    \       primes.Add(157);\n        primes.Add(163);\n        primes.Add(167);\n
    \       primes.Add(173);\n        primes.Add(179);\n        primes.Add(181);\n
    \       primes.Add(191);\n        primes.Add(193);\n        primes.Add(197);\n
    \       primes.Add(199);\n        primes.Add(211);\n        primes.Add(223);\n
    \       primes.Add(227);\n        primes.Add(229);\n        primes.Add(233);\n
    \       primes.Add(239);\n        primes.Add(241);\n        primes.Add(251);\n
    \       primes.Add(257);\n        primes.Add(263);\n        primes.Add(269);\n
    \       primes.Add(271);\n        primes.Add(277);\n        primes.Add(281);\n
    \       primes.Add(283);\n        primes.Add(293);\n        primes.Add(307);\n
    \       primes.Add(311);\n        primes.Add(313;\n        primes.Add(317;\n        primes.Add(313;\n
    \       primes.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpobpda2sj.cs(97,23): error CS1026: ) expected

    /tmp/tmpobpda2sj.cs(98,23): error CS1026: ) expected

    /tmp/tmpobpda2sj.cs(99,23): error CS1026: ) expected

    /tmp/tmpobpda2sj.cs(100,16): error CS1001: Identifier expected

    /tmp/tmpobpda2sj.cs(100,16): error CS1002: ; expected

    '
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       HashSet<string> words = new HashSet<string>();\n        foreach (char
    c in chars) {\n            if (char.IsLetter(c)) {\n                string word
    = c.ToString();\n                if (!words.Contains(word)) {\n                    words.Add(word);\n
    \                   result += word;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9754c141212044c2bd6043c775057031>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9754c141212044c2bd6043c775057031>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n
    \       Array.Sort(charArray);\n        foreach (char c in charArray) {\n            if
    (IsPrimeNumber(c)) {\n                result += \" \" + c;\n            }\n        }\n
    \       return result.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl5k928qn.cs(28,17): error CS0103: The name ''IsPrimeNumber'' does not
    exist in the current context

    '
  timestamp: 1659793939
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        bool isPrime = true;\n        string
    newSentence = \"\";\n        char[] charArray = sentence.ToCharArray();\n        foreach
    (char c in charArray) {\n            int length = c.ToString().Length;\n            if
    (length == 1) {\n                newSentence += c;\n            }\n            else
    if (length == 2 && c != ' ') {\n                newSentence += c;\n            }\n
    \           else if (length == 3 && c != ' ') {\n                newSentence +=
    c;\n            }\n            else if (length == 4 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 5 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 6 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 7 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 8 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 9 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 10 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 11 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 12 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 13 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 14 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 15 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 16 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 17 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 18 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 19 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 20 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 21 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 22 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 23 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 24 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 25 && c != ' ') {\n                newSentence
    += c;\n            }\n            else if (length == 26 && c != \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl5g6tgox.cs(105,42): error CS1525: Invalid expression term ''}''

    /tmp/tmpl5g6tgox.cs(105,42): error CS1026: ) expected

    /tmp/tmpl5g6tgox.cs(105,42): error CS1002: ; expected

    /tmp/tmpl5g6tgox.cs(107,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpl5g6tgox.cs(117,2): error CS1513: } expected

    '
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        bool isPrime = true;\n        string
    word = \"\";\n        foreach (char c in sentence) {\n            isPrime = true;\n
    \           int n = Convert.ToInt32(c);\n            for (int i = 2; i <= Math.Sqrt(n);
    i++) {\n                if (n % i == 0) {\n                    isPrime = false;\n
    \                   break;\n                }\n            }\n            if (isPrime)
    {\n                word += c;\n            }\n        }\n        result = word;\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85342dff6ec2483d87d73a84c76eb9f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85342dff6ec2483d87d73a84c76eb9f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            } else {\n                isPrime =
    false;\n            }\n        }\n        char[] chars = word.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    count = 0;\n            int i = 1;\n            while (i <= chars.Length) {\n
    \               if (chars[i] == c) {\n                    count++;\n                    i++;\n
    \               } else {\n                    break;\n                }\n            }\n
    \           if (count == 2) {\n                result += c;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c464d01ed6c6419cb3ee9969c64ba2fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c464d01ed6c6419cb3ee9969c64ba2fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       HashSet<string> words = new HashSet<string>();\n        foreach (char
    c in chars) {\n            if (char.IsLetter(c)) {\n                string word
    = c.ToString();\n                words.Add(word);\n            }\n        }\n
    \       foreach (string word in words) {\n            int length = word.Length;\n
    \           if (length == 1) {\n                result += word;\n                continue;\n
    \           }\n            int prime = 1;\n            while (prime * prime <=
    length) {\n                if (length == prime) {\n                    result
    += word;\n                    break;\n                }\n                if (length
    % prime == 0) {\n                    result += word;\n                    break;\n
    \               }\n                prime++;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26fa8e3237d247888d36e8a495adbd36>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26fa8e3237d247888d36e8a495adbd36>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       HashSet<string> set = new HashSet<string>();\n        foreach (char c
    in chars) {\n            if (chars.Contains(c)) {\n                set.Add(c);\n
    \           }\n        }\n        foreach (string s in set) {\n            int
    count = 0;\n            foreach (char c in s) {\n                if (chars.Contains(c))
    {\n                    count++;\n                }\n            }\n            if
    (count == 2) {\n                result += s;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpba08jrrj.cs(29,25): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    count = 0;\n            int start = 0;\n            int end = chars.Length - 1;\n
    \           while (start <= end) {\n                while (chars[start] == c &&
    start < end)\n                    start++;\n                while (chars[end]
    == c && end > start)\n                    end--;\n                if (start <=
    end) {\n                    count++;\n                    start++;\n                    end--;\n
    \               }\n            }\n            if (count == 2)\n                result
    += c;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <008f1586c569420ba99ed401efaa4c96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <008f1586c569420ba99ed401efaa4c96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        char[] charArray = sentence.ToCharArray();\n        List<string>
    result = new List<string>();\n        foreach (char c in charArray) {\n            if
    (char.IsLetter(c)) {\n                string temp = c.ToString();\n                bool
    isPrime = true;\n                for (int i = 2; i <= Math.Sqrt(temp); i++) {\n
    \                   if (temp.Length % i == 0) {\n                        isPrime
    = false;\n                        break;\n                    }\n                }\n
    \               if (isPrime) {\n                    result.Add(temp);\n                }\n
    \           }\n        }\n        return string.Join(\" \", result);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0efrouyr.cs(30,48): error CS1503: Argument 1: cannot convert from ''string''
    to ''double''

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n
    \       Array.Sort(charArray);\n        foreach (char c in charArray) {\n            int
    length = c.ToString().Length;\n            if (length == 1) {\n                result
    += c;\n            }\n            else if (length == 2 && c == 'a') {\n                result
    += \"an\";\n            }\n            else if (length == 2 && c == 'e') {\n                result
    += \"a\";\n            }\n            else if (length == 2 && c == 'i') {\n                result
    += \"an\";\n            }\n            else if (length == 2 && c == 'o') {\n                result
    += \"a\";\n            }\n            else if (length == 2 && c == 'u') {\n                result
    += \"an\";\n            }\n            else if (length == 3 && c == 'a') {\n                result
    += \"an\";\n            }\n            else if (length == 3 && c == 'e') {\n                result
    += \"a\";\n            }\n            else if (length == 3 && c == 'i') {\n                result
    += \"an\";\n            }\n            else if (length == 3 && c == 'o') {\n                result
    += \"a\";\n            }\n            else if (length == 3 && c == 'u') {\n                result
    += \"an\";\n            }\n            else if (length == 4 && c == 'a') {\n                result
    += \"an\";\n            }\n            else if (length == 4 && c == 'e') {\n                result
    += \"a\";\n            }\n            else if (length == 4 && c == 'i') {\n                result
    += \"an\";\n            }\n            else if (length == 4 && c == 'o') {\n                result
    += \"a\";\n            }\n            else if (length == 4 && c == 'u') {\n                result
    += \"an\";\n            }\n            else if (length == 5 && c == 'a') {\n                result
    += \"an\";\n            }\n            else if (length == 5 && c == 'e') {\n                result
    += \"a\";\n            }\n            else if (length == 5 && c == 'i') {\n                result
    += \"an\";\n            }\n            else if (length == 5 && c == 'o') {\n                result
    += \"a\";\n            }\n            else if (length == 5 && c == 'u') {\n                result
    += \"an\";\n            }\n            else if (length == 6 && c == 'a') {\n                result
    += \"an\";\n            }\n            else if (length == 6 && c == 'e') {\n                result
    += \"a\";\n            }\n            else if (length == 6 && c == 'i') {\n                result
    += \"an\";\n            }\n            else if (length == 6 && c == 'o') {\n                result
    += \"a\";\n            }\n            else if (length == 6 && c == 'u') {\n                result
    += \"an\";\n            }\n            else if (length == 7 && c == 'a') {\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3qu_2tt0.cs(109,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp3qu_2tt0.cs(119,2): error CS1513: } expected

    '
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       List<int> primes = new List<int>();\n        foreach (char c in chars)
    {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n                for
    (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                    if (n % i == 0)
    {\n                        primes.Add(i);\n                        break;\n                    }\n
    \               }\n            }\n        }\n        foreach (int p in primes)
    {\n            string temp = sentence.Substring(0, p);\n            result +=
    temp + \" \";\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7499050cdea34feb97086bcfc4b9984d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7499050cdea34feb97086bcfc4b9984d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        foreach (string word in sentence.Split('
    '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n
    \           {\n                result += word;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1awgrmpt.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        bool isPrime = true;\n        string
    temp = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))
    {\n                temp = temp + c;\n            }\n        }\n        char[]
    charArray = temp.ToCharArray();\n        Array.Sort(charArray);\n        foreach
    (char c in charArray) {\n            if (char.IsLetter(c)) {\n                isPrime
    = true;\n                for (int i = 2; i <= Math.Sqrt(char.IsLetter(c)) && isPrime;
    i++) {\n                    if (char.IsLetter(c)) {\n                        isPrime
    = false;\n                    }\n                }\n                if (isPrime)
    {\n                    result = result + c;\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx5ca2lwu.cs(37,48): error CS1503: Argument 1: cannot convert from ''bool''
    to ''double''

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        bool isPrime = true;\n        string
    temp = \"\";\n        foreach (char c in sentence) {\n            int n = Convert.ToInt32(c);\n
    \           if (n % 2 == 0) {\n                isPrime = false;\n            }\n
    \       }\n        if (isPrime) {\n            int n = Convert.ToInt32(sentence);\n
    \           int count = 0;\n            while (n > 2) {\n                if (n
    % 2 == 0) {\n                    count++;\n                }\n                n
    = n / 2;\n            }\n            for (int i = 3; i <= Math.Sqrt(n); i += 2)
    {\n                if (n % i == 0) {\n                    count++;\n                }\n
    \           }\n            int count = 0;\n            while (n > 2) {\n                if
    (n % 2 == 0) {\n                    count++;\n                }\n                n
    = n / 2;\n            }\n            for (int i = 3; i <= Math.Sqrt(n); i += 2)
    {\n                if (n % i == 0) {\n                    count++;\n                }\n
    \           }\n            int count = 0;\n            while (n > 2) {\n                if
    (n % 2 == 0) {\n                    count++;\n                }\n                n
    = n / 2;\n            }\n            for (int i = 3; i <= Math.Sqrt(n); i += 2)
    {\n                if (n % i == 0) {\n                    count++;\n                }\n
    \           }\n            int count = 0;\n            while (n > 2) {\n                if
    (n % 2 == 0) {\n                    count++;\n                }\n                n
    = n / 2;\n            }\n            for (int i = 3; i <= Math.Sqrt(n); i += 2)
    {\n                if (n % i == 0) {\n                    count++;\n                }\n
    \           }\n            int count = 0;\n            while (n > 2) {\n                if
    (n % 2 == 0) {\n                    count++;\n                }\n                n
    = n / 2;\n            }\n            for (int i = 3; i <= Math.Sqrt(n); i += 2)
    {\n                if (n % i == 0) {\n                    count++;\n                }\n
    \           }\n            int count = 0;\n            while (n > 2) {\n                if
    (n % 2 == 0) {\n                    count++;\n                }\n                n
    = n / 2;\n            }\n            for (int i = 3; i <= Math.Sqrt(n); i += 2)
    {\n                if (n % i == 0) {\n                    count++;\n                }\n
    \           }\n            int count = 0;\n            while (n > 2) {\n                if
    (n % 2 == 0) {\n                    count++;\n                }\n                n
    = n / 2;\n            }\n            for (int i = 3; i <= Math.Sqrt(n); i += 2)
    {\n                if (n % i == 0) {\n                    count++;\n                }\n
    \           }\n            int count = 0;\n            while (n > 2) {\n                if
    (n % 2 == 0) {\n                    count++;\n                }\n                n
    = n / 2;\n            }\n            for (int i = 3; i <= Math.Sqrt(n); i += 2)
    {\n                if (n % i == 0) {\n                    count++;\n                }\n
    \           }\n            int count = 0;\n            while (n > 2) {\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeowcdctd.cs(134,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpeowcdctd.cs(144,2): error CS1513: } expected

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        List<string> list = new List<string>();\n
    \       foreach (string word in sentence.Split(' '))\n        {\n            list.Add(word);\n
    \       }\n        list.Sort();\n        foreach (string word in list)\n        {\n
    \           int count = 0;\n            int length = word.Length;\n            while
    (count < length)\n            {\n                if (IsPrime(count))\n                {\n
    \                   result += word[count];\n                    count++;\n                }\n
    \               else\n                {\n                    break;\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgr6wsnso.cs(37,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        foreach
    (char c in sentence) {\n            if (char.IsLetter(c)) {\n                word
    += c;\n            }\n        }\n        char[] chars = word.ToCharArray();\n
    \       int[] primes = new int[chars.Length];\n        for (int i = 0; i < chars.Length;
    i++) {\n            primes[i] = IsPrime(chars[i]);\n        }\n        Array.Sort(primes);\n
    \       for (int i = 0; i < primes.Length; i++) {\n            if (primes[i] ==
    1) {\n                result += chars[i];\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkbc9ksjj.cs(34,25): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        foreach
    (char c in sentence) {\n            if (char.IsLetter(c)) {\n                word
    += c;\n            } else {\n                if (word.Length > 0) {\n                    result
    += \" \" + word;\n                    word = \"\";\n                }\n            }\n
    \       }\n        if (word.Length > 0) {\n            result += \" \" + word;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c3f24c2f28548faa57b9a84d3554c48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c3f24c2f28548faa57b9a84d3554c48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       HashSet<string> set = new HashSet<string>();\n        foreach (char c
    in chars) {\n            string s = c.ToString();\n            if (set.Contains(s))
    {\n                continue;\n            }\n            set.Add(s);\n            int
    count = 0;\n            while (true) {\n                count++;\n                if
    (count == 100) {\n                    break;\n                }\n                if
    (IsPrime(count)) {\n                    result += s + \" \";\n                    break;\n
    \               }\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7_w918ko.cs(39,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        bool isPrime = true;\n        string
    word = \"\";\n        foreach (char c in sentence) {\n            isPrime = true;\n
    \           int n = Convert.ToInt32(c);\n            for (int i = 2; i <= Math.Sqrt(n);
    i++) {\n                if (n % i == 0) {\n                    isPrime = false;\n
    \                   break;\n                }\n            }\n            if (isPrime)
    {\n                result += word;\n                word = \"\";\n            }\n
    \           else {\n                word += c;\n            }\n        }\n        result
    += word;\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5a5d4018e864fbe9e45b1927b75955c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5a5d4018e864fbe9e45b1927b75955c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string words = sentence.Split('
    ');\n        foreach (string word in words) {\n            int length = word.Length;\n
    \           if (length == 1) {\n                result += word;\n            }\n
    \           else if (length == 2 && IsPrime(length)) {\n                result
    += word;\n            }\n            else if (length == 3 && IsPrime(length))
    {\n                result += word;\n            }\n            else if (length
    == 4 && IsPrime(length)) {\n                result += word;\n            }\n            else
    if (length == 5 && IsPrime(length)) {\n                result += word;\n            }\n
    \           else if (length == 6 && IsPrime(length)) {\n                result
    += word;\n            }\n            else if (length == 7 && IsPrime(length))
    {\n                result += word;\n            }\n            else if (length
    == 8 && IsPrime(length)) {\n                result += word;\n            }\n            else
    if (length == 9 && IsPrime(length)) {\n                result += word;\n            }\n
    \           else if (length == 10 && IsPrime(length)) {\n                result
    += word;\n            }\n            else if (length == 11 && IsPrime(length))
    {\n                result += word;\n            }\n            else if (length
    == 12 && IsPrime(length)) {\n                result += word;\n            }\n
    \           else if (length == 13 && IsPrime(length)) {\n                result
    += word;\n            }\n            else if (length == 14 && IsPrime(length))
    {\n                result += word;\n            }\n            else if (length
    == 15 && IsPrime(length)) {\n                result += word;\n            }\n
    \           else if (length == 16 && IsPrime(length)) {\n                result
    += word;\n            }\n            else if (length == 17 && IsPrime(length))
    {\n                result += word;\n            }\n            else if (length
    == 18 && IsPrime(length)) {\n                result += word;\n            }\n
    \           else if (length == 19 && IsPrime(length)) {\n                result
    += word;\n            }\n            else if (length == 20 && IsPrime(length))
    {\n                result += word;\n            }\n            else if (length
    == 21 && IsPrime(length)) {\n                result += word;\n            }\n
    \           else if (length == 22 && IsPrime(length)) {\n                result
    += word;\n            }\n            else if (length == 23 && IsPrime(length))
    {\n                result += word;\n            }\n            else if (length
    == 24 && IsPrime(length)) {\n                result += word;\n            }\n
    \           else if (length == 25 && IsPrime(length)) {\n                result
    += word;\n            }\n            else if (length == \n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpogwh_2ki.cs(103,31): error CS1525: Invalid expression term ''}''

    /tmp/tmpogwh_2ki.cs(103,31): error CS1026: ) expected

    /tmp/tmpogwh_2ki.cs(103,31): error CS1002: ; expected

    /tmp/tmpogwh_2ki.cs(105,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpogwh_2ki.cs(115,2): error CS1513: } expected

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            if
    (IsPrimeNumber(c)) {\n                result += \" \" + c;\n            }\n        }\n
    \       return result.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpywagbqr1.cs(28,17): error CS0103: The name ''IsPrimeNumber'' does not
    exist in the current context

    '
  timestamp: 1659823425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       int[] primes = new int[100];\n        Array.Sort(primes);\n        foreach
    (int prime in primes) {\n            int count = 0;\n            foreach (char
    c in chars) {\n                if (IsPrime(prime, c)) {\n                    count++;\n
    \               }\n            }\n            if (count == chars.Length) {\n                result
    += new string(chars, 0, prime);\n                break;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9yu41vsk.cs(31,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            } else {\n                isPrime =
    false;\n            }\n        }\n        char[] charArray = word.ToCharArray();\n
    \       int[] primes = new int[charArray.Length];\n        for (int i = 0; i <
    charArray.Length; i++) {\n            primes[i] = 1;\n        }\n        for (int
    i = 2; i < charArray.Length; i++) {\n            for (int j = 0; j < charArray.Length;
    j++) {\n                if (charArray[i] == charArray[j]) {\n                    primes[j]++;\n
    \               }\n            }\n        }\n        for (int i = 0; i < charArray.Length;
    i++) {\n            if (primes[i] == charArray.Length) {\n                result
    += charArray[i];\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ef25ddff1744d5092d812fe79f433f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ef25ddff1744d5092d812fe79f433f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        foreach (string word in sentence.Split('
    '))\n        {\n            int length = word.Length;\n            bool isPrime
    = true;\n            for (int i = 2; i <= Math.Sqrt(length); i++)\n            {\n
    \               if (length % i == 0)\n                {\n                    isPrime
    = false;\n                    break;\n                }\n            }\n            if
    (isPrime)\n            {\n                result += word;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8727d9d54216467bb6afcfc3844dcb28>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8727d9d54216467bb6afcfc3844dcb28>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794079
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        char[] charArray = sentence.ToCharArray();\n        List<int>
    primes = new List<int>();\n        List<int> primesTemp = new List<int>();\n        List<int>
    primesTemp2 = new List<int>();\n        List<int> primesTemp3 = new List<int>();\n
    \       List<int> primesTemp4 = new List<int>();\n        List<int> primesTemp5
    = new List<int>();\n        List<int> primesTemp6 = new List<int>();\n        List<int>
    primesTemp7 = new List<int>();\n        List<int> primesTemp8 = new List<int>();\n
    \       List<int> primesTemp9 = new List<int>();\n        List<int> primesTemp10
    = new List<int>();\n        List<int> primesTemp11 = new List<int>();\n        List<int>
    primesTemp12 = new List<int>();\n        List<int> primesTemp13 = new List<int>();\n
    \       List<int> primesTemp14 = new List<int>();\n        List<int> primesTemp15
    = new List<int>();\n        List<int> primesTemp16 = new List<int>();\n        List<int>
    primesTemp17 = new List<int>();\n        List<int> primesTemp18 = new List<int>();\n
    \       List<int> primesTemp19 = new List<int>();\n        List<int> primesTemp20
    = new List<int>();\n        List<int> primesTemp21 = new List<int>();\n        List<int>
    primesTemp22 = new List<int>();\n        List<int> primesTemp23 = new List<int>();\n
    \       List<int> primesTemp24 = new List<int>();\n        List<int> primesTemp25
    = new List<int>();\n        List<int> primesTemp26 = new List<int>();\n        List<int>
    primesTemp27 = new List<int>();\n        List<int> primesTemp28 = new List<int>();\n
    \       List<int> primesTemp29 = new List<int>();\n        List<int> primesTemp30
    = new List<int>();\n        List<int> primesTemp31 = new List<int>();\n        List<int>
    primesTemp32 = new List<int>();\n        List<int> primesTemp33 = new List<int>();\n
    \       List<int> primesTemp34 = new List<int>();\n        List<int> primesTemp35
    = new List<int>();\n        List<int> primesTemp36 = new List<int>();\n        List<int>
    primesTemp37 = new List<int>();\n        List<int> primesTemp38\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8mbwp5f6.cs(63,31): error CS1002: ; expected

    '
  timestamp: 1659823425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       List<int> primes = new List<int>();\n        foreach (char c in chars)
    {\n            int n = Convert.ToInt32(c);\n            int count = 0;\n            while
    (n != 1) {\n                n = n / 2;\n                count++;\n            }\n
    \           if (count > 2) {\n                primes.Add(n);\n            }\n
    \       }\n        foreach (int p in primes) {\n            string s = \"\";\n
    \           int count = 0;\n            while (p != 1) {\n                p =
    p / 2;\n                count++;\n            }\n            for (int i = 0; i
    < count; i++) {\n                s += chars[i];\n            }\n            result
    += s;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprh76r8fi.cs(42,17): error CS1656: Cannot assign to ''p'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659823425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n                result
    += \" \" + c;\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp41n77v7e.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    temp = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)
    {\n            isPrime = true;\n            for (int i = 2; i <= Math.Sqrt(Convert.ToDouble(c));
    i++) {\n                if (c % i == 0) {\n                    isPrime = false;\n
    \                   break;\n                }\n            }\n            if (isPrime)
    {\n                result += \" \" + word;\n                word = \"\";\n            }\n
    \           else {\n                word += c;\n            }\n        }\n        result
    += \" \" + word;\n        return result.Replace(\" \", \"\");\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidCastException: Invalid cast from
    'Char' to 'Double'.\n  at System.Char.System.IConvertible.ToDouble (System.IFormatProvider
    provider) [0x00014] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToDouble
    (System.Char value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.WordsInSentence
    (System.String sentence) [0x0004c] in <51919f2ef0d544e491fde48ec9ba0ffc>:0 \n
    \ at Problem.Main (System.String[] args) [0x00001] in <51919f2ef0d544e491fde48ec9ba0ffc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidCastException: Invalid cast
    from 'Char' to 'Double'.\n  at System.Char.System.IConvertible.ToDouble (System.IFormatProvider
    provider) [0x00014] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToDouble
    (System.Char value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.WordsInSentence
    (System.String sentence) [0x0004c] in <51919f2ef0d544e491fde48ec9ba0ffc>:0 \n
    \ at Problem.Main (System.String[] args) [0x00001] in <51919f2ef0d544e491fde48ec9ba0ffc>:0
    \n"
  stdout: ''
  timestamp: 1659823425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n
    \       List<int> primes = new List<int>();\n        foreach (char c in charArray)
    {\n            int n = Convert.ToInt32(c);\n            bool isPrime = true;\n
    \           for (int i = 2; i <= Math.Sqrt(n); i++) {\n                if (n %
    i == 0) {\n                    isPrime = false;\n                    break;\n
    \               }\n            }\n            if (isPrime) {\n                primes.Add(n);\n
    \           }\n        }\n        foreach (int prime in primes) {\n            result
    += string.Join(\" \", charArray.Where(c => c == (char)prime).ToArray());\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d08f4ee92f004967a46c8a0c27fa8b3c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d08f4ee92f004967a46c8a0c27fa8b3c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    length = c.ToString().Length;\n            if (length == 1) continue;\n            int
    prime = 1;\n            while (prime * prime <= length) {\n                if
    (length % prime == 0) {\n                    prime++;\n                    break;\n
    \               }\n                prime++;\n            }\n            if (prime
    == length) result += c.ToString();\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b9781fa93b9c48ae9efaa4f2b8b79183>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b9781fa93b9c48ae9efaa4f2b8b79183>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        string word = \"\";\n        bool isPrime
    = true;\n        for (int i = 0; i < chars.Length; i++) {\n            word +=
    chars[i];\n            int length = word.Length;\n            if (isPrime) {\n
    \               isPrime = IsPrime(length);\n            }\n            if (isPrime)
    {\n                result += word;\n                word = \"\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpymc9ukt4.cs(33,27): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        int length = sentence.Length;\n        for (int i = 0;
    i < length; i++) {\n            word = sentence.Substring(i, 1);\n            isPrime
    = true;\n            for (int j = 2; j < length; j++) {\n                if (j
    % i == 0) {\n                    isPrime = false;\n                    break;\n
    \               }\n            }\n            if (isPrime) {\n                result
    += word;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide
    by zero.\n  at Problem.WordsInSentence (System.String sentence) [0x0002e] in <ffb2083080e54abda402ddad353dea05>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <ffb2083080e54abda402ddad353dea05>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.DivideByZeroException: Attempted to
    divide by zero.\n  at Problem.WordsInSentence (System.String sentence) [0x0002e]
    in <ffb2083080e54abda402ddad353dea05>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <ffb2083080e54abda402ddad353dea05>:0 \n"
  stdout: ''
  timestamp: 1659823425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        foreach (char c in sentence) {\n            int n = Convert.ToInt32(c);\n
    \           if (n % 2 == 0) {\n                isPrime = false;\n            }\n
    \       }\n        if (isPrime) {\n            foreach (char c in sentence) {\n
    \               int n = Convert.ToInt32(c);\n                if (n % 2 == 0) {\n
    \                   for (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                        if
    (n % i == 0) {\n                            isPrime = false;\n                            break;\n
    \                       }\n                    }\n                }\n            }\n
    \       }\n        foreach (char c in sentence) {\n            int n = Convert.ToInt32(c);\n
    \           if (n % 2 == 0) {\n                for (int i = 3; i <= Math.Sqrt(n);
    i += 2) {\n                    if (n % i == 0) {\n                        isPrime
    = false;\n                        break;\n                    }\n                }\n
    \           }\n        }\n        foreach (char c in sentence) {\n            int
    n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n                for (int
    i = 3; i <= Math.Sqrt(n); i += 2) {\n                    if (n % i == 0) {\n                        isPrime
    = false;\n                        break;\n                    }\n                }\n
    \           }\n        }\n        foreach (char c in sentence) {\n            int
    n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n                for (int
    i = 3; i <= Math.Sqrt(n); i += 2) {\n                    if (n % i == 0) {\n                        isPrime
    = false;\n                        break;\n                    }\n                }\n
    \           }\n        }\n        foreach (char c in sentence) {\n            int
    n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n                for (int
    i = 3; i <= Math.Sqrt(n); i += 2) {\n                    if (n % i == 0) {\n                        isPrime
    = false;\n                        break;\n                    }\n                }\n
    \           }\n        }\n        foreach (char c in sentence) {\n            int
    n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n                for (int
    i = 3; i <= Math.Sqrt(n); i += 2) {\n                    if (n % i == 0) {\n                        isPrime
    = false;\n                        break;\n                    }\n                }\n
    \           }\n        }\n        foreach (char c in sentence) {\n            int
    n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n                for (int
    i = 3; i <= Math.Sqrt(n); i += 2) {\n                    if (n % i == 0) {\n                        isPrime
    = false;\n                        break;\n                    }\n                }\n
    \           }\n        }\n        foreach (char c in sentence) {\n            int
    n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n                for (int
    i = 3; i <= Math.Sqrt(n); i += 2) {\n                    if (n % i == 0) {\n                        isPrime
    = false;\n                        break;\n                    }\n                }\n
    \           }\n        }\n        foreach (\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf2hsq_vn.cs(123,18): error CS1525: Invalid expression term ''}''

    /tmp/tmpf2hsq_vn.cs(123,18): error CS1515: ''in'' expected

    /tmp/tmpf2hsq_vn.cs(123,18): error CS0230: Type and identifier are both required
    in a foreach statement

    /tmp/tmpf2hsq_vn.cs(123,18): error CS1026: ) expected

    /tmp/tmpf2hsq_vn.cs(123,18): error CS1002: ; expected

    '
  timestamp: 1659823425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n                for (int
    i = 3; i <= Math.Sqrt(n); i += 2) {\n                    if (n % i == 0) {\n                        result
    += \" \" + c;\n                        break;\n                    }\n                }\n
    \           }\n        }\n        return result.Trim();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <729a066e9d924f44a9e1915d3c341ada>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <729a066e9d924f44a9e1915d3c341ada>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        bool isPrime = true;\n        string
    word = \"\";\n        foreach (char c in sentence) {\n            isPrime = true;\n
    \           int n = Convert.ToInt32(c);\n            int i = 2;\n            while
    (i <= n / 2) {\n                if (n % i == 0) {\n                    isPrime
    = false;\n                    break;\n                }\n                i++;\n
    \           }\n            if (isPrime) {\n                word += c;\n            }\n
    \       }\n        result = word;\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbeadc6aad4cca807d47f10ae75757>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbeadc6aad4cca807d47f10ae75757>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       int[] primes = new int[100];\n        Array.Sort(primes);\n        foreach
    (int prime in primes) {\n            int count = 0;\n            foreach (char
    c in chars) {\n                if (IsPrime(prime, c)) {\n                    count++;\n
    \               }\n            }\n            if (count == chars.Length) {\n                result
    += new string(chars, 0, chars.Length);\n                break;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsmdihy80.cs(31,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        foreach (string word in sentence.Split('
    '))\n        {\n            int length = word.Length;\n            if (length
    == 1)\n            {\n                result += word;\n            }\n            else
    if (length == 2 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 3 && IsPrime(length))\n            {\n
    \               result += word;\n            }\n            else if (length ==
    4 && IsPrime(length))\n            {\n                result += word;\n            }\n
    \           else if (length == 5 && IsPrime(length))\n            {\n                result
    += word;\n            }\n            else if (length == 6 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 7 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 8 && IsPrime(length))\n            {\n
    \               result += word;\n            }\n            else if (length ==
    9 && IsPrime(length))\n            {\n                result += word;\n            }\n
    \           else if (length == 10 && IsPrime(length))\n            {\n                result
    += word;\n            }\n            else if (length == 11 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 12 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 13 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 14 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 15 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 16 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 17 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 18 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 19 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 20 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 21 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (length == 22 && IsPrime(length))\n            {\n                result +=
    word;\n            }\n            else if (length == 23 && IsPrime(length))\n
    \           {\n                result += word;\n            }\n            else
    if (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyej74c2.cs(120,22): error CS1525: Invalid expression term ''}''

    /tmp/tmpcyej74c2.cs(120,22): error CS1026: ) expected

    /tmp/tmpcyej74c2.cs(120,22): error CS1002: ; expected

    /tmp/tmpcyej74c2.cs(122,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpcyej74c2.cs(132,2): error CS1513: } expected

    '
  timestamp: 1659823421
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string words = sentence.Split('
    ');\n        List<int> primes = new List<int>();\n        foreach (string word
    in words) {\n            int length = word.Length;\n            bool isPrime =
    true;\n            for (int i = 2; i <= Math.Sqrt(length); i++) {\n                if
    (length % i == 0) {\n                    isPrime = false;\n                    break;\n
    \               }\n            }\n            if (isPrime) {\n                primes.Add(length);\n
    \           }\n        }\n        primes.Sort();\n        foreach (int prime in
    primes) {\n            result += \" \" + words[prime];\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppcjawvtz.cs(25,24): error CS0029: Cannot implicitly convert type ''string[]''
    to ''string''

    /tmp/tmppcjawvtz.cs(27,9): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1659823425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        for (int i = 0; i < sentence.Length; i++) {\n            word
    = sentence[i];\n            if (isPrime) {\n                isPrime = IsPrime(word.Length);\n
    \           }\n            if (isPrime) {\n                result += word;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsyucthqp.cs(28,20): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpsyucthqp.cs(30,27): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        foreach (char c in sentence) {\n            isPrime =
    true;\n            for (int i = 2; i <= Math.Sqrt(c); i++) {\n                if
    (c % i == 0) {\n                    isPrime = false;\n                    break;\n
    \               }\n            }\n            if (isPrime) {\n                word
    += c;\n            }\n        }\n        foreach (char c in word) {\n            result
    += c;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60e5c09c808c4f2186611bb0902ae3df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60e5c09c808c4f2186611bb0902ae3df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    word2 = \"\";\n        string word3 = \"\";\n        string word4 = \"\";\n        string
    word5 = \"\";\n        string word6 = \"\";\n        string word7 = \"\";\n        string
    word8 = \"\";\n        string word9 = \"\";\n        string word10 = \"\";\n        string
    word11 = \"\";\n        string word12 = \"\";\n        string word13 = \"\";\n
    \       string word14 = \"\";\n        string word15 = \"\";\n        string word16
    = \"\";\n        string word17 = \"\";\n        string word18 = \"\";\n        string
    word19 = \"\";\n        string word20 = \"\";\n        string word21 = \"\";\n
    \       string word22 = \"\";\n        string word23 = \"\";\n        string word24
    = \"\";\n        string word25 = \"\";\n        string word26 = \"\";\n        string
    word27 = \"\";\n        string word28 = \"\";\n        string word29 = \"\";\n
    \       string word30 = \"\";\n        string word31 = \"\";\n        string word32
    = \"\";\n        string word33 = \"\";\n        string word34 = \"\";\n        string
    word35 = \"\";\n        string word36 = \"\";\n        string word37 = \"\";\n
    \       string word38 = \"\";\n        string word39 = \"\";\n        string word40
    = \"\";\n        string word41 = \"\";\n        string word42 = \"\";\n        string
    word43 = \"\";\n        string word44 = \"\";\n        string word45 = \"\";\n
    \       string word46 = \"\";\n        string word47 = \"\";\n        string word48
    = \"\";\n        string word49 = \"\";\n        string word50 = \"\";\n        string
    word51 = \"\";\n        string word52 = \"\";\n        string word53 = \"\";\n
    \       string word54 = \"\";\n        string word55 = \"\";\n        string word56
    = \"\";\n        string word57 = \"\";\n        string word58 = \"\";\n        string
    word59 = \"\";\n        string word60 = \"\";\n        string word61 = \"\";\n
    \       string word62 = \"\";\n        string word63 = \"\";\n        string word64
    = \"\";\n        string word65 = \"\";\n        string word66 = \"\";\n        string
    word67 = \"\";\n        string word68 = \"\";\n        string word69 = \"\";\n
    \       string word70 = \"\";\n        string word71 = \"\";\n        string word72
    = \"\";\n        string word73 = \"\";\n        string word74 = \"\";\n        string
    word75 = \"\";\n        string word76 = \"\";\n        string word77 = \"\";\n
    \       string word78 = \"\";\n        string word79 = \"\";\n        string word80
    = \"\";\n        string word81 = \"\";\n        string word82 = \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp99iv9gic.cs(106,24): error CS1525: Invalid expression term ''}''

    /tmp/tmp99iv9gic.cs(106,24): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        bool isPrime = true;\n        string
    word = \"\";\n        foreach (char c in sentence) {\n            isPrime = true;\n
    \           int length = c.ToString().Length;\n            for (int i = 1; i <
    length; i++) {\n                if (Convert.ToInt32(c.ToString()) % i == 0) {\n
    \                   isPrime = false;\n                    break;\n                }\n
    \           }\n            if (isPrime) {\n                word += c;\n            }\n
    \       }\n        result = word;\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1975a52dda94466eaf405cd5c7b170db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1975a52dda94466eaf405cd5c7b170db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            } else {\n                if (isPrime)
    {\n                    result += word;\n                    word = \"\";\n                    isPrime
    = false;\n                }\n            }\n        }\n        if (isPrime) {\n
    \           result += word;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6a54d55a4150478380b4c751e6446637>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6a54d55a4150478380b4c751e6446637>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n
    \       HashSet<string> set = new HashSet<string>();\n        foreach (char c
    in charArray) {\n            if (char.IsLetter(c)) {\n                string temp
    = c.ToString();\n                if (set.Contains(temp)) {\n                    set.Add(temp);\n
    \               } else {\n                    set.Add(temp);\n                    result
    += temp + \" \";\n                }\n            }\n        }\n        return
    result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57ad890bbe2b43d69caeafeef28cb964>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57ad890bbe2b43d69caeafeef28cb964>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       HashSet<string> primes = new HashSet<string>();\n        foreach (char
    c in chars) {\n            int n = Convert.ToInt32(c);\n            if (n % 2
    == 0) {\n                primes.Add(n.ToString());\n            }\n        }\n
    \       foreach (string prime in primes) {\n            int n = Convert.ToInt32(prime);\n
    \           int count = 0;\n            for (int i = 0; i < chars.Length; i++)
    {\n                if (chars[i] == ' ') {\n                    count++;\n                }\n
    \           }\n            if (count == n) {\n                result += prime
    + \" \";\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8dc61a29206a4d5eb5d1dbcf3be0b967>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8dc61a29206a4d5eb5d1dbcf3be0b967>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        bool isPrime = true;\n        string
    temp = \"\";\n        foreach (char c in sentence) {\n            int n = Convert.ToInt32(c);\n
    \           if (n % 2 == 0) {\n                isPrime = false;\n            }\n
    \       }\n        if (isPrime) {\n            int n = Convert.ToInt32(sentence);\n
    \           int count = 0;\n            while (n > 1) {\n                if (n
    % 2 == 0) {\n                    count++;\n                }\n                n
    = n / 2;\n            }\n            for (int i = 0; i < count; i++) {\n                temp
    = temp + \" \" + sentence.Substring(i * 2, 2);\n            }\n            result
    = temp;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc405f1e2e6c47e3a342e16e424bbd1b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc405f1e2e6c47e3a342e16e424bbd1b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n
    \       List<int> primes = new List<int>();\n        foreach (char c in charArray)
    {\n            int prime = PrimeNumber(c);\n            if (prime > 1) {\n                primes.Add(prime);\n
    \           }\n        }\n        foreach (int prime in primes) {\n            string
    temp = \"\";\n            for (int i = 0; i < charArray.Length; i++) {\n                if
    (charArray[i] == ' ') {\n                    temp += charArray[i];\n                }\n
    \           }\n            if (temp.Length == prime) {\n                result
    += temp;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphzp9q8h0.cs(28,25): error CS0103: The name ''PrimeNumber'' does not exist
    in the current context

    '
  timestamp: 1659823425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        foreach (string word in sentence.Split('
    '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n
    \           {\n                result += \" \" + word;\n            }\n        }\n
    \       return result.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptlasi77o.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        List<string> words = new List<string>();\n
    \       foreach (string word in sentence.Split(' '))\n        {\n            words.Add(word);\n
    \       }\n        foreach (string word in words)\n        {\n            int
    length = word.Length;\n            if (length == 1)\n            {\n                result
    += word;\n            }\n            else\n            {\n                for
    (int i = 2; i <= Math.Sqrt(length); i++)\n                {\n                    if
    (length % i == 0)\n                    {\n                        result += word;\n
    \                       break;\n                    }\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ac8fdf31bac84b89ba81b293f875f3a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ac8fdf31bac84b89ba81b293f875f3a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823426
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    temp = \"\";\n        char[] chars = sentence.ToCharArray();\n        foreach
    (char c in chars) {\n            word += c;\n            if (word.Length > 1)
    {\n                temp = word;\n                word = \"\";\n                for
    (int i = 0; i < temp.Length; i++) {\n                    int count = 0;\n                    for
    (int j = 0; j < temp.Length; j++) {\n                        if (temp[i] == temp[j])
    {\n                            count++;\n                        }\n                    }\n
    \                   if (count == 2) {\n                        result += temp[i];\n
    \                   }\n                }\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <672372b443604903b1e30dc7240c6e6b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <672372b443604903b1e30dc7240c6e6b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       int[] primes = new int[100];\n        primes[0] = 2;\n        primes[1]
    = 3;\n        primes[2] = 5;\n        primes[3] = 7;\n        primes[4] = 11;\n
    \       primes[5] = 13;\n        primes[6] = 17;\n        primes[7] = 19;\n        primes[8]
    = 23;\n        primes[9] = 29;\n        primes[10] = 41;\n        primes[11] =
    53;\n        primes[12] = 59;\n        primes[13] = 67;\n        primes[14] =
    71;\n        primes[15] = 79;\n        primes[16] = 87;\n        primes[17] =
    97;\n        primes[18] = 103;\n        primes[19] = 109; \n        primes[20]
    = 113;\n        primes[21] == 121;\n        primes[22] = 127;\n        primes[23]
    = 131;\n        primes[24] = 137;\n        primes[25] = 139;\n        primes[26]
    = 143;\n        primes[27] = 147;\n        primes[28] = 151;\n        primes[29]
    = 153;\n        primes[30] = 15;\n        primes[31] = 17;\n        primes[32]
    = 19;\n        primes[33] = 23;\n        primes[34] = 29;\n        primes[35]
    = 31;\n        primes[36] = 37;\n        primes[37] = 41;\n        primes[38]
    = 43;\n        primes[39] = 59;\n        primes[40] = 77;\n        primes[41]
    = 91;\n        primes[42] = 99;\n        primes[43] = 103;\n        primes[44]
    = 109; \n        primes[45] = 113;\n        primes[46] = 121;\n        primes[47]
    = 127;\n        primes[48] = 131;\n        primes[49] = 137;\n        primes[50]
    = 139;\n        primes[51] = 14;\n        primes[52] = 15;\n        primes[53]
    = 17;\n        primes[54] = 19;\n        primes[55] = 23;\n        primes[56]
    = 29;\n        primes[57] = 31;\n        primes[58] = 37;\n        primes[59]
    = 41;\n        primes[60] = 43;\n        primes[61] = 51;\n        primes[62]
    = 57;\n        prime\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp15tow5uv.cs(90,14): error CS1002: ; expected

    '
  timestamp: 1659823425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        foreach (char c in sentence) {\n            isPrime =
    true;\n            int length = Convert.ToInt32(c);\n            for (int i =
    2; i <= length / 2; i++) {\n                if (length % i == 0) {\n                    isPrime
    = false;\n                    break;\n                }\n            }\n            if
    (isPrime) {\n                word += c;\n            }\n        }\n        result
    = word;\n        return result;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bcbaf748968748478dd6a94ff5ce2ad3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bcbaf748968748478dd6a94ff5ce2ad3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823426
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    temp = \"\";\n        char[] chars = sentence.ToCharArray();\n        Array.Sort(chars);\n
    \       foreach (char c in chars) {\n            if (chars.Contains(c)) {\n                word
    += c;\n            }\n        }\n        char[] chars2 = word.ToCharArray();\n
    \       Array.Sort(chars2);\n        foreach (char c in chars2) {\n            if
    (chars2.Contains(c)) {\n                temp += c;\n            }\n        }\n
    \       char[] chars3 = temp.ToCharArray();\n        Array.Sort(chars3);\n        foreach
    (char c in chars3) {\n            if (chars3.Contains(c)) {\n                result
    += c;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ce529223f724622aedeac8885736ec9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ce529223f724622aedeac8885736ec9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            } else {\n                isPrime =
    false;\n            }\n        }\n        char[] charArray = word.ToCharArray();\n
    \       List<int> primes = new List<int>();\n        for (int i = 2; i <= charArray.Length;
    i++) {\n            if (charArray.All(c => c % i == 0)) {\n                primes.Add(i);\n
    \           }\n        }\n        foreach (int prime in primes) {\n            bool
    isPrime = true;\n            int counter = 0;\n            while (counter < charArray.Length)
    {\n                if (charArray[counter] % prime == 0) {\n                    isPrime
    = false;\n                    break;\n                }\n                counter++;\n
    \           }\n            if (isPrime) {\n                result += \" \" + word;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2t5w5g5m.cs(42,18): error CS0136: A local or parameter named ''isPrime''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp2t5w5g5m.cs(26,14): warning CS0219: The variable ''isPrime'' is assigned
    but its value is never used

    '
  timestamp: 1659823426
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       List<int> primes = new List<int>();\n        foreach (char c in chars)
    {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n                primes.Add(n);\n
    \           }\n        }\n        foreach (int p in primes) {\n            int
    count = 0;\n            foreach (char c in chars) {\n                if (Convert.ToInt32(c)
    == p) {\n                    count++;\n                }\n            }\n            if
    (count == primes.Count) {\n                result += \" \" + p;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a4bfc7ca5824f998532a3eea1ecc550>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a4bfc7ca5824f998532a3eea1ecc550>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823426
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        bool
    isPrime = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            } else {\n                isPrime =
    false;\n            }\n        }\n        string primes = \"\";\n        for (int
    i = 2; i <= Math.Sqrt(word.Length); i++) {\n            if (word.Length % i ==
    0) {\n                primes += i;\n            }\n        }\n        if (isPrime)
    {\n            foreach (char c in word) {\n                if (char.IsLetter(c))
    {\n                    result += c;\n                }\n            }\n        }
    else {\n            foreach (char c in word) {\n                if (char.IsLetter(c))
    {\n                    result += c;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c62d031385d948d1bc539677723da7cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c62d031385d948d1bc539677723da7cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823426
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       List<string> words = new List<string>();\n        foreach (char c in chars)
    {\n            if (char.IsLetter(c)) {\n                words.Add(c.ToString());\n
    \           }\n        }\n        foreach (string word in words) {\n            int
    length = word.Length;\n            bool isPrime = true;\n            int i = 2;\n
    \           while (i <= length) {\n                if (length % i == 0) {\n                    isPrime
    = false;\n                    break;\n                }\n                i++;\n
    \           }\n            if (isPrime) {\n                result += word;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab261f67901b40c6bc08c82bfecd9936>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab261f67901b40c6bc08c82bfecd9936>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823426
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       HashSet<string> words = new HashSet<string>();\n        foreach (char
    c in chars) {\n            if (char.IsLetter(c)) {\n                string word
    = c.ToString();\n                words.Add(word);\n            }\n        }\n
    \       foreach (string word in words) {\n            int length = word.Length;\n
    \           if (length == 1) {\n                result += word;\n            }
    else {\n                for (int i = 2; i <= Math.Sqrt(length); i++) {\n                    if
    (length % i == 0) {\n                        int count = 0;\n                        for
    (int j = length / i; j <= length; j += i) {\n                            if (j
    == length) break;\n                            if (words.Contains(word.Substring(count,
    j - count))) {\n                                result += word.Substring(count,
    j - count);\n                                count += j - count;\n                            }\n
    \                       }\n                    }\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b68bc75a45af410686ea4d5bbded8981>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b68bc75a45af410686ea4d5bbded8981>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823426
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string temp = \"\";\n        foreach
    (char c in sentence) {\n            if (char.IsLetter(c)) {\n                temp
    = temp + c;\n            }\n        }\n        char[] charArray = temp.ToCharArray();\n
    \       Array.Sort(charArray);\n        foreach (char c in charArray) {\n            int
    count = 0;\n            for (int i = 0; i < charArray.Length; i++) {\n                if
    (charArray[i] == c) {\n                    count++;\n                }\n            }\n
    \           if (count == 2) {\n                result = result + c;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f24db72309d64fdd91140cac5b1f10f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f24db72309d64fdd91140cac5b1f10f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823426
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       HashSet<string> words = new HashSet<string>();\n        foreach (char
    c in chars) {\n            if (char.IsLetter(c)) {\n                string word
    = c.ToString();\n                if (!words.Contains(word)) {\n                    words.Add(word);\n
    \                   result += word + \" \";\n                }\n            }\n
    \       }\n        return result.Trim();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c936431690a64fc680cdc6e3757de8ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c936431690a64fc680cdc6e3757de8ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823426
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        string word = \"\";\n        bool isPrime
    = true;\n        foreach (char c in chars) {\n            int n = Convert.ToInt32(c);\n
    \           if (n % 2 == 0) {\n                isPrime = false;\n                break;\n
    \           }\n        }\n        if (isPrime) {\n            foreach (char c
    in chars) {\n                int n = Convert.ToInt32(c);\n                if (n
    % 2 != 0) {\n                    word += c;\n                }\n            }\n
    \           result = word;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd6aa56b7304477c92549df35a154074>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd6aa56b7304477c92549df35a154074>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string word = \"\";\n        string
    temp = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            } else {\n                temp = word;\n
    \               word = \"\";\n                if (IsPrime(temp.Length)) {\n                    result
    += temp;\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphypkukfh.cs(33,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823426
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        bool isPrime = true;\n        string
    word = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        char[] charArray
    = word.ToCharArray();\n        Array.Sort(charArray);\n        foreach (char c
    in charArray) {\n            int length = Convert.ToInt32(c);\n            if
    (isPrime) {\n                for (int i = 1; i < length + 1; i++) {\n                    if
    (length == i) {\n                        isPrime = false;\n                        break;\n
    \                   }\n                    if (length < i) {\n                        isPrime
    = false;\n                        break;\n                    }\n                }\n
    \               if (isPrime) {\n                    result += \" \" + word;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70d864dfcdb74f7a860741d968096895>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70d864dfcdb74f7a860741d968096895>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       Array.Sort(chars);\n        foreach (char c in chars) {\n            int
    count = 0;\n            int start = 0;\n            int end = chars.Length - 1;\n
    \           while (start <= end) {\n                int mid = (start + end) /
    2;\n                if (IsPrime(mid)) {\n                    count = count + 1;\n
    \                   if (mid < chars.Length) {\n                        start =
    mid + 1;\n                    } else {\n                        end = mid - 1;\n
    \                   }\n                } else {\n                    start = mid
    + 1;\n                }\n            }\n            if (count == chars.Length)
    {\n                result += c;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpblulegaw.cs(33,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823426
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n
    \       List<int> primes = new List<int>();\n        foreach (char c in chars)
    {\n            int n = Convert.ToInt32(c);\n            primes.Add(n);\n        }\n
    \       primes.Sort();\n        foreach (int n in primes) {\n            if (n
    % 2 == 0) {\n                for (int i = 2; i <= n / 2; i++) {\n                    if
    (n % i == 0) {\n                        int j = i;\n                        while
    (j > 1) {\n                            if (n % j == 0) {\n                                break;\n
    \                           }\n                            j--;\n                        }\n
    \                       if (j == 1) {\n                            result += \"
    \" + chars[i];\n                        }\n                    }\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23916b34e5bc417d80fb0f376e2056f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23916b34e5bc417d80fb0f376e2056f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823426
