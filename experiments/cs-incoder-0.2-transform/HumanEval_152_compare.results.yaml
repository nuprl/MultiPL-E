language: cs
name: HumanEval_152_compare
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long guess = 0;\n\
    \        foreach (var item in game) {\n            score += item;\n        }\n\
    \        foreach (var item in guess) {\n            guess += item;\n        }\n\
    \        guess = Math.Abs(guess);\n        if (guess == score) {\n           \
    \ result.Add(0);\n        }\n        else {\n            result.Add(guess - score);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgnlqtox7.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpgnlqtox7.cs(28,30): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>(game.Count);\n        foreach (var item in game) {\n\
    \            var diff = item - guess[game.IndexOf(item)]; // the difference between\
    \ the score and the guess\n            if (diff > 0) result.Add(diff);\n     \
    \       else result.Add(Math.Abs(diff));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a76afabcca7a495fb03c7c0828281b39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a76afabcca7a495fb03c7c0828281b39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long diff = 0;\n\
    \        foreach (long g in game) {\n            score += g;\n        }\n    \
    \    foreach (long g in guess) {\n            diff += g;\n        }\n        if\
    \ (diff == 0) {\n            result.Add(0);\n        } else {\n            result.Add(Math.Abs(diff\
    \ - score));\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5946faf2c1044def8263f538598731e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5946faf2c1044def8263f538598731e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797772
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        long score = 0;\n        long\
    \ diff = 0;\n        foreach (long g in game) {\n            score += g;\n   \
    \         foreach (long g in guess) {\n                diff += Math.Abs(g - g);\n\
    \            }\n            result.Add(diff);\n            diff = 0;\n       \
    \ }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6489n2iz.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>();\n        game.ForEach(x => result.Add(x - guess[game.IndexOf(x)]));\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26cdff392b234f7abe30d5f0fdd07dc0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26cdff392b234f7abe30d5f0fdd07dc0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797772
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long guess = 0;\n\
    \        long diff = 0;\n        bool correct = false;\n        foreach (long\
    \ g in game) {\n            score += g;\n        }\n        foreach (long g in\
    \ guess) {\n            guess += g;\n        }\n        diff = score - guess;\n\
    \        if (diff < 0) {\n            diff = -diff;\n        }\n        foreach\
    \ (long g in guess) {\n            if (g == diff) {\n                correct =\
    \ true;\n            }\n            result.Add(g);\n        }\n        if (!correct)\
    \ {\n            foreach (long g in game) {\n                if (g == diff) {\n\
    \                    correct = true;\n                }\n                result.Add(g);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsfi5q0mf.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpsfi5q0mf.cs(30,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpsfi5q0mf.cs(37,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797771
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        long score;\n        long guess;\n\
    \        long diff;\n        bool correct;\n        bool found;\n        bool\
    \ found2;\n        bool found3;\n        bool found4;\n        bool found5;\n\
    \        bool found6;\n        bool found7;\n        bool found8;\n        bool\
    \ found9;\n        bool found10;\n        bool found11;\n        bool found12;\n\
    \        bool found13;\n        bool found14;\n        bool found15;\n       \
    \ bool found16;\n        bool found17;\n        bool found18;\n        bool found19;\n\
    \        bool found20;\n        bool found21;\n        bool found22;\n       \
    \ bool found23;\n        bool found24;\n        bool found25;\n        bool found26;\n\
    \        bool found27;\n        bool found28;\n        bool found29;\n       \
    \ bool found30;\n        bool found31;\n        bool found32;\n        bool found33;\n\
    \        bool found34;\n        bool found35;\n        bool found36;\n       \
    \ bool found37;\n        bool found38;\n        bool found39;\n        bool found40;\n\
    \        bool found41;\n        bool found42;\n        bool found43;\n       \
    \ bool found44;\n        bool found45;\n        bool found46;\n        bool found47;\n\
    \        bool found48;\n        bool found49;\n        bool found50;\n       \
    \ bool found51;\n        bool found52;\n        bool found53;\n        bool found54;\n\
    \        bool found55;\n        bool found56;\n        bool found57;\n       \
    \ bool found58;\n        bool found59;\n        bool found60;\n        bool found61;\n\
    \        bool found62;\n        bool found63;\n        bool found64;\n       \
    \ bool found65;\n        bool found66;\n        bool found67;\n        bool found68;\n\
    \        bool found69;\n        bool found70;\n        bool found71;\n       \
    \ bool found72;\n        bool found73;\n        bool found74;\n        bool found75;\n\
    \        bool found76;\n        bool found77;\n        bool found78;\n       \
    \ bool found79;\n        bool found80;\n        bool found81;\n        bool found82;\n\
    \        bool found83;\n        \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2l5ynwfh.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp2l5ynwfh.cs(23,14): warning CS0168: The variable ''score'' is declared
    but never used

    /tmp/tmp2l5ynwfh.cs(24,14): warning CS0168: The variable ''guess'' is declared
    but never used

    /tmp/tmp2l5ynwfh.cs(25,14): warning CS0168: The variable ''diff'' is declared
    but never used

    /tmp/tmp2l5ynwfh.cs(26,14): warning CS0168: The variable ''correct'' is declared
    but never used

    /tmp/tmp2l5ynwfh.cs(27,14): warning CS0168: The variable ''found'' is declared
    but never used

    /tmp/tmp2l5ynwfh.cs(28,14): warning CS0168: The variable ''found2'' is declared
    but never used

    /tmp/tmp2l5ynwfh.cs(29,14): warning CS0168: The variable ''found3'' is declared
    but never used

    /tmp/tmp2l5ynwfh.cs(30,14): warning CS0168: The variable ''found4'' is declared
    but never used

    /tmp/tmp2l5ynwfh.cs(31,14): warning CS0168: The variable ''found5'' is declared
    but never used

    /tmp/tmp2l5ynwfh.cs(32,14): warning CS0168: The variable ''found6'' is declared
    but never used

    /tmp/tmp2l5ynwfh.cs(33,14): warning CS0168: The variable ''found7'' is declared
    but never used

    /tmp/tmp2l5ynwfh.cs(34,14): warning CS0168: The variable ''found8'' is declared
    but never used

    /tmp/tmp2l5ynwfh.cs(35,14): warning CS0168: The variable ''found9'' is declared
    but never used

    /tmp/tmp2l5ynwfh.cs(36,14): warning CS0168: The variable ''found10'' is declared
    but never used

    /tmp/tmp2l5ynwfh.cs(37,14): warning CS0168: The variable ''found11'' is declared
    but never used

    /tmp/tmp2l5ynwfh.cs(38,14): warning CS0168: The variable ''found12'' is declared
    but never used

    /tmp/tmp2l5ynwfh.cs(39,14): warning CS0168: The variable ''found13'' is declared
    but never used

    /tmp/tmp2l5ynwfh.cs(40,14): warning CS0168: The variable ''found14'' is declared
    but never used

    /tmp/tmp2l5ynwfh.cs(41,14): warning CS0168: The var'
  timestamp: 1659797771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>();\n        foreach (var item in game) {\n         \
    \   var diff = item - guess[game.IndexOf(item)]; // the absolute difference between\
    \ the score and the guess\n            result.Add(diff);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <77fa742f52e8413db73bb40d1e058b27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <77fa742f52e8413db73bb40d1e058b27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797772
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long guess = 0;\n\
    \        long difference = 0;\n        bool correct = false;\n        foreach\
    \ (var item in guess) {\n            guess = item;\n            foreach (var item2\
    \ in game) {\n                score = item2;\n                difference = Math.Abs(guess\
    \ - score);\n                if (difference == 0) {\n                    correct\
    \ = true;\n                }\n                result.Add(difference);\n      \
    \      }\n        }\n        if (!correct) {\n            foreach (var item in\
    \ guess) {\n                guess = item;\n                foreach (var item2\
    \ in game) {\n                    score = item2;\n                    difference\
    \ = Math.Abs(guess - score);\n                    if (difference != 0) {\n   \
    \                     result.Add(difference);\n                    }\n       \
    \         }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzno1t35_.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpzno1t35_.cs(27,30): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpzno1t35_.cs(39,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797771
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>();\n        var gameScores = new List<long>(game.Count);\n\
    \        var guesses = new List<long>(guess.Count);\n        var gameScore = 0;\n\
    \        var guess = 0;\n        var gameScoreIndex = 0;\n        var guesseIndex\
    \ = 0;\n        while (gameScoreIndex < game.Count && guesseIndex < guess.Count)\
    \ {\n            gameScore = game[gameScoreIndex];\n            guess = guess[guesseIndex];\n\
    \            if (gameScore == guess) {\n                gameScores.Add(gameScore);\n\
    \                guesses.Add(guess);\n                gameScoreIndex++;\n    \
    \            guesseIndex++;\n            } else if (gameScore < guess) {\n   \
    \             gameScores.Add(gameScore);\n                gameScoreIndex++;\n\
    \            } else {\n                guesses.Add(guess);\n                guesseIndex++;\n\
    \            }\n        }\n        if (gameScoreIndex < game.Count) {\n      \
    \      gameScores.AddRange(game.Skip(gameScoreIndex).Take(game.Count - gameScoreIndex));\n\
    \        }\n        if (guesseIndex < guess.Count) {\n            guesses.AddRange(guess.Skip(guesseIndex).Take(guess.Count\
    \ - guesseIndex));\n        }\n        foreach (var gameScore in gameScores) {\n\
    \            result.Add(gameScore - guess);\n        }\n        foreach (var guess\
    \ in guesses) {\n            result.Add(guess - gameScore);\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzocyt2v4.cs(24,38): error CS0841: Cannot use local variable ''guess''
    before it is declared

    /tmp/tmpzocyt2v4.cs(24,38): error CS1503: Argument 1: cannot convert from ''method
    group'' to ''int''

    /tmp/tmpzocyt2v4.cs(26,13): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpzocyt2v4.cs(29,47): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmpzocyt2v4.cs(30,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpzocyt2v4.cs(31,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpzocyt2v4.cs(48,13): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmpzocyt2v4.cs(49,36): error CS1061: ''int'' does not contain a definition
    for ''Skip'' and no accessible extension method ''Skip'' accepting a first argument
    of type ''int'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpzocyt2v4.cs(49,59): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''method group'' and ''int''

    /tmp/tmpzocyt2v4.cs(51,22): error CS0136: A local or parameter named ''gameScore''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpzocyt2v4.cs(54,22): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659797771
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // TODO:\
    \ Implement this function\n        List<long> result = new List<long>();\n   \
    \     long score = 0;\n        long difference = 0;\n        foreach (long g in\
    \ game) {\n            foreach (long g in guess) {\n                difference\
    \ = Math.Abs(g - g);\n                if (difference == 0) {\n               \
    \     score = 0;\n                } else {\n                    score = difference;\n\
    \                }\n            }\n            result.Add(score);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj6o6abnv.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797771
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>();\n        var scores = new List<long>(game.Count);\n\
    \        var guesses = new List<long>(guess.Count);\n        var score = 0;\n\
    \        var guess = 0;\n        var maxScore = game.Max();\n        var maxGuess\
    \ = guess.Max();\n        var maxScoreIndex = scores.FindIndex(x => x == maxScore);\n\
    \        var maxGuesses = guesses.FindIndex(x => x == maxGuess);\n        var\
    \ maxScoreIndex = scores.FindIndex(x => x == maxScore);\n        var maxGuesses\
    \ = guesses.FindIndex(x => x == maxGuess);\n        var maxScoreIndex = scores.FindIndex(x\
    \ => x == maxScore);\n        var maxGuesses = guesses.FindIndex(x => x == maxGuess);\n\
    \        var maxScoreIndex = scores.FindIndex(x => x == maxScore);\n        var\
    \ maxGuesses = guesses.FindIndex(x => x == maxGuess);\n        var maxScoreIndex\
    \ = scores.FindIndex(x => x == maxScore);\n        var maxGuesses = guesses.FindIndex(x\
    \ => x == maxGuess);\n        var maxScoreIndex = scores.FindIndex(x => x == maxScore);\n\
    \        var maxGuesses = guesses.FindIndex(x => x == maxGuess);\n        var\
    \ maxScoreIndex = scores.FindIndex(x => x == maxScore);\n        var maxGuesses\
    \ = guesses.FindIndex(x => x == maxGuess);\n        var maxScoreIndex = scores.FindIndex(x\
    \ => x == maxScore);\n        var maxGuesses = guesses.FindIndex(x => x == maxGuess);\n\
    \        var maxScoreIndex = scores.FindIndex(x => x == maxScore);\n        var\
    \ maxGuesses = guesses.FindIndex(x => x == maxGuess);\n        var maxScoreIndex\
    \ = scores.FindIndex(x => x == maxScore);\n        var maxGuesses = guesses.FindIndex(x\
    \ => x == maxGuess);\n        var maxScoreIndex = scores.FindIndex(x => x == maxScore);\n\
    \        var maxGuesses = guesses.FindIndex(x => x == maxGuess);\n        var\
    \ maxScoreIndex = scores.FindIndex(x => x == maxScore);\n        var maxGuesses\
    \ = guesses.FindIndex(x => x == maxGuess);\n        var maxScoreIndex = scores.FindIndex(x\
    \ => x == maxScore);\n        var maxGuesses = guesses.FindIndex(x => x == maxGuess);\n\
    \        var maxScoreIndex = scores.FindIndex(x => x == maxScore);\n        var\
    \ maxGuesses = guesses.FindIndex(x => x == \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8t7pjenq.cs(56,53): error CS1525: Invalid expression term ''}''

    /tmp/tmp8t7pjenq.cs(56,53): error CS1026: ) expected

    /tmp/tmp8t7pjenq.cs(56,53): error CS1002: ; expected

    '
  timestamp: 1659797771
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        long score = 0;\n        long\
    \ guess = 0;\n        foreach (long g in game) {\n            score += g;\n  \
    \      }\n        foreach (long g in guess) {\n            guess += g;\n     \
    \   }\n        if (score == guess) {\n            foreach (long g in guess) {\n\
    \                result.Add(g);\n            }\n        }\n        else {\n  \
    \          foreach (long g in guess) {\n                result.Add(Math.Abs(g\
    \ - score));\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjj3ewumz.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpjj3ewumz.cs(28,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpjj3ewumz.cs(32,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpjj3ewumz.cs(37,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        // Your\
    \ code goes here\n        List<long> result = new List<long>();\n        long\
    \ score = 0;\n        long difference = 0;\n        foreach (var item in game)\
    \ {\n            score = item;\n            foreach (var item2 in guess) {\n \
    \               difference = Math.Abs(item - item2);\n                if (difference\
    \ == 0) {\n                    result.Add(0);\n                }\n           \
    \     else {\n                    result.Add(difference);\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e264d91c05f464cb455d282321133e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e264d91c05f464cb455d282321133e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797772
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long difference\
    \ = 0;\n        foreach (long guess in guess) {\n            score = game.ElementAtOrDefault(guess);\n\
    \            if (score == 0) {\n                difference = guess - score;\n\
    \            } else {\n                difference = guess - score;\n         \
    \   }\n            result.Add(difference);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp34f5_2pz.cs(25,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp34f5_2pz.cs(26,45): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        long score = 0;\n        long\
    \ diff = 0;\n        foreach (var g in guess) {\n            score += g;\n   \
    \         diff = g - score;\n        }\n        foreach (var g in game) {\n  \
    \          score -= g;\n            diff += g - score;\n        }\n        foreach\
    \ (var g in guess) {\n            result.Add(Math.Abs(g - diff));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f1c60c28d7534eba8d0c477e98d7de20>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f1c60c28d7534eba8d0c477e98d7de20>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797772
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        long score = 0;\n        long\
    \ diff = 0;\n        foreach (long g in game) {\n            score += g;\n   \
    \         foreach (long g in guess) {\n                diff += g - score;\n  \
    \          }\n            result.Add(diff);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph6gfpb1v.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        var\
    \ result = new List<long>();\n        foreach (var g in game) {\n            var\
    \ gDiff = Math.Abs(g - guess.FirstOrDefault());\n            result.Add(gDiff);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9df6e1e69506472ba61d2f8ad1c428ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9df6e1e69506472ba61d2f8ad1c428ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797772
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>();\n        long score;\n        long guess;\n     \
    \   long diff;\n        bool correct = false;\n        bool correctGuess = false;\n\
    \        bool correctScore = false;\n        bool correctGuesses = false;\n  \
    \      bool correctScores = false;\n        bool correctGuessess = false;\n  \
    \      bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool correctGuessess = false;\n\
    \        bool correctGuessess = false;\n        bool \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptrb2xgna.cs(81,13): error CS1001: Identifier expected

    /tmp/tmptrb2xgna.cs(81,13): error CS1002: ; expected

    '
  timestamp: 1659797771
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n   \
    \ // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L,\
    \ (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L,\
    \ (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public\
    \ static List<long> Compare(List<long> game, List<long> guess) {\n        List<long>\
    \ result = new List<long>(game.Count);\n        long score = 0;\n        long\
    \ guess = 0;\n        long diff = 0;\n        foreach (long g in game) {\n   \
    \         score += g;\n        }\n        foreach (long g in guess) {\n      \
    \      guess += g;\n        }\n        diff = score - guess;\n        if (diff\
    \ < 0) {\n            foreach (long g in game) {\n                result += g;\n\
    \            }\n        } else {\n            foreach (long g in guess) {\n  \
    \              result += g;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp235ng5b8.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp235ng5b8.cs(29,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp235ng5b8.cs(35,17): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''List<long>'' and ''long''

    /tmp/tmp235ng5b8.cs(38,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp235ng5b8.cs(39,17): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''List<long>'' and ''long''

    '
  timestamp: 1659797771
