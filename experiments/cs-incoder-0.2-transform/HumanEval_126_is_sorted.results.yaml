language: cs
name: HumanEval_126_is_sorted
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n\
    \    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    //\
    \ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    //\
    \ (false)\n    public static bool IsSorted(List<long> lst) {\n        if (lst.Count\
    \ < 2) return true;\n        long last = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <161b9efcb91e4aa7a331877ad6c5ea67>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <161b9efcb91e4aa7a331877ad6c5ea67>:0 \n"
  stdout: ''
  timestamp: 1659800725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n\
    \    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    //\
    \ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    //\
    \ (false)\n    public static bool IsSorted(List<long> lst) {\n        if (lst.Count\
    \ < 2) return true;\n        long lastValue = lst[0];\n        bool isSorted =\
    \ false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            if (lst[i] == lastValue) continue;\n            isSorted\
    \ = true;\n            lastValue = lst[i];\n        }\n        return isSorted;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b3cc59dfece74377a0344bcc3974f660>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b3cc59dfece74377a0344bcc3974f660>:0 \n"
  stdout: ''
  timestamp: 1659800725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n\
    \    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    //\
    \ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    //\
    \ (false)\n    public static bool IsSorted(List<long> lst) {\n        if (lst.Count\
    \ < 2)\n            return true;\n        long lastValue = lst[0];\n        bool\
    \ isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n         \
    \   if (lst[i] < lastValue)\n                return false;\n            else\n\
    \                lastValue = lst[i];\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00f3f98495104f4aa4be351030aa7673>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00f3f98495104f4aa4be351030aa7673>:0 \n"
  stdout: ''
  timestamp: 1659800725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n\
    \    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    //\
    \ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    //\
    \ (false)\n    public static bool IsSorted(List<long> lst) {\n        if (lst.Count\
    \ < 2) return true;\n        long last = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <161b9efcb91e4aa7a331877ad6c5ea67>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <161b9efcb91e4aa7a331877ad6c5ea67>:0 \n"
  stdout: ''
  timestamp: 1659800725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n\
    \    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    //\
    \ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    //\
    \ (false)\n    public static bool IsSorted(List<long> lst) {\n        if (lst.Count\
    \ < 2) return true;\n        if (lst.Count > 2) return false;\n        var seen\
    \ = new HashSet<long>();\n        foreach (var item in lst) {\n            if\
    \ (seen.Contains(item)) return false;\n            seen.Add(item);\n        }\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7b6fa8a2bab4b7c89a290f095fefd87>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7b6fa8a2bab4b7c89a290f095fefd87>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n\
    \    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    //\
    \ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    //\
    \ (false)\n    public static bool IsSorted(List<long> lst) {\n        long prev\
    \ = 0;\n        bool isSorted = false;\n        foreach (long num in lst) {\n\
    \            if (num < prev) {\n                isSorted = false;\n          \
    \      break;\n            }\n            prev = num;\n        }\n        return\
    \ isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <035013423ea54f8b826e1494fef70348>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <035013423ea54f8b826e1494fef70348>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n\
    \    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    //\
    \ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    //\
    \ (false)\n    public static bool IsSorted(List<long> lst) {\n        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool first\
    \ = true;\n        foreach (long num in lst) {\n            if (first && num ==\
    \ last)\n                return false;\n            else if (num < last)\n   \
    \             return false;\n            first = false;\n            last = num;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c367291f3a2f456fbfcfe851bee5d034>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c367291f3a2f456fbfcfe851bee5d034>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n\
    \    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    //\
    \ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    //\
    \ (false)\n    public static bool IsSorted(List<long> lst) {\n        long prev\
    \ = 0;\n        bool isSorted = false;\n        foreach (long num in lst) {\n\
    \            if (num < prev) {\n                isSorted = false;\n          \
    \      break;\n            }\n            prev = num;\n        }\n        return\
    \ isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <035013423ea54f8b826e1494fef70348>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <035013423ea54f8b826e1494fef70348>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n\
    \    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    //\
    \ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    //\
    \ (false)\n    public static bool IsSorted(List<long> lst) {\n        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b92518e730994974a8ba4a78540b6773>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b92518e730994974a8ba4a78540b6773>:0 \n"
  stdout: ''
  timestamp: 1659800725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n\
    \    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    //\
    \ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    //\
    \ (false)\n    public static bool IsSorted(List<long> lst) {\n        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b92518e730994974a8ba4a78540b6773>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b92518e730994974a8ba4a78540b6773>:0 \n"
  stdout: ''
  timestamp: 1659800725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n\
    \    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    //\
    \ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    //\
    \ (false)\n    public static bool IsSorted(List<long> lst) {\n        if (lst.Count\
    \ < 2)\n            return true;\n        long lastValue = lst[0];\n        bool\
    \ isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n         \
    \   if (lst[i] < lastValue)\n                return false;\n            else\n\
    \                lastValue = lst[i];\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00f3f98495104f4aa4be351030aa7673>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00f3f98495104f4aa4be351030aa7673>:0 \n"
  stdout: ''
  timestamp: 1659800725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n\
    \    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    //\
    \ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    //\
    \ (false)\n    public static bool IsSorted(List<long> lst) {\n        if (lst.Count\
    \ < 2) return true;\n        if (lst.Count > 2 && lst.Distinct().Count() > 1)\
    \ return false;\n        long last = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ isSorted = false;\n            last = lst[i];\n        }\n        return isSorted;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5070e16fedc4f2bb65eecaeaa1f4729>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5070e16fedc4f2bb65eecaeaa1f4729>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n\
    \    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    //\
    \ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    //\
    \ (false)\n    public static bool IsSorted(List<long> lst) {\n        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b92518e730994974a8ba4a78540b6773>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b92518e730994974a8ba4a78540b6773>:0 \n"
  stdout: ''
  timestamp: 1659800725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n\
    \    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    //\
    \ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    //\
    \ (false)\n    public static bool IsSorted(List<long> lst) {\n        if (lst.Count\
    \ < 2) return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            isSorted = true;\n            last = lst[i];\n        }\n       \
    \ return isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f94b04d1d4e44c5b8c6e16502d62677>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f94b04d1d4e44c5b8c6e16502d62677>:0 \n"
  stdout: ''
  timestamp: 1659800725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n\
    \    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    //\
    \ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    //\
    \ (false)\n    public static bool IsSorted(List<long> lst) {\n        if (lst.Count\
    \ < 2)\n            return true;\n        long lastValue = lst[0];\n        bool\
    \ isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n         \
    \   if (lst[i] < lastValue)\n                return false;\n            else\n\
    \                lastValue = lst[i];\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00f3f98495104f4aa4be351030aa7673>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00f3f98495104f4aa4be351030aa7673>:0 \n"
  stdout: ''
  timestamp: 1659800725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n\
    \    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    //\
    \ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    //\
    \ (false)\n    public static bool IsSorted(List<long> lst) {\n        if (lst.Count\
    \ < 2) return true;\n        long last = lst[0];\n        bool flag = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] != last)\
    \ {\n                flag = false;\n                break;\n            }\n  \
    \      }\n        return flag;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e7bbb847bba4de89e7d51ef638994b5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e7bbb847bba4de89e7d51ef638994b5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n\
    \    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    //\
    \ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    //\
    \ (false)\n    public static bool IsSorted(List<long> lst) {\n        if (lst.Count\
    \ < 2)\n            return true;\n        long lastValue = lst[0];\n        bool\
    \ isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n         \
    \   if (lst[i] < lastValue)\n                return false;\n            else\n\
    \                lastValue = lst[i];\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00f3f98495104f4aa4be351030aa7673>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00f3f98495104f4aa4be351030aa7673>:0 \n"
  stdout: ''
  timestamp: 1659800725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n\
    \    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    //\
    \ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    //\
    \ (false)\n    public static bool IsSorted(List<long> lst) {\n        if (lst.Count\
    \ < 2) return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            isSorted = true;\n            last = lst[i];\n        }\n       \
    \ return isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f94b04d1d4e44c5b8c6e16502d62677>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f94b04d1d4e44c5b8c6e16502d62677>:0 \n"
  stdout: ''
  timestamp: 1659800725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n\
    \    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    //\
    \ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    //\
    \ (false)\n    public static bool IsSorted(List<long> lst) {\n        if (lst.Count\
    \ < 2) return true;\n        if (lst.Count > 2) return false;\n        long lastValue\
    \ = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < lastValue) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] > lastValue) {\n\
    \                isSorted = true;\n                break;\n            }\n   \
    \     }\n        return isSorted;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8967e0289eb24236a96715da8beefe4b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8967e0289eb24236a96715da8beefe4b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n\
    \    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n\
    \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    //\
    \ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    //\
    \ (false)\n    public static bool IsSorted(List<long> lst) {\n        if (lst.Count\
    \ < 2) return true;\n        var seen = new HashSet<long>();\n        foreach\
    \ (var item in lst) {\n            if (seen.Add(item)) return false;\n       \
    \ }\n        return true;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9e5c1a4275be4472804477c564c62bf6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9e5c1a4275be4472804477c564c62bf6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800725
