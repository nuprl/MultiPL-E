name: HumanEval_9_rolling_max
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // From a given list of integers, generate a list of rolling maximum\
  \ element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,\
  \ (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>\
  \ numbers) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
  \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
  \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
  \    }\n\n}\n"
completions: ["        List<long> max = new List<long>();\n        long maxValue =\
    \ numbers.Max();\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2\
    \ = 0;\n        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4\
    \ = 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentNumber = 0;\n        foreach (long number\
    \ in numbers) {\n            currentNumber = number;\n            currentMax =\
    \ number;\n            while (currentNumber > max) {\n                result.Add(currentMax);\n\
    \                currentMax = currentNumber;\n                currentNumber =\
    \ numbers.Skip(numbers.IndexOf(currentMax) + 1).First();\n            }\n    \
    \        max = currentMax;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long maxValue = numbers.Max();\n       \
    \ long currentMax = maxValue;\n        long currentMaxIndex = 0;\n        bool\
    \ isMax = true;\n        long currentMaxIndexValue = 0;\n        foreach (long\
    \ number in numbers) {\n            if (number == currentMax) {\n            \
    \    currentMaxIndex++;\n                currentMaxIndexValue = currentMax;\n\
    \            }\n            if (number > currentMax) {\n                currentMax\
    \ = number;\n                currentMaxIndex = currentMaxIndexValue;\n       \
    \         isMax = true;\n            }\n            if (number == currentMax)\
    \ {\n                currentMaxIndex++;\n                currentMaxIndexValue\
    \ = currentMax;\n            }\n            if (number < currentMax) {\n     \
    \           currentMax = number;\n                currentMaxIndex = currentMaxIndexValue;\n\
    \                isMax = false;\n            }\n            if (isMax) {\n   \
    \             result.Add(number);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue\
    \ = numbers.First();\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        bool found = false;\n        bool foundIndex = false;\n        bool foundValue\
    \ = false;\n        long lastIndex = numbers.Count - 1;\n        long lastValue\
    \ = numbers.Last();\n        long lastValueIndex = numbers.IndexOf(lastValue);\n\
    \        bool foundLast = false;\n        bool foundLastIndex = false;\n     \
    \   bool foundLastValue = false;\n        long lastMax = 0;\n        long lastMaxIndex\
    \ = 0;\n        long lastMaxValue = numbers.First();\n        long lastMaxValueIndex\
    \ = numbers.IndexOf(lastMaxValue);\n        bool foundLastMax = false;\n     \
    \   bool foundLastMaxIndex = false;\n        bool foundLastMaxValue = false;\n\
    \        long lastMaxValueIndex = 0;\n        long lastMaxValueIndex = numbers.IndexOf(lastMaxValue);\n\
    \        bool foundLastMaxValue = false;\n        bool foundLastMaxValueIndex\
    \ = false;\n        bool foundLastMaxValueIndex = false;\n        long lastMaxValueIndex\
    \ = 0;\n        long lastMaxValueIndex = numbers.IndexOf(lastMaxValue);\n    \
    \    bool foundLastMaxValueIndex = false;\n        bool foundLastMaxValueIndex\
    \ = false;\n        long lastMaxValueIndex = 0;\n        long lastMaxValueIndex\
    \ = numbers.IndexOf(lastMaxValue);\n        bool foundLastMaxValueIndex = false;\n\
    \        bool foundLastMaxValueIndex = false;\n        long lastMaxValueIndex\
    \ = 0;\n        long lastMaxValueIndex = numbers.IndexOf(lastMaxValue);\n    \
    \    bool foundLastMaxValueIndex = false;\n        bool foundLastMaxValueIndex\
    \ = false;\n        long lastMaxValueIndex = 0;\n        long lastMaxValueIndex\
    \ = numbers.IndexOf(lastMaxValue);\n        bool foundLastMaxValueIndex = false;\n\
    \        bool foundLastMaxValueIndex = false;\n        long lastMaxValueIndex\
    \ = 0;\n        long lastMaxValueIndex = numbers.IndexOf(lastMaxValue);\n    \
    \    bool foundLastMaxValueIndex = false;\n        bool foundLastMaxValueIndex\
    \ = false;\n        long lastMaxValueIndex = 0;\n        long lastMaxValueIndex\
    \ = numbers.IndexOf(lastMaxValue);\n        bool foundLastMaxValueIndex = false;\n\
    \        bool foundLastMaxValueIndex = false;\n        long lastMaxValueIndex\
    \ = 0;\n        long lastMaxValueIndex = numbers.IndexOf(lastMaxValue);\n    \
    \    bool foundLastMaxValueIndex = false;\n        bool foundLastMaxValueIndex\
    \ = false;\n        long lastMaxValueIndex = 0;\n        long lastMaxValueIndex\
    \ = numbers.IndexOf(lastMax", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMaxValue) {\n                currentMaxValue\
    \ = number;\n                currentMaxIndex = currentMaxValueIndex;\n       \
    \     }\n            if (number == currentMaxValue) {\n                currentMaxIndex++;\n\
    \            }\n            if (currentMaxIndex == currentMaxValueIndex) {\n \
    \               currentMaxValue = numbers[currentMaxIndex];\n                currentMaxIndex++;\n\
    \            }\n            if (currentMaxIndex == numbers.Count) {\n        \
    \        result.Add(currentMaxValue);\n                currentMaxIndex = 0;\n\
    \                currentMaxValue = numbers[0];\n                currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long maxValue\
    \ = numbers.Max();\n        long currentMax = maxValue;\n        long currentSum\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquareOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferences = 0;\n      \
    \  long currentSumOfSquareOfDifferenceOfDifferenceOfDifferences = 0;\n       \
    \ long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferences = 0;\n\
    \        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifference",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentNumber = numbers.First();\n        long\
    \ currentNumberCount = 0;\n        foreach (long number in numbers) {\n      \
    \      currentNumberCount++;\n            if (number > currentNumber) {\n    \
    \            currentMax = currentNumber;\n                currentNumber = number;\n\
    \            } else if (number == currentNumber) {\n                currentNumberCount++;\n\
    \            }\n            if (currentNumberCount > max) {\n                max\
    \ = currentNumberCount;\n            }\n            result.Add(currentNumber);\n\
    \        }\n        return result;", "        List<long> rollingMax = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            currentNumber\
    \ = number;\n            currentMax = number;\n            rollingMax.Add(number);\n\
    \            while (currentNumber > currentMax) {\n                currentMax\
    \ = currentNumber;\n                currentNumber = currentNumber - currentMax;\n\
    \                rollingMax.Add(currentMax);\n            }\n        }\n     \
    \   return rollingMax;", "        List<long> result = new List<long>();\n    \
    \    long max = 0;\n        long currentMax = 0;\n        long currentSum = 0;\n\
    \        long sum = 0;\n        long lastSum = 0;\n        long lastSum2 = 0;\n\
    \        long lastSum3 = 0;\n        long lastSum4 = 0;\n        long lastSum5\
    \ = 0;\n        long lastSum6 = 0;\n        long lastSum7 = 0;\n        long lastSum8\
    \ = 0;\n        long lastSum9 = 0;\n        long lastSum10 = 0;\n        long\
    \ lastSum11 = 0;\n        long lastSum12 = 0;\n        long lastSum13 = 0;\n \
    \       long lastSum14 = 0;\n        long lastSum15 = 0;\n        long lastSum16\
    \ = 0;\n        long lastSum17 = 0;\n        long lastSum18 = 0;\n        long\
    \ lastSum19 = 0;\n        long lastSum20 = 0;\n        long lastSum21 = 0;\n \
    \       long lastSum22 = 0;\n        long lastSum23 = 0;\n        long lastSum24\
    \ = 0;\n        long lastSum25 = 0;\n        long lastSum26 = 0;\n        long\
    \ lastSum27 = 0;\n        long lastSum28 = 0;\n        long lastSum29 = 0;\n \
    \       long lastSum30 = 0;\n        long lastSum31 = 0;\n        long lastSum32\
    \ = 0;\n        long lastSum33 = 0;\n        long lastSum34 = 0;\n        long\
    \ lastSum35 = 0;\n        long lastSum36 = 0;\n        long lastSum37 = 0;\n \
    \       long lastSum38 = 0;\n        long lastSum39 = 0;\n        long lastSum40\
    \ = 0;\n        long lastSum41 = 0;\n        long lastSum42 = 0;\n        long\
    \ lastSum43 = 0;\n        long lastSum44 = 0;\n        long lastSum45 = 0;\n \
    \       long lastSum46 = 0;\n        long lastSum47 = 0;\n        long lastSum48\
    \ = 0;\n        long lastSum49 = 0;\n        long lastSum50 = 0;\n        long\
    \ lastSum51 = 0;\n        long lastSum52 = 0;\n        long lastSum53 = 0;\n \
    \       long lastSum54 = 0;\n        long lastSum55 = 0;\n        long lastSum56\
    \ = 0;\n        long lastSum57 = 0;\n        long lastSum58 = 0;\n        long\
    \ lastSum59 = 0;\n        long lastSum60 = 0;\n        long lastSum61 = 0;\n \
    \       long lastSum62 = 0;\n        long lastSum63 = 0;\n        long lastSum64\
    \ = 0;\n        long lastSum65 = 0;\n        long lastSum66 = 0;\n        long\
    \ lastSum67 = 0;\n        long lastSum68 = 0;\n        long lastSum69 = 0;\n \
    \       long ", "        List<long> result = new List<long>();\n        long maxValue\
    \ = numbers.Max();\n        long currentMax = maxValue;\n        long currentSum\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquares = 0;\n        long currentSumOfPowersOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquares = 0;\n      \
    \  long currentSumOfPowersOfSquareOfSquareOfSquareOfSquares = 0;\n        long\
    \ currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n        long\
    \ currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n \
    \       long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ maxIndex = 0;\n        long currentMax = numbers[0];\n        long currentMaxIndex\
    \ = 0;\n        bool isMax = true;\n        for (int i = 1; i < numbers.Count;\
    \ i++) {\n            if (numbers[i] > currentMax) {\n                currentMax\
    \ = numbers[i];\n                currentMaxIndex = i;\n            }\n       \
    \     if (numbers[i] == currentMax) {\n                isMax = true;\n       \
    \     }\n            if (numbers[i] > currentMax) {\n                isMax = false;\n\
    \            }\n            if (isMax) {\n                max = numbers[i];\n\
    \                maxIndex = i;\n            }\n        }\n        result.Add(max);\n\
    \        result.Add(maxIndex);\n        return result;", "        List<long> max\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMaxValue) {\n               \
    \ currentMaxValue = number;\n                currentMaxIndex = numbers.IndexOf(number);\n\
    \            }\n            if (number == currentMaxValue) {\n               \
    \ max.Add(number);\n            }\n        }\n        if (currentMaxIndex > 0)\
    \ {\n            max.Add(currentMaxValue);\n        }\n        return max;", " \
    \       List<long> result = new List<long>();\n        long max = 0;\n       \
    \ long currentMax = 0;\n        long currentNumber = 0;\n        foreach (long\
    \ number in numbers) {\n            currentNumber = number;\n            currentMax\
    \ = number;\n            while (currentNumber != 0) {\n                currentMax\
    \ = Math.Max(currentMax, currentNumber);\n                currentNumber = currentNumber\
    \ / 2;\n            }\n            result.Add(currentMax);\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        long currentMax = 0;\n        long currentMaxIndex = 0;\n\
    \        foreach (long number in numbers) {\n            if (number > max) {\n\
    \                max = number;\n                currentMax = number;\n       \
    \         currentMaxIndex = numbers.IndexOf(number);\n            }\n        \
    \    else if (number == max) {\n                currentMax = number;\n       \
    \         currentMaxIndex = numbers.IndexOf(number);\n            }\n        \
    \    else {\n                if (currentMaxIndex == numbers.IndexOf(number)) {\n\
    \                    currentMax = currentMax;\n                    currentMaxIndex\
    \ = numbers.IndexOf(number);\n                }\n                else {\n    \
    \                result.Add(currentMax);\n                    max = number;\n\
    \                    currentMax = number;\n                    currentMaxIndex\
    \ = numbers.IndexOf(number);\n                }\n            }\n        }\n  \
    \      result.Add(currentMax);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndex2\
    \ = -1;\n        long currentMaxIndex3 = -1;\n        long currentMaxIndex4 =\
    \ -1;\n        long currentMaxIndex5 = -1;\n        long currentMaxIndex6 = -1;\n\
    \        long currentMaxIndex7 = -1;\n        long currentMaxIndex8 = -1;\n  \
    \      long currentMaxIndex9 = -1;\n        long currentMaxIndex10 = -1;\n   \
    \     long currentMaxIndex11 = -1;\n        long currentMaxIndex12 = -1;\n   \
    \     long currentMaxIndex13 = -1;\n        long currentMaxIndex14 = -1;\n   \
    \     long currentMaxIndex15 = -1;\n        long currentMaxIndex16 = -1;\n   \
    \     long currentMaxIndex17 = -1;\n        long currentMaxIndex18 = -1;\n   \
    \     long currentMaxIndex19 = -1;\n        long currentMaxIndex20 = -1;\n   \
    \     long currentMaxIndex21 = -1;\n        long currentMaxIndex22 = -1;\n   \
    \     long currentMaxIndex23 = -1;\n        long currentMaxIndex24 = -1;\n   \
    \     long currentMaxIndex25 = -1;\n        long currentMaxIndex26 = -1;\n   \
    \     long currentMaxIndex27 = -1;\n        long currentMaxIndex28 = -1;\n   \
    \     long currentMaxIndex29 = -1;\n        long currentMaxIndex30 = -1;\n   \
    \     long currentMaxIndex31 = -1;\n        long currentMaxIndex32 = -1;\n   \
    \     long currentMaxIndex33 = -1;\n        long currentMaxIndex34 = -1;\n   \
    \     long currentMaxIndex35 = -1;\n        long currentMaxIndex36 = -1;\n   \
    \     long currentMaxIndex37 = -1;\n        long currentMaxIndex38 = -1;\n   \
    \     long currentMaxIndex39 = -1;\n        long currentMaxIndex40 = -1;\n   \
    \     long currentMaxIndex41 = -1;\n        long currentMaxIndex42 = -1;\n   \
    \     long currentMaxIndex43 = -1;\n        long currentMaxIndex44 = -1;\n   \
    \     long currentMaxIndex45 = -1;\n        long currentMaxIndex46 = -1;\n   \
    \     long currentMaxIndex47 = -1;\n        long currentMaxIndex48 = -1;\n   \
    \     long currentMaxIndex49 = -1;\n        long currentMaxIndex50 = -1;\n   \
    \     long currentMaxIndex51 = -1;\n        long currentMaxIndex52 = -1;\n   \
    \     long currentMaxIndex53 = -1;\n        long currentMaxIndex54 = -1;\n   \
    \     long currentMaxIndex55 = -1;\n        long currentMax", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentMaxIndex = 0;\n        bool isMax = true;\n        foreach\
    \ (long number in numbers) {\n            if (number > max) {\n              \
    \  max = number;\n                currentMax = number;\n                currentMaxIndex\
    \ = numbers.IndexOf(number);\n            }\n            if (number == max) {\n\
    \                isMax = true;\n            }\n            else {\n          \
    \      isMax = false;\n            }\n            result.Add(number);\n      \
    \  }\n        if (isMax) {\n            result.Add(max);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long current = numbers.First();\n        long previous = current;\n\
    \        long currentMax = current;\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMax) {\n                result.Add(currentMax);\n\
    \                currentMax = number;\n            }\n            max = Math.Max(max,\
    \ currentMax);\n            previous = current;\n            current = number;\n\
    \        }\n        result.Add(currentMax);\n        result.Add(max);\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        long currentMax = 0;\n        long currentNumber = 0;\n  \
    \      foreach (long number in numbers) {\n            currentNumber = number;\n\
    \            currentMax = number;\n            while (currentNumber > currentMax)\
    \ {\n                currentMax = currentNumber;\n                currentNumber\
    \ -= 1;\n            }\n            result.Add(currentMax);\n        }\n     \
    \   return result;", "        List<long> rollingMax = new List<long>();\n    \
    \    long rollingMaxElement = numbers.First();\n        rollingMax.Add(rollingMaxElement);\n\
    \        numbers.Remove(rollingMaxElement);\n        foreach (long number in numbers)\
    \ {\n            if (number > rollingMaxElement) {\n                rollingMaxElement\
    \ = number;\n                rollingMax.Add(rollingMaxElement);\n            }\n\
    \        }\n        return rollingMax;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentSum = 0;\n        long currentSumOfSquares = 0;\n       \
    \ long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquares = 0;\n        long currentSumOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquares = 0;\n  \
    \      long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n\
    \        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSum", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = numbers.First();\n        long\
    \ currentMaxIndex = -1;\n        foreach (long number in numbers) {\n        \
    \    if (number > currentMax) {\n                currentMax = number;\n      \
    \          currentMaxIndex = result.Count;\n            }\n            if (number\
    \ == currentMax) {\n                result.Add(number);\n            }\n     \
    \   }\n        if (currentMaxIndex > 0) {\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long currentMax =\
    \ numbers[0];\n        long currentMaxIndex = 0;\n        long currentMaxValue\
    \ = numbers[0];\n        foreach (long number in numbers) {\n            if (number\
    \ > currentMax) {\n                currentMax = number;\n                currentMaxIndex\
    \ = maxIndex;\n            }\n            if (number > currentMaxValue) {\n  \
    \              currentMaxValue = number;\n            }\n            if (number\
    \ == currentMax) {\n                maxIndex = currentMaxIndex;\n            }\n\
    \        }\n        result.Add(currentMax);\n        result.Add(currentMaxValue);\n\
    \        result.Add(maxIndex);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        foreach (long number in numbers) {\n\
    \            currentNumber = number;\n            currentMax = number;\n     \
    \       while (currentNumber > 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber--;\n            }\n         \
    \   result.Add(currentMax);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long maxValue = numbers.Max();\n       \
    \ long currentMax = maxValue;\n        long currentMaxIndex = 0;\n        long\
    \ currentMaxIndex2 = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4\
    \ = 0;\n        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n\
    \        long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n    \
    \    long currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n       \
    \ long currentMaxIndex11 = 0;\n        long currentMaxIndex12 = 0;\n        long\
    \ currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15\
    \ = 0;\n        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 =\
    \ 0;\n        long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n\
    \        long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n  \
    \      long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n    \
    \    long currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n      \
    \  long currentMaxIndex26 = 0;\n        long currentMaxIndex27 = 0;\n        long\
    \ currentMaxIndex28 = 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30\
    \ = 0;\n        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 =\
    \ 0;\n        long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n\
    \        long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n  \
    \      long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n    \
    \    long currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n      \
    \  long currentMaxIndex41 = 0;\n        long currentMaxIndex42 = 0;\n        long\
    \ currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45\
    \ = 0;\n        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 =\
    \ 0;\n        long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n\
    \        long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n  \
    \      long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n    \
    \    long currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n      \
    \  long currentMaxIndex56 = 0;\n        long currentMaxIndex57 = 0;\n        long\
    \ currentMaxIndex58 = 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60\
    \ = 0;\n        long currentMaxIndex61 = 0;\n        long current", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long curMax = 0;\n\
    \        long curMaxIndex = 0;\n        long curMaxValue = numbers[0];\n     \
    \   long curMaxIndexValue = numbers[0];\n        bool isMax = true;\n        for\
    \ (int i = 0; i < numbers.Count; i++) {\n            if (numbers[i] > curMaxValue)\
    \ {\n                max = curMaxValue;\n                curMaxIndex = i;\n  \
    \              curMaxValue = numbers[i];\n                curMaxIndexValue = numbers[i];\n\
    \                isMax = true;\n            } else if (numbers[i] == curMaxValue)\
    \ {\n                isMax = false;\n            }\n            if (isMax) {\n\
    \                result.Add(curMaxValue);\n            }\n        }\n        return\
    \ result;", "        List<long> max = new List<long>();\n        long maxValue\
    \ = numbers.First();\n        long currentMaxValue = maxValue;\n        long currentMaxIndex\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = max.Count;\n            }\n            max.Add(number);\n        }\n     \
    \   max.Add(currentMaxValue);\n        max.Add(currentMaxIndex);\n        return\
    \ max;", "        List<long> result = new List<long>();\n        long max = 0;\n\
    \        long currentMax = 0;\n        long currentMaxIndex = 0;\n        long\
    \ currentMaxValue = numbers[0];\n        foreach (long number in numbers) {\n\
    \            if (number > currentMaxValue) {\n                currentMaxValue\
    \ = number;\n                currentMaxIndex = currentMaxValue - currentMax;\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \                currentMax = number;\n                currentMaxValue = number;\n\
    \                currentMaxIndex = currentMaxValue - currentMax;\n           \
    \ }\n            result.Add(number);\n        }\n        result.Add(max);\n  \
    \      return result;", "        List<long> max = new List<long>();\n        long\
    \ maxElement = numbers.First();\n        long currentMax = maxElement;\n     \
    \   foreach (long number in numbers) {\n            if (number > currentMax) {\n\
    \                currentMax = number;\n            }\n            max.Add(currentMax);\n\
    \        }\n        return max;", "        List<long> rollingMax = new List<long>();\n\
    \        long rollingMaxValue = numbers.First();\n        rollingMax.Add(rollingMaxValue);\n\
    \        foreach (long number in numbers) {\n            if (number > rollingMaxValue)\
    \ {\n                rollingMaxValue = number;\n                rollingMax.Add(rollingMaxValue);\n\
    \            }\n        }\n        return rollingMax;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.Index", "        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfSquareOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferences =\
    \ 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifference", "        List<long>\
    \ max = new List<long>();\n        long maxValue = numbers.First();\n        long\
    \ currentMaxValue = maxValue;\n        long currentMaxIndex = 0;\n        foreach\
    \ (long number in numbers) {\n            if (number > currentMaxValue) {\n  \
    \              currentMaxValue = number;\n                currentMaxIndex = maxIndex;\n\
    \            }\n            if (number == currentMaxValue) {\n               \
    \ maxIndex++;\n            }\n        }\n        max.Add(currentMaxValue);\n \
    \       max.Add(currentMaxIndex);\n        return max;", "        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2\
    \ = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n\
    \        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n    \
    \    long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n        long\
    \ currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n        long currentMaxIndex11\
    \ = 0;\n        long currentMaxIndex12 = 0;\n        long currentMaxIndex13 =\
    \ 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n\
    \        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n  \
    \      long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n    \
    \    long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n      \
    \  long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long\
    \ currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26\
    \ = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 =\
    \ 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n\
    \        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n  \
    \      long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n    \
    \    long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n      \
    \  long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n        long\
    \ currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n        long currentMaxIndex41\
    \ = 0;\n        long currentMaxIndex42 = 0;\n        long currentMaxIndex43 =\
    \ 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n\
    \        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n  \
    \      long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n    \
    \    long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n      \
    \  long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long\
    \ currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56\
    \ = 0;\n        long currentMaxIndex57 = 0;\n        long currentMaxIndex58 =\
    \ 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n\
    \        long currentMaxIndex61 = 0;\n        long current", "        var rollingMax\
    \ = new List<long>();\n        var rollingMaxIndex = 0;\n        var rollingMaxValue\
    \ = numbers.First();\n        var rollingMaxIndexes = new List<int>();\n     \
    \   while (rollingMaxIndex < numbers.Count) {\n            var rollingMaxIndex\
    \ = rollingMaxIndex + 1;\n            var rollingMaxValue = numbers.ElementAt(rollingMaxIndex);\n\
    \            if (rollingMaxValue > rollingMaxValue) {\n                rollingMaxValue\
    \ = rollingMaxValue;\n            }\n            rollingMaxIndexes.Add(rollingMaxIndex);\n\
    \            if (rollingMaxIndex < numbers.Count) {\n                rollingMaxValue\
    \ = numbers.ElementAt(rollingMaxIndex);\n                if (rollingMaxValue >\
    \ rollingMaxValue) {\n                    rollingMaxValue = rollingMaxValue;\n\
    \                }\n                rollingMaxIndexes.Add(rollingMaxIndex);\n\
    \            }\n            rollingMax.Add(rollingMaxValue);\n        }\n    \
    \    return rollingMax;", "        List<long> result = new List<long>();\n   \
    \     long maxValue = numbers.Max();\n        long currentMax = maxValue;\n  \
    \      long currentMaxIndex = 0;\n        long currentMaxIndex2 = 0;\n       \
    \ long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n        long\
    \ currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n        long currentMaxIndex7\
    \ = 0;\n        long currentMaxIndex8 = 0;\n        long currentMaxIndex9 = 0;\n\
    \        long currentMaxIndex10 = 0;\n        long currentMaxIndex11 = 0;\n  \
    \      long currentMaxIndex12 = 0;\n        long currentMaxIndex13 = 0;\n    \
    \    long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n      \
    \  long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n        long\
    \ currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n        long currentMaxIndex20\
    \ = 0;\n        long currentMaxIndex21 = 0;\n        long currentMaxIndex22 =\
    \ 0;\n        long currentMaxIndex23 = 0;\n        long currentMaxIndex24 = 0;\n\
    \        long currentMaxIndex25 = 0;\n        long currentMaxIndex26 = 0;\n  \
    \      long currentMaxIndex27 = 0;\n        long currentMaxIndex28 = 0;\n    \
    \    long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n      \
    \  long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n        long\
    \ currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n        long currentMaxIndex35\
    \ = 0;\n        long currentMaxIndex36 = 0;\n        long currentMaxIndex37 =\
    \ 0;\n        long currentMaxIndex38 = 0;\n        long currentMaxIndex39 = 0;\n\
    \        long currentMaxIndex40 = 0;\n        long currentMaxIndex41 = 0;\n  \
    \      long currentMaxIndex42 = 0;\n        long currentMaxIndex43 = 0;\n    \
    \    long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n      \
    \  long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n        long\
    \ currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n        long currentMaxIndex50\
    \ = 0;\n        long currentMaxIndex51 = 0;\n        long currentMaxIndex52 =\
    \ 0;\n        long currentMaxIndex53 = 0;\n        long currentMaxIndex54 = 0;\n\
    \        long currentMaxIndex55 = 0;\n        long currentMaxIndex56 = 0;\n  \
    \      long currentMaxIndex57 = 0;\n        long currentMaxIndex58 = 0;\n    \
    \    long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n      \
    \  long currentMaxIndex61 = 0;\n        long current", "        List<long> max\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2\
    \ = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n\
    \        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n    \
    \    long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n        long\
    \ currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n        long currentMaxIndex11\
    \ = 0;\n        long currentMaxIndex12 = 0;\n        long currentMaxIndex13 =\
    \ 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n\
    \        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n  \
    \      long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n    \
    \    long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n      \
    \  long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long\
    \ currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26\
    \ = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 =\
    \ 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n\
    \        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n  \
    \      long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n    \
    \    long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n      \
    \  long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n        long\
    \ currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n        long currentMaxIndex41\
    \ = 0;\n        long currentMaxIndex42 = 0;\n        long currentMaxIndex43 =\
    \ 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n\
    \        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n  \
    \      long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n    \
    \    long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n      \
    \  long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long\
    \ currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56\
    \ = 0;\n        long currentMaxIndex57 = 0;\n        long currentMaxIndex58 =\
    \ 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n\
    \        long currentMaxIndex61 = 0;\n        long current", "        List<long>\
    \ result = new List<long>();\n        long maxValue = numbers.Max();\n       \
    \ long currentMax = maxValue;\n        long currentMaxIndex = 0;\n        long\
    \ currentMaxIndex2 = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4\
    \ = 0;\n        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n\
    \        long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n    \
    \    long currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n       \
    \ long currentMaxIndex11 = 0;\n        long currentMaxIndex12 = 0;\n        long\
    \ currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15\
    \ = 0;\n        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 =\
    \ 0;\n        long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n\
    \        long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n  \
    \      long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n    \
    \    long currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n      \
    \  long currentMaxIndex26 = 0;\n        long currentMaxIndex27 = 0;\n        long\
    \ currentMaxIndex28 = 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30\
    \ = 0;\n        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 =\
    \ 0;\n        long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n\
    \        long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n  \
    \      long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n    \
    \    long currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n      \
    \  long currentMaxIndex41 = 0;\n        long currentMaxIndex42 = 0;\n        long\
    \ currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45\
    \ = 0;\n        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 =\
    \ 0;\n        long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n\
    \        long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n  \
    \      long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n    \
    \    long currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n      \
    \  long currentMaxIndex56 = 0;\n        long currentMaxIndex57 = 0;\n        long\
    \ currentMaxIndex58 = 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60\
    \ = 0;\n        long currentMaxIndex61 = 0;\n        long current", "        var\
    \ rollingMax = new List<long>();\n        var rollingMaxIndex = 0;\n        var\
    \ rollingMaxValue = numbers.First();\n        var rollingMaxIndexes = new List<int>();\n\
    \        rollingMaxIndexes.Add(0);\n        while (rollingMaxIndex < numbers.Count)\
    \ {\n            var rollingMaxValue = numbers.ElementAt(rollingMaxIndex);\n \
    \           if (rollingMaxValue > rollingMaxValue) {\n                rollingMaxValue\
    \ = rollingMaxValue;\n            }\n            rollingMax.Add(rollingMaxValue);\n\
    \            rollingMaxIndexes.Add(rollingMaxIndex);\n            rollingMaxIndex++;\n\
    \        }\n        var rollingMaxIndexes = new List<int>();\n        rollingMaxIndexes.Add(0);\n\
    \        while (rollingMaxIndex < numbers.Count) {\n            var rollingMaxValue\
    \ = numbers.ElementAt(rollingMaxIndex);\n            if (rollingMaxValue > rollingMaxValue)\
    \ {\n                rollingMaxValue = rollingMaxValue;\n            }\n     \
    \       rollingMax.Add(rollingMaxValue);\n            rollingMaxIndexes.Add(rollingMaxIndex);\n\
    \            rollingMaxIndex++;\n        }\n        return rollingMax;", "   \
    \     List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentNumber = 0;\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMax) {\n                currentMax\
    \ = number;\n                currentNumber = number;\n            }\n        \
    \    else {\n                currentNumber = number;\n            }\n        \
    \    if (number > max) {\n                max = number;\n            }\n     \
    \       result.Add(number);\n        }\n        result.Add(max);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long maxValue\
    \ = numbers.Max();\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxIndex2 = 0;\n        long currentMaxIndex3 = 0;\n\
    \        long currentMaxIndex4 = 0;\n        long currentMaxIndex5 = 0;\n    \
    \    long currentMaxIndex6 = 0;\n        long currentMaxIndex7 = 0;\n        long\
    \ currentMaxIndex8 = 0;\n        long currentMaxIndex9 = 0;\n        long currentMaxIndex10\
    \ = 0;\n        long currentMaxIndex11 = 0;\n        long currentMaxIndex12 =\
    \ 0;\n        long currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n\
    \        long currentMaxIndex15 = 0;\n        long currentMaxIndex16 = 0;\n  \
    \      long currentMaxIndex17 = 0;\n        long currentMaxIndex18 = 0;\n    \
    \    long currentMaxIndex19 = 0;\n        long currentMaxIndex20 = 0;\n      \
    \  long currentMaxIndex21 = 0;\n        long currentMaxIndex22 = 0;\n        long\
    \ currentMaxIndex23 = 0;\n        long currentMaxIndex24 = 0;\n        long currentMaxIndex25\
    \ = 0;\n        long currentMaxIndex26 = 0;\n        long currentMaxIndex27 =\
    \ 0;\n        long currentMaxIndex28 = 0;\n        long currentMaxIndex29 = 0;\n\
    \        long currentMaxIndex30 = 0;\n        long currentMaxIndex31 = 0;\n  \
    \      long currentMaxIndex32 = 0;\n        long currentMaxIndex33 = 0;\n    \
    \    long currentMaxIndex34 = 0;\n        long currentMaxIndex35 = 0;\n      \
    \  long currentMaxIndex36 = 0;\n        long currentMaxIndex37 = 0;\n        long\
    \ currentMaxIndex38 = 0;\n        long currentMaxIndex39 = 0;\n        long currentMaxIndex40\
    \ = 0;\n        long currentMaxIndex41 = 0;\n        long currentMaxIndex42 =\
    \ 0;\n        long currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n\
    \        long currentMaxIndex45 = 0;\n        long currentMaxIndex46 = 0;\n  \
    \      long currentMaxIndex47 = 0;\n        long currentMaxIndex48 = 0;\n    \
    \    long currentMaxIndex49 = 0;\n        long currentMaxIndex50 = 0;\n      \
    \  long currentMaxIndex51 = 0;\n        long currentMaxIndex52 = 0;\n        long\
    \ currentMaxIndex53 = 0;\n        long currentMaxIndex54 = 0;\n        long currentMaxIndex55\
    \ = 0;\n        long currentMaxIndex56 = 0;\n        long currentMaxIndex57 =\
    \ 0;\n        long currentMaxIndex58 = 0;\n        long currentMaxIndex59 = 0;\n\
    \        long currentMaxIndex60 = 0;\n        long currentMaxIndex61 = 0;\n  \
    \      long current", "        List<long> rollingMax = new List<long>();\n   \
    \     long max = 0;\n        long currentMax = 0;\n        long currentNumber\
    \ = 0;\n        long currentNumber2 = 0;\n        long currentNumber3 = 0;\n \
    \       long currentNumber4 = 0;\n        long currentNumber5 = 0;\n        long\
    \ currentNumber6 = 0;\n        long currentNumber7 = 0;\n        long currentNumber8\
    \ = 0;\n        long currentNumber9 = 0;\n        long currentNumber10 = 0;\n\
    \        long currentNumber11 = 0;\n        long currentNumber12 = 0;\n      \
    \  long currentNumber13 = 0;\n        long currentNumber14 = 0;\n        long\
    \ currentNumber15 = 0;\n        long currentNumber16 = 0;\n        long currentNumber17\
    \ = 0;\n        long currentNumber18 = 0;\n        long currentNumber19 = 0;\n\
    \        long currentNumber20 = 0;\n        long currentNumber21 = 0;\n      \
    \  long currentNumber22 = 0;\n        long currentNumber23 = 0;\n        long\
    \ currentNumber24 = 0;\n        long currentNumber25 = 0;\n        long currentNumber26\
    \ = 0;\n        long currentNumber27 = 0;\n        long currentNumber28 = 0;\n\
    \        long currentNumber29 = 0;\n        long currentNumber30 = 0;\n      \
    \  long currentNumber31 = 0;\n        long currentNumber32 = 0;\n        long\
    \ currentNumber33 = 0;\n        long currentNumber34 = 0;\n        long currentNumber35\
    \ = 0;\n        long currentNumber36 = 0;\n        long currentNumber37 = 0;\n\
    \        long currentNumber38 = 0;\n        long currentNumber39 = 0;\n      \
    \  long currentNumber40 = 0;\n        long currentNumber41 = 0;\n        long\
    \ currentNumber42 = 0;\n        long currentNumber43 = 0;\n        long currentNumber44\
    \ = 0;\n        long currentNumber45 = 0;\n        long currentNumber46 = 0;\n\
    \        long currentNumber47 = 0;\n        long currentNumber48 = 0;\n      \
    \  long currentNumber49 = 0;\n        long currentNumber50 = 0;\n        long\
    \ currentNumber51 = 0;\n        long currentNumber52 = 0;\n        long currentNumber53\
    \ = 0;\n        long currentNumber54 = 0;\n        long currentNumber55 = 0;\n\
    \        long currentNumber56 = 0;\n        long currentNumber57 = 0;\n      \
    \  long currentNumber58 = 0;\n        long currentNumber59 = 0;\n        long\
    \ currentNumber60 = 0;\n        long currentNumber61 = 0;\n        long currentNumber62\
    \ = 0;\n        long currentNumber63 = 0;\n        long currentNumber64 = 0;\n\
    \        long currentNumber65 = 0;\n        long currentNumber66 = 0;\n      \
    \  long currentNumber67 = 0;\n        long currentNumber68 = 0;\n        long\
    \ currentNumber69 = 0;\n        long currentNumber70 = 0;\n        long currentNumber",
  "        List<long> max = new List<long>();\n        long maxElement = numbers.First();\n\
    \        long currentElement = numbers.First();\n        long currentMax = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n            }\n            if (number\
    \ > maxElement) {\n                maxElement = number;\n            }\n     \
    \       if (number > currentElement) {\n                currentElement = number;\n\
    \            }\n        }\n        max.Add(maxElement);\n        max.Add(currentMax);\n\
    \        max.Add(currentElement);\n        return max;", "        List<long> rollingMax\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfPowers = 0;\n        long currentSumOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowers = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowers = 0;\n\
    \        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares =\
    \ 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers",
  "        List<long> max = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndexValue = 0;\n        bool found = false;\n        foreach\
    \ (long number in numbers) {\n            if (number == currentMax) {\n      \
    \          found = true;\n                currentMaxIndex++;\n               \
    \ currentMaxIndexValue = number;\n            }\n            if (found) {\n  \
    \              max.Add(currentMaxIndex);\n                max.Add(currentMaxIndexValue);\n\
    \                found = false;\n            }\n            currentMax = number;\n\
    \        }\n        return max;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 =\
    \ 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = 0;\n        long currentMaxValueIndex\
    \ = 0;\n        long currentMaxValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number > max)\
    \ {\n                max = number;\n                currentMax = max;\n      \
    \          currentMaxIndex = numbers.IndexOf(number);\n                currentMaxValue\
    \ = number;\n                currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \                currentMaxValueValue = currentMaxValue;\n                currentMaxValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValue);\n            }\n            if (number\
    \ == currentMaxValue) {\n                currentMaxValueValue++;\n           \
    \     if (currentMaxValueValue > currentMaxValueIndex) {\n                   \
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n                 \
    \   currentMaxValueValue = currentMaxValue;\n                    currentMaxValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValue);\n                }\n            }\n\
    \            result.Add(currentMaxValue);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ maxIndex = 0;\n        foreach (long number in numbers) {\n            if (number\
    \ > max) {\n                max = number;\n                maxIndex = result.Count;\n\
    \            }\n            result.Add(number);\n        }\n        result.Add(max);\n\
    \        result.Add(maxIndex);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long cur = 0;\n        foreach\
    \ (long n in numbers) {\n            if (n > max) {\n                max = n;\n\
    \                cur = n;\n            }\n            else if (n == max) {\n \
    \               cur++;\n            }\n            result.Add(cur);\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long maxIndex = 0;\n        long currentMax = 0;\n\
    \        long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n\
    \            if (number > max) {\n                max = number;\n            \
    \    maxIndex = currentMaxIndex;\n            }\n            currentMax = number;\n\
    \            currentMaxIndex = result.Count;\n            result.Add(number);\n\
    \        }\n        if (maxIndex == currentMaxIndex) {\n            result.Add(max);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 =\
    \ 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n    \
    \    foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = result.Count;\n            }\n            if (number > max) {\n          \
    \      max = number;\n            }\n            if (number == currentMaxValue)\
    \ {\n                currentMaxIndex++;\n            }\n            result.Add(number);\n\
    \        }\n        result.Add(max);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentNumber = 0;\n        long currentSum = 0;\n        foreach\
    \ (long number in numbers) {\n            currentNumber = number;\n          \
    \  currentSum = number;\n            while (currentSum > 0) {\n              \
    \  currentSum -= currentNumber;\n                currentMax = currentNumber;\n\
    \                result.Add(currentMax);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long currentMax = 0;\n        long currentMaxIndex = 0;\n      \
    \  long currentMaxValue = numbers[0];\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = currentMaxValueIndex;\n            }\n            if (number > max) {\n  \
    \              max = number;\n            }\n        }\n        result.Add(max);\n\
    \        foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = currentMaxValueIndex;\n            }\n            if (number > max) {\n  \
    \              max = number;\n            }\n            if (number == currentMaxValue)\
    \ {\n                currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \                result.Add(currentMaxValue);\n            }\n        }\n    \
    \    return result;", "        var rollingMax = new List<long>();\n        var\
    \ rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n     \
    \   var rollingMaxTimes = 1;\n        var rollingMaxTimesIndex = 0;\n        var\
    \ rollingMaxTimesValue = numbers.First();\n        var rollingMaxTimesTimes =\
    \ 1;\n        var rollingMaxTimesTimesIndex = 0;\n        var rollingMaxTimesTimesValue\
    \ = numbers.First();\n        var rollingMaxTimesTimesTimes = 1;\n        var\
    \ rollingMaxTimesTimesTimesIndex = 0;\n        var rollingMaxTimesTimesTimesValue\
    \ = numbers.First();\n        var rollingMaxTimesTimesTimesTimesIndex = 0;\n \
    \       var rollingMaxTimesTimesTimesTimesValue = numbers.First();\n        var\
    \ rollingMaxTimesTimesTimesTimesTimesIndex = 0;\n        var rollingMaxTimesTimesTimesTimesTimesValue\
    \ = numbers.First();\n        var rollingMaxTimesTimesTimesTimesTimesTimesIndex\
    \ = 0;\n        var rollingMaxTimesTimesTimesTimesTimesTimesValue = numbers.First();\n\
    \        var rollingMaxTimesTimesTimesTimesTimesTimesTimesIndex = 0;\n       \
    \ var rollingMaxTimesTimesTimesTimesTimesTimesTimesValue = numbers.First();\n\
    \        var rollingMaxTimesTimesTimesTimesTimesTimesTimesTimesIndex = 0;\n  \
    \      var rollingMaxTimesTimesTimesTimesTimesTimesTimesTimesValue = numbers.First();\n\
    \        var rollingMaxTimesTimesTimesTimesTimesTimesTimesTimesTimesIndex = 0;\n\
    \        var rollingMaxTimesTimesTimesTimesTimesTimesTimesTimesTimesValue = numbers.First();\n\
    \        var rollingMaxTimesTimesTimesTimesTimesTimesTimesTimesTimesIndex = 0;\n\
    \        var rollingMaxTimesTimesTimesTimesTimesTimesTimesTimesTimesValue = numbers.First();\n\
    \        var rollingMaxTimesTimesTimesTimesTimesTimesTimesTimesTimesTimesIndex\
    \ = 0;\n        var rollingMaxTimesTimesTimesTimesTimesTimesTimesTimesTimesTimesValue\
    \ = numbers.First();\n        var rollingMaxTimesTimesTimesTimesTimesTimesTimesTimesTimesTimesTime",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        foreach (long number\
    \ in numbers) {\n            if (number > max) {\n                max = number;\n\
    \                currentMax = number;\n                currentMaxIndex = numbers.IndexOf(number);\n\
    \            }\n            else {\n                if (number == currentMax)\
    \ {\n                    currentMaxIndex++;\n                }\n             \
    \   else {\n                    result.Add(currentMax);\n                    currentMax\
    \ = number;\n                    currentMaxIndex = numbers.IndexOf(number);\n\
    \                }\n            }\n        }\n        result.Add(currentMax);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxValue = numbers[0];\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMaxValue) {\n               \
    \ currentMaxValue = number;\n                currentMaxIndex = currentMax;\n \
    \           }\n            if (number > max) {\n                max = number;\n\
    \            }\n            if (number == currentMaxValue) {\n               \
    \ currentMaxIndex++;\n            }\n            result.Add(currentMaxValue);\n\
    \        }\n        result.Add(max);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentNumber = 0;\n        foreach (long number in numbers)\
    \ {\n            currentNumber = number;\n            currentMax = number;\n \
    \           while (currentNumber != 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber = currentNumber / 2;\n      \
    \      }\n            result.Add(currentMax);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        foreach (long number in numbers) {\n            if\
    \ (number > max) {\n                max = number;\n                currentMax\
    \ = number;\n            }\n            else if (number == max) {\n          \
    \      currentMax++;\n            }\n            result.Add(currentMax);\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number > max)\
    \ {\n                max = number;\n                currentMax = number;\n   \
    \             currentMaxIndex = numbers.IndexOf(number);\n            }\n    \
    \        else if (number == max) {\n                currentMax = number;\n   \
    \             currentMaxIndex = numbers.IndexOf(number);\n            }\n    \
    \        else {\n                result.Add(max);\n                max = currentMax;\n\
    \                currentMax = number;\n                currentMaxIndex = numbers.IndexOf(number);\n\
    \            }\n        }\n        result.Add(max);\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentNumber = 0;\n        long currentSum =\
    \ 0;\n        long currentSumOfSquares = 0;\n        foreach (long number in numbers)\
    \ {\n            currentNumber = number;\n            currentSum = 0;\n      \
    \      currentSumOfSquares = 0;\n            while (currentNumber != 0) {\n  \
    \              currentSum += currentNumber;\n                currentSumOfSquares\
    \ += currentNumber * currentNumber;\n                currentNumber--;\n      \
    \      }\n            if (currentSum > currentMax) {\n                max = currentSum;\n\
    \                currentMax = currentSum;\n            }\n            if (currentSumOfSquares\
    \ > currentMax * currentMax) {\n                max = currentSumOfSquares;\n \
    \               currentMax = currentSumOfSquares;\n            }\n           \
    \ result.Add(max);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n\
    \            if (number > max) {\n                max = number;\n            \
    \    currentMax = number;\n                currentMaxIndex = numbers.IndexOf(number);\n\
    \            }\n            else if (number == max) {\n                currentMax\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \        }\n            else {\n                if (currentMaxIndex < numbers.IndexOf(number))\
    \ {\n                    currentMax = number;\n                    currentMaxIndex\
    \ = numbers.IndexOf(number);\n                }\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentSum = 0;\n        long currentSumOfSquares = 0;\n       \
    \ long currentSumOfPowers = 0;\n        long currentSumOfPowersOfSquares = 0;\n\
    \        long currentSumOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers = 0;\n       \
    \ long currentSumOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n        long\
    \ currentSumOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long currentMax = 0;\n        long currentNumber = 0;\n        foreach\
    \ (long number in numbers) {\n            if (number > currentMax) {\n       \
    \         currentMax = number;\n                currentNumber = number;\n    \
    \        }\n            else if (number == currentMax) {\n                currentNumber++;\n\
    \            }\n            else {\n                result.Add(currentMax);\n\
    \                currentMax = number;\n                currentNumber = number;\n\
    \            }\n        }\n        result.Add(currentMax);\n        return result;",
  "        List<long> result = new List<long>();\n        long max = numbers.Max();\n\
    \        long current = numbers.First();\n        long rollingMax = current;\n\
    \        bool found = false;\n        foreach (long number in numbers) {\n   \
    \         if (number > rollingMax) {\n                rollingMax = number;\n \
    \               found = true;\n            }\n            if (found) {\n     \
    \           result.Add(rollingMax);\n                found = false;\n        \
    \    }\n        }\n        return result;", "        List<long> rollingMax = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareRoots = 0;\n        long currentSumOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquares = 0;\n        long currentSumOfPowersOfSquareRoots\
    \ = 0;\n        long currentSumOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfSquareRoots = 0;\n        long\
    \ currentSumOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquareRoots = 0;\n  \
    \      long currentSumOfPowersOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfSquareRoots =\
    \ 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n \
    \       long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquareRoots\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquareRoots\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquareRoots\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMaxValue = maxValue;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();", "   \
    \     List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndexValue = numbers.First();\n        long currentMaxIndexValue2\
    \ = numbers.First();\n        long currentMaxIndexValue3 = numbers.First();\n\
    \        long currentMaxIndexValue4 = numbers.First();\n        long currentMaxIndexValue5\
    \ = numbers.First();\n        long currentMaxIndexValue6 = numbers.First();\n\
    \        long currentMaxIndexValue7 = numbers.First();\n        long currentMaxIndexValue8\
    \ = numbers.First();\n        long currentMaxIndexValue9 = numbers.First();\n\
    \        long currentMaxIndexValue10 = numbers.First();\n        long currentMaxIndexValue11\
    \ = numbers.First();\n        long currentMaxIndexValue12 = numbers.First();\n\
    \        long currentMaxIndexValue13 = numbers.First();\n        long currentMaxIndexValue14\
    \ = numbers.First();\n        long currentMaxIndexValue15 = numbers.First();\n\
    \        long currentMaxIndexValue16 = numbers.First();\n        long currentMaxIndexValue17\
    \ = numbers.First();\n        long currentMaxIndexValue18 = numbers.First();\n\
    \        long currentMaxIndexValue19 = numbers.First();\n        long currentMaxIndexValue20\
    \ = numbers.First();\n        long currentMaxIndexValue21 = numbers.First();\n\
    \        long currentMaxIndexValue22 = numbers.First();\n        long currentMaxIndexValue23\
    \ = numbers.First();\n        long currentMaxIndexValue24 = numbers.First();\n\
    \        long currentMaxIndexValue25 = numbers.First();\n        long currentMaxIndexValue26\
    \ = numbers.First();\n        long currentMaxIndexValue27 = numbers.First();\n\
    \        long currentMaxIndexValue28 = numbers.First();\n        long currentMaxIndexValue29\
    \ = numbers.First();\n        long currentMaxIndexValue30 = numbers.First();\n\
    \        long currentMaxIndexValue31 = numbers.First();\n        long currentMaxIndexValue32\
    \ = numbers.First();\n        long currentMaxIndexValue33 = numbers.First();\n\
    \        long currentMaxIndexValue34 = numbers.First();\n        long currentMaxIndexValue35\
    \ = numbers.First();\n        long currentMaxIndexValue36 = numbers.First();\n\
    \        long currentMaxIndexValue37 = numbers.First();\n        long currentMaxIndexValue38\
    \ = numbers.First();\n        long currentMaxIndexValue39 = numbers.First();\n\
    \        long currentMaxIndexValue40 = numbers.First();\n        long currentMaxIndexValue41\
    \ = numbers.First();\n", "        List<long> rollingMax = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            currentNumber\
    \ = number;\n            currentMax = number;\n            rollingMax.Add(number);\n\
    \            while (currentNumber != 0) {\n                currentNumber = currentNumber\
    \ / 2;\n                currentMax = Math.Max(currentMax, currentNumber);\n  \
    \              rollingMax.Add(currentMax);\n            }\n        }\n       \
    \ return rollingMax;", "        List<long> result = new List<long>();\n      \
    \  long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex =\
    \ 0;\n        long currentMaxValue = numbers[0];\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMaxValue) {\n               \
    \ currentMaxValue = number;\n                currentMaxIndex = currentMax;\n \
    \           }\n            if (number > max) {\n                max = number;\n\
    \                currentMax = number;\n                currentMaxIndex = currentMax;\n\
    \            }\n            if (number == currentMaxValue) {\n               \
    \ currentMaxIndex++;\n            }\n            result.Add(currentMaxIndex);\n\
    \        }\n        return result;", "        var rollingMax = new List<long>();\n\
    \        var rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n\
    \        var rollingMaxIndexes = new List<int>();\n        rollingMaxIndexes.Add(0);\n\
    \        while (rollingMaxIndex < numbers.Count) {\n            var rollingMaxIndexes\
    \ = new List<int>();\n            rollingMaxIndexes.Add(0);\n            while\
    \ (rollingMaxIndex < numbers.Count && rollingMaxIndexes.Count < numbers.Count)\
    \ {\n                var rollingMaxValue = numbers.ElementAt(rollingMaxIndex);\n\
    \                var rollingMaxIndexes = new List<int>();\n                rollingMaxIndexes.Add(0);\n\
    \                while (rollingMaxIndex < numbers.Count && rollingMaxIndexes.Count\
    \ < numbers.Count) {\n                    var rollingMaxIndexesCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopyCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopyCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopyCopyCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopyCopyCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopyCopyCopyCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopyCopyCopyCopyCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopyCopyCopyCopyCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopyCopyCopyCopyCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = rollingMaxIndexes.ToArray();\n                    var rollingMaxIndexesCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = rollingMaxIndexes.ToArray();\n                    var rollingMaxIndexesCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = rollingMaxIndexes.ToArray();\n                    var rollingMaxIndexesCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = rollingMaxIndexes.ToArray();\n                    var rollingMaxIndex", " \
    \       List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = -1;\n   \
    \     long currentMaxIndex2 = -1;\n        long currentMaxIndex3 = -1;\n     \
    \   long currentMaxIndex4 = -1;\n        long currentMaxIndex5 = -1;\n       \
    \ long currentMaxIndex6 = -1;\n        long currentMaxIndex7 = -1;\n        long\
    \ currentMaxIndex8 = -1;\n        long currentMaxIndex9 = -1;\n        long currentMaxIndex10\
    \ = -1;\n        long currentMaxIndex11 = -1;\n        long currentMaxIndex12\
    \ = -1;\n        long currentMaxIndex13 = -1;\n        long currentMaxIndex14\
    \ = -1;\n        long currentMaxIndex15 = -1;\n        long currentMaxIndex16\
    \ = -1;\n        long currentMaxIndex17 = -1;\n        long currentMaxIndex18\
    \ = -1;\n        long currentMaxIndex19 = -1;\n        long currentMaxIndex20\
    \ = -1;\n        long currentMaxIndex21 = -1;\n        long currentMaxIndex22\
    \ = -1;\n        long currentMaxIndex23 = -1;\n        long currentMaxIndex24\
    \ = -1;\n        long currentMaxIndex25 = -1;\n        long currentMaxIndex26\
    \ = -1;\n        long currentMaxIndex27 = -1;\n        long currentMaxIndex28\
    \ = -1;\n        long currentMaxIndex29 = -1;\n        long currentMaxIndex30\
    \ = -1;\n        long currentMaxIndex31 = -1;\n        long currentMaxIndex32\
    \ = -1;\n        long currentMaxIndex33 = -1;\n        long currentMaxIndex34\
    \ = -1;\n        long currentMaxIndex35 = -1;\n        long currentMaxIndex36\
    \ = -1;\n        long currentMaxIndex37 = -1;\n        long currentMaxIndex38\
    \ = -1;\n        long currentMaxIndex39 = -1;\n        long currentMaxIndex40\
    \ = -1;\n        long currentMaxIndex41 = -1;\n        long currentMaxIndex42\
    \ = -1;\n        long currentMaxIndex43 = -1;\n        long currentMaxIndex44\
    \ = -1;\n        long currentMaxIndex45 = -1;\n        long currentMaxIndex46\
    \ = -1;\n        long currentMaxIndex47 = -1;\n        long currentMaxIndex48\
    \ = -1;\n        long currentMaxIndex49 = -1;\n        long currentMaxIndex50\
    \ = -1;\n        long currentMaxIndex51 = -1;\n        long currentMaxIndex52\
    \ = -1;\n        long currentMaxIndex53 = -1;\n        long currentMaxIndex54\
    \ = -1;\n        long currentMaxIndex55 = -1;\n        long currentMax", "   \
    \     List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMaxValue = maxValue;\n        long currentMaxIndex = 0;\n\
    \        long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 =\
    \ 0;\n        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4\
    \ = 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentNumber = 0;\n        foreach (long number\
    \ in numbers) {\n            currentNumber = number;\n            currentMax =\
    \ number;\n            while (currentNumber != 0) {\n                currentMax\
    \ = Math.Max(currentMax, currentNumber);\n                currentNumber = currentNumber\
    \ / 2;\n            }\n            result.Add(currentMax);\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        long currentMax = 0;\n        long currentNumber = 0;\n  \
    \      foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                currentNumber = number;\n\
    \            }\n            else if (number == currentMax) {\n               \
    \ currentNumber++;\n            }\n            else {\n                result.Add(currentMax);\n\
    \                currentMax = number;\n                currentNumber = number;\n\
    \            }\n        }\n        result.Add(currentMax);\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue\
    \ = numbers[0];\n        long currentMaxValueIndex = numbers[0];\n        bool\
    \ isMax = true;\n        for (int i = 1; i < numbers.Count; i++) {\n         \
    \   long value = numbers[i];\n            if (value > currentMaxValue) {\n   \
    \             currentMaxValue = value;\n                currentMaxIndex = i;\n\
    \            }\n            if (value == currentMaxValue) {\n                currentMaxIndex++;\n\
    \            }\n            if (value > currentMaxValue) {\n                isMax\
    \ = false;\n            }\n            if (isMax) {\n                result.Add(currentMaxValue);\n\
    \                currentMaxValue = currentMaxIndex;\n                currentMaxIndex\
    \ = currentMaxValue;\n                currentMaxValue = numbers[i];\n        \
    \        currentMaxValueIndex = i;\n                isMax = true;\n          \
    \  }\n        }\n        result.Add(currentMaxValue);\n        result.Add(currentMaxIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long currentMax = 0;\n        long currentNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            currentNumber\
    \ = number;\n            currentMax = number;\n            while (currentNumber\
    \ != 0) {\n                currentMax = Math.Max(currentMax, currentNumber);\n\
    \                currentNumber = currentNumber / 10;\n            }\n        \
    \    result.Add(currentMax);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentMaxIndex = 0;\n        foreach (long number in numbers)\
    \ {\n            if (number > max) {\n                max = number;\n        \
    \        currentMax = number;\n                currentMaxIndex = numbers.IndexOf(number);\n\
    \            }\n            else {\n                currentMax = currentMax;\n\
    \                currentMaxIndex = currentMaxIndex;\n            }\n         \
    \   result.Add(currentMax);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue = numbers.First();\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndexInSequence = numbers.IndexOf(currentMaxValue, currentMaxValueIndex\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequence = numbers.IndexOf(currentMaxValue,\
    \ currentMaxValueIndexInSequence + 1);\n        long currentMaxValueIndexInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(currentMaxValue, currentMaxValueIndexInSequenceInSequence\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(currentMaxValue, currentMaxValueIndexInSequenceInSequenceInSequence\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(currentMaxValue, currentMaxValueIndexInSequenceInSequenceInSequenceInSequence\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(currentMaxValue, currentMaxValueIndexInSequenceInSequenceInSequenceInSequence\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(currentMaxValue, currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequence\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(currentMaxValue, currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequence\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(currentMaxValue, currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequence\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(currentMaxValue, currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(currentMaxValue, currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(currentMaxValue, currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequenceIn", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentMaxIndex = 0;\n        foreach (long number in numbers)\
    \ {\n            currentMax = number;\n            currentMaxIndex = 0;\n    \
    \        while (currentMaxIndex < numbers.Count && currentMax < numbers[currentMaxIndex])\
    \ {\n                currentMax = numbers[currentMaxIndex];\n                currentMaxIndex++;\n\
    \            }\n            result.Add(currentMax);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long currentMax = 0;\n        long currentMaxIndex = 0;\n      \
    \  long currentMaxValue = numbers[0];\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMaxValue) {\n                currentMaxValue\
    \ = number;\n                currentMaxIndex = result.Count;\n            }\n\
    \            if (number == currentMaxValue) {\n                currentMaxIndex++;\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \            }\n            result.Add(number);\n        }\n        result.Add(max);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       bool isMax = true;\n        long currentMaxIndexValue2 = 0;\n        long\
    \ currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4 = 0;\n      \
    \  long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6 = 0;\n\
    \        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8 =\
    \ 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        ", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long maxIndex = -1;\n\
    \        long current = 0;\n        foreach (long number in numbers) {\n     \
    \       if (number > max) {\n                max = number;\n                maxIndex\
    \ = current;\n            }\n            current = current + 1;\n        }\n \
    \       result.Add(max);\n        result.Add(maxIndex);\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ current = numbers.First();\n        long sum = 0;\n        foreach (long n in\
    \ numbers) {\n            sum += n;\n            if (sum > max) {\n          \
    \      max = sum;\n            }\n            result.Add(max);\n            current\
    \ = n;\n            sum = 0;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.Index", "        List<long> max = new\
    \ List<long>();\n        long maxElement = numbers.First();\n        long currentMaxElement\
    \ = maxElement;\n        foreach (long number in numbers) {\n            if (number\
    \ > maxElement) {\n                max.Add(currentMaxElement);\n             \
    \   currentMaxElement = number;\n            }\n            else if (number ==\
    \ maxElement) {\n                currentMaxElement = number;\n            }\n\
    \        }\n        max.Add(currentMaxElement);\n        return max;", "     \
    \   List<long> max = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndexValue = 0;\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMax) {\n                currentMax = number;\n\
    \                currentMaxIndex = currentMaxIndexValue;\n            }\n    \
    \        currentMaxIndex++;\n            currentMaxIndexValue = currentMaxIndex;\n\
    \        }\n        max.Add(currentMax);\n        numbers.RemoveAt(currentMaxIndex);\n\
    \        RollingMax(numbers, max, currentMax);\n        return max;", "      \
    \  List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ current = numbers.First();\n        long previous = numbers.First();\n     \
    \   foreach (long number in numbers) {\n            if (number > current) {\n\
    \                max = number;\n            }\n            else if (number ==\
    \ current) {\n                max = Math.Max(max, number);\n            }\n  \
    \          else {\n                if (max != 0) {\n                    result.Add(max);\n\
    \                    max = 0;\n                }\n                result.Add(number);\n\
    \            }\n            current = number;\n            previous = number;\n\
    \        }\n        if (max != 0) {\n            result.Add(max);\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long maxIndex = 0;\n        long currentMax = numbers.First();\n\
    \        long currentMaxIndex = numbers.First();\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMax) {\n                currentMax\
    \ = number;\n                currentMaxIndex = currentMaxIndex;\n            }\n\
    \            if (number > max) {\n                max = number;\n            \
    \    maxIndex = currentMaxIndex;\n            }\n            currentMaxIndex++;\n\
    \        }\n        result.Add(max);\n        result.Add(maxIndex);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long cur = numbers.First();\n        long curMax = numbers.First();\n\
    \        foreach (long n in numbers) {\n            if (n > cur) {\n         \
    \       result.Add(cur);\n                curMax = cur;\n                cur =\
    \ n;\n            }\n            else if (n == cur) {\n                curMax\
    \ = n;\n            }\n            else {\n                if (curMax < n) {\n\
    \                    result.Add(curMax);\n                    curMax = n;\n  \
    \              }\n                else {\n                    result.Add(n);\n\
    \                }\n            }\n        }\n        result.Add(curMax);\n  \
    \      return result;", "        List<long> max = new List<long>();\n        long\
    \ maxValue = numbers.Max();\n        long currentMax = maxValue;\n        long\
    \ currentSum = 0;\n        foreach (long number in numbers) {\n            currentSum\
    \ += number;\n            if (currentSum > currentMax) {\n                max.Add(currentMax);\n\
    \                currentMax = currentSum;\n            }\n        }\n        max.Add(currentMax);\n\
    \        return max;", "        List<long> result = new List<long>();\n      \
    \  long max = 0;\n        long currentMax = 0;\n        long currentSum = 0;\n\
    \        long currentCount = 0;\n        foreach (long number in numbers) {\n\
    \            currentCount += 1;\n            currentSum += number;\n         \
    \   if (currentSum > currentMax) {\n                currentMax = currentSum;\n\
    \            }\n            if (currentCount == numbers.Count) {\n           \
    \     result.Add(currentMax);\n                currentMax = 0;\n             \
    \   currentSum = 0;\n                currentCount = 0;\n            }\n      \
    \  }\n        return result;", "        List<long> rollingMax = new List<long>();\n\
    \        long rollingMaxElement = numbers.First();\n        long rollingMaxCount\
    \ = 1;\n        foreach (long number in numbers) {\n            if (number > rollingMaxElement)\
    \ {\n                rollingMax.Add(rollingMaxElement);\n                rollingMaxElement\
    \ = number;\n                rollingMaxCount = 1;\n            } else {\n    \
    \            rollingMaxCount++;\n            }\n        }\n        rollingMax.Add(rollingMaxElement);\n\
    \        return rollingMax;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 =\
    \ 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long max = numbers.Max();\n        long currentMax =\
    \ max;\n        long currentMaxIndex = -1;\n        long currentMaxValue = numbers.ElementAt(0);\n\
    \        long currentMaxValueIndex = -1;\n        bool isMax = true;\n       \
    \ for (int i = 1; i < numbers.Count; i++) {\n            long value = numbers.ElementAt(i);\n\
    \            if (value > currentMaxValue) {\n                currentMaxValue =\
    \ value;\n                currentMaxIndex = i;\n                currentMaxValueIndex\
    \ = i;\n                isMax = true;\n            } else if (value < currentMaxValue)\
    \ {\n                currentMaxValue = value;\n                currentMaxIndex\
    \ = i;\n                currentMaxValueIndex = i;\n                isMax = false;\n\
    \            }\n            if (isMax) {\n                result.Add(currentMaxValue);\n\
    \                currentMaxValue = currentMaxValue;\n                currentMaxIndex\
    \ = currentMaxIndex;\n                currentMaxValueIndex = currentMaxValueIndex;\n\
    \                isMax = true;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfPowers = 0;\n        long currentSumOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowers = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowers = 0;\n\
    \        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares =\
    \ 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSqu",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentNumber = 0;\n        foreach (long number\
    \ in numbers) {\n            currentNumber = number;\n            currentMax =\
    \ number;\n            while (currentNumber > 0) {\n                currentMax\
    \ = Math.Max(currentMax, currentNumber);\n                currentNumber--;\n \
    \           }\n            result.Add(currentMax);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long currentMax = 0;\n        long currentMaxIndex = 0;\n      \
    \  foreach (long number in numbers) {\n            currentMax = number;\n    \
    \        currentMaxIndex = 0;\n            while (currentMaxIndex < numbers.Count\
    \ - 1) {\n                currentMax += numbers[currentMaxIndex + 1];\n      \
    \          currentMaxIndex++;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        var rollingMax = new List<long>();\n\
    \        var rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n\
    \        var rollingMaxTimes = 0;\n        foreach (var number in numbers) {\n\
    \            if (number > rollingMaxValue) {\n                rollingMaxValue\
    \ = number;\n                rollingMaxTimes = 1;\n                rollingMax.Add(number);\n\
    \            }\n            else if (number == rollingMaxValue) {\n          \
    \      rollingMaxTimes++;\n            }\n            else {\n               \
    \ rollingMax.Add(rollingMaxValue);\n                rollingMaxValue = number;\n\
    \                rollingMaxTimes = 1;\n            }\n            if (rollingMaxTimes\
    \ == rollingMaxIndex) {\n                rollingMax.Add(rollingMaxValue);\n  \
    \              rollingMaxTimes = 1;\n            }\n            rollingMaxIndex++;\n\
    \        }\n        return rollingMax;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 =\
    \ 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfPowers = 0;\n        long currentSumOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers = 0;\n       \
    \ long currentSumOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n        long\
    \ currentSumOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n", "        List<long> result = new List<long>();\n        long maxValue\
    \ = numbers.Max();\n        long currentMax = maxValue;\n        long currentSum\
    \ = 0;\n        long currentSumOfSquares = 0;\n        foreach (long number in\
    \ numbers) {\n            currentSum += number;\n            currentSumOfSquares\
    \ += number * number;\n            if (currentSum > currentMax) {\n          \
    \      currentMax = currentSum;\n            }\n            if (currentSumOfSquares\
    \ > currentMax * currentMax) {\n                currentMax = currentSum;\n   \
    \         }\n            result.Add(currentMax);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentNumber = 0;\n        foreach (long number\
    \ in numbers) {\n            currentNumber = number;\n            currentMax =\
    \ number;\n            while (currentNumber != 0) {\n                currentMax\
    \ = Math.Max(currentMax, currentNumber);\n                currentNumber = currentNumber\
    \ / 2;\n            }\n            result.Add(currentMax);\n        }\n      \
    \  return result;", "        List<long> max = new List<long>();\n        long\
    \ maxNumber = 0;\n        long currentNumber = 0;\n        long currentMax = 0;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndex2 = 0;\n     \
    \   long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n        long\
    \ currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n        long currentMaxIndex7\
    \ = 0;\n        long currentMaxIndex8 = 0;\n        long currentMaxIndex9 = 0;\n\
    \        long currentMaxIndex10 = 0;\n        long currentMaxIndex11 = 0;\n  \
    \      long currentMaxIndex12 = 0;\n        long currentMaxIndex13 = 0;\n    \
    \    long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n      \
    \  long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n        long\
    \ currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n        long currentMaxIndex20\
    \ = 0;\n        long currentMaxIndex21 = 0;\n        long currentMaxIndex22 =\
    \ 0;\n        long currentMaxIndex23 = 0;\n        long currentMaxIndex24 = 0;\n\
    \        long currentMaxIndex25 = 0;\n        long currentMaxIndex26 = 0;\n  \
    \      long currentMaxIndex27 = 0;\n        long currentMaxIndex28 = 0;\n    \
    \    long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n      \
    \  long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n        long\
    \ currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n        long currentMaxIndex35\
    \ = 0;\n        long currentMaxIndex36 = 0;\n        long currentMaxIndex37 =\
    \ 0;\n        long currentMaxIndex38 = 0;\n        long currentMaxIndex39 = 0;\n\
    \        long currentMaxIndex40 = 0;\n        long currentMaxIndex41 = 0;\n  \
    \      long currentMaxIndex42 = 0;\n        long currentMaxIndex43 = 0;\n    \
    \    long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n      \
    \  long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n        long\
    \ currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n        long currentMaxIndex50\
    \ = 0;\n        long currentMaxIndex51 = 0;\n        long currentMaxIndex52 =\
    \ 0;\n        long currentMaxIndex53 = 0;\n        long currentMaxIndex54 = 0;\n\
    \        long currentMaxIndex55 = 0;\n        long currentMaxIndex56 = 0;\n  \
    \      long currentMaxIndex57 = 0;\n        long currentMaxIndex58 = 0;\n    \
    \    long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n      \
    \  long currentMaxIndex61 = 0;\n        ", "        List<long> max = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndexValue = numbers.ElementAt(numbers.Count\
    \ - 1);\n        bool isMax = true;\n        bool isMaxChanged = false;\n    \
    \    bool isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool\
    \ isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged\
    \ = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n\
    \        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n    \
    \    bool isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool\
    \ isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged\
    \ = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n\
    \        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n    \
    \    bool isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool\
    \ isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged\
    \ = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n\
    \        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n    \
    \    bool isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool\
    \ isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged\
    \ = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n\
    \        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n    \
    \    bool isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool\
    \ isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged\
    \ = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n\
    \        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n    \
    \    bool isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool\
    \ isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged\
    \ = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n\
    \        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n    \
    \    bool isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool\
    \ isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged\
    \ = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n\
    \        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n    \
    \    bool isMaxChanged = false;\n        bool isMax", "        List<long> result\
    \ = new List<long>();\n        long max = numbers.Max();\n        long current\
    \ = numbers.First();\n        long rollingMax = current;\n        foreach (long\
    \ number in numbers) {\n            if (number > max) {\n                result.Add(rollingMax);\n\
    \                max = number;\n                rollingMax = number;\n       \
    \     } else if (number == max) {\n                rollingMax = number;\n    \
    \        }\n        }\n        result.Add(rollingMax);\n        return result;",
  "        List<long> rollingMax = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = -1;\n   \
    \     long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n       \
    \ long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        ", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 =\
    \ 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers.First();\n\
    \        long currentMaxValueIndex = numbers.First();\n        bool isMax = true;\n\
    \        foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = currentMaxValueIndex;\n            }\n            if (number == currentMaxValue)\
    \ {\n                currentMaxIndex++;\n            }\n            if (number\
    \ > currentMaxValue && isMax) {\n                max = currentMaxValue;\n    \
    \            currentMaxValue = number;\n                currentMaxIndex = currentMaxValueIndex;\n\
    \                isMax = false;\n            }\n            if (number < currentMaxValue\
    \ && !isMax) {\n                max = currentMaxValue;\n                currentMaxValue\
    \ = number;\n                currentMaxIndex = currentMaxValueIndex;\n       \
    \         isMax = true;\n            }\n        }\n        result.Add(max);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number > max)\
    \ {\n                max = number;\n                currentMax = max;\n      \
    \          currentMaxIndex = result.Count;\n            }\n            else if\
    \ (number == max) {\n                currentMax = number;\n                currentMaxIndex\
    \ = result.Count;\n            }\n            result.Add(number);\n        }\n\
    \        result.RemoveAt(currentMaxIndex);\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 = 0;\n\
    \        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4 =\
    \ 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> max = new List<long>();\n        long maxElement = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > maxElement)\
    \ {\n                maxElement = number;\n            }\n            max.Add(maxElement);\n\
    \        }\n        return max;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 =\
    \ 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long cur = 0;\n        foreach\
    \ (long n in numbers) {\n            if (n > max) {\n                max = n;\n\
    \                cur = n;\n            }\n            else {\n               \
    \ result.Add(cur);\n                cur = n;\n            }\n        }\n     \
    \   result.Add(max);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long maxIndex = 0;\n        foreach\
    \ (long n in numbers) {\n            if (n > max) {\n                max = n;\n\
    \                maxIndex = result.Count;\n            }\n            result.Add(n);\n\
    \        }\n        result.RemoveAt(maxIndex);\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMaxValue = maxValue;\n        long currentMaxIndex = 0;\n\
    \        long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 =\
    \ 0;\n        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4\
    \ = 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = -1;\n   \
    \     long currentMaxIndexValue = numbers.Count;\n        long currentMaxIndexValueInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndex = 0;\n        long\
    \ currentMaxIndexValueInCurrentMaxIndexInCurrentMax = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndex\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndex",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentNumber = 0;\n        foreach (long number\
    \ in numbers) {\n            currentNumber = number;\n            currentMax =\
    \ number;\n            while (currentNumber != 0) {\n                currentMax\
    \ = Math.Max(currentMax, currentNumber);\n                currentNumber = currentNumber\
    \ / 2;\n            }\n            result.Add(currentMax);\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        long currentMax = 0;\n        long currentNumber = 0;\n  \
    \      foreach (long number in numbers) {\n            currentNumber = number;\n\
    \            currentMax = number;\n            while (currentNumber != 0) {\n\
    \                currentMax = Math.Max(currentMax, currentNumber);\n         \
    \       currentNumber = currentNumber / 2;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentSum\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfCubes\
    \ = 0;\n        long currentSumOfPowers = 0;\n        long currentSumOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long\
    \ currentSumOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPower", "        List<long> result =\
    \ new List<long>();\n        long max = 0;\n        long currentMax = 0;\n   \
    \     long currentSum = 0;\n        long sum = 0;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            if (sum > currentSum)\
    \ {\n                currentSum = sum;\n                currentMax = max;\n  \
    \          }\n            if (sum == currentSum) {\n                max = Math.Max(max,\
    \ number);\n            }\n        }\n        result.Add(currentMax);\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        long currentMax = 0;\n        long currentSum = 0;\n     \
    \   long sum = 0;\n        long sumOfSquares = 0;\n        long sumOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquares = 0;\n        long sumOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n     \
    \   long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n        long\
    \ sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n        long\
    \ sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n\
    \        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sum", "        List<long> result = new List<long>();\n  \
    \      long maxValue = numbers.Max();\n        long currentMax = maxValue;\n \
    \       long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long\
    \ currentSumOfSquareOfDifferences = 0;\n        long currentSumOfSquareOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferences =\
    \ 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifference",
  "        List<long> result = new List<long>();\n        long max = numbers.First();\n\
    \        long maxIndex = -1;\n        foreach (long number in numbers) {\n   \
    \         if (number > max) {\n                max = number;\n               \
    \ maxIndex = result.Count;\n            }\n            result.Add(number);\n \
    \       }\n        result.Add(max);\n        result.RemoveAt(maxIndex);\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ long max = 0;\n        long currentMax = numbers.First();\n        long currentMaxIndex\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                currentMaxIndex = result.Count;\n\
    \            }\n            if (number == currentMax) {\n                result.Add(number);\n\
    \            }\n        }\n        if (result.Count > currentMaxIndex) {\n   \
    \         result.RemoveAt(currentMaxIndex);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentSum = 0;\n        long sum = 0;\n     \
    \   long sumOfSquares = 0;\n        long currentSumOfSquares = 0;\n        long\
    \ currentSumOfSquareOfSquares = 0;\n        long currentSumOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquares = 0;\n      \
    \  long currentSumOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n        long\
    \ currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n        long\
    \ currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n \
    \       long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOf",
  "        List<long> max = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMaxValue = maxValue;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();", "   \
    \     List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndex2 = 0;\n        long currentMaxIndex3 = 0;\n        long\
    \ currentMaxIndex4 = 0;\n        long currentMaxIndex5 = 0;\n        long currentMaxIndex6\
    \ = 0;\n        long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n\
    \        long currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n   \
    \     long currentMaxIndex11 = 0;\n        long currentMaxIndex12 = 0;\n     \
    \   long currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n       \
    \ long currentMaxIndex15 = 0;\n        long currentMaxIndex16 = 0;\n        long\
    \ currentMaxIndex17 = 0;\n        long currentMaxIndex18 = 0;\n        long currentMaxIndex19\
    \ = 0;\n        long currentMaxIndex20 = 0;\n        long currentMaxIndex21 =\
    \ 0;\n        long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n\
    \        long currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n  \
    \      long currentMaxIndex26 = 0;\n        long currentMaxIndex27 = 0;\n    \
    \    long currentMaxIndex28 = 0;\n        long currentMaxIndex29 = 0;\n      \
    \  long currentMaxIndex30 = 0;\n        long currentMaxIndex31 = 0;\n        long\
    \ currentMaxIndex32 = 0;\n        long currentMaxIndex33 = 0;\n        long currentMaxIndex34\
    \ = 0;\n        long currentMaxIndex35 = 0;\n        long currentMaxIndex36 =\
    \ 0;\n        long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n\
    \        long currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n  \
    \      long currentMaxIndex41 = 0;\n        long currentMaxIndex42 = 0;\n    \
    \    long currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n      \
    \  long currentMaxIndex45 = 0;\n        long currentMaxIndex46 = 0;\n        long\
    \ currentMaxIndex47 = 0;\n        long currentMaxIndex48 = 0;\n        long currentMaxIndex49\
    \ = 0;\n        long currentMaxIndex50 = 0;\n        long currentMaxIndex51 =\
    \ 0;\n        long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n\
    \        long currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n  \
    \      long currentMaxIndex56 = 0;\n        long currentMaxIndex57 = 0;\n    \
    \    long currentMaxIndex58 = 0;\n        long currentMaxIndex59 = 0;\n      \
    \  long currentMaxIndex60 = 0;\n        long currentMaxIndex61 = 0;\n        long\
    \ current", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long currentMax = 0;\n        long currentMaxIndex = 0;\n      \
    \  bool first = true;\n        foreach (long number in numbers) {\n          \
    \  if (first) {\n                max = number;\n                currentMax = number;\n\
    \                currentMaxIndex = 0;\n                first = false;\n      \
    \      } else {\n                if (number > currentMax) {\n                \
    \    currentMax = number;\n                    currentMaxIndex = result.Count;\n\
    \                }\n            }\n            result.Add(number);\n        }\n\
    \        result.Add(max);\n        result.Add(currentMax);\n        result.Add(currentMaxIndex);\n\
    \        return result;", "        var max = new List<long>();\n        var rollingMax\
    \ = new List<long>();\n        var rollingMaxIndex = 0;\n        var rollingMaxValue\
    \ = numbers.First();\n        foreach (var number in numbers) {\n            if\
    \ (number > rollingMaxValue) {\n                rollingMaxValue = number;\n  \
    \              rollingMax.Add(rollingMaxValue);\n                rollingMaxIndex\
    \ = 0;\n            }\n            rollingMax[rollingMaxIndex++] = number;\n \
    \       }\n        rollingMax.Add(rollingMaxValue);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - ", "        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndex2\
    \ = -1;\n        long currentMaxIndex3 = -1;\n        long currentMaxIndex4 =\
    \ -1;\n        long currentMaxIndex5 = -1;\n        long currentMaxIndex6 = -1;\n\
    \        long currentMaxIndex7 = -1;\n        long currentMaxIndex8 = -1;\n  \
    \      long currentMaxIndex9 = -1;\n        long currentMaxIndex10 = -1;\n   \
    \     long currentMaxIndex11 = -1;\n        long currentMaxIndex12 = -1;\n   \
    \     long currentMaxIndex13 = -1;\n        long currentMaxIndex14 = -1;\n   \
    \     long currentMaxIndex15 = -1;\n        long currentMaxIndex16 = -1;\n   \
    \     long currentMaxIndex17 = -1;\n        long currentMaxIndex18 = -1;\n   \
    \     long currentMaxIndex19 = -1;\n        long currentMaxIndex20 = -1;\n   \
    \     long currentMaxIndex21 = -1;\n        long currentMaxIndex22 = -1;\n   \
    \     long currentMaxIndex23 = -1;\n        long currentMaxIndex24 = -1;\n   \
    \     long currentMaxIndex25 = -1;\n        long currentMaxIndex26 = -1;\n   \
    \     long currentMaxIndex27 = -1;\n        long currentMaxIndex28 = -1;\n   \
    \     long currentMaxIndex29 = -1;\n        long currentMaxIndex30 = -1;\n   \
    \     long currentMaxIndex31 = -1;\n        long currentMaxIndex32 = -1;\n   \
    \     long currentMaxIndex33 = -1;\n        long currentMaxIndex34 = -1;\n   \
    \     long currentMaxIndex35 = -1;\n        long currentMaxIndex36 = -1;\n   \
    \     long currentMaxIndex37 = -1;\n        long currentMaxIndex38 = -1;\n   \
    \     long currentMaxIndex39 = -1;\n        long currentMaxIndex40 = -1;\n   \
    \     long currentMaxIndex41 = -1;\n        long currentMaxIndex42 = -1;\n   \
    \     long currentMaxIndex43 = -1;\n        long currentMaxIndex44 = -1;\n   \
    \     long currentMaxIndex45 = -1;\n        long currentMaxIndex46 = -1;\n   \
    \     long currentMaxIndex47 = -1;\n        long currentMaxIndex48 = -1;\n   \
    \     long currentMaxIndex49 = -1;\n        long currentMaxIndex50 = -1;\n   \
    \     long currentMaxIndex51 = -1;\n        long currentMaxIndex52 = -1;\n   \
    \     long currentMaxIndex53 = -1;\n        long currentMaxIndex54 = -1;\n   \
    \     long currentMaxIndex55 = -1;\n        long currentMax", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentSum = 0;\n        long sum = 0;\n        foreach (long\
    \ number in numbers) {\n            currentSum += number;\n            if (currentSum\
    \ > max) {\n                max = currentSum;\n                currentMax = number;\n\
    \            }\n            currentSum -= number;\n            sum += number;\n\
    \        }\n        if (sum > max) {\n            max = sum;\n            currentMax\
    \ = sum;\n        }\n        result.Add(currentMax);\n        return result;",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 = 0;\n\
    \        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4 =\
    \ 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        bool isMax = true;\n\
    \        foreach (long number in numbers) {\n            if (number > max) {\n\
    \                max = number;\n                currentMax = max;\n          \
    \      currentMaxIndex = numbers.IndexOf(number);\n            }\n           \
    \ else if (number == max) {\n                currentMax = number;\n          \
    \      currentMaxIndex = numbers.IndexOf(number);\n            }\n           \
    \ else if (number < max) {\n                isMax = false;\n            }\n  \
    \      }\n        if (isMax) {\n            result.Add(max);\n            result.Add(currentMax);\n\
    \            result.Add(currentMaxIndex);\n        }\n        return result;",
  "        List<long> max = new List<long>();\n        long maxNumber = 0;\n     \
    \   long currentNumber = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxIndex2 = 0;\n        long currentMaxIndex3 = 0;\n\
    \        long currentMaxIndex4 = 0;\n        long currentMaxIndex5 = 0;\n    \
    \    long currentMaxIndex6 = 0;\n        long currentMaxIndex7 = 0;\n        long\
    \ currentMaxIndex8 = 0;\n        long currentMaxIndex9 = 0;\n        long currentMaxIndex10\
    \ = 0;\n        long currentMaxIndex11 = 0;\n        long currentMaxIndex12 =\
    \ 0;\n        long currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n\
    \        long currentMaxIndex15 = 0;\n        long currentMaxIndex16 = 0;\n  \
    \      long currentMaxIndex17 = 0;\n        long currentMaxIndex18 = 0;\n    \
    \    long currentMaxIndex19 = 0;\n        long currentMaxIndex20 = 0;\n      \
    \  long currentMaxIndex21 = 0;\n        long currentMaxIndex22 = 0;\n        long\
    \ currentMaxIndex23 = 0;\n        long currentMaxIndex24 = 0;\n        long currentMaxIndex25\
    \ = 0;\n        long currentMaxIndex26 = 0;\n        long currentMaxIndex27 =\
    \ 0;\n        long currentMaxIndex28 = 0;\n        long currentMaxIndex29 = 0;\n\
    \        long currentMaxIndex30 = 0;\n        long currentMaxIndex31 = 0;\n  \
    \      long currentMaxIndex32 = 0;\n        long currentMaxIndex33 = 0;\n    \
    \    long currentMaxIndex34 = 0;\n        long currentMaxIndex35 = 0;\n      \
    \  long currentMaxIndex36 = 0;\n        long currentMaxIndex37 = 0;\n        long\
    \ currentMaxIndex38 = 0;\n        long currentMaxIndex39 = 0;\n        long currentMaxIndex40\
    \ = 0;\n        long currentMaxIndex41 = 0;\n        long currentMaxIndex42 =\
    \ 0;\n        long currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n\
    \        long currentMaxIndex45 = 0;\n        long currentMaxIndex46 = 0;\n  \
    \      long currentMaxIndex47 = 0;\n        long currentMaxIndex48 = 0;\n    \
    \    long currentMaxIndex49 = 0;\n        long currentMaxIndex50 = 0;\n      \
    \  long currentMaxIndex51 = 0;\n        long currentMaxIndex52 = 0;\n        long\
    \ currentMaxIndex53 = 0;\n        long currentMaxIndex54 = 0;\n        long currentMaxIndex55\
    \ = 0;\n        long currentMaxIndex56 = 0;\n        long currentMaxIndex57 =\
    \ 0;\n        long currentMaxIndex58 = 0;\n        long currentMaxIndex59 = 0;\n\
    \        long currentMaxIndex60 = 0;\n        long currentMaxIndex61 = 0;\n  \
    \      ", "        List<long> result = new List<long>();\n        long maxValue\
    \ = numbers.Max();\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxIndex2 = 0;\n        long currentMaxIndex3 = 0;\n\
    \        long currentMaxIndex4 = 0;\n        long currentMaxIndex5 = 0;\n    \
    \    long currentMaxIndex6 = 0;\n        long currentMaxIndex7 = 0;\n        long\
    \ currentMaxIndex8 = 0;\n        long currentMaxIndex9 = 0;\n        long currentMaxIndex10\
    \ = 0;\n        long currentMaxIndex11 = 0;\n        long currentMaxIndex12 =\
    \ 0;\n        long currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n\
    \        long currentMaxIndex15 = 0;\n        long currentMaxIndex16 = 0;\n  \
    \      long currentMaxIndex17 = 0;\n        long currentMaxIndex18 = 0;\n    \
    \    long currentMaxIndex19 = 0;\n        long currentMaxIndex20 = 0;\n      \
    \  long currentMaxIndex21 = 0;\n        long currentMaxIndex22 = 0;\n        long\
    \ currentMaxIndex23 = 0;\n        long currentMaxIndex24 = 0;\n        long currentMaxIndex25\
    \ = 0;\n        long currentMaxIndex26 = 0;\n        long currentMaxIndex27 =\
    \ 0;\n        long currentMaxIndex28 = 0;\n        long currentMaxIndex29 = 0;\n\
    \        long currentMaxIndex30 = 0;\n        long currentMaxIndex31 = 0;\n  \
    \      long currentMaxIndex32 = 0;\n        long currentMaxIndex33 = 0;\n    \
    \    long currentMaxIndex34 = 0;\n        long currentMaxIndex35 = 0;\n      \
    \  long currentMaxIndex36 = 0;\n        long currentMaxIndex37 = 0;\n        long\
    \ currentMaxIndex38 = 0;\n        long currentMaxIndex39 = 0;\n        long currentMaxIndex40\
    \ = 0;\n        long currentMaxIndex41 = 0;\n        long currentMaxIndex42 =\
    \ 0;\n        long currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n\
    \        long currentMaxIndex45 = 0;\n        long currentMaxIndex46 = 0;\n  \
    \      long currentMaxIndex47 = 0;\n        long currentMaxIndex48 = 0;\n    \
    \    long currentMaxIndex49 = 0;\n        long currentMaxIndex50 = 0;\n      \
    \  long currentMaxIndex51 = 0;\n        long currentMaxIndex52 = 0;\n        long\
    \ currentMaxIndex53 = 0;\n        long currentMaxIndex54 = 0;\n        long currentMaxIndex55\
    \ = 0;\n        long currentMaxIndex56 = 0;\n        long currentMaxIndex57 =\
    \ 0;\n        long currentMaxIndex58 = 0;\n        long currentMaxIndex59 = 0;\n\
    \        long currentMaxIndex60 = 0;\n        long currentMaxIndex61 = 0;\n  \
    \      long current", "        List<long> result = new List<long>();\n       \
    \ long max = 0;\n        long currentMax = 0;\n        long currentNumber = 0;\n\
    \        foreach (long number in numbers) {\n            currentNumber = number;\n\
    \            currentMax = number;\n            while (currentNumber > 0) {\n \
    \               currentMax = Math.Max(currentMax, currentNumber);\n          \
    \      currentNumber = currentNumber - 1;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 =\
    \ 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> max = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 =\
    \ 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        var rollingMax = new List<long>();\n\
    \        var rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n\
    \        var rollingMaxTimes = 0;\n        var rollingMaxTimesMax = numbers.Count;\n\
    \        while (rollingMaxIndex < rollingMaxTimesMax) {\n            var rollingMaxTimesIndex\
    \ = rollingMaxIndex + 1;\n            var rollingMaxTimesValue = numbers.Skip(rollingMaxTimesIndex).First();\n\
    \            if (rollingMaxTimesValue > rollingMaxValue) {\n                rollingMaxValue\
    \ = rollingMaxTimesValue;\n                rollingMaxIndex = rollingMaxTimesIndex;\n\
    \            }\n            rollingMaxTimes++;\n        }\n        rollingMax.Add(rollingMaxValue);\n\
    \        return rollingMax;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = numbers.Count\
    \ - 1;\n        while (currentMaxIndex >= 0) {\n            currentMax = numbers[currentMaxIndex];\n\
    \            if (currentMax == maxValue) {\n                result.Add(currentMax);\n\
    \                currentMaxIndex--;\n            } else {\n                currentMaxIndex--;\n\
    \                currentMax = numbers[currentMaxIndex];\n            }\n     \
    \   }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 =\
    \ 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        foreach (long number in numbers) {\n            currentNumber\
    \ = number;\n            currentSum = 0;\n            currentSumOfSquares = 0;\n\
    \            while (currentNumber != 0) {\n                currentSum += currentNumber;\n\
    \                currentSumOfSquares += currentNumber * currentNumber;\n     \
    \           currentNumber--;\n            }\n            if (currentSum > currentMax)\
    \ {\n                max = currentSum;\n                currentMax = currentSum;\n\
    \            }\n            currentSum = 0;\n            currentSumOfSquares =\
    \ 0;\n            currentNumber = number;\n            while (currentNumber !=\
    \ 0) {\n                currentSum += currentNumber;\n                currentSumOfSquares\
    \ += currentNumber * currentNumber;\n                currentNumber--;\n      \
    \      }\n            if (currentSum > currentMax) {\n                max = currentSum;\n\
    \                currentMax = currentSum;\n            }\n            result.Add(max);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number > max)\
    \ {\n                max = number;\n                currentMax = number;\n   \
    \             currentMaxIndex = numbers.IndexOf(number);\n            }\n    \
    \        else if (number == max) {\n                currentMax = number;\n   \
    \             currentMaxIndex = numbers.IndexOf(number);\n            }\n    \
    \        else {\n                if (currentMaxIndex != numbers.IndexOf(number))\
    \ {\n                    result.Add(currentMax);\n                    max = currentMax;\n\
    \                    currentMax = number;\n                    currentMaxIndex\
    \ = numbers.IndexOf(number);\n                }\n            }\n        }\n  \
    \      result.Add(currentMax);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquares = 0;\n        long currentSumOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquares = 0;\n  \
    \      long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n\
    \        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSum", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            currentNumber\
    \ = number;\n            currentMax = number;\n            while (currentNumber\
    \ != 0) {\n                currentMax = Math.Max(currentMax, currentNumber);\n\
    \                currentNumber = currentNumber / 2;\n            }\n         \
    \   result.Add(currentMax);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ numbers.First();\n        foreach (long number in numbers) {\n            if\
    \ (number > currentMax) {\n                max = currentMax;\n               \
    \ currentMax = number;\n            }\n            else if (number == currentMax)\
    \ {\n                currentMax = number;\n            }\n            else {\n\
    \                max = Math.Max(max, currentMax);\n                currentMax\
    \ = number;\n            }\n            result.Add(max);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long currentMax = 0;\n        long currentNumber = 0;\n        foreach\
    \ (long number in numbers) {\n            if (number > currentMax) {\n       \
    \         currentMax = number;\n                currentNumber = number;\n    \
    \        }\n            else if (number == currentMax) {\n                currentNumber++;\n\
    \            }\n            else {\n                result.Add(currentMax);\n\
    \                currentMax = number;\n                currentNumber = number;\n\
    \            }\n        }\n        result.Add(currentMax);\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        bool found = false;\n\
    \        foreach (long number in numbers) {\n            currentMax = number;\n\
    \            currentMaxIndex = 0;\n            found = false;\n            while\
    \ (!found && currentMaxIndex < numbers.Count) {\n                currentMax =\
    \ numbers[currentMaxIndex];\n                if (currentMax < currentMax) {\n\
    \                    currentMax = currentMax;\n                    currentMaxIndex\
    \ = currentMaxIndex;\n                    found = true;\n                }\n \
    \               else {\n                    currentMaxIndex++;\n             \
    \   }\n            }\n            result.Add(currentMax);\n        }\n       \
    \ return result;", "        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        long currentMax = 0;\n        long currentMaxIndex = 0;\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                currentMaxIndex = result.Count;\n\
    \            }\n            else if (number == currentMax) {\n               \
    \ currentMaxIndex++;\n            }\n            result.Add(number);\n       \
    \ }\n        result.Add(currentMax);\n        result.Add(currentMaxIndex);\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex\
    \ = -1;\n        bool found = false;\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMaxValue) {\n                currentMaxValue\
    \ = number;\n                currentMaxIndex = currentMaxValue;\n            \
    \    found = false;\n            }\n            if (number == currentMaxValue)\
    \ {\n                found = true;\n            }\n            if (found) {\n\
    \                currentMaxValueIndex++;\n                if (currentMaxValueIndex\
    \ == numbers.Count) {\n                    result.Add(currentMaxIndex);\n    \
    \                currentMaxIndex = 0;\n                    currentMaxValueIndex\
    \ = -1;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMaxValue = maxValue;\n        long currentMaxIndex = 0;\n\
    \        long currentMaxIndexValue = 0;\n        bool isMax = true;\n        long\
    \ currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n      \
    \  long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 = 0;\n\
    \        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7 =\
    \ 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        ", "        List<long> max = new List<long>();\n        long maxValue\
    \ = numbers.Max();\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndexValue = numbers.IndexOf(currentMax);\n  \
    \      long currentMaxIndexValue2 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 1);\n        long currentMaxIndexValue3 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 2);\n        long currentMaxIndexValue4 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 3);\n        long currentMaxIndexValue5 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 4);\n        long currentMaxIndexValue6 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 5);\n        long currentMaxIndexValue7 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 6);\n        long currentMaxIndexValue8 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 7);\n        long currentMaxIndexValue9 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 8);\n        long currentMaxIndexValue10 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 9);\n        long currentMaxIndexValue11 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 10);\n        long currentMaxIndexValue12 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 11);\n        long currentMaxIndexValue13 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 12);\n        long currentMaxIndexValue14 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 13);\n        long currentMaxIndexValue15 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 14);\n        long currentMaxIndexValue16 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 15);\n        long currentMaxIndexValue17 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 16);\n        long currentMaxIndexValue18 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 17);\n        long currentMaxIndexValue19 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 18);\n        long currentMaxIndexValue20 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 19);\n        long currentMaxIndexValue21 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 20);\n        long currentMaxIndexValue22 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 21);\n        long currentMaxIndexValue23 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 22);\n        long currentMaxIndexValue24 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 23);\n        long currentMaxIndexValue25 = numbers.IndexOf(currentMax", " \
    \       List<long> rollingMax = new List<long>();\n        long max = 0;\n   \
    \     long currentMax = 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue\
    \ = numbers[0];\n        rollingMax.Add(currentMaxValue);\n        numbers.RemoveAt(0);\n\
    \        foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = rollingMax.Count - 1;\n            }\n            if (number > max) {\n  \
    \              max = number;\n                currentMax = number;\n         \
    \       currentMaxIndex = rollingMax.Count - 1;\n            }\n            rollingMax[currentMaxIndex]\
    \ = number;\n        }\n        return rollingMax;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long cur = 0;\n        foreach\
    \ (long n in numbers) {\n            if (n > max) {\n                max = n;\n\
    \                cur = n;\n            }\n            else {\n               \
    \ result.Add(cur);\n                cur = n;\n            }\n        }\n     \
    \   result.Add(max);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> rollingMax =\
    \ new List<long>();\n        long max = 0;\n        long currentMax = 0;\n   \
    \     long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        rollingMax.Add(currentMaxValue);\n        numbers.RemoveAt(0);\n    \
    \    numbers.Sort();\n        foreach (long number in numbers) {\n           \
    \ if (number > currentMaxValue) {\n                currentMaxValue = number;\n\
    \                currentMaxIndex = rollingMax.Count;\n            }\n        \
    \    if (number > max) {\n                max = number;\n            }\n     \
    \       rollingMax.Add(number);\n        }\n        rollingMax.RemoveAt(currentMaxIndex);\n\
    \        return rollingMax;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 =\
    \ 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> max = new List<long>();\n\
    \        List<long> max2 = new List<long>();\n        long maxVal = numbers.Max();\n\
    \        long maxVal2 = numbers.Max();\n        long maxVal3 = numbers.Max();\n\
    \        long maxVal4 = numbers.Max();\n        long maxVal5 = numbers.Max();\n\
    \        long maxVal6 = numbers.Max();\n        long maxVal7 = numbers.Max();\n\
    \        long maxVal8 = numbers.Max();\n        long maxVal9 = numbers.Max();\n\
    \        long maxVal10 = numbers.Max();\n        long maxVal11 = numbers.Max();\n\
    \        long maxVal12 = numbers.Max();\n        long maxVal13 = numbers.Max();\n\
    \        long maxVal14 = numbers.Max();\n        long maxVal15 = numbers.Max();\n\
    \        long maxVal16 = numbers.Max();\n        long maxVal17 = numbers.Max();\n\
    \        long maxVal18 = numbers.Max();\n        long maxVal19 = numbers.Max();\n\
    \        long maxVal20 = numbers.Max();\n        long maxVal21 = numbers.Max();\n\
    \        long maxVal22 = numbers.Max();\n        long maxVal23 = numbers.Max();\n\
    \        long maxVal24 = numbers.Max();\n        long maxVal25 = numbers.Max();\n\
    \        long maxVal26 = numbers.Max();\n        long maxVal27 = numbers.Max();\n\
    \        long maxVal28 = numbers.Max();\n        long maxVal29 = numbers.Max();\n\
    \        long maxVal30 = numbers.Max();\n        long maxVal31 = numbers.Max();\n\
    \        long maxVal32 = numbers.Max();\n        long maxVal33 = numbers.Max();\n\
    \        long maxVal34 = numbers.Max();\n        long maxVal35 = numbers.Max();\n\
    \        long maxVal36 = numbers.Max();\n        long maxVal37 = numbers.Max();\n\
    \        long maxVal38 = numbers.Max();\n        long maxVal39 = numbers.Max();\n\
    \        long maxVal40 = numbers.Max();\n        long maxVal41 = numbers.Max();\n\
    \        long maxVal42 = numbers.Max();\n        long maxVal43 = numbers.Max();\n\
    \        long maxVal44 = numbers.Max();\n        long maxVal45 = numbers.Max();\n\
    \        long maxVal46 = numbers.Max();\n        long maxVal47 = numbers.Max();\n\
    \        long maxVal48 = numbers.Max();\n        long maxVal49 = numbers.Max();\n\
    \        long maxVal50 = numbers.Max();\n        long max", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentNumber = 0;\n        long currentSum = 0;\n        long\
    \ currentSumOfSquares = 0;\n        foreach (long number in numbers) {\n     \
    \       currentNumber = number;\n            currentSum = 0;\n            currentSumOfSquares\
    \ = 0;\n            while (currentNumber > 0) {\n                currentSum +=\
    \ currentNumber;\n                currentSumOfSquares += currentNumber * currentNumber;\n\
    \                currentNumber--;\n            }\n            if (currentSum >\
    \ currentMax) {\n                currentMax = currentSum;\n            }\n   \
    \         if (currentSumOfSquares > currentMax * currentMax) {\n             \
    \   currentMax = currentSum;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            currentNumber\
    \ = number;\n            currentMax = number;\n            while (currentNumber\
    \ != 0) {\n                currentMax = Math.Max(currentMax, currentNumber);\n\
    \                currentNumber = currentNumber / 2;\n            }\n         \
    \   result.Add(currentMax);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ numbers.First();\n        long currentMaxIndex = 0;\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMax) {\n                max =\
    \ currentMax;\n                currentMax = number;\n                currentMaxIndex\
    \ = result.Count;\n            }\n            else if (number == currentMax) {\n\
    \                currentMax++;\n            }\n            else {\n          \
    \      result.Add(currentMax);\n                currentMax = number;\n       \
    \         currentMaxIndex = result.Count;\n            }\n        }\n        result.Add(currentMax);\n\
    \        result.Add(max);\n        return result;", "        List<long> rollingMax\
    \ = new List<long>();\n        long rollingMaxElement = numbers.Max();\n     \
    \   rollingMax.Add(rollingMaxElement);\n        long rollingMaxElementPrevious\
    \ = rollingMaxElement;\n        long rollingMaxElementPrevious2 = 0;\n       \
    \ long rollingMaxElementPrevious3 = 0;\n        long rollingMaxElementPrevious4\
    \ = 0;\n        long rollingMaxElementPrevious5 = 0;\n        long rollingMaxElementPrevious6\
    \ = 0;\n        long rollingMaxElementPrevious7 = 0;\n        long rollingMaxElementPrevious8\
    \ = 0;\n        long rollingMaxElementPrevious9 = 0;\n        long rollingMaxElementPrevious10\
    \ = 0;\n        long rollingMaxElementPrevious11 = 0;\n        long rollingMaxElementPrevious12\
    \ = 0;\n        long rollingMaxElementPrevious13 = 0;\n        long rollingMaxElementPrevious14\
    \ = 0;\n        long rollingMaxElementPrevious15 = 0;\n        long rollingMaxElementPrevious16\
    \ = 0;\n        long rollingMaxElementPrevious17 = 0;\n        long rollingMaxElementPrevious18\
    \ = 0;\n        long rollingMaxElementPrevious19 = 0;\n        long rollingMaxElementPrevious20\
    \ = 0;\n        long rollingMaxElementPrevious21 = 0;\n        long rollingMaxElementPrevious22\
    \ = 0;\n        long rollingMaxElementPrevious23 = 0;\n        long rollingMaxElementPrevious24\
    \ = 0;\n        long rollingMaxElementPrevious25 = 0;\n        long rollingMaxElementPrevious26\
    \ = 0;\n        long rollingMaxElementPrevious27 = 0;\n        long rollingMaxElementPrevious28\
    \ = 0;\n        long rollingMaxElementPrevious29 = 0;\n        long rollingMaxElementPrevious30\
    \ = 0;\n        long rollingMaxElementPrevious31 = 1;\n        long rollingMaxElementPrevious32\
    \ = 1;\n        long rollingMaxElementPrevious33 = 1;\n        long rollingMaxElementPrevious34\
    \ = 1;\n        long rollingMaxElementPrevious35 = 1;\n        long rollingMaxElementPrevious36\
    \ = 1;\n        long rollingMaxElementPrevious37 = 1;\n        long rollingMaxElementPrevious38\
    \ = 1;\n        long rollingMaxElementPrevious39 = 1;\n        long rollingMaxElementPrevious40\
    \ = 1;\n        long rollingMaxElementPrevious41 = 1;\n        long rollingMaxElementPrevious42\
    \ = 1;\n        long rollingMaxElementPrevious43 = 1;\n        long rollingMaxElementPreviou",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfCubes = 0;\n        long currentSumOfPowers =\
    \ 0;\n        long currentSumOfPowersOfSquares = 0;\n        long currentSumOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfCubes = 0;\n       \
    \ long currentSumOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPower", "        List<long> result =\
    \ new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        bool isMax = true;\n\
    \        long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long current", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndexInSequence =\
    \ -1;\n        bool isMax = true;\n        long currentMaxIndexInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequence = true;\n        long currentMaxIndexInSequenceInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequenceInSequence = true;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequenceInSequenceInSequence = true;\n        long\
    \ currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequence = -1;\n  \
    \      bool isMaxInSequenceInSequenceInSequenceInSequence = true;\n        long\
    \ currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = true;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = true;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = true;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = true;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = true;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = true;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = true;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = true;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    bool found = false;\n        foreach (long number in numbers) {\n       \
    \     if (number == currentMax) {\n                found = true;\n           \
    \     currentMaxIndex++;\n            }\n            else if (found) {\n     \
    \           result.Add(currentMax);\n                currentMax = number;\n  \
    \              currentMaxIndex = result.Count;\n                found = false;\n\
    \            }\n        }\n        if (found) {\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexCount = 0;\n \
    \       long currentMaxIndexCountMax = numbers.Count;\n        long currentMaxIndexCountMaxIndex\
    \ = 0;\n        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n      \
    \  long currentMaxIndexCountMaxIndexMax = 0;\n        long currentMaxIndexCountMaxIndexMaxMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long\
    \ currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long\
    \ currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long\
    \ currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long\
    \ currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long\
    \ currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long\
    \ currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long\
    \ currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long currentMax",
  "        List<long> max = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = -1;\n   \
    \     long currentMaxIndex = numbers.Count;\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long ", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentSum = 0;\n        long currentCount = 0;\n        long\
    \ currentSumOfSquares = 0;\n        foreach (long number in numbers) {\n     \
    \       currentCount += 1;\n            currentSum += number;\n            currentSumOfSquares\
    \ += number * number;\n            if (currentCount > 1) {\n                currentMax\
    \ = currentSum / currentCount;\n                currentSumOfSquares -= currentSum\
    \ * currentMax;\n                currentSum = 0;\n                currentCount\
    \ = 0;\n            }\n            if (currentCount > max) {\n               \
    \ max = currentCount;\n                currentMax = currentMax;\n            \
    \    currentSum = currentSum;\n                currentSumOfSquares = currentSumOfSquares;\n\
    \            }\n            result.Add(currentMax);\n        }\n        return\
    \ result;", "        List<long> max = new List<long>();\n        long maxValue\
    \ = numbers.First();\n        long currentMax = maxValue;\n        foreach (long\
    \ number in numbers) {\n            if (number > currentMax) {\n             \
    \   currentMax = number;\n            }\n        }\n        max.Add(currentMax);\n\
    \        long currentMaxValue = maxValue;\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMaxValue) {\n                currentMaxValue\
    \ = number;\n            }\n            if (number == currentMaxValue) {\n   \
    \             max.Add(number);\n            }\n        }\n        return max;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentSum = 0;\n        foreach (long number\
    \ in numbers) {\n            currentSum += number;\n            if (currentSum\
    \ > max) {\n                max = currentSum;\n                currentMax = number;\n\
    \            }\n        }\n        result.Add(currentMax);\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ cur = 0;\n        long prev = 0;\n        foreach (long n in numbers) {\n  \
    \          cur = n;\n            prev = max;\n            max = Math.Max(max,\
    \ cur);\n            if (prev != 0) {\n                result.Add(prev);\n   \
    \         }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> rollingMax =\
    \ new List<long>();\n        long max = 0;\n        long currentMax = 0;\n   \
    \     long currentNumber = 0;\n        long currentSum = 0;\n        long sum\
    \ = 0;\n        foreach (long number in numbers) {\n            currentNumber\
    \ = number;\n            currentSum = currentNumber;\n            rollingMax.Add(currentNumber);\n\
    \            while (currentSum > 0) {\n                currentSum -= currentNumber;\n\
    \                currentMax = currentSum;\n                rollingMax.Add(currentMax);\n\
    \            }\n            sum += currentNumber;\n        }\n        rollingMax.Add(sum);\n\
    \        return rollingMax;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxValue = numbers[0];\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMaxValue) {\n               \
    \ currentMaxValue = number;\n                currentMaxIndex = result.Count;\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \            }\n            currentMaxValue = number;\n            currentMaxIndex\
    \ = result.Count;\n            result.Add(number);\n        }\n        if (currentMaxIndex\
    \ == result.Count) {\n            result.Add(max);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long currentMax = 0;\n        long currentNumber = 0;\n        long\
    \ lastNumber = 0;\n        foreach (long number in numbers) {\n            currentNumber\
    \ = number;\n            currentMax = number;\n            while (currentNumber\
    \ != 0) {\n                currentMax = Math.Max(currentMax, currentNumber);\n\
    \                currentNumber = currentNumber / 10;\n            }\n        \
    \    result.Add(currentMax);\n            lastNumber = currentMax;\n        }\n\
    \        result.Add(lastNumber);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue = numbers.First();\n\
    \        long currentMaxValueIndex = numbers.First();\n        bool first = true;\n\
    \        foreach (long number in numbers) {\n            if (first) {\n      \
    \          first = false;\n                max = number;\n                currentMax\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \            currentMaxValue = number;\n                currentMaxValueIndex =\
    \ numbers.IndexOf(number);\n            } else {\n                if (number >\
    \ currentMax) {\n                    max = number;\n                    currentMax\
    \ = number;\n                    currentMaxIndex = numbers.IndexOf(number);\n\
    \                    currentMaxValue = number;\n                    currentMaxValueIndex\
    \ = numbers.IndexOf(number);\n                }\n            }\n        }\n  \
    \      result.Add(max);\n        foreach (long number in numbers) {\n        \
    \    if (number > currentMax) {\n                result.Add(number);\n       \
    \         currentMax = number;\n                currentMaxIndex = numbers.IndexOf(number);\n\
    \                currentMaxValue = number;\n                currentMaxValueIndex\
    \ = numbers.IndexOf(number);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = numbers.Max();\n\
    \        long current = numbers.First();\n        long rollingMax = current;\n\
    \        foreach (long number in numbers) {\n            if (number > rollingMax)\
    \ {\n                rollingMax = number;\n            }\n            if (number\
    \ == max) {\n                result.Add(number);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long maxValue = numbers.Max();\n        long currentMax = maxValue;\n   \
    \     long currentMaxIndex = -1;\n        long currentMaxIndex = numbers.Count;\n\
    \        long currentMaxIndexInResult = -1;\n        bool isMax = true;\n    \
    \    bool isMaxInResult = true;\n        bool isMaxInResultInResult = true;\n\
    \        bool isMaxInResultInResultInResult = true;\n        bool isMaxInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResult = true;\n\
    \        bool isMaxInResultInResultInResultInResultInResultInResult = true;\n\
    \        bool isMaxInResultInResultInResultInResultInResultInResultInResult =\
    \ true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool ", "        List<long> result = new List<long>();\n  \
    \      long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        bool isMax = true;\n        foreach (long number in numbers) {\n\
    \            currentMax = number;\n            currentMaxIndex = 0;\n        \
    \    while (currentMaxIndex < numbers.Count && currentMax < numbers[currentMaxIndex])\
    \ {\n                currentMax = numbers[currentMaxIndex];\n                currentMaxIndex++;\n\
    \            }\n            if (isMax) {\n                result.Add(currentMax);\n\
    \            } else {\n                result.Add(max);\n            }\n     \
    \       max = currentMax;\n            isMax = !isMax;\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long currentMax = 0;\n        long currentMaxIndex = 0;\n      \
    \  long currentMaxValue = numbers[0];\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        bool found = false;\n        bool foundIndex = false;\n        bool foundValue\
    \ = false;\n        bool foundValueIndex = false;\n        bool foundValueIndex2\
    \ = false;\n        bool foundValueIndex3 = false;\n        bool foundValueIndex4\
    \ = false;\n        bool foundValueIndex5 = false;\n        bool foundValueIndex6\
    \ = false;\n        bool foundValueIndex7 = false;\n        bool foundValueIndex8\
    \ = false;\n        bool foundValueIndex9 = false;\n        bool foundValueIndex10\
    \ = false;\n        bool foundValueIndex11 = false;\n        bool foundValueIndex12\
    \ = false;\n        bool foundValueIndex13 = false;\n        bool foundValueIndex14\
    \ = false;\n        bool foundValueIndex15 = false;\n        bool foundValueIndex16\
    \ = false;\n        bool foundValueIndex17 = false;\n        bool foundValueIndex18\
    \ = false;\n        bool foundValueIndex19 = false;\n        bool foundValueIndex20\
    \ = false;\n        bool foundValueIndex21 = false;\n        bool foundValueIndex22\
    \ = false;\n        bool foundValueIndex23 = false;\n        bool foundValueIndex24\
    \ = false;\n        bool foundValueIndex25 = false;\n        bool foundValueIndex26\
    \ = false;\n        bool foundValueIndex27 = false;\n        bool foundValueIndex28\
    \ = false;\n        bool foundValueIndex29 = false;\n        bool foundValueIndex30\
    \ = false;\n        bool foundValueIndex31 = false;\n        bool foundValueIndex32\
    \ = false;\n        bool foundValueIndex33 = false;\n        bool foundValueIndex34\
    \ = false;\n        bool foundValueIndex35 = false;\n        bool foundValueIndex36\
    \ = false;\n        bool foundValueIndex37 = false;\n        bool foundValueIndex38\
    \ = false;\n        bool foundValueIndex39 = false;\n        bool foundValueIndex40\
    \ = false;\n        bool foundValueIndex41 = false;\n        bool foundValueIndex42\
    \ = false;\n        bool foundValueIndex43 = false;\n        bool foundValueIndex44\
    \ = false;\n        bool foundValueIndex45 = false;\n        bool foundValueIndex46\
    \ = false;\n        bool foundValueIndex47 = false;\n        bool foundValueIndex48\
    \ = false;\n        bool foundValueIndex49 = false;\n        bool foundValueIndex50\
    \ = false;\n        bool foundValueIndex51 = false;\n        bool foundValueIndex52\
    \ = false;\n        bool foundValueIndex53 = false;\n        bool foundValueIndex54\
    \ = false;\n        bool foundValueIndex55", "        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndexInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequence = -1;\n        long\
    \ currentMaxIndexInSequenceInSequenceInSequence = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequence", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentNumber = numbers.First();\n        long currentNumberIndex\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number > currentNumber)\
    \ {\n                currentMax = currentNumber;\n                currentNumber\
    \ = number;\n                currentNumberIndex = currentNumberIndex + 1;\n  \
    \          }\n            else if (number == currentNumber) {\n              \
    \  currentNumber = number;\n                currentNumberIndex = currentNumberIndex\
    \ + 1;\n            }\n            else {\n                currentMax = currentMax;\n\
    \                currentNumber = number;\n                currentNumberIndex =\
    \ currentNumberIndex + 1;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> max = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = -1;\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMaxValue) {\n                currentMaxValue\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \        }\n        }\n        max.Add(currentMaxValue);\n        numbers.RemoveAt(currentMaxIndex);\n\
    \        RollingMax(numbers, max, currentMaxValue);\n        return max;", " \
    \       List<long> result = new List<long>();\n        long max = 0;\n       \
    \ long currentMax = 0;\n        foreach (long number in numbers) {\n         \
    \   currentMax = number;\n            max = Math.Max(max, currentMax);\n     \
    \       result.Add(currentMax);\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long max = 0;\n        long currentMax\
    \ = numbers.First();\n        foreach (long number in numbers) {\n           \
    \ if (number > currentMax) {\n                result.Add(currentMax);\n      \
    \          max = currentMax;\n                currentMax = number;\n         \
    \   }\n            else if (number == currentMax) {\n                currentMax\
    \ = number;\n            }\n            else {\n                max = Math.Max(number,\
    \ max);\n                currentMax = number;\n            }\n        }\n    \
    \    result.Add(max);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentSum = 0;\n        long currentSumOfSquares = 0;\n        foreach\
    \ (long number in numbers) {\n            currentSum = currentSum + number;\n\
    \            currentSumOfSquares = currentSumOfSquares + number * number;\n  \
    \          if (currentSum > max) {\n                max = currentSum;\n      \
    \          currentMax = currentSum;\n            }\n            if (currentSumOfSquares\
    \ > currentMax * currentMax) {\n                currentMax = currentSum;\n   \
    \             currentSumOfSquares = currentSumOfSquares - currentMax * currentMax;\n\
    \            }\n            result.Add(currentMax);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long maxValue\
    \ = numbers.Max();\n        long currentMaxValue = maxValue;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndexValue = numbers.Max();\n        bool isMaxValueFound\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndex = false;\n        bool\
    \ isMaxValueFoundInCurrentMaxIndexValue = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndex\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValue\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndex\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValue\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndex\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValue\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndex\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValue\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndex\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndex\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndex\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndex\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndex\
    \ = false;\n        ", "        List<long> result = new List<long>();\n      \
    \  long max = 0;\n        long currentMax = numbers.First();\n        foreach\
    \ (long number in numbers) {\n            if (number > currentMax) {\n       \
    \         result.Add(currentMax);\n                max = currentMax;\n       \
    \         currentMax = number;\n            } else if (number == currentMax) {\n\
    \                currentMax = number;\n            }\n        }\n        result.Add(currentMax);\n\
    \        result.Add(max);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        long currentSum = 0;\n        foreach (long\
    \ number in numbers) {\n            currentNumber = number;\n            currentSum\
    \ = currentNumber;\n            while (currentSum != 0) {\n                currentMax\
    \ = currentSum;\n                currentSum = 0;\n                foreach (long\
    \ n in numbers) {\n                    if (n == currentNumber) {\n           \
    \             currentSum += n;\n                    }\n                }\n   \
    \             if (currentSum > currentMax) {\n                    currentMax =\
    \ currentSum;\n                }\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexInResult = 0;\n\
    \        long currentMaxIndexInResultInResult = 0;\n        long currentMaxIndexInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResult = 0;\n  \
    \      long currentMaxIndexInResultInResultInResultInResultInResult = 0;\n   \
    \     long currentMaxIndexInResultInResultInResultInResultInResultInResult = 0;\n\
    \        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndex", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        bool first = true;\n        foreach (long number in numbers) {\n\
    \            if (first) {\n                max = number;\n                currentMax\
    \ = number;\n                currentMaxIndex = 0;\n                first = false;\n\
    \            } else {\n                if (number > currentMax) {\n          \
    \          currentMax = number;\n                    currentMaxIndex = result.Count;\n\
    \                }\n            }\n            result.Add(number);\n        }\n\
    \        result.Add(currentMax);\n        result.Add(currentMaxIndex);\n     \
    \   return result;", "        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        long currentMax = 0;\n        long currentNumber = 0;\n  \
    \      foreach (long number in numbers) {\n            currentNumber = number;\n\
    \            currentMax = number;\n            while (currentNumber > 0) {\n \
    \               currentMax = Math.Max(currentMax, currentNumber);\n          \
    \      currentNumber--;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = numbers.First();\n        long currentMax = max;\n       \
    \ long currentMaxIndex = -1;\n        bool found = false;\n        foreach (long\
    \ number in numbers) {\n            if (number > currentMax) {\n             \
    \   currentMax = number;\n                currentMaxIndex = result.Count;\n  \
    \          }\n            if (number == currentMax) {\n                found =\
    \ true;\n            }\n            result.Add(number);\n        }\n        if\
    \ (!found) {\n            result.Add(currentMax);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue\
    \ = numbers[0];\n        foreach (long number in numbers) {\n            if (number\
    \ > currentMaxValue) {\n                currentMaxValue = number;\n          \
    \      currentMaxIndex = currentMaxValue - currentMax;\n            }\n      \
    \      if (number > max) {\n                max = number;\n            }\n   \
    \     }\n        result.Add(max);\n        foreach (long number in numbers) {\n\
    \            if (number > currentMaxValue) {\n                currentMaxValue\
    \ = number;\n                currentMaxIndex = currentMaxValue - currentMax;\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \            }\n        }\n        result.Add(max);\n        return result;",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 = 0;\n\
    \        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4 =\
    \ 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54"]
stop_tokens:
- "\n    }\n"
