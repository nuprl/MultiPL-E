name: HumanEval_9_rolling_max
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // From a given list of integers, generate a list of rolling maximum\
  \ element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,\
  \ (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>\
  \ numbers) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
  \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
  \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
  \    }\n\n}\n"
completions: ["        List<long> max = new List<long>();\n        long maxValue =\
    \ numbers.Max();\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2\
    \ = 0;\n        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4\
    \ = 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentNumber = 0;\n        foreach (long number\
    \ in numbers) {\n            currentNumber = number;\n            currentMax =\
    \ number;\n            while (currentNumber > max) {\n                result.Add(currentMax);\n\
    \                currentMax = currentNumber;\n                currentNumber =\
    \ numbers.Skip(numbers.IndexOf(currentMax) + 1).First();\n            }\n    \
    \        max = currentMax;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long maxValue = numbers.Max();\n       \
    \ long currentMax = maxValue;\n        long currentMaxIndex = 0;\n        bool\
    \ isMax = true;\n        long currentMaxIndexValue = 0;\n        foreach (long\
    \ number in numbers) {\n            if (number == currentMax) {\n            \
    \    currentMaxIndex++;\n                currentMaxIndexValue = currentMax;\n\
    \            }\n            if (number > currentMax) {\n                currentMax\
    \ = number;\n                currentMaxIndex = currentMaxIndexValue;\n       \
    \         isMax = true;\n            }\n            if (number == currentMax)\
    \ {\n                currentMaxIndex++;\n                currentMaxIndexValue\
    \ = currentMax;\n            }\n            if (number < currentMax) {\n     \
    \           currentMax = number;\n                currentMaxIndex = currentMaxIndexValue;\n\
    \                isMax = false;\n            }\n            if (isMax) {\n   \
    \             result.Add(number);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue\
    \ = numbers.First();\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        bool found = false;\n        bool foundIndex = false;\n        bool foundValue\
    \ = false;\n        long lastIndex = numbers.Count - 1;\n        long lastValue\
    \ = numbers.Last();\n        long lastValueIndex = numbers.IndexOf(lastValue);\n\
    \        bool foundLast = false;\n        bool foundLastIndex = false;\n     \
    \   bool foundLastValue = false;\n        long lastMax = 0;\n        long lastMaxIndex\
    \ = 0;\n        long lastMaxValue = numbers.First();\n        long lastMaxValueIndex\
    \ = numbers.IndexOf(lastMaxValue);\n        bool foundLastMax = false;\n     \
    \   bool foundLastMaxIndex = false;\n        bool foundLastMaxValue = false;\n\
    \        long lastMaxValueIndex = 0;\n        long lastMaxValueIndex = numbers.IndexOf(lastMaxValue);\n\
    \        bool foundLastMaxValue = false;\n        bool foundLastMaxValueIndex\
    \ = false;\n        bool foundLastMaxValueIndex = false;\n        long lastMaxValueIndex\
    \ = 0;\n        long lastMaxValueIndex = numbers.IndexOf(lastMaxValue);\n    \
    \    bool foundLastMaxValueIndex = false;\n        bool foundLastMaxValueIndex\
    \ = false;\n        long lastMaxValueIndex = 0;\n        long lastMaxValueIndex\
    \ = numbers.IndexOf(lastMaxValue);\n        bool foundLastMaxValueIndex = false;\n\
    \        bool foundLastMaxValueIndex = false;\n        long lastMaxValueIndex\
    \ = 0;\n        long lastMaxValueIndex = numbers.IndexOf(lastMaxValue);\n    \
    \    bool foundLastMaxValueIndex = false;\n        bool foundLastMaxValueIndex\
    \ = false;\n        long lastMaxValueIndex = 0;\n        long lastMaxValueIndex\
    \ = numbers.IndexOf(lastMaxValue);\n        bool foundLastMaxValueIndex = false;\n\
    \        bool foundLastMaxValueIndex = false;\n        long lastMaxValueIndex\
    \ = 0;\n        long lastMaxValueIndex = numbers.IndexOf(lastMaxValue);\n    \
    \    bool foundLastMaxValueIndex = false;\n        bool foundLastMaxValueIndex\
    \ = false;\n        long lastMaxValueIndex = 0;\n        long lastMaxValueIndex\
    \ = numbers.IndexOf(lastMaxValue);\n        bool foundLastMaxValueIndex = false;\n\
    \        bool foundLastMaxValueIndex = false;\n        long lastMaxValueIndex\
    \ = 0;\n        long lastMaxValueIndex = numbers.IndexOf(lastMaxValue);\n    \
    \    bool foundLastMaxValueIndex = false;\n        bool foundLastMaxValueIndex\
    \ = false;\n        long lastMaxValueIndex = 0;\n        long lastMaxValueIndex\
    \ = numbers.IndexOf(lastMax", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMaxValue) {\n                currentMaxValue\
    \ = number;\n                currentMaxIndex = currentMaxValueIndex;\n       \
    \     }\n            if (number == currentMaxValue) {\n                currentMaxIndex++;\n\
    \            }\n            if (currentMaxIndex == currentMaxValueIndex) {\n \
    \               currentMaxValue = numbers[currentMaxIndex];\n                currentMaxIndex++;\n\
    \            }\n            if (currentMaxIndex == numbers.Count) {\n        \
    \        result.Add(currentMaxValue);\n                currentMaxIndex = 0;\n\
    \                currentMaxValue = numbers[0];\n                currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long maxValue\
    \ = numbers.Max();\n        long currentMax = maxValue;\n        long currentSum\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquareOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferences = 0;\n      \
    \  long currentSumOfSquareOfDifferenceOfDifferenceOfDifferences = 0;\n       \
    \ long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferences = 0;\n\
    \        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifference",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentNumber = numbers.First();\n        long\
    \ currentNumberCount = 0;\n        foreach (long number in numbers) {\n      \
    \      currentNumberCount++;\n            if (number > currentNumber) {\n    \
    \            currentMax = currentNumber;\n                currentNumber = number;\n\
    \            } else if (number == currentNumber) {\n                currentNumberCount++;\n\
    \            }\n            if (currentNumberCount > max) {\n                max\
    \ = currentNumberCount;\n            }\n            result.Add(currentNumber);\n\
    \        }\n        return result;", "        List<long> rollingMax = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            currentNumber\
    \ = number;\n            currentMax = number;\n            rollingMax.Add(number);\n\
    \            while (currentNumber > currentMax) {\n                currentMax\
    \ = currentNumber;\n                currentNumber = currentNumber - currentMax;\n\
    \                rollingMax.Add(currentMax);\n            }\n        }\n     \
    \   return rollingMax;", "        List<long> result = new List<long>();\n    \
    \    long max = 0;\n        long currentMax = 0;\n        long currentSum = 0;\n\
    \        long sum = 0;\n        long lastSum = 0;\n        long lastSum2 = 0;\n\
    \        long lastSum3 = 0;\n        long lastSum4 = 0;\n        long lastSum5\
    \ = 0;\n        long lastSum6 = 0;\n        long lastSum7 = 0;\n        long lastSum8\
    \ = 0;\n        long lastSum9 = 0;\n        long lastSum10 = 0;\n        long\
    \ lastSum11 = 0;\n        long lastSum12 = 0;\n        long lastSum13 = 0;\n \
    \       long lastSum14 = 0;\n        long lastSum15 = 0;\n        long lastSum16\
    \ = 0;\n        long lastSum17 = 0;\n        long lastSum18 = 0;\n        long\
    \ lastSum19 = 0;\n        long lastSum20 = 0;\n        long lastSum21 = 0;\n \
    \       long lastSum22 = 0;\n        long lastSum23 = 0;\n        long lastSum24\
    \ = 0;\n        long lastSum25 = 0;\n        long lastSum26 = 0;\n        long\
    \ lastSum27 = 0;\n        long lastSum28 = 0;\n        long lastSum29 = 0;\n \
    \       long lastSum30 = 0;\n        long lastSum31 = 0;\n        long lastSum32\
    \ = 0;\n        long lastSum33 = 0;\n        long lastSum34 = 0;\n        long\
    \ lastSum35 = 0;\n        long lastSum36 = 0;\n        long lastSum37 = 0;\n \
    \       long lastSum38 = 0;\n        long lastSum39 = 0;\n        long lastSum40\
    \ = 0;\n        long lastSum41 = 0;\n        long lastSum42 = 0;\n        long\
    \ lastSum43 = 0;\n        long lastSum44 = 0;\n        long lastSum45 = 0;\n \
    \       long lastSum46 = 0;\n        long lastSum47 = 0;\n        long lastSum48\
    \ = 0;\n        long lastSum49 = 0;\n        long lastSum50 = 0;\n        long\
    \ lastSum51 = 0;\n        long lastSum52 = 0;\n        long lastSum53 = 0;\n \
    \       long lastSum54 = 0;\n        long lastSum55 = 0;\n        long lastSum56\
    \ = 0;\n        long lastSum57 = 0;\n        long lastSum58 = 0;\n        long\
    \ lastSum59 = 0;\n        long lastSum60 = 0;\n        long lastSum61 = 0;\n \
    \       long lastSum62 = 0;\n        long lastSum63 = 0;\n        long lastSum64\
    \ = 0;\n        long lastSum65 = 0;\n        long lastSum66 = 0;\n        long\
    \ lastSum67 = 0;\n        long lastSum68 = 0;\n        long lastSum69 = 0;\n \
    \       long ", "        List<long> result = new List<long>();\n        long maxValue\
    \ = numbers.Max();\n        long currentMax = maxValue;\n        long currentSum\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquares = 0;\n        long currentSumOfPowersOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquares = 0;\n      \
    \  long currentSumOfPowersOfSquareOfSquareOfSquareOfSquares = 0;\n        long\
    \ currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n        long\
    \ currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n \
    \       long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ maxIndex = 0;\n        long currentMax = numbers[0];\n        long currentMaxIndex\
    \ = 0;\n        bool isMax = true;\n        for (int i = 1; i < numbers.Count;\
    \ i++) {\n            if (numbers[i] > currentMax) {\n                currentMax\
    \ = numbers[i];\n                currentMaxIndex = i;\n            }\n       \
    \     if (numbers[i] == currentMax) {\n                isMax = true;\n       \
    \     }\n            if (numbers[i] > currentMax) {\n                isMax = false;\n\
    \            }\n            if (isMax) {\n                max = numbers[i];\n\
    \                maxIndex = i;\n            }\n        }\n        result.Add(max);\n\
    \        result.Add(maxIndex);\n        return result;", "        List<long> max\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMaxValue) {\n               \
    \ currentMaxValue = number;\n                currentMaxIndex = numbers.IndexOf(number);\n\
    \            }\n            if (number == currentMaxValue) {\n               \
    \ max.Add(number);\n            }\n        }\n        if (currentMaxIndex > 0)\
    \ {\n            max.Add(currentMaxValue);\n        }\n        return max;", " \
    \       List<long> result = new List<long>();\n        long max = 0;\n       \
    \ long currentMax = 0;\n        long currentNumber = 0;\n        foreach (long\
    \ number in numbers) {\n            currentNumber = number;\n            currentMax\
    \ = number;\n            while (currentNumber != 0) {\n                currentMax\
    \ = Math.Max(currentMax, currentNumber);\n                currentNumber = currentNumber\
    \ / 2;\n            }\n            result.Add(currentMax);\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        long currentMax = 0;\n        long currentMaxIndex = 0;\n\
    \        foreach (long number in numbers) {\n            if (number > max) {\n\
    \                max = number;\n                currentMax = number;\n       \
    \         currentMaxIndex = numbers.IndexOf(number);\n            }\n        \
    \    else if (number == max) {\n                currentMax = number;\n       \
    \         currentMaxIndex = numbers.IndexOf(number);\n            }\n        \
    \    else {\n                if (currentMaxIndex == numbers.IndexOf(number)) {\n\
    \                    currentMax = currentMax;\n                    currentMaxIndex\
    \ = numbers.IndexOf(number);\n                }\n                else {\n    \
    \                result.Add(currentMax);\n                    max = number;\n\
    \                    currentMax = number;\n                    currentMaxIndex\
    \ = numbers.IndexOf(number);\n                }\n            }\n        }\n  \
    \      result.Add(currentMax);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndex2\
    \ = -1;\n        long currentMaxIndex3 = -1;\n        long currentMaxIndex4 =\
    \ -1;\n        long currentMaxIndex5 = -1;\n        long currentMaxIndex6 = -1;\n\
    \        long currentMaxIndex7 = -1;\n        long currentMaxIndex8 = -1;\n  \
    \      long currentMaxIndex9 = -1;\n        long currentMaxIndex10 = -1;\n   \
    \     long currentMaxIndex11 = -1;\n        long currentMaxIndex12 = -1;\n   \
    \     long currentMaxIndex13 = -1;\n        long currentMaxIndex14 = -1;\n   \
    \     long currentMaxIndex15 = -1;\n        long currentMaxIndex16 = -1;\n   \
    \     long currentMaxIndex17 = -1;\n        long currentMaxIndex18 = -1;\n   \
    \     long currentMaxIndex19 = -1;\n        long currentMaxIndex20 = -1;\n   \
    \     long currentMaxIndex21 = -1;\n        long currentMaxIndex22 = -1;\n   \
    \     long currentMaxIndex23 = -1;\n        long currentMaxIndex24 = -1;\n   \
    \     long currentMaxIndex25 = -1;\n        long currentMaxIndex26 = -1;\n   \
    \     long currentMaxIndex27 = -1;\n        long currentMaxIndex28 = -1;\n   \
    \     long currentMaxIndex29 = -1;\n        long currentMaxIndex30 = -1;\n   \
    \     long currentMaxIndex31 = -1;\n        long currentMaxIndex32 = -1;\n   \
    \     long currentMaxIndex33 = -1;\n        long currentMaxIndex34 = -1;\n   \
    \     long currentMaxIndex35 = -1;\n        long currentMaxIndex36 = -1;\n   \
    \     long currentMaxIndex37 = -1;\n        long currentMaxIndex38 = -1;\n   \
    \     long currentMaxIndex39 = -1;\n        long currentMaxIndex40 = -1;\n   \
    \     long currentMaxIndex41 = -1;\n        long currentMaxIndex42 = -1;\n   \
    \     long currentMaxIndex43 = -1;\n        long currentMaxIndex44 = -1;\n   \
    \     long currentMaxIndex45 = -1;\n        long currentMaxIndex46 = -1;\n   \
    \     long currentMaxIndex47 = -1;\n        long currentMaxIndex48 = -1;\n   \
    \     long currentMaxIndex49 = -1;\n        long currentMaxIndex50 = -1;\n   \
    \     long currentMaxIndex51 = -1;\n        long currentMaxIndex52 = -1;\n   \
    \     long currentMaxIndex53 = -1;\n        long currentMaxIndex54 = -1;\n   \
    \     long currentMaxIndex55 = -1;\n        long currentMax", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentMaxIndex = 0;\n        bool isMax = true;\n        foreach\
    \ (long number in numbers) {\n            if (number > max) {\n              \
    \  max = number;\n                currentMax = number;\n                currentMaxIndex\
    \ = numbers.IndexOf(number);\n            }\n            if (number == max) {\n\
    \                isMax = true;\n            }\n            else {\n          \
    \      isMax = false;\n            }\n            result.Add(number);\n      \
    \  }\n        if (isMax) {\n            result.Add(max);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long current = numbers.First();\n        long previous = current;\n\
    \        long currentMax = current;\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMax) {\n                result.Add(currentMax);\n\
    \                currentMax = number;\n            }\n            max = Math.Max(max,\
    \ currentMax);\n            previous = current;\n            current = number;\n\
    \        }\n        result.Add(currentMax);\n        result.Add(max);\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        long currentMax = 0;\n        long currentNumber = 0;\n  \
    \      foreach (long number in numbers) {\n            currentNumber = number;\n\
    \            currentMax = number;\n            while (currentNumber > currentMax)\
    \ {\n                currentMax = currentNumber;\n                currentNumber\
    \ -= 1;\n            }\n            result.Add(currentMax);\n        }\n     \
    \   return result;", "        List<long> rollingMax = new List<long>();\n    \
    \    long rollingMaxElement = numbers.First();\n        rollingMax.Add(rollingMaxElement);\n\
    \        numbers.Remove(rollingMaxElement);\n        foreach (long number in numbers)\
    \ {\n            if (number > rollingMaxElement) {\n                rollingMaxElement\
    \ = number;\n                rollingMax.Add(rollingMaxElement);\n            }\n\
    \        }\n        return rollingMax;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentSum = 0;\n        long currentSumOfSquares = 0;\n       \
    \ long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquares = 0;\n        long currentSumOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquares = 0;\n  \
    \      long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n\
    \        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSum"]
stop_tokens:
- "\n    }\n"
