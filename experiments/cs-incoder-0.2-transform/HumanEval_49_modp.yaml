name: HumanEval_49_modp
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> Modp((3L),\
  \ (5L))\n    // (3L)\n    // >>> Modp((1101L), (101L))\n    // (2L)\n    // >>>\
  \ Modp((0L), (101L))\n    // (1L)\n    // >>> Modp((3L), (11L))\n    // (8L)\n \
  \   // >>> Modp((100L), (101L))\n    // (1L)\n    public static long Modp(long n,\
  \ long p) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Modp((3L),\
  \ (5L)) == (3L));\n    Debug.Assert(Modp((1101L), (101L)) == (2L));\n    Debug.Assert(Modp((0L),\
  \ (101L)) == (1L));\n    Debug.Assert(Modp((3L), (11L)) == (8L));\n    Debug.Assert(Modp((100L),\
  \ (101L)) == (1L));\n    Debug.Assert(Modp((30L), (5L)) == (4L));\n    Debug.Assert(Modp((31L),\
  \ (5L)) == (3L));\n    }\n\n}\n"
completions: ["        long r = 1L;\n        while (r < p) {\n            long t =\
    \ r * r;\n            if (t < n) {\n                r += p;\n            } else\
    \ {\n                r -= p;\n            }\n        }\n        return r;", " \
    \       long r = 1L;\n        while (r < n) {\n            r *= p;\n        }\n\
    \        return r;", "        long res = 1L;\n        while (n != 0L) {\n    \
    \        res = (res * n) % p;\n            n /= 2L;\n        }\n        return\
    \ res;", "        long r = 1L;\n        while (r < p) {\n            r *= 2L;\n\
    \        }\n        return n % r;", "        long r = 1L;\n        while (n >\
    \ 0) {\n            long m = n & -p;\n            n ^= m;\n            r = (r\
    \ * m) % p;\n        }\n        return r;", "        long result = 1L;\n     \
    \   while (n > 0) {\n            result *= p;\n            result %= p;\n    \
    \        n -= 1;\n        }\n        return result;", "        long r = 1L;\n\
    \        while (n > 0) {\n            r = r * p % n;\n            n = n / 2;\n\
    \        }\n        return r;", "        long r = 1L;\n        while ((n & 1L)\
    \ != 0L) {\n            n >>= 1L;\n            r = (r * p) % p;\n        }\n \
    \       return r;", "        long r = 1L;\n        while ((n & 1L) != 0L) {\n\
    \            n >>= 1L;\n            r = (r * p) % p;\n        }\n        return\
    \ r;", "        long r = 1L;\n        while (n > 0) {\n            long t = r\
    \ * n; // t = r * n\n            if (t < p)\n                r = t + p;\n    \
    \        else\n                r = t - p;\n            n = n >> 1; // n = n /\
    \ 2\n        }\n        return r;", "        long r = 1L;\n        while (n >\
    \ 0) {\n            r = r * p + n % p;\n            n = n / p;\n        }\n  \
    \      return r;", "        long result = 1L;\n        while (n > 0) {\n     \
    \       long r = n % p;\n            result *= p;\n            result %= p;\n\
    \            n = r;\n        }\n        return result;", "        long r = 1L;\n\
    \        while (n-- > 0) {\n            r = (r * p) % p;\n        }\n        return\
    \ r;", "        long r = 1L;\n        while (n > 0) {\n            long m = n\
    \ & -p;\n            n ^= m;\n            r = (r * m) % p;\n        }\n      \
    \  return r;", "        long r = 1L;\n        while (n > 0) {\n            long\
    \ m = n & -p;\n            n >>= p;\n            r = r * m % p;\n        }\n \
    \       return r;", "        long r = 1L;\n        while (n > 0) {\n         \
    \   long m = n & -p;\n            n ^= m;\n            r = (r * m) % p;\n    \
    \    }\n        return r;", "        long r = 1L;\n        while (n > 0) {\n \
    \           long m = n & -p;\n            n ^= m;\n            r = (r * m) % p;\n\
    \        }\n        return r;", "        long r = 1L;\n        while (r < p) {\n\
    \            long t = r * r;\n            if (t < n) {\n                r += p;\n\
    \            }\n            else {\n                r += p - t;\n            }\n\
    \        }\n        return r;", "        long r = 1L;\n        while (n > 0) {\n\
    \            long m = n / p;\n            long r = r * m % p;\n            n =\
    \ m;\n        }\n        return r;", "        long r = 1L;\n        while (n >\
    \ 0) {\n            long m = n & -p;\n            n >>= p;\n            r = (r\
    \ * m) % p;\n        }\n        return r;"]
stop_tokens:
- "\n    }\n"
