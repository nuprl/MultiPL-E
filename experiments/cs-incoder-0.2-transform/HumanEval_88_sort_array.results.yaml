language: cs
name: HumanEval_88_sort_array
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        foreach (var item in array) {\n   \
    \         sum += item;\n        }\n        if (sum % 2 == 0) {\n            array.Sort();\n\
    \        } else {\n            array.Reverse();\n        }\n        return array;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14484b2cdb1c42e68298560ca20d801e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14484b2cdb1c42e68298560ca20d801e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in array) {\n            sum +=\
    \ i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n      \
    \      sum = sum / 2;\n            while (temp != sum) {\n                result.Add(temp);\n\
    \                temp = temp / 2;\n            }\n        } else {\n         \
    \   temp = sum;\n            sum = sum / 2;\n            while (temp != sum) {\n\
    \                result.Add(temp);\n                temp = temp / 2;\n       \
    \     }\n            temp = sum;\n            sum = sum / 2;\n            while\
    \ (temp != sum) {\n                result.Add(temp);\n                temp = temp\
    \ / 2;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf80fdc0f2fb45d28ef3991e1183e968>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf80fdc0f2fb45d28ef3991e1183e968>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long firstIndex = array.First();\n        long lastIndex = array.Last();\n\
    \        foreach (long i in array) {\n            sum += i;\n            if (sum\
    \ > lastSum) {\n                lastSum = sum;\n                firstSum = sum\
    \ - firstIndex;\n            }\n            if (sum < firstSum) {\n          \
    \      firstSum = sum;\n                lastSum = sum - lastIndex;\n         \
    \   }\n        }\n        if (sum % 2 == 0) {\n            array.Reverse();\n\
    \        }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x0000a] in <b7e9681f52a041ec886aa71f37a05910>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b7e9681f52a041ec886aa71f37a05910>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x0000a] in <b7e9681f52a041ec886aa71f37a05910>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b7e9681f52a041ec886aa71f37a05910>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        List<long> result\
    \ = new List<long>();\n        foreach (var item in array) {\n            sum\
    \ += item;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n\
    \            sum = sum / 2;\n            while (temp != 0) {\n               \
    \ result.Add(temp % 2);\n                temp = temp / 2;\n            }\n   \
    \     } else {\n            temp = sum;\n            sum = sum / 2;\n        \
    \    while (temp != 0) {\n                result.Add(temp % 2);\n            \
    \    temp = temp / 2;\n            }\n            temp = sum;\n            sum\
    \ = sum / 2;\n            while (temp != 0) {\n                result.Add(temp\
    \ % 2);\n                temp = temp / 2;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9571f74f922e41ff81e5fd849b0a0ae8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9571f74f922e41ff81e5fd849b0a0ae8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long maxSum = array.Sum();\n      \
    \  long minSum = array.Sum(x => x);\n        long midSum = maxSum / 2;\n     \
    \   long midMaxSum = maxSum / 2;\n        long midMinSum = minSum / 2;\n     \
    \   long midMidSum = midSum / 2;\n        long midMidMaxSum = midMaxSum / 2;\n\
    \        long midMidMinSum = midMinSum / 2;\n        long midMidMidSum = midMidSum\
    \ / 2;\n        long midMidMidMaxSum = midMidMaxSum / 2;\n        long midMidMidMinSum\
    \ = midMidMinSum / 2;\n        long midMidMidMidSum = midMidMidSum / 2;\n    \
    \    long midMidMidMidMaxSum = midMidMidMaxSum / 2;\n        long midMidMidMinSum\
    \ = midMidMidMinSum / 2;\n        long midMidMidMidSum = midMidMidMidSum / 2;\n\
    \        long midMidMidMidMaxSum = midMidMidMidMaxSum / 2;\n        long midMidMidMinSum\
    \ = midMidMidMinSum / 2;\n        long midMidMidMidSum = midMidMidMidSum / 2;\n\
    \        long midMidMidMidMaxSum = midMidMidMidMaxSum / 2;\n        long midMidMidMinSum\
    \ = midMidMidMinSum / 2;\n        long midMidMidMidSum = midMidMidMidSum / 2;\n\
    \        long midMidMidMidMaxSum = midMidMidMidMaxSum / 2;\n        long midMidMidMinSum\
    \ = midMidMidMinSum / 2;\n        long midMidMidMidSum = midMidMidMidSum / 2;\n\
    \        long midMidMidMidMaxSum = midMidMidMidMaxSum / 2;\n        long midMidMidMinSum\
    \ = midMidMidMinSum / 2;\n        long midMidMidMidSum = midMidMidMidSum / 2;\n\
    \        long midMidMidMidMaxSum = midMidMidMidMaxSum / 2;\n        long midMidMidMinSum\
    \ = midMidMidMinSum / 2;\n        long midMidMidMidSum = midMidMidMidSum / 2;\n\
    \        long midMidMidMidMaxSum = midMidMidMidMaxSum / 2;\n        long midMidMidMinSum\
    \ = midMidMidMinSum / 2;\n        long midMidMidMidSum = midMidMidMidSum / 2;\n\
    \        long midMidMidMidMaxSum = mid\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr4b77hzz.cs(58,38): error CS1002: ; expected

    '
  timestamp: 1659800866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        foreach (var item in array) {\n   \
    \         sum += item;\n        }\n        long odd = sum % 2 == 1 ? sum : sum\
    \ - 1;\n        long even = sum % 2 == 0 ? sum : sum + 1;\n        List<long>\
    \ result = new List<long>();\n        foreach (var item in array) {\n        \
    \    if (item > even && item < odd) {\n                result.Add(item);\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e86c83d1c5404b798898ddeddcb98833>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e86c83d1c5404b798898ddeddcb98833>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        long sum = 0;\n        long maxSum = array.Last();\n        foreach\
    \ (long i in array) {\n            sum += i;\n            if (sum > maxSum) {\n\
    \                maxSum = sum;\n            }\n        }\n        if (sum % 2\
    \ == 0) {\n            array.Sort((x, y) => y - x);\n        } else {\n      \
    \      array.Sort((x, y) => x - y);\n        }\n        return array;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp33iqfmfd.cs(36,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp33iqfmfd.cs(36,34): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmp33iqfmfd.cs(38,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp33iqfmfd.cs(38,34): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659800866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long first = 0;\n        long last\
    \ = 0;\n        bool odd = true;\n        bool even = true;\n        foreach (long\
    \ i in array) {\n            sum += i;\n            if (sum % 2 == 0) {\n    \
    \            even = false;\n            } else {\n                odd = true;\n\
    \            }\n            if (odd == true) {\n                first = i;\n \
    \           }\n            if (even == true) {\n                last = i;\n  \
    \          }\n        }\n        List<long> result = new List<long>();\n     \
    \   if (odd == true) {\n            foreach (long i in array) {\n            \
    \    if (i < first) {\n                    result.Add(i);\n                }\n\
    \                if (i > last) {\n                    result.Add(i);\n       \
    \         }\n            }\n        } else {\n            foreach (long i in array)\
    \ {\n                if (i > last) {\n                    result.Add(i);\n   \
    \             }\n                if (i < first) {\n                    result.Add(i);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c605f69aa824562b274b10f5b131485>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c605f69aa824562b274b10f5b131485>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long last = 0;\n        long first\
    \ = 0;\n        foreach (long i in array) {\n            sum += i;\n         \
    \   last = i;\n            first = i;\n        }\n        if (sum % 2 == 0) {\n\
    \            array.Sort();\n        } else {\n            array.Reverse();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <edcf0837c2d145e199527da129618824>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <edcf0837c2d145e199527da129618824>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long last\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ed9kler.cs(109,18): error CS1002: ; expected

    '
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastFirstSum = 0;\n        long firstLastSum = 0;\n     \
    \   long lastLastSum = 0;\n        long firstLastFirstSum = 0;\n        long lastFirstLastSum\
    \ = 0;\n        long firstLastLastSum = 0;\n        long lastFirstLastFirstSum\
    \ = 0;\n        long lastLastFirstSum = 0;\n        long lastLastLastSum = 0;\n\
    \        long lastLastLastFirstSum = 0;\n        long lastLastLastLastSum = 0;\n\
    \        long lastFirstLastLastSum = 0;\n        long lastFirstLastFirstSum =\
    \ 0;\n        long lastFirstSum = 0;\n        long lastSum = 0;\n        long\
    \ firstSum = 0;\n        long lastFirstSum = 0;\n        long lastLastSum = 0;\n\
    \        long firstLastSum = 0;\n        long lastFirstLastSum = 0;\n        long\
    \ lastLastFirstSum = 0;\n        long lastLastLastSum = 0;\n        long lastFirstLastSum\
    \ = 0;\n        long lastFirstLastFirstSum = 0;\n        long lastFirstLastLastSum\
    \ = 0;\n        long lastFirstLastLastFirstSum = 0;\n        long lastFirstLastLastLastSum\
    \ = 0;\n        long lastLastFirstSum = 0;\n        long lastLastSum = 0;\n  \
    \      long firstLastSum = 0;\n        long lastFirstLastSum = 0;\n        long\
    \ lastLastFirstSum = 0;\n        long lastLastLastSum = 0;\n        long firstLastLastSum\
    \ = 0;\n        long lastFirstLastFirstSum = 0;\n        long lastFirstLastLastSum\
    \ = 0;\n        long lastFirstLastLastFirstSum = 0;\n        long lastFirstLastLastLastSum\
    \ = 0;\n        long lastLastFirstSum = 0;\n        long lastLastSum = 0;\n  \
    \      long firstLastSum = 0;\n        long lastFirstLastSum = 0;\n        long\
    \ lastLastFirstSum = 0;\n        long lastLastLastSum = 0;\n        long firstLastLastSum\
    \ = 0;\n        long lastFirstLastFirstSum = 0;\n        long lastFirstLastLastSum\
    \ = 0;\n        long lastFirstLastLastFirstSum = 0;\n        long lastFirstLastLastLastSum\
    \ = 0;\n        long lastLastFirstSum = 0;\n        long lastLastSum = 0;\n  \
    \      long firstLastSum = 0;\n        long lastFirstLastSum = 0;\n        long\
    \ lastLastFirstSum = 0;\n        long lastLastLastSum = 0;\n        long firstLastLastSum\
    \ = 0;\n        long lastFirstLastFirstSum = 0;\n        long lastFirstLastLastSum\
    \ = 0;\n        long lastFirstLastLastFirstSum = 0;\n        \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4kz330a_.cs(42,14): error CS0128: A local variable or function named ''lastFirstLastFirstSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(43,14): error CS0128: A local variable or function named ''lastFirstSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(44,14): error CS0128: A local variable or function named ''lastSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(45,14): error CS0128: A local variable or function named ''firstSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(46,14): error CS0128: A local variable or function named ''lastFirstSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(47,14): error CS0128: A local variable or function named ''lastLastSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(48,14): error CS0128: A local variable or function named ''firstLastSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(49,14): error CS0128: A local variable or function named ''lastFirstLastSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(50,14): error CS0128: A local variable or function named ''lastLastFirstSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(51,14): error CS0128: A local variable or function named ''lastLastLastSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(52,14): error CS0128: A local variable or function named ''lastFirstLastSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(53,14): error CS0128: A local variable or function named ''lastFirstLastFirstSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(54,14): error CS0128: A local variable or function named ''lastFirstLastLastSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(57,14): error CS0128: A local variable or function named ''lastLastFirstSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(58,14): error CS0128: A local variable or function named ''lastLastSum''
    is already defined in this scope

    /tmp/tmp4kz3'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long lastSum2\
    \ = 0;\n        long lastSum3 = 0;\n        long lastSum4 = 0;\n        long lastSum5\
    \ = 0;\n        long lastSum6 = 0;\n        long lastSum7 = 0;\n        long lastSum8\
    \ = 0;\n        long lastSum9 = 0;\n        long lastSum10 = 0;\n        long\
    \ lastSum11 = 0;\n        long lastSum12 = 0;\n        long lastSum13 = 0;\n \
    \       long lastSum14 = 0;\n        long lastSum15 = 0;\n        long lastSum16\
    \ = 0;\n        long lastSum17 = 0;\n        long lastSum18 = 0;\n        long\
    \ lastSum19 = 0;\n        long lastSum20 = 0;\n        long lastSum21 = 0;\n \
    \       long lastSum22 = 0;\n        long lastSum23 = 0;\n        long lastSum24\
    \ = 0;\n        long lastSum25 = 0;\n        long lastSum26 = 0;\n        long\
    \ lastSum27 = 0;\n        long lastSum28 = 0;\n        long lastSum29 = 0;\n \
    \       long lastSum30 = 0;\n        long lastSum31 = 0;\n        long lastSum32\
    \ = 0;\n        long lastSum33 = 0;\n        long lastSum34 = 0;\n        long\
    \ lastSum35 = 0;\n        long lastSum36 = 0;\n        long lastSum37 = 0;\n \
    \       long lastSum38 = 0;\n        long lastSum39 = 0;\n        long lastSum40\
    \ = 0;\n        long lastSum41 = 0;\n        long lastSum42 = 0;\n        long\
    \ lastSum43 = 0;\n        long lastSum44 = 0;\n        long lastSum45 = 0;\n \
    \       long lastSum46 = 0;\n        long lastSum47 = 0;\n        long lastSum48\
    \ = 0;\n        long lastSum49 = 0;\n        long lastSum50 = 0;\n        long\
    \ lastSum51 = 0;\n        long lastSum52 = 0;\n        long lastSum53 = 0;\n \
    \       long lastSum54 = 0;\n        long lastSum55 = 0;\n        long lastSum56\
    \ = 0;\n        long lastSum57 = 0;\n        long lastSum58 = 0;\n        long\
    \ lastSum59 = 0;\n        long lastSum60 = 0;\n        long lastSum61 = 0;\n \
    \       long lastSum62 = 0;\n        long lastSum63 = 0;\n        long lastSum64\
    \ = 0;\n        long lastSum65 = 0;\n        long lastSum66 = 0;\n        long\
    \ lastSum67 = 0;\n        long lastSum68 = 0;\n        long lastSum69 = 0;\n \
    \       long lastSum70 = 0;\n        long lastSum71 = 0;\n        long lastSum72\
    \ = 0;\n        long lastSum73 = 0;\n        \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6ida170t.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmp6ida170t.cs(25,14): warning CS0219: The variable ''lastSum'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(26,14): warning CS0219: The variable ''lastSum2'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(27,14): warning CS0219: The variable ''lastSum3'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(28,14): warning CS0219: The variable ''lastSum4'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(29,14): warning CS0219: The variable ''lastSum5'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(30,14): warning CS0219: The variable ''lastSum6'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(31,14): warning CS0219: The variable ''lastSum7'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(32,14): warning CS0219: The variable ''lastSum8'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(33,14): warning CS0219: The variable ''lastSum9'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(34,14): warning CS0219: The variable ''lastSum10'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(35,14): warning CS0219: The variable ''lastSum11'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(36,14): warning CS0219: The variable ''lastSum12'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(37,14): warning CS0219: The variable ''lastSum13'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(38,14): warning CS0219: The variable ''lastSum14'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(39,14): warning CS0219: The variable ''lastSum15'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(40,14): warning CS0219: The variable ''lastSum16'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(41,14): warning CS0219: The variable ''lastSum17'' is assigned
    but'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastFirstSum = 0;\n        long firstLastSum = 0;\n     \
    \   long lastFirstLastSum = 0;\n        long firstLastFirstSum = 0;\n        long\
    \ lastFirstLastFirstSum = 0;\n        long firstLastFirstLastSum = 0;\n      \
    \  long lastFirstLastFirstLastSum = 0;\n        long firstLastFirstLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjh24wczb.cs(73,43): error CS1002: ; expected

    '
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        long firstIndex\
    \ = 0;\n        long lastIndex = 0;\n        bool isEvenSum = false;\n       \
    \ bool isOddSum = false;\n        bool isEvenSort = false;\n        bool isOddSort\
    \ = false;\n        bool isEvenSortOddSum = false;\n        bool isOddSortOddSum\
    \ = false;\n        bool isEvenSortOddSumOddSum = false;\n        bool isOddSortOddSumOddSum\
    \ = false;\n        bool isEvenSortOddSumOddSumOddSum = false;\n        bool isOddSortOddSumOddSumOddSum\
    \ = false;\n        bool isEvenSortOddSumOddSumOddSumOddSum = false;\n       \
    \ bool isOddSortOddSumOddSumOddSumOddSum = false;\n        bool isEvenSortOddSumOddSumOddSumOddSumOddSum\
    \ = false;\n        bool isOddSortOddSumOddSumOddSumOddSumOddSum = false;\n  \
    \      bool isEvenSortOddSumOddSumOddSumOddSumOddSumOddSum = false;\n        bool\
    \ isOddSortOddSumOddSumOddSumOddSumOddSumOddSum = false;\n        bool isEvenSortOddSumOddSumOddSumOddSumOddSumOddSum\
    \ = false;\n        bool isOddSortOddSumOddSumOddSumOddSumOddSumOddSum = false;\n\
    \        bool isEvenSortOddSumOddSumOddSumOddSumOddSumOddSumOddSum = false;\n\
    \        bool isOddSortOddSumOddSumOddSumOddSumOddSumOddSumOddSum = false;\n \
    \       bool isEvenSortOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSum = false;\n\
    \        bool isOddSortOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSum = false;\n\
    \        bool isEvenSortOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSum\
    \ = false;\n        bool isOddSortOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSum\
    \ = false;\n        bool isEvenSort\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpme5zz203.cs(52,24): error CS1002: ; expected

    '
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        long firstIndex\
    \ = 0;\n        long lastIndex = 0;\n        foreach (long i in array) {\n   \
    \         sum += i;\n            if (sum % 2 == 1) {\n                temp = sum;\n\
    \                firstIndex = i;\n                lastIndex = i;\n           \
    \ } else {\n                temp = sum;\n                firstIndex = i;\n   \
    \             lastIndex = i;\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        long firstIndexValue = 0;\n        long lastIndexValue\
    \ = 0;\n        long firstIndexValue2 = 0;\n        long lastIndexValue2 = 0;\n\
    \        long firstIndexValue3 = 0;\n        long lastIndexValue3 = 0;\n     \
    \   long firstIndexValue4 = 0;\n        long lastIndexValue4 = 0;\n        long\
    \ firstIndexValue5 = 0;\n        long lastIndexValue5 = 0;\n        long firstIndexValue6\
    \ = 0;\n        long lastIndexValue6 = 0;\n        long firstIndexValue7 = 0;\n\
    \        long lastIndexValue7 = 0;\n        long firstIndexValue8 = 0;\n     \
    \   long lastIndexValue8 = 0;\n        long firstIndexValue9 = 0;\n        long\
    \ lastIndexValue9 = 0;\n        long firstIndexValue10 = 0;\n        long lastIndexValue10\
    \ = 0;\n        long firstIndexValue11 = 0;\n        long lastIndexValue11 = 0;\n\
    \        long firstIndexValue12 = 0;\n        long lastIndexValue12 = 0;\n   \
    \     long firstIndexValue13 = 0;\n        long lastIndexValue13 = 0;\n      \
    \  long firstIndexValue14 = 0;\n        long lastIndexValue14 = 0;\n        long\
    \ firstIndexValue15 = 0;\n        long lastIndexValue15 = 0;\n        long firstIndexValue16\
    \ = 0;\n        long lastIndexValue16 = 0;\n        long firstIndexValue17 = 0;\n\
    \        long lastIndexValue17 = 0;\n        long firstIndexValue18 = 0;\n   \
    \     long lastIndexValue18 = 0;\n        long firstIndexValue19 = 0;\n      \
    \  long lastIndexValue19 = 0;\n        long firstIndexValue20 = 0;\n        long\
    \ lastIndexValue20 = 0;\n        long firstIndexValue21 = 0;\n        long lastIndexValue21\
    \ = 0;\n        long firstIndexValue22 = 0;\n        long lastIndexValue22 = 0;\n\
    \        long firstIndexValue23 = 0;\n        long lastIndexValue23 = 0;\n   \
    \     long firstIndexValue24 = 0;\n        long lastIndexValue24 = 0;\n      \
    \  long firstIndexValue25 = 0;\n        long lastIndexValue25 = 0;\n        long\
    \ firstIndexValue26 = 0;\n        long lastIndexValue26 = 0;\n        long firstIndexValue27\
    \ = 0;\n        long lastIndexValue27 = 0;\n        long firstIndexValue28 = 0;\n\
    \        long lastIndexValue28 = 0;\n        long firstIndexValue29 = 0;\n   \
    \     long lastIndexValue29 = 0;\n        long firstIndex\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzo1m2zdk.cs(99,24): error CS1002: ; expected

    '
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        bool isEven;\n\
    \        bool isOdd;\n        List<long> result = new List<long>();\n        foreach\
    \ (long i in array) {\n            sum += i;\n        }\n        isEven = sum\
    \ % 2 == 0;\n        isOdd = sum % 2 != 0;\n        if (isEven) {\n          \
    \  temp = array[0];\n            array[0] = array[array.Count - 1];\n        \
    \    array[array.Count - 1] = temp;\n        }\n        if (isOdd) {\n       \
    \     temp = array[0];\n            array[0] = array[array.Count - 1];\n     \
    \       array[array.Count - 1] = temp;\n        }\n        foreach (long i in\
    \ array) {\n            result.Add(i);\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x0005a] in <1aa83e9da20e4151ae8c9529cc653b59>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <1aa83e9da20e4151ae8c9529cc653b59>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x0005a] in <1aa83e9da20e4151ae8c9529cc653b59>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <1aa83e9da20e4151ae8c9529cc653b59>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in array) {\n          \
    \  sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n\
    \            sum = sum / 2;\n            while (temp != 0) {\n               \
    \ result.Add(sum);\n                temp = temp / 2;\n            }\n        }\
    \ else {\n            temp = sum;\n            sum = sum / 2;\n            while\
    \ (temp != 0) {\n                result.Add(sum);\n                temp = temp\
    \ / 2;\n            }\n            temp = sum;\n            sum = sum / 2;\n \
    \           while (temp != 0) {\n                result.Add(sum);\n          \
    \      temp = temp / 2;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e33444312ac84710a075dd46d51b3b60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e33444312ac84710a075dd46d51b3b60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        foreach (var item in array) {\n   \
    \         sum += item;\n        }\n        if (sum % 2 == 0) {\n            array.Sort();\n\
    \        } else {\n            array.Reverse();\n        }\n        return array;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14484b2cdb1c42e68298560ca20d801e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14484b2cdb1c42e68298560ca20d801e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long max = 0;\n        long min = 0;\n\
    \        long temp = 0;\n        long sum1 = 0;\n        long sum2 = 0;\n    \
    \    long sum3 = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long\
    \ sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long sum9\
    \ = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12 =\
    \ 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n\
    \        long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n \
    \       long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n  \
    \      long sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n   \
    \     long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n    \
    \    long sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n     \
    \   long sum31 = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n      \
    \  long sum34 = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n       \
    \ long sum37 = 0;\n        long sum38 = 0;\n        long sum39 = 0;\n        long\
    \ sum40 = 0;\n        long sum41 = 0;\n        long sum42 = 0;\n        long sum43\
    \ = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n        long sum46 =\
    \ 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n\
    \        long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n \
    \       long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n  \
    \      long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n   \
    \     long sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n    \
    \    long sum62 = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n     \
    \   long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n      \
    \  long sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n       \
    \ long sum71 = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n        long\
    \ sum74 = 0;\n        long sum75 = 0;\n        long sum76 = 0;\n        long sum77\
    \ = 0;\n        long sum78 = 0;\n        long sum79 = 0;\n        long sum80 =\
    \ 0;\n        long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph02f5kgw.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmph02f5kgw.cs(25,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmph02f5kgw.cs(26,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmph02f5kgw.cs(27,14): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmph02f5kgw.cs(28,14): warning CS0219: The variable ''sum1'' is assigned
    but its value is never used

    /tmp/tmph02f5kgw.cs(29,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmph02f5kgw.cs(30,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmph02f5kgw.cs(31,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmph02f5kgw.cs(32,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmph02f5kgw.cs(33,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmph02f5kgw.cs(34,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmph02f5kgw.cs(35,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmph02f5kgw.cs(36,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmph02f5kgw.cs(37,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmph02f5kgw.cs(38,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmph02f5kgw.cs(39,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmph02f5kgw.cs(40,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmph02f5kgw.cs(41,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmph02f5kgw.cs(42,14): warning CS0219: The'
  timestamp: 1659824389
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        long temp2\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long i\
    \ in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n\
    \            temp = sum;\n            while (temp > 0) {\n                temp2\
    \ = temp / 2;\n                result.Add(temp2);\n                temp -= temp2;\n\
    \            }\n        } else {\n            temp = sum;\n            while (temp\
    \ > 0) {\n                temp2 = temp / 2;\n                result.Add(temp2);\n\
    \                temp -= temp2;\n            }\n            temp = sum;\n    \
    \        while (temp > 0) {\n                temp2 = temp / 2;\n             \
    \   result.Add(temp2);\n                temp -= temp2;\n            }\n      \
    \  }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8697f3609ca4353ace8623eba176a6f>:0 \n"
  stdout: None
  timestamp: 1659824395
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long first = 0;\n        long last\
    \ = 0;\n        foreach (var item in array) {\n            sum += item;\n    \
    \        if (sum % 2 == 0) {\n                first = item;\n            } else\
    \ {\n                last = item;\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        if (sum % 2 == 0) {\n            result.AddRange(array.OrderBy(x\
    \ => x).Take(array.Count - 1).ToList());\n            result.AddRange(array.OrderByDescending(x\
    \ => x).Take(array.Count - 1).ToList());\n        } else {\n            result.AddRange(array.OrderByDescending(x\
    \ => x).Take(array.Count - 1).ToList());\n            result.AddRange(array.OrderBy(x\
    \ => x).Take(array.Count - 1).ToList());\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <53422bf4515a488890b37e51382a4eff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <53422bf4515a488890b37e51382a4eff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long maxSum = 0;\n        long minSum\
    \ = array.First();\n        foreach (long i in array) {\n            sum += i;\n\
    \            if (sum > maxSum) {\n                maxSum = sum;\n            }\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        if (sum % 2 == 0) {\n            array.Reverse();\n      \
    \  }\n        List<long> result = new List<long>();\n        long sum = 0;\n \
    \       long maxSum = 0;\n        long minSum = array.First();\n        foreach\
    \ (long i in array) {\n            sum += i;\n            if (sum > maxSum) {\n\
    \                maxSum = sum;\n            }\n            if (sum < minSum) {\n\
    \                minSum = sum;\n            }\n            result.Add(i);\n  \
    \      }\n        if (sum % 2 == 0) {\n            result.Reverse();\n       \
    \ }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe4d9nnt6.cs(40,14): error CS0128: A local variable or function named ''sum''
    is already defined in this scope

    /tmp/tmpe4d9nnt6.cs(41,14): error CS0128: A local variable or function named ''maxSum''
    is already defined in this scope

    /tmp/tmpe4d9nnt6.cs(42,14): error CS0128: A local variable or function named ''minSum''
    is already defined in this scope

    /tmp/tmpe4d9nnt6.cs(40,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpe4d9nnt6.cs(41,14): warning CS0219: The variable ''maxSum'' is assigned
    but its value is never used

    '
  timestamp: 1659824389
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long max = 0;\n        long min = 0;\n\
    \        foreach (var item in array) {\n            sum += item;\n           \
    \ if (sum > max) {\n                max = sum;\n            }\n            if\
    \ (sum < min) {\n                min = sum;\n            }\n        }\n      \
    \  if (sum % 2 == 0) {\n            array.Sort();\n        } else {\n        \
    \    array.Reverse();\n        }\n        return array;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b898a9a3b1914946948c905987d7b8a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b898a9a3b1914946948c905987d7b8a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long last\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ed9kler.cs(109,18): error CS1002: ; expected

    '
  timestamp: 1659800866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        foreach (var item in array) {\n   \
    \         sum += item;\n        }\n        if (sum % 2 == 0) {\n            array.Sort();\n\
    \        } else {\n            array.Reverse();\n        }\n        return array;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14484b2cdb1c42e68298560ca20d801e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14484b2cdb1c42e68298560ca20d801e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long last = 0;\n        long first\
    \ = 0;\n        foreach (long i in array) {\n            sum += i;\n         \
    \   last = i;\n        }\n        first = sum / 2;\n        if (sum % 2 == 0)\
    \ {\n            array.Reverse();\n        }\n        long mid = sum / 2;\n  \
    \      long mid2 = sum / 2;\n        long mid3 = sum / 2;\n        long mid4 =\
    \ sum / 2;\n        long mid5 = sum / 2;\n        long mid6 = sum / 2;\n     \
    \   long mid7 = sum / 2;\n        long mid8 = sum / 2;\n        long mid9 = sum\
    \ / 2;\n        long mid10 = sum / 2;\n        long mid11 = sum / 2;\n       \
    \ long mid12 = sum / 2;\n        long mid13 = sum / 2;\n        long mid14 = sum\
    \ / 2;\n        long mid15 = sum / 2;\n        long mid16 = sum / 2;\n       \
    \ long mid17 = sum / 2;\n        long mid18 = sum / 2;\n        long mid19 = sum\
    \ / 2;\n        long mid20 = sum / 2;\n        long mid21 = sum / 2;\n       \
    \ long mid22 = sum / 2;\n        long mid23 = sum / 2;\n        long mid24 = sum\
    \ / 2;\n        long mid25 = sum / 2;\n        long mid26 = sum / 2;\n       \
    \ long mid27 = sum / 2;\n        long mid28 = sum / 2;\n        long mid29 = sum\
    \ / 2;\n        long mid30 = sum / 2;\n        long mid31 = sum / 2;\n       \
    \ long mid32 = sum / 2;\n        long mid33 = sum / 2;\n        long mid34 = sum\
    \ / 2;\n        long mid35 = sum / 2;\n        long mid36 = sum / 2;\n       \
    \ long mid37 = sum / 2;\n        long mid38 = sum / 2;\n        long mid39 = sum\
    \ / 2;\n        long mid40 = sum / 2;\n        long mid41 = sum / 2;\n       \
    \ long mid42 = sum / 2;\n        long mid43 = sum / 2;\n        long mid44 = sum\
    \ / 2;\n        long mid45 = sum / 2;\n        long mid46 = sum / 2;\n       \
    \ long mid47 = sum / 2;\n        long mid48 = sum / 2;\n        long mid49 = sum\
    \ / 2;\n        long mid50 = sum / 2;\n        long mid51 = sum / 2;\n       \
    \ long mid52 = sum / 2;\n        long mid53 = sum\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0dn_99pb.cs(87,25): error CS1002: ; expected

    '
  timestamp: 1659824389
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        long sumOfFirstIndexValue\
    \ = 0;\n        long sumOfLastIndexValue = 0;\n        long firstIndexValue =\
    \ 0;\n        long lastIndexValue = 0;\n        bool isEvenSum = false;\n    \
    \    bool isOddSum = false;\n        List<long> result = new List<long>();\n \
    \       foreach (long i in array) {\n            sum = sum + i;\n            sumOfFirstIndexValue\
    \ = sumOfFirstIndexValue + i;\n            sumOfLastIndexValue = sumOfLastIndexValue\
    \ + i;\n        }\n        if (sumOfFirstIndexValue % 2 == 0) {\n            isEvenSum\
    \ = true;\n        }\n        else {\n            isEvenSum = false;\n       \
    \ }\n        if (sumOfLastIndexValue % 2 == 0) {\n            isOddSum = true;\n\
    \        }\n        else {\n            isOddSum = false;\n        }\n       \
    \ if (sumOfFirstIndexValue > sumOfLastIndexValue) {\n            temp = sumOfFirstIndexValue;\n\
    \            sumOfFirstIndexValue = sumOfLastIndexValue;\n            sumOfLastIndexValue\
    \ = temp;\n        }\n        if (isEvenSum) {\n            if (isOddSum) {\n\
    \                result.Add(sumOfFirstIndexValue);\n                result.Add(sumOfLastIndexValue);\n\
    \            }\n            else {\n                result.Add(sumOfFirstIndexValue);\n\
    \            }\n        }\n        else {\n            if (isOddSum) {\n     \
    \           result.Add(sumOfLastIndexValue);\n                result.Add(sumOfFirstIndexValue);\n\
    \            }\n            else {\n                result.Add(sumOfLastIndexValue);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <654d388f044c48bd83d40775addb5668>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <654d388f044c48bd83d40775addb5668>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long last = 0;\n        long first\
    \ = 0;\n        foreach (var item in array) {\n            sum += item;\n    \
    \        last = item;\n            first = item;\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.Sort((x, y) => y - x);\n        } else {\n    \
    \        array.Sort((x, y) => x - y);\n        }\n        return array;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjk4e32zn.cs(33,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpjk4e32zn.cs(33,34): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmpjk4e32zn.cs(35,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpjk4e32zn.cs(35,34): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659824389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        long sumEven\
    \ = 0;\n        long sumOdd = 0;\n        long tempEven = 0;\n        long tempOdd\
    \ = 0;\n        long firstIndex = 0;\n        long lastIndex = 0;\n        long\
    \ evenSum = 0;\n        long oddSum = 0;\n        long evenSumEven = 0;\n    \
    \    long evenSumOdd = 0;\n        long oddSumEven = 0;\n        long oddSumOdd\
    \ = 0;\n        long evenSumEvenEven = 0;\n        long evenSumEvenOdd = 0;\n\
    \        long oddSumEvenEven = 0;\n        long oddSumEvenOdd = 0;\n        long\
    \ evenSumOddEven = 0;\n        long evenSumOddOdd = 0;\n        long oddSumOddEven\
    \ = 0;\n        long oddSumOddOdd = 0;\n        long evenSumEvenEvenEven = 0;\n\
    \        long evenSumEvenOdd = 0;\n        long oddSumEvenEven = 0;\n        long\
    \ oddSumEvenOdd = 0;\n        long evenSumOddEven = 0;\n        long evenSumOddOdd\
    \ = 0;\n        long oddSumOddEven = 0;\n        long oddSumOddOdd = 0;\n    \
    \    long evenSumEvenEvenEven = 0;\n        long evenSumEvenOdd = 0;\n       \
    \ long oddSumEvenEven = 0;\n        long oddSumEvenOdd = 0;\n        long evenSumOddEven\
    \ = 0;\n        long evenSumOddOdd = 0;\n        long oddSumOddEven = 0;\n   \
    \     long oddSumOddOdd = 0;\n        long evenSumEvenEvenEven = 0;\n        long\
    \ evenSumEvenOdd = 0;\n        long oddSumEvenEven = 0;\n        long oddSumEvenOdd\
    \ = 0;\n        long evenSumOddEven = 0;\n        long evenSumOddOdd = 0;\n  \
    \      long oddSumOddEven = 0;\n        long oddSumOddOdd = 0;\n        long evenSumEvenEvenEven\
    \ = 0;\n        long evenSumEvenOdd = 0;\n        long oddSumEvenEven = 0;\n \
    \       long oddSumEvenOdd = 0;\n        long evenSumOddEven = 0;\n        long\
    \ evenSumOddOdd = 0;\n        long oddSumOddEven = 0;\n        long oddSumOddOdd\
    \ = 0;\n        long evenSumEvenEvenEven = 0;\n        long evenSumEvenOdd = 0;\n\
    \        long oddSumEvenEven = 0;\n        long oddSumEvenOdd = 0;\n        long\
    \ evenSumOddEven = 0;\n        long evenSumOddOdd = 0;\n        long oddSumO\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpliw2d68x.cs(84,21): error CS1002: ; expected

    '
  timestamp: 1659824389
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        foreach (var item in array) {\n   \
    \         sum += item;\n        }\n        if (sum % 2 == 0) {\n            array.Sort();\n\
    \        } else {\n            array.Reverse();\n        }\n        return array;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14484b2cdb1c42e68298560ca20d801e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14484b2cdb1c42e68298560ca20d801e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        long first = 0;\n\
    \        long last = 0;\n        long sumOfFirst = 0;\n        long sumOfLast\
    \ = 0;\n        bool isEven = array.Count % 2 == 0;\n        bool isOdd = !isEven;\n\
    \        bool isFirstOdd = isEven ? true : false;\n        bool isLastOdd = isEven\
    \ ? false : true;\n        bool isFirstEven = isOdd ? true : false;\n        bool\
    \ isLastEven = isOdd ? false : true;\n        bool isFirstSumOdd = isFirstOdd\
    \ ? true : false;\n        bool isLastSumOdd = isFirstOdd ? false : true;\n  \
    \      bool isFirstSumEven = isFirstEven ? true : false;\n        bool isLastSumEven\
    \ = isFirstEven ? false : true;\n        bool isFirstSumSumOdd = isFirstSumOdd\
    \ ? true : false;\n        bool isLastSumSumOdd = isFirstSumOdd ? false : true;\n\
    \        bool isFirstSumSumEven = isFirstSumEven ? true : false;\n        bool\
    \ isLastSumSumEven = isFirstSumEven ? false : true;\n        bool isFirstSumSumSumOdd\
    \ = isFirstSumSumOdd ? true : false;\n        bool isLastSumSumSumOdd = isFirstSumSumOdd\
    \ ? false : true;\n        bool isFirstSumSumSumEven = isFirstSumSumEven ? true\
    \ : false;\n        bool isLastSumSumSumEven = isFirstSumSumEven ? false : true;\n\
    \        bool isFirstSumSumSumSumOdd = isFirstSumSumSumOdd ? true : false;\n \
    \       bool isLastSumSumSumSumOdd = isFirstSumSumSumOdd ? false : true;\n   \
    \     bool isFirstSumSumSumSumEven = isFirstSumSumSumEven ? true : false;\n  \
    \      bool isLastSumSumSumSumEven = isFirstSumSumSumEven ? false : true;\n  \
    \      bool isFirstSumSumSumSumSumOdd = isFirstSumSumSumSumOdd ? true : false;\n\
    \        bool isLastSumSumSumSumOdd = isFirstSumSumSumSumOdd ? false : true;\n\
    \        bool isFirstSumSumSumSumSumEven = isFirstSumSumSumSumEven ? true : false;\n\
    \        bool isLastSumSumSumSumSumEven = isFirstSumSumSumSumEven ? false : true;\n\
    \        bool isFirstSumSumSumSumSumSumOdd = \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdy91y8c7.cs(56,44): error CS1525: Invalid expression term ''}''

    /tmp/tmpdy91y8c7.cs(56,44): error CS1002: ; expected

    '
  timestamp: 1659824389
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count < 2)\n            return array;\n        long\
    \ sum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        foreach\
    \ (long i in array) {\n            sum += i;\n            lastSum += i;\n    \
    \        firstSum += i;\n        }\n        if (sum % 2 == 0)\n            return\
    \ array.OrderByDescending(i => i).ToList();\n        return array.OrderBy(i =>\
    \ i).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5a90352a6cd7424ea573af3163019149>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5a90352a6cd7424ea573af3163019149>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824390
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        long temp2\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long i\
    \ in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n\
    \            temp = sum;\n            while (temp > 0) {\n                temp2\
    \ = temp;\n                temp -= temp2;\n                result.Add(temp2);\n\
    \            }\n        } else {\n            temp = sum;\n            while (temp\
    \ > 0) {\n                temp2 = temp;\n                temp -= temp2;\n    \
    \            result.Add(temp2);\n            }\n            temp = sum;\n    \
    \        while (temp > 0) {\n                temp2 = temp;\n                temp\
    \ -= temp2;\n                result.Add(temp2);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <81ef0b14c9504b49a48aca750cde5ce5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <81ef0b14c9504b49a48aca750cde5ce5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long last\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ed9kler.cs(109,18): error CS1002: ; expected

    '
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count < 2)\n            return array;\n        long\
    \ sum = 0;\n        long sum1 = 0;\n        long sum2 = 0;\n        long sum3\
    \ = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdxrjkatt.cs(110,19): error CS1002: ; expected

    '
  timestamp: 1659824389
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        long first = 0;\n\
    \        long last = 0;\n        long mid = 0;\n        List<long> result = new\
    \ List<long>();\n        foreach (long i in array) {\n            sum += i;\n\
    \            if (sum % 2 == 0) {\n                temp = sum;\n              \
    \  first = i;\n                last = temp;\n                mid = temp / 2;\n\
    \                result.Add(first);\n                result.Add(last);\n     \
    \           result.Add(mid);\n            } else {\n                temp = sum;\n\
    \                first = i;\n                last = temp;\n                mid\
    \ = temp / 2;\n                result.Add(last);\n                result.Add(mid);\n\
    \                result.Add(first);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <98d35dff3a4c4db58120831bb23fb671>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <98d35dff3a4c4db58120831bb23fb671>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long last\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ed9kler.cs(109,18): error CS1002: ; expected

    '
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in array) {\n          \
    \  sum += i;\n        }\n        if (sum % 2 == 1) {\n            temp = sum;\n\
    \            sum = sum / 2;\n            foreach (long i in array) {\n       \
    \         sum += i;\n            }\n            temp = sum;\n            sum =\
    \ temp;\n            foreach (long i in array) {\n                result.Add(i);\n\
    \            }\n        } else {\n            temp = sum;\n            sum = sum\
    \ / 2;\n            foreach (long i in array) {\n                sum += i;\n \
    \           }\n            temp = sum;\n            sum = temp;\n            foreach\
    \ (long i in array) {\n                result.Add(i);\n            }\n       \
    \     temp = sum;\n            sum = temp;\n            foreach (long i in array)\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a215aa12a0fe499fad2a83b426a3d0d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a215aa12a0fe499fad2a83b426a3d0d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824390
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long first = 0;\n        long last\
    \ = 0;\n        foreach (long i in array) {\n            sum += i;\n         \
    \   if (sum % 2 == 0) {\n                first = i;\n            } else {\n  \
    \              last = i;\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        if (sum % 2 == 0) {\n            foreach (long\
    \ i in array) {\n                if (i <= last) {\n                    result.Add(i);\n\
    \                }\n            }\n        } else {\n            foreach (long\
    \ i in array) {\n                if (i >= first) {\n                    result.Add(i);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <77a0ef0120574a51854eaf96941df6d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <77a0ef0120574a51854eaf96941df6d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum1 = 0;\n        long sum2 =\
    \ 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n\
    \        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n    \
    \    long sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n      \
    \  long sum12 = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n       \
    \ long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n        long\
    \ sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long sum21\
    \ = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24 =\
    \ 0;\n        long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n\
    \        long sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n \
    \       long sum31 = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n  \
    \      long sum34 = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n   \
    \     long sum37 = 0;\n        long sum38 = 0;\n        long sum39 = 0;\n    \
    \    long sum40 = 0;\n        long sum41 = 0;\n        long sum42 = 0;\n     \
    \   long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n      \
    \  long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n       \
    \ long sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long\
    \ sum52 = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55\
    \ = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n        long sum58 =\
    \ 0;\n        long sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n\
    \        long sum62 = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n \
    \       long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n  \
    \      long sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n   \
    \     long sum71 = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n    \
    \    long sum74 = 0;\n        long sum75 = 0;\n        long sum76 = 0;\n     \
    \   long sum77 = 0;\n        long sum78 = 0;\n        long sum79 = 0;\n      \
    \  long sum80 = 0;\n        long sum81 = 0;\n        long sum82 = 0;\n       \
    \ long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n        long\
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpynmwdonl.cs(110,13): error CS1001: Identifier expected

    /tmp/tmpynmwdonl.cs(110,13): error CS1002: ; expected

    '
  timestamp: 1659824389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long last = 0;\n        long first\
    \ = 0;\n        long temp = 0;\n        bool evenSum = false;\n        bool oddSum\
    \ = false;\n        foreach (long i in array) {\n            sum += i;\n     \
    \       if (sum % 2 == 0) {\n                evenSum = true;\n            }\n\
    \            else {\n                oddSum = true;\n            }\n         \
    \   if (evenSum) {\n                first = i;\n            }\n            if\
    \ (oddSum) {\n                last = i;\n            }\n        }\n        if\
    \ (evenSum) {\n            temp = first;\n            first = last;\n        \
    \    last = temp;\n        }\n        if (oddSum) {\n            temp = last;\n\
    \            last = first;\n            first = temp;\n        }\n        List<long>\
    \ result = new List<long>();\n        long tempSum = 0;\n        long tempSum2\
    \ = 0;\n        long tempSum3 = 0;\n        long tempSum4 = 0;\n        long tempSum5\
    \ = 0;\n        long tempSum6 = 0;\n        long tempSum7 = 0;\n        long tempSum8\
    \ = 0;\n        long tempSum9 = 0;\n        long tempSum10 = 0;\n        long\
    \ tempSum11 = 0;\n        long tempSum12 = 0;\n        long tempSum13 = 0;\n \
    \       long tempSum14 = 0;\n        long tempSum15 = 0;\n        long tempSum16\
    \ = 0;\n        long tempSum17 = 0;\n        long tempSum18 = 0;\n        long\
    \ tempSum19 = 0;\n        long tempSum20 = 0;\n        long tempSum21 = 0;\n \
    \       long tempSum22 = 0;\n        long tempSum23 = 0;\n        long tempSum24\
    \ = 0;\n        long tempSum25 = 0;\n        long tempSum26 = 0;\n        long\
    \ tempSum27 = 0;\n        long tempSum28 = 0;\n        long tempSum29 = 0;\n \
    \       long tempSum30 = 0;\n        long tempSum31 = 0;\n        long tempSum32\
    \ = 0;\n        long tempSum33 = 0;\n        long tempSum34 = 0;\n        long\
    \ tempSum35 = 0;\n        long tempSum36 = 0;\n        long tempSum37 = 0;\n \
    \       long tempSum38 = 0;\n        long tempSum39 = 0;\n        long tempSum40\
    \ = 0;\n        long tempSum41 = 0;\n        long tempSum42 = 0;\n        long\
    \ tempSum43 = 0;\n        long tempSum44 = 0;\n        long tempSum45 = 0;\n \
    \       long tempSum46 = 0;\n        long tempSum47 = 0;\n        long tempSum48\
    \ = 0;\n        long tempSum49 = 0;\n        long tempSum50 = 0;\n        long\
    \ tempSum51 = 0;\n        long tempSum52 = 0;\n        long tempSum53 = 0;\n \
    \       long tempSum\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n \
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzyjf0bme.cs(109,21): error CS1002: ; expected

    '
  timestamp: 1659824389
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in array) {\n          \
    \  sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n\
    \            sum = sum / 2;\n            while (temp != sum) {\n             \
    \   result.Add(temp);\n                temp = temp / 2;\n            }\n     \
    \   } else {\n            temp = sum;\n            sum = sum / 2;\n          \
    \  while (temp != sum) {\n                result.Add(temp);\n                temp\
    \ = temp / 2;\n            }\n            temp = sum;\n            sum = sum /\
    \ 2;\n            while (temp != sum) {\n                result.Add(temp);\n \
    \               temp = temp / 2;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f38e8d3cb8446d48b0cf7a84ef2cf5e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f38e8d3cb8446d48b0cf7a84ef2cf5e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824390
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        long first\
    \ = 0;\n        long last = 0;\n        long mid = 0;\n        bool isEven = false;\n\
    \        bool isOdd = false;\n        bool isFirst = true;\n        bool isLast\
    \ = true;\n        bool isMid = true;\n        List<long> result = new List<long>();\n\
    \        foreach (long i in array) {\n            sum += i;\n            if (sum\
    \ % 2 == 0) {\n                isEven = true;\n            } else {\n        \
    \        isEven = false;\n            }\n            if (isEven) {\n         \
    \       if (isFirst) {\n                    first = i;\n                    isFirst\
    \ = false;\n                } else {\n                    last = i;\n        \
    \            isLast = false;\n                }\n            } else {\n      \
    \          if (isMid) {\n                    mid = i;\n                    isMid\
    \ = false;\n                } else {\n                    result.Add(i);\n   \
    \             }\n            }\n        }\n        if (isFirst) {\n          \
    \  result.Add(first);\n        }\n        if (isLast) {\n            result.Add(last);\n\
    \        }\n        if (isMid) {\n            result.Add(mid);\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc1d2fb4b2c54c1ab905dc4bcf254999>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc1d2fb4b2c54c1ab905dc4bcf254999>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum1 = 0;\n        long sum2 =\
    \ 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n\
    \        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n    \
    \    long sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n      \
    \  long sum12 = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n       \
    \ long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n        long\
    \ sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long sum21\
    \ = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24 =\
    \ 0;\n        long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n\
    \        long sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n \
    \       long sum31 = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n  \
    \      long sum34 = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n   \
    \     long sum37 = 0;\n        long sum38 = 0;\n        long sum39 = 0;\n    \
    \    long sum40 = 0;\n        long sum41 = 0;\n        long sum42 = 0;\n     \
    \   long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n      \
    \  long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n       \
    \ long sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long\
    \ sum52 = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55\
    \ = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n        long sum58 =\
    \ 0;\n        long sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n\
    \        long sum62 = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n \
    \       long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n  \
    \      long sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n   \
    \     long sum71 = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n    \
    \    long sum74 = 0;\n        long sum75 = 0;\n        long sum76 = 0;\n     \
    \   long sum77 = 0;\n        long sum78 = 0;\n        long sum79 = 0;\n      \
    \  long sum80 = 0;\n        long sum81 = 0;\n        long sum82 = 0;\n       \
    \ long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n        long\
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpynmwdonl.cs(110,13): error CS1001: Identifier expected

    /tmp/tmpynmwdonl.cs(110,13): error CS1002: ; expected

    '
  timestamp: 1659824389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum1 = 0;\n        long sum2 =\
    \ 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n\
    \        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n    \
    \    long sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n      \
    \  long sum12 = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n       \
    \ long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n        long\
    \ sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long sum21\
    \ = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24 =\
    \ 0;\n        long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n\
    \        long sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n \
    \       long sum31 = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n  \
    \      long sum34 = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n   \
    \     long sum37 = 0;\n        long sum38 = 0;\n        long sum39 = 0;\n    \
    \    long sum40 = 0;\n        long sum41 = 0;\n        long sum42 = 0;\n     \
    \   long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n      \
    \  long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n       \
    \ long sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long\
    \ sum52 = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55\
    \ = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n        long sum58 =\
    \ 0;\n        long sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n\
    \        long sum62 = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n \
    \       long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n  \
    \      long sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n   \
    \     long sum71 = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n    \
    \    long sum74 = 0;\n        long sum75 = 0;\n        long sum76 = 0;\n     \
    \   long sum77 = 0;\n        long sum78 = 0;\n        long sum79 = 0;\n      \
    \  long sum80 = 0;\n        long sum81 = 0;\n        long sum82 = 0;\n       \
    \ long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n        long\
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpynmwdonl.cs(110,13): error CS1001: Identifier expected

    /tmp/tmpynmwdonl.cs(110,13): error CS1002: ; expected

    '
  timestamp: 1659824389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        long first = 0;\n\
    \        long last = 0;\n        foreach (long i in array) {\n            sum\
    \ += i;\n            if (sum % 2 == 0) {\n                temp = sum;\n      \
    \          first = i;\n            } else {\n                last = i;\n     \
    \       }\n        }\n        List<long> result = new List<long>();\n        long\
    \ mid = first + (last - first) / 2;\n        long mid2 = mid / 2;\n        while\
    \ (first <= last) {\n            if (array[first] < array[mid]) {\n          \
    \      result.Add(array[first++]);\n            } else {\n                result.Add(array[mid++]);\n\
    \            }\n        }\n        while (first <= mid2) {\n            if (array[first]\
    \ < array[mid]) {\n                result.Add(array[first++]);\n            }\
    \ else {\n                result.Add(array[mid++]);\n            }\n        }\n\
    \        while (first <= mid2) {\n            if (array[first] < array[mid]) {\n\
    \                result.Add(array[first++]);\n            } else {\n         \
    \       result.Add(array[mid++]);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjt1fmyvb.cs(41,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpjt1fmyvb.cs(41,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpjt1fmyvb.cs(42,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpjt1fmyvb.cs(44,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpjt1fmyvb.cs(48,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpjt1fmyvb.cs(48,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpjt1fmyvb.cs(49,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpjt1fmyvb.cs(51,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpjt1fmyvb.cs(55,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpjt1fmyvb.cs(55,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpjt1fmyvb.cs(56,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpjt1fmyvb.cs(58,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long first = 0;\n        long last\
    \ = 0;\n        foreach (long i in array) {\n            sum += i;\n         \
    \   if (sum % 2 == 0) {\n                first = i;\n            } else {\n  \
    \              last = i;\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        long mid = first + last;\n        if (mid % 2 ==\
    \ 0) {\n            mid = mid / 2;\n        }\n        long mid2 = mid + 1;\n\
    \        long mid3 = mid + 2;\n        long mid4 = mid + 3;\n        long mid5\
    \ = mid + 4;\n        long mid6 = mid + 5;\n        long mid7 = mid + 6;\n   \
    \     long mid8 = mid + 7;\n        long mid9 = mid + 8;\n        long mid10 =\
    \ mid + 9;\n        long mid11 = mid + 10;\n        long mid12 = mid + 11;\n \
    \       long mid13 = mid + 12;\n        long mid14 = mid + 13;\n        long mid15\
    \ = mid + 14;\n        long mid16 = mid + 15;\n        long mid17 = mid + 16;\n\
    \        long mid18 = mid + 17;\n        long mid19 = mid + 18;\n        long\
    \ mid20 = mid + 19;\n        long mid21 = mid + 20;\n        long mid22 = mid\
    \ + 21;\n        long mid23 = mid + 22;\n        long mid24 = mid + 23;\n    \
    \    long mid25 = mid + 24;\n        long mid26 = mid + 25;\n        long mid27\
    \ = mid + 26;\n        long mid28 = mid + 27;\n        long mid29 = mid + 28;\n\
    \        long mid30 = mid + 29;\n        long mid31 = mid + 30;\n        long\
    \ mid32 = mid + 31;\n        long mid33 = mid + 32;\n        long mid34 = mid\
    \ + 33;\n        long mid35 = mid + 34;\n        long mid36 = mid + 35;\n    \
    \    long mid37 = mid + 36;\n        long mid38 = mid + 37;\n        long mid39\
    \ = mid + 38;\n        long mid40 = mid + 39;\n        long mid41 = mid + 40;\n\
    \        long mid42 = mid + 41;\n        long mid43 = mid + 42;\n        long\
    \ mid44 = mid + 43;\n        long mid45 = mid + 44;\n        long mid46 = mid\
    \ + 45;\n        long mid47 = mid + 46;\n        long mid48 = mid + 47;\n    \
    \    long mid49 = mid + 48;\n        long mid50 = mid + 49;\n        long mid5\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptskjd3as.cs(89,18): error CS1002: ; expected

    '
  timestamp: 1659824389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long maxSum = 0;\n        long minSum\
    \ = array.First();\n        foreach (long i in array) {\n            sum += i;\n\
    \            if (sum > maxSum) {\n                maxSum = sum;\n            }\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        if (sum % 2 == 1) {\n            array.Reverse();\n      \
    \  }\n        long midSum = sum / 2;\n        long midMaxSum = maxSum / 2;\n \
    \       long midMinSum = minSum / 2;\n        long midSum2 = midSum / 2;\n   \
    \     long midMaxSum2 = midMaxSum / 2;\n        long midMinSum2 = midMinSum /\
    \ 2;\n        long midSum3 = midSum2 / 2;\n        long midMaxSum3 = midMaxSum2\
    \ / 2;\n        long midMinSum3 = midMinSum2 / 2;\n        long midSum4 = midSum3\
    \ / 2;\n        long midMaxSum4 = midMaxSum3 / 2;\n        long midMinSum4 = midMinSum3\
    \ / 2;\n        long midSum5 = midSum4 / 2;\n        long midMaxSum5 = midMaxSum4\
    \ / 2;\n        long midMinSum5 = midMinSum4 / 2;\n        long midSum6 = midSum5\
    \ / 2;\n        long midMaxSum6 = midMaxSum5 / 2;\n        long midMinSum6 = midMinSum5\
    \ / 2;\n        long midSum7 = midSum6 / 2;\n        long midMaxSum7 = midMaxSum6\
    \ / 2;\n        long midMinSum7 = midMinSum6 / 2;\n        long midSum8 = midSum7\
    \ / 2;\n        long midMaxSum8 = midMaxSum7 / 2;\n        long midMinSum8 = midMinSum7\
    \ / 2;\n        long midSum9 = midSum8 / 2;\n        long midMaxSum9 = midMaxSum8\
    \ / 2;\n        long midMinSum9 = midMinSum8 / 2;\n        long midSum10 = midSum9\
    \ / 2;\n        long midMaxSum10 = midMaxSum9 / 2;\n        long midMinSum10 =\
    \ midMinSum9 / 2;\n        long midSum11 = midSum10 / 2;\n        long midMaxSum11\
    \ = midMaxSum10 / 2;\n        long midMinSum11 = midMinSum10 / 2;\n        long\
    \ midSum12 = midSum11 / 2;\n        long midMaxSum12 = midMaxSum11 / 2;\n    \
    \    long midMinSum12 = midMinSum11 / 2;\n        long mid\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq600mrll.cs(75,17): error CS1002: ; expected

    '
  timestamp: 1659824389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long last = 0;\n        long first\
    \ = 0;\n        long mid = 0;\n        long temp = 0;\n        long sum1 = 0;\n\
    \        long sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n    \
    \    long sum5 = 0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long\
    \ sum8 = 0;\n        long sum9 = 0;\n        long sum10 = 0;\n        long sum11\
    \ = 0;\n        long sum12 = 0;\n        long sum13 = 0;\n        long sum14 =\
    \ 0;\n        long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n\
    \        long sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n \
    \       long sum21 = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n  \
    \      long sum24 = 0;\n        long sum25 = 0;\n        long sum26 = 0;\n   \
    \     long sum27 = 0;\n        long sum28 = 0;\n        long sum29 = 0;\n    \
    \    long sum30 = 0;\n        long sum31 = 0;\n        long sum32 = 0;\n     \
    \   long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n      \
    \  long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n       \
    \ long sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long\
    \ sum42 = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45\
    \ = 0;\n        long sum46 = 0;\n        long sum47 = 0;\n        long sum48 =\
    \ 0;\n        long sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n\
    \        long sum52 = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n \
    \       long sum55 = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n  \
    \      long sum58 = 0;\n        long sum59 = 0;\n        long sum60 = 0;\n   \
    \     long sum61 = 0;\n        long sum62 = 0;\n        long sum63 = 0;\n    \
    \    long sum64 = 0;\n        long sum65 = 0;\n        long sum66 = 0;\n     \
    \   long sum67 = 0;\n        long sum68 = 0;\n        long sum69 = 0;\n      \
    \  long sum70 = 0;\n        long sum71 = 0;\n        long sum72 = 0;\n       \
    \ long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n        long\
    \ sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long sum79\
    \ = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82 =\
    \ 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6fzaaiew.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmp6fzaaiew.cs(25,14): warning CS0219: The variable ''last'' is assigned
    but its value is never used

    /tmp/tmp6fzaaiew.cs(26,14): warning CS0219: The variable ''first'' is assigned
    but its value is never used

    /tmp/tmp6fzaaiew.cs(27,14): warning CS0219: The variable ''mid'' is assigned but
    its value is never used

    /tmp/tmp6fzaaiew.cs(28,14): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmp6fzaaiew.cs(29,14): warning CS0219: The variable ''sum1'' is assigned
    but its value is never used

    /tmp/tmp6fzaaiew.cs(30,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmp6fzaaiew.cs(31,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmp6fzaaiew.cs(32,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmp6fzaaiew.cs(33,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmp6fzaaiew.cs(34,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmp6fzaaiew.cs(35,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmp6fzaaiew.cs(36,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmp6fzaaiew.cs(37,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmp6fzaaiew.cs(38,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmp6fzaaiew.cs(39,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmp6fzaaiew.cs(40,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmp6fzaaiew.cs(41,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmp6fzaaiew.cs(42,14): warning CS0219: Th'
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        foreach (var item in array) {\n   \
    \         sum += item;\n        }\n        bool isEven = sum % 2 == 0;\n     \
    \   long maxValue = array.Max();\n        long minValue = array.Min();\n     \
    \   long midValue = array.Count > 0 ? array[0] : 0;\n        long firstIndex =\
    \ array.FindIndex(item => item == minValue);\n        long lastIndex = array.FindIndex(item\
    \ => item == maxValue);\n        long middleIndex = firstIndex + (lastIndex -\
    \ firstIndex) / 2;\n        long middleValue = array[middleIndex];\n        long\
    \ middleSum = middleValue + array[middleIndex - 1];\n        long middleSum2 =\
    \ middleValue + array[middleIndex + 1];\n        long middleSum3 = middleValue\
    \ + array[middleIndex + 2];\n        long middleSum4 = middleValue + array[middleIndex\
    \ + 3];\n        long middleSum5 = middleValue + array[middleIndex + 4];\n   \
    \     long middleSum6 = middleValue + array[middleIndex + 5];\n        long middleSum7\
    \ = middleValue + array[middleIndex + 6];\n        long middleSum8 = middleValue\
    \ + array[middleIndex + 7];\n        long middleSum9 = middleValue + array[middleIndex\
    \ + 8];\n        long middleSum10 = middleValue + array[middleIndex + 9];\n  \
    \      long middleSum11 = middleValue + array[middleIndex + 10];\n        long\
    \ middleSum12 = middleValue + array[middleIndex + 11];\n        long middleSum13\
    \ = middleValue + array[middleIndex + 12];\n        long middleSum14 = middleValue\
    \ + array[middleIndex + 13];\n        long middleSum15 = middleValue + array[middleIndex\
    \ + 14];\n        long middleSum16 = middleValue + array[middleIndex + 15];\n\
    \        long middleSum17 = middleValue + array[middleIndex + 16];\n        long\
    \ middleSum18 = middleValue + array[middleIndex + 17];\n        long middleSum19\
    \ = middleValue + array[middleIndex + 18];\n        long middleSum20 = middleValue\
    \ + array[middleIndex + 19];\n        long middleSum21 = middleValue + array[middleIndex\
    \ + 20];\n        long middleSum22 = middleValue + array[middleIndex + 21];\n\
    \        long middleSum23 = middleValue + array[middleIndex + 22];\n        long\
    \ middleSum24 = middleValue + array[middleIndex + 23];\n        long middleSum25\
    \ = middleValue + array[middleIndex + 24];\n        long middleSum26 = middleValue\
    \ + array[middleIndex + 25];\n        long middle\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpekdmq21w.cs(62,20): error CS1002: ; expected

    '
  timestamp: 1659824389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastFirstSum = 0;\n        long firstLastSum = 0;\n     \
    \   long lastFirstLastSum = 0;\n        long firstLastFirstSum = 0;\n        long\
    \ firstLastLastSum = 0;\n        long firstLastFirstLastSum = 0;\n        long\
    \ firstLastLastFirstSum = 0;\n        long firstLastLastLastSum = 0;\n       \
    \ long firstLastLastFirstLastSum = 0;\n        long firstLastLastLastFirstSum\
    \ = 0;\n        long firstLastLastLastLastSum = 0;\n        long firstLastLastLastFirstLastSum\
    \ = 0;\n        long firstLastLastLastLastFirstSum = 0;\n        long firstLastLastLastLastLastSum\
    \ = 0;\n        long firstLastLastLastLastFirstLastSum = 0;\n        long firstLastLastLastLastLastFirstSum\
    \ = 0;\n        long firstLastLastLastLastLastLastSum = 0;\n        long firstLastLastLastLastLastFirstLastSum\
    \ = 0;\n        long firstLastLastLastLastLastLastFirstSum = 0;\n        long\
    \ firstLastLastLastLastLastLastFirstLastSum = 0;\n        long firstLastLastLastLastLastLastFirstLastSum\
    \ = 0;\n        long firstLastLastLastLastLastLastFirstLastSum = 0;\n        long\
    \ firstLastLastLastLastLastLastFirstLastSum = 0;\n        long firstLastLastLastLastLastLastFirstLastSum\
    \ = 0;\n        long firstLastLastLastLastLastLastFirstLastSum = 0;\n        long\
    \ firstLastLastLastLastLastLastFirstLastSum = 0;\n        long firstLastLastLastLastLastLastFirstLastSum\
    \ = 0;\n        long firstLastLastLastLastLastLastFirstLastSum = 0;\n        long\
    \ firstLastLastLastLastLastLastFirstLastSum = 0;\n        long firstLastLastLastLastLastLastFirstLastSum\
    \ = 0;\n        long firstLastLastLastLastLastLastFirstLastSum = 0;\n        long\
    \ firstLastLastLastLastLastLastFirstLastSum = 0;\n        long firstLastLastLastLastLastLastFirstLastSum\
    \ = 0;\n        long firstLastLastLastLastLastLastFirstLastSum = 0;\n        long\
    \ firstLastLastLastLastLastLastFirstLastSum = 0;\n        long firstLastLastLastLastLastLastFirstLastSum\
    \ = 0;\n        long firstLastLastLastLastLastLastFirstLastSum = 0;\n        long\
    \ firstLastLastLastLastLastLastFirstLastSum = 0;\n        long firstLastLastLastLastLastLastFirstLastSum\
    \ = 0;\n        long firstLastLastLastLastLastLastFirstLastSum = 0;\n        long\
    \ firstLastLastLastLastLastLastFirstLast\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuxujfnw1.cs(67,52): error CS1002: ; expected

    '
  timestamp: 1659824389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long last\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ed9kler.cs(109,18): error CS1002: ; expected

    '
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long lastSum2\
    \ = 0;\n        long lastSum3 = 0;\n        long lastSum4 = 0;\n        long lastSum5\
    \ = 0;\n        long lastSum6 = 0;\n        long lastSum7 = 0;\n        long lastSum8\
    \ = 0;\n        long lastSum9 = 0;\n        long lastSum10 = 0;\n        long\
    \ lastSum11 = 0;\n        long lastSum12 = 0;\n        long lastSum13 = 0;\n \
    \       long lastSum14 = 0;\n        long lastSum15 = 0;\n        long lastSum16\
    \ = 0;\n        long lastSum17 = 0;\n        long lastSum18 = 0;\n        long\
    \ lastSum19 = 0;\n        long lastSum20 = 0;\n        long lastSum21 = 0;\n \
    \       long lastSum22 = 0;\n        long lastSum23 = 0;\n        long lastSum24\
    \ = 0;\n        long lastSum25 = 0;\n        long lastSum26 = 0;\n        long\
    \ lastSum27 = 0;\n        long lastSum28 = 0;\n        long lastSum29 = 0;\n \
    \       long lastSum30 = 0;\n        long lastSum31 = 0;\n        long lastSum32\
    \ = 0;\n        long lastSum33 = 0;\n        long lastSum34 = 0;\n        long\
    \ lastSum35 = 0;\n        long lastSum36 = 0;\n        long lastSum37 = 0;\n \
    \       long lastSum38 = 0;\n        long lastSum39 = 0;\n        long lastSum40\
    \ = 0;\n        long lastSum41 = 0;\n        long lastSum42 = 0;\n        long\
    \ lastSum43 = 0;\n        long lastSum44 = 0;\n        long lastSum45 = 0;\n \
    \       long lastSum46 = 0;\n        long lastSum47 = 0;\n        long lastSum48\
    \ = 0;\n        long lastSum49 = 0;\n        long lastSum50 = 0;\n        long\
    \ lastSum51 = 0;\n        long lastSum52 = 0;\n        long lastSum53 = 0;\n \
    \       long lastSum54 = 0;\n        long lastSum55 = 0;\n        long lastSum56\
    \ = 0;\n        long lastSum57 = 0;\n        long lastSum58 = 0;\n        long\
    \ lastSum59 = 0;\n        long lastSum60 = 0;\n        long lastSum61 = 0;\n \
    \       long lastSum62 = 0;\n        long lastSum63 = 0;\n        long lastSum64\
    \ = 0;\n        long lastSum65 = 0;\n        long lastSum66 = 0;\n        long\
    \ lastSum67 = 0;\n        long lastSum68 = 0;\n        long lastSum69 = 0;\n \
    \       long lastSum70 = 0;\n        long lastSum71 = 0;\n        long lastSum72\
    \ = 0;\n        long lastSum73 = 0;\n        \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6ida170t.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmp6ida170t.cs(25,14): warning CS0219: The variable ''lastSum'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(26,14): warning CS0219: The variable ''lastSum2'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(27,14): warning CS0219: The variable ''lastSum3'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(28,14): warning CS0219: The variable ''lastSum4'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(29,14): warning CS0219: The variable ''lastSum5'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(30,14): warning CS0219: The variable ''lastSum6'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(31,14): warning CS0219: The variable ''lastSum7'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(32,14): warning CS0219: The variable ''lastSum8'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(33,14): warning CS0219: The variable ''lastSum9'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(34,14): warning CS0219: The variable ''lastSum10'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(35,14): warning CS0219: The variable ''lastSum11'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(36,14): warning CS0219: The variable ''lastSum12'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(37,14): warning CS0219: The variable ''lastSum13'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(38,14): warning CS0219: The variable ''lastSum14'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(39,14): warning CS0219: The variable ''lastSum15'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(40,14): warning CS0219: The variable ''lastSum16'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(41,14): warning CS0219: The variable ''lastSum17'' is assigned
    but'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long maxValue = array.Max();\n    \
    \    foreach (long value in array) {\n            sum += value;\n        }\n \
    \       if (sum % 2 == 0) {\n            array.Sort();\n        } else {\n   \
    \         array.Reverse();\n        }\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00004] in <a0f501c3282046c495d74be1732b4891>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <a0f501c3282046c495d74be1732b4891>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00004] in <a0f501c3282046c495d74be1732b4891>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <a0f501c3282046c495d74be1732b4891>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824390
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        List<long> result\
    \ = new List<long>();\n        foreach (var item in array) {\n            sum\
    \ += item;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n\
    \            sum = sum / 2;\n            while (temp != 0) {\n               \
    \ result.Add(sum);\n                sum -= temp;\n                temp = sum;\n\
    \                sum = sum / 2;\n            }\n        } else {\n           \
    \ temp = sum;\n            sum = sum / 2;\n            while (temp != 0) {\n \
    \               result.Add(sum);\n                sum -= temp;\n             \
    \   temp = sum;\n                sum = sum / 2;\n            }\n            temp\
    \ = sum;\n            sum = sum / 2;\n            while (temp != 0) {\n      \
    \          result.Add(-sum);\n                sum -= temp;\n                temp\
    \ = sum;\n                sum = sum / 2;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd209bed653f48aeb449622f69a7131c>:0 \n"
  stdout: None
  timestamp: 1659824395
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in array) {\n            sum +=\
    \ i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n      \
    \      sum = sum / 2;\n            while (temp != sum) {\n                result.Add(array[temp]);\n\
    \                temp--;\n            }\n        } else {\n            temp =\
    \ sum;\n            sum = sum / 2;\n            while (temp != sum) {\n      \
    \          result.Add(array[temp]);\n                temp++;\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp765i6oiq.cs(34,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp765i6oiq.cs(41,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array == null || array.Count == 0) {\n            return\
    \ array;\n        }\n        long sum = 0;\n        long lastSum = 0;\n      \
    \  long firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n\
    \        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum =\
    \ 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoex5bfm1.cs(30,14): error CS0128: A local variable or function named ''lastSum''
    is already defined in this scope

    /tmp/tmpoex5bfm1.cs(31,14): error CS0128: A local variable or function named ''firstSum''
    is already defined in this scope

    /tmp/tmpoex5bfm1.cs(32,14): error CS0128: A local variable or function named ''lastSum''
    is already defined in this scope

    /tmp/tmpoex5bfm1.cs(33,14): error CS0128: A local variable or function named ''firstSum''
    is already defined in this scope

    /tmp/tmpoex5bfm1.cs(34,14): error CS0128: A local variable or function named ''lastSum''
    is already defined in this scope

    /tmp/tmpoex5bfm1.cs(35,14): error CS0128: A local variable or function named ''firstSum''
    is already defined in this scope

    /tmp/tmpoex5bfm1.cs(36,14): error CS0128: A local variable or function named ''lastSum''
    is already defined in this scope

    /tmp/tmpoex5bfm1.cs(37,14): error CS0128: A local variable or function named ''firstSum''
    is already defined in this scope

    /tmp/tmpoex5bfm1.cs(38,14): error CS0128: A local variable or function named ''lastSum''
    is already defined in this scope

    /tmp/tmpoex5bfm1.cs(39,14): error CS0128: A local variable or function named ''firstSum''
    is already defined in this scope

    /tmp/tmpoex5bfm1.cs(40,14): error CS0128: A local variable or function named ''lastSum''
    is already defined in this scope

    /tmp/tmpoex5bfm1.cs(41,14): error CS0128: A local variable or function named ''firstSum''
    is already defined in this scope

    /tmp/tmpoex5bfm1.cs(42,14): error CS0128: A local variable or function named ''lastSum''
    is already defined in this scope

    /tmp/tmpoex5bfm1.cs(43,14): error CS0128: A local variable or function named ''firstSum''
    is already defined in this scope

    /tmp/tmpoex5bfm1.cs(44,14): error CS0128: A local variable or function named ''lastSum''
    is already defined in this scope

    /tmp/tmpoex5bfm1.cs(45,14): error CS0128: A local variable or function named ''firstSum''
    is already defined in this'
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in array) {\n          \
    \  sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum /\
    \ 2;\n            while (temp > 0) {\n                result.Add(array[temp]);\n\
    \                temp--;\n            }\n        } else {\n            temp =\
    \ sum / 2;\n            while (temp < array.Count - 1) {\n                result.Add(array[temp]);\n\
    \                temp++;\n            }\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3yawmcyo.cs(33,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp3yawmcyo.cs(39,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastElement = array.Last();\n        long firstElement =\
    \ array.First();\n        long lastElementSum = lastElement + lastElement; //sum\
    \ of last two elements\n        long firstElementSum = firstElement + firstElement;\
    \ //sum of first two elements\n        long firstElementSumOdd = firstElementSum\
    \ / 2;\n        long firstElementSumEven = firstElementSum - firstElementSumOdd;\n\
    \        long lastElementSumOdd = lastElementSum / 2;\n        long lastElementSumEven\
    \ = lastElementSum - lastElementSumOdd;\n        bool isEvenSum = firstElementSumEven\
    \ == lastElementSumEven;\n        bool isOddSum = firstElementSumOdd == lastElementSumOdd;\n\
    \        if (isEvenSum) {\n            sum = firstElementSumEven;\n          \
    \  lastSum = lastElementSumEven;\n        } else {\n            sum = firstElementSumOdd;\n\
    \            lastSum = lastElementSumOdd;\n        }\n        List<long> result\
    \ = new List<long>();\n        bool isFirstElement = true;\n        bool isLastElement\
    \ = true;\n        bool isFirstElementOdd = true;\n        bool isLastElementOdd\
    \ = true;\n        bool isFirstElementEven = true;\n        bool isLastElementEven\
    \ = true;\n        bool isFirstElementSum = true;\n        bool isLastElementSum\
    \ = true;\n        bool isFirstElementSumOdd = true;\n        bool isLastElementSumOdd\
    \ = true;\n        bool isFirstElementSumEven = true;\n        bool isLastElementSumEven\
    \ = true;\n        bool isFirstElementSumSum = true;\n        bool isLastElementSumSum\
    \ = true;\n        bool isFirstElementSumSumOdd = true;\n        bool isLastElementSumSumOdd\
    \ = true;\n        bool isFirstElementSumSumEven = true;\n        bool isLastElementSumSumEven\
    \ = true;\n        bool isFirstElementSumSumSum = true;\n        bool isLastElementSumSumSum\
    \ = true;\n        bool isFirstElementSumSumSumOdd = true;\n        bool isLastElementSumSumSumOdd\
    \ = true;\n        bool isFirstElementSumSumSumEven = true;\n        bool isLastElementSumSumSumEven\
    \ = true;\n        bool isFirstElementSumSumSumSum = true;\n        bool isLastElementSumSumSumSum\
    \ = true;\n        bool isFirstElementSumSumSumSumOdd = true;\n        bool isLastElementSumSumSumSumOdd\
    \ = true;\n        bool isFirstElementSumSumSumSumEven = true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiiazpc4y.cs(26,14): warning CS0219: The variable ''firstSum'' is assigned
    but its value is never used

    /tmp/tmpiiazpc4y.cs(45,14): warning CS0219: The variable ''isFirstElement'' is
    assigned but its value is never used

    /tmp/tmpiiazpc4y.cs(46,14): warning CS0219: The variable ''isLastElement'' is
    assigned but its value is never used

    /tmp/tmpiiazpc4y.cs(47,14): warning CS0219: The variable ''isFirstElementOdd''
    is assigned but its value is never used

    /tmp/tmpiiazpc4y.cs(48,14): warning CS0219: The variable ''isLastElementOdd''
    is assigned but its value is never used

    /tmp/tmpiiazpc4y.cs(49,14): warning CS0219: The variable ''isFirstElementEven''
    is assigned but its value is never used

    /tmp/tmpiiazpc4y.cs(50,14): warning CS0219: The variable ''isLastElementEven''
    is assigned but its value is never used

    /tmp/tmpiiazpc4y.cs(51,14): warning CS0219: The variable ''isFirstElementSum''
    is assigned but its value is never used

    /tmp/tmpiiazpc4y.cs(52,14): warning CS0219: The variable ''isLastElementSum''
    is assigned but its value is never used

    /tmp/tmpiiazpc4y.cs(53,14): warning CS0219: The variable ''isFirstElementSumOdd''
    is assigned but its value is never used

    /tmp/tmpiiazpc4y.cs(54,14): warning CS0219: The variable ''isLastElementSumOdd''
    is assigned but its value is never used

    /tmp/tmpiiazpc4y.cs(55,14): warning CS0219: The variable ''isFirstElementSumEven''
    is assigned but its value is never used

    /tmp/tmpiiazpc4y.cs(56,14): warning CS0219: The variable ''isLastElementSumEven''
    is assigned but its value is never used

    /tmp/tmpiiazpc4y.cs(57,14): warning CS0219: The variable ''isFirstElementSumSum''
    is assigned but its value is never used

    /tmp/tmpiiazpc4y.cs(58,14): warning CS0219: The variable ''isLastElementSumSum''
    is assigned but its value is never used

    /tmp/tmpiiazpc4y.cs(59,14): warning CS0219: The variable ''isFirstElementSumSumOdd''
    is assigned but its value is never used

    /tmp/tmpiiazpc4y.cs(60,14): warning CS0219:'
  timestamp: 1659824390
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        long sumEven =\
    \ 0;\n        long sumOdd = 0;\n        foreach (long i in array) {\n        \
    \    sum += i;\n            if (sum % 2 == 0) {\n                sumEven++;\n\
    \            } else {\n                sumOdd++;\n            }\n        }\n \
    \       if (sumOdd > sumEven) {\n            temp = sumEven;\n            sumEven\
    \ = sumOdd;\n            sumOdd = temp;\n        }\n        List<long> result\
    \ = new List<long>();\n        long tempSum = sum;\n        long tempSumEven =\
    \ sumEven;\n        long tempSumOdd = sumOdd;\n        foreach (long i in array)\
    \ {\n            if (tempSum == sumEven) {\n                result.Add(i);\n \
    \               tempSumEven--;\n                tempSumOdd++;\n            } else\
    \ if (tempSum == sumOdd) {\n                result.Add(i);\n                tempSumOdd--;\n\
    \                tempSumEven++;\n            } else {\n                result.Add(i);\n\
    \                tempSum--;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <386f6dc6defa47ca9c9dd0f91b4a00e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <386f6dc6defa47ca9c9dd0f91b4a00e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long max = 0;\n        foreach (var\
    \ item in array) {\n            sum += item;\n            if (sum > max) {\n \
    \               max = sum;\n            }\n        }\n        long mid = max /\
    \ 2;\n        if (sum % 2 == 0) {\n            array.Sort((x, y) => x - y);\n\
    \        } else {\n            array.Sort((x, y) => y - x);\n        }\n     \
    \   List<long> result = new List<long>();\n        foreach (var item in array)\
    \ {\n            if (item > mid) {\n                result.Add(item);\n      \
    \      } else {\n                result.Add(mid);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3a0yi6yr.cs(34,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp3a0yi6yr.cs(34,34): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmp3a0yi6yr.cs(36,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp3a0yi6yr.cs(36,34): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum2 = 0;\n        long firstSum2 = 0;\n        long\
    \ lastSum3 = 0;\n        long firstSum3 = 0;\n        long lastSum4 = 0;\n   \
    \     long firstSum4 = 0;\n        long lastSum5 = 0;\n        long firstSum5\
    \ = 0;\n        long lastSum6 = 0;\n        long firstSum6 = 0;\n        long\
    \ lastSum7 = 0;\n        long firstSum7 = 0;\n        long lastSum8 = 0;\n   \
    \     long firstSum8 = 0;\n        long lastSum9 = 0;\n        long firstSum9\
    \ = 0;\n        long lastSum10 = 0;\n        long firstSum10 = 0;\n        long\
    \ lastSum11 = 0;\n        long firstSum11 = 0;\n        long lastSum12 = 0;\n\
    \        long firstSum12 = 0;\n        long lastSum13 = 0;\n        long firstSum13\
    \ = 0;\n        long lastSum14 = 0;\n        long firstSum14 = 0;\n        long\
    \ lastSum15 = 0;\n        long firstSum15 = 0;\n        long lastSum16 = 0;\n\
    \        long firstSum16 = 0;\n        long lastSum17 = 0;\n        long firstSum17\
    \ = 0;\n        long lastSum18 = 0;\n        long firstSum18 = 0;\n        long\
    \ lastSum19 = 0;\n        long firstSum19 = 0;\n        long lastSum20 = 0;\n\
    \        long firstSum20 = 0;\n        long lastSum21 = 0;\n        long firstSum21\
    \ = 0;\n        long lastSum22 = 0;\n        long firstSum22 = 0;\n        long\
    \ lastSum23 = 0;\n        long firstSum23 = 0;\n        long lastSum24 = 0;\n\
    \        long firstSum24 = 0;\n        long lastSum25 = 0;\n        long firstSum25\
    \ = 0;\n        long lastSum26 = 0;\n        long firstSum26 = 0;\n        long\
    \ lastSum27 = 0;\n        long firstSum27 = 0;\n        long lastSum28 = 0;\n\
    \        long firstSum28 = 0;\n        long lastSum29 = 0;\n        long firstSum29\
    \ = 0;\n        long lastSum30 = 0;\n        long firstSum30 = 0;\n        long\
    \ lastSum31 = 0;\n        long firstSum31 = 0;\n        long lastSum32 = 0;\n\
    \        long firstSum32 = 0;\n        long lastSum33 = 0;\n        long firstSum33\
    \ = 0;\n        long lastSum34 = 0;\n        long firstSum34 = 0;\n        long\
    \ lastSum35 = 0;\n        long firstSum35 = 0;\n        long lastSum36 = 0;\n\
    \        long firstSum36 = 0;\n        long lastSum37 = 0;\n        long firstSum37\
    \ = 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpksyr4tao.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpksyr4tao.cs(25,14): warning CS0219: The variable ''lastSum'' is assigned
    but its value is never used

    /tmp/tmpksyr4tao.cs(26,14): warning CS0219: The variable ''firstSum'' is assigned
    but its value is never used

    /tmp/tmpksyr4tao.cs(27,14): warning CS0219: The variable ''lastSum2'' is assigned
    but its value is never used

    /tmp/tmpksyr4tao.cs(28,14): warning CS0219: The variable ''firstSum2'' is assigned
    but its value is never used

    /tmp/tmpksyr4tao.cs(29,14): warning CS0219: The variable ''lastSum3'' is assigned
    but its value is never used

    /tmp/tmpksyr4tao.cs(30,14): warning CS0219: The variable ''firstSum3'' is assigned
    but its value is never used

    /tmp/tmpksyr4tao.cs(31,14): warning CS0219: The variable ''lastSum4'' is assigned
    but its value is never used

    /tmp/tmpksyr4tao.cs(32,14): warning CS0219: The variable ''firstSum4'' is assigned
    but its value is never used

    /tmp/tmpksyr4tao.cs(33,14): warning CS0219: The variable ''lastSum5'' is assigned
    but its value is never used

    /tmp/tmpksyr4tao.cs(34,14): warning CS0219: The variable ''firstSum5'' is assigned
    but its value is never used

    /tmp/tmpksyr4tao.cs(35,14): warning CS0219: The variable ''lastSum6'' is assigned
    but its value is never used

    /tmp/tmpksyr4tao.cs(36,14): warning CS0219: The variable ''firstSum6'' is assigned
    but its value is never used

    /tmp/tmpksyr4tao.cs(37,14): warning CS0219: The variable ''lastSum7'' is assigned
    but its value is never used

    /tmp/tmpksyr4tao.cs(38,14): warning CS0219: The variable ''firstSum7'' is assigned
    but its value is never used

    /tmp/tmpksyr4tao.cs(39,14): warning CS0219: The variable ''lastSum8'' is assigned
    but its value is never used

    /tmp/tmpksyr4tao.cs(40,14): warning CS0219: The variable ''firstSum8'' is assigned
    but its value is never used

    /tmp/tmpksyr4tao.cs(41,14): warning CS0219: The variable ''lastSum9'' is assigned
    but '
  timestamp: 1659824390
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        long first = 0;\n\
    \        long last = 0;\n        long mid = 0;\n        List<long> result = new\
    \ List<long>();\n        foreach (long i in array) {\n            sum += i;\n\
    \            if (sum % 2 == 0) {\n                temp = sum;\n              \
    \  first = i;\n            } else {\n                temp = sum;\n           \
    \     last = i;\n            }\n            mid = (first + last) / 2;\n      \
    \      if (mid > temp) {\n                result.Add(mid);\n                sum\
    \ = temp;\n                first = mid;\n            } else {\n              \
    \  result.Add(last);\n                sum = temp;\n                last = mid;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c210974eab4619848e3d1d5c83cfc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c210974eab4619848e3d1d5c83cfc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        long first\
    \ = 0;\n        long last = 0;\n        foreach (long i in array) {\n        \
    \    sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n\
    \            first = array.First();\n            last = array.Last();\n      \
    \      array.Clear();\n            array.Add(first);\n            array.Add(last);\n\
    \            array.Add(temp);\n            return array;\n        }\n        else\
    \ {\n            temp = sum;\n            first = array.Last();\n            last\
    \ = array.First();\n            array.Clear();\n            array.Add(first);\n\
    \            array.Add(last);\n            array.Add(temp);\n            return\
    \ array;\n        }\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n  \
    \  Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00053] in <c04326268950418dab67842304133146>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <c04326268950418dab67842304133146>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00053] in <c04326268950418dab67842304133146>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <c04326268950418dab67842304133146>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in array) {\n            sum +=\
    \ i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n      \
    \      sum = sum / 2;\n            while (temp != 0) {\n                result.Add(temp\
    \ % 2);\n                temp = temp / 2;\n            }\n        } else {\n \
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=\
    \ 0) {\n                result.Add(temp % 2);\n                temp = temp / 2;\n\
    \            }\n            result.Reverse();\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c47b195bceca459db4a00778dd96cce2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c47b195bceca459db4a00778dd96cce2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        long sumOfFirstIndexValue\
    \ = 0;\n        long sumOfLastIndexValue = 0;\n        long firstIndexValue =\
    \ 0;\n        long lastIndexValue = 0;\n        bool isEvenSum = false;\n    \
    \    bool isOddSum = false;\n        bool isEvenSort = false;\n        bool isOddSort\
    \ = false;\n        bool isEvenSortDesc = false;\n        bool isOddSortDesc =\
    \ false;\n        bool isEvenSortAsc = false;\n        bool isOddSortAsc = false;\n\
    \        bool isEvenSortDescAsc = false;\n        bool isOddSortDescAsc = false;\n\
    \        bool isEvenSortAscDesc = false;\n        bool isOddSortAscDesc = false;\n\
    \        bool isEvenSortDescAscDesc = false;\n        bool isOddSortDescAscDesc\
    \ = false;\n        bool isEvenSumAsc = false;\n        bool isOddSumAsc = false;\n\
    \        bool isEvenSumDesc = false;\n        bool isOddSumDesc = false;\n   \
    \     bool isEvenSumAscDesc = false;\n        bool isOddSumAscDesc = false;\n\
    \        bool isEvenSumDescAsc = false;\n        bool isOddSumDescAsc = false;\n\
    \        bool isEvenSumAscAsc = false;\n        bool isOddSumAscAsc = false;\n\
    \        bool isEvenSumDescAscAsc = false;\n        bool isOddSumDescAscAsc =\
    \ false;\n        bool isEvenSumAscDescAsc = false;\n        bool isOddSumAscDescAsc\
    \ = false;\n        bool isEvenSumDescAscDescAsc = false;\n        bool isOddSumDescAscDescAsc\
    \ = false;\n        bool isEvenSumAscAscAsc = false;\n        bool isOddSumAscAscAsc\
    \ = false;\n        bool isEvenSumDescAscAscAsc = false;\n        bool isOddSumDescAscAscAsc\
    \ = false;\n        bool isEvenSumAscDescAscAsc = false;\n        bool isOddSumAscDescAscAsc\
    \ = false;\n        bool isEvenSumDescAscDescAscAsc = false;\n        bool isOddSumDescAscDescAscAsc\
    \ = false;\n        bool isEvenSumAscAscDescAscAsc = false;\n        bool isOddSumAscAscAscDescAsc\
    \ = false;\n        bool isEvenSumDescAscAscAscA\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcqeiu1fi.cs(70,37): error CS1002: ; expected

    '
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        long temp2\
    \ = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 =\
    \ 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n\
    \        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n\
    \        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n\
    \        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n\
    \        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n\
    \        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n\
    \        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n\
    \        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n\
    \        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n\
    \        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n\
    \        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n\
    \        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n\
    \        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n\
    \        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n\
    \        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n\
    \        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n\
    \        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n\
    \        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n\
    \        long temp60 = 0;\n        long temp61 = 0;\n        long temp62 = 0;\n\
    \        long temp63 = 0;\n        long temp64 = 0;\n        long temp65 = 0;\n\
    \        long temp66 = 0;\n        long temp67 = 0;\n        long temp68 = 0;\n\
    \        long temp69 = 0;\n        long temp70 = 0;\n        long temp71 = 0;\n\
    \        long temp72 = 0;\n        long temp73 = 0;\n        long temp74 = 0;\n\
    \        long temp75 = 0;\n        long temp76 = 0;\n        long temp77 = 0;\n\
    \        long temp78 = 0;\n        long temp79 = 0;\n        long temp80 = 0;\n\
    \        long temp81 = 0;\n        long temp82 = 0;\n        long temp83 = 0;\n\
    \        long temp84 = 0;\n        long temp85 = 0;\n        long \n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsd9bs659.cs(110,13): error CS1001: Identifier expected

    /tmp/tmpsd9bs659.cs(110,13): error CS1002: ; expected

    '
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long last\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ed9kler.cs(109,18): error CS1002: ; expected

    '
  timestamp: 1659800866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in array) {\n            sum +=\
    \ i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n      \
    \      sum = sum / 2;\n            while (temp != 0) {\n                result.Add(sum);\n\
    \                temp--;\n                sum = sum / 2;\n            }\n    \
    \    } else {\n            temp = sum;\n            sum = sum / 2;\n         \
    \   while (temp != 0) {\n                result.Add(-sum);\n                temp--;\n\
    \                sum = sum / 2;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <371bdec59593499abf600cc5939ca300>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <371bdec59593499abf600cc5939ca300>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        long temp2\
    \ = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 =\
    \ 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n\
    \        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n\
    \        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n\
    \        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n\
    \        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n\
    \        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n\
    \        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n\
    \        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n\
    \        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n\
    \        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n\
    \        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n\
    \        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n\
    \        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n\
    \        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n\
    \        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n\
    \        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n\
    \        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n\
    \        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n\
    \        long temp60 = 0;\n        long temp61 = 0;\n        long temp62 = 0;\n\
    \        long temp63 = 0;\n        long temp64 = 0;\n        long temp65 = 0;\n\
    \        long temp66 = 0;\n        long temp67 = 0;\n        long temp68 = 0;\n\
    \        long temp69 = 0;\n        long temp70 = 0;\n        long temp71 = 0;\n\
    \        long temp72 = 0;\n        long temp73 = 0;\n        long temp74 = 0;\n\
    \        long temp75 = 0;\n        long temp76 = 0;\n        long temp77 = 0;\n\
    \        long temp78 = 0;\n        long temp79 = 0;\n        long temp80 = 0;\n\
    \        long temp81 = 0;\n        long temp82 = 0;\n        long temp83 = 0;\n\
    \        long temp84 = 0;\n        long temp85 = 0;\n        long \n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsd9bs659.cs(110,13): error CS1001: Identifier expected

    /tmp/tmpsd9bs659.cs(110,13): error CS1002: ; expected

    '
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        long first\
    \ = 0;\n        long last = 0;\n        bool isEvenSum = false;\n        bool\
    \ isOddSum = false;\n        bool isEvenSort = false;\n        bool isOddSort\
    \ = false;\n        bool isEvenSortReverse = false;\n        bool isOddSortReverse\
    \ = false;\n        bool isEvenSortReverse2 = false;\n        bool isOddSortReverse2\
    \ = false;\n        bool isEvenSortReverse3 = false;\n        bool isOddSortReverse3\
    \ = false;\n        bool isEvenSortReverse4 = false;\n        bool isOddSortReverse4\
    \ = false;\n        bool isEvenSortReverse5 = false;\n        bool isOddSortReverse5\
    \ = false;\n        bool isEvenSortReverse6 = false;\n        bool isOddSortReverse6\
    \ = false;\n        bool isEvenSortReverse7 = false;\n        bool isOddSortReverse7\
    \ = false;\n        bool isEvenSortReverse8 = false;\n        bool isOddSortReverse8\
    \ = false;\n        bool isEvenSortReverse9 = false;\n        bool isOddSortReverse9\
    \ = false;\n        bool isEvenSortReverse10 = false;\n        bool isOddSortReverse10\
    \ = false;\n        bool isEvenSortReverse11 = false;\n        bool isOddSortReverse11\
    \ = false;\n        bool isEvenSortReverse12 = false;\n        bool isOddSortReverse12\
    \ = false;\n        bool isEvenSortReverse13 = false;\n        bool isOddSortReverse13\
    \ = false;\n        bool isEvenSortReverse14 = false;\n        bool isOddSortReverse14\
    \ = false;\n        bool isEvenSortReverse15 = false;\n        bool isOddSortReverse15\
    \ = false;\n        bool isEvenSortReverse16 = false;\n        bool isOddSortReverse16\
    \ = false;\n        bool isEvenSortReverse17 = false;\n        bool isOddSortReverse17\
    \ = false;\n        bool isEvenSortReverse18 = false;\n        bool isOddSortReverse18\
    \ = false;\n        bool isEvenSortReverse19 = false;\n        bool isOddSortReverse19\
    \ = false;\n        bool isEvenSortReverse20 = false;\n        bool isOddSortReverse20\
    \ = false;\n        bool isEvenSortReverse21 = false;\n        bool isOddSortReverse21\
    \ = false;\n        bool isEvenSortReverse22 = false;\n        bool isOddSortReverse22\
    \ = false;\n        bool isEvenSortReverse23 = false;\n        bool isOddSortReverse23\
    \ = false;\n        bool isEvenSortReverse24 = false;\n        bool isOddSortReverse24\
    \ = false;\n        bool isEvenSortReverse\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptxgprrej.cs(80,31): error CS1002: ; expected

    '
  timestamp: 1659824390
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in array) {\n            sum +=\
    \ i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n      \
    \      sum = sum / 2;\n            while (temp != 0) {\n                result.Add(sum);\n\
    \                temp -= sum;\n                sum = sum / 2;\n            }\n\
    \        } else {\n            temp = sum;\n            sum = sum / 2;\n     \
    \       while (temp != 0) {\n                result.Add(-sum);\n             \
    \   temp -= sum;\n                sum = sum / 2;\n            }\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <140ae98ff0d6465393676a21a577de3b>:0 \n"
  stdout: None
  timestamp: 1659824395
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        long first\
    \ = 0;\n        long last = 0;\n        long mid = 0;\n        bool odd = false;\n\
    \        bool even = false;\n        foreach (long i in array) {\n           \
    \ sum += i;\n        }\n        if (sum % 2 == 0) {\n            even = true;\n\
    \            sum = sum / 2;\n        } else {\n            odd = true;\n     \
    \       sum = sum / 2;\n        }\n        foreach (long i in array) {\n     \
    \       if (odd == true) {\n                temp = sum - i;\n                if\
    \ (temp % 2 == 0) {\n                    last = temp / 2;\n                } else\
    \ {\n                    first = temp / 2;\n                }\n            } else\
    \ {\n                temp = sum + i;\n                if (temp % 2 == 0) {\n \
    \                   first = temp / 2;\n                } else {\n            \
    \        last = temp / 2;\n                }\n            }\n            mid =\
    \ first + last;\n            array.Add(mid);\n        }\n        return array;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54e8113e2524e918b5caa5d9f1c58ef>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Collection was modified; enumeration operation\
    \ may not execute.\n  at System.Collections.Generic.List`1+Enumerator[T].MoveNextRare\
    \ () [0x00013] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.List`1+Enumerator[T].MoveNext\
    \ () [0x0004a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x000e8] in <a54e8113e2524e918b5caa5d9f1c58ef>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0002b] in <a54e8113e2524e918b5caa5d9f1c58ef>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Collection\
    \ was modified; enumeration operation may not execute.\n  at System.Collections.Generic.List`1+Enumerator[T].MoveNextRare\
    \ () [0x00013] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.List`1+Enumerator[T].MoveNext\
    \ () [0x0004a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x000e8] in <a54e8113e2524e918b5caa5d9f1c58ef>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0002b] in <a54e8113e2524e918b5caa5d9f1c58ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long first = 0;\n        long last\
    \ = 0;\n        bool even = true;\n        foreach (long i in array) {\n     \
    \       sum += i;\n            if (sum % 2 == 0) {\n                even = false;\n\
    \            }\n            if (sum > 0) {\n                first = i;\n     \
    \       }\n            if (sum < 0) {\n                last = i;\n           \
    \ }\n        }\n        if (even) {\n            array.Reverse();\n        }\n\
    \        List<long> result = new List<long>();\n        foreach (long i in array)\
    \ {\n            if (first <= last) {\n                result.Add(i);\n      \
    \      }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d828bf59b42f4099af7925b677f5a3cb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d828bf59b42f4099af7925b677f5a3cb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long maxSum = 0;\n        long minSum\
    \ = array.First();\n        foreach (var item in array) {\n            sum +=\
    \ item;\n            if (sum > maxSum) {\n                maxSum = sum;\n    \
    \        }\n            if (sum < minSum) {\n                minSum = sum;\n \
    \           }\n        }\n        if (sum % 2 == 0) {\n            array.Sort((x,\
    \ y) => { return y - x; });\n        } else {\n            array.Sort((x, y) =>\
    \ { return x - y; });\n        }\n        return array;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpizaif6mg.cs(37,43): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpizaif6mg.cs(37,43): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmpizaif6mg.cs(39,43): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpizaif6mg.cs(39,43): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659824390
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        long first = 0;\n\
    \        long last = 0;\n        bool evenSum = false;\n        bool oddSum =\
    \ false;\n        foreach (long i in array) {\n            sum += i;\n       \
    \     if (sum % 2 == 0) {\n                evenSum = true;\n            }\n  \
    \          else {\n                oddSum = true;\n            }\n           \
    \ if (evenSum == true) {\n                first = i;\n            }\n        \
    \    if (oddSum == true) {\n                last = i;\n            }\n       \
    \ }\n        List<long> result = new List<long>();\n        temp = first;\n  \
    \      while (temp < last) {\n            result.Add(temp);\n            temp++;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0eeaad8ac8a04730ad12b2950fa013d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0eeaad8ac8a04730ad12b2950fa013d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array == null || array.Count == 0) {\n            return\
    \ array;\n        }\n        long sum = 0;\n        foreach (long i in array)\
    \ {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n         \
    \   array.Sort();\n        } else {\n            array.Reverse();\n        }\n\
    \        return array;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed3b2c5403e24eb3824b44c960965ba0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed3b2c5403e24eb3824b44c960965ba0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        foreach (var item in array) {\n   \
    \         sum += item;\n        }\n        if (sum % 2 == 1) {\n            array.Reverse();\n\
    \        }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8617653dd51849eea6de4c08f18c50e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8617653dd51849eea6de4c08f18c50e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in array) {\n            sum +=\
    \ i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n      \
    \      while (temp > 0) {\n                result.Add(temp % 2);\n           \
    \     temp /= 2;\n            }\n        } else {\n            temp = sum;\n \
    \           while (temp > 0) {\n                result.Add(temp % 2);\n      \
    \          temp /= 2;\n            }\n            result.Reverse();\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6443db23224148598ee9570e08975c4d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6443db23224148598ee9570e08975c4d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        long first\
    \ = 0;\n        long last = 0;\n        foreach (var item in array) {\n      \
    \      sum += item;\n        }\n        if (sum % 2 == 0) {\n            temp\
    \ = sum;\n            first = array.First();\n            last = array.Last();\n\
    \            array.Clear();\n            array.AddRange(array.OrderBy(item =>\
    \ item).ToList());\n            array.AddRange(array.OrderByDescending(item =>\
    \ item).ToList());\n            array.AddRange(array.OrderBy(item => item).ToList());\n\
    \            array.AddRange(array.OrderByDescending(item => item).ToList());\n\
    \            array.AddRange(array.OrderBy(item => item).ToList());\n         \
    \   array.AddRange(array.OrderByDescending(item => item).ToList());\n        \
    \    array.AddRange(array.OrderBy(item => item).ToList());\n            array.AddRange(array.OrderByDescending(item\
    \ => item).ToList());\n            array.AddRange(array.OrderBy(item => item).ToList());\n\
    \            array.AddRange(array.OrderByDescending(item => item).ToList());\n\
    \            array.AddRange(array.OrderBy(item => item).ToList());\n         \
    \   array.AddRange(array.OrderByDescending(item => item).ToList());\n        \
    \    array.AddRange(array.OrderBy(item => item).ToList());\n            array.AddRange(array.OrderByDescending(item\
    \ => item).ToList());\n            array.AddRange(array.OrderBy(item => item).ToList());\n\
    \            array.AddRange(array.OrderByDescending(item => item).ToList());\n\
    \            array.AddRange(array.OrderBy(item => item).ToList());\n         \
    \   array.AddRange(array.OrderByDescending(item => item).ToList());\n        \
    \    array.AddRange(array.OrderBy(item => item).ToList());\n            array.AddRange(array.OrderByDescending(item\
    \ => item).ToList());\n            array.AddRange(array.OrderBy(item => item).ToList());\n\
    \            array.AddRange(array.OrderByDescending(item => item).ToList());\n\
    \            array.AddRange(array.OrderBy(item => item).ToList());\n         \
    \   array.AddRange(array.OrderByDescending(item => item).ToList());\n        \
    \    array.AddRange(array.OrderBy(item => item).ToList());\n            array.AddRange(array.OrderByDescending(item\
    \ => item).ToList());\n            array.AddRange(array.OrderBy(item => item).ToList());\n\
    \            array.AddRange(array.OrderBy\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpctpxd8p0.cs(63,41): error CS1026: ) expected

    /tmp/tmpctpxd8p0.cs(63,41): error CS1002: ; expected

    /tmp/tmpctpxd8p0.cs(65,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpctpxd8p0.cs(75,2): error CS1513: } expected

    '
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum1 = 0;\n        long sum2 =\
    \ 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n\
    \        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n    \
    \    long sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n      \
    \  long sum12 = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n       \
    \ long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n        long\
    \ sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long sum21\
    \ = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24 =\
    \ 0;\n        long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n\
    \        long sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n \
    \       long sum31 = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n  \
    \      long sum34 = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n   \
    \     long sum37 = 0;\n        long sum38 = 0;\n        long sum39 = 0;\n    \
    \    long sum40 = 0;\n        long sum41 = 0;\n        long sum42 = 0;\n     \
    \   long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n      \
    \  long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n       \
    \ long sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long\
    \ sum52 = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55\
    \ = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n        long sum58 =\
    \ 0;\n        long sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n\
    \        long sum62 = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n \
    \       long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n  \
    \      long sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n   \
    \     long sum71 = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n    \
    \    long sum74 = 0;\n        long sum75 = 0;\n        long sum76 = 0;\n     \
    \   long sum77 = 0;\n        long sum78 = 0;\n        long sum79 = 0;\n      \
    \  long sum80 = 0;\n        long sum81 = 0;\n        long sum82 = 0;\n       \
    \ long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n        long\
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpynmwdonl.cs(110,13): error CS1001: Identifier expected

    /tmp/tmpynmwdonl.cs(110,13): error CS1002: ; expected

    '
  timestamp: 1659824389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long maxSum = 0;\n        long minSum = 0;\n        long maxIndex\
    \ = 0;\n        long minIndex = 0;\n        long maxValue = 0;\n        long minValue\
    \ = 0;\n        long maxIndexValue = 0;\n        long minIndexValue = 0;\n   \
    \     long maxValueValue = 0;\n        long minValueValue = 0;\n        long maxIndexValueValue\
    \ = 0;\n        long minIndexValueValue = 0;\n        long maxValueValueValue\
    \ = 0;\n        long minValueValueValue = 0;\n        long maxIndexValueValueValue\
    \ = 0;\n        long minIndexValueValueValue = 0;\n        long maxValueValueValueValue\
    \ = 0;\n        long minValueValueValueValue = 0;\n        long maxIndexValueValueValue\
    \ = 0;\n        long minIndexValueValueValue = 0;\n        long maxValueValueValueValue\
    \ = 0;\n        long minValueValueValueValue = 0;\n        long maxIndexValueValueValue\
    \ = 0;\n        long minIndexValueValueValue = 0;\n        long maxValueValueValueValue\
    \ = 0;\n        long minValueValueValueValue = 0;\n        long maxIndexValueValueValue\
    \ = 0;\n        long minIndexValueValueValue = 0;\n        long maxValueValueValueValue\
    \ = 0;\n        long minValueValueValueValue = 0;\n        long maxIndexValueValueValue\
    \ = 0;\n        long minIndexValueValueValue = 0;\n        long maxValueValueValueValue\
    \ = 0;\n        long minValueValueValueValue = 0;\n        long maxIndexValueValueValue\
    \ = 0;\n        long minIndexValueValueValue = 0;\n        long maxValueValueValueValue\
    \ = 0;\n        long minValueValueValueValue = 0;\n        long maxIndexValueValueValue\
    \ = 0;\n        long minIndexValueValueValue = 0;\n        long maxValueValueValueValue\
    \ = 0;\n        long minValueValueValueValue = 0;\n        long maxIndexValueValueValue\
    \ = 0;\n        long minIndexValueValueValue = 0;\n        long maxValueValueValueValue\
    \ = 0;\n        long minValueValueValueValue = 0;\n        long maxIndexValueValueValue\
    \ = 0;\n        long minIndexValueValueValue = 0;\n        long maxValueValueValueValue\
    \ = 0;\n        long minValueValueValueValue = 0;\n        long maxIndexValueValueValue\
    \ = 0;\n        long minIndexValueValueValue = 0;\n        long maxValueValueValueValue\
    \ = 0;\n        long minValueValueValueValue = 0;\n        long maxIndexValueValueValue\
    \ = 0;\n        long minIndexValueValueValue = 0;\n        long maxValueValueValueValue\
    \ = 0;\n        long minValueValueValueValue = 0;\n        long max\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqheu7i48.cs(85,17): error CS1002: ; expected

    '
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        foreach (var item in array) {\n   \
    \         sum += item;\n        }\n        bool isEven = sum % 2 == 0;\n     \
    \   long firstIndex = 0, lastIndex = array.Count - 1;\n        long sumOfFirstIndex\
    \ = 0, sumOfLastIndex = 0;\n        while (firstIndex <= lastIndex) {\n      \
    \      sumOfFirstIndex += array[firstIndex];\n            sumOfLastIndex += array[lastIndex];\n\
    \            if (sumOfFirstIndex > sumOfLastIndex) {\n                long temp\
    \ = array[firstIndex];\n                array[firstIndex] = array[lastIndex];\n\
    \                array[lastIndex] = temp;\n                firstIndex++;\n   \
    \             lastIndex--;\n            } else if (sumOfFirstIndex < sumOfLastIndex)\
    \ {\n                long temp = array[lastIndex];\n                array[lastIndex]\
    \ = array[firstIndex];\n                array[firstIndex] = temp;\n          \
    \      lastIndex--;\n            } else {\n                firstIndex++;\n   \
    \             lastIndex--;\n            }\n        }\n        if (isEven) {\n\
    \            array.Reverse();\n        }\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxprcwtss.cs(32,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxprcwtss.cs(33,37): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxprcwtss.cs(35,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxprcwtss.cs(36,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxprcwtss.cs(36,43): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxprcwtss.cs(37,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxprcwtss.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxprcwtss.cs(42,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxprcwtss.cs(42,42): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxprcwtss.cs(43,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastElement = array.Last();\n        long firstElement =\
    \ array.First();\n        long currentSum = 0;\n        List<long> result = new\
    \ List<long>();\n        foreach (long element in array) {\n            currentSum\
    \ += element;\n            if (currentSum > lastSum) {\n                result.Add(firstElement);\n\
    \                firstSum = currentSum;\n                firstElement = element;\n\
    \            } else if (currentSum < lastSum) {\n                result.Add(lastElement);\n\
    \                lastSum = currentSum;\n                lastElement = element;\n\
    \            } else {\n                result.Add(element);\n            }\n \
    \       }\n        if (lastSum > firstSum) {\n            result.Add(firstElement);\n\
    \            result.Add(lastElement);\n        } else if (lastSum < firstSum)\
    \ {\n            result.Add(lastElement);\n            result.Add(firstElement);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Last[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x0000a] in <8e1f349aaae241c58e83bbb30e3b882a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <8e1f349aaae241c58e83bbb30e3b882a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Last[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x0000a] in <8e1f349aaae241c58e83bbb30e3b882a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <8e1f349aaae241c58e83bbb30e3b882a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in array) {\n            sum +=\
    \ i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n      \
    \      sum = sum / 2;\n            while (temp != 0) {\n                result.Add(temp\
    \ % 2);\n                temp = temp / 2;\n            }\n        } else {\n \
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=\
    \ 0) {\n                result.Add(temp % 2);\n                temp = temp / 2;\n\
    \            }\n            result.Reverse();\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c47b195bceca459db4a00778dd96cce2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c47b195bceca459db4a00778dd96cce2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        long firstIndex\
    \ = 0;\n        long lastIndex = 0;\n        bool isEvenSum = false;\n       \
    \ bool isOddSum = false;\n        bool isEvenSort = false;\n        bool isOddSort\
    \ = false;\n        bool isEvenSort2 = false;\n        bool isOddSort2 = false;\n\
    \        bool isEvenSort3 = false;\n        bool isOddSort3 = false;\n       \
    \ bool isEvenSort4 = false;\n        bool isOddSort4 = false;\n        bool isEvenSort5\
    \ = false;\n        bool isOddSort5 = false;\n        bool isEvenSort6 = false;\n\
    \        bool isOddSort6 = false;\n        bool isEvenSort7 = false;\n       \
    \ bool isOddSort7 = false;\n        bool isEvenSort8 = false;\n        bool isOddSort8\
    \ = false;\n        bool isEvenSort9 = false;\n        bool isOddSort9 = false;\n\
    \        bool isEvenSort10 = false;\n        bool isOddSort10 = false;\n     \
    \   bool isEvenSort11 = false;\n        bool isOddSort11 = false;\n        bool\
    \ isEvenSort12 = false;\n        bool isOddSort12 = false;\n        bool isEvenSort13\
    \ = false;\n        bool isOddSort13 = false;\n        bool isEvenSort14 = false;\n\
    \        bool isOddSort14 = false;\n        bool isEvenSort15 = false;\n     \
    \   bool isOddSort15 = false;\n        bool isEvenSort16 = false;\n        bool\
    \ isOddSort16 = false;\n        bool isEvenSort17 = false;\n        bool isOddSort17\
    \ = false;\n        bool isEvenSort18 = false;\n        bool isOddSort18 = false;\n\
    \        bool isEvenSort19 = false;\n        bool isOddSort19 = false;\n     \
    \   bool isEvenSort20 = false;\n        bool isOddSort20 = false;\n        bool\
    \ isEvenSort21 = false;\n        bool isOddSort21 = false;\n        bool isEvenSort22\
    \ = false;\n        bool isOddSort22 = false;\n        bool isEvenSort23 = false;\n\
    \        bool isOddSort23 = false;\n        bool isEvenSort24 = false;\n     \
    \   bool isOddSort24 = false;\n        bool isEvenSort25 = false;\n        bool\
    \ isOddSort25 = false;\n        bool isEvenSort26 = false;\n        bool isOddSort26\
    \ = false;\n        bool isEvenSort27 = false;\n        bool isOddSort27 = false;\n\
    \        bool isEvenSort28 = false;\n        bool isOddSort28 = false;\n\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoc_f3wf1.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpoc_f3wf1.cs(25,14): warning CS0168: The variable ''temp'' is declared
    but never used

    /tmp/tmpoc_f3wf1.cs(26,14): warning CS0219: The variable ''firstIndex'' is assigned
    but its value is never used

    /tmp/tmpoc_f3wf1.cs(27,14): warning CS0219: The variable ''lastIndex'' is assigned
    but its value is never used

    /tmp/tmpoc_f3wf1.cs(28,14): warning CS0219: The variable ''isEvenSum'' is assigned
    but its value is never used

    /tmp/tmpoc_f3wf1.cs(29,14): warning CS0219: The variable ''isOddSum'' is assigned
    but its value is never used

    /tmp/tmpoc_f3wf1.cs(30,14): warning CS0219: The variable ''isEvenSort'' is assigned
    but its value is never used

    /tmp/tmpoc_f3wf1.cs(31,14): warning CS0219: The variable ''isOddSort'' is assigned
    but its value is never used

    /tmp/tmpoc_f3wf1.cs(32,14): warning CS0219: The variable ''isEvenSort2'' is assigned
    but its value is never used

    /tmp/tmpoc_f3wf1.cs(33,14): warning CS0219: The variable ''isOddSort2'' is assigned
    but its value is never used

    /tmp/tmpoc_f3wf1.cs(34,14): warning CS0219: The variable ''isEvenSort3'' is assigned
    but its value is never used

    /tmp/tmpoc_f3wf1.cs(35,14): warning CS0219: The variable ''isOddSort3'' is assigned
    but its value is never used

    /tmp/tmpoc_f3wf1.cs(36,14): warning CS0219: The variable ''isEvenSort4'' is assigned
    but its value is never used

    /tmp/tmpoc_f3wf1.cs(37,14): warning CS0219: The variable ''isOddSort4'' is assigned
    but its value is never used

    /tmp/tmpoc_f3wf1.cs(38,14): warning CS0219: The variable ''isEvenSort5'' is assigned
    but its value is never used

    /tmp/tmpoc_f3wf1.cs(39,14): warning CS0219: The variable ''isOddSort5'' is assigned
    but its value is never used

    /tmp/tmpoc_f3wf1.cs(40,14): warning CS0219: The variable ''isEvenSort6'' is assigned
    but its value is never used

    /tmp/tmpoc_f3wf1.cs(41,14): warning CS0219: The variable ''isOddSort6'' is assi'
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long maxValue = array.Max();\n    \
    \    long minValue = array.Min();\n        foreach (long value in array) {\n \
    \           sum += value;\n        }\n        if (sum % 2 == 0) {\n          \
    \  array.Sort();\n        } else {\n            array.Reverse();\n        }\n\
    \        List<long> result = new List<long>();\n        foreach (long value in\
    \ array) {\n            result.Add(value);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00004] in <d04f7dbc84ef4c609373c6873da81b0a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <d04f7dbc84ef4c609373c6873da81b0a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00004] in <d04f7dbc84ef4c609373c6873da81b0a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <d04f7dbc84ef4c609373c6873da81b0a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long lastSumIndex\
    \ = 0;\n        long lastSumIndex2 = 0;\n        long lastSumIndex3 = 0;\n   \
    \     long lastSumIndex4 = 0;\n        long lastSumIndex5 = 0;\n        long lastSumIndex6\
    \ = 0;\n        long lastSumIndex7 = 0;\n        long lastSumIndex8 = 0;\n   \
    \     long lastSumIndex9 = 0;\n        long lastSumIndex10 = 0;\n        long\
    \ lastSumIndex11 = 0;\n        long lastSumIndex12 = 0;\n        long lastSumIndex13\
    \ = 0;\n        long lastSumIndex14 = 0;\n        long lastSumIndex15 = 0;\n \
    \       long lastSumIndex16 = 0;\n        long lastSumIndex17 = 0;\n        long\
    \ lastSumIndex18 = 0;\n        long lastSumIndex19 = 0;\n        long lastSumIndex20\
    \ = 0;\n        long lastSumIndex21 = 0;\n        long lastSumIndex22 = 0;\n \
    \       long lastSumIndex23 = 0;\n        long lastSumIndex24 = 0;\n        long\
    \ lastSumIndex25 = 0;\n        long lastSumIndex26 = 0;\n        long lastSumIndex27\
    \ = 0;\n        long lastSumIndex28 = 0;\n        long lastSumIndex29 = 0;\n \
    \       long lastSumIndex30 = 0;\n        long lastSumIndex31 = 0;\n        long\
    \ lastSumIndex32 = 0;\n        long lastSumIndex33 = 0;\n        long lastSumIndex34\
    \ = 0;\n        long lastSumIndex35 = 0;\n        long lastSumIndex36 = 0;\n \
    \       long lastSumIndex37 = 0;\n        long lastSumIndex38 = 0;\n        long\
    \ lastSumIndex39 = 0;\n        long lastSumIndex40 = 0;\n        long lastSumIndex41\
    \ = 0;\n        long lastSumIndex42 = 0;\n        long lastSumIndex43 = 0;\n \
    \       long lastSumIndex44 = 0;\n        long lastSumIndex45 = 0;\n        long\
    \ lastSumIndex46 = 0;\n        long lastSumIndex47 = 0;\n        long lastSumIndex48\
    \ = 0;\n        long lastSumIndex49 = 0;\n        long lastSumIndex50 = 0;\n \
    \       long lastSumIndex51 = 0;\n        long lastSumIndex52 = 0;\n        long\
    \ lastSumIndex53 = 0;\n        long lastSumIndex54 = 0;\n        long lastSumIndex55\
    \ = 0;\n        long lastSumIndex56 = 0;\n        long lastSumIndex57 = 0;\n \
    \       long lastSumIndex58 = 0;\n        long lastSumIndex59 = 0;\n        long\
    \ lastSumIndex60 = 0;\n        long lastSumIndex61 = 0;\n        long lastSumIndex62\
    \ = 0;\n        long lastSumIndex63 = 0;\n        long \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo43pktn4.cs(89,13): error CS1001: Identifier expected

    /tmp/tmpo43pktn4.cs(89,13): error CS1002: ; expected

    '
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in array) {\n            sum +=\
    \ i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n      \
    \      sum = sum / 2;\n            while (temp != 0) {\n                result.Add(sum);\n\
    \                temp = temp / 2;\n            }\n        } else {\n         \
    \   temp = sum;\n            sum = sum / 2;\n            while (temp != 0) {\n\
    \                result.Add(sum);\n                temp = temp / 2;\n        \
    \    }\n            temp = sum;\n            sum = sum / 2;\n            while\
    \ (temp != 0) {\n                result.Add(-sum);\n                temp = temp\
    \ / 2;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <98f600ced90a49e8a2c55b217d921e97>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <98f600ced90a49e8a2c55b217d921e97>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        foreach (var item in array) {\n   \
    \         sum += item;\n        }\n        if (sum % 2 == 0) {\n            array.Sort();\n\
    \        } else {\n            array.Reverse();\n        }\n        return array;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14484b2cdb1c42e68298560ca20d801e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14484b2cdb1c42e68298560ca20d801e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in array) {\n          \
    \  sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n\
    \            sum = sum / 2;\n            while (temp != 0) {\n               \
    \ result.Add(sum);\n                temp--;\n                sum = sum / 2;\n\
    \            }\n        } else {\n            temp = sum;\n            sum = sum\
    \ / 2;\n            while (temp != 0) {\n                result.Add(-sum);\n \
    \               temp--;\n                sum = sum / 2;\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <409eae03869d4d2d92a471bd757ce07d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <409eae03869d4d2d92a471bd757ce07d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        long first = 0;\n\
    \        long last = 0;\n        bool evenSum = false;\n        bool oddSum =\
    \ false;\n        foreach (long i in array) {\n            sum += i;\n       \
    \     if (sum % 2 == 0) {\n                evenSum = true;\n            } else\
    \ {\n                oddSum = true;\n            }\n        }\n        if (evenSum)\
    \ {\n            temp = array[array.Count - 1];\n            array[array.Count\
    \ - 1] = array[array.Count - 2];\n            array[array.Count - 2] = temp;\n\
    \        }\n        if (oddSum) {\n            temp = array[array.Count - 1];\n\
    \            array[array.Count - 1] = array[array.Count - 2];\n            array[array.Count\
    \ - 2] = temp;\n        }\n        Array.Sort(array);\n        return array;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi8s76q7c.cs(48,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpi8s76q7c.cs(26,14): warning CS0219: The variable ''first'' is assigned
    but its value is never used

    /tmp/tmpi8s76q7c.cs(27,14): warning CS0219: The variable ''last'' is assigned
    but its value is never used

    '
  timestamp: 1659824391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        foreach (var item in array) {\n   \
    \         sum += item;\n        }\n        if (sum % 2 == 0) {\n            array.Sort();\n\
    \        } else {\n            array.Reverse();\n        }\n        return array;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14484b2cdb1c42e68298560ca20d801e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14484b2cdb1c42e68298560ca20d801e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long lastSumIndex\
    \ = 0;\n        long lastSumIndex2 = 0;\n        long lastSumIndex3 = 0;\n   \
    \     long lastSumIndex4 = 0;\n        long lastSumIndex5 = 0;\n        long lastSumIndex6\
    \ = 0;\n        long lastSumIndex7 = 0;\n        long lastSumIndex8 = 0;\n   \
    \     long lastSumIndex9 = 0;\n        long lastSumIndex10 = 0;\n        long\
    \ lastSumIndex11 = 0;\n        long lastSumIndex12 = 0;\n        long lastSumIndex13\
    \ = 0;\n        long lastSumIndex14 = 0;\n        long lastSumIndex15 = 0;\n \
    \       long lastSumIndex16 = 0;\n        long lastSumIndex17 = 0;\n        long\
    \ lastSumIndex18 = 0;\n        long lastSumIndex19 = 0;\n        long lastSumIndex20\
    \ = 0;\n        long lastSumIndex21 = 0;\n        long lastSumIndex22 = 0;\n \
    \       long lastSumIndex23 = 0;\n        long lastSumIndex24 = 0;\n        long\
    \ lastSumIndex25 = 0;\n        long lastSumIndex26 = 0;\n        long lastSumIndex27\
    \ = 0;\n        long lastSumIndex28 = 0;\n        long lastSumIndex29 = 0;\n \
    \       long lastSumIndex30 = 0;\n        long lastSumIndex31 = 0;\n        long\
    \ lastSumIndex32 = 0;\n        long lastSumIndex33 = 0;\n        long lastSumIndex34\
    \ = 0;\n        long lastSumIndex35 = 0;\n        long lastSumIndex36 = 0;\n \
    \       long lastSumIndex37 = 0;\n        long lastSumIndex38 = 0;\n        long\
    \ lastSumIndex39 = 0;\n        long lastSumIndex40 = 0;\n        long lastSumIndex41\
    \ = 0;\n        long lastSumIndex42 = 0;\n        long lastSumIndex43 = 0;\n \
    \       long lastSumIndex44 = 0;\n        long lastSumIndex45 = 0;\n        long\
    \ lastSumIndex46 = 0;\n        long lastSumIndex47 = 0;\n        long lastSumIndex48\
    \ = 0;\n        long lastSumIndex49 = 0;\n        long lastSumIndex50 = 0;\n \
    \       long lastSumIndex51 = 0;\n        long lastSumIndex52 = 0;\n        long\
    \ lastSumIndex53 = 0;\n        long lastSumIndex54 = 0;\n        long lastSumIndex55\
    \ = 0;\n        long lastSumIndex56 = 0;\n        long lastSumIndex57 = 0;\n \
    \       long lastSumIndex58 = 0;\n        long lastSumIndex59 = 0;\n        long\
    \ lastSumIndex60 = 0;\n        long lastSumIndex61 = 0;\n        long lastSumIndex62\
    \ = 0;\n        long lastSumIndex63 = 0;\n        long \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo43pktn4.cs(89,13): error CS1001: Identifier expected

    /tmp/tmpo43pktn4.cs(89,13): error CS1002: ; expected

    '
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long maxSum = array.Sum();\n      \
    \  long minSum = array.Sum(x => x);\n        long maxValue = array.Max();\n  \
    \      long minValue = array.Min();\n        bool isEven = maxValue % 2 == 0;\n\
    \        bool isOdd = maxValue % 2 != 0;\n        bool isEvenOrOdd = isEven ||\
    \ isOdd;\n        bool isEvenOrOddOrBoth = isEven || isOdd || isEvenOrOdd;\n \
    \       bool isEvenOrOddOrBothOrNone = isEven || isOdd || isEvenOrOdd || isEvenOrOdd\
    \ || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd ||\
    \ isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd\
    \ || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd ||\
    \ isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd\
    \ || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd ||\
    \ isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd\
    \ || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd ||\
    \ isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd\
    \ || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd ||\
    \ isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd\
    \ || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd ||\
    \ isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd\
    \ || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd ||\
    \ isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrO\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw0wnfuz6.cs(33,1238): error CS1002: ; expected

    '
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum1 = 0;\n        long sum2 =\
    \ 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n\
    \        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n    \
    \    long sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n      \
    \  long sum12 = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n       \
    \ long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n        long\
    \ sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long sum21\
    \ = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24 =\
    \ 0;\n        long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n\
    \        long sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n \
    \       long sum31 = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n  \
    \      long sum34 = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n   \
    \     long sum37 = 0;\n        long sum38 = 0;\n        long sum39 = 0;\n    \
    \    long sum40 = 0;\n        long sum41 = 0;\n        long sum42 = 0;\n     \
    \   long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n      \
    \  long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n       \
    \ long sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long\
    \ sum52 = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55\
    \ = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n        long sum58 =\
    \ 0;\n        long sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n\
    \        long sum62 = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n \
    \       long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n  \
    \      long sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n   \
    \     long sum71 = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n    \
    \    long sum74 = 0;\n        long sum75 = 0;\n        long sum76 = 0;\n     \
    \   long sum77 = 0;\n        long sum78 = 0;\n        long sum79 = 0;\n      \
    \  long sum80 = 0;\n        long sum81 = 0;\n        long sum82 = 0;\n       \
    \ long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n        long\
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpynmwdonl.cs(110,13): error CS1001: Identifier expected

    /tmp/tmpynmwdonl.cs(110,13): error CS1002: ; expected

    '
  timestamp: 1659824389
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in array) {\n          \
    \  sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n\
    \            sum = sum / 2;\n            while (temp != 0) {\n               \
    \ result.Add(sum);\n                temp--;\n                sum++;\n        \
    \    }\n        } else {\n            temp = sum;\n            sum = sum / 2;\n\
    \            while (temp != 0) {\n                result.Add(sum);\n         \
    \       temp--;\n                sum--;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7339a16a20e745a884f1dec830896422>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7339a16a20e745a884f1dec830896422>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count < 2)\n            return array;\n        long\
    \ sum = 0;\n        long first = 0;\n        long last = 0;\n        foreach (long\
    \ i in array)\n            sum += i;\n        if (sum % 2 == 1)\n            array.Reverse();\n\
    \        foreach (long i in array) {\n            first = i;\n            last\
    \ = array.Last();\n            if (sum % 2 == 1)\n                array.Reverse();\n\
    \            sum += first + last;\n            if (sum % 2 == 1)\n           \
    \     array.Reverse();\n        }\n        return array;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57bbd71f8f05409eb17228b4d58c47c5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57bbd71f8f05409eb17228b4d58c47c5>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Collection was modified; enumeration operation\
    \ may not execute.\n  at System.Collections.Generic.List`1+Enumerator[T].MoveNextRare\
    \ () [0x00013] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.List`1+Enumerator[T].MoveNext\
    \ () [0x0004a] in <aa5dff9b31c64fce86559bbbf"
  stdout: ''
  timestamp: 1659824391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        long first\
    \ = 0;\n        long last = 0;\n        bool isEven = true;\n        bool isOdd\
    \ = true;\n        long sumFirst = 0;\n        long sumLast = 0;\n        long\
    \ tempFirst = 0;\n        long tempLast = 0;\n        List<long> result = new\
    \ List<long>();\n        foreach (long i in array) {\n            sum += i;\n\
    \        }\n        foreach (long i in array) {\n            if (isEven) {\n \
    \               tempFirst = first;\n                tempLast = last;\n       \
    \         first = i;\n                last = i;\n                isEven = !isEven;\n\
    \            } else {\n                tempFirst = last;\n                tempLast\
    \ = first;\n                first = i;\n                last = i;\n          \
    \      isOdd = !isOdd;\n            }\n            sumFirst += tempFirst;\n  \
    \          sumLast += tempLast;\n        }\n        if (isOdd && sumFirst > sumLast)\
    \ {\n            foreach (long i in array) {\n                result.Add(i);\n\
    \            }\n        } else if (isEven && sumFirst < sumLast) {\n         \
    \   foreach (long i in array) {\n                result.Add(i);\n            }\n\
    \        } else {\n            foreach (long i in array) {\n                if\
    \ (sumFirst <= sumLast) {\n                    if (sumFirst < i) {\n         \
    \               result.Add(i);\n                    } else if (sumLast > i) {\n\
    \                        result.Add(i);\n                    }\n             \
    \   } else {\n                    if (sumFirst > i) {\n                      \
    \  result.Add(i);\n                    } else if (sumLast < i) {\n           \
    \             result.Add(i);\n                    }\n                }\n     \
    \       }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3990d7cb10d3481babdc34ad18428254>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3990d7cb10d3481babdc34ad18428254>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastFirstSum = 0;\n        long firstLastSum = 0;\n     \
    \   long lastFirstLastSum = 0;\n        long firstLastFirstSum = 0;\n        long\
    \ lastFirstLastFirstSum = 0;\n        long firstLastFirstLastSum = 0;\n      \
    \  long lastFirstLastFirstLastSum = 0;\n        long firstLastFirstLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjh24wczb.cs(73,43): error CS1002: ; expected

    '
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long maxSum = 0;\n        long minSum = 0;\n        long maxIndex\
    \ = 0;\n        long minIndex = 0;\n        long maxValue = 0;\n        long minValue\
    \ = 0;\n        long maxCount = 0;\n        long minCount = 0;\n        long maxCount2\
    \ = 0;\n        long minCount2 = 0;\n        long maxCount3 = 0;\n        long\
    \ minCount3 = 0;\n        long maxCount4 = 0;\n        long minCount4 = 0;\n \
    \       long maxCount5 = 0;\n        long minCount5 = 0;\n        long maxCount6\
    \ = 0;\n        long minCount6 = 0;\n        long maxCount7 = 0;\n        long\
    \ minCount7 = 0;\n        long maxCount8 = 0;\n        long minCount8 = 0;\n \
    \       long maxCount9 = 0;\n        long minCount9 = 0;\n        long maxCount10\
    \ = 0;\n        long minCount10 = 0;\n        long maxCount11 = 0;\n        long\
    \ minCount11 = 0;\n        long maxCount12 = 0;\n        long minCount12 = 0;\n\
    \        long maxCount13 = 0;\n        long minCount13 = 0;\n        long maxCount14\
    \ = 0;\n        long minCount14 = 0;\n        long maxCount15 = 0;\n        long\
    \ minCount15 = 0;\n        long maxCount16 = 0;\n        long minCount16 = 0;\n\
    \        long maxCount17 = 0;\n        long minCount17 = 0;\n        long maxCount18\
    \ = 0;\n        long minCount18 = 0;\n        long maxCount19 = 0;\n        long\
    \ minCount19 = 0;\n        long maxCount20 = 0;\n        long minCount20 = 0;\n\
    \        long maxCount21 = 0;\n        long minCount21 = 0;\n        long maxCount22\
    \ = 0;\n        long minCount22 = 0;\n        long maxCount23 = 0;\n        long\
    \ minCount23 = 0;\n        long maxCount24 = 0;\n        long minCount24 = 0;\n\
    \        long maxCount25 = 0;\n        long minCount25 = 0;\n        long maxCount26\
    \ = 0;\n        long minCount26 = 0;\n        long maxCount27 = 0;\n        long\
    \ minCount27 = 0;\n        long maxCount28 = 0;\n        long minCount28 = 0;\n\
    \        long maxCount29 = 0;\n        long minCount29 = 0;\n        long maxCount30\
    \ = 0;\n        long minCount30 = 0;\n        long maxCount31 = 0;\n        long\
    \ minCount31 = 0;\n        long maxCount32 = 0;\n        long minCount32 = 0;\n\
    \        long maxCount33 = 0;\n        long minCount33 = 0;\n        long maxCount34\
    \ = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2i2gi8p1.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmp2i2gi8p1.cs(25,14): warning CS0219: The variable ''lastSum'' is assigned
    but its value is never used

    /tmp/tmp2i2gi8p1.cs(26,14): warning CS0219: The variable ''firstSum'' is assigned
    but its value is never used

    /tmp/tmp2i2gi8p1.cs(27,14): warning CS0219: The variable ''maxSum'' is assigned
    but its value is never used

    /tmp/tmp2i2gi8p1.cs(28,14): warning CS0219: The variable ''minSum'' is assigned
    but its value is never used

    /tmp/tmp2i2gi8p1.cs(29,14): warning CS0219: The variable ''maxIndex'' is assigned
    but its value is never used

    /tmp/tmp2i2gi8p1.cs(30,14): warning CS0219: The variable ''minIndex'' is assigned
    but its value is never used

    /tmp/tmp2i2gi8p1.cs(31,14): warning CS0219: The variable ''maxValue'' is assigned
    but its value is never used

    /tmp/tmp2i2gi8p1.cs(32,14): warning CS0219: The variable ''minValue'' is assigned
    but its value is never used

    /tmp/tmp2i2gi8p1.cs(33,14): warning CS0219: The variable ''maxCount'' is assigned
    but its value is never used

    /tmp/tmp2i2gi8p1.cs(34,14): warning CS0219: The variable ''minCount'' is assigned
    but its value is never used

    /tmp/tmp2i2gi8p1.cs(35,14): warning CS0219: The variable ''maxCount2'' is assigned
    but its value is never used

    /tmp/tmp2i2gi8p1.cs(36,14): warning CS0219: The variable ''minCount2'' is assigned
    but its value is never used

    /tmp/tmp2i2gi8p1.cs(37,14): warning CS0219: The variable ''maxCount3'' is assigned
    but its value is never used

    /tmp/tmp2i2gi8p1.cs(38,14): warning CS0219: The variable ''minCount3'' is assigned
    but its value is never used

    /tmp/tmp2i2gi8p1.cs(39,14): warning CS0219: The variable ''maxCount4'' is assigned
    but its value is never used

    /tmp/tmp2i2gi8p1.cs(40,14): warning CS0219: The variable ''minCount4'' is assigned
    but its value is never used

    /tmp/tmp2i2gi8p1.cs(41,14): warning CS0219: The variable ''maxCount5'' is assigned
    but its '
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long maxSum = 0;\n        long minSum\
    \ = array.First();\n        foreach (long i in array) {\n            sum += i;\n\
    \            maxSum = Math.Max(maxSum, sum);\n            minSum = Math.Min(minSum,\
    \ sum);\n        }\n        if (sum % 2 == 0) {\n            array.Reverse();\n\
    \        }\n        long midSum = sum / 2;\n        long midMaxSum = maxSum /\
    \ 2;\n        long midMinSum = minSum / 2;\n        long midSum2 = midSum / 2;\n\
    \        long midMaxSum2 = midMaxSum / 2;\n        long midMinSum2 = midMinSum\
    \ / 2;\n        long midSum3 = midSum2 / 2;\n        long midMaxSum3 = midMaxSum2\
    \ / 2;\n        long midMinSum3 = midMinSum2 / 2;\n        long midSum4 = midSum3\
    \ / 2;\n        long midMaxSum4 = midMaxSum3 / 2;\n        long midMinSum4 = midMinSum3\
    \ / 2;\n        long midSum5 = midSum4 / 2;\n        long midMaxSum5 = midMaxSum4\
    \ / 2;\n        long midMinSum5 = midMinSum4 / 2;\n        long midSum6 = midSum5\
    \ / 2;\n        long midMaxSum6 = midMaxSum5 / 2;\n        long midMinSum6 = midMinSum5\
    \ / 2;\n        long midSum7 = midSum6 / 2;\n        long midMaxSum7 = midMaxSum6\
    \ / 2;\n        long midMinSum7 = midMinSum6 / 2;\n        long midSum8 = midSum7\
    \ / 2;\n        long midMaxSum8 = midMaxSum7 / 2;\n        long midMinSum8 = midMinSum7\
    \ / 2;\n        long midSum9 = midSum8 / 2;\n        long midMaxSum9 = midMaxSum8\
    \ / 2;\n        long midMinSum9 = midMinSum8 / 2;\n        long midSum10 = midSum9\
    \ / 2;\n        long midMaxSum10 = midMaxSum9 / 2;\n        long midMinSum10 =\
    \ midMinSum9 / 2;\n        long midSum11 = midSum10 / 2;\n        long midMaxSum11\
    \ = midMaxSum10 / 2;\n        long midMinSum11 = midMinSum10 / 2;\n        long\
    \ midSum12 = midSum11 / 2;\n        long midMaxSum12 = midMaxSum11 / 2;\n    \
    \    long midMinSum12 = midMinSum11 / 2;\n        long midSum13 = midSum12 / 2;\n\
    \        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptop3wier.cs(23,30): error CS0161: ''Problem.SortArray(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastElement = array.Last();\n        long firstElement =\
    \ array.First();\n        foreach (long element in array) {\n            sum +=\
    \ element;\n            if (sum > lastSum) {\n                lastSum = sum;\n\
    \            }\n            if (sum < firstSum) {\n                firstSum =\
    \ sum;\n            }\n        }\n        long middleElement = firstSum + lastSum;\n\
    \        long middleElement2 = firstSum - lastSum;\n        long middleElement3\
    \ = firstSum + lastSum - firstSum;\n        long middleElement4 = firstSum - lastSum\
    \ - firstSum;\n        long middleElement5 = firstSum + lastSum - firstSum - lastSum;\n\
    \        long middleElement6 = firstSum - lastSum - firstSum - lastSum - lastSum;\n\
    \        long middleElement7 = firstSum + lastSum - firstSum - lastSum - lastSum\
    \ - lastSum;\n        long middleElement8 = firstSum - lastSum - firstSum - lastSum\
    \ - lastSum - lastSum - lastSum;\n        long middleElement9 = firstSum + lastSum\
    \ - firstSum - lastSum - lastSum - lastSum - lastSum - lastSum;\n        long\
    \ middleElement10 = firstSum - lastSum - firstSum - lastSum - lastSum - lastSum\
    \ - lastSum - lastSum - lastSum;\n        long middleElement11 = firstSum + lastSum\
    \ - firstSum - lastSum - lastSum - lastSum - lastSum - lastSum - lastSum - lastSum;\n\
    \        long middleElement12 = firstSum - lastSum - firstSum - lastSum - lastSum\
    \ - lastSum - lastSum - lastSum - lastSum - lastSum - lastSum;\n        long middleElement13\
    \ = firstSum + lastSum - firstSum - lastSum - lastSum - lastSum - lastSum - lastSum\
    \ - lastSum - lastSum - lastSum - lastSum;\n        long middleElement14 = firstSum\
    \ - lastSum - firstSum - lastSum - lastSum - lastSum - lastSum - lastSum - lastSum\
    \ - lastSum - lastSum - lastSum;\n        long middleElement15 = firstSum + lastSum\
    \ - firstSum - lastSum - lastSum - lastSum - lastSum - lastSum - lastSum - lastSum\
    \ - lastSum - lastSum - lastSum;\n        long middleElement16 = firstSum - lastSum\
    \ - firstSum - lastSum - \n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv26uq22i.cs(53,73): error CS1525: Invalid expression term ''}''

    /tmp/tmpv26uq22i.cs(53,73): error CS1002: ; expected

    '
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long first = 0;\n        long last\
    \ = 0;\n        long sumOfFirst = 0;\n        long sumOfLast = 0;\n        long\
    \ sumOfFirstLast = 0;\n        long sumOfFirstLastSum = 0;\n        long sumOfFirstLastSumOfFirst\
    \ = 0;\n        long sumOfFirstLastSumOfLast = 0;\n        long sumOfFirstLastSumOfFirstLast\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSum = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirst\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfLast = 0;\n        long\
    \ sumOfFirstLastSumOfFirstLastSumOfFirstLast = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSum\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirst = 0;\n\
    \        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfLast = 0;\n     \
    \   long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLast = 0;\n     \
    \   long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSum = 0;\n  \
    \      long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirst\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfLast\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLast\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSum\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirst\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfLast\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLast\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSum\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirst\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLast\
    \ = 0;\n        long sumOfFirstLastSumOf\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpii2ix3s1.cs(53,33): error CS1002: ; expected

    '
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array == null || array.Count < 2)\n            return\
    \ array;\n        long sum = 0;\n        foreach (var item in array)\n       \
    \     sum += item;\n        if (sum % 2 == 1)\n            return array.OrderByDescending(item\
    \ => item).ToList();\n        return array.OrderBy(item => item).ToList();\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2fd329e533c74af093d423b3c561d04f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2fd329e533c74af093d423b3c561d04f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in array) {\n          \
    \  sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum /\
    \ 2;\n            for (int i = 0; i < array.Count; i++) {\n                if\
    \ (array[i] > temp) {\n                    result.Add(array[i]);\n           \
    \     }\n            }\n        } else {\n            temp = sum / 2;\n      \
    \      for (int i = 0; i < array.Count; i++) {\n                if (array[i] <\
    \ temp) {\n                    result.Add(array[i]);\n                }\n    \
    \        }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da1aa8ee06c846678c9f12401ec85da9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da1aa8ee06c846678c9f12401ec85da9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long maxValue = array.Last();\n   \
    \     foreach (long value in array) {\n            sum += value;\n        }\n\
    \        if (sum % 2 == 0) {\n            array.Sort();\n        } else {\n  \
    \          array.Reverse();\n        }\n        List<long> result = new List<long>();\n\
    \        foreach (long value in array) {\n            result.Add(value);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Last[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00004] in <2d50ffe8fd1044c6994fa7bef30206a4>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2d50ffe8fd1044c6994fa7bef30206a4>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Last[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00004] in <2d50ffe8fd1044c6994fa7bef30206a4>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2d50ffe8fd1044c6994fa7bef30206a4>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long first = 0;\n        long last\
    \ = 0;\n        long mid = 0;\n        long temp = 0;\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in array) {\n            sum +=\
    \ i;\n            if (sum % 2 == 1) {\n                result.Add(i);\n      \
    \      }\n        }\n        foreach (long i in result) {\n            first =\
    \ i;\n        }\n        foreach (long i in result) {\n            last = i;\n\
    \        }\n        mid = first + (last - first) / 2;\n        temp = mid;\n \
    \       while (temp != first) {\n            if (temp > last) {\n            \
    \    temp = temp - last;\n                result.Insert(0, temp);\n          \
    \  }\n            else {\n                temp = temp - first;\n             \
    \   result.Add(temp);\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c651a185ba6849faa59ea5abf291d723>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c651a185ba6849faa59ea5abf291d723>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastFirstSum = 0;\n        long firstLastSum = 0;\n     \
    \   long lastFirstLastSum = 0;\n        long firstLastFirstSum = 0;\n        long\
    \ lastFirstLastFirstSum = 0;\n        long firstLastFirstLastSum = 0;\n      \
    \  long lastFirstLastFirstLastSum = 0;\n        long firstLastFirstLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjh24wczb.cs(73,43): error CS1002: ; expected

    '
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in array) {\n          \
    \  sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n\
    \            sum = sum / 2;\n            foreach (long i in array) {\n       \
    \         sum += i;\n            }\n            while (temp != sum) {\n      \
    \          result.Add(array[array.Count - 1]);\n                array.RemoveAt(array.Count\
    \ - 1);\n                sum -= array[array.Count - 1];\n            }\n     \
    \   } else {\n            temp = sum;\n            sum = sum / 2;\n          \
    \  foreach (long i in array) {\n                sum += i;\n            }\n   \
    \         while (temp != sum) {\n                result.Add(array[array.Count\
    \ - 1]);\n                array.RemoveAt(array.Count - 1);\n                sum\
    \ -= array[array.Count - 1];\n            }\n            temp = sum;\n       \
    \     sum = sum / 2;\n            foreach (long i in array) {\n              \
    \  sum += i;\n            }\n            while (temp != sum) {\n             \
    \   result.Add(array[array.Count - 1]);\n                array.RemoveAt(array.Count\
    \ - 1);\n                sum -= array[array.Count - 1];\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <55bace1b6cb14bca84c96445dabc59d5>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.SortArray (System.Collections.Generic.List`1[T] array) [0x00147] in\
    \ <55bace1b6cb14bca84c96445dabc59d5>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x0002b] in <55bace1b6cb14bca84c96445dabc59d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must\
    \ be non-negative and less than the size of the collection.\nParameter name: index\n\
    \  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray (System.Collections.Generic.List`1[T]\
    \ array) [0x00147] in <55bace1b6cb14bca84c96445dabc59d5>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002b] in <55bace1b6cb14bca84c96445dabc59d5>:0 \n"
  stdout: ''
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        foreach (var item in array) {\n   \
    \         sum += item;\n        }\n        if (sum % 2 == 0) {\n            array.Sort();\n\
    \        } else {\n            array.Reverse();\n        }\n        return array;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14484b2cdb1c42e68298560ca20d801e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14484b2cdb1c42e68298560ca20d801e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in array) {\n          \
    \  sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n\
    \            sum = sum / 2;\n            while (temp != sum) {\n             \
    \   result.Add(temp);\n                temp = temp / 2;\n            }\n     \
    \   } else {\n            temp = sum;\n            sum = sum / 2;\n          \
    \  while (temp != sum) {\n                result.Add(temp);\n                temp\
    \ = temp / 2;\n            }\n            temp = sum;\n            sum = sum /\
    \ 2;\n            while (temp != sum) {\n                result.Add(temp);\n \
    \               temp = temp / 2;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f38e8d3cb8446d48b0cf7a84ef2cf5e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f38e8d3cb8446d48b0cf7a84ef2cf5e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        long sumOfFirstIndex\
    \ = 0;\n        long sumOfLastIndex = 0;\n        long firstIndex = 0;\n     \
    \   long lastIndex = 0;\n        bool isEvenSum = false;\n        bool isOddSum\
    \ = false;\n        bool isEven = true;\n        bool isOdd = true;\n        bool\
    \ isEvenSumOdd = false;\n        bool isOddSumOdd = false;\n        bool isEvenSumEven\
    \ = false;\n        bool isOddSumEven = false;\n        bool isEvenSumOddEven\
    \ = false;\n        bool isOddSumOddEven = false;\n        bool isEvenSumEvenOdd\
    \ = false;\n        bool isOddSumEvenOdd = false;\n        bool isEvenSumOddEvenOdd\
    \ = false;\n        bool isOddSumOddEvenOdd = false;\n        bool isEvenSumEvenOddOdd\
    \ = false;\n        bool isOddSumEvenOddOdd = false;\n        bool isEvenSumOddEvenOddOdd\
    \ = false;\n        bool isOddSumOddEvenOddOdd = false;\n        bool isEvenSumEvenOddOddOdd\
    \ = false;\n        bool isOddSumEvenOddOddOdd = false;\n        bool isEvenSumOddEvenOddOddOdd\
    \ = false;\n        bool isOddSumOddEvenOddOddOdd = false;\n        bool isEvenSumEvenOddOddOddOdd\
    \ = false;\n        bool isOddSumEvenOddOddOddOdd = false;\n        bool isEvenSumOddEvenOddOddOddOdd\
    \ = false;\n        bool isOddSumOddEvenOddOddOddOdd = false;\n        bool isEvenSumEvenOddOddOddOddOdd\
    \ = false;\n        bool isOddSumEvenOddOddOddOddOdd = false;\n        bool isEvenSumOddEvenOddOddOddOdd\
    \ = false;\n        bool isOddSumOddEvenOddOddOddOdd = false;\n        bool isEvenSumEvenOddOddOddOddOddOdd\
    \ = false;\n        bool isOddSumEvenOddOddOddOddOddOdd = false;\n        bool\
    \ isEvenSumOddEvenOddOddOddOddOdd = false;\n        bool isOddSumOddEvenOddOddOddOddOdd\
    \ = false;\n        bool \n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppvpo9b14.cs(64,13): error CS1001: Identifier expected

    /tmp/tmppvpo9b14.cs(64,13): error CS1002: ; expected

    '
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in array) {\n          \
    \  sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n\
    \            sum = sum / 2;\n            while (temp != sum) {\n             \
    \   result.Add(array[temp]);\n                temp++;\n            }\n       \
    \ } else {\n            temp = sum;\n            sum = sum / 2;\n            while\
    \ (temp != sum) {\n                result.Add(array[temp]);\n                temp--;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_1qmnbwl.cs(34,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_1qmnbwl.cs(41,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        foreach (var item in array) {\n   \
    \         sum += item;\n        }\n        if (sum % 2 == 0) {\n            array.Sort();\n\
    \        } else {\n            array.Reverse();\n        }\n        return array;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14484b2cdb1c42e68298560ca20d801e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14484b2cdb1c42e68298560ca20d801e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        foreach (long i in array) {\n     \
    \       sum += i;\n        }\n        long odd = sum % 2;\n        long even =\
    \ sum / 2;\n        bool isAscending = odd != 0;\n        bool isDescending =\
    \ even != 0;\n        long first = 0;\n        long last = array.Count - 1;\n\
    \        List<long> result = new List<long>();\n        bool isEven = true;\n\
    \        bool isOdd = true;\n        while (first <= last) {\n            long\
    \ mid = (first + last) / 2;\n            long midValue = array[mid];\n       \
    \     if (isEven) {\n                if (midValue > mid) {\n                 \
    \   isEven = false;\n                    first = mid;\n                } else\
    \ {\n                    result.Add(midValue);\n                    first = mid;\n\
    \                }\n            } else {\n                if (midValue < mid)\
    \ {\n                    isOdd = false;\n                    last = mid;\n   \
    \             } else {\n                    result.Add(midValue);\n          \
    \          last = mid;\n                }\n            }\n        }\n        if\
    \ (isAscending) {\n            return result;\n        } else {\n            return\
    \ result.Reverse();\n        }\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsm77zc32.cs(39,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpsm77zc32.cs(61,20): error CS0029: Cannot implicitly convert type ''void''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpsm77zc32.cs(36,14): warning CS0219: The variable ''isOdd'' is assigned
    but its value is never used

    '
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in array) {\n            sum +=\
    \ i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n      \
    \      sum = sum / 2;\n            while (temp != sum) {\n                result.Add(array[temp]);\n\
    \                temp--;\n            }\n        } else {\n            temp =\
    \ sum;\n            sum = sum / 2;\n            while (temp != sum) {\n      \
    \          result.Add(array[temp]);\n                temp++;\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp765i6oiq.cs(34,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp765i6oiq.cs(41,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long last\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ed9kler.cs(109,18): error CS1002: ; expected

    '
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long first = 0;\n        long last\
    \ = 0;\n        long temp = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long i in array) {\n            sum += i;\n            if (sum\
    \ % 2 == 0) {\n                first = i;\n            } else {\n            \
    \    last = i;\n            }\n        }\n        if (sum % 2 == 0) {\n      \
    \      temp = first;\n            first = last;\n            last = temp;\n  \
    \      }\n        Array.Sort(array);\n        foreach (long i in array) {\n  \
    \          if (i == first) {\n                result.Add(first);\n           \
    \ } else if (i == last) {\n                result.Add(last);\n            } else\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn3qo5pq1.cs(42,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long firstValue = array.First();\n        long lastValue = array.Last();\n\
    \        foreach (long value in array) {\n            sum += value;\n        \
    \    lastSum += value;\n            firstSum += firstValue;\n        }\n     \
    \   if (sum % 2 == 0) {\n            firstSum = firstSum - lastSum;\n        \
    \    firstValue = firstValue - lastValue;\n        }\n        List<long> result\
    \ = new List<long>();\n        foreach (long value in array) {\n            if\
    \ (sum % 2 == 0) {\n                result.Add(firstSum + value);\n          \
    \      firstSum = firstSum - lastSum;\n                firstValue = firstValue\
    \ - lastValue;\n            } else {\n                result.Add(firstValue +\
    \ value);\n                firstSum = firstSum - lastSum;\n                firstValue\
    \ = firstValue - lastValue;\n            }\n            lastSum = lastSum + value;\n\
    \            lastValue = lastValue + value;\n            sum = sum - value;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x0000a] in <aa3a8c77cfec4fe888230afc9684893b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <aa3a8c77cfec4fe888230afc9684893b>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x0000a] in <aa3a8c77cfec4fe888230afc9684893b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <aa3a8c77cfec4fe888230afc9684893b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        long first\
    \ = 0;\n        long last = 0;\n        long sumFirst = 0;\n        long sumLast\
    \ = 0;\n        long sumFirstLast = 0;\n        long sumLastFirst = 0;\n     \
    \   long sumFirstLastLast = 0;\n        long sumLastFirstLast = 0;\n        long\
    \ sumFirstLastLastLast = 0;\n        long sumLastFirstLastLast = 0;\n        long\
    \ sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast = 0;\n\
    \        long sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast\
    \ = 0;\n        long sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast\
    \ = 0;\n        long sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast\
    \ = 0;\n        long sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast\
    \ = 0;\n        long sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast\
    \ = 0;\n        long sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast\
    \ = 0;\n        long sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast\
    \ = 0;\n        long sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast\
    \ = 0;\n        long sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast\
    \ = 0;\n        long sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast\
    \ = 0;\n        long sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast\
    \ = 0;\n        long sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast\
    \ = 0;\n        long sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast\
    \ = 0;\n        long sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast\
    \ = 0;\n        long sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast\
    \ = 0;\n        long sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast\
    \ = 0;\n        long sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast\
    \ = 0;\n        long sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast\
    \ = 0;\n        long sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast\
    \ = 0;\n        long sumFirstLastLastLastLast = 0;\n        long sumLastFirstLastLastLast\
    \ = 0;\n        long sumFirstLastLastLastLast = 0;\n        long \n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkxemuvmj.cs(79,13): error CS1001: Identifier expected

    /tmp/tmpkxemuvmj.cs(79,13): error CS1002: ; expected

    '
  timestamp: 1659824391
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in array) {\n          \
    \  sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n\
    \            sum = sum / 2;\n            while (temp != 0) {\n               \
    \ result.Add(sum);\n                sum -= temp;\n                temp = sum;\n\
    \                sum = sum / 2;\n            }\n        } else {\n           \
    \ temp = sum;\n            sum = sum / 2;\n            while (temp != 0) {\n \
    \               result.Add(sum);\n                sum -= temp;\n             \
    \   temp = sum;\n                sum = sum / 2;\n            }\n            temp\
    \ = sum;\n            sum = sum / 2;\n            while (temp != 0) {\n      \
    \          result.Add(sum);\n                sum -= temp;\n                temp\
    \ = sum;\n                sum = sum / 2;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2e1875306a44f12b84987f05278e833>:0 \n"
  stdout: None
  timestamp: 1659824397
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long max = 0;\n        foreach (var\
    \ item in array) {\n            sum += item;\n            if (sum > max) {\n \
    \               max = sum;\n            }\n        }\n        if (sum % 2 == 0)\
    \ {\n            array.Reverse();\n        }\n        long sum2 = 0;\n       \
    \ long max2 = 0;\n        foreach (var item in array) {\n            sum2 += item;\n\
    \            if (sum2 > max2) {\n                max2 = sum2;\n            }\n\
    \        }\n        if (sum2 % 2 == 0) {\n            array.Reverse();\n     \
    \   }\n        long sum3 = 0;\n        long max3 = 0;\n        foreach (var item\
    \ in array) {\n            sum3 += item;\n            if (sum3 > max3) {\n   \
    \             max3 = sum3;\n            }\n        }\n        if (sum3 % 2 ==\
    \ 0) {\n            array.Reverse();\n        }\n        long sum4 = 0;\n    \
    \    long max4 = 0;\n        foreach (var item in array) {\n            sum4 +=\
    \ item;\n            if (sum4 > max4) {\n                max4 = sum4;\n      \
    \      }\n        }\n        if (sum4 % 2 == 0) {\n            array.Reverse();\n\
    \        }\n        long sum5 = 0;\n        long max5 = 0;\n        foreach (var\
    \ item in array) {\n            sum5 += item;\n            if (sum5 > max5) {\n\
    \                max5 = sum5;\n            }\n        }\n        if (sum5 % 2\
    \ == 0) {\n            array.Reverse();\n        }\n        long sum6 = 0;\n \
    \       long max6 = 0;\n        foreach (var item in array) {\n            sum6\
    \ += item;\n            if (sum6 > max6) {\n                max6 = sum6;\n   \
    \         }\n        }\n        if (sum6 % 2 == 0) {\n            array.Reverse();\n\
    \        }\n        long sum7 = 0;\n        long max7 = 0;\n        foreach (var\
    \ item in array) {\n            sum7 += item;\n            if (sum7 > max7) {\n\
    \                max7 = sum7;\n            }\n        }\n        if (sum7 % 2\
    \ == 0) {\n            array.Reverse();\n        }\n        long sum8 = 0;\n \
    \       long max8 = 0;\n        foreach (var item in array) {\n            sum8\
    \ += item;\n            if (sum8 > max8) {\n                max8 = sum8;\n   \
    \         }\n        }\n        if (sum8 % 2 == 0) {\n            array.Reverse();\n\
    \        }\n        long sum9 = 0;\n        long max9 = 0;\n        foreach (var\
    \ item in array) {\n            sum9 += item;\n            if (sum9 > max9) {\n\
    \                max9 = sum9;\n            }\n        }\n        if (sum9 % 2\
    \ == 0) {\n            array.Reverse();\n        }\n        long sum10 = 0;\n\
    \        long max10 = 0;\n        foreach (var item in array) {\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb9yumg_t.cs(127,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpb9yumg_t.cs(137,2): error CS1513: } expected

    '
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long last = 0;\n        long first\
    \ = 0;\n        foreach (long i in array) {\n            sum += i;\n         \
    \   last = i;\n            first = i;\n        }\n        if (sum % 2 == 0) {\n\
    \            array.Sort((x, y) => y - x);\n        } else {\n            array.Sort((x,\
    \ y) => x - y);\n        }\n        return array;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmq6kkyr3.cs(33,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmq6kkyr3.cs(33,34): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmpmq6kkyr3.cs(35,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmq6kkyr3.cs(35,34): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659824391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in array) {\n            sum +=\
    \ i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n      \
    \      sum = sum / 2;\n            while (temp != 0) {\n                result.Add(temp\
    \ % 2);\n                temp = temp / 2;\n            }\n        } else {\n \
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=\
    \ 0) {\n                result.Add(temp % 2);\n                temp = temp / 2;\n\
    \            }\n            temp = sum;\n            sum = sum / 2;\n        \
    \    while (temp != 0) {\n                result.Add(temp % 2);\n            \
    \    temp = temp / 2;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <262258c4ab4142db8fb4263ac1013f97>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <262258c4ab4142db8fb4263ac1013f97>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count <= 1) {\n            return array;\n     \
    \   }\n        long sum = 0;\n        long lastValue = array.Last();\n       \
    \ foreach (long value in array) {\n            sum += value;\n        }\n    \
    \    if (sum % 2 == 0) {\n            array.Reverse();\n        }\n        long\
    \ firstValue = array.First();\n        long middleValue = firstValue + (lastValue\
    \ - firstValue) / 2;\n        long middleIndex = 0;\n        long middleSum =\
    \ 0;\n        long middleSumIndex = 0;\n        long middleSumValue = 0;\n   \
    \     List<long> result = new List<long>();\n        foreach (long value in array)\
    \ {\n            middleSum += value;\n            if (middleSum == middleValue)\
    \ {\n                middleSumIndex++;\n                middleSumValue = value;\n\
    \            }\n            if (middleSumIndex == middleValue) {\n           \
    \     result.Add(middleSumValue);\n                middleSumIndex = 0;\n     \
    \           middleSumValue = 0;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04d1a97d2aff427091f38431a16ebcaa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04d1a97d2aff427091f38431a16ebcaa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in array) {\n            sum +=\
    \ i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n      \
    \      sum = sum / 2;\n            while (temp != sum) {\n                result.Add(array[temp]);\n\
    \                temp--;\n            }\n        } else {\n            temp =\
    \ sum;\n            sum = sum / 2;\n            while (temp != sum) {\n      \
    \          result.Add(array[temp]);\n                temp++;\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp765i6oiq.cs(34,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp765i6oiq.cs(41,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long last = 0;\n        long first\
    \ = 0;\n        long mid = 0;\n        long sum1 = 0;\n        long sum2 = 0;\n\
    \        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n    \
    \    long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long\
    \ sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12\
    \ = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 =\
    \ 0;\n        long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n\
    \        long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n \
    \       long sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n  \
    \      long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n   \
    \     long sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n    \
    \    long sum31 = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n     \
    \   long sum34 = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n      \
    \  long sum37 = 0;\n        long sum38 = 0;\n        long sum39 = 0;\n       \
    \ long sum40 = 0;\n        long sum41 = 0;\n        long sum42 = 0;\n        long\
    \ sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n        long sum46\
    \ = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long sum49 =\
    \ 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n\
    \        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n \
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n  \
    \      long sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n   \
    \     long sum62 = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n    \
    \    long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n     \
    \   long sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n      \
    \  long sum71 = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n       \
    \ long sum74 = 0;\n        long sum75 = 0;\n        long sum76 = 0;\n        long\
    \ sum77 = 0;\n        long sum78 = 0;\n        long sum79 = 0;\n        long sum80\
    \ = 0;\n        long sum81 = 0;\n        long sum82 = 0;\n        long sum83 =\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptrwvtefr.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmptrwvtefr.cs(25,14): warning CS0219: The variable ''last'' is assigned
    but its value is never used

    /tmp/tmptrwvtefr.cs(26,14): warning CS0219: The variable ''first'' is assigned
    but its value is never used

    /tmp/tmptrwvtefr.cs(27,14): warning CS0219: The variable ''mid'' is assigned but
    its value is never used

    /tmp/tmptrwvtefr.cs(28,14): warning CS0219: The variable ''sum1'' is assigned
    but its value is never used

    /tmp/tmptrwvtefr.cs(29,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmptrwvtefr.cs(30,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmptrwvtefr.cs(31,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmptrwvtefr.cs(32,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmptrwvtefr.cs(33,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmptrwvtefr.cs(34,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmptrwvtefr.cs(35,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmptrwvtefr.cs(36,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmptrwvtefr.cs(37,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmptrwvtefr.cs(38,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmptrwvtefr.cs(39,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmptrwvtefr.cs(40,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmptrwvtefr.cs(41,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmptrwvtefr.cs(42,14): warning CS0219: T'
  timestamp: 1659824392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count < 2) {\n            return array;\n      \
    \  }\n        long sum = 0;\n        long first = 0;\n        long last = array.Count\
    \ - 1;\n        long mid;\n        while (first < last) {\n            mid = (first\
    \ + last) / 2;\n            sum = array[mid];\n            if (sum % 2 == 0) {\n\
    \                first = mid;\n            } else {\n                last = mid;\n\
    \            }\n        }\n        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        long first = 0;\n        long last = array.Count\
    \ - 1;\n        long mid;\n        while (first < last) {\n            mid = (first\
    \ + last) / 2;\n            sum = array[mid];\n            if (sum % 2 == 0) {\n\
    \                result.Add(mid);\n                first = mid;\n            }\
    \ else {\n                last = mid;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz6b4xppu.cs(33,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpz6b4xppu.cs(41,14): error CS0128: A local variable or function named ''sum''
    is already defined in this scope

    /tmp/tmpz6b4xppu.cs(42,14): error CS0128: A local variable or function named ''first''
    is already defined in this scope

    /tmp/tmpz6b4xppu.cs(43,14): error CS0128: A local variable or function named ''last''
    is already defined in this scope

    /tmp/tmpz6b4xppu.cs(44,14): error CS0128: A local variable or function named ''mid''
    is already defined in this scope

    /tmp/tmpz6b4xppu.cs(47,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpz6b4xppu.cs(41,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpz6b4xppu.cs(42,14): warning CS0219: The variable ''first'' is assigned
    but its value is never used

    /tmp/tmpz6b4xppu.cs(44,14): warning CS0168: The variable ''mid'' is declared but
    never used

    '
  timestamp: 1659824392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long tempSum = 0;\n        long tempLastSum = 0;\n        long\
    \ tempFirstSum = 0;\n        long tempSum2 = 0;\n        long tempLastSum2 = 0;\n\
    \        long tempFirstSum2 = 0;\n        long tempSum3 = 0;\n        long tempLastSum3\
    \ = 0;\n        long tempFirstSum3 = 0;\n        long tempSum4 = 0;\n        long\
    \ tempLastSum4 = 0;\n        long tempFirstSum4 = 0;\n        long tempSum5 =\
    \ 0;\n        long tempLastSum5 = 0;\n        long tempFirstSum5 = 0;\n      \
    \  long tempSum6 = 0;\n        long tempLastSum6 = 0;\n        long tempFirstSum6\
    \ = 0;\n        long tempSum7 = 0;\n        long tempLastSum7 = 0;\n        long\
    \ tempFirstSum7 = 0;\n        long tempSum8 = 0;\n        long tempLastSum8 =\
    \ 0;\n        long tempFirstSum8 = 0;\n        long tempSum9 = 0;\n        long\
    \ tempLastSum9 = 0;\n        long tempFirstSum9 = 0;\n        long tempSum10 =\
    \ 0;\n        long tempLastSum10 = 0;\n        long tempFirstSum10 = 0;\n    \
    \    long tempSum11 = 0;\n        long tempLastSum11 = 0;\n        long tempFirstSum11\
    \ = 0;\n        long tempSum12 = 0;\n        long tempLastSum12 = 0;\n       \
    \ long tempFirstSum12 = 0;\n        long tempSum13 = 0;\n        long tempLastSum13\
    \ = 0;\n        long tempFirstSum13 = 0;\n        long tempSum14 = 0;\n      \
    \  long tempLastSum14 = 0;\n        long tempFirstSum14 = 0;\n        long tempSum15\
    \ = 0;\n        long tempLastSum15 = 0;\n        long tempFirstSum15 = 0;\n  \
    \      long tempSum16 = 0;\n        long tempLastSum16 = 0;\n        long tempFirstSum16\
    \ = 0;\n        long tempSum17 = 0;\n        long tempLastSum17 = 0;\n       \
    \ long tempFirstSum17 = 0;\n        long tempSum18 = 0;\n        long tempLastSum18\
    \ = 0;\n        long tempFirstSum18 = 0;\n        long tempSum19 = 0;\n      \
    \  long tempLastSum19 = 0;\n        long tempFirstSum19 = 0;\n        long tempSum20\
    \ = 0;\n        long tempLastSum20 = 0;\n        long tempFirstSum20 = 0;\n  \
    \      long tempSum21 = 0;\n        long tempLastSum21 = 0;\n        long tempFirstSum21\
    \ = 0;\n        long tempSum22 = 0;\n        long tempLastSum22 = 0;\n       \
    \ long tempFirstSum22 = 0;\n        long tempSum\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp10s22ggm.cs(93,21): error CS1002: ; expected

    '
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastElement = array.Last();\n        foreach (long element\
    \ in array) {\n            sum += element;\n            if (sum > lastSum) {\n\
    \                lastSum = sum;\n                firstSum = lastElement;\n   \
    \         }\n            if (sum < firstSum) {\n                firstSum = sum;\n\
    \                lastSum = lastElement;\n            }\n        }\n        if\
    \ (sum % 2 == 0) {\n            array.Reverse();\n        }\n        long lastElementIndex\
    \ = array.Count - 1;\n        long firstElementIndex = 0;\n        long lastSumIndex\
    \ = array.Count - 1;\n        long firstSumIndex = array.Count - 1;\n        long\
    \ lastSumElement = array.Last();\n        long firstSumElement = array.First();\n\
    \        long lastSumElementIndex = array.Count - 1;\n        long firstSumElementIndex\
    \ = array.Count - 1;\n        long lastSumElementIndex2 = array.Count - 1;\n \
    \       long firstSumElementIndex2 = array.Count - 1;\n        long lastSumElementIndex3\
    \ = array.Count - 1;\n        long firstSumElementIndex3 = array.Count - 1;\n\
    \        long lastSumElementIndex4 = array.Count - 1;\n        long firstSumElementIndex4\
    \ = array.Count - 1;\n        long lastSumElementIndex5 = array.Count - 1;\n \
    \       long firstSumElementIndex5 = array.Count - 1;\n        long lastSumElementIndex6\
    \ = array.Count - 1;\n        long firstSumElementIndex6 = array.Count - 1;\n\
    \        long lastSumElementIndex7 = array.Count - 1;\n        long firstSumElementIndex7\
    \ = array.Count - 1;\n        long lastSumElementIndex8 = array.Count - 1;\n \
    \       long firstSumElementIndex8 = array.Count - 1;\n        long lastSumElementIndex9\
    \ = array.Count - 1;\n        long firstSumElementIndex9 = array.Count - 1;\n\
    \        long lastSumElementIndex10 = array.Count - 1;\n        long firstSumElementIndex10\
    \ = array.Count - 1;\n        long lastSumElementIndex11 = array.Count - 1;\n\
    \        long firstSumElementIndex11 = array.Count - 1;\n        long lastSumElementIndex12\
    \ = array.Count - 1;\n        long firstSumElementIndex12 = array.Count - 1;\n\
    \        long lastSumElementIndex13 = array.Count - 1;\n        long firstSumElementIndex13\
    \ = array.Count - 1;\n        long lastSumElementIndex14 = array.Count - 1;\n\
    \        long firstSumElementIndex14 = array.Count - 1;\n        long lastSumElementIndex15\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa1_kjcgr.cs(79,35): error CS1002: ; expected

    '
  timestamp: 1659824391
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in array) {\n          \
    \  sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n\
    \            sum = sum / 2;\n            while (temp != 0) {\n               \
    \ result.Add(sum);\n                sum -= temp;\n                temp = sum;\n\
    \                sum = sum / 2;\n            }\n        } else {\n           \
    \ temp = sum;\n            sum = sum / 2;\n            while (temp != 0) {\n \
    \               result.Add(sum);\n                sum -= temp;\n             \
    \   temp = sum;\n                sum = sum / 2;\n            }\n            temp\
    \ = sum;\n            sum = sum / 2;\n            while (temp != 0) {\n      \
    \          result.Add(-sum);\n                sum -= temp;\n                temp\
    \ = sum;\n                sum = sum / 2;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d1e5bbd36ac4e73809e5b364df9eb99>:0 \n"
  stdout: None
  timestamp: 1659824397
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long maxValue = array.Max();\n    \
    \    long minValue = array.Min();\n        foreach (long i in array) {\n     \
    \       sum += i;\n        }\n        if (sum % 2 == 0) {\n            array.Sort();\n\
    \            return array;\n        }\n        array.Reverse();\n        array.Sort();\n\
    \        return array;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00004] in <43c6ed0bc973440db4753e453839061e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <43c6ed0bc973440db4753e453839061e>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00004] in <43c6ed0bc973440db4753e453839061e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <43c6ed0bc973440db4753e453839061e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long max = 0;\n        long min = 0;\n\
    \        foreach (var item in array) {\n            sum += item;\n           \
    \ if (max < item) {\n                max = item;\n            }\n            if\
    \ (min > item) {\n                min = item;\n            }\n        }\n    \
    \    if (sum % 2 == 0) {\n            array.Sort((x, y) => x - y);\n        }\
    \ else {\n            array.Sort((x, y) => y - x);\n        }\n        return\
    \ array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps_pzfjni.cs(37,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmps_pzfjni.cs(37,34): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmps_pzfjni.cs(39,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmps_pzfjni.cs(39,34): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659824392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in array) {\n          \
    \  sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n\
    \            sum = sum / 2;\n            while (temp != sum) {\n             \
    \   result.Add(array[temp]);\n                temp++;\n            }\n       \
    \ } else {\n            temp = sum;\n            sum = sum / 2;\n            while\
    \ (temp != sum) {\n                result.Add(array[temp]);\n                temp--;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_1qmnbwl.cs(34,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_1qmnbwl.cs(41,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastFirstSum = 0;\n        long firstLastSum = 0;\n     \
    \   long lastFirstLastSum = 0;\n        long firstLastFirstSum = 0;\n        long\
    \ lastFirstLastFirstSum = 0;\n        long firstLastFirstLastSum = 0;\n      \
    \  long lastFirstLastFirstLastSum = 0;\n        long firstLastFirstLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjh24wczb.cs(73,43): error CS1002: ; expected

    '
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long firstIndex = 0;\n        long lastIndex = 0;\n        long\
    \ sumOfFirstIndex = 0;\n        long sumOfLastIndex = 0;\n        bool isEvenSum\
    \ = false;\n        bool isOddSum = false;\n        bool isEvenSumOddSum = false;\n\
    \        bool isOddSumEvenSum = false;\n        bool isOddSumOddSum = false;\n\
    \        bool isEvenSumEvenSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool isEvenSumOddSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool isEvenSumOddSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool isEvenSumOddSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool isEvenSumOddSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool isEvenSumOddSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool isEvenSumOddSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool isEvenSumOddSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool isEvenSumOddSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool isEvenSumOddSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool isEvenSumOddSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool isEvenSumOddSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool isEvenSumOddSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool isEvenSumOddSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool isEvenSumOddSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool isEvenSumOddSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool isEvenSumOddSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool isEvenSumOddSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool isEvenSumOddSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool isEvenSumOddSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool isEvenSumOddSum = false;\n        bool isOddSumEvenSum = false;\n\
    \        bool is\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphxrom6xv.cs(78,14): error CS1001: Identifier expected

    /tmp/tmphxrom6xv.cs(78,14): error CS1002: ; expected

    /tmp/tmphxrom6xv.cs(78,14): error CS1525: Invalid expression term ''is''

    /tmp/tmphxrom6xv.cs(78,16): error CS1031: Type expected

    /tmp/tmphxrom6xv.cs(78,16): error CS1002: ; expected

    '
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        long first\
    \ = 0;\n        long last = 0;\n        foreach (var item in array) {\n      \
    \      sum += item;\n        }\n        if (sum % 2 == 0) {\n            temp\
    \ = sum;\n            first = array.First();\n            last = array.Last();\n\
    \            array.Clear();\n            array.Add(first);\n            array.Add(last);\n\
    \            array.Add(temp);\n        }\n        else {\n            temp = sum;\n\
    \            first = array.Last();\n            last = array.First();\n      \
    \      array.Clear();\n            array.Add(first);\n            array.Add(last);\n\
    \            array.Add(temp);\n        }\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00053] in <a294540d18ca4b5f9d11a48a1684a2f6>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <a294540d18ca4b5f9d11a48a1684a2f6>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00053] in <a294540d18ca4b5f9d11a48a1684a2f6>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <a294540d18ca4b5f9d11a48a1684a2f6>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastFirstSum = 0;\n        long firstLastSum = 0;\n     \
    \   long lastFirstLastSum = 0;\n        long firstLastFirstSum = 0;\n        long\
    \ firstLastLastSum = 0;\n        long firstLastFirstLastSum = 0;\n        long\
    \ firstLastLastFirstSum = 0;\n        long firstLastLastLastSum = 0;\n       \
    \ long firstLastLastFirstLastSum = 0;\n        long firstLastLastLastFirstSum\
    \ = 0;\n        long firstLastLastLastLastSum = 0;\n        long firstLastLastLastFirstLastSum\
    \ = 0;\n        long firstLastLastLastLastFirstSum = 0;\n        long firstLastLastLastLastLastSum\
    \ = 0;\n        long firstLastLastLastLastFirstLastSum = 0;\n        long firstLastLastLastLastLastFirstSum\
    \ = 0;\n        long firstLastLastLastLastLastLastSum = 0;\n        long firstLastLastLastLastLastFirstLastSum\
    \ = 0;\n        long firstLastLastLastLastLastLastFirstSum = 0;\n        long\
    \ firstLastLastLastLastLastLastFirstLastSum = 0;\n        long firstLastLastLastLastLastLastFirstLastSum\
    \ = 0;\n        long firstLastLastLastLastLastLastFirstLastSum = 0;\n        long\
    \ firstLastLastLastLastLastLastFirstLastSum = 0;\n        long firstLastLastLastLastLastLastFirstLastSum\
    \ = 0;\n        long firstLastLastLastLastLastLastFirstLastSum = 0;\n        long\
    \ firstLastLastLastLastLastLastFirstLastSum = 0;\n        long firstLastLastLastLastLastLastFirstLastSum\
    \ = 0;\n        long firstLastLastLastLastLastLastFirstLastSum = 0;\n        long\
    \ firstLastLastLastLastLastLastFirstLastSum = 0;\n        long firstLastLastLastLastLastLastFirstLastSum\
    \ = 0;\n        long firstLastLastLastLastLastLastFirstLastSum = 0;\n        long\
    \ firstLastLastLastLastLastLastFirstLastSum = 0;\n        long firstLastLastLastLastLastLastFirstLastSum\
    \ = 0;\n        long firstLastLastLastLastLastLastFirstLastSum = 0;\n        long\
    \ firstLastLastLastLastLastLastFirstLastSum = 0;\n        long firstLastLastLastLastLastLastFirstLastSum\
    \ = 0;\n        long firstLastLastLastLastLastLastFirstLastSum = 0;\n        long\
    \ firstLastLastLastLastLastLastFirstLastSum = 0;\n        long firstLastLastLastLastLastLastFirstLastSum\
    \ = 0;\n        long firstLastLastLastLastLastLastFirstLastSum = 0;\n        long\
    \ firstLastLastLastLastLastLastFirstLast\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuxujfnw1.cs(67,52): error CS1002: ; expected

    '
  timestamp: 1659824389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in array) {\n          \
    \  sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n\
    \            sum = sum / 2;\n            while (temp != sum) {\n             \
    \   result.Add(array[array.IndexOf(temp)]);\n                temp = temp - array[array.IndexOf(temp)];\n\
    \            }\n        } else {\n            temp = sum;\n            sum = sum\
    \ / 2;\n            while (temp != sum) {\n                result.Add(array[array.IndexOf(temp)]);\n\
    \                temp = temp + array[array.IndexOf(temp)];\n            }\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5c8f5c7ba1754adda7f84adb66fe75b3>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.SortArray (System.Collections.Generic.List`1[T] array) [0x000a3] in\
    \ <5c8f5c7ba1754adda7f84adb66fe75b3>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x0002b] in <5c8f5c7ba1754adda7f84adb66fe75b3>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must\
    \ be non-negative and less than the size of the collection.\nParameter name: index\n\
    \  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray (System.Collections.Generic.List`1[T]\
    \ array) [0x000a3] in <5c8f5c7ba1754adda7f84adb66fe75b3>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002b] in <5c8f5c7ba1754adda7f84adb66fe75b3>:0 \n"
  stdout: ''
  timestamp: 1659824392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum1 = 0;\n        long sum2 =\
    \ 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n\
    \        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n    \
    \    long sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n      \
    \  long sum12 = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n       \
    \ long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n        long\
    \ sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long sum21\
    \ = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24 =\
    \ 0;\n        long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n\
    \        long sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n \
    \       long sum31 = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n  \
    \      long sum34 = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n   \
    \     long sum37 = 0;\n        long sum38 = 0;\n        long sum39 = 0;\n    \
    \    long sum40 = 0;\n        long sum41 = 0;\n        long sum42 = 0;\n     \
    \   long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n      \
    \  long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n       \
    \ long sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long\
    \ sum52 = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55\
    \ = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n        long sum58 =\
    \ 0;\n        long sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n\
    \        long sum62 = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n \
    \       long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n  \
    \      long sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n   \
    \     long sum71 = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n    \
    \    long sum74 = 0;\n        long sum75 = 0;\n        long sum76 = 0;\n     \
    \   long sum77 = 0;\n        long sum78 = 0;\n        long sum79 = 0;\n      \
    \  long sum80 = 0;\n        long sum81 = 0;\n        long sum82 = 0;\n       \
    \ long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n        long\
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpynmwdonl.cs(110,13): error CS1001: Identifier expected

    /tmp/tmpynmwdonl.cs(110,13): error CS1002: ; expected

    '
  timestamp: 1659824389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long first = 0;\n        long last\
    \ = 0;\n        long sumFirst = 0;\n        long sumLast = 0;\n        long sumFirstLast\
    \ = 0;\n        long sumLastFirst = 0;\n        long sumFirstLastFirst = 0;\n\
    \        long sumLastFirstLast = 0;\n        long sumFirstLastFirstLast = 0;\n\
    \        long sumLastFirstLastFirst = 0;\n        long sumFirstLastFirstLastLast\
    \ = 0;\n        long sumLastFirstLastFirstLast = 0;\n        long sumFirstLastFirstLastFirstLast\
    \ = 0;\n        long sumLastFirstLastFirstLastFirst = 0;\n        long sumFirstLastFirstLastFirstLastLast\
    \ = 0;\n        long sumLastFirstLastFirstLastFirstLast = 0;\n        long sumFirstLastFirstLastFirstLastLastLast\
    \ = 0;\n        long sumLastFirstLastFirstLastFirstLastLast = 0;\n        long\
    \ sumFirstLastFirstLastFirstLastLastLastLast = 0;\n        long sumLastFirstLastFirstLastFirstLastLast\
    \ = 0;\n        long sumFirstLastFirstLastFirstLastLastLastLast = 0;\n       \
    \ long sumLastFirstLastFirstLastFirstLastLastLast = 0;\n        long sumFirstLastFirstLastFirstLastLastLastLast\
    \ = 0;\n        long sumLastFirstLastFirstLastFirstLastLastLast = 0;\n       \
    \ long sumFirstLastFirstLastFirstLastLastLastLast = 0;\n        long sumLastFirstLastFirstLastFirstLastLastLastLast\
    \ = 0;\n        long sumFirstLastFirstLastFirstLastLastLastLastLast = 0;\n   \
    \     long sumLastFirstLastFirstLastFirstLastLastLastLast = 0;\n        long sumFirstLastFirstLastFirstLastLastLastLastLast\
    \ = 0;\n        long sumLastFirstLastFirstLastFirstLastLastLastLast = 0;\n   \
    \     long sumFirstLastFirstLastFirstLastLastLastLastLast = 0;\n        long sumLastFirstLastFirstLastFirstLastLastLastLast\
    \ = 0;\n        long sumFirstLastFirstLastFirstLastLastLastLastLast = 0;\n   \
    \     long sumLastFirstLastFirstLastFirstLastLastLastLast = 0;\n        long sumFirstLastFirstLastFirstLastLastLastLastLast\
    \ = 0;\n        long sumLastFirstLastFirstLastFirstLastLastLastLastLast = 0;\n\
    \        long sumFirstLastFirstLastFirstLastLastLastLastLastLast = 0;\n      \
    \  long sumLastFirstLastFirstLastFirstLastLastLastLastLast = 0;\n        long\
    \ sumFirstLastFirstLastFirstLastLastLastLastLastLast = 0;\n        long sumLastFirstLastFirstLastFirstLastLastLastLastLast\
    \ = 0;\n        long sumFirstLastFirstLastFirstLastLastLastLastLastLast = 0;\n\
    \        long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5b1yup1t.cs(66,13): error CS1001: Identifier expected

    /tmp/tmp5b1yup1t.cs(66,13): error CS1002: ; expected

    '
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long minSum = array.Min();\n        long maxSum = array.Max();\n\
    \        long middleSum = (minSum + maxSum) / 2;\n        long middle = middleSum;\n\
    \        long middleIndex = 0;\n        long middleIndexSum = 0;\n        long\
    \ middleIndexSum2 = 0;\n        long middleIndexSum3 = 0;\n        long middleIndexSum4\
    \ = 0;\n        long middleIndexSum5 = 0;\n        long middleIndexSum6 = 0;\n\
    \        long middleIndexSum7 = 0;\n        long middleIndexSum8 = 0;\n      \
    \  long middleIndexSum9 = 0;\n        long middleIndexSum10 = 0;\n        long\
    \ middleIndexSum11 = 0;\n        long middleIndexSum12 = 0;\n        long middleIndexSum13\
    \ = 0;\n        long middleIndexSum14 = 0;\n        long middleIndexSum15 = 0;\n\
    \        long middleIndexSum16 = 0;\n        long middleIndexSum17 = 0;\n    \
    \    long middleIndexSum18 = 0;\n        long middleIndexSum19 = 0;\n        long\
    \ middleIndexSum20 = 0;\n        long middleIndexSum21 = 0;\n        long middleIndexSum22\
    \ = 0;\n        long middleIndexSum23 = 0;\n        long middleIndexSum24 = 0;\n\
    \        long middleIndexSum25 = 0;\n        long middleIndexSum26 = 0;\n    \
    \    long middleIndexSum27 = 0;\n        long middleIndexSum28 = 0;\n        long\
    \ middleIndexSum29 = 0;\n        long middleIndexSum30 = 0;\n        long middleIndexSum31\
    \ = 0;\n        long middleIndexSum32 = 0;\n        long middleIndexSum33 = 0;\n\
    \        long middleIndexSum34 = 0;\n        long middleIndexSum35 = 0;\n    \
    \    long middleIndexSum36 = 0;\n        long middleIndexSum37 = 0;\n        long\
    \ middleIndexSum38 = 0;\n        long middleIndexSum39 = 0;\n        long middleIndexSum40\
    \ = 0;\n        long middleIndexSum41 = 0;\n        long middleIndexSum42 = 0;\n\
    \        long middleIndexSum43 = 0;\n        long middleIndexSum44 = 0;\n    \
    \    long middleIndexSum45 = 0;\n        long middleIndexSum46 = 0;\n        long\
    \ middleIndexSum47 = 0;\n        long middleIndexSum48 = 0;\n        long middleIndexSum49\
    \ = 0;\n        long middleIndexSum50 = 0;\n        long middleIndexSum51 = 0;\n\
    \        long middleIndexSum52 = 0;\n        long middleIndexSum53 = 0;\n    \
    \    long middleIndexSum54 = 0;\n        long middleIndexSum55 = 0;\n        long\
    \ middleIndexSum56 = 0;\n        long middleIndexSum57 = 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp86ic93i4.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmp86ic93i4.cs(25,14): warning CS0219: The variable ''lastSum'' is assigned
    but its value is never used

    /tmp/tmp86ic93i4.cs(26,14): warning CS0219: The variable ''firstSum'' is assigned
    but its value is never used

    /tmp/tmp86ic93i4.cs(31,14): warning CS0219: The variable ''middleIndex'' is assigned
    but its value is never used

    /tmp/tmp86ic93i4.cs(32,14): warning CS0219: The variable ''middleIndexSum'' is
    assigned but its value is never used

    /tmp/tmp86ic93i4.cs(33,14): warning CS0219: The variable ''middleIndexSum2'' is
    assigned but its value is never used

    /tmp/tmp86ic93i4.cs(34,14): warning CS0219: The variable ''middleIndexSum3'' is
    assigned but its value is never used

    /tmp/tmp86ic93i4.cs(35,14): warning CS0219: The variable ''middleIndexSum4'' is
    assigned but its value is never used

    /tmp/tmp86ic93i4.cs(36,14): warning CS0219: The variable ''middleIndexSum5'' is
    assigned but its value is never used

    /tmp/tmp86ic93i4.cs(37,14): warning CS0219: The variable ''middleIndexSum6'' is
    assigned but its value is never used

    /tmp/tmp86ic93i4.cs(38,14): warning CS0219: The variable ''middleIndexSum7'' is
    assigned but its value is never used

    /tmp/tmp86ic93i4.cs(39,14): warning CS0219: The variable ''middleIndexSum8'' is
    assigned but its value is never used

    /tmp/tmp86ic93i4.cs(40,14): warning CS0219: The variable ''middleIndexSum9'' is
    assigned but its value is never used

    /tmp/tmp86ic93i4.cs(41,14): warning CS0219: The variable ''middleIndexSum10''
    is assigned but its value is never used

    /tmp/tmp86ic93i4.cs(42,14): warning CS0219: The variable ''middleIndexSum11''
    is assigned but its value is never used

    /tmp/tmp86ic93i4.cs(43,14): warning CS0219: The variable ''middleIndexSum12''
    is assigned but its value is never used

    /tmp/tmp86ic93i4.cs(44,14): warning CS0219: The variable ''middleIndexSum13''
    is assigned but its value is never'
  timestamp: 1659824392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long last = 0;\n        long first\
    \ = 0;\n        long sumOfFirst = 0;\n        long sumOfLast = 0;\n        long\
    \ sumOfFirstLast = 0;\n        long sumOfFirstLastSum = 0;\n        long sumOfFirstLastSumOfFirst\
    \ = 0;\n        long sumOfFirstLastSumOfLast = 0;\n        long sumOfFirstLastSumOfFirstLast\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSum = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirst\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfLast = 0;\n        long\
    \ sumOfFirstLastSumOfFirstLastSumOfFirstLast = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSum\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirst = 0;\n\
    \        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfLast = 0;\n     \
    \   long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLast = 0;\n     \
    \   long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSum = 0;\n  \
    \      long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirst\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfLast\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLast\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSum\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirst\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfLast\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLast\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSum\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirst\
    \ = 0;\n        long sumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLastSumOfFirstLast\
    \ = 0;\n        long sumOfFirstLastSumOf\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyy8srceq.cs(53,33): error CS1002: ; expected

    '
  timestamp: 1659824392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sumOfFirstIndexValue = 0;\n  \
    \      long sumOfLastIndexValue = 0;\n        long firstIndexValue = 0;\n    \
    \    long lastIndexValue = 0;\n        long firstIndexValueOfLastIndexValue =\
    \ 0;\n        long lastIndexValueOfFirstIndexValue = 0;\n        long firstIndexValueOfFirstIndexValue\
    \ = 0;\n        long lastIndexValueOfLastIndexValue = 0;\n        long firstIndexValueOfFirstIndexValueOfLastIndexValue\
    \ = 0;\n        long lastIndexValueOfLastIndexValueOfFirstIndexValue = 0;\n  \
    \      long firstIndexValueOfFirstIndexValueOfFirstIndexValueOfLastIndexValue\
    \ = 0;\n        long lastIndexValueOfLastIndexValueOfLastIndexValueOfFirstIndexValue\
    \ = 0;\n        long firstIndexValueOfFirstIndexValueOfFirstIndexValueOfLastIndexValueOfFirstIndexValue\
    \ = 0;\n        long lastIndexValueOfLastIndexValueOfLastIndexValueOfFirstIndexValueOfFirstIndexValue\
    \ = 0;\n        long firstIndexValueOfFirstIndexValueOfFirstIndexValueOfLastIndexValueOfFirstIndexValueOfLastIndexValue\
    \ = 0;\n        long lastIndexValueOfLastIndexValueOfLastIndexValueOfFirstIndexValueOfFirstIndexValueOfLastIndexValueOfFirstIndexValue\
    \ = 0;\n        long firstIndexValueOfFirstIndexValueOfFirstIndexValueOfLastIndexValueOfFirstIndexValueOfLastIndexValueOfLastIndexValueOfFirstIndexValue\
    \ = 0;\n        long lastIndexValueOfLastIndexValueOfLastIndexValueOfFirstIndexValueOfFirstIndexValueOfLastIndexValueOfLastIndexValueOfFirstIndexValueOfFirstIndexValue\
    \ = 0;\n        long firstIndexValueOfFirstIndexValueOfFirstIndexValueOfLastIndexValueOfFirstIndexValueOfLastIndexValueOfLastIndexValueOfLastIndexValueOfFirstIndexValueOfFirstIndexValueOfLastIndexValueOfFirstIndexValue\
    \ = 0;\n        long lastIndexValueOfLastIndexValueOfLastIndexValueOfFirstIndexValueOfFirstIndexValueOfLastIndexValueOfLastIndexValueOfLastIndexValueOfFirstIndexValueOfLastIndexValueOfFirstIndexValueOfLastIndexValueOfFirstIndexValueOfLastIndexValue\
    \ = 0;\n        long firstIndexValueOfFirstIndexValueOfFirstIndexValueOfLastIndexValueOfFirstIndexValueOfLastIndexValueOfLastIndexValueOfLastIndexValueOfFirstIndexValueOfLastIndexValueOfLastIndexValueOfFirstIndexValueOfLastIndexValueOfLastIndexValueOfFirstIndexValueOfLastIndexValue\
    \ = 0;\n        long lastIndexValueOfLastIndexValueOfLastIndexValueOfFirstIndexValueOf\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp16s_rceu.cs(46,79): error CS1002: ; expected

    '
  timestamp: 1659824392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long maxSum = 0;\n        long minSum\
    \ = array.First();\n        foreach (var item in array) {\n            sum +=\
    \ item;\n            if (sum > maxSum) {\n                maxSum = sum;\n    \
    \        }\n            if (sum < minSum) {\n                minSum = sum;\n \
    \           }\n        }\n        if (sum % 2 == 0) {\n            array.Sort((a,\
    \ b) => b - a);\n        } else {\n            array.Sort((a, b) => a - b);\n\
    \        }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppyqjbd9x.cs(37,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmppyqjbd9x.cs(37,34): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmppyqjbd9x.cs(39,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmppyqjbd9x.cs(39,34): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659824392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in array) {\n          \
    \  sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum /\
    \ 2;\n            for (int i = 0; i < array.Count; i++) {\n                if\
    \ (array[i] > temp) {\n                    result.Add(array[i]);\n           \
    \     }\n            }\n        } else {\n            temp = sum / 2;\n      \
    \      for (int i = 0; i < array.Count; i++) {\n                if (array[i] <\
    \ temp) {\n                    result.Add(array[i]);\n                }\n    \
    \        }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da1aa8ee06c846678c9f12401ec85da9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da1aa8ee06c846678c9f12401ec85da9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        long sum = 0;\n        long first = 0;\n        long last = array.Count\
    \ - 1;\n        while (first < last) {\n            sum = array[first] + array[last];\n\
    \            if (sum % 2 == 0) {\n                array[first] = array[first]\
    \ - array[last];\n                array[last] = array[last] + array[first];\n\
    \            } else {\n                array[first] = array[first] + array[last];\n\
    \                array[last] = array[last] - array[first];\n            }\n  \
    \          first++;\n            last--;\n        }\n        return array;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgo7sxidw.cs(31,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpgo7sxidw.cs(31,40): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpgo7sxidw.cs(33,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpgo7sxidw.cs(33,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpgo7sxidw.cs(33,53): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpgo7sxidw.cs(34,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpgo7sxidw.cs(34,37): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpgo7sxidw.cs(34,51): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpgo7sxidw.cs(36,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpgo7sxidw.cs(36,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpgo7sxidw.cs(36,53): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpgo7sxidw.cs(37,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpgo7sxidw.cs(37,37): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpgo7sxidw.cs(37,51): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long maxSum = array.Sum();\n      \
    \  long minSum = array.Min();\n        long maxIndex = array.Count - 1;\n    \
    \    long minIndex = 0;\n        long maxSumOfMinSum = minSum;\n        long minSumOfMaxSum\
    \ = maxSum;\n        long maxSumOfMaxSum = maxSum;\n        long minSumOfMinSum\
    \ = minSum;\n        long maxSumOfMaxSumOfMinSum = maxSum;\n        long minSumOfMaxSumOfMaxSum\
    \ = maxSum;\n        long maxSumOfMaxSumOfMaxSumOfMinSum = maxSum;\n        long\
    \ minSumOfMaxSumOfMaxSumOfMaxSum = maxSum;\n        long maxSumOfMinSumOfMaxSumOfMaxSumOfMinSum\
    \ = maxSum;\n        long minSumOfMaxSumOfMinSumOfMaxSumOfMaxSum = maxSum;\n \
    \       long maxSumOfMaxSumOfMaxSumOfMaxSumOfMinSum = maxSum;\n        long minSumOfMaxSumOfMinSumOfMaxSumOfMaxSumOfMinSum\
    \ = maxSum;\n        long maxSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMinSum = maxSum;\n\
    \        long minSumOfMaxSumOfMinSumOfMaxSumOfMaxSumOfMaxSumOfMinSum = maxSum;\n\
    \        long maxSumOfMinSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMinSum = maxSum;\n\
    \        long minSumOfMaxSumOfMinSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMinSum =\
    \ maxSum;\n        long maxSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMinSum\
    \ = maxSum;\n        long minSumOfMaxSumOfMinSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMinSum\
    \ = maxSum;\n        long maxSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMinSum\
    \ = maxSum;\n        long minSumOfMaxSumOfMinSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMinSum\
    \ = maxSum;\n        long maxSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMaxSumOfMin\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfkd7bl_5.cs(49,97): error CS1002: ; expected

    '
  timestamp: 1659824392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long tempSum = 0;\n        long tempLastSum = 0;\n        long\
    \ tempFirstSum = 0;\n        long tempSum2 = 0;\n        long tempLastSum2 = 0;\n\
    \        long tempFirstSum2 = 0;\n        long tempSum3 = 0;\n        long tempLastSum3\
    \ = 0;\n        long tempFirstSum3 = 0;\n        long tempSum4 = 0;\n        long\
    \ tempLastSum4 = 0;\n        long tempFirstSum4 = 0;\n        long tempSum5 =\
    \ 0;\n        long tempLastSum5 = 0;\n        long tempFirstSum5 = 0;\n      \
    \  long tempSum6 = 0;\n        long tempLastSum6 = 0;\n        long tempFirstSum6\
    \ = 0;\n        long tempSum7 = 0;\n        long tempLastSum7 = 0;\n        long\
    \ tempFirstSum7 = 0;\n        long tempSum8 = 0;\n        long tempLastSum8 =\
    \ 0;\n        long tempFirstSum8 = 0;\n        long tempSum9 = 0;\n        long\
    \ tempLastSum9 = 0;\n        long tempFirstSum9 = 0;\n        long tempSum10 =\
    \ 0;\n        long tempLastSum10 = 0;\n        long tempFirstSum10 = 0;\n    \
    \    long tempSum11 = 0;\n        long tempLastSum11 = 0;\n        long tempFirstSum11\
    \ = 0;\n        long tempSum12 = 0;\n        long tempLastSum12 = 0;\n       \
    \ long tempFirstSum12 = 0;\n        long tempSum13 = 0;\n        long tempLastSum13\
    \ = 0;\n        long tempFirstSum13 = 0;\n        long tempSum14 = 0;\n      \
    \  long tempLastSum14 = 0;\n        long tempFirstSum14 = 0;\n        long tempSum15\
    \ = 0;\n        long tempLastSum15 = 0;\n        long tempFirstSum15 = 0;\n  \
    \      long tempSum16 = 0;\n        long tempLastSum16 = 0;\n        long tempFirstSum16\
    \ = 0;\n        long tempSum17 = 0;\n        long tempLastSum17 = 0;\n       \
    \ long tempFirstSum17 = 0;\n        long tempSum18 = 0;\n        long tempLastSum18\
    \ = 0;\n        long tempFirstSum18 = 0;\n        long tempSum19 = 0;\n      \
    \  long tempLastSum19 = 0;\n        long tempFirstSum19 = 0;\n        long tempSum20\
    \ = 0;\n        long tempLastSum20 = 0;\n        long tempFirstSum20 = 0;\n  \
    \      long tempSum21 = 0;\n        long tempLastSum21 = 0;\n        long tempFirstSum21\
    \ = 0;\n        long tempSum22 = 0;\n        long tempLastSum22 = 0;\n       \
    \ long tempFirstSum22 = 0;\n        long tempSum\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp10s22ggm.cs(93,21): error CS1002: ; expected

    '
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long first = 0;\n        long last\
    \ = 0;\n        foreach (long i in array) {\n            sum += i;\n         \
    \   if (sum % 2 == 0) {\n                first = i;\n            } else {\n  \
    \              last = i;\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        long mid = first + (last - first) / 2;\n      \
    \  while (first <= last) {\n            if (array[first] < array[mid]) {\n   \
    \             result.Add(array[first++]);\n            } else {\n            \
    \    result.Add(array[mid--]);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnt_9zhkc.cs(38,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpnt_9zhkc.cs(38,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpnt_9zhkc.cs(39,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpnt_9zhkc.cs(41,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long first = 0;\n        long last\
    \ = 0;\n        foreach (var item in array) {\n            sum += item;\n    \
    \        if (sum % 2 == 0) {\n                first = item;\n            } else\
    \ {\n                last = item;\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        if (sum % 2 == 0) {\n            result.AddRange(array.OrderBy(item\
    \ => item).ToList());\n            result.AddRange(array.OrderByDescending(item\
    \ => item).ToList());\n        } else {\n            result.AddRange(array.OrderByDescending(item\
    \ => item).ToList());\n            result.AddRange(array.OrderBy(item => item).ToList());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0fe5e15458c4209a6825336edec5a4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0fe5e15458c4209a6825336edec5a4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        long firstIndex\
    \ = 0;\n        long lastIndex = 0;\n        foreach (long i in array) {\n   \
    \         sum += i;\n            if (sum % 2 == 0) {\n                temp = firstIndex;\n\
    \                firstIndex = i;\n                lastIndex = temp;\n        \
    \    } else {\n                temp = lastIndex;\n                lastIndex =\
    \ i;\n                firstIndex = temp;\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        if (sum % 2 == 0) {\n            result.AddRange(array.GetRange(firstIndex,\
    \ array.Count - firstIndex));\n            result.AddRange(array.GetRange(lastIndex,\
    \ array.Count - lastIndex));\n        } else {\n            result.AddRange(array.GetRange(firstIndex,\
    \ array.Count - firstIndex));\n            result.AddRange(array.GetRange(lastIndex,\
    \ array.Count - lastIndex).Reverse());\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxjfptl55.cs(42,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxjfptl55.cs(42,56): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpxjfptl55.cs(43,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxjfptl55.cs(43,55): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpxjfptl55.cs(45,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxjfptl55.cs(45,56): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpxjfptl55.cs(46,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxjfptl55.cs(46,55): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in array) {\n          \
    \  sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n\
    \            sum = sum / 2;\n            while (temp != 0) {\n               \
    \ result.Add(sum);\n                temp--;\n                sum++;\n        \
    \    }\n        } else {\n            temp = sum;\n            sum = sum / 2;\n\
    \            while (temp != 0) {\n                result.Add(-sum);\n        \
    \        temp--;\n                sum--;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13ccd665910b461081674b4ac0463a5c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13ccd665910b461081674b4ac0463a5c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in array) {\n            sum +=\
    \ i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n      \
    \      sum = sum / 2;\n            while (temp != 0) {\n                result.Add(temp\
    \ % 2);\n                temp = temp / 2;\n            }\n        } else {\n \
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=\
    \ 0) {\n                result.Add(temp % 2);\n                temp = temp / 2;\n\
    \            }\n            temp = sum;\n            sum = sum / 2;\n        \
    \    while (temp != 0) {\n                result.Add(temp % 2);\n            \
    \    temp = temp / 2;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <262258c4ab4142db8fb4263ac1013f97>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <262258c4ab4142db8fb4263ac1013f97>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long maxSum = 0;\n        long minSum\
    \ = array.First();\n        foreach (long i in array) {\n            sum += i;\n\
    \            maxSum = Math.Max(maxSum, sum);\n            minSum = Math.Min(minSum,\
    \ sum);\n        }\n        if (sum % 2 == 1) {\n            return array.OrderByDescending(i\
    \ => i).ToList();\n        } else {\n            return array.OrderBy(i => i).ToList();\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00007] in <411eacb280c44303990f144ff4e33c43>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <411eacb280c44303990f144ff4e33c43>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00007] in <411eacb280c44303990f144ff4e33c43>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <411eacb280c44303990f144ff4e33c43>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long first = 0;\n        long last\
    \ = 0;\n        long temp = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long i in array) {\n            sum += i;\n            if (sum\
    \ % 2 == 0) {\n                temp = first;\n                first = i;\n   \
    \             last = temp;\n            } else {\n                temp = last;\n\
    \                last = i;\n                first = temp;\n            }\n   \
    \         result.Add(first);\n            result.Add(last);\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <80c485fe009b444f8f441bbe01f91b0c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <80c485fe009b444f8f441bbe01f91b0c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long firstIndex = array.First();\n        long lastIndex = array.Last();\n\
    \        foreach (long i in array) {\n            sum += i;\n            if (sum\
    \ > lastSum) {\n                lastSum = sum;\n                firstSum = sum\
    \ - firstIndex;\n            }\n            if (sum < firstSum) {\n          \
    \      firstSum = sum;\n                lastSum = sum - lastIndex;\n         \
    \   }\n        }\n        List<long> result = new List<long>();\n        if (sum\
    \ % 2 == 0) {\n            foreach (long i in array) {\n                if (sum\
    \ - i < firstSum) {\n                    result.Add(i);\n                }\n \
    \               if (sum - i > lastSum) {\n                    result.Add(i);\n\
    \                }\n            }\n        } else {\n            foreach (long\
    \ i in array) {\n                if (sum - i > firstSum) {\n                 \
    \   result.Add(i);\n                }\n                if (sum - i < lastSum)\
    \ {\n                    result.Add(i);\n                }\n            }\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x0000a] in <7677f6009bfb477b99d236a44d12d3a1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <7677f6009bfb477b99d236a44d12d3a1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x0000a] in <7677f6009bfb477b99d236a44d12d3a1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <7677f6009bfb477b99d236a44d12d3a1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum1 = 0;\n        long sum2 =\
    \ 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n\
    \        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n    \
    \    long sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n      \
    \  long sum12 = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n       \
    \ long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n        long\
    \ sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long sum21\
    \ = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24 =\
    \ 0;\n        long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n\
    \        long sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n \
    \       long sum31 = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n  \
    \      long sum34 = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n   \
    \     long sum37 = 0;\n        long sum38 = 0;\n        long sum39 = 0;\n    \
    \    long sum40 = 0;\n        long sum41 = 0;\n        long sum42 = 0;\n     \
    \   long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n      \
    \  long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n       \
    \ long sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long\
    \ sum52 = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55\
    \ = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n        long sum58 =\
    \ 0;\n        long sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n\
    \        long sum62 = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n \
    \       long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n  \
    \      long sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n   \
    \     long sum71 = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n    \
    \    long sum74 = 0;\n        long sum75 = 0;\n        long sum76 = 0;\n     \
    \   long sum77 = 0;\n        long sum78 = 0;\n        long sum79 = 0;\n      \
    \  long sum80 = 0;\n        long sum81 = 0;\n        long sum82 = 0;\n       \
    \ long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n        long\
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpynmwdonl.cs(110,13): error CS1001: Identifier expected

    /tmp/tmpynmwdonl.cs(110,13): error CS1002: ; expected

    '
  timestamp: 1659824389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in array) {\n          \
    \  sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n\
    \            sum = sum / 2;\n            while (temp != sum) {\n             \
    \   result.Add(array[temp]);\n                temp++;\n            }\n       \
    \ } else {\n            temp = sum;\n            sum = sum / 2;\n            while\
    \ (temp != sum) {\n                result.Add(array[temp]);\n                temp--;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_1qmnbwl.cs(34,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_1qmnbwl.cs(41,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long last = 0;\n        foreach (long\
    \ i in array) {\n            sum += i;\n            last = i;\n        }\n   \
    \     if (sum % 2 == 0) {\n            array.Reverse();\n        }\n        long\
    \ sum1 = 0;\n        long last1 = 0;\n        foreach (long i in array) {\n  \
    \          sum1 += i;\n            last1 = i;\n        }\n        if (sum1 % 2\
    \ == 0) {\n            array.Reverse();\n        }\n        long sum2 = 0;\n \
    \       long last2 = 0;\n        foreach (long i in array) {\n            sum2\
    \ += i;\n            last2 = i;\n        }\n        if (sum2 % 2 == 0) {\n   \
    \         array.Reverse();\n        }\n        long sum3 = 0;\n        long last3\
    \ = 0;\n        foreach (long i in array) {\n            sum3 += i;\n        \
    \    last3 = i;\n        }\n        if (sum3 % 2 == 0) {\n            array.Reverse();\n\
    \        }\n        long sum4 = 0;\n        long last4 = 0;\n        foreach (long\
    \ i in array) {\n            sum4 += i;\n            last4 = i;\n        }\n \
    \       if (sum4 % 2 == 0) {\n            array.Reverse();\n        }\n      \
    \  long sum5 = 0;\n        long last5 = 0;\n        foreach (long i in array)\
    \ {\n            sum5 += i;\n            last5 = i;\n        }\n        if (sum5\
    \ % 2 == 0) {\n            array.Reverse();\n        }\n        long sum6 = 0;\n\
    \        long last6 = 0;\n        foreach (long i in array) {\n            sum6\
    \ += i;\n            last6 = i;\n        }\n        if (sum6 % 2 == 0) {\n   \
    \         array.Reverse();\n        }\n        long sum7 = 0;\n        long last7\
    \ = 0;\n        foreach (long i in array) {\n            sum7 += i;\n        \
    \    last7 = i;\n        }\n        if (sum7 % 2 == 0) {\n            array.Reverse();\n\
    \        }\n        long sum8 = 0;\n        long last8 = 0;\n        foreach (long\
    \ i in array) {\n            sum8 += i;\n            last8 = i;\n        }\n \
    \       if (sum8 % 2 == 0) {\n            array.Reverse();\n        }\n      \
    \  long sum9 = 0;\n        long last9 = 0;\n        foreach (long i in array)\
    \ {\n            sum9 += i;\n            last9 = i;\n        }\n        if (sum9\
    \ % 2 == 0) {\n            array.Reverse();\n        }\n        long sum10 = 0;\n\
    \        long last10 = 0;\n        foreach (long i in array) {\n            sum10\
    \ += i;\n            last10 = i;\n        }\n        if (sum10 % 2 == 0) {\n \
    \           array.Reverse();\n        }\n        long sum11 = 0;\n        long\
    \ last11 = 0;\n        foreach (long i in array) {\n            sum11 += i;\n\
    \            last11 = i;\n        }\n        if (sum11 % 2 == 0) {\n         \
    \   array.Reverse();\n        }\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpojajp1xm.cs(23,30): error CS0161: ''Problem.SortArray(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659824392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in array) {\n            sum +=\
    \ i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n      \
    \      sum = sum / 2;\n            while (temp != 0) {\n                result.Add(temp\
    \ % 2);\n                temp = temp / 2;\n            }\n        } else {\n \
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=\
    \ 0) {\n                result.Add(temp % 2);\n                temp = temp / 2;\n\
    \            }\n            temp = sum;\n            sum = sum / 2;\n        \
    \    while (temp != 0) {\n                result.Add(temp % 2);\n            \
    \    temp = temp / 2;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <262258c4ab4142db8fb4263ac1013f97>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <262258c4ab4142db8fb4263ac1013f97>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        foreach (var item in array) {\n   \
    \         sum += item;\n        }\n        if (sum % 2 == 0) {\n            array.Sort();\n\
    \        } else {\n            array.Reverse();\n        }\n        return array;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14484b2cdb1c42e68298560ca20d801e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14484b2cdb1c42e68298560ca20d801e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sumOfFirstIndexValue = 0;\n  \
    \      long sumOfLastIndexValue = 0;\n        bool isEvenSum = false;\n      \
    \  bool isOddSum = false;\n        long firstIndexValue = 0;\n        long lastIndexValue\
    \ = 0;\n        long currentSum = 0;\n        long currentSumOfFirstIndexValue\
    \ = 0;\n        long currentSumOfLastIndexValue = 0;\n        long currentFirstIndexValue\
    \ = 0;\n        long currentLastIndexValue = 0;\n        long currentCurrentSum\
    \ = 0;\n        long currentCurrentSumOfFirstIndexValue = 0;\n        long currentCurrentSumOfLastIndexValue\
    \ = 0;\n        long currentCurrentFirstIndexValue = 0;\n        long currentCurrentLastIndexValue\
    \ = 0;\n        long currentCurrentCurrentSum = 0;\n        long currentCurrentCurrentSumOfFirstIndexValue\
    \ = 0;\n        long currentCurrentCurrentSumOfLastIndexValue = 0;\n        long\
    \ currentCurrentCurrentFirstIndexValue = 0;\n        long currentCurrentCurrentLastIndexValue\
    \ = 0;\n        long currentCurrentCurrentCurrentSum = 0;\n        long currentCurrentCurrentCurrentSumOfFirstIndexValue\
    \ = 0;\n        long currentCurrentCurrentCurrentSumOfLastIndexValue = 0;\n  \
    \      long currentCurrentCurrentCurrentFirstIndexValue = 0;\n        long currentCurrentCurrentCurrentLastIndexValue\
    \ = 0;\n        long currentCurrentCurrentCurrentCurrentSum = 0;\n        long\
    \ currentCurrentCurrentCurrentCurrentSumOfFirstIndexValue = 0;\n        long currentCurrentCurrentCurrentSumOfLastIndexValue\
    \ = 0;\n        long currentCurrentCurrentCurrentFirstIndexValue = 0;\n      \
    \  long currentCurrentCurrentCurrentLastIndexValue = 0;\n        long currentCurrentCurrentCurrentCurrentSum\
    \ = 0;\n        long currentCurrentCurrentCurrentCurrentSumOfFirstIndexValue =\
    \ 0;\n        long currentCurrentCurrentCurrentSumOfLastIndexValue = 0;\n    \
    \    long currentCurrentCurrentCurrentFirstIndexValue = 0;\n        long currentCurrentCurrentCurrentLastIndexValue\
    \ = 0;\n        long currentCurrentCurrentCurrentCurrentSum = 0;\n        long\
    \ currentCurrentCurrentCurrentCurrentSumOfFirstIndexValue = 0;\n        long currentCurrentCurrentCurrentSumOfLastIndexValue\
    \ = 0;\n        long currentCurrentCurrentCurrentFirstIndexValue = 0;\n      \
    \  long currentCurrentCurrentCurrentLastIndexValue = 0;\n        long currentCurrentCurrentCurrentCurrentSum\
    \ = 0;\n        long currentCurrentCurrentCurrentCurrentSumOfFirstIndexValue =\
    \ 0;\n        long currentCurrentCurrentCurrentSumOfLastIndexValue = 0;\n    \
    \    long currentCurrentCurrentCurrentFirstIndexValue = 0;\n        long currentCurrentCurrentCurrentLastIndexValue\
    \ = 0;\n        long currentCurrentCurrentCurrentCurrentSum = 0;\n        long\
    \ currentCurrentCurrentCurrentCurrentSumOfFirstIndexValue = 0;\n        long current\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg7nak1bz.cs(73,21): error CS1002: ; expected

    '
  timestamp: 1659824392
