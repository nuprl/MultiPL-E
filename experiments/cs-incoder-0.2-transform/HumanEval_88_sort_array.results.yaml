language: cs
name: HumanEval_88_sort_array
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        foreach (var item in array) {\n   \
    \         sum += item;\n        }\n        if (sum % 2 == 0) {\n            array.Sort();\n\
    \        } else {\n            array.Reverse();\n        }\n        return array;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14484b2cdb1c42e68298560ca20d801e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14484b2cdb1c42e68298560ca20d801e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in array) {\n            sum +=\
    \ i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n      \
    \      sum = sum / 2;\n            while (temp != sum) {\n                result.Add(temp);\n\
    \                temp = temp / 2;\n            }\n        } else {\n         \
    \   temp = sum;\n            sum = sum / 2;\n            while (temp != sum) {\n\
    \                result.Add(temp);\n                temp = temp / 2;\n       \
    \     }\n            temp = sum;\n            sum = sum / 2;\n            while\
    \ (temp != sum) {\n                result.Add(temp);\n                temp = temp\
    \ / 2;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf80fdc0f2fb45d28ef3991e1183e968>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf80fdc0f2fb45d28ef3991e1183e968>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long firstIndex = array.First();\n        long lastIndex = array.Last();\n\
    \        foreach (long i in array) {\n            sum += i;\n            if (sum\
    \ > lastSum) {\n                lastSum = sum;\n                firstSum = sum\
    \ - firstIndex;\n            }\n            if (sum < firstSum) {\n          \
    \      firstSum = sum;\n                lastSum = sum - lastIndex;\n         \
    \   }\n        }\n        if (sum % 2 == 0) {\n            array.Reverse();\n\
    \        }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x0000a] in <b7e9681f52a041ec886aa71f37a05910>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b7e9681f52a041ec886aa71f37a05910>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x0000a] in <b7e9681f52a041ec886aa71f37a05910>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b7e9681f52a041ec886aa71f37a05910>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        List<long> result\
    \ = new List<long>();\n        foreach (var item in array) {\n            sum\
    \ += item;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n\
    \            sum = sum / 2;\n            while (temp != 0) {\n               \
    \ result.Add(temp % 2);\n                temp = temp / 2;\n            }\n   \
    \     } else {\n            temp = sum;\n            sum = sum / 2;\n        \
    \    while (temp != 0) {\n                result.Add(temp % 2);\n            \
    \    temp = temp / 2;\n            }\n            temp = sum;\n            sum\
    \ = sum / 2;\n            while (temp != 0) {\n                result.Add(temp\
    \ % 2);\n                temp = temp / 2;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9571f74f922e41ff81e5fd849b0a0ae8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9571f74f922e41ff81e5fd849b0a0ae8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long maxSum = array.Sum();\n      \
    \  long minSum = array.Sum(x => x);\n        long midSum = maxSum / 2;\n     \
    \   long midMaxSum = maxSum / 2;\n        long midMinSum = minSum / 2;\n     \
    \   long midMidSum = midSum / 2;\n        long midMidMaxSum = midMaxSum / 2;\n\
    \        long midMidMinSum = midMinSum / 2;\n        long midMidMidSum = midMidSum\
    \ / 2;\n        long midMidMidMaxSum = midMidMaxSum / 2;\n        long midMidMidMinSum\
    \ = midMidMinSum / 2;\n        long midMidMidMidSum = midMidMidSum / 2;\n    \
    \    long midMidMidMidMaxSum = midMidMidMaxSum / 2;\n        long midMidMidMinSum\
    \ = midMidMidMinSum / 2;\n        long midMidMidMidSum = midMidMidMidSum / 2;\n\
    \        long midMidMidMidMaxSum = midMidMidMidMaxSum / 2;\n        long midMidMidMinSum\
    \ = midMidMidMinSum / 2;\n        long midMidMidMidSum = midMidMidMidSum / 2;\n\
    \        long midMidMidMidMaxSum = midMidMidMidMaxSum / 2;\n        long midMidMidMinSum\
    \ = midMidMidMinSum / 2;\n        long midMidMidMidSum = midMidMidMidSum / 2;\n\
    \        long midMidMidMidMaxSum = midMidMidMidMaxSum / 2;\n        long midMidMidMinSum\
    \ = midMidMidMinSum / 2;\n        long midMidMidMidSum = midMidMidMidSum / 2;\n\
    \        long midMidMidMidMaxSum = midMidMidMidMaxSum / 2;\n        long midMidMidMinSum\
    \ = midMidMidMinSum / 2;\n        long midMidMidMidSum = midMidMidMidSum / 2;\n\
    \        long midMidMidMidMaxSum = midMidMidMidMaxSum / 2;\n        long midMidMidMinSum\
    \ = midMidMidMinSum / 2;\n        long midMidMidMidSum = midMidMidMidSum / 2;\n\
    \        long midMidMidMidMaxSum = midMidMidMidMaxSum / 2;\n        long midMidMidMinSum\
    \ = midMidMidMinSum / 2;\n        long midMidMidMidSum = midMidMidMidSum / 2;\n\
    \        long midMidMidMidMaxSum = mid\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr4b77hzz.cs(58,38): error CS1002: ; expected

    '
  timestamp: 1659800866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        foreach (var item in array) {\n   \
    \         sum += item;\n        }\n        long odd = sum % 2 == 1 ? sum : sum\
    \ - 1;\n        long even = sum % 2 == 0 ? sum : sum + 1;\n        List<long>\
    \ result = new List<long>();\n        foreach (var item in array) {\n        \
    \    if (item > even && item < odd) {\n                result.Add(item);\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e86c83d1c5404b798898ddeddcb98833>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e86c83d1c5404b798898ddeddcb98833>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        long sum = 0;\n        long maxSum = array.Last();\n        foreach\
    \ (long i in array) {\n            sum += i;\n            if (sum > maxSum) {\n\
    \                maxSum = sum;\n            }\n        }\n        if (sum % 2\
    \ == 0) {\n            array.Sort((x, y) => y - x);\n        } else {\n      \
    \      array.Sort((x, y) => x - y);\n        }\n        return array;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp33iqfmfd.cs(36,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp33iqfmfd.cs(36,34): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmp33iqfmfd.cs(38,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp33iqfmfd.cs(38,34): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659800866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long first = 0;\n        long last\
    \ = 0;\n        bool odd = true;\n        bool even = true;\n        foreach (long\
    \ i in array) {\n            sum += i;\n            if (sum % 2 == 0) {\n    \
    \            even = false;\n            } else {\n                odd = true;\n\
    \            }\n            if (odd == true) {\n                first = i;\n \
    \           }\n            if (even == true) {\n                last = i;\n  \
    \          }\n        }\n        List<long> result = new List<long>();\n     \
    \   if (odd == true) {\n            foreach (long i in array) {\n            \
    \    if (i < first) {\n                    result.Add(i);\n                }\n\
    \                if (i > last) {\n                    result.Add(i);\n       \
    \         }\n            }\n        } else {\n            foreach (long i in array)\
    \ {\n                if (i > last) {\n                    result.Add(i);\n   \
    \             }\n                if (i < first) {\n                    result.Add(i);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c605f69aa824562b274b10f5b131485>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c605f69aa824562b274b10f5b131485>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long last = 0;\n        long first\
    \ = 0;\n        foreach (long i in array) {\n            sum += i;\n         \
    \   last = i;\n            first = i;\n        }\n        if (sum % 2 == 0) {\n\
    \            array.Sort();\n        } else {\n            array.Reverse();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <edcf0837c2d145e199527da129618824>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <edcf0837c2d145e199527da129618824>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long lastSum\
    \ = 0;\n        long firstSum = 0;\n        long last\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ed9kler.cs(109,18): error CS1002: ; expected

    '
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastFirstSum = 0;\n        long firstLastSum = 0;\n     \
    \   long lastLastSum = 0;\n        long firstLastFirstSum = 0;\n        long lastFirstLastSum\
    \ = 0;\n        long firstLastLastSum = 0;\n        long lastFirstLastFirstSum\
    \ = 0;\n        long lastLastFirstSum = 0;\n        long lastLastLastSum = 0;\n\
    \        long lastLastLastFirstSum = 0;\n        long lastLastLastLastSum = 0;\n\
    \        long lastFirstLastLastSum = 0;\n        long lastFirstLastFirstSum =\
    \ 0;\n        long lastFirstSum = 0;\n        long lastSum = 0;\n        long\
    \ firstSum = 0;\n        long lastFirstSum = 0;\n        long lastLastSum = 0;\n\
    \        long firstLastSum = 0;\n        long lastFirstLastSum = 0;\n        long\
    \ lastLastFirstSum = 0;\n        long lastLastLastSum = 0;\n        long lastFirstLastSum\
    \ = 0;\n        long lastFirstLastFirstSum = 0;\n        long lastFirstLastLastSum\
    \ = 0;\n        long lastFirstLastLastFirstSum = 0;\n        long lastFirstLastLastLastSum\
    \ = 0;\n        long lastLastFirstSum = 0;\n        long lastLastSum = 0;\n  \
    \      long firstLastSum = 0;\n        long lastFirstLastSum = 0;\n        long\
    \ lastLastFirstSum = 0;\n        long lastLastLastSum = 0;\n        long firstLastLastSum\
    \ = 0;\n        long lastFirstLastFirstSum = 0;\n        long lastFirstLastLastSum\
    \ = 0;\n        long lastFirstLastLastFirstSum = 0;\n        long lastFirstLastLastLastSum\
    \ = 0;\n        long lastLastFirstSum = 0;\n        long lastLastSum = 0;\n  \
    \      long firstLastSum = 0;\n        long lastFirstLastSum = 0;\n        long\
    \ lastLastFirstSum = 0;\n        long lastLastLastSum = 0;\n        long firstLastLastSum\
    \ = 0;\n        long lastFirstLastFirstSum = 0;\n        long lastFirstLastLastSum\
    \ = 0;\n        long lastFirstLastLastFirstSum = 0;\n        long lastFirstLastLastLastSum\
    \ = 0;\n        long lastLastFirstSum = 0;\n        long lastLastSum = 0;\n  \
    \      long firstLastSum = 0;\n        long lastFirstLastSum = 0;\n        long\
    \ lastLastFirstSum = 0;\n        long lastLastLastSum = 0;\n        long firstLastLastSum\
    \ = 0;\n        long lastFirstLastFirstSum = 0;\n        long lastFirstLastLastSum\
    \ = 0;\n        long lastFirstLastLastFirstSum = 0;\n        \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4kz330a_.cs(42,14): error CS0128: A local variable or function named ''lastFirstLastFirstSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(43,14): error CS0128: A local variable or function named ''lastFirstSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(44,14): error CS0128: A local variable or function named ''lastSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(45,14): error CS0128: A local variable or function named ''firstSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(46,14): error CS0128: A local variable or function named ''lastFirstSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(47,14): error CS0128: A local variable or function named ''lastLastSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(48,14): error CS0128: A local variable or function named ''firstLastSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(49,14): error CS0128: A local variable or function named ''lastFirstLastSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(50,14): error CS0128: A local variable or function named ''lastLastFirstSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(51,14): error CS0128: A local variable or function named ''lastLastLastSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(52,14): error CS0128: A local variable or function named ''lastFirstLastSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(53,14): error CS0128: A local variable or function named ''lastFirstLastFirstSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(54,14): error CS0128: A local variable or function named ''lastFirstLastLastSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(57,14): error CS0128: A local variable or function named ''lastLastFirstSum''
    is already defined in this scope

    /tmp/tmp4kz330a_.cs(58,14): error CS0128: A local variable or function named ''lastLastSum''
    is already defined in this scope

    /tmp/tmp4kz3'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long lastSum2\
    \ = 0;\n        long lastSum3 = 0;\n        long lastSum4 = 0;\n        long lastSum5\
    \ = 0;\n        long lastSum6 = 0;\n        long lastSum7 = 0;\n        long lastSum8\
    \ = 0;\n        long lastSum9 = 0;\n        long lastSum10 = 0;\n        long\
    \ lastSum11 = 0;\n        long lastSum12 = 0;\n        long lastSum13 = 0;\n \
    \       long lastSum14 = 0;\n        long lastSum15 = 0;\n        long lastSum16\
    \ = 0;\n        long lastSum17 = 0;\n        long lastSum18 = 0;\n        long\
    \ lastSum19 = 0;\n        long lastSum20 = 0;\n        long lastSum21 = 0;\n \
    \       long lastSum22 = 0;\n        long lastSum23 = 0;\n        long lastSum24\
    \ = 0;\n        long lastSum25 = 0;\n        long lastSum26 = 0;\n        long\
    \ lastSum27 = 0;\n        long lastSum28 = 0;\n        long lastSum29 = 0;\n \
    \       long lastSum30 = 0;\n        long lastSum31 = 0;\n        long lastSum32\
    \ = 0;\n        long lastSum33 = 0;\n        long lastSum34 = 0;\n        long\
    \ lastSum35 = 0;\n        long lastSum36 = 0;\n        long lastSum37 = 0;\n \
    \       long lastSum38 = 0;\n        long lastSum39 = 0;\n        long lastSum40\
    \ = 0;\n        long lastSum41 = 0;\n        long lastSum42 = 0;\n        long\
    \ lastSum43 = 0;\n        long lastSum44 = 0;\n        long lastSum45 = 0;\n \
    \       long lastSum46 = 0;\n        long lastSum47 = 0;\n        long lastSum48\
    \ = 0;\n        long lastSum49 = 0;\n        long lastSum50 = 0;\n        long\
    \ lastSum51 = 0;\n        long lastSum52 = 0;\n        long lastSum53 = 0;\n \
    \       long lastSum54 = 0;\n        long lastSum55 = 0;\n        long lastSum56\
    \ = 0;\n        long lastSum57 = 0;\n        long lastSum58 = 0;\n        long\
    \ lastSum59 = 0;\n        long lastSum60 = 0;\n        long lastSum61 = 0;\n \
    \       long lastSum62 = 0;\n        long lastSum63 = 0;\n        long lastSum64\
    \ = 0;\n        long lastSum65 = 0;\n        long lastSum66 = 0;\n        long\
    \ lastSum67 = 0;\n        long lastSum68 = 0;\n        long lastSum69 = 0;\n \
    \       long lastSum70 = 0;\n        long lastSum71 = 0;\n        long lastSum72\
    \ = 0;\n        long lastSum73 = 0;\n        \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6ida170t.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmp6ida170t.cs(25,14): warning CS0219: The variable ''lastSum'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(26,14): warning CS0219: The variable ''lastSum2'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(27,14): warning CS0219: The variable ''lastSum3'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(28,14): warning CS0219: The variable ''lastSum4'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(29,14): warning CS0219: The variable ''lastSum5'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(30,14): warning CS0219: The variable ''lastSum6'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(31,14): warning CS0219: The variable ''lastSum7'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(32,14): warning CS0219: The variable ''lastSum8'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(33,14): warning CS0219: The variable ''lastSum9'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(34,14): warning CS0219: The variable ''lastSum10'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(35,14): warning CS0219: The variable ''lastSum11'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(36,14): warning CS0219: The variable ''lastSum12'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(37,14): warning CS0219: The variable ''lastSum13'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(38,14): warning CS0219: The variable ''lastSum14'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(39,14): warning CS0219: The variable ''lastSum15'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(40,14): warning CS0219: The variable ''lastSum16'' is assigned
    but its value is never used

    /tmp/tmp6ida170t.cs(41,14): warning CS0219: The variable ''lastSum17'' is assigned
    but'
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long lastSum = 0;\n        long firstSum\
    \ = 0;\n        long lastFirstSum = 0;\n        long firstLastSum = 0;\n     \
    \   long lastFirstLastSum = 0;\n        long firstLastFirstSum = 0;\n        long\
    \ lastFirstLastFirstSum = 0;\n        long firstLastFirstLastSum = 0;\n      \
    \  long lastFirstLastFirstLastSum = 0;\n        long firstLastFirstLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum\
    \ = 0;\n        long lastFirstLastFirstLastLastSum\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjh24wczb.cs(73,43): error CS1002: ; expected

    '
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        long firstIndex\
    \ = 0;\n        long lastIndex = 0;\n        bool isEvenSum = false;\n       \
    \ bool isOddSum = false;\n        bool isEvenSort = false;\n        bool isOddSort\
    \ = false;\n        bool isEvenSortOddSum = false;\n        bool isOddSortOddSum\
    \ = false;\n        bool isEvenSortOddSumOddSum = false;\n        bool isOddSortOddSumOddSum\
    \ = false;\n        bool isEvenSortOddSumOddSumOddSum = false;\n        bool isOddSortOddSumOddSumOddSum\
    \ = false;\n        bool isEvenSortOddSumOddSumOddSumOddSum = false;\n       \
    \ bool isOddSortOddSumOddSumOddSumOddSum = false;\n        bool isEvenSortOddSumOddSumOddSumOddSumOddSum\
    \ = false;\n        bool isOddSortOddSumOddSumOddSumOddSumOddSum = false;\n  \
    \      bool isEvenSortOddSumOddSumOddSumOddSumOddSumOddSum = false;\n        bool\
    \ isOddSortOddSumOddSumOddSumOddSumOddSumOddSum = false;\n        bool isEvenSortOddSumOddSumOddSumOddSumOddSumOddSum\
    \ = false;\n        bool isOddSortOddSumOddSumOddSumOddSumOddSumOddSum = false;\n\
    \        bool isEvenSortOddSumOddSumOddSumOddSumOddSumOddSumOddSum = false;\n\
    \        bool isOddSortOddSumOddSumOddSumOddSumOddSumOddSumOddSum = false;\n \
    \       bool isEvenSortOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSum = false;\n\
    \        bool isOddSortOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSum = false;\n\
    \        bool isEvenSortOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSum\
    \ = false;\n        bool isOddSortOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSum\
    \ = false;\n        bool isEvenSort\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpme5zz203.cs(52,24): error CS1002: ; expected

    '
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        long firstIndex\
    \ = 0;\n        long lastIndex = 0;\n        foreach (long i in array) {\n   \
    \         sum += i;\n            if (sum % 2 == 1) {\n                temp = sum;\n\
    \                firstIndex = i;\n                lastIndex = i;\n           \
    \ } else {\n                temp = sum;\n                firstIndex = i;\n   \
    \             lastIndex = i;\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        long firstIndexValue = 0;\n        long lastIndexValue\
    \ = 0;\n        long firstIndexValue2 = 0;\n        long lastIndexValue2 = 0;\n\
    \        long firstIndexValue3 = 0;\n        long lastIndexValue3 = 0;\n     \
    \   long firstIndexValue4 = 0;\n        long lastIndexValue4 = 0;\n        long\
    \ firstIndexValue5 = 0;\n        long lastIndexValue5 = 0;\n        long firstIndexValue6\
    \ = 0;\n        long lastIndexValue6 = 0;\n        long firstIndexValue7 = 0;\n\
    \        long lastIndexValue7 = 0;\n        long firstIndexValue8 = 0;\n     \
    \   long lastIndexValue8 = 0;\n        long firstIndexValue9 = 0;\n        long\
    \ lastIndexValue9 = 0;\n        long firstIndexValue10 = 0;\n        long lastIndexValue10\
    \ = 0;\n        long firstIndexValue11 = 0;\n        long lastIndexValue11 = 0;\n\
    \        long firstIndexValue12 = 0;\n        long lastIndexValue12 = 0;\n   \
    \     long firstIndexValue13 = 0;\n        long lastIndexValue13 = 0;\n      \
    \  long firstIndexValue14 = 0;\n        long lastIndexValue14 = 0;\n        long\
    \ firstIndexValue15 = 0;\n        long lastIndexValue15 = 0;\n        long firstIndexValue16\
    \ = 0;\n        long lastIndexValue16 = 0;\n        long firstIndexValue17 = 0;\n\
    \        long lastIndexValue17 = 0;\n        long firstIndexValue18 = 0;\n   \
    \     long lastIndexValue18 = 0;\n        long firstIndexValue19 = 0;\n      \
    \  long lastIndexValue19 = 0;\n        long firstIndexValue20 = 0;\n        long\
    \ lastIndexValue20 = 0;\n        long firstIndexValue21 = 0;\n        long lastIndexValue21\
    \ = 0;\n        long firstIndexValue22 = 0;\n        long lastIndexValue22 = 0;\n\
    \        long firstIndexValue23 = 0;\n        long lastIndexValue23 = 0;\n   \
    \     long firstIndexValue24 = 0;\n        long lastIndexValue24 = 0;\n      \
    \  long firstIndexValue25 = 0;\n        long lastIndexValue25 = 0;\n        long\
    \ firstIndexValue26 = 0;\n        long lastIndexValue26 = 0;\n        long firstIndexValue27\
    \ = 0;\n        long lastIndexValue27 = 0;\n        long firstIndexValue28 = 0;\n\
    \        long lastIndexValue28 = 0;\n        long firstIndexValue29 = 0;\n   \
    \     long lastIndexValue29 = 0;\n        long firstIndex\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzo1m2zdk.cs(99,24): error CS1002: ; expected

    '
  timestamp: 1659800866
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp;\n        bool isEven;\n\
    \        bool isOdd;\n        List<long> result = new List<long>();\n        foreach\
    \ (long i in array) {\n            sum += i;\n        }\n        isEven = sum\
    \ % 2 == 0;\n        isOdd = sum % 2 != 0;\n        if (isEven) {\n          \
    \  temp = array[0];\n            array[0] = array[array.Count - 1];\n        \
    \    array[array.Count - 1] = temp;\n        }\n        if (isOdd) {\n       \
    \     temp = array[0];\n            array[0] = array[array.Count - 1];\n     \
    \       array[array.Count - 1] = temp;\n        }\n        foreach (long i in\
    \ array) {\n            result.Add(i);\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x0005a] in <1aa83e9da20e4151ae8c9529cc653b59>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <1aa83e9da20e4151ae8c9529cc653b59>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x0005a] in <1aa83e9da20e4151ae8c9529cc653b59>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <1aa83e9da20e4151ae8c9529cc653b59>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long temp = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in array) {\n          \
    \  sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n\
    \            sum = sum / 2;\n            while (temp != 0) {\n               \
    \ result.Add(sum);\n                temp = temp / 2;\n            }\n        }\
    \ else {\n            temp = sum;\n            sum = sum / 2;\n            while\
    \ (temp != 0) {\n                result.Add(sum);\n                temp = temp\
    \ / 2;\n            }\n            temp = sum;\n            sum = sum / 2;\n \
    \           while (temp != 0) {\n                result.Add(sum);\n          \
    \      temp = temp / 2;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e33444312ac84710a075dd46d51b3b60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e33444312ac84710a075dd46d51b3b60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
    \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>\
    \ array) {\n        long sum = 0;\n        long sum2 = 0;\n        long sum3 =\
    \ 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n      \
    \  long sum84 = 0;\n        long sum85 = 0;\n        long sum86 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpre5_9vo3.cs(24,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpre5_9vo3.cs(25,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(26,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(27,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(28,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(29,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(30,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(31,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(32,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(33,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(34,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(35,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(36,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(37,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(38,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(39,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(40,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(41,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpre5_9vo3.cs(42,14): warning CS021'
  timestamp: 1659800866
