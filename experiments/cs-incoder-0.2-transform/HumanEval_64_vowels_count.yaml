name: HumanEval_64_vowels_count
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function vowels_count which takes a string representing\n\
  \    // a word as input and returns the number of vowels in the string.\n    //\
  \ Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel,\
  \ but only when it is at the end of the given word.\n    // Example:\n    // >>>\
  \ VowelsCount((\"abcde\"))\n    // (2L)\n    // >>> VowelsCount((\"ACEDY\"))\n \
  \   // (3L)\n    public static long VowelsCount(string s) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(VowelsCount((\"\
  abcde\")) == (2L));\n    Debug.Assert(VowelsCount((\"Alone\")) == (3L));\n    Debug.Assert(VowelsCount((\"\
  key\")) == (2L));\n    Debug.Assert(VowelsCount((\"bye\")) == (1L));\n    Debug.Assert(VowelsCount((\"\
  keY\")) == (2L));\n    Debug.Assert(VowelsCount((\"bYe\")) == (1L));\n    Debug.Assert(VowelsCount((\"\
  ACEDY\")) == (3L));\n    }\n\n}\n"
completions: ["        long vowels = 0;\n        foreach (char c in s) {\n       \
    \     if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n      \
    \          vowels++;\n            }\n        }\n        return vowels;", "   \
    \     long vowels = 0;\n        foreach (char c in s) {\n            if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowels++;\n\
    \            }\n        }\n        return vowels;", "        long vowels = 0;\n\
    \        foreach (char c in s) {\n            if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n                vowels++;\n            }\n \
    \       }\n        return vowels;", "        long vowels = 0;\n        foreach\
    \ (char c in s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n                vowels++;\n            }\n        }\n      \
    \  return vowels;", "        long vowels = 0;\n        foreach (char c in s) {\n\
    \            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                vowels++;\n            }\n        }\n        return vowels;",
  "        long vowels = 0;\n        foreach (char c in s) {\n            if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowels++;\n\
    \            }\n        }\n        return vowels;", "        long vowels = 0;\n\
    \        foreach (char c in s) {\n            if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n                vowels++;\n            }\n \
    \       }\n        return vowels;", "        long vowels = 0;\n        foreach\
    \ (char c in s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n                vowels++;\n            }\n        }\n      \
    \  return vowels;", "        long vowels = 0;\n        foreach (char c in s) {\n\
    \            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                vowels++;\n            }\n        }\n        return vowels;",
  "        long vowelCount = 0;\n        foreach (char c in s) {\n            if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowelCount++;\n\
    \            }\n        }\n        return vowelCount;", "        long vowels =\
    \ 0;\n        foreach (char c in s) {\n            if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n                vowels++;\n           \
    \ }\n        }\n        return vowels;", "        long vowels = 0;\n        foreach\
    \ (char c in s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n                vowels++;\n            }\n        }\n      \
    \  return vowels;", "        long vowels = 0;\n        foreach (char c in s) {\n\
    \            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                vowels++;\n            }\n        }\n        return vowels;",
  "        long vowels = 0;\n        foreach (char c in s) {\n            if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowels++;\n\
    \            }\n        }\n        return vowels;", "        long vowels = 0;\n\
    \        foreach (char c in s) {\n            if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n                vowels++;\n            }\n \
    \       }\n        return vowels;", "        long vowels = 0;\n        foreach\
    \ (char c in s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n                vowels++;\n            }\n        }\n      \
    \  return vowels;", "        long vowels = 0;\n        foreach (char c in s) {\n\
    \            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                vowels++;\n            }\n        }\n        return vowels;",
  "        long vowels = 0;\n        foreach (char c in s) {\n            if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowels++;\n\
    \            }\n        }\n        return vowels;", "        long vowels = 0;\n\
    \        foreach (char c in s) {\n            switch (c) {\n                case\
    \ 'a':\n                case 'e':\n                case 'i':\n               \
    \ case 'o':\n                case 'u':\n                    vowels++;\n      \
    \              break;\n                default:\n                    break;\n\
    \            }\n        }\n        return vowels;", "        long vowels = 0;\n\
    \        foreach (char c in s) {\n            if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n                vowels++;\n            }\n \
    \       }\n        return vowels;"]
stop_tokens:
- "\n    }\n"
