name: HumanEval_61_correct_bracketing
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return True\
  \ if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"\
  (\"))\n    // (false)\n    // >>> CorrectBracketing((\"()\"))\n    // (true)\n \
  \   // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n    // >>> CorrectBracketing((\"\
  )(()\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
  ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
  \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
  ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
  ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n\
  \    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
  ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
  \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
  ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        bool result = true;\n        foreach (char c in brackets) {\n\
    \            if (c == '(') {\n                if (brackets.IndexOf('(', brackets.IndexOf(c)\
    \ + 1) < 0) {\n                    result = false;\n                }\n      \
    \      }\n            if (c == ')') {\n                if (brackets.IndexOf('(',\
    \ brackets.IndexOf(c) + 1) < 0) {\n                    result = false;\n     \
    \           }\n            }\n        }\n        return result;", "        string\
    \ openingBrackets = brackets.Replace(\"(\", \"((\").Replace(\")\", \")(\");\n\
    \        string closingBrackets = brackets.Replace(\"(\", \")(\").Replace(\")\"\
    , \"(\");\n        return openingBrackets.Replace(closingBrackets, \"\") == \"\
    \";", "        string openingBrackets = brackets.Replace(\"(\", \"((\").Replace(\"\
    )\", \"))\");\n        string closingBrackets = brackets.Replace(\"(\", \"((\"\
    ).Replace(\")\", \"))\");\n        string openingBracketsString = openingBrackets.Replace(\"\
    )\", \")(\");\n        string closingBracketsString = closingBrackets.Replace(\"\
    (\", \")(\");\n        string openingBracketsString2 = openingBracketsString.Replace(\"\
    )\", \")(\");\n        string closingBracketsString2 = closingBracketsString.Replace(\"\
    (\", \")(\");\n        string openingBracketsString3 = openingBracketsString2.Replace(\"\
    )\", \")(\");\n        string closingBracketsString3 = closingBracketsString2.Replace(\"\
    (\", \")(\");\n        string openingBracketsString4 = openingBracketsString3.Replace(\"\
    )\", \")(\");\n        string closingBracketsString4 = closingBracketsString3.Replace(\"\
    (\", \")(\");\n        string openingBracketsString5 = openingBracketsString4.Replace(\"\
    )\", \")(\");\n        string closingBracketsString5 = closingBracketsString4.Replace(\"\
    (\", \")(\");\n        string openingBracketsString6 = openingBracketsString5.Replace(\"\
    )\", \")(\");\n        string closingBracketsString6 = closingBracketsString5.Replace(\"\
    (\", \")(\");\n        string openingBracketsString7 = openingBracketsString6.Replace(\"\
    )\", \")(\");\n        string closingBracketsString7 = closingBracketsString6.Replace(\"\
    (\", \")(\");\n        string openingBracketsString8 = openingBracketsString7.Replace(\"\
    )\", \")(\");\n        string closingBracketsString8 = closingBracketsString7.Replace(\"\
    (\", \")(\");\n        string openingBracketsString9 = openingBracketsString8.Replace(\"\
    )\", \")(\");\n        string closingBracketsString9 = closingBracketsString8.Replace(\"\
    (\", \")(\");\n        string openingBracketsString10 = openingBracketsString9.Replace(\"\
    )\", \")(\");\n        string closingBracketsString10 = closingBracketsString9.Replace(\"\
    (\", \")(\");\n        string openingBracketsString11 = openingBracketsString",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c != '(' && c != ')') {\n                result = false;\n           \
    \ }\n        }\n        return result;", "        string openingBrackets = brackets.Replace(\"\
    (\", \"((\").Replace(\")\", \")(\");\n        string closingBrackets = brackets.Replace(\"\
    (\", \")(\").Replace(\")\", \"(\");\n        return openingBrackets.Replace(closingBrackets,\
    \ \"\") == \"\";", "        string openingBrackets = \"\";\n        string closingBrackets\
    \ = \"\";\n        bool allOpeningBracketsAreClosed = true;\n        foreach (char\
    \ c in brackets) {\n            if (c == '(') {\n                openingBrackets\
    \ += c;\n            } else if (c == ')') {\n                closingBrackets +=\
    \ c;\n            } else {\n                allOpeningBracketsAreClosed = false;\n\
    \            }\n        }\n        if (allOpeningBracketsAreClosed) {\n      \
    \      return true;\n        } else {\n            return false;\n        }",
  "        var openingBrackets = new List<char>();\n        var closingBrackets =\
    \ new List<char>();\n        foreach (var c in brackets) {\n            if (c\
    \ == '(') {\n                openingBrackets.Add(c);\n            }\n        \
    \    else if (c == ')') {\n                closingBrackets.Add(c);\n         \
    \   }\n        }\n        if (openingBrackets.Count != closingBrackets.Count)\
    \ {\n            return false;\n        }\n        var openingBracketsSet = new\
    \ HashSet<char>(openingBrackets);\n        var closingBracketsSet = new HashSet<char>(closingBrackets);\n\
    \        return openingBracketsSet.SetEquals(closingBracketsSet);", "        string\
    \ openingBrackets = brackets.Replace(\"(\", \"(\").Replace(\")\", \"(\");\n  \
    \      string closingBrackets = brackets.Replace(\"(\", \")\").Replace(\")\",\
    \ \")\");\n        return openingBrackets.Replace(closingBrackets, \"\") == \"\
    \";", "        bool result = true;\n        foreach (char c in brackets) {\n \
    \           if (c == '(') {\n                if (brackets.IndexOf('(', brackets.IndexOf(c)\
    \ + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n            if (c == ')') {\n             \
    \   if (brackets.IndexOf('(', brackets.IndexOf(c) - 1) < 0) {\n              \
    \      result = false;\n                    break;\n                }\n      \
    \      }\n        }\n        return result;", "        Stack<char> stack = new\
    \ Stack<char>();\n        foreach (char c in brackets) {\n            if (c ==\
    \ '(') {\n                stack.Push(c);\n            } else if (c == ')') {\n\
    \                if (stack.Count > 0) {\n                    char top = stack.Pop();\n\
    \                    if (top != '(') {\n                        return false;\n\
    \                    }\n                } else {\n                    return false;\n\
    \                }\n            }\n        }\n        return stack.Count == 0;",
  "        string openingBrackets = \"\";\n        string closingBrackets = \"\";\n\
    \        foreach (char c in brackets) {\n            if (c == '(') {\n       \
    \         openingBrackets += c;\n            } else if (c == ')') {\n        \
    \        closingBrackets += c;\n            }\n        }\n        if (openingBrackets.Length\
    \ != closingBrackets.Length) {\n            return false;\n        }\n       \
    \ bool allOpeningBracketsAreClosed = false;\n        foreach (char c in openingBrackets)\
    \ {\n            if (c != closingBrackets[closingBrackets.Length - 1]) {\n   \
    \             return false;\n            }\n            allOpeningBracketsAreClosed\
    \ = true;\n        }\n        return allOpeningBracketsAreClosed;", "        bool\
    \ result = true;\n        foreach (char c in brackets) {\n            if (c ==\
    \ '(') {\n                result = result && CorrectBracketing(brackets.Substring(0,\
    \ brackets.IndexOf(c)));\n            }\n            if (c == ')') {\n       \
    \         result = result && CorrectBracketing(brackets.Substring(brackets.IndexOf(c)\
    \ + 1));\n            }\n        }\n        return result;", "        if (brackets\
    \ == null) return false;\n        int openingBrackets = 0;\n        int closingBrackets\
    \ = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '(') openingBrackets++;\n            if (brackets[i] == ')') closingBrackets++;\n\
    \        }\n        return openingBrackets == closingBrackets;", "        string\
    \ openingBrackets = \"\";\n        string closingBrackets = \"\";\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                openingBrackets\
    \ += c;\n            }\n            else if (c == ')') {\n                closingBrackets\
    \ += c;\n            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool allOpeningBracketsAreClosed\
    \ = openingBrackets.All(c => c == ')');\n        bool allClosingBracketsAreOpened\
    \ = closingBrackets.All(c => c == '(');\n        return allOpeningBracketsAreClosed\
    \ && allClosingBracketsAreOpened;", "        string openingBrackets = \"\";\n\
    \        string closingBrackets = \"\";\n        foreach (char c in brackets)\
    \ {\n            if (c == '(') {\n                openingBrackets += c;\n    \
    \        }\n            else if (c == ')') {\n                closingBrackets\
    \ += c;\n            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;", "        string openingBrackets\
    \ = \"\";\n        string closingBrackets = \"\";\n        foreach (char c in\
    \ brackets) {\n            if (c == '(') {\n                openingBrackets +=\
    \ c;\n            } else if (c == ')') {\n                closingBrackets += c;\n\
    \            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;", "        string openingBrackets\
    \ = \"()\";\n        string closingBrackets = \"()\";\n        string openingBracketsSet\
    \ = openingBrackets.ToCharArray().ToList().Distinct().ToArray();\n        string\
    \ closingBracketsSet = closingBrackets.ToCharArray().ToList().Distinct().ToArray();\n\
    \        foreach (char openingBracket in openingBracketsSet) {\n            foreach\
    \ (char closingBracket in closingBracketsSet) {\n                if (openingBracket\
    \ == closingBracket) {\n                    continue;\n                }\n   \
    \             if (brackets.IndexOf(openingBracket) < brackets.IndexOf(closingBracket))\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;", "        string openingBrackets = brackets.Replace(\"\
    (\", \"((\").Replace(\")\", \")(\");\n        string closingBrackets = brackets.Replace(\"\
    (\", \")(\").Replace(\")\", \"(\");\n        return openingBrackets.Replace(closingBrackets,\
    \ \"\") == \"\";", "        if (brackets == null) return false;\n        int openingBrackets\
    \ = 0;\n        int closingBrackets = 0;\n        foreach (char c in brackets)\
    \ {\n            switch (c) {\n                case '(':\n                   \
    \ openingBrackets++;\n                    break;\n                case ')':\n\
    \                    closingBrackets++;\n                    break;\n        \
    \    }\n        }\n        if (openingBrackets != closingBrackets) return false;\n\
    \        return true;", "        string openingBrackets = brackets.Replace(\"\
    (\", \"(\").Replace(\")\", \")\");\n        string closingBrackets = brackets.Replace(\"\
    (\", \"\").Replace(\")\", \"\");\n        bool result = true;\n        for (int\
    \ i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
