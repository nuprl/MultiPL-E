name: HumanEval_132_is_nested
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that takes a string as input which contains\
  \ only square brackets.\n    // The function should return True if and only if there\
  \ is a valid subsequence of brackets \n    // where at least one bracket in the\
  \ subsequence is nested.\n    // >>> IsNested((\"[[]]\"))\n    // (true)\n    //\
  \ >>> IsNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> IsNested((\"[][]\"\
  ))\n    // (false)\n    // >>> IsNested((\"[]\"))\n    // (false)\n    // >>> IsNested((\"\
  [[][]]\"))\n    // (true)\n    // >>> IsNested((\"[[]][[\"))\n    // (true)\n  \
  \  public static bool IsNested(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsNested((\"\
  [[]]\")) == (true));\n    Debug.Assert(IsNested((\"[]]]]]]][[[[[]\")) == (false));\n\
  \    Debug.Assert(IsNested((\"[][]\")) == (false));\n    Debug.Assert(IsNested((\"\
  []\")) == (false));\n    Debug.Assert(IsNested((\"[[[[]]]]\")) == (true));\n   \
  \ Debug.Assert(IsNested((\"[]]]]]]]]]]\")) == (false));\n    Debug.Assert(IsNested((\"\
  [][][[]]\")) == (true));\n    Debug.Assert(IsNested((\"[[]\")) == (false));\n  \
  \  Debug.Assert(IsNested((\"[]]\")) == (false));\n    Debug.Assert(IsNested((\"\
  [[]][[\")) == (true));\n    Debug.Assert(IsNested((\"[[][]]\")) == (true));\n  \
  \  Debug.Assert(IsNested((\"\")) == (false));\n    Debug.Assert(IsNested((\"[[[[[[[[\"\
  )) == (false));\n    Debug.Assert(IsNested((\"]]]]]]]]\")) == (false));\n    }\n\
  \n}\n"
completions: ["        bool isNested = true;\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in str) {\n            if (c == '[') {\n            \
    \    stack.Push(c);\n            } else if (c == '[' && stack.Count > 0) {\n \
    \               char top = stack.Pop();\n                if (top == '[') {\n \
    \                   isNested = true;\n                } else {\n             \
    \       isNested = false;\n                }\n            }\n        }\n     \
    \   return isNested;", "        bool result = false;\n        Stack<char> stack\
    \ = new Stack<char>();\n        foreach (char c in str) {\n            if (c ==\
    \ '[') {\n                stack.Push(c);\n            } else if (c == ']') {\n\
    \                if (stack.Count > 0) {\n                    char top = stack.Pop();\n\
    \                    if (top == '[') {\n                        stack.Push(top);\n\
    \                    } else if (top == ']') {\n                        result\
    \ = true;\n                    }\n                }\n            }\n        }\n\
    \        return result;", "        bool result = false;\n        Stack<char> stack\
    \ = new Stack<char>();\n        foreach (char c in str) {\n            if (c ==\
    \ '[') {\n                stack.Push(c);\n            } else if (c == '[' && stack.Count\
    \ > 0) {\n                char top = stack.Pop();\n                if (top ==\
    \ '[') {\n                    stack.Push(c);\n                } else if (top ==\
    \ '[' && stack.Count > 0) {\n                    char top = stack.Pop();\n   \
    \                 if (top == '[') {\n                        stack.Push(c);\n\
    \                    } else if (top == '[' && stack.Count > 0) {\n           \
    \             char top = stack.Pop();\n                        if (top == '[')\
    \ {\n                            stack.Push(c);\n                        } else\
    \ if (top == '[' && stack.Count > 0) {\n                            char top =\
    \ stack.Pop();\n                            if (top == '[') {\n              \
    \                  stack.Push(c);\n                            } else if (top\
    \ == '[' && stack.Count > 0) {\n                                char top = stack.Pop();\n\
    \                                if (top == '[') {\n                         \
    \           stack.Push(c);\n                                } else if (top ==\
    \ '[' && stack.Count > 0) {\n                                    char top = stack.Pop();\n\
    \                                    if (top == '[') {\n                     \
    \                   stack.Push(c);\n                                    } else\
    \ if (top == '[' && stack.Count > 0) {\n                                     \
    \   char top = stack.Pop();\n                                        if (top ==\
    \ '[') {\n                                            stack.Push(c);\n       \
    \                                 } else if (top == '[' && stack.Count > 0) {\n\
    \                                            char top = stack.Pop();\n       \
    \                                     if (top == '[') {\n                    \
    \                            stack.Push(c);\n                                \
    \            } else if (top == '[' && stack.Count > 0) {\n                   \
    \                             char top = stack.Pop();\n                      \
    \                          if (top == '[') {\n                               \
    \                     stack.Push(c);\n                                       \
    \         } else if (top == '[' && stack.Count > 0) {\n                      \
    \                              char top = stack.Pop();\n                     \
    \                               if (top == '[') {\n                          \
    \                              stack.Push(c);\n                              \
    \                      } else if (top == '[' && stack.Count > 0) {\n         \
    \                                               char top = stack.Pop();\n    \
    \                                                    if (top == '[') {\n     \
    \                                                       stack.Push(c);\n     \
    \                                                   } else if (top == '[' && stack.Count\
    \ > 0) {\n                                                            char top\
    \ = stack.Pop();\n                                                           \
    \ if (top == '[') {\n                                                        \
    \        stack.Push(c);\n                                                    \
    \        } else if (top == '[' && stack.Count > 0) {\n                       \
    \                                         char top = stack.Pop();\n          \
    \                                                      if (top == '[') {\n   \
    \                                                                 stack.Push(c);\n\
    \                                                                } else if (top\
    \ == '[' && stack.Count > 0) {\n                                             \
    \                       char top = stack.Pop();\n                            \
    \                                        if (top == '[') {\n                 \
    \                                                       stack.Push(c);\n     \
    \                                                               } else if (top\
    \ == '[' && stack.Count > 0) {\n                                             \
    \                           char top = stack.Pop();\n                        \
    \                                                                            \
    \    if (top == '[') {\n                                                     \
    \                       stack.Push(c);\n                                     \
    \                                   } else if (top == '[' && stack.Count > 0)\
    \ {\n                                                                        \
    \    char top = stack.Pop();\n                                               \
    \                             if (top == '['", "        bool result = false;\n\
    \        Stack<char> stack = new Stack<char>();\n        foreach (char c in str)\
    \ {\n            if (c == '[') {\n                stack.Push(c);\n           \
    \ } else if (c == '[' && stack.Count > 0) {\n                char top = stack.Pop();\n\
    \                if (top == '[') {\n                    stack.Push(c);\n     \
    \           } else if (top == '[' && stack.Count > 0) {\n                    char\
    \ top = stack.Pop();\n                    if (top == '[') {\n                \
    \        stack.Push(c);\n                    } else if (top == '[' && stack.Count\
    \ > 0) {\n                        char top = stack.Pop();\n                  \
    \      if (top == '[') {\n                            stack.Push(c);\n       \
    \                 } else if (top == '[' && stack.Count > 0) {\n              \
    \              char top = stack.Pop();\n                            if (top ==\
    \ '[') {\n                                stack.Push(c);\n                   \
    \         } else if (top == '[' && stack.Count > 0) {\n                      \
    \          char top = stack.Pop();\n                                if (top ==\
    \ '[') {\n                                    stack.Push(c);\n               \
    \                 } else if (top == '[' && stack.Count > 0) {\n              \
    \                      char top = stack.Pop();\n                             \
    \       if (top == '[') {\n                                        stack.Push(c);\n\
    \                                    } else if (top == '[' && stack.Count > 0)\
    \ {\n                                        char top = stack.Pop();\n       \
    \                                 if (top == '[') {\n                        \
    \                    stack.Push(c);\n                                        }\
    \ else if (top == '[' && stack.Count > 0) {\n                                \
    \            char top = stack.Pop();\n                                       \
    \     if (top == '[') {\n                                                stack.Push(c);\n\
    \                                            }\n                             \
    \           }\n                                    }\n                       \
    \         }\n                            }\n                        }\n      \
    \              }\n                }\n            } else if (c == ']') {\n    \
    \            char top = stack.Pop();\n                if (top == '[') {\n    \
    \                stack.Push(c);\n                } else if (top == '[' && stack.Count\
    \ > 0) {\n                    char top = stack.Pop();\n                    if\
    \ (top == '[') {\n                        stack.Push(c);\n                   \
    \ } else if (top == '[' && stack.Count > 0) {\n                        char top\
    \ = stack.Pop();\n                        if (top == '[') {\n                \
    \            stack.Push(c);\n                        } else if (top == '[' &&\
    \ stack.Count > 0) {\n                            char top = stack.Pop();\n  \
    \                          if (top == '[') {\n                               \
    \ stack.Push(c);\n                            } else if (top == '[' && stack.Count\
    \ > 0) {\n                                char top = stack.Pop();\n          \
    \                      if (top == '[') {\n                                   \
    \ stack.Push(c);\n                                } else if (top == '[' && stack.Count\
    \ > 0) {\n                                    char top = stack.Pop();\n      \
    \                              if (top == '[') {\n                           \
    \             stack.Push(c);\n                                    } else if (top\
    \ == '[' && stack.Count > 0) {\n                                        char top\
    \ = stack.Pop();\n                                        if (top == '[') {\n\
    \                                            stack.Push(c);\n                \
    \                        }\n                                    }\n          \
    \                      }\n                            }\n                    \
    \    }\n                    }\n                }\n            }\n        }\n \
    \       result = stack.", "        bool result = false;\n        Stack<char> stack\
    \ = new Stack<char>();\n        foreach (char c in str) {\n            if (c ==\
    \ '[') {\n                stack.Push(c);\n            } else if (c == ']') {\n\
    \                if (stack.Count == 0) {\n                    result = true;\n\
    \                } else {\n                    stack.Pop();\n                }\n\
    \            }\n        }\n        return result;", "        bool result = false;\n\
    \        Stack<char> stack = new Stack<char>();\n        foreach (char c in str)\
    \ {\n            if (c == '[') {\n                stack.Push(c);\n           \
    \ } else if (c == ']') {\n                if (stack.Count > 0) {\n           \
    \         char top = stack.Pop();\n                    if (top == '[') {\n   \
    \                     stack.Push(c);\n                    } else if (top == ']')\
    \ {\n                        result = true;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        string pattern = @\"\\[(\\[[^\\]]*\\]\\])*\\]\";\n      \
    \  Regex regex = new Regex(pattern);\n        Match match = regex.Match(str);\n\
    \        return match.Success;", "        bool isNested = true;\n        Stack<char>\
    \ stack = new Stack<char>();\n        foreach (char c in str) {\n            if\
    \ (c == '[') {\n                stack.Push(c);\n            } else if (c == ']')\
    \ {\n                if (stack.Count > 0) {\n                    char top = stack.Pop();\n\
    \                    if (top != '[') {\n                        isNested = false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ isNested;", "        bool result = false;\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in str) {\n            if (c == '[') {\n            \
    \    stack.Push(c);\n            } else if (c == ']') {\n                if (stack.Count\
    \ > 0) {\n                    char top = stack.Pop();\n                    if\
    \ (top == '[') {\n                        stack.Push(c);\n                   \
    \ } else if (top == ']') {\n                        result = true;\n         \
    \               break;\n                    }\n                }\n           \
    \ }\n        }\n        return result;", "        bool isNested = true;\n    \
    \    Stack<char> stack = new Stack<char>();\n        foreach (char c in str) {\n\
    \            if (c == '[') {\n                stack.Push(c);\n            } else\
    \ if (c == ']') {\n                if (stack.Count > 0) {\n                  \
    \  char top = stack.Pop();\n                    if (top == '[') {\n          \
    \              isNested = false;\n                    }\n                }\n \
    \           }\n        }\n        return isNested;", "        bool result = false;\n\
    \        Stack<char> stack = new Stack<char>();\n        foreach (char c in str)\
    \ {\n            if (c == '[') {\n                stack.Push(c);\n           \
    \ } else if (c == ']') {\n                if (stack.Count > 0) {\n           \
    \         char top = stack.Pop();\n                    if (top == '[') {\n   \
    \                     stack.Push(c);\n                    } else if (top == ']')\
    \ {\n                        result = true;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        bool result = false;\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in str) {\n            if (c == '[') {\n            \
    \    stack.Push(c);\n            } else if (c == ']') {\n                if (stack.Count\
    \ > 0) {\n                    char top = stack.Pop();\n                    if\
    \ (top == '[') {\n                        stack.Push(c);\n                   \
    \ } else if (top == ']') {\n                        result = true;\n         \
    \           }\n                }\n            }\n        }\n        return result;",
  "        bool result = false;\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in str) {\n            if (c == '[') {\n            \
    \    stack.Push(c);\n            } else if (c == ']') {\n                if (stack.Count\
    \ > 0) {\n                    char top = stack.Pop();\n                    if\
    \ (top == '[') {\n                        stack.Push(c);\n                   \
    \ } else if (top == ']') {\n                        result = true;\n         \
    \           }\n                }\n            }\n        }\n        return result;",
  "        bool result = false;\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in str) {\n            if (c == '[') {\n            \
    \    stack.Push(c);\n            } else if (c == ']') {\n                if (stack.Count\
    \ > 0) {\n                    char top = stack.Pop();\n                    if\
    \ (top == '[') {\n                        stack.Push(c);\n                   \
    \ } else if (top == ']') {\n                        result = true;\n         \
    \           }\n                }\n            }\n        }\n        return result;",
  "        bool isNested = true;\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in str) {\n            if (c == '[') {\n            \
    \    stack.Push(c);\n            } else if (c == ']') {\n                if (stack.Count\
    \ > 0) {\n                    char top = stack.Pop();\n                    if\
    \ (top != '[') {\n                        isNested = false;\n                \
    \    }\n                }\n            }\n        }\n        return isNested;",
  "        bool isNested = true;\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in str) {\n            if (c == '[') {\n            \
    \    stack.Push(c);\n            } else if (c == '[' && stack.Count > 0) {\n \
    \               isNested = false;\n                while (stack.Count > 0) {\n\
    \                    char top = stack.Pop();\n                    if (top == '[')\
    \ {\n                        stack.Push(top);\n                    } else if (top\
    \ == ']') {\n                        isNested = true;\n                      \
    \  break;\n                    }\n                }\n            }\n        }\n\
    \        return isNested;", "        bool result = false;\n        Stack<char>\
    \ stack = new Stack<char>();\n        foreach (char c in str) {\n            if\
    \ (c == '[') {\n                stack.Push(c);\n            } else if (c == ']')\
    \ {\n                if (stack.Count > 0) {\n                    char top = stack.Pop();\n\
    \                    if (top == '[') {\n                        stack.Push(c);\n\
    \                    } else if (top == ']') {\n                        result\
    \ = true;\n                        break;\n                    }\n           \
    \     }\n            }\n        }\n        return result;", "        bool isNested\
    \ = true;\n        Stack<char> stack = new Stack<char>();\n        foreach (char\
    \ c in str) {\n            if (c == '[') {\n                stack.Push(c);\n \
    \           } else if (c == ']') {\n                if (stack.Count > 0) {\n \
    \                   char top = stack.Pop();\n                    if (top != '[')\
    \ {\n                        isNested = false;\n                    }\n      \
    \          }\n            }\n        }\n        return isNested;", "        bool\
    \ result = false;\n        Stack<char> stack = new Stack<char>();\n        foreach\
    \ (char c in str) {\n            if (c == '[') {\n                stack.Push(c);\n\
    \            } else if (c == ']') {\n                if (stack.Count > 0) {\n\
    \                    char top = stack.Pop();\n                    if (top == '[')\
    \ {\n                        stack.Push(c);\n                    } else if (top\
    \ == ']') {\n                        result = true;\n                    }\n \
    \               }\n            }\n        }\n        return result;", "      \
    \  bool result = false;\n        Stack<char> stack = new Stack<char>();\n    \
    \    foreach (char c in str) {\n            if (c == '[') {\n                stack.Push(c);\n\
    \            } else if (c == ']') {\n                if (stack.Count > 0) {\n\
    \                    char top = stack.Pop();\n                    if (top == '[')\
    \ {\n                        stack.Push(c);\n                    } else if (top\
    \ == ']') {\n                        result = true;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;"]
stop_tokens:
- "\n    }\n"
